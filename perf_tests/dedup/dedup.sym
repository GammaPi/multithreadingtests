
dedup-lockperf:     file format elf64-x86-64


Disassembly of section .init:

0000000000406c38 <_init>:
  406c38:	48 83 ec 08          	sub    $0x8,%rsp
  406c3c:	48 8b 05 b5 13 25 00 	mov    0x2513b5(%rip),%rax        # 657ff8 <_DYNAMIC+0x1f0>
  406c43:	48 85 c0             	test   %rax,%rax
  406c46:	74 05                	je     406c4d <_init+0x15>
  406c48:	e8 73 00 00 00       	callq  406cc0 <__gmon_start__@plt>
  406c4d:	e8 de df 01 00       	callq  424c30 <OPENSSL_cpuid_setup>
  406c52:	48 83 c4 08          	add    $0x8,%rsp
  406c56:	c3                   	retq   

Disassembly of section .plt:

0000000000406c60 <printf@plt-0x10>:
  406c60:	ff 35 a2 13 25 00    	pushq  0x2513a2(%rip)        # 658008 <_GLOBAL_OFFSET_TABLE_+0x8>
  406c66:	ff 25 a4 13 25 00    	jmpq   *0x2513a4(%rip)        # 658010 <_GLOBAL_OFFSET_TABLE_+0x10>
  406c6c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000406c70 <printf@plt>:
  406c70:	ff 25 a2 13 25 00    	jmpq   *0x2513a2(%rip)        # 658018 <_GLOBAL_OFFSET_TABLE_+0x18>
  406c76:	68 00 00 00 00       	pushq  $0x0
  406c7b:	e9 e0 ff ff ff       	jmpq   406c60 <_init+0x28>

0000000000406c80 <memset@plt>:
  406c80:	ff 25 9a 13 25 00    	jmpq   *0x25139a(%rip)        # 658020 <_GLOBAL_OFFSET_TABLE_+0x20>
  406c86:	68 01 00 00 00       	pushq  $0x1
  406c8b:	e9 d0 ff ff ff       	jmpq   406c60 <_init+0x28>

0000000000406c90 <ftell@plt>:
  406c90:	ff 25 92 13 25 00    	jmpq   *0x251392(%rip)        # 658028 <_GLOBAL_OFFSET_TABLE_+0x28>
  406c96:	68 02 00 00 00       	pushq  $0x2
  406c9b:	e9 c0 ff ff ff       	jmpq   406c60 <_init+0x28>

0000000000406ca0 <close@plt>:
  406ca0:	ff 25 8a 13 25 00    	jmpq   *0x25138a(%rip)        # 658030 <_GLOBAL_OFFSET_TABLE_+0x30>
  406ca6:	68 03 00 00 00       	pushq  $0x3
  406cab:	e9 b0 ff ff ff       	jmpq   406c60 <_init+0x28>

0000000000406cb0 <abort@plt>:
  406cb0:	ff 25 82 13 25 00    	jmpq   *0x251382(%rip)        # 658038 <_GLOBAL_OFFSET_TABLE_+0x38>
  406cb6:	68 04 00 00 00       	pushq  $0x4
  406cbb:	e9 a0 ff ff ff       	jmpq   406c60 <_init+0x28>

0000000000406cc0 <__gmon_start__@plt>:
  406cc0:	ff 25 7a 13 25 00    	jmpq   *0x25137a(%rip)        # 658040 <_GLOBAL_OFFSET_TABLE_+0x40>
  406cc6:	68 05 00 00 00       	pushq  $0x5
  406ccb:	e9 90 ff ff ff       	jmpq   406c60 <_init+0x28>

0000000000406cd0 <puts@plt>:
  406cd0:	ff 25 72 13 25 00    	jmpq   *0x251372(%rip)        # 658048 <_GLOBAL_OFFSET_TABLE_+0x48>
  406cd6:	68 06 00 00 00       	pushq  $0x6
  406cdb:	e9 80 ff ff ff       	jmpq   406c60 <_init+0x28>

0000000000406ce0 <fseek@plt>:
  406ce0:	ff 25 6a 13 25 00    	jmpq   *0x25136a(%rip)        # 658050 <_GLOBAL_OFFSET_TABLE_+0x50>
  406ce6:	68 07 00 00 00       	pushq  $0x7
  406ceb:	e9 70 ff ff ff       	jmpq   406c60 <_init+0x28>

0000000000406cf0 <pthread_cond_signal@plt>:
  406cf0:	ff 25 62 13 25 00    	jmpq   *0x251362(%rip)        # 658058 <_GLOBAL_OFFSET_TABLE_+0x58>
  406cf6:	68 08 00 00 00       	pushq  $0x8
  406cfb:	e9 60 ff ff ff       	jmpq   406c60 <_init+0x28>

0000000000406d00 <__isoc99_sscanf@plt>:
  406d00:	ff 25 5a 13 25 00    	jmpq   *0x25135a(%rip)        # 658060 <_GLOBAL_OFFSET_TABLE_+0x60>
  406d06:	68 09 00 00 00       	pushq  $0x9
  406d0b:	e9 50 ff ff ff       	jmpq   406c60 <_init+0x28>

0000000000406d10 <pthread_mutex_init@plt>:
  406d10:	ff 25 52 13 25 00    	jmpq   *0x251352(%rip)        # 658068 <_GLOBAL_OFFSET_TABLE_+0x68>
  406d16:	68 0a 00 00 00       	pushq  $0xa
  406d1b:	e9 40 ff ff ff       	jmpq   406c60 <_init+0x28>

0000000000406d20 <exit@plt>:
  406d20:	ff 25 4a 13 25 00    	jmpq   *0x25134a(%rip)        # 658070 <_GLOBAL_OFFSET_TABLE_+0x70>
  406d26:	68 0b 00 00 00       	pushq  $0xb
  406d2b:	e9 30 ff ff ff       	jmpq   406c60 <_init+0x28>

0000000000406d30 <getopt@plt>:
  406d30:	ff 25 42 13 25 00    	jmpq   *0x251342(%rip)        # 658078 <_GLOBAL_OFFSET_TABLE_+0x78>
  406d36:	68 0c 00 00 00       	pushq  $0xc
  406d3b:	e9 20 ff ff ff       	jmpq   406c60 <_init+0x28>

0000000000406d40 <read@plt>:
  406d40:	ff 25 3a 13 25 00    	jmpq   *0x25133a(%rip)        # 658080 <_GLOBAL_OFFSET_TABLE_+0x80>
  406d46:	68 0d 00 00 00       	pushq  $0xd
  406d4b:	e9 10 ff ff ff       	jmpq   406c60 <_init+0x28>

0000000000406d50 <malloc@plt>:
  406d50:	ff 25 32 13 25 00    	jmpq   *0x251332(%rip)        # 658088 <_GLOBAL_OFFSET_TABLE_+0x88>
  406d56:	68 0e 00 00 00       	pushq  $0xe
  406d5b:	e9 00 ff ff ff       	jmpq   406c60 <_init+0x28>

0000000000406d60 <__libc_start_main@plt>:
  406d60:	ff 25 2a 13 25 00    	jmpq   *0x25132a(%rip)        # 658090 <_GLOBAL_OFFSET_TABLE_+0x90>
  406d66:	68 0f 00 00 00       	pushq  $0xf
  406d6b:	e9 f0 fe ff ff       	jmpq   406c60 <_init+0x28>

0000000000406d70 <getpid@plt>:
  406d70:	ff 25 22 13 25 00    	jmpq   *0x251322(%rip)        # 658098 <_GLOBAL_OFFSET_TABLE_+0x98>
  406d76:	68 10 00 00 00       	pushq  $0x10
  406d7b:	e9 e0 fe ff ff       	jmpq   406c60 <_init+0x28>

0000000000406d80 <pthread_mutex_lock@plt>:
  406d80:	ff 25 1a 13 25 00    	jmpq   *0x25131a(%rip)        # 6580a0 <_GLOBAL_OFFSET_TABLE_+0xa0>
  406d86:	68 11 00 00 00       	pushq  $0x11
  406d8b:	e9 d0 fe ff ff       	jmpq   406c60 <_init+0x28>

0000000000406d90 <fgets@plt>:
  406d90:	ff 25 12 13 25 00    	jmpq   *0x251312(%rip)        # 6580a8 <_GLOBAL_OFFSET_TABLE_+0xa8>
  406d96:	68 12 00 00 00       	pushq  $0x12
  406d9b:	e9 c0 fe ff ff       	jmpq   406c60 <_init+0x28>

0000000000406da0 <free@plt>:
  406da0:	ff 25 0a 13 25 00    	jmpq   *0x25130a(%rip)        # 6580b0 <_GLOBAL_OFFSET_TABLE_+0xb0>
  406da6:	68 13 00 00 00       	pushq  $0x13
  406dab:	e9 b0 fe ff ff       	jmpq   406c60 <_init+0x28>

0000000000406db0 <strlen@plt>:
  406db0:	ff 25 02 13 25 00    	jmpq   *0x251302(%rip)        # 6580b8 <_GLOBAL_OFFSET_TABLE_+0xb8>
  406db6:	68 14 00 00 00       	pushq  $0x14
  406dbb:	e9 a0 fe ff ff       	jmpq   406c60 <_init+0x28>

0000000000406dc0 <ferror@plt>:
  406dc0:	ff 25 fa 12 25 00    	jmpq   *0x2512fa(%rip)        # 6580c0 <_GLOBAL_OFFSET_TABLE_+0xc0>
  406dc6:	68 15 00 00 00       	pushq  $0x15
  406dcb:	e9 90 fe ff ff       	jmpq   406c60 <_init+0x28>

0000000000406dd0 <__xstat@plt>:
  406dd0:	ff 25 f2 12 25 00    	jmpq   *0x2512f2(%rip)        # 6580c8 <_GLOBAL_OFFSET_TABLE_+0xc8>
  406dd6:	68 16 00 00 00       	pushq  $0x16
  406ddb:	e9 80 fe ff ff       	jmpq   406c60 <_init+0x28>

0000000000406de0 <pthread_cond_init@plt>:
  406de0:	ff 25 ea 12 25 00    	jmpq   *0x2512ea(%rip)        # 6580d0 <_GLOBAL_OFFSET_TABLE_+0xd0>
  406de6:	68 17 00 00 00       	pushq  $0x17
  406deb:	e9 70 fe ff ff       	jmpq   406c60 <_init+0x28>

0000000000406df0 <__vfprintf_chk@plt>:
  406df0:	ff 25 e2 12 25 00    	jmpq   *0x2512e2(%rip)        # 6580d8 <_GLOBAL_OFFSET_TABLE_+0xd8>
  406df6:	68 18 00 00 00       	pushq  $0x18
  406dfb:	e9 60 fe ff ff       	jmpq   406c60 <_init+0x28>

0000000000406e00 <pthread_mutex_destroy@plt>:
  406e00:	ff 25 da 12 25 00    	jmpq   *0x2512da(%rip)        # 6580e0 <_GLOBAL_OFFSET_TABLE_+0xe0>
  406e06:	68 19 00 00 00       	pushq  $0x19
  406e0b:	e9 50 fe ff ff       	jmpq   406c60 <_init+0x28>

0000000000406e10 <__ctype_b_loc@plt>:
  406e10:	ff 25 d2 12 25 00    	jmpq   *0x2512d2(%rip)        # 6580e8 <_GLOBAL_OFFSET_TABLE_+0xe8>
  406e16:	68 1a 00 00 00       	pushq  $0x1a
  406e1b:	e9 40 fe ff ff       	jmpq   406c60 <_init+0x28>

0000000000406e20 <pthread_create@plt>:
  406e20:	ff 25 ca 12 25 00    	jmpq   *0x2512ca(%rip)        # 6580f0 <_GLOBAL_OFFSET_TABLE_+0xf0>
  406e26:	68 1b 00 00 00       	pushq  $0x1b
  406e2b:	e9 30 fe ff ff       	jmpq   406c60 <_init+0x28>

0000000000406e30 <strerror@plt>:
  406e30:	ff 25 c2 12 25 00    	jmpq   *0x2512c2(%rip)        # 6580f8 <_GLOBAL_OFFSET_TABLE_+0xf8>
  406e36:	68 1c 00 00 00       	pushq  $0x1c
  406e3b:	e9 20 fe ff ff       	jmpq   406c60 <_init+0x28>

0000000000406e40 <atoi@plt>:
  406e40:	ff 25 ba 12 25 00    	jmpq   *0x2512ba(%rip)        # 658100 <_GLOBAL_OFFSET_TABLE_+0x100>
  406e46:	68 1d 00 00 00       	pushq  $0x1d
  406e4b:	e9 10 fe ff ff       	jmpq   406c60 <_init+0x28>

0000000000406e50 <fchmod@plt>:
  406e50:	ff 25 b2 12 25 00    	jmpq   *0x2512b2(%rip)        # 658108 <_GLOBAL_OFFSET_TABLE_+0x108>
  406e56:	68 1e 00 00 00       	pushq  $0x1e
  406e5b:	e9 00 fe ff ff       	jmpq   406c60 <_init+0x28>

0000000000406e60 <memmove@plt>:
  406e60:	ff 25 aa 12 25 00    	jmpq   *0x2512aa(%rip)        # 658110 <_GLOBAL_OFFSET_TABLE_+0x110>
  406e66:	68 1f 00 00 00       	pushq  $0x1f
  406e6b:	e9 f0 fd ff ff       	jmpq   406c60 <_init+0x28>

0000000000406e70 <strchr@plt>:
  406e70:	ff 25 a2 12 25 00    	jmpq   *0x2512a2(%rip)        # 658118 <_GLOBAL_OFFSET_TABLE_+0x118>
  406e76:	68 20 00 00 00       	pushq  $0x20
  406e7b:	e9 e0 fd ff ff       	jmpq   406c60 <_init+0x28>

0000000000406e80 <fread@plt>:
  406e80:	ff 25 9a 12 25 00    	jmpq   *0x25129a(%rip)        # 658120 <_GLOBAL_OFFSET_TABLE_+0x120>
  406e86:	68 21 00 00 00       	pushq  $0x21
  406e8b:	e9 d0 fd ff ff       	jmpq   406c60 <_init+0x28>

0000000000406e90 <getenv@plt>:
  406e90:	ff 25 92 12 25 00    	jmpq   *0x251292(%rip)        # 658128 <_GLOBAL_OFFSET_TABLE_+0x128>
  406e96:	68 22 00 00 00       	pushq  $0x22
  406e9b:	e9 c0 fd ff ff       	jmpq   406c60 <_init+0x28>

0000000000406ea0 <__errno_location@plt>:
  406ea0:	ff 25 8a 12 25 00    	jmpq   *0x25128a(%rip)        # 658130 <_GLOBAL_OFFSET_TABLE_+0x130>
  406ea6:	68 23 00 00 00       	pushq  $0x23
  406eab:	e9 b0 fd ff ff       	jmpq   406c60 <_init+0x28>

0000000000406eb0 <qsort@plt>:
  406eb0:	ff 25 82 12 25 00    	jmpq   *0x251282(%rip)        # 658138 <_GLOBAL_OFFSET_TABLE_+0x138>
  406eb6:	68 24 00 00 00       	pushq  $0x24
  406ebb:	e9 a0 fd ff ff       	jmpq   406c60 <_init+0x28>

0000000000406ec0 <__stack_chk_fail@plt>:
  406ec0:	ff 25 7a 12 25 00    	jmpq   *0x25127a(%rip)        # 658140 <_GLOBAL_OFFSET_TABLE_+0x140>
  406ec6:	68 25 00 00 00       	pushq  $0x25
  406ecb:	e9 90 fd ff ff       	jmpq   406c60 <_init+0x28>

0000000000406ed0 <strcmp@plt>:
  406ed0:	ff 25 72 12 25 00    	jmpq   *0x251272(%rip)        # 658148 <_GLOBAL_OFFSET_TABLE_+0x148>
  406ed6:	68 26 00 00 00       	pushq  $0x26
  406edb:	e9 80 fd ff ff       	jmpq   406c60 <_init+0x28>

0000000000406ee0 <__memset_chk@plt>:
  406ee0:	ff 25 6a 12 25 00    	jmpq   *0x25126a(%rip)        # 658150 <_GLOBAL_OFFSET_TABLE_+0x150>
  406ee6:	68 27 00 00 00       	pushq  $0x27
  406eeb:	e9 70 fd ff ff       	jmpq   406c60 <_init+0x28>

0000000000406ef0 <strcpy@plt>:
  406ef0:	ff 25 62 12 25 00    	jmpq   *0x251262(%rip)        # 658158 <_GLOBAL_OFFSET_TABLE_+0x158>
  406ef6:	68 28 00 00 00       	pushq  $0x28
  406efb:	e9 60 fd ff ff       	jmpq   406c60 <_init+0x28>

0000000000406f00 <memcmp@plt>:
  406f00:	ff 25 5a 12 25 00    	jmpq   *0x25125a(%rip)        # 658160 <_GLOBAL_OFFSET_TABLE_+0x160>
  406f06:	68 29 00 00 00       	pushq  $0x29
  406f0b:	e9 50 fd ff ff       	jmpq   406c60 <_init+0x28>

0000000000406f10 <feof@plt>:
  406f10:	ff 25 52 12 25 00    	jmpq   *0x251252(%rip)        # 658168 <_GLOBAL_OFFSET_TABLE_+0x168>
  406f16:	68 2a 00 00 00       	pushq  $0x2a
  406f1b:	e9 40 fd ff ff       	jmpq   406c60 <_init+0x28>

0000000000406f20 <fclose@plt>:
  406f20:	ff 25 4a 12 25 00    	jmpq   *0x25124a(%rip)        # 658170 <_GLOBAL_OFFSET_TABLE_+0x170>
  406f26:	68 2b 00 00 00       	pushq  $0x2b
  406f2b:	e9 30 fd ff ff       	jmpq   406c60 <_init+0x28>

0000000000406f30 <strncpy@plt>:
  406f30:	ff 25 42 12 25 00    	jmpq   *0x251242(%rip)        # 658178 <_GLOBAL_OFFSET_TABLE_+0x178>
  406f36:	68 2c 00 00 00       	pushq  $0x2c
  406f3b:	e9 20 fd ff ff       	jmpq   406c60 <_init+0x28>

0000000000406f40 <pthread_mutex_unlock@plt>:
  406f40:	ff 25 3a 12 25 00    	jmpq   *0x25123a(%rip)        # 658180 <_GLOBAL_OFFSET_TABLE_+0x180>
  406f46:	68 2d 00 00 00       	pushq  $0x2d
  406f4b:	e9 10 fd ff ff       	jmpq   406c60 <_init+0x28>

0000000000406f50 <fopen64@plt>:
  406f50:	ff 25 32 12 25 00    	jmpq   *0x251232(%rip)        # 658188 <_GLOBAL_OFFSET_TABLE_+0x188>
  406f56:	68 2e 00 00 00       	pushq  $0x2e
  406f5b:	e9 00 fd ff ff       	jmpq   406c60 <_init+0x28>

0000000000406f60 <fwrite@plt>:
  406f60:	ff 25 2a 12 25 00    	jmpq   *0x25122a(%rip)        # 658190 <_GLOBAL_OFFSET_TABLE_+0x190>
  406f66:	68 2f 00 00 00       	pushq  $0x2f
  406f6b:	e9 f0 fc ff ff       	jmpq   406c60 <_init+0x28>

0000000000406f70 <realloc@plt>:
  406f70:	ff 25 22 12 25 00    	jmpq   *0x251222(%rip)        # 658198 <_GLOBAL_OFFSET_TABLE_+0x198>
  406f76:	68 30 00 00 00       	pushq  $0x30
  406f7b:	e9 e0 fc ff ff       	jmpq   406c60 <_init+0x28>

0000000000406f80 <perror@plt>:
  406f80:	ff 25 1a 12 25 00    	jmpq   *0x25121a(%rip)        # 6581a0 <_GLOBAL_OFFSET_TABLE_+0x1a0>
  406f86:	68 31 00 00 00       	pushq  $0x31
  406f8b:	e9 d0 fc ff ff       	jmpq   406c60 <_init+0x28>

0000000000406f90 <fprintf@plt>:
  406f90:	ff 25 12 12 25 00    	jmpq   *0x251212(%rip)        # 6581a8 <_GLOBAL_OFFSET_TABLE_+0x1a8>
  406f96:	68 32 00 00 00       	pushq  $0x32
  406f9b:	e9 c0 fc ff ff       	jmpq   406c60 <_init+0x28>

0000000000406fa0 <localtime@plt>:
  406fa0:	ff 25 0a 12 25 00    	jmpq   *0x25120a(%rip)        # 6581b0 <_GLOBAL_OFFSET_TABLE_+0x1b0>
  406fa6:	68 33 00 00 00       	pushq  $0x33
  406fab:	e9 b0 fc ff ff       	jmpq   406c60 <_init+0x28>

0000000000406fb0 <pthread_cond_wait@plt>:
  406fb0:	ff 25 02 12 25 00    	jmpq   *0x251202(%rip)        # 6581b8 <_GLOBAL_OFFSET_TABLE_+0x1b8>
  406fb6:	68 34 00 00 00       	pushq  $0x34
  406fbb:	e9 a0 fc ff ff       	jmpq   406c60 <_init+0x28>

0000000000406fc0 <write@plt>:
  406fc0:	ff 25 fa 11 25 00    	jmpq   *0x2511fa(%rip)        # 6581c0 <_GLOBAL_OFFSET_TABLE_+0x1c0>
  406fc6:	68 35 00 00 00       	pushq  $0x35
  406fcb:	e9 90 fc ff ff       	jmpq   406c60 <_init+0x28>

0000000000406fd0 <pthread_cond_broadcast@plt>:
  406fd0:	ff 25 f2 11 25 00    	jmpq   *0x2511f2(%rip)        # 6581c8 <_GLOBAL_OFFSET_TABLE_+0x1c8>
  406fd6:	68 36 00 00 00       	pushq  $0x36
  406fdb:	e9 80 fc ff ff       	jmpq   406c60 <_init+0x28>

0000000000406fe0 <strtoul@plt>:
  406fe0:	ff 25 ea 11 25 00    	jmpq   *0x2511ea(%rip)        # 6581d0 <_GLOBAL_OFFSET_TABLE_+0x1d0>
  406fe6:	68 37 00 00 00       	pushq  $0x37
  406feb:	e9 70 fc ff ff       	jmpq   406c60 <_init+0x28>

0000000000406ff0 <memcpy@plt>:
  406ff0:	ff 25 e2 11 25 00    	jmpq   *0x2511e2(%rip)        # 6581d8 <_GLOBAL_OFFSET_TABLE_+0x1d8>
  406ff6:	68 38 00 00 00       	pushq  $0x38
  406ffb:	e9 60 fc ff ff       	jmpq   406c60 <_init+0x28>

0000000000407000 <open@plt>:
  407000:	ff 25 da 11 25 00    	jmpq   *0x2511da(%rip)        # 6581e0 <_GLOBAL_OFFSET_TABLE_+0x1e0>
  407006:	68 39 00 00 00       	pushq  $0x39
  40700b:	e9 50 fc ff ff       	jmpq   406c60 <_init+0x28>

0000000000407010 <time@plt>:
  407010:	ff 25 d2 11 25 00    	jmpq   *0x2511d2(%rip)        # 6581e8 <_GLOBAL_OFFSET_TABLE_+0x1e8>
  407016:	68 3a 00 00 00       	pushq  $0x3a
  40701b:	e9 40 fc ff ff       	jmpq   406c60 <_init+0x28>

0000000000407020 <fflush@plt>:
  407020:	ff 25 ca 11 25 00    	jmpq   *0x2511ca(%rip)        # 6581f0 <_GLOBAL_OFFSET_TABLE_+0x1f0>
  407026:	68 3b 00 00 00       	pushq  $0x3b
  40702b:	e9 30 fc ff ff       	jmpq   406c60 <_init+0x28>

0000000000407030 <pthread_join@plt>:
  407030:	ff 25 c2 11 25 00    	jmpq   *0x2511c2(%rip)        # 6581f8 <_GLOBAL_OFFSET_TABLE_+0x1f8>
  407036:	68 3c 00 00 00       	pushq  $0x3c
  40703b:	e9 20 fc ff ff       	jmpq   406c60 <_init+0x28>

Disassembly of section .text:

0000000000407040 <CRYPTO_lock.part.0>:
  407040:	50                   	push   %rax
  407041:	ba 96 df 43 00       	mov    $0x43df96,%edx
  407046:	be 53 02 00 00       	mov    $0x253,%esi
  40704b:	bf 68 df 43 00       	mov    $0x43df68,%edi
  407050:	e8 9b dd 01 00       	callq  424df0 <OpenSSLDie>

0000000000407055 <_start>:
  407055:	31 ed                	xor    %ebp,%ebp
  407057:	49 89 d1             	mov    %rdx,%r9
  40705a:	5e                   	pop    %rsi
  40705b:	48 89 e2             	mov    %rsp,%rdx
  40705e:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  407062:	50                   	push   %rax
  407063:	54                   	push   %rsp
  407064:	49 c7 c0 e0 7b 43 00 	mov    $0x437be0,%r8
  40706b:	48 c7 c1 70 7b 43 00 	mov    $0x437b70,%rcx
  407072:	48 c7 c7 3b 86 40 00 	mov    $0x40863b,%rdi
  407079:	e8 e2 fc ff ff       	callq  406d60 <__libc_start_main@plt>
  40707e:	f4                   	hlt    
  40707f:	90                   	nop

0000000000407080 <deregister_tm_clones>:
  407080:	b8 37 89 65 00       	mov    $0x658937,%eax
  407085:	55                   	push   %rbp
  407086:	48 2d 30 89 65 00    	sub    $0x658930,%rax
  40708c:	48 83 f8 0e          	cmp    $0xe,%rax
  407090:	48 89 e5             	mov    %rsp,%rbp
  407093:	76 1b                	jbe    4070b0 <deregister_tm_clones+0x30>
  407095:	b8 00 00 00 00       	mov    $0x0,%eax
  40709a:	48 85 c0             	test   %rax,%rax
  40709d:	74 11                	je     4070b0 <deregister_tm_clones+0x30>
  40709f:	5d                   	pop    %rbp
  4070a0:	bf 30 89 65 00       	mov    $0x658930,%edi
  4070a5:	ff e0                	jmpq   *%rax
  4070a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4070ae:	00 00 
  4070b0:	5d                   	pop    %rbp
  4070b1:	c3                   	retq   
  4070b2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  4070b9:	1f 84 00 00 00 00 00 

00000000004070c0 <register_tm_clones>:
  4070c0:	be 30 89 65 00       	mov    $0x658930,%esi
  4070c5:	55                   	push   %rbp
  4070c6:	48 81 ee 30 89 65 00 	sub    $0x658930,%rsi
  4070cd:	48 c1 fe 03          	sar    $0x3,%rsi
  4070d1:	48 89 e5             	mov    %rsp,%rbp
  4070d4:	48 89 f0             	mov    %rsi,%rax
  4070d7:	48 c1 e8 3f          	shr    $0x3f,%rax
  4070db:	48 01 c6             	add    %rax,%rsi
  4070de:	48 d1 fe             	sar    %rsi
  4070e1:	74 15                	je     4070f8 <register_tm_clones+0x38>
  4070e3:	b8 00 00 00 00       	mov    $0x0,%eax
  4070e8:	48 85 c0             	test   %rax,%rax
  4070eb:	74 0b                	je     4070f8 <register_tm_clones+0x38>
  4070ed:	5d                   	pop    %rbp
  4070ee:	bf 30 89 65 00       	mov    $0x658930,%edi
  4070f3:	ff e0                	jmpq   *%rax
  4070f5:	0f 1f 00             	nopl   (%rax)
  4070f8:	5d                   	pop    %rbp
  4070f9:	c3                   	retq   
  4070fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000407100 <__do_global_dtors_aux>:
  407100:	80 3d 91 18 25 00 00 	cmpb   $0x0,0x251891(%rip)        # 658998 <completed.7259>
  407107:	75 11                	jne    40711a <__do_global_dtors_aux+0x1a>
  407109:	55                   	push   %rbp
  40710a:	48 89 e5             	mov    %rsp,%rbp
  40710d:	e8 6e ff ff ff       	callq  407080 <deregister_tm_clones>
  407112:	5d                   	pop    %rbp
  407113:	c6 05 7e 18 25 00 01 	movb   $0x1,0x25187e(%rip)        # 658998 <completed.7259>
  40711a:	f3 c3                	repz retq 
  40711c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000407120 <frame_dummy>:
  407120:	bf 00 7e 65 00       	mov    $0x657e00,%edi
  407125:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  407129:	75 05                	jne    407130 <frame_dummy+0x10>
  40712b:	eb 93                	jmp    4070c0 <register_tm_clones>
  40712d:	0f 1f 00             	nopl   (%rax)
  407130:	b8 00 00 00 00       	mov    $0x0,%eax
  407135:	48 85 c0             	test   %rax,%rax
  407138:	74 f1                	je     40712b <frame_dummy+0xb>
  40713a:	55                   	push   %rbp
  40713b:	48 89 e5             	mov    %rsp,%rbp
  40713e:	ff d0                	callq  *%rax
  407140:	5d                   	pop    %rbp
  407141:	e9 7a ff ff ff       	jmpq   4070c0 <register_tm_clones>

0000000000407146 <Initialize>:

#define MinPQSize (16)

PriorityQueue
Initialize( int InitCapacity )
{
  407146:	55                   	push   %rbp
  407147:	48 89 e5             	mov    %rsp,%rbp
  40714a:	48 83 ec 20          	sub    $0x20,%rsp
  40714e:	89 7d ec             	mov    %edi,-0x14(%rbp)
	PriorityQueue H;

	if( InitCapacity < MinPQSize )
  407151:	83 7d ec 0f          	cmpl   $0xf,-0x14(%rbp)
  407155:	7f 28                	jg     40717f <Initialize+0x39>
		Error( "Priority queue size is too small" );
  407157:	48 8b 05 22 18 25 00 	mov    0x251822(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  40715e:	ba 48 7c 43 00       	mov    $0x437c48,%edx
  407163:	be 69 7c 43 00       	mov    $0x437c69,%esi
  407168:	48 89 c7             	mov    %rax,%rdi
  40716b:	b8 00 00 00 00       	mov    $0x0,%eax
  407170:	e8 1b fe ff ff       	callq  406f90 <fprintf@plt>
  407175:	bf 01 00 00 00       	mov    $0x1,%edi
  40717a:	e8 a1 fb ff ff       	callq  406d20 <exit@plt>

	H = malloc( sizeof( struct HeapStruct ) );
  40717f:	bf 10 00 00 00       	mov    $0x10,%edi
  407184:	e8 c7 fb ff ff       	callq  406d50 <malloc@plt>
  407189:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if( H ==NULL )
  40718d:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  407192:	75 28                	jne    4071bc <Initialize+0x76>
		FatalError( "Out of space!!!" );
  407194:	48 8b 05 e5 17 25 00 	mov    0x2517e5(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  40719b:	ba 7a 7c 43 00       	mov    $0x437c7a,%edx
  4071a0:	be 69 7c 43 00       	mov    $0x437c69,%esi
  4071a5:	48 89 c7             	mov    %rax,%rdi
  4071a8:	b8 00 00 00 00       	mov    $0x0,%eax
  4071ad:	e8 de fd ff ff       	callq  406f90 <fprintf@plt>
  4071b2:	bf 01 00 00 00       	mov    $0x1,%edi
  4071b7:	e8 64 fb ff ff       	callq  406d20 <exit@plt>

	/* Allocate the array plus one extra for sentinel */
	H->Elements = malloc( ( InitCapacity + 1 ) * sizeof( HeapElementType ) );
  4071bc:	8b 45 ec             	mov    -0x14(%rbp),%eax
  4071bf:	83 c0 01             	add    $0x1,%eax
  4071c2:	48 98                	cltq   
  4071c4:	48 c1 e0 03          	shl    $0x3,%rax
  4071c8:	48 89 c7             	mov    %rax,%rdi
  4071cb:	e8 80 fb ff ff       	callq  406d50 <malloc@plt>
  4071d0:	48 89 c2             	mov    %rax,%rdx
  4071d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4071d7:	48 89 50 08          	mov    %rdx,0x8(%rax)
	if( H->Elements == NULL )
  4071db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4071df:	48 8b 40 08          	mov    0x8(%rax),%rax
  4071e3:	48 85 c0             	test   %rax,%rax
  4071e6:	75 28                	jne    407210 <Initialize+0xca>
		FatalError( "Out of space!!!" );
  4071e8:	48 8b 05 91 17 25 00 	mov    0x251791(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  4071ef:	ba 7a 7c 43 00       	mov    $0x437c7a,%edx
  4071f4:	be 69 7c 43 00       	mov    $0x437c69,%esi
  4071f9:	48 89 c7             	mov    %rax,%rdi
  4071fc:	b8 00 00 00 00       	mov    $0x0,%eax
  407201:	e8 8a fd ff ff       	callq  406f90 <fprintf@plt>
  407206:	bf 01 00 00 00       	mov    $0x1,%edi
  40720b:	e8 10 fb ff ff       	callq  406d20 <exit@plt>

	H->Capacity = InitCapacity;
  407210:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407214:	8b 55 ec             	mov    -0x14(%rbp),%edx
  407217:	89 10                	mov    %edx,(%rax)
	H->Size = 0;
  407219:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40721d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%rax)
        H->Elements[0] = NULL;
  407224:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407228:	48 8b 40 08          	mov    0x8(%rax),%rax
  40722c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)

	return H;
  407233:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  407237:	c9                   	leaveq 
  407238:	c3                   	retq   

0000000000407239 <MakeEmpty>:

void
MakeEmpty( PriorityQueue H )
{
  407239:	55                   	push   %rbp
  40723a:	48 89 e5             	mov    %rsp,%rbp
  40723d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	H->Size = 0;
  407241:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407245:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%rax)
}
  40724c:	5d                   	pop    %rbp
  40724d:	c3                   	retq   

000000000040724e <Insert>:

void
Insert( HeapElementType X, PriorityQueue H )
{
  40724e:	55                   	push   %rbp
  40724f:	48 89 e5             	mov    %rsp,%rbp
  407252:	48 83 ec 20          	sub    $0x20,%rsp
  407256:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40725a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	int i;

	if( IsFull( H ) )
  40725e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407262:	48 89 c7             	mov    %rax,%rdi
  407265:	e8 3a 03 00 00       	callq  4075a4 <IsFull>
  40726a:	85 c0                	test   %eax,%eax
  40726c:	74 75                	je     4072e3 <Insert+0x95>
	{
		/* double capacity of heap */
		H->Capacity = 2 * H->Capacity;
  40726e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407272:	8b 00                	mov    (%rax),%eax
  407274:	8d 14 00             	lea    (%rax,%rax,1),%edx
  407277:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40727b:	89 10                	mov    %edx,(%rax)
		H->Elements = realloc( H->Elements, ( H->Capacity + 1 ) * sizeof( HeapElementType ) );
  40727d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407281:	8b 00                	mov    (%rax),%eax
  407283:	83 c0 01             	add    $0x1,%eax
  407286:	48 98                	cltq   
  407288:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  40728f:	00 
  407290:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407294:	48 8b 40 08          	mov    0x8(%rax),%rax
  407298:	48 89 d6             	mov    %rdx,%rsi
  40729b:	48 89 c7             	mov    %rax,%rdi
  40729e:	e8 cd fc ff ff       	callq  406f70 <realloc@plt>
  4072a3:	48 89 c2             	mov    %rax,%rdx
  4072a6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4072aa:	48 89 50 08          	mov    %rdx,0x8(%rax)
		if( H->Elements == NULL )
  4072ae:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4072b2:	48 8b 40 08          	mov    0x8(%rax),%rax
  4072b6:	48 85 c0             	test   %rax,%rax
  4072b9:	75 28                	jne    4072e3 <Insert+0x95>
			FatalError( "Out of space!!!" );
  4072bb:	48 8b 05 be 16 25 00 	mov    0x2516be(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  4072c2:	ba 7a 7c 43 00       	mov    $0x437c7a,%edx
  4072c7:	be 69 7c 43 00       	mov    $0x437c69,%esi
  4072cc:	48 89 c7             	mov    %rax,%rdi
  4072cf:	b8 00 00 00 00       	mov    $0x0,%eax
  4072d4:	e8 b7 fc ff ff       	callq  406f90 <fprintf@plt>
  4072d9:	bf 01 00 00 00       	mov    $0x1,%edi
  4072de:	e8 3d fa ff ff       	callq  406d20 <exit@plt>
	}

	/* NOTE: H->Element[ 0 ] is a sentinel */

        if (H->Size == 0) {
  4072e3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4072e7:	8b 40 04             	mov    0x4(%rax),%eax
  4072ea:	85 c0                	test   %eax,%eax
  4072ec:	75 23                	jne    407311 <Insert+0xc3>
          H->Elements[1] = X;
  4072ee:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4072f2:	48 8b 40 08          	mov    0x8(%rax),%rax
  4072f6:	48 8d 50 08          	lea    0x8(%rax),%rdx
  4072fa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4072fe:	48 89 02             	mov    %rax,(%rdx)
          H->Size = 1;
  407301:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407305:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%rax)
          return;
  40730c:	e9 d5 00 00 00       	jmpq   4073e6 <Insert+0x198>
        }

        H->Size++;
  407311:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407315:	8b 40 04             	mov    0x4(%rax),%eax
  407318:	8d 50 01             	lea    0x1(%rax),%edx
  40731b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40731f:	89 50 04             	mov    %edx,0x4(%rax)
	for( i = H->Size; H->Elements[i/2]!= NULL && H->Elements[ i / 2 ]->cid > X->cid; i /= 2 ) {
  407322:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407326:	8b 40 04             	mov    0x4(%rax),%eax
  407329:	89 45 fc             	mov    %eax,-0x4(%rbp)
  40732c:	eb 47                	jmp    407375 <Insert+0x127>
          H->Elements[ i ] = H->Elements[ i / 2 ];
  40732e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407332:	48 8b 40 08          	mov    0x8(%rax),%rax
  407336:	8b 55 fc             	mov    -0x4(%rbp),%edx
  407339:	48 63 d2             	movslq %edx,%rdx
  40733c:	48 c1 e2 03          	shl    $0x3,%rdx
  407340:	48 01 c2             	add    %rax,%rdx
  407343:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407347:	48 8b 48 08          	mov    0x8(%rax),%rcx
  40734b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40734e:	89 c6                	mov    %eax,%esi
  407350:	c1 ee 1f             	shr    $0x1f,%esi
  407353:	01 f0                	add    %esi,%eax
  407355:	d1 f8                	sar    %eax
  407357:	48 98                	cltq   
  407359:	48 c1 e0 03          	shl    $0x3,%rax
  40735d:	48 01 c8             	add    %rcx,%rax
  407360:	48 8b 00             	mov    (%rax),%rax
  407363:	48 89 02             	mov    %rax,(%rdx)
          H->Size = 1;
          return;
        }

        H->Size++;
	for( i = H->Size; H->Elements[i/2]!= NULL && H->Elements[ i / 2 ]->cid > X->cid; i /= 2 ) {
  407366:	8b 45 fc             	mov    -0x4(%rbp),%eax
  407369:	89 c2                	mov    %eax,%edx
  40736b:	c1 ea 1f             	shr    $0x1f,%edx
  40736e:	01 d0                	add    %edx,%eax
  407370:	d1 f8                	sar    %eax
  407372:	89 45 fc             	mov    %eax,-0x4(%rbp)
  407375:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407379:	48 8b 50 08          	mov    0x8(%rax),%rdx
  40737d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  407380:	89 c1                	mov    %eax,%ecx
  407382:	c1 e9 1f             	shr    $0x1f,%ecx
  407385:	01 c8                	add    %ecx,%eax
  407387:	d1 f8                	sar    %eax
  407389:	48 98                	cltq   
  40738b:	48 c1 e0 03          	shl    $0x3,%rax
  40738f:	48 01 d0             	add    %rdx,%rax
  407392:	48 8b 00             	mov    (%rax),%rax
  407395:	48 85 c0             	test   %rax,%rax
  407398:	74 30                	je     4073ca <Insert+0x17c>
  40739a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40739e:	48 8b 50 08          	mov    0x8(%rax),%rdx
  4073a2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4073a5:	89 c1                	mov    %eax,%ecx
  4073a7:	c1 e9 1f             	shr    $0x1f,%ecx
  4073aa:	01 c8                	add    %ecx,%eax
  4073ac:	d1 f8                	sar    %eax
  4073ae:	48 98                	cltq   
  4073b0:	48 c1 e0 03          	shl    $0x3,%rax
  4073b4:	48 01 d0             	add    %rdx,%rax
  4073b7:	48 8b 00             	mov    (%rax),%rax
  4073ba:	8b 10                	mov    (%rax),%edx
  4073bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4073c0:	8b 00                	mov    (%rax),%eax
  4073c2:	39 c2                	cmp    %eax,%edx
  4073c4:	0f 87 64 ff ff ff    	ja     40732e <Insert+0xe0>
          H->Elements[ i ] = H->Elements[ i / 2 ];
        }
	H->Elements[ i ] = X;
  4073ca:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4073ce:	48 8b 40 08          	mov    0x8(%rax),%rax
  4073d2:	8b 55 fc             	mov    -0x4(%rbp),%edx
  4073d5:	48 63 d2             	movslq %edx,%rdx
  4073d8:	48 c1 e2 03          	shl    $0x3,%rdx
  4073dc:	48 01 c2             	add    %rax,%rdx
  4073df:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4073e3:	48 89 02             	mov    %rax,(%rdx)
        
}
  4073e6:	c9                   	leaveq 
  4073e7:	c3                   	retq   

00000000004073e8 <DeleteMin>:

HeapElementType
DeleteMin( PriorityQueue H )
{
  4073e8:	55                   	push   %rbp
  4073e9:	48 89 e5             	mov    %rsp,%rbp
  4073ec:	48 83 ec 30          	sub    $0x30,%rsp
  4073f0:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	int i, Child;
	HeapElementType MinElement, LastElement;

	if( IsEmpty( H ) )
  4073f4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4073f8:	48 89 c7             	mov    %rax,%rdi
  4073fb:	e8 8b 01 00 00       	callq  40758b <IsEmpty>
  407400:	85 c0                	test   %eax,%eax
  407402:	74 28                	je     40742c <DeleteMin+0x44>
	{
		Error( "Priority queue is empty" );
  407404:	48 8b 05 75 15 25 00 	mov    0x251575(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  40740b:	ba 8a 7c 43 00       	mov    $0x437c8a,%edx
  407410:	be 69 7c 43 00       	mov    $0x437c69,%esi
  407415:	48 89 c7             	mov    %rax,%rdi
  407418:	b8 00 00 00 00       	mov    $0x0,%eax
  40741d:	e8 6e fb ff ff       	callq  406f90 <fprintf@plt>
  407422:	bf 01 00 00 00       	mov    $0x1,%edi
  407427:	e8 f4 f8 ff ff       	callq  406d20 <exit@plt>
		return H->Elements[ 0 ];
	}
	MinElement = H->Elements[ 1 ];
  40742c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407430:	48 8b 40 08          	mov    0x8(%rax),%rax
  407434:	48 8b 40 08          	mov    0x8(%rax),%rax
  407438:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	LastElement = H->Elements[ H->Size-- ];
  40743c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407440:	48 8b 70 08          	mov    0x8(%rax),%rsi
  407444:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407448:	8b 40 04             	mov    0x4(%rax),%eax
  40744b:	8d 48 ff             	lea    -0x1(%rax),%ecx
  40744e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  407452:	89 4a 04             	mov    %ecx,0x4(%rdx)
  407455:	48 98                	cltq   
  407457:	48 c1 e0 03          	shl    $0x3,%rax
  40745b:	48 01 f0             	add    %rsi,%rax
  40745e:	48 8b 00             	mov    (%rax),%rax
  407461:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	for( i = 1; i * 2 <= H->Size; i = Child )
  407465:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%rbp)
  40746c:	e9 b2 00 00 00       	jmpq   407523 <DeleteMin+0x13b>
	{
		/* Find smaller child */
		Child = i * 2;
  407471:	8b 45 e8             	mov    -0x18(%rbp),%eax
  407474:	01 c0                	add    %eax,%eax
  407476:	89 45 ec             	mov    %eax,-0x14(%rbp)
		if( Child != H->Size && H->Elements[ Child + 1 ]->cid < H->Elements[ Child ]->cid )
  407479:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40747d:	8b 40 04             	mov    0x4(%rax),%eax
  407480:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  407483:	74 40                	je     4074c5 <DeleteMin+0xdd>
  407485:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407489:	48 8b 40 08          	mov    0x8(%rax),%rax
  40748d:	8b 55 ec             	mov    -0x14(%rbp),%edx
  407490:	48 63 d2             	movslq %edx,%rdx
  407493:	48 83 c2 01          	add    $0x1,%rdx
  407497:	48 c1 e2 03          	shl    $0x3,%rdx
  40749b:	48 01 d0             	add    %rdx,%rax
  40749e:	48 8b 00             	mov    (%rax),%rax
  4074a1:	8b 10                	mov    (%rax),%edx
  4074a3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4074a7:	48 8b 40 08          	mov    0x8(%rax),%rax
  4074ab:	8b 4d ec             	mov    -0x14(%rbp),%ecx
  4074ae:	48 63 c9             	movslq %ecx,%rcx
  4074b1:	48 c1 e1 03          	shl    $0x3,%rcx
  4074b5:	48 01 c8             	add    %rcx,%rax
  4074b8:	48 8b 00             	mov    (%rax),%rax
  4074bb:	8b 00                	mov    (%rax),%eax
  4074bd:	39 c2                	cmp    %eax,%edx
  4074bf:	73 04                	jae    4074c5 <DeleteMin+0xdd>
			Child++;
  4074c1:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)

		/* Percolate one level */
		if( LastElement->cid > H->Elements[ Child ]->cid )
  4074c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4074c9:	8b 10                	mov    (%rax),%edx
  4074cb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4074cf:	48 8b 40 08          	mov    0x8(%rax),%rax
  4074d3:	8b 4d ec             	mov    -0x14(%rbp),%ecx
  4074d6:	48 63 c9             	movslq %ecx,%rcx
  4074d9:	48 c1 e1 03          	shl    $0x3,%rcx
  4074dd:	48 01 c8             	add    %rcx,%rax
  4074e0:	48 8b 00             	mov    (%rax),%rax
  4074e3:	8b 00                	mov    (%rax),%eax
  4074e5:	39 c2                	cmp    %eax,%edx
  4074e7:	76 32                	jbe    40751b <DeleteMin+0x133>
			H->Elements[ i ] = H->Elements[ Child ];
  4074e9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4074ed:	48 8b 40 08          	mov    0x8(%rax),%rax
  4074f1:	8b 55 e8             	mov    -0x18(%rbp),%edx
  4074f4:	48 63 d2             	movslq %edx,%rdx
  4074f7:	48 c1 e2 03          	shl    $0x3,%rdx
  4074fb:	48 01 c2             	add    %rax,%rdx
  4074fe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407502:	48 8b 40 08          	mov    0x8(%rax),%rax
  407506:	8b 4d ec             	mov    -0x14(%rbp),%ecx
  407509:	48 63 c9             	movslq %ecx,%rcx
  40750c:	48 c1 e1 03          	shl    $0x3,%rcx
  407510:	48 01 c8             	add    %rcx,%rax
  407513:	48 8b 00             	mov    (%rax),%rax
  407516:	48 89 02             	mov    %rax,(%rdx)
  407519:	eb 02                	jmp    40751d <DeleteMin+0x135>
		else
			break;
  40751b:	eb 1b                	jmp    407538 <DeleteMin+0x150>
		return H->Elements[ 0 ];
	}
	MinElement = H->Elements[ 1 ];
	LastElement = H->Elements[ H->Size-- ];

	for( i = 1; i * 2 <= H->Size; i = Child )
  40751d:	8b 45 ec             	mov    -0x14(%rbp),%eax
  407520:	89 45 e8             	mov    %eax,-0x18(%rbp)
  407523:	8b 45 e8             	mov    -0x18(%rbp),%eax
  407526:	8d 14 00             	lea    (%rax,%rax,1),%edx
  407529:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40752d:	8b 40 04             	mov    0x4(%rax),%eax
  407530:	39 c2                	cmp    %eax,%edx
  407532:	0f 8e 39 ff ff ff    	jle    407471 <DeleteMin+0x89>
		if( LastElement->cid > H->Elements[ Child ]->cid )
			H->Elements[ i ] = H->Elements[ Child ];
		else
			break;
	}
	H->Elements[ i ] = LastElement;
  407538:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40753c:	48 8b 40 08          	mov    0x8(%rax),%rax
  407540:	8b 55 e8             	mov    -0x18(%rbp),%edx
  407543:	48 63 d2             	movslq %edx,%rdx
  407546:	48 c1 e2 03          	shl    $0x3,%rdx
  40754a:	48 01 c2             	add    %rax,%rdx
  40754d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407551:	48 89 02             	mov    %rax,(%rdx)
	return MinElement;
  407554:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
  407558:	c9                   	leaveq 
  407559:	c3                   	retq   

000000000040755a <FindMin>:

HeapElementType
FindMin( PriorityQueue H )
{
  40755a:	55                   	push   %rbp
  40755b:	48 89 e5             	mov    %rsp,%rbp
  40755e:	48 83 ec 10          	sub    $0x10,%rsp
  407562:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	if( !IsEmpty( H ) )
  407566:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40756a:	48 89 c7             	mov    %rax,%rdi
  40756d:	e8 19 00 00 00       	callq  40758b <IsEmpty>
  407572:	85 c0                	test   %eax,%eax
  407574:	75 0e                	jne    407584 <FindMin+0x2a>
		return H->Elements[ 1 ];
  407576:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40757a:	48 8b 40 08          	mov    0x8(%rax),%rax
  40757e:	48 8b 40 08          	mov    0x8(%rax),%rax
  407582:	eb 05                	jmp    407589 <FindMin+0x2f>
	else
          //FatalError( "Priority Queue is Empty" );
          return NULL;
  407584:	b8 00 00 00 00       	mov    $0x0,%eax
}
  407589:	c9                   	leaveq 
  40758a:	c3                   	retq   

000000000040758b <IsEmpty>:

int
IsEmpty( PriorityQueue H )
{
  40758b:	55                   	push   %rbp
  40758c:	48 89 e5             	mov    %rsp,%rbp
  40758f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return (H->Size == 0);
  407593:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407597:	8b 40 04             	mov    0x4(%rax),%eax
  40759a:	85 c0                	test   %eax,%eax
  40759c:	0f 94 c0             	sete   %al
  40759f:	0f b6 c0             	movzbl %al,%eax
}
  4075a2:	5d                   	pop    %rbp
  4075a3:	c3                   	retq   

00000000004075a4 <IsFull>:

int
IsFull( PriorityQueue H )
{
  4075a4:	55                   	push   %rbp
  4075a5:	48 89 e5             	mov    %rsp,%rbp
  4075a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return H->Size == H->Capacity;
  4075ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4075b0:	8b 50 04             	mov    0x4(%rax),%edx
  4075b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4075b7:	8b 00                	mov    (%rax),%eax
  4075b9:	39 c2                	cmp    %eax,%edx
  4075bb:	0f 94 c0             	sete   %al
  4075be:	0f b6 c0             	movzbl %al,%eax
}
  4075c1:	5d                   	pop    %rbp
  4075c2:	c3                   	retq   

00000000004075c3 <NumberElements>:

int
NumberElements( PriorityQueue H )
{
  4075c3:	55                   	push   %rbp
  4075c4:	48 89 e5             	mov    %rsp,%rbp
  4075c7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return H->Size;
  4075cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4075cf:	8b 40 04             	mov    0x4(%rax),%eax
}
  4075d2:	5d                   	pop    %rbp
  4075d3:	c3                   	retq   

00000000004075d4 <Destroy>:

void
Destroy( PriorityQueue H )
{
  4075d4:	55                   	push   %rbp
  4075d5:	48 89 e5             	mov    %rsp,%rbp
  4075d8:	48 83 ec 10          	sub    $0x10,%rsp
  4075dc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	free( H->Elements );
  4075e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4075e4:	48 8b 40 08          	mov    0x8(%rax),%rax
  4075e8:	48 89 c7             	mov    %rax,%rdi
  4075eb:	e8 b0 f7 ff ff       	callq  406da0 <free@plt>
	free( H );
  4075f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4075f4:	48 89 c7             	mov    %rax,%rdi
  4075f7:	e8 a4 f7 ff ff       	callq  406da0 <free@plt>
}
  4075fc:	c9                   	leaveq 
  4075fd:	c3                   	retq   

00000000004075fe <CheckCache>:

/*
 * Given SHA-1 key, check whether the corresponding compressed data is available
 */
void * 
CheckCache(void * args) {
  4075fe:	55                   	push   %rbp
  4075ff:	48 89 e5             	mov    %rsp,%rbp
  407602:	48 83 ec 30          	sub    $0x30,%rsp
  407606:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  while (1) {
    send_buf_item * item;
    if (tail_checkcache == head_checkcache && end_RecvBlock) {
  40760a:	8b 15 8c 16 25 00    	mov    0x25168c(%rip),%edx        # 658c9c <tail_checkcache>
  407610:	8b 05 82 16 25 00    	mov    0x251682(%rip),%eax        # 658c98 <head_checkcache>
  407616:	39 c2                	cmp    %eax,%edx
  407618:	75 0f                	jne    407629 <CheckCache+0x2b>
  40761a:	8b 05 8c 16 25 00    	mov    0x25168c(%rip),%eax        # 658cac <end_RecvBlock>
  407620:	85 c0                	test   %eax,%eax
  407622:	74 05                	je     407629 <CheckCache+0x2b>
      break;     
  407624:	e9 ff 00 00 00       	jmpq   407728 <CheckCache+0x12a>
    }
    item = buf_checkcache[tail_checkcache];
  407629:	8b 05 6d 16 25 00    	mov    0x25166d(%rip),%eax        # 658c9c <tail_checkcache>
  40762f:	48 98                	cltq   
  407631:	48 8b 04 c5 c0 a9 65 	mov    0x65a9c0(,%rax,8),%rax
  407638:	00 
  407639:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    tail_checkcache ++;
  40763d:	8b 05 59 16 25 00    	mov    0x251659(%rip),%eax        # 658c9c <tail_checkcache>
  407643:	83 c0 01             	add    $0x1,%eax
  407646:	89 05 50 16 25 00    	mov    %eax,0x251650(%rip)        # 658c9c <tail_checkcache>

    if (tail_checkcache == NUM_BUF_CHECKCACHE) tail_checkcache = 0;
  40764c:	8b 05 4a 16 25 00    	mov    0x25164a(%rip),%eax        # 658c9c <tail_checkcache>
  407652:	3d 00 00 10 00       	cmp    $0x100000,%eax
  407657:	75 0a                	jne    407663 <CheckCache+0x65>
  407659:	c7 05 39 16 25 00 00 	movl   $0x0,0x251639(%rip)        # 658c9c <tail_checkcache>
  407660:	00 00 00 

    data_chunk * value;
    struct hash_entry * ent;
    /* search the cache */
    //if data not available, wait
    while ((ent = hashtable_search(cache, item->content)) == NULL) {
  407663:	90                   	nop
  407664:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407668:	48 8b 50 10          	mov    0x10(%rax),%rdx
  40766c:	48 8b 05 4d 33 25 01 	mov    0x125334d(%rip),%rax        # 165a9c0 <cache>
  407673:	48 89 d6             	mov    %rdx,%rsi
  407676:	48 89 c7             	mov    %rax,%rdi
  407679:	e8 bf 54 00 00       	callq  40cb3d <hashtable_search>
  40767e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  407682:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  407687:	74 db                	je     407664 <CheckCache+0x66>
    }

    value = ent->v;
  407689:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40768d:	48 8b 40 08          	mov    0x8(%rax),%rax
  407691:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    
    /* cache hit */
    //get the data(SHA-1), put it into the reassemble queue
    MEM_FREE(item->content);
  407695:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407699:	48 8b 40 10          	mov    0x10(%rax),%rax
  40769d:	48 85 c0             	test   %rax,%rax
  4076a0:	74 1c                	je     4076be <CheckCache+0xc0>
  4076a2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4076a6:	48 8b 40 10          	mov    0x10(%rax),%rax
  4076aa:	48 89 c7             	mov    %rax,%rdi
  4076ad:	e8 ee f6 ff ff       	callq  406da0 <free@plt>
  4076b2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4076b6:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  4076bd:	00 
    item->content = value->start;      
  4076be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4076c2:	48 8b 10             	mov    (%rax),%rdx
  4076c5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4076c9:	48 89 50 10          	mov    %rdx,0x10(%rax)
    send_body * body = (send_body *)item->str;
  4076cd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4076d1:	48 8b 40 08          	mov    0x8(%rax),%rax
  4076d5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    body->len = value->len;
  4076d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4076dd:	48 8b 50 08          	mov    0x8(%rax),%rdx
  4076e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4076e5:	48 89 50 10          	mov    %rdx,0x10(%rax)

    buf_reassemble[head_reassemble] = item;
  4076e9:	8b 05 b1 15 25 00    	mov    0x2515b1(%rip),%eax        # 658ca0 <head_reassemble>
  4076ef:	48 98                	cltq   
  4076f1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4076f5:	48 89 14 c5 c0 a9 e5 	mov    %rdx,0xe5a9c0(,%rax,8)
  4076fc:	00 
    head_reassemble ++;
  4076fd:	8b 05 9d 15 25 00    	mov    0x25159d(%rip),%eax        # 658ca0 <head_reassemble>
  407703:	83 c0 01             	add    $0x1,%eax
  407706:	89 05 94 15 25 00    	mov    %eax,0x251594(%rip)        # 658ca0 <head_reassemble>

    if (head_reassemble == NUM_BUF_REASSEMBLE) head_reassemble = 0;
  40770c:	8b 05 8e 15 25 00    	mov    0x25158e(%rip),%eax        # 658ca0 <head_reassemble>
  407712:	3d 00 00 10 00       	cmp    $0x100000,%eax
  407717:	75 0a                	jne    407723 <CheckCache+0x125>
  407719:	c7 05 7d 15 25 00 00 	movl   $0x0,0x25157d(%rip)        # 658ca0 <head_reassemble>
  407720:	00 00 00 
  }
  407723:	e9 e2 fe ff ff       	jmpq   40760a <CheckCache+0xc>

  end_CheckCache +=1;
  407728:	8b 05 82 15 25 00    	mov    0x251582(%rip),%eax        # 658cb0 <end_CheckCache>
  40772e:	83 c0 01             	add    $0x1,%eax
  407731:	89 05 79 15 25 00    	mov    %eax,0x251579(%rip)        # 658cb0 <end_CheckCache>

  return NULL;
  407737:	b8 00 00 00 00       	mov    $0x0,%eax
}
  40773c:	c9                   	leaveq 
  40773d:	c3                   	retq   

000000000040773e <Decompress>:

/*
 * Decompress the data
 */
void * 
Decompress(void * args) {
  40773e:	55                   	push   %rbp
  40773f:	48 89 e5             	mov    %rsp,%rbp
  407742:	48 81 ec e0 96 98 00 	sub    $0x9896e0,%rsp
  407749:	48 89 bd 28 69 67 ff 	mov    %rdi,-0x9896d8(%rbp)
  407750:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  407757:	00 00 
  407759:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40775d:	31 c0                	xor    %eax,%eax
  u_char tmpstr[UNCOMPRESS_BOUND];
  while (1) {
    send_buf_item * item;
    //get one item
    if (tail_decompress == head_decompress && end_RecvBlock) {
  40775f:	8b 15 2f 15 25 00    	mov    0x25152f(%rip),%edx        # 658c94 <tail_decompress>
  407765:	8b 05 25 15 25 00    	mov    0x251525(%rip),%eax        # 658c90 <head_decompress>
  40776b:	39 c2                	cmp    %eax,%edx
  40776d:	75 36                	jne    4077a5 <Decompress+0x67>
  40776f:	8b 05 37 15 25 00    	mov    0x251537(%rip),%eax        # 658cac <end_RecvBlock>
  407775:	85 c0                	test   %eax,%eax
  407777:	74 2c                	je     4077a5 <Decompress+0x67>
    buf_reassemble[head_reassemble] = item;
    head_reassemble ++;
    if (head_reassemble == NUM_BUF_REASSEMBLE) head_reassemble = 0;
  }

  end_Decompress += 1;
  407779:	8b 05 29 15 25 00    	mov    0x251529(%rip),%eax        # 658ca8 <end_Decompress>
  40777f:	83 c0 01             	add    $0x1,%eax
  407782:	89 05 20 15 25 00    	mov    %eax,0x251520(%rip)        # 658ca8 <end_Decompress>
  return NULL;
  407788:	b8 00 00 00 00       	mov    $0x0,%eax
}
  40778d:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  407791:	64 48 33 34 25 28 00 	xor    %fs:0x28,%rsi
  407798:	00 00 
  40779a:	0f 84 7a 02 00 00    	je     407a1a <Decompress+0x2dc>
  4077a0:	e9 70 02 00 00       	jmpq   407a15 <Decompress+0x2d7>
    //get one item
    if (tail_decompress == head_decompress && end_RecvBlock) {
      break;     
    }
    
    item = buf_decompress[tail_decompress];
  4077a5:	8b 05 e9 14 25 00    	mov    0x2514e9(%rip),%eax        # 658c94 <tail_decompress>
  4077ab:	48 98                	cltq   
  4077ad:	48 8b 04 c5 00 aa 65 	mov    0x165aa00(,%rax,8),%rax
  4077b4:	01 
  4077b5:	48 89 85 40 69 67 ff 	mov    %rax,-0x9896c0(%rbp)
    tail_decompress ++;
  4077bc:	8b 05 d2 14 25 00    	mov    0x2514d2(%rip),%eax        # 658c94 <tail_decompress>
  4077c2:	83 c0 01             	add    $0x1,%eax
  4077c5:	89 05 c9 14 25 00    	mov    %eax,0x2514c9(%rip)        # 658c94 <tail_decompress>
    if (tail_decompress == NUM_BUF_DECOMPRESS) tail_decompress = 0;
  4077cb:	8b 05 c3 14 25 00    	mov    0x2514c3(%rip),%eax        # 658c94 <tail_decompress>
  4077d1:	3d 00 00 10 00       	cmp    $0x100000,%eax
  4077d6:	75 0a                	jne    4077e2 <Decompress+0xa4>
  4077d8:	c7 05 b2 14 25 00 00 	movl   $0x0,0x2514b2(%rip)        # 658c94 <tail_decompress>
  4077df:	00 00 00 
        
    send_body * body = (send_body*)item->str;
  4077e2:	48 8b 85 40 69 67 ff 	mov    -0x9896c0(%rbp),%rax
  4077e9:	48 8b 40 08          	mov    0x8(%rax),%rax
  4077ed:	48 89 85 48 69 67 ff 	mov    %rax,-0x9896b8(%rbp)

    u_char * pstr = NULL;
  4077f4:	48 c7 85 50 69 67 ff 	movq   $0x0,-0x9896b0(%rbp)
  4077fb:	00 00 00 00 
    u_long len = 0;
  4077ff:	48 c7 85 58 69 67 ff 	movq   $0x0,-0x9896a8(%rbp)
  407806:	00 00 00 00 
    int t = 0;
  40780a:	c7 85 34 69 67 ff 00 	movl   $0x0,-0x9896cc(%rbp)
  407811:	00 00 00 
    unsigned long len_32;

    //uncompress the item
    switch (compress_way) {
  407814:	8b 05 ae 31 25 01    	mov    0x12531ae(%rip),%eax        # 165a9c8 <compress_way>
  40781a:	83 f8 01             	cmp    $0x1,%eax
  40781d:	0f 84 ea 00 00 00    	je     40790d <Decompress+0x1cf>
  407823:	83 f8 02             	cmp    $0x2,%eax
  407826:	0f 84 e4 00 00 00    	je     407910 <Decompress+0x1d2>
  40782c:	85 c0                	test   %eax,%eax
  40782e:	0f 85 dd 00 00 00    	jne    407911 <Decompress+0x1d3>
    case COMPRESS_GZIP:
      len_32 = UNCOMPRESS_BOUND;
  407834:	48 c7 85 38 69 67 ff 	movq   $0x989680,-0x9896c8(%rbp)
  40783b:	80 96 98 00 
      t = uncompress(tmpstr, &len_32, item->content, body->len);
  40783f:	48 8b 85 48 69 67 ff 	mov    -0x9896b8(%rbp),%rax
  407846:	48 8b 48 10          	mov    0x10(%rax),%rcx
  40784a:	48 8b 85 40 69 67 ff 	mov    -0x9896c0(%rbp),%rax
  407851:	48 8b 50 10          	mov    0x10(%rax),%rdx
  407855:	48 8d b5 38 69 67 ff 	lea    -0x9896c8(%rbp),%rsi
  40785c:	48 8d 85 70 69 67 ff 	lea    -0x989690(%rbp),%rax
  407863:	48 89 c7             	mov    %rax,%rdi
  407866:	e8 65 67 00 00       	callq  40dfd0 <uncompress>
  40786b:	89 85 34 69 67 ff    	mov    %eax,-0x9896cc(%rbp)

      len = len_32;
  407871:	48 8b 85 38 69 67 ff 	mov    -0x9896c8(%rbp),%rax
  407878:	48 89 85 58 69 67 ff 	mov    %rax,-0x9896a8(%rbp)
      pstr= (u_char *)malloc(len);
  40787f:	48 8b 85 58 69 67 ff 	mov    -0x9896a8(%rbp),%rax
  407886:	48 89 c7             	mov    %rax,%rdi
  407889:	e8 c2 f4 ff ff       	callq  406d50 <malloc@plt>
  40788e:	48 89 85 50 69 67 ff 	mov    %rax,-0x9896b0(%rbp)
      body->len = len;
  407895:	48 8b 85 48 69 67 ff 	mov    -0x9896b8(%rbp),%rax
  40789c:	48 8b 95 58 69 67 ff 	mov    -0x9896a8(%rbp),%rdx
  4078a3:	48 89 50 10          	mov    %rdx,0x10(%rax)
      memcpy(pstr, tmpstr, len);
  4078a7:	48 8b 95 58 69 67 ff 	mov    -0x9896a8(%rbp),%rdx
  4078ae:	48 8d 8d 70 69 67 ff 	lea    -0x989690(%rbp),%rcx
  4078b5:	48 8b 85 50 69 67 ff 	mov    -0x9896b0(%rbp),%rax
  4078bc:	48 89 ce             	mov    %rcx,%rsi
  4078bf:	48 89 c7             	mov    %rax,%rdi
  4078c2:	e8 29 f7 ff ff       	callq  406ff0 <memcpy@plt>
      MEM_FREE(item->content);
  4078c7:	48 8b 85 40 69 67 ff 	mov    -0x9896c0(%rbp),%rax
  4078ce:	48 8b 40 10          	mov    0x10(%rax),%rax
  4078d2:	48 85 c0             	test   %rax,%rax
  4078d5:	74 22                	je     4078f9 <Decompress+0x1bb>
  4078d7:	48 8b 85 40 69 67 ff 	mov    -0x9896c0(%rbp),%rax
  4078de:	48 8b 40 10          	mov    0x10(%rax),%rax
  4078e2:	48 89 c7             	mov    %rax,%rdi
  4078e5:	e8 b6 f4 ff ff       	callq  406da0 <free@plt>
  4078ea:	48 8b 85 40 69 67 ff 	mov    -0x9896c0(%rbp),%rax
  4078f1:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  4078f8:	00 
      item->content = pstr;
  4078f9:	48 8b 85 40 69 67 ff 	mov    -0x9896c0(%rbp),%rax
  407900:	48 8b 95 50 69 67 ff 	mov    -0x9896b0(%rbp),%rdx
  407907:	48 89 50 10          	mov    %rdx,0x10(%rax)
      break;
  40790b:	eb 04                	jmp    407911 <Decompress+0x1d3>
    case COMPRESS_BZIP2:
      break;
  40790d:	90                   	nop
  40790e:	eb 01                	jmp    407911 <Decompress+0x1d3>
    case COMPRESS_NONE:
      break;
  407910:	90                   	nop
    }
    u_char * key = (u_char * )malloc(SHA1_LEN);
  407911:	bf 14 00 00 00       	mov    $0x14,%edi
  407916:	e8 35 f4 ff ff       	callq  406d50 <malloc@plt>
  40791b:	48 89 85 60 69 67 ff 	mov    %rax,-0x9896a0(%rbp)
    Calc_SHA1Sig(item->content, body->len, key);
  407922:	48 8b 85 48 69 67 ff 	mov    -0x9896b8(%rbp),%rax
  407929:	48 8b 40 10          	mov    0x10(%rax),%rax
  40792d:	89 c1                	mov    %eax,%ecx
  40792f:	48 8b 85 40 69 67 ff 	mov    -0x9896c0(%rbp),%rax
  407936:	48 8b 40 10          	mov    0x10(%rax),%rax
  40793a:	48 8b 95 60 69 67 ff 	mov    -0x9896a0(%rbp),%rdx
  407941:	89 ce                	mov    %ecx,%esi
  407943:	48 89 c7             	mov    %rax,%rdi
  407946:	e8 f8 5f 00 00       	callq  40d943 <Calc_SHA1Sig>
    
    data_chunk * value = (data_chunk *)malloc(sizeof(data_chunk));
  40794b:	bf 18 00 00 00       	mov    $0x18,%edi
  407950:	e8 fb f3 ff ff       	callq  406d50 <malloc@plt>
  407955:	48 89 85 68 69 67 ff 	mov    %rax,-0x989698(%rbp)
    value->start = item->content;
  40795c:	48 8b 85 40 69 67 ff 	mov    -0x9896c0(%rbp),%rax
  407963:	48 8b 50 10          	mov    0x10(%rax),%rdx
  407967:	48 8b 85 68 69 67 ff 	mov    -0x989698(%rbp),%rax
  40796e:	48 89 10             	mov    %rdx,(%rax)
    value->len = body->len;
  407971:	48 8b 85 48 69 67 ff 	mov    -0x9896b8(%rbp),%rax
  407978:	48 8b 50 10          	mov    0x10(%rax),%rdx
  40797c:	48 8b 85 68 69 67 ff 	mov    -0x989698(%rbp),%rax
  407983:	48 89 50 08          	mov    %rdx,0x8(%rax)

    if (hashtable_insert(cache, key, value) == 0) {
  407987:	48 8b 05 32 30 25 01 	mov    0x1253032(%rip),%rax        # 165a9c0 <cache>
  40798e:	48 8b 95 68 69 67 ff 	mov    -0x989698(%rbp),%rdx
  407995:	48 8b 8d 60 69 67 ff 	mov    -0x9896a0(%rbp),%rcx
  40799c:	48 89 ce             	mov    %rcx,%rsi
  40799f:	48 89 c7             	mov    %rax,%rdi
  4079a2:	e8 da 50 00 00       	callq  40ca81 <hashtable_insert>
  4079a7:	85 c0                	test   %eax,%eax
  4079a9:	75 28                	jne    4079d3 <Decompress+0x295>
      EXIT_TRACE("hashtable_insert failed");
  4079ab:	48 8b 05 ce 0f 25 00 	mov    0x250fce(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  4079b2:	ba 01 7e 43 00       	mov    $0x437e01,%edx
  4079b7:	be a8 7c 43 00       	mov    $0x437ca8,%esi
  4079bc:	48 89 c7             	mov    %rax,%rdi
  4079bf:	b8 00 00 00 00       	mov    $0x0,%eax
  4079c4:	e8 c7 f5 ff ff       	callq  406f90 <fprintf@plt>
  4079c9:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  4079ce:	e8 4d f3 ff ff       	callq  406d20 <exit@plt>
    }  
    //put it into the reassemble queue
    buf_reassemble[head_reassemble] = item;
  4079d3:	8b 05 c7 12 25 00    	mov    0x2512c7(%rip),%eax        # 658ca0 <head_reassemble>
  4079d9:	48 98                	cltq   
  4079db:	48 8b 95 40 69 67 ff 	mov    -0x9896c0(%rbp),%rdx
  4079e2:	48 89 14 c5 c0 a9 e5 	mov    %rdx,0xe5a9c0(,%rax,8)
  4079e9:	00 
    head_reassemble ++;
  4079ea:	8b 05 b0 12 25 00    	mov    0x2512b0(%rip),%eax        # 658ca0 <head_reassemble>
  4079f0:	83 c0 01             	add    $0x1,%eax
  4079f3:	89 05 a7 12 25 00    	mov    %eax,0x2512a7(%rip)        # 658ca0 <head_reassemble>
    if (head_reassemble == NUM_BUF_REASSEMBLE) head_reassemble = 0;
  4079f9:	8b 05 a1 12 25 00    	mov    0x2512a1(%rip),%eax        # 658ca0 <head_reassemble>
  4079ff:	3d 00 00 10 00       	cmp    $0x100000,%eax
  407a04:	75 0a                	jne    407a10 <Decompress+0x2d2>
  407a06:	c7 05 90 12 25 00 00 	movl   $0x0,0x251290(%rip)        # 658ca0 <head_reassemble>
  407a0d:	00 00 00 
  }
  407a10:	e9 4a fd ff ff       	jmpq   40775f <Decompress+0x21>

  end_Decompress += 1;
  return NULL;
}
  407a15:	e8 a6 f4 ff ff       	callq  406ec0 <__stack_chk_fail@plt>
  407a1a:	c9                   	leaveq 
  407a1b:	c3                   	retq   

0000000000407a1c <list_insert>:

struct chunk_list * list_insert(struct chunk_list * list_head, u_int32 cid) {
  407a1c:	55                   	push   %rbp
  407a1d:	48 89 e5             	mov    %rsp,%rbp
  407a20:	48 83 ec 20          	sub    $0x20,%rsp
  407a24:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  407a28:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  struct chunk_list * p, * pnext;
  if (list_head == NULL) {
  407a2b:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  407a30:	75 23                	jne    407a55 <list_insert+0x39>
    list_head = (struct chunk_list *) malloc(sizeof(struct chunk_list));
  407a32:	bf 20 00 00 00       	mov    $0x20,%edi
  407a37:	e8 14 f3 ff ff       	callq  406d50 <malloc@plt>
  407a3c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    pnext = NULL;
  407a40:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  407a47:	00 
    p = list_head;
  407a48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407a4c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  407a50:	e9 85 00 00 00       	jmpq   407ada <list_insert+0xbe>
  } else {
    if (cid < list_head->cid) {
  407a55:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407a59:	8b 40 10             	mov    0x10(%rax),%eax
  407a5c:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
  407a5f:	76 1f                	jbe    407a80 <list_insert+0x64>
      p = (struct chunk_list *) malloc(sizeof(struct chunk_list));
  407a61:	bf 20 00 00 00       	mov    $0x20,%edi
  407a66:	e8 e5 f2 ff ff       	callq  406d50 <malloc@plt>
  407a6b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
      p->next = list_head;
  407a6f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407a73:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  407a77:	48 89 10             	mov    %rdx,(%rax)
      return p;
  407a7a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407a7e:	eb 69                	jmp    407ae9 <list_insert+0xcd>
    } else {
      p = list_head;
  407a80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407a84:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
      while (p->next != NULL && cid > p->next->cid)
  407a88:	eb 0b                	jmp    407a95 <list_insert+0x79>
        p = p->next;
  407a8a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407a8e:	48 8b 00             	mov    (%rax),%rax
  407a91:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
      p = (struct chunk_list *) malloc(sizeof(struct chunk_list));
      p->next = list_head;
      return p;
    } else {
      p = list_head;
      while (p->next != NULL && cid > p->next->cid)
  407a95:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407a99:	48 8b 00             	mov    (%rax),%rax
  407a9c:	48 85 c0             	test   %rax,%rax
  407a9f:	74 0f                	je     407ab0 <list_insert+0x94>
  407aa1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407aa5:	48 8b 00             	mov    (%rax),%rax
  407aa8:	8b 40 10             	mov    0x10(%rax),%eax
  407aab:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
  407aae:	72 da                	jb     407a8a <list_insert+0x6e>
        p = p->next;
      pnext = p->next;   
  407ab0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407ab4:	48 8b 00             	mov    (%rax),%rax
  407ab7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      p->next = (struct chunk_list *) malloc(sizeof(struct chunk_list));
  407abb:	bf 20 00 00 00       	mov    $0x20,%edi
  407ac0:	e8 8b f2 ff ff       	callq  406d50 <malloc@plt>
  407ac5:	48 89 c2             	mov    %rax,%rdx
  407ac8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407acc:	48 89 10             	mov    %rdx,(%rax)
      p = p->next;
  407acf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407ad3:	48 8b 00             	mov    (%rax),%rax
  407ad6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    }
  }

  p->next = pnext;
  407ada:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407ade:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  407ae2:	48 89 10             	mov    %rdx,(%rax)
  return p;
  407ae5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
} 
  407ae9:	c9                   	leaveq 
  407aea:	c3                   	retq   

0000000000407aeb <Reassemble>:

/*
 * Reassemble the chunks together, and write it to the file
 */
void * 
Reassemble(void * args) {
  407aeb:	55                   	push   %rbp
  407aec:	48 89 e5             	mov    %rsp,%rbp
  407aef:	48 83 ec 50          	sub    $0x50,%rsp
  407af3:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  int chunkcount = 0;
  407af7:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%rbp)

  int fd = -1;
  407afe:	c7 45 d0 ff ff ff ff 	movl   $0xffffffff,-0x30(%rbp)
  struct chunk_list * list_head, * p;
  list_head = NULL;
  407b05:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  407b0c:	00 

  if (args != NULL) {
  407b0d:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  407b12:	74 3d                	je     407b51 <Reassemble+0x66>
    fd = open((char *)args, O_CREAT|O_WRONLY|O_TRUNC, S_IRUSR|S_IWUSR);
  407b14:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  407b18:	ba 80 01 00 00       	mov    $0x180,%edx
  407b1d:	be 41 02 00 00       	mov    $0x241,%esi
  407b22:	48 89 c7             	mov    %rax,%rdi
  407b25:	b8 00 00 00 00       	mov    $0x0,%eax
  407b2a:	e8 d1 f4 ff ff       	callq  407000 <open@plt>
  407b2f:	89 45 d0             	mov    %eax,-0x30(%rbp)
    if (fd < 0) 
  407b32:	83 7d d0 00          	cmpl   $0x0,-0x30(%rbp)
  407b36:	79 0a                	jns    407b42 <Reassemble+0x57>
      perror("Reassemble open");
  407b38:	bf c5 7c 43 00       	mov    $0x437cc5,%edi
  407b3d:	e8 3e f4 ff ff       	callq  406f80 <perror@plt>
    fchmod(fd, ~(S_ISUID | S_ISGID |S_IXGRP | S_IXUSR | S_IXOTH));
  407b42:	8b 45 d0             	mov    -0x30(%rbp),%eax
  407b45:	be b6 f3 ff ff       	mov    $0xfffff3b6,%esi
  407b4a:	89 c7                	mov    %eax,%edi
  407b4c:	e8 ff f2 ff ff       	callq  406e50 <fchmod@plt>
  }

  while (1) {
    int f = 0;
  407b51:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
    f = 0;
  407b58:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
    send_buf_item * item;
    if (tail_reassemble == head_reassemble) {
  407b5f:	8b 15 3f 11 25 00    	mov    0x25113f(%rip),%edx        # 658ca4 <tail_reassemble>
  407b65:	8b 05 35 11 25 00    	mov    0x251135(%rip),%eax        # 658ca0 <head_reassemble>
  407b6b:	39 c2                	cmp    %eax,%edx
  407b6d:	75 0e                	jne    407b7d <Reassemble+0x92>
      break;     
  407b6f:	90                   	nop
    
    MEM_FREE(item);
  }

  //write the remaining chunks into the file
  p = list_head;
  407b70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407b74:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  while (p != NULL) {
  407b78:	e9 23 04 00 00       	jmpq   407fa0 <Reassemble+0x4b5>
    f = 0;
    send_buf_item * item;
    if (tail_reassemble == head_reassemble) {
      break;     
    }
    item = buf_reassemble[tail_reassemble];
  407b7d:	8b 05 21 11 25 00    	mov    0x251121(%rip),%eax        # 658ca4 <tail_reassemble>
  407b83:	48 98                	cltq   
  407b85:	48 8b 04 c5 c0 a9 e5 	mov    0xe5a9c0(,%rax,8),%rax
  407b8c:	00 
  407b8d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    tail_reassemble ++;
  407b91:	8b 05 0d 11 25 00    	mov    0x25110d(%rip),%eax        # 658ca4 <tail_reassemble>
  407b97:	83 c0 01             	add    $0x1,%eax
  407b9a:	89 05 04 11 25 00    	mov    %eax,0x251104(%rip)        # 658ca4 <tail_reassemble>
    if (tail_reassemble == NUM_BUF_REASSEMBLE) tail_reassemble = 0;
  407ba0:	8b 05 fe 10 25 00    	mov    0x2510fe(%rip),%eax        # 658ca4 <tail_reassemble>
  407ba6:	3d 00 00 10 00       	cmp    $0x100000,%eax
  407bab:	75 0a                	jne    407bb7 <Reassemble+0xcc>
  407bad:	c7 05 ed 10 25 00 00 	movl   $0x0,0x2510ed(%rip)        # 658ca4 <tail_reassemble>
  407bb4:	00 00 00 

    send_body * body = NULL;
  407bb7:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  407bbe:	00 
    send_head * head;
    
    switch (item->type) {
  407bbf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407bc3:	0f b6 00             	movzbl (%rax),%eax
  407bc6:	0f b6 c0             	movzbl %al,%eax
  407bc9:	85 c0                	test   %eax,%eax
  407bcb:	0f 88 3a 03 00 00    	js     407f0b <Reassemble+0x420>
  407bd1:	83 f8 01             	cmp    $0x1,%eax
  407bd4:	7e 0e                	jle    407be4 <Reassemble+0xf9>
  407bd6:	83 f8 03             	cmp    $0x3,%eax
  407bd9:	0f 84 0d 02 00 00    	je     407dec <Reassemble+0x301>
  407bdf:	e9 27 03 00 00       	jmpq   407f0b <Reassemble+0x420>
    case TYPE_FINGERPRINT:
    case TYPE_COMPRESS:
      body = (send_body *)item->str;
  407be4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407be8:	48 8b 40 08          	mov    0x8(%rax),%rax
  407bec:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
      if (fd == -1) {
  407bf0:	83 7d d0 ff          	cmpl   $0xffffffff,-0x30(%rbp)
  407bf4:	0f 85 8c 00 00 00    	jne    407c86 <Reassemble+0x19b>
        //if havn't get the file header, insert current chunk into the queue
        p = list_insert(list_head, body->cid);
  407bfa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407bfe:	8b 50 08             	mov    0x8(%rax),%edx
  407c01:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407c05:	89 d6                	mov    %edx,%esi
  407c07:	48 89 c7             	mov    %rax,%rdi
  407c0a:	e8 0d fe ff ff       	callq  407a1c <list_insert>
  407c0f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        if (list_head ==NULL || list_head->cid > body->cid) {
  407c13:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  407c18:	74 12                	je     407c2c <Reassemble+0x141>
  407c1a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407c1e:	8b 50 10             	mov    0x10(%rax),%edx
  407c21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407c25:	8b 40 08             	mov    0x8(%rax),%eax
  407c28:	39 c2                	cmp    %eax,%edx
  407c2a:	76 08                	jbe    407c34 <Reassemble+0x149>
          list_head = p;
  407c2c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407c30:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        }
        p->content = item->content;
  407c34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407c38:	48 8b 50 10          	mov    0x10(%rax),%rdx
  407c3c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407c40:	48 89 50 18          	mov    %rdx,0x18(%rax)
        p->cid = body->cid;
  407c44:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407c48:	8b 50 08             	mov    0x8(%rax),%edx
  407c4b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407c4f:	89 50 10             	mov    %edx,0x10(%rax)
        p->len = body->len;
  407c52:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407c56:	48 8b 50 10          	mov    0x10(%rax),%rdx
  407c5a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407c5e:	48 89 50 08          	mov    %rdx,0x8(%rax)
        MEM_FREE(body);
  407c62:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  407c67:	0f 84 7a 01 00 00    	je     407de7 <Reassemble+0x2fc>
  407c6d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407c71:	48 89 c7             	mov    %rax,%rdi
  407c74:	e8 27 f1 ff ff       	callq  406da0 <free@plt>
  407c79:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  407c80:	00 
            p->cid = body->cid;
            p->len = body->len;
          }        
          // }
      }
      break;
  407c81:	e9 85 02 00 00       	jmpq   407f0b <Reassemble+0x420>
        p->content = item->content;
        p->cid = body->cid;
        p->len = body->len;
        MEM_FREE(body);
      } else {
          if (body->cid == chunkcount) {
  407c86:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407c8a:	8b 50 08             	mov    0x8(%rax),%edx
  407c8d:	8b 45 cc             	mov    -0x34(%rbp),%eax
  407c90:	39 c2                	cmp    %eax,%edx
  407c92:	0f 85 e2 00 00 00    	jne    407d7a <Reassemble+0x28f>
            //if this chunk is in the right order, write it into the file
                          
            if (0 > xwrite(fd, item->content, body->len)) {
  407c98:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407c9c:	48 8b 50 10          	mov    0x10(%rax),%rdx
  407ca0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407ca4:	48 8b 48 10          	mov    0x10(%rax),%rcx
  407ca8:	8b 45 d0             	mov    -0x30(%rbp),%eax
  407cab:	48 89 ce             	mov    %rcx,%rsi
  407cae:	89 c7                	mov    %eax,%edi
  407cb0:	e8 7a 5d 00 00       	callq  40da2f <xwrite>
  407cb5:	85 c0                	test   %eax,%eax
  407cb7:	79 32                	jns    407ceb <Reassemble+0x200>
              perror("xwrite");
  407cb9:	bf d5 7c 43 00       	mov    $0x437cd5,%edi
  407cbe:	e8 bd f2 ff ff       	callq  406f80 <perror@plt>
              EXIT_TRACE("xwrite\n");
  407cc3:	48 8b 05 b6 0c 25 00 	mov    0x250cb6(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  407cca:	ba 0c 7e 43 00       	mov    $0x437e0c,%edx
  407ccf:	be dc 7c 43 00       	mov    $0x437cdc,%esi
  407cd4:	48 89 c7             	mov    %rax,%rdi
  407cd7:	b8 00 00 00 00       	mov    $0x0,%eax
  407cdc:	e8 af f2 ff ff       	callq  406f90 <fprintf@plt>
  407ce1:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  407ce6:	e8 35 f0 ff ff       	callq  406d20 <exit@plt>
            }
            chunkcount ++;
  407ceb:	83 45 cc 01          	addl   $0x1,-0x34(%rbp)
            p = list_head;
  407cef:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407cf3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
            while (p != NULL && p->cid == chunkcount) {
  407cf7:	eb 62                	jmp    407d5b <Reassemble+0x270>
              if (0 > xwrite(fd, p->content, p->len)) {
  407cf9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407cfd:	48 8b 50 08          	mov    0x8(%rax),%rdx
  407d01:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407d05:	48 8b 48 18          	mov    0x18(%rax),%rcx
  407d09:	8b 45 d0             	mov    -0x30(%rbp),%eax
  407d0c:	48 89 ce             	mov    %rcx,%rsi
  407d0f:	89 c7                	mov    %eax,%edi
  407d11:	e8 19 5d 00 00       	callq  40da2f <xwrite>
  407d16:	85 c0                	test   %eax,%eax
  407d18:	79 32                	jns    407d4c <Reassemble+0x261>
                perror("xwrite");
  407d1a:	bf d5 7c 43 00       	mov    $0x437cd5,%edi
  407d1f:	e8 5c f2 ff ff       	callq  406f80 <perror@plt>
                EXIT_TRACE("xwrite\n");
  407d24:	48 8b 05 55 0c 25 00 	mov    0x250c55(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  407d2b:	ba 0c 7e 43 00       	mov    $0x437e0c,%edx
  407d30:	be dc 7c 43 00       	mov    $0x437cdc,%esi
  407d35:	48 89 c7             	mov    %rax,%rdi
  407d38:	b8 00 00 00 00       	mov    $0x0,%eax
  407d3d:	e8 4e f2 ff ff       	callq  406f90 <fprintf@plt>
  407d42:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  407d47:	e8 d4 ef ff ff       	callq  406d20 <exit@plt>
              }
              chunkcount ++;
  407d4c:	83 45 cc 01          	addl   $0x1,-0x34(%rbp)
              p = p->next;
  407d50:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407d54:	48 8b 00             	mov    (%rax),%rax
  407d57:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
              perror("xwrite");
              EXIT_TRACE("xwrite\n");
            }
            chunkcount ++;
            p = list_head;
            while (p != NULL && p->cid == chunkcount) {
  407d5b:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  407d60:	74 0e                	je     407d70 <Reassemble+0x285>
  407d62:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407d66:	8b 50 10             	mov    0x10(%rax),%edx
  407d69:	8b 45 cc             	mov    -0x34(%rbp),%eax
  407d6c:	39 c2                	cmp    %eax,%edx
  407d6e:	74 89                	je     407cf9 <Reassemble+0x20e>
                EXIT_TRACE("xwrite\n");
              }
              chunkcount ++;
              p = p->next;
            }
            list_head = p;
  407d70:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407d74:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  407d78:	eb 6d                	jmp    407de7 <Reassemble+0x2fc>
          } else {
            //if this chunk is out of order, insert it into the list
            p = list_insert(list_head, body->cid);
  407d7a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407d7e:	8b 50 08             	mov    0x8(%rax),%edx
  407d81:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407d85:	89 d6                	mov    %edx,%esi
  407d87:	48 89 c7             	mov    %rax,%rdi
  407d8a:	e8 8d fc ff ff       	callq  407a1c <list_insert>
  407d8f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
            if (list_head ==NULL || list_head->cid > body->cid) {
  407d93:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  407d98:	74 12                	je     407dac <Reassemble+0x2c1>
  407d9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407d9e:	8b 50 10             	mov    0x10(%rax),%edx
  407da1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407da5:	8b 40 08             	mov    0x8(%rax),%eax
  407da8:	39 c2                	cmp    %eax,%edx
  407daa:	76 08                	jbe    407db4 <Reassemble+0x2c9>
              list_head = p;
  407dac:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407db0:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
            }
            p->content = item->content;
  407db4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407db8:	48 8b 50 10          	mov    0x10(%rax),%rdx
  407dbc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407dc0:	48 89 50 18          	mov    %rdx,0x18(%rax)
            p->cid = body->cid;
  407dc4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407dc8:	8b 50 08             	mov    0x8(%rax),%edx
  407dcb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407dcf:	89 50 10             	mov    %edx,0x10(%rax)
            p->len = body->len;
  407dd2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  407dd6:	48 8b 50 10          	mov    0x10(%rax),%rdx
  407dda:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407dde:	48 89 50 08          	mov    %rdx,0x8(%rax)
          }        
          // }
      }
      break;
  407de2:	e9 24 01 00 00       	jmpq   407f0b <Reassemble+0x420>
  407de7:	e9 1f 01 00 00       	jmpq   407f0b <Reassemble+0x420>
    case TYPE_HEAD:
      //get file header
      head = (send_head *)item->str;
  407dec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407df0:	48 8b 40 08          	mov    0x8(%rax),%rax
  407df4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      if (fd == -1) {
  407df8:	83 7d d0 ff          	cmpl   $0xffffffff,-0x30(%rbp)
  407dfc:	75 2e                	jne    407e2c <Reassemble+0x341>
        fd = open(head->filename, O_CREAT|O_WRONLY|O_TRUNC, S_IRUSR|S_IWUSR);
  407dfe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407e02:	ba 80 01 00 00       	mov    $0x180,%edx
  407e07:	be 41 02 00 00       	mov    $0x241,%esi
  407e0c:	48 89 c7             	mov    %rax,%rdi
  407e0f:	b8 00 00 00 00       	mov    $0x0,%eax
  407e14:	e8 e7 f1 ff ff       	callq  407000 <open@plt>
  407e19:	89 45 d0             	mov    %eax,-0x30(%rbp)
        if (fd < 0)
  407e1c:	83 7d d0 00          	cmpl   $0x0,-0x30(%rbp)
  407e20:	79 0a                	jns    407e2c <Reassemble+0x341>
          perror("head_open");
  407e22:	bf e9 7c 43 00       	mov    $0x437ce9,%edi
  407e27:	e8 54 f1 ff ff       	callq  406f80 <perror@plt>
      }

      MEM_FREE(head);
  407e2c:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  407e31:	74 14                	je     407e47 <Reassemble+0x35c>
  407e33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  407e37:	48 89 c7             	mov    %rax,%rdi
  407e3a:	e8 61 ef ff ff       	callq  406da0 <free@plt>
  407e3f:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  407e46:	00 
      chunkcount = 0;
  407e47:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%rbp)

      p = list_head;
  407e4e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407e52:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      while (p != NULL && p->cid == chunkcount) {
  407e56:	e9 8e 00 00 00       	jmpq   407ee9 <Reassemble+0x3fe>
        if (0 > xwrite(fd, p->content, p->len)) {
  407e5b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407e5f:	48 8b 50 08          	mov    0x8(%rax),%rdx
  407e63:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407e67:	48 8b 48 18          	mov    0x18(%rax),%rcx
  407e6b:	8b 45 d0             	mov    -0x30(%rbp),%eax
  407e6e:	48 89 ce             	mov    %rcx,%rsi
  407e71:	89 c7                	mov    %eax,%edi
  407e73:	e8 b7 5b 00 00       	callq  40da2f <xwrite>
  407e78:	85 c0                	test   %eax,%eax
  407e7a:	79 28                	jns    407ea4 <Reassemble+0x3b9>
          EXIT_TRACE("xwrite\n");
  407e7c:	48 8b 05 fd 0a 25 00 	mov    0x250afd(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  407e83:	ba 0c 7e 43 00       	mov    $0x437e0c,%edx
  407e88:	be dc 7c 43 00       	mov    $0x437cdc,%esi
  407e8d:	48 89 c7             	mov    %rax,%rdi
  407e90:	b8 00 00 00 00       	mov    $0x0,%eax
  407e95:	e8 f6 f0 ff ff       	callq  406f90 <fprintf@plt>
  407e9a:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  407e9f:	e8 7c ee ff ff       	callq  406d20 <exit@plt>
        }
        if (p->content) MEM_FREE(p->content);
  407ea4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407ea8:	48 8b 40 18          	mov    0x18(%rax),%rax
  407eac:	48 85 c0             	test   %rax,%rax
  407eaf:	74 29                	je     407eda <Reassemble+0x3ef>
  407eb1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407eb5:	48 8b 40 18          	mov    0x18(%rax),%rax
  407eb9:	48 85 c0             	test   %rax,%rax
  407ebc:	74 1c                	je     407eda <Reassemble+0x3ef>
  407ebe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407ec2:	48 8b 40 18          	mov    0x18(%rax),%rax
  407ec6:	48 89 c7             	mov    %rax,%rdi
  407ec9:	e8 d2 ee ff ff       	callq  406da0 <free@plt>
  407ece:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407ed2:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  407ed9:	00 
        chunkcount ++;
  407eda:	83 45 cc 01          	addl   $0x1,-0x34(%rbp)
        p = p->next;
  407ede:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407ee2:	48 8b 00             	mov    (%rax),%rax
  407ee5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

      MEM_FREE(head);
      chunkcount = 0;

      p = list_head;
      while (p != NULL && p->cid == chunkcount) {
  407ee9:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  407eee:	74 12                	je     407f02 <Reassemble+0x417>
  407ef0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407ef4:	8b 50 10             	mov    0x10(%rax),%edx
  407ef7:	8b 45 cc             	mov    -0x34(%rbp),%eax
  407efa:	39 c2                	cmp    %eax,%edx
  407efc:	0f 84 59 ff ff ff    	je     407e5b <Reassemble+0x370>
        }
        if (p->content) MEM_FREE(p->content);
        chunkcount ++;
        p = p->next;
      }
      list_head = p;
  407f02:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407f06:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      
      break;
  407f0a:	90                   	nop
    }
    
    MEM_FREE(item);
  407f0b:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  407f10:	74 14                	je     407f26 <Reassemble+0x43b>
  407f12:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  407f16:	48 89 c7             	mov    %rax,%rdi
  407f19:	e8 82 ee ff ff       	callq  406da0 <free@plt>
  407f1e:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  407f25:	00 
  }
  407f26:	e9 26 fc ff ff       	jmpq   407b51 <Reassemble+0x66>

  //write the remaining chunks into the file
  p = list_head;
  while (p != NULL) {
    if (0 > xwrite(fd, p->content, p->len)) {
  407f2b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407f2f:	48 8b 50 08          	mov    0x8(%rax),%rdx
  407f33:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407f37:	48 8b 48 18          	mov    0x18(%rax),%rcx
  407f3b:	8b 45 d0             	mov    -0x30(%rbp),%eax
  407f3e:	48 89 ce             	mov    %rcx,%rsi
  407f41:	89 c7                	mov    %eax,%edi
  407f43:	e8 e7 5a 00 00       	callq  40da2f <xwrite>
  407f48:	85 c0                	test   %eax,%eax
  407f4a:	79 28                	jns    407f74 <Reassemble+0x489>
      EXIT_TRACE("xwrite\n");
  407f4c:	48 8b 05 2d 0a 25 00 	mov    0x250a2d(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  407f53:	ba 0c 7e 43 00       	mov    $0x437e0c,%edx
  407f58:	be dc 7c 43 00       	mov    $0x437cdc,%esi
  407f5d:	48 89 c7             	mov    %rax,%rdi
  407f60:	b8 00 00 00 00       	mov    $0x0,%eax
  407f65:	e8 26 f0 ff ff       	callq  406f90 <fprintf@plt>
  407f6a:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  407f6f:	e8 ac ed ff ff       	callq  406d20 <exit@plt>
    }

    if (p->cid == chunkcount) 
  407f74:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407f78:	8b 50 10             	mov    0x10(%rax),%edx
  407f7b:	8b 45 cc             	mov    -0x34(%rbp),%eax
  407f7e:	39 c2                	cmp    %eax,%edx
  407f80:	75 06                	jne    407f88 <Reassemble+0x49d>
      chunkcount ++;
  407f82:	83 45 cc 01          	addl   $0x1,-0x34(%rbp)
  407f86:	eb 0d                	jmp    407f95 <Reassemble+0x4aa>
    else {
      chunkcount = p->cid+1;
  407f88:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407f8c:	8b 40 10             	mov    0x10(%rax),%eax
  407f8f:	83 c0 01             	add    $0x1,%eax
  407f92:	89 45 cc             	mov    %eax,-0x34(%rbp)
    }
    p = p->next;    
  407f95:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  407f99:	48 8b 00             	mov    (%rax),%rax
  407f9c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    MEM_FREE(item);
  }

  //write the remaining chunks into the file
  p = list_head;
  while (p != NULL) {
  407fa0:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  407fa5:	75 84                	jne    407f2b <Reassemble+0x440>
      chunkcount = p->cid+1;
    }
    p = p->next;    
  }

  close(fd);
  407fa7:	8b 45 d0             	mov    -0x30(%rbp),%eax
  407faa:	89 c7                	mov    %eax,%edi
  407fac:	e8 ef ec ff ff       	callq  406ca0 <close@plt>
  return NULL;
  407fb1:	b8 00 00 00 00       	mov    $0x0,%eax
}
  407fb6:	c9                   	leaveq 
  407fb7:	c3                   	retq   

0000000000407fb8 <RecvBlock>:
/*
 * Read the input file
 */
void *
RecvBlock(void * args) 
{
  407fb8:	55                   	push   %rbp
  407fb9:	48 89 e5             	mov    %rsp,%rbp
  407fbc:	48 83 ec 50          	sub    $0x50,%rsp
  407fc0:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  407fc4:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  407fcb:	00 00 
  407fcd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  407fd1:	31 c0                	xor    %eax,%eax
  config * conf = (config *)args;
  407fd3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  407fd7:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  int fd = 0;
  407fdb:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
  
  int check_count = 0;
  407fe2:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%rbp)

  fd = open(conf->infile, O_RDONLY|O_LARGEFILE);
  407fe9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  407fed:	be 00 80 00 00       	mov    $0x8000,%esi
  407ff2:	48 89 c7             	mov    %rax,%rdi
  407ff5:	b8 00 00 00 00       	mov    $0x0,%eax
  407ffa:	e8 01 f0 ff ff       	callq  407000 <open@plt>
  407fff:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  if (fd < 0) {
  408002:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
  408006:	79 14                	jns    40801c <RecvBlock+0x64>
    perror("infile open");
  408008:	bf f3 7c 43 00       	mov    $0x437cf3,%edi
  40800d:	e8 6e ef ff ff       	callq  406f80 <perror@plt>
    return NULL;
  408012:	b8 00 00 00 00       	mov    $0x0,%eax
  408017:	e9 f6 04 00 00       	jmpq   408512 <RecvBlock+0x55a>
  }

  send_buf_item * item;

  while(1) {  
    item = (send_buf_item*)malloc(sizeof(send_buf_item));
  40801c:	bf 20 00 00 00       	mov    $0x20,%edi
  408021:	e8 2a ed ff ff       	callq  406d50 <malloc@plt>
  408026:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

    if (xread(fd, &item->type, sizeof(item->type)) < 0){
  40802a:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  40802e:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  408031:	ba 01 00 00 00       	mov    $0x1,%edx
  408036:	48 89 ce             	mov    %rcx,%rsi
  408039:	89 c7                	mov    %eax,%edi
  40803b:	e8 7c 59 00 00       	callq  40d9bc <xread>
  408040:	85 c0                	test   %eax,%eax
  408042:	79 32                	jns    408076 <RecvBlock+0xbe>
      perror("xread:");
  408044:	bf ff 7c 43 00       	mov    $0x437cff,%edi
  408049:	e8 32 ef ff ff       	callq  406f80 <perror@plt>
      EXIT_TRACE("xread type fails\n");
  40804e:	48 8b 05 2b 09 25 00 	mov    0x25092b(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  408055:	ba 17 7e 43 00       	mov    $0x437e17,%edx
  40805a:	be 06 7d 43 00       	mov    $0x437d06,%esi
  40805f:	48 89 c7             	mov    %rax,%rdi
  408062:	b8 00 00 00 00       	mov    $0x0,%eax
  408067:	e8 24 ef ff ff       	callq  406f90 <fprintf@plt>
  40806c:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  408071:	e8 aa ec ff ff       	callq  406d20 <exit@plt>
      return NULL;
    }
    send_body * body;
    send_head * head;

    if (item->type == TYPE_FINISH) {
  408076:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40807a:	0f b6 00             	movzbl (%rax),%eax
  40807d:	3c 04                	cmp    $0x4,%al
  40807f:	75 1e                	jne    40809f <RecvBlock+0xe7>
      if (head_reassemble == NUM_BUF_REASSEMBLE) head_reassemble = 0;
      break;
    }    
  }

  end_RecvBlock = TRUE;
  408081:	c7 05 21 0c 25 00 01 	movl   $0x1,0x250c21(%rip)        # 658cac <end_RecvBlock>
  408088:	00 00 00 
  close(fd);
  40808b:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  40808e:	89 c7                	mov    %eax,%edi
  408090:	e8 0b ec ff ff       	callq  406ca0 <close@plt>
  return NULL;
  408095:	b8 00 00 00 00       	mov    $0x0,%eax
  40809a:	e9 73 04 00 00       	jmpq   408512 <RecvBlock+0x55a>
    }

    int checkbit;
      
    //get the item
    switch (item->type) {
  40809f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4080a3:	0f b6 00             	movzbl (%rax),%eax
  4080a6:	0f b6 c0             	movzbl %al,%eax
  4080a9:	83 f8 01             	cmp    $0x1,%eax
  4080ac:	0f 84 ca 01 00 00    	je     40827c <RecvBlock+0x2c4>
  4080b2:	83 f8 03             	cmp    $0x3,%eax
  4080b5:	0f 84 59 03 00 00    	je     408414 <RecvBlock+0x45c>
  4080bb:	85 c0                	test   %eax,%eax
  4080bd:	0f 85 4a 04 00 00    	jne    40850d <RecvBlock+0x555>
    case TYPE_FINGERPRINT:
      //if fingerprint, put it into sendcache thread
      body = (send_body *)malloc(sizeof(send_body));
  4080c3:	bf 18 00 00 00       	mov    $0x18,%edi
  4080c8:	e8 83 ec ff ff       	callq  406d50 <malloc@plt>
  4080cd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      if (xread(fd, &body->cid, sizeof(body->cid)) < 0){
  4080d1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4080d5:	48 8d 48 08          	lea    0x8(%rax),%rcx
  4080d9:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  4080dc:	ba 04 00 00 00       	mov    $0x4,%edx
  4080e1:	48 89 ce             	mov    %rcx,%rsi
  4080e4:	89 c7                	mov    %eax,%edi
  4080e6:	e8 d1 58 00 00       	callq  40d9bc <xread>
  4080eb:	85 c0                	test   %eax,%eax
  4080ed:	79 28                	jns    408117 <RecvBlock+0x15f>
        EXIT_TRACE("xread body fails\n");
  4080ef:	48 8b 05 8a 08 25 00 	mov    0x25088a(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  4080f6:	ba 17 7e 43 00       	mov    $0x437e17,%edx
  4080fb:	be 1d 7d 43 00       	mov    $0x437d1d,%esi
  408100:	48 89 c7             	mov    %rax,%rdi
  408103:	b8 00 00 00 00       	mov    $0x0,%eax
  408108:	e8 83 ee ff ff       	callq  406f90 <fprintf@plt>
  40810d:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  408112:	e8 09 ec ff ff       	callq  406d20 <exit@plt>
      }
      if (body->cid == check_count) {
  408117:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40811b:	8b 50 08             	mov    0x8(%rax),%edx
  40811e:	8b 45 d0             	mov    -0x30(%rbp),%eax
  408121:	39 c2                	cmp    %eax,%edx
  408123:	75 06                	jne    40812b <RecvBlock+0x173>
        check_count ++;
  408125:	83 45 d0 01          	addl   $0x1,-0x30(%rbp)
  408129:	eb 1b                	jmp    408146 <RecvBlock+0x18e>
      } else {
        printf("error check-count %d, body->cid %d\n", check_count, body->cid);
  40812b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40812f:	8b 50 08             	mov    0x8(%rax),%edx
  408132:	8b 45 d0             	mov    -0x30(%rbp),%eax
  408135:	89 c6                	mov    %eax,%esi
  408137:	bf 38 7d 43 00       	mov    $0x437d38,%edi
  40813c:	b8 00 00 00 00       	mov    $0x0,%eax
  408141:	e8 2a eb ff ff       	callq  406c70 <printf@plt>
      }
      if (xread(fd, &body->len, sizeof(body->len)) < 0){
  408146:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40814a:	48 8d 48 10          	lea    0x10(%rax),%rcx
  40814e:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  408151:	ba 08 00 00 00       	mov    $0x8,%edx
  408156:	48 89 ce             	mov    %rcx,%rsi
  408159:	89 c7                	mov    %eax,%edi
  40815b:	e8 5c 58 00 00       	callq  40d9bc <xread>
  408160:	85 c0                	test   %eax,%eax
  408162:	79 28                	jns    40818c <RecvBlock+0x1d4>
        EXIT_TRACE("xread body fails\n");
  408164:	48 8b 05 15 08 25 00 	mov    0x250815(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  40816b:	ba 17 7e 43 00       	mov    $0x437e17,%edx
  408170:	be 1d 7d 43 00       	mov    $0x437d1d,%esi
  408175:	48 89 c7             	mov    %rax,%rdi
  408178:	b8 00 00 00 00       	mov    $0x0,%eax
  40817d:	e8 0e ee ff ff       	callq  406f90 <fprintf@plt>
  408182:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  408187:	e8 94 eb ff ff       	callq  406d20 <exit@plt>
      }
      item->str = (u_char *)body;
  40818c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408190:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  408194:	48 89 50 08          	mov    %rdx,0x8(%rax)
      if (body->len > 0) {        
  408198:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40819c:	48 8b 40 10          	mov    0x10(%rax),%rax
  4081a0:	48 85 c0             	test   %rax,%rax
  4081a3:	0f 84 ce 00 00 00    	je     408277 <RecvBlock+0x2bf>

        item->content = (u_char *)malloc(body->len);
  4081a9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4081ad:	48 8b 40 10          	mov    0x10(%rax),%rax
  4081b1:	48 89 c7             	mov    %rax,%rdi
  4081b4:	e8 97 eb ff ff       	callq  406d50 <malloc@plt>
  4081b9:	48 89 c2             	mov    %rax,%rdx
  4081bc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4081c0:	48 89 50 10          	mov    %rdx,0x10(%rax)
        if (item->content == NULL) {
  4081c4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4081c8:	48 8b 40 10          	mov    0x10(%rax),%rax
  4081cc:	48 85 c0             	test   %rax,%rax
  4081cf:	75 14                	jne    4081e5 <RecvBlock+0x22d>
          printf ("Error: Content is NULL\n");
  4081d1:	bf 5c 7d 43 00       	mov    $0x437d5c,%edi
  4081d6:	e8 f5 ea ff ff       	callq  406cd0 <puts@plt>
          perror("malloc");
  4081db:	bf 73 7d 43 00       	mov    $0x437d73,%edi
  4081e0:	e8 9b ed ff ff       	callq  406f80 <perror@plt>
        }
      
        if (xread(fd, item->content, body->len) < 0){
  4081e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4081e9:	48 8b 50 10          	mov    0x10(%rax),%rdx
  4081ed:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4081f1:	48 8b 48 10          	mov    0x10(%rax),%rcx
  4081f5:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  4081f8:	48 89 ce             	mov    %rcx,%rsi
  4081fb:	89 c7                	mov    %eax,%edi
  4081fd:	e8 ba 57 00 00       	callq  40d9bc <xread>
  408202:	85 c0                	test   %eax,%eax
  408204:	79 32                	jns    408238 <RecvBlock+0x280>
          perror("xread:");
  408206:	bf ff 7c 43 00       	mov    $0x437cff,%edi
  40820b:	e8 70 ed ff ff       	callq  406f80 <perror@plt>
          EXIT_TRACE("fp xread content fails\n");
  408210:	48 8b 05 69 07 25 00 	mov    0x250769(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  408217:	ba 17 7e 43 00       	mov    $0x437e17,%edx
  40821c:	be 7a 7d 43 00       	mov    $0x437d7a,%esi
  408221:	48 89 c7             	mov    %rax,%rdi
  408224:	b8 00 00 00 00       	mov    $0x0,%eax
  408229:	e8 62 ed ff ff       	callq  406f90 <fprintf@plt>
  40822e:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  408233:	e8 e8 ea ff ff       	callq  406d20 <exit@plt>
        }    
        //send to checkcache
        buf_checkcache[head_checkcache] = item;
  408238:	8b 05 5a 0a 25 00    	mov    0x250a5a(%rip),%eax        # 658c98 <head_checkcache>
  40823e:	48 98                	cltq   
  408240:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  408244:	48 89 14 c5 c0 a9 65 	mov    %rdx,0x65a9c0(,%rax,8)
  40824b:	00 
        head_checkcache ++;
  40824c:	8b 05 46 0a 25 00    	mov    0x250a46(%rip),%eax        # 658c98 <head_checkcache>
  408252:	83 c0 01             	add    $0x1,%eax
  408255:	89 05 3d 0a 25 00    	mov    %eax,0x250a3d(%rip)        # 658c98 <head_checkcache>
        if (head_checkcache == NUM_BUF_CHECKCACHE) head_checkcache = 0;
  40825b:	8b 05 37 0a 25 00    	mov    0x250a37(%rip),%eax        # 658c98 <head_checkcache>
  408261:	3d 00 00 10 00       	cmp    $0x100000,%eax
  408266:	75 0f                	jne    408277 <RecvBlock+0x2bf>
  408268:	c7 05 26 0a 25 00 00 	movl   $0x0,0x250a26(%rip)        # 658c98 <head_checkcache>
  40826f:	00 00 00 
      }
      break;
  408272:	e9 96 02 00 00       	jmpq   40850d <RecvBlock+0x555>
  408277:	e9 91 02 00 00       	jmpq   40850d <RecvBlock+0x555>
    case TYPE_COMPRESS:
      //if compressed data, send it to decompress thread
      body = (send_body *)malloc(sizeof(send_body));
  40827c:	bf 18 00 00 00       	mov    $0x18,%edi
  408281:	e8 ca ea ff ff       	callq  406d50 <malloc@plt>
  408286:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      if (xread(fd, &body->cid, sizeof(body->cid)) < 0){
  40828a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40828e:	48 8d 48 08          	lea    0x8(%rax),%rcx
  408292:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  408295:	ba 04 00 00 00       	mov    $0x4,%edx
  40829a:	48 89 ce             	mov    %rcx,%rsi
  40829d:	89 c7                	mov    %eax,%edi
  40829f:	e8 18 57 00 00       	callq  40d9bc <xread>
  4082a4:	85 c0                	test   %eax,%eax
  4082a6:	79 28                	jns    4082d0 <RecvBlock+0x318>
        EXIT_TRACE("xread body fails\n");
  4082a8:	48 8b 05 d1 06 25 00 	mov    0x2506d1(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  4082af:	ba 17 7e 43 00       	mov    $0x437e17,%edx
  4082b4:	be 1d 7d 43 00       	mov    $0x437d1d,%esi
  4082b9:	48 89 c7             	mov    %rax,%rdi
  4082bc:	b8 00 00 00 00       	mov    $0x0,%eax
  4082c1:	e8 ca ec ff ff       	callq  406f90 <fprintf@plt>
  4082c6:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  4082cb:	e8 50 ea ff ff       	callq  406d20 <exit@plt>
      }
      if (body->cid == check_count) {
  4082d0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4082d4:	8b 50 08             	mov    0x8(%rax),%edx
  4082d7:	8b 45 d0             	mov    -0x30(%rbp),%eax
  4082da:	39 c2                	cmp    %eax,%edx
  4082dc:	75 06                	jne    4082e4 <RecvBlock+0x32c>
        check_count ++;
  4082de:	83 45 d0 01          	addl   $0x1,-0x30(%rbp)
  4082e2:	eb 1b                	jmp    4082ff <RecvBlock+0x347>
      } else {
        printf("error check-count %d, body->cid %d\n", check_count, body->cid);
  4082e4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4082e8:	8b 50 08             	mov    0x8(%rax),%edx
  4082eb:	8b 45 d0             	mov    -0x30(%rbp),%eax
  4082ee:	89 c6                	mov    %eax,%esi
  4082f0:	bf 38 7d 43 00       	mov    $0x437d38,%edi
  4082f5:	b8 00 00 00 00       	mov    $0x0,%eax
  4082fa:	e8 71 e9 ff ff       	callq  406c70 <printf@plt>
      }
      if (xread(fd, &body->len, sizeof(body->len)) < 0){
  4082ff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408303:	48 8d 48 10          	lea    0x10(%rax),%rcx
  408307:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  40830a:	ba 08 00 00 00       	mov    $0x8,%edx
  40830f:	48 89 ce             	mov    %rcx,%rsi
  408312:	89 c7                	mov    %eax,%edi
  408314:	e8 a3 56 00 00       	callq  40d9bc <xread>
  408319:	85 c0                	test   %eax,%eax
  40831b:	79 28                	jns    408345 <RecvBlock+0x38d>
        EXIT_TRACE("xread body fails\n");
  40831d:	48 8b 05 5c 06 25 00 	mov    0x25065c(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  408324:	ba 17 7e 43 00       	mov    $0x437e17,%edx
  408329:	be 1d 7d 43 00       	mov    $0x437d1d,%esi
  40832e:	48 89 c7             	mov    %rax,%rdi
  408331:	b8 00 00 00 00       	mov    $0x0,%eax
  408336:	e8 55 ec ff ff       	callq  406f90 <fprintf@plt>
  40833b:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  408340:	e8 db e9 ff ff       	callq  406d20 <exit@plt>
      }
      item->str = (u_char *)body;
  408345:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408349:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40834d:	48 89 50 08          	mov    %rdx,0x8(%rax)
      if (body->len > 0) {
  408351:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408355:	48 8b 40 10          	mov    0x10(%rax),%rax
  408359:	48 85 c0             	test   %rax,%rax
  40835c:	0f 84 ad 00 00 00    	je     40840f <RecvBlock+0x457>
        item->content = (u_char *)malloc(body->len*sizeof(u_char));
  408362:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408366:	48 8b 40 10          	mov    0x10(%rax),%rax
  40836a:	48 89 c7             	mov    %rax,%rdi
  40836d:	e8 de e9 ff ff       	callq  406d50 <malloc@plt>
  408372:	48 89 c2             	mov    %rax,%rdx
  408375:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408379:	48 89 50 10          	mov    %rdx,0x10(%rax)
        if (xread(fd, item->content, body->len) < 0){
  40837d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408381:	48 8b 50 10          	mov    0x10(%rax),%rdx
  408385:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408389:	48 8b 48 10          	mov    0x10(%rax),%rcx
  40838d:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  408390:	48 89 ce             	mov    %rcx,%rsi
  408393:	89 c7                	mov    %eax,%edi
  408395:	e8 22 56 00 00       	callq  40d9bc <xread>
  40839a:	85 c0                	test   %eax,%eax
  40839c:	79 32                	jns    4083d0 <RecvBlock+0x418>
          perror("xread");
  40839e:	bf 97 7d 43 00       	mov    $0x437d97,%edi
  4083a3:	e8 d8 eb ff ff       	callq  406f80 <perror@plt>
          EXIT_TRACE("compress: xread content fails\n");
  4083a8:	48 8b 05 d1 05 25 00 	mov    0x2505d1(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  4083af:	ba 17 7e 43 00       	mov    $0x437e17,%edx
  4083b4:	be a0 7d 43 00       	mov    $0x437da0,%esi
  4083b9:	48 89 c7             	mov    %rax,%rdi
  4083bc:	b8 00 00 00 00       	mov    $0x0,%eax
  4083c1:	e8 ca eb ff ff       	callq  406f90 <fprintf@plt>
  4083c6:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  4083cb:	e8 50 e9 ff ff       	callq  406d20 <exit@plt>
        }
        //send to decompress
        buf_decompress[head_decompress] = item;
  4083d0:	8b 05 ba 08 25 00    	mov    0x2508ba(%rip),%eax        # 658c90 <head_decompress>
  4083d6:	48 98                	cltq   
  4083d8:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4083dc:	48 89 14 c5 00 aa 65 	mov    %rdx,0x165aa00(,%rax,8)
  4083e3:	01 
        head_decompress ++;
  4083e4:	8b 05 a6 08 25 00    	mov    0x2508a6(%rip),%eax        # 658c90 <head_decompress>
  4083ea:	83 c0 01             	add    $0x1,%eax
  4083ed:	89 05 9d 08 25 00    	mov    %eax,0x25089d(%rip)        # 658c90 <head_decompress>
        if (head_decompress == NUM_BUF_DECOMPRESS) head_decompress = 0;
  4083f3:	8b 05 97 08 25 00    	mov    0x250897(%rip),%eax        # 658c90 <head_decompress>
  4083f9:	3d 00 00 10 00       	cmp    $0x100000,%eax
  4083fe:	75 0f                	jne    40840f <RecvBlock+0x457>
  408400:	c7 05 86 08 25 00 00 	movl   $0x0,0x250886(%rip)        # 658c90 <head_decompress>
  408407:	00 00 00 
      }
      break;
  40840a:	e9 fe 00 00 00       	jmpq   40850d <RecvBlock+0x555>
  40840f:	e9 f9 00 00 00       	jmpq   40850d <RecvBlock+0x555>
    case TYPE_HEAD:
      //if file header, initialize
      if (xread(fd, &checkbit, sizeof(int)) < 0){
  408414:	48 8d 4d cc          	lea    -0x34(%rbp),%rcx
  408418:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  40841b:	ba 04 00 00 00       	mov    $0x4,%edx
  408420:	48 89 ce             	mov    %rcx,%rsi
  408423:	89 c7                	mov    %eax,%edi
  408425:	e8 92 55 00 00       	callq  40d9bc <xread>
  40842a:	85 c0                	test   %eax,%eax
  40842c:	79 28                	jns    408456 <RecvBlock+0x49e>
        EXIT_TRACE("xwrite head fails\n");
  40842e:	48 8b 05 4b 05 25 00 	mov    0x25054b(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  408435:	ba 17 7e 43 00       	mov    $0x437e17,%edx
  40843a:	be c4 7d 43 00       	mov    $0x437dc4,%esi
  40843f:	48 89 c7             	mov    %rax,%rdi
  408442:	b8 00 00 00 00       	mov    $0x0,%eax
  408447:	e8 44 eb ff ff       	callq  406f90 <fprintf@plt>
  40844c:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  408451:	e8 ca e8 ff ff       	callq  406d20 <exit@plt>
      }
      if (checkbit != CHECKBIT) {
  408456:	8b 45 cc             	mov    -0x34(%rbp),%eax
  408459:	3d 40 e2 01 00       	cmp    $0x1e240,%eax
  40845e:	74 14                	je     408474 <RecvBlock+0x4bc>
        printf("format error!\n");
  408460:	bf dc 7d 43 00       	mov    $0x437ddc,%edi
  408465:	e8 66 e8 ff ff       	callq  406cd0 <puts@plt>
        exit(1);
  40846a:	bf 01 00 00 00       	mov    $0x1,%edi
  40846f:	e8 ac e8 ff ff       	callq  406d20 <exit@plt>
      }
      head = (send_head *)malloc(sizeof(send_head));
  408474:	bf 68 00 00 00       	mov    $0x68,%edi
  408479:	e8 d2 e8 ff ff       	callq  406d50 <malloc@plt>
  40847e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
      if (xread(fd, head, sizeof(send_head)) < 0){
  408482:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  408486:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  408489:	ba 68 00 00 00       	mov    $0x68,%edx
  40848e:	48 89 ce             	mov    %rcx,%rsi
  408491:	89 c7                	mov    %eax,%edi
  408493:	e8 24 55 00 00       	callq  40d9bc <xread>
  408498:	85 c0                	test   %eax,%eax
  40849a:	79 28                	jns    4084c4 <RecvBlock+0x50c>
        EXIT_TRACE("xread head fails\n");
  40849c:	48 8b 05 dd 04 25 00 	mov    0x2504dd(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  4084a3:	ba 17 7e 43 00       	mov    $0x437e17,%edx
  4084a8:	be ea 7d 43 00       	mov    $0x437dea,%esi
  4084ad:	48 89 c7             	mov    %rax,%rdi
  4084b0:	b8 00 00 00 00       	mov    $0x0,%eax
  4084b5:	e8 d6 ea ff ff       	callq  406f90 <fprintf@plt>
  4084ba:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  4084bf:	e8 5c e8 ff ff       	callq  406d20 <exit@plt>
      }
      item->str = (u_char *)head;
  4084c4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4084c8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4084cc:	48 89 50 08          	mov    %rdx,0x8(%rax)
      buf_reassemble[head_reassemble] = item;
  4084d0:	8b 05 ca 07 25 00    	mov    0x2507ca(%rip),%eax        # 658ca0 <head_reassemble>
  4084d6:	48 98                	cltq   
  4084d8:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4084dc:	48 89 14 c5 c0 a9 e5 	mov    %rdx,0xe5a9c0(,%rax,8)
  4084e3:	00 
      head_reassemble ++;
  4084e4:	8b 05 b6 07 25 00    	mov    0x2507b6(%rip),%eax        # 658ca0 <head_reassemble>
  4084ea:	83 c0 01             	add    $0x1,%eax
  4084ed:	89 05 ad 07 25 00    	mov    %eax,0x2507ad(%rip)        # 658ca0 <head_reassemble>
      if (head_reassemble == NUM_BUF_REASSEMBLE) head_reassemble = 0;
  4084f3:	8b 05 a7 07 25 00    	mov    0x2507a7(%rip),%eax        # 658ca0 <head_reassemble>
  4084f9:	3d 00 00 10 00       	cmp    $0x100000,%eax
  4084fe:	75 0c                	jne    40850c <RecvBlock+0x554>
  408500:	c7 05 96 07 25 00 00 	movl   $0x0,0x250796(%rip)        # 658ca0 <head_reassemble>
  408507:	00 00 00 
      break;
  40850a:	eb 00                	jmp    40850c <RecvBlock+0x554>
  40850c:	90                   	nop
    }    
  }
  40850d:	e9 0a fb ff ff       	jmpq   40801c <RecvBlock+0x64>

  end_RecvBlock = TRUE;
  close(fd);
  return NULL;
}
  408512:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  408516:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  40851d:	00 00 
  40851f:	74 05                	je     408526 <RecvBlock+0x56e>
  408521:	e8 9a e9 ff ff       	callq  406ec0 <__stack_chk_fail@plt>
  408526:	c9                   	leaveq 
  408527:	c3                   	retq   

0000000000408528 <Decode>:

void 
Decode(config * conf){
  408528:	55                   	push   %rbp
  408529:	48 89 e5             	mov    %rsp,%rbp
  40852c:	48 83 ec 10          	sub    $0x10,%rsp
  408530:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
#ifdef ENABLE_PARSEC_HOOKS
    __parsec_roi_begin();
#endif
  RecvBlock(conf);
  408534:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408538:	48 89 c7             	mov    %rax,%rdi
  40853b:	e8 78 fa ff ff       	callq  407fb8 <RecvBlock>
  Decompress(NULL);
  408540:	bf 00 00 00 00       	mov    $0x0,%edi
  408545:	e8 f4 f1 ff ff       	callq  40773e <Decompress>
  CheckCache(NULL);
  40854a:	bf 00 00 00 00       	mov    $0x0,%edi
  40854f:	e8 aa f0 ff ff       	callq  4075fe <CheckCache>
  if (strcmp(conf->outfile, "") == 0)
  408554:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408558:	48 83 c0 64          	add    $0x64,%rax
  40855c:	0f b6 00             	movzbl (%rax),%eax
  40855f:	84 c0                	test   %al,%al
  408561:	75 0c                	jne    40856f <Decode+0x47>
    Reassemble(NULL);
  408563:	bf 00 00 00 00       	mov    $0x0,%edi
  408568:	e8 7e f5 ff ff       	callq  407aeb <Reassemble>
  40856d:	eb 10                	jmp    40857f <Decode+0x57>
  else Reassemble(conf->outfile);
  40856f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408573:	48 83 c0 64          	add    $0x64,%rax
  408577:	48 89 c7             	mov    %rax,%rdi
  40857a:	e8 6c f5 ff ff       	callq  407aeb <Reassemble>
#ifdef ENABLE_PARSEC_HOOKS
    __parsec_roi_end();
#endif
}
  40857f:	c9                   	leaveq 
  408580:	c3                   	retq   

0000000000408581 <keys_equal_fn>:
#endif

config * conf;

static int
keys_equal_fn ( void *key1, void *key2 ){
  408581:	55                   	push   %rbp
  408582:	48 89 e5             	mov    %rsp,%rbp
  408585:	48 83 ec 10          	sub    $0x10,%rsp
  408589:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40858d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return (memcmp(((CacheKey*)key1)->sha1name, ((CacheKey*)key2)->sha1name, SHA1_LEN) == 0);
  408591:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  408595:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408599:	ba 14 00 00 00       	mov    $0x14,%edx
  40859e:	48 89 ce             	mov    %rcx,%rsi
  4085a1:	48 89 c7             	mov    %rax,%rdi
  4085a4:	e8 57 e9 ff ff       	callq  406f00 <memcmp@plt>
  4085a9:	85 c0                	test   %eax,%eax
  4085ab:	0f 94 c0             	sete   %al
  4085ae:	0f b6 c0             	movzbl %al,%eax
}
  4085b1:	c9                   	leaveq 
  4085b2:	c3                   	retq   

00000000004085b3 <usage>:


/*--------------------------------------------------------------------------*/
static void
usage(char* prog)
{
  4085b3:	55                   	push   %rbp
  4085b4:	48 89 e5             	mov    %rsp,%rbp
  4085b7:	48 83 ec 10          	sub    $0x10,%rsp
  4085bb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  printf("usage: %s [-cusfh] [-w gzip/bzip2/none] [-i file/hostname] [-o file/hostname] [-b block_size_in_KB] [-t number_of_threads]\n",prog);
  4085bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4085c3:	48 89 c6             	mov    %rax,%rsi
  4085c6:	bf 28 7e 43 00       	mov    $0x437e28,%edi
  4085cb:	b8 00 00 00 00       	mov    $0x0,%eax
  4085d0:	e8 9b e6 ff ff       	callq  406c70 <printf@plt>
  printf("-c \t\t\tcompress\n");
  4085d5:	bf a4 7e 43 00       	mov    $0x437ea4,%edi
  4085da:	e8 f1 e6 ff ff       	callq  406cd0 <puts@plt>
  printf("-u \t\t\tuncompress\n");
  4085df:	bf b3 7e 43 00       	mov    $0x437eb3,%edi
  4085e4:	e8 e7 e6 ff ff       	callq  406cd0 <puts@plt>
  printf("-s \t\t\tsend output to the receiver\n");
  4085e9:	bf c8 7e 43 00       	mov    $0x437ec8,%edi
  4085ee:	e8 dd e6 ff ff       	callq  406cd0 <puts@plt>
  printf("-f \t\t\tput output into a file\n");
  4085f3:	bf ea 7e 43 00       	mov    $0x437eea,%edi
  4085f8:	e8 d3 e6 ff ff       	callq  406cd0 <puts@plt>
  printf("-w \t\t\tcompress/uncompress technique: gzip/bzip2/none\n");
  4085fd:	bf 08 7f 43 00       	mov    $0x437f08,%edi
  408602:	e8 c9 e6 ff ff       	callq  406cd0 <puts@plt>
  printf("-i file\t\t\tthe input file/src host\n");
  408607:	bf 40 7f 43 00       	mov    $0x437f40,%edi
  40860c:	e8 bf e6 ff ff       	callq  406cd0 <puts@plt>
  printf("-o file\t\t\tthe output file/dst host\n");
  408611:	bf 68 7f 43 00       	mov    $0x437f68,%edi
  408616:	e8 b5 e6 ff ff       	callq  406cd0 <puts@plt>
  printf("-b block_size_in_KB\tspecify the block size in KB, default=32KB\n");
  40861b:	bf 90 7f 43 00       	mov    $0x437f90,%edi
  408620:	e8 ab e6 ff ff       	callq  406cd0 <puts@plt>
  printf("-t number of threads per stage \n");
  408625:	bf d0 7f 43 00       	mov    $0x437fd0,%edi
  40862a:	e8 a1 e6 ff ff       	callq  406cd0 <puts@plt>
  printf("-h \t\t\thelp\n");
  40862f:	bf f0 7f 43 00       	mov    $0x437ff0,%edi
  408634:	e8 97 e6 ff ff       	callq  406cd0 <puts@plt>
}
  408639:	c9                   	leaveq 
  40863a:	c3                   	retq   

000000000040863b <main>:
/*--------------------------------------------------------------------------*/
int 
main(int argc, char** argv)
{
  40863b:	55                   	push   %rbp
  40863c:	48 89 e5             	mov    %rsp,%rbp
  40863f:	53                   	push   %rbx
  408640:	48 83 ec 28          	sub    $0x28,%rsp
  408644:	89 7d dc             	mov    %edi,-0x24(%rbp)
  408647:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
#ifdef PARSEC_VERSION
#define __PARSEC_STRING(x) #x
#define __PARSEC_XSTRING(x) __PARSEC_STRING(x)
  printf("PARSEC Benchmark Suite Version "__PARSEC_XSTRING(PARSEC_VERSION)"\n");
#else
  printf("PARSEC Benchmark Suite\n");
  40864b:	bf fb 7f 43 00       	mov    $0x437ffb,%edi
  408650:	e8 7b e6 ff ff       	callq  406cd0 <puts@plt>
#endif //PARSEC_VERSION
#ifdef ENABLE_PARSEC_HOOKS
        __parsec_bench_begin(__parsec_dedup);
#endif

  int32 compress = TRUE;
  408655:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%rbp)
  
  conf = (config *) malloc(sizeof(config));
  40865c:	bf d8 00 00 00       	mov    $0xd8,%edi
  408661:	e8 ea e6 ff ff       	callq  406d50 <malloc@plt>
  408666:	48 89 05 93 23 a5 01 	mov    %rax,0x1a52393(%rip)        # 1e5aa00 <conf>
  conf->b_size = 32 * 1024;
  40866d:	48 8b 05 8c 23 a5 01 	mov    0x1a5238c(%rip),%rax        # 1e5aa00 <conf>
  408674:	c7 80 d4 00 00 00 00 	movl   $0x8000,0xd4(%rax)
  40867b:	80 00 00 
  compress_way = COMPRESS_GZIP;
  40867e:	c7 05 40 23 25 01 00 	movl   $0x0,0x1252340(%rip)        # 165a9c8 <compress_way>
  408685:	00 00 00 
  strcpy(conf->outfile, "");
  408688:	48 8b 05 71 23 a5 01 	mov    0x1a52371(%rip),%rax        # 1e5aa00 <conf>
  40868f:	48 83 c0 64          	add    $0x64,%rax
  408693:	c6 00 00             	movb   $0x0,(%rax)
  conf->preloading = 0;
  408696:	48 8b 05 63 23 a5 01 	mov    0x1a52363(%rip),%rax        # 1e5aa00 <conf>
  40869d:	c7 80 cc 00 00 00 00 	movl   $0x0,0xcc(%rax)
  4086a4:	00 00 00 
  conf->nthreads = 1;
  4086a7:	48 8b 05 52 23 a5 01 	mov    0x1a52352(%rip),%rax        # 1e5aa00 <conf>
  4086ae:	c7 80 d0 00 00 00 01 	movl   $0x1,0xd0(%rax)
  4086b5:	00 00 00 

  //parse the args
  int ch;
  opterr = 0;
  4086b8:	c7 05 ae 02 25 00 00 	movl   $0x0,0x2502ae(%rip)        # 658970 <opterr@@GLIBC_2.2.5>
  4086bf:	00 00 00 
  optind = 1;
  4086c2:	c7 05 94 02 25 00 01 	movl   $0x1,0x250294(%rip)        # 658960 <optind@@GLIBC_2.2.5>
  4086c9:	00 00 00 
  while (-1 != (ch = getopt(argc, argv, "csufpo:i:b:w:t:h"))) {
  4086cc:	e9 e5 01 00 00       	jmpq   4088b6 <main+0x27b>
    switch (ch) {
  4086d1:	8b 45 ec             	mov    -0x14(%rbp),%eax
  4086d4:	83 e8 3f             	sub    $0x3f,%eax
  4086d7:	83 f8 38             	cmp    $0x38,%eax
  4086da:	0f 87 d6 01 00 00    	ja     4088b6 <main+0x27b>
  4086e0:	89 c0                	mov    %eax,%eax
  4086e2:	48 8b 04 c5 60 80 43 	mov    0x438060(,%rax,8),%rax
  4086e9:	00 
  4086ea:	ff e0                	jmpq   *%rax
    case 'c':
      compress = TRUE;
  4086ec:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%rbp)
      strcpy(conf->infile, "test.txt");
  4086f3:	48 8b 05 06 23 a5 01 	mov    0x1a52306(%rip),%rax        # 1e5aa00 <conf>
  4086fa:	48 b9 74 65 73 74 2e 	movabs $0x7478742e74736574,%rcx
  408701:	74 78 74 
  408704:	48 89 08             	mov    %rcx,(%rax)
  408707:	c6 40 08 00          	movb   $0x0,0x8(%rax)
      strcpy(conf->outfile, "out.cz");
  40870b:	48 8b 05 ee 22 a5 01 	mov    0x1a522ee(%rip),%rax        # 1e5aa00 <conf>
  408712:	48 83 c0 64          	add    $0x64,%rax
  408716:	c7 00 6f 75 74 2e    	movl   $0x2e74756f,(%rax)
  40871c:	66 c7 40 04 63 7a    	movw   $0x7a63,0x4(%rax)
  408722:	c6 40 06 00          	movb   $0x0,0x6(%rax)
      break;
  408726:	e9 8b 01 00 00       	jmpq   4088b6 <main+0x27b>
    case 'u':
      compress = FALSE;
  40872b:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
      strcpy(conf->infile, "out.cz");
  408732:	48 8b 05 c7 22 a5 01 	mov    0x1a522c7(%rip),%rax        # 1e5aa00 <conf>
  408739:	c7 00 6f 75 74 2e    	movl   $0x2e74756f,(%rax)
  40873f:	66 c7 40 04 63 7a    	movw   $0x7a63,0x4(%rax)
  408745:	c6 40 06 00          	movb   $0x0,0x6(%rax)
      strcpy(conf->outfile, "new.txt");
  408749:	48 8b 05 b0 22 a5 01 	mov    0x1a522b0(%rip),%rax        # 1e5aa00 <conf>
  408750:	48 83 c0 64          	add    $0x64,%rax
  408754:	48 b9 6e 65 77 2e 74 	movabs $0x7478742e77656e,%rcx
  40875b:	78 74 00 
  40875e:	48 89 08             	mov    %rcx,(%rax)
      break;
  408761:	e9 50 01 00 00       	jmpq   4088b6 <main+0x27b>
    case 'f': 
      conf->method = METHOD_FILE;
  408766:	48 8b 05 93 22 a5 01 	mov    0x1a52293(%rip),%rax        # 1e5aa00 <conf>
  40876d:	c7 80 c8 00 00 00 01 	movl   $0x1,0xc8(%rax)
  408774:	00 00 00 
      break;
  408777:	e9 3a 01 00 00       	jmpq   4088b6 <main+0x27b>
    case 'w':
      if (strcmp(optarg, "gzip") == 0)
  40877c:	48 8b 05 f5 01 25 00 	mov    0x2501f5(%rip),%rax        # 658978 <optarg@@GLIBC_2.2.5>
  408783:	be 12 80 43 00       	mov    $0x438012,%esi
  408788:	48 89 c7             	mov    %rax,%rdi
  40878b:	e8 40 e7 ff ff       	callq  406ed0 <strcmp@plt>
  408790:	85 c0                	test   %eax,%eax
  408792:	75 0c                	jne    4087a0 <main+0x165>
        compress_way = COMPRESS_GZIP;
  408794:	c7 05 2a 22 25 01 00 	movl   $0x0,0x125222a(%rip)        # 165a9c8 <compress_way>
  40879b:	00 00 00 
  40879e:	eb 2e                	jmp    4087ce <main+0x193>
      else if (strcmp(optarg, "bzip2") == 0) 
  4087a0:	48 8b 05 d1 01 25 00 	mov    0x2501d1(%rip),%rax        # 658978 <optarg@@GLIBC_2.2.5>
  4087a7:	be 17 80 43 00       	mov    $0x438017,%esi
  4087ac:	48 89 c7             	mov    %rax,%rdi
  4087af:	e8 1c e7 ff ff       	callq  406ed0 <strcmp@plt>
  4087b4:	85 c0                	test   %eax,%eax
  4087b6:	75 0c                	jne    4087c4 <main+0x189>
        compress_way = COMPRESS_BZIP2;
  4087b8:	c7 05 06 22 25 01 01 	movl   $0x1,0x1252206(%rip)        # 165a9c8 <compress_way>
  4087bf:	00 00 00 
  4087c2:	eb 0a                	jmp    4087ce <main+0x193>
      else compress_way = COMPRESS_NONE;
  4087c4:	c7 05 fa 21 25 01 02 	movl   $0x2,0x12521fa(%rip)        # 165a9c8 <compress_way>
  4087cb:	00 00 00 
      break;
  4087ce:	e9 e3 00 00 00       	jmpq   4088b6 <main+0x27b>
    case 'o':
      strcpy(conf->outfile, optarg);
  4087d3:	48 8b 05 9e 01 25 00 	mov    0x25019e(%rip),%rax        # 658978 <optarg@@GLIBC_2.2.5>
  4087da:	48 8b 15 1f 22 a5 01 	mov    0x1a5221f(%rip),%rdx        # 1e5aa00 <conf>
  4087e1:	48 83 c2 64          	add    $0x64,%rdx
  4087e5:	48 89 c6             	mov    %rax,%rsi
  4087e8:	48 89 d7             	mov    %rdx,%rdi
  4087eb:	e8 00 e7 ff ff       	callq  406ef0 <strcpy@plt>
      break;
  4087f0:	e9 c1 00 00 00       	jmpq   4088b6 <main+0x27b>
    case 'i':
      strcpy(conf->infile, optarg);
  4087f5:	48 8b 05 7c 01 25 00 	mov    0x25017c(%rip),%rax        # 658978 <optarg@@GLIBC_2.2.5>
  4087fc:	48 8b 15 fd 21 a5 01 	mov    0x1a521fd(%rip),%rdx        # 1e5aa00 <conf>
  408803:	48 89 c6             	mov    %rax,%rsi
  408806:	48 89 d7             	mov    %rdx,%rdi
  408809:	e8 e2 e6 ff ff       	callq  406ef0 <strcpy@plt>
      break;
  40880e:	e9 a3 00 00 00       	jmpq   4088b6 <main+0x27b>
    case 'h':
      usage(argv[0]);
  408813:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408817:	48 8b 00             	mov    (%rax),%rax
  40881a:	48 89 c7             	mov    %rax,%rdi
  40881d:	e8 91 fd ff ff       	callq  4085b3 <usage>
      return -1;
  408822:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  408827:	e9 13 01 00 00       	jmpq   40893f <main+0x304>
    case 'b':
      conf->b_size = atoi(optarg) * 1024;
  40882c:	48 8b 1d cd 21 a5 01 	mov    0x1a521cd(%rip),%rbx        # 1e5aa00 <conf>
  408833:	48 8b 05 3e 01 25 00 	mov    0x25013e(%rip),%rax        # 658978 <optarg@@GLIBC_2.2.5>
  40883a:	48 89 c7             	mov    %rax,%rdi
  40883d:	e8 fe e5 ff ff       	callq  406e40 <atoi@plt>
  408842:	c1 e0 0a             	shl    $0xa,%eax
  408845:	89 83 d4 00 00 00    	mov    %eax,0xd4(%rbx)
      break;
  40884b:	eb 69                	jmp    4088b6 <main+0x27b>
    case 'p':
      conf->preloading = 1;
  40884d:	48 8b 05 ac 21 a5 01 	mov    0x1a521ac(%rip),%rax        # 1e5aa00 <conf>
  408854:	c7 80 cc 00 00 00 01 	movl   $0x1,0xcc(%rax)
  40885b:	00 00 00 
      break;
  40885e:	eb 56                	jmp    4088b6 <main+0x27b>
    case 't':
      conf->nthreads = atoi(optarg);
  408860:	48 8b 1d 99 21 a5 01 	mov    0x1a52199(%rip),%rbx        # 1e5aa00 <conf>
  408867:	48 8b 05 0a 01 25 00 	mov    0x25010a(%rip),%rax        # 658978 <optarg@@GLIBC_2.2.5>
  40886e:	48 89 c7             	mov    %rax,%rdi
  408871:	e8 ca e5 ff ff       	callq  406e40 <atoi@plt>
  408876:	89 83 d0 00 00 00    	mov    %eax,0xd0(%rbx)
      break;
  40887c:	eb 38                	jmp    4088b6 <main+0x27b>
    case '?':
      fprintf(stdout, "Unknown option `-%c'.\n", optopt);
  40887e:	8b 15 bc 00 25 00    	mov    0x2500bc(%rip),%edx        # 658940 <optopt@@GLIBC_2.2.5>
  408884:	48 8b 05 05 01 25 00 	mov    0x250105(%rip),%rax        # 658990 <stdout@@GLIBC_2.2.5>
  40888b:	be 1d 80 43 00       	mov    $0x43801d,%esi
  408890:	48 89 c7             	mov    %rax,%rdi
  408893:	b8 00 00 00 00       	mov    $0x0,%eax
  408898:	e8 f3 e6 ff ff       	callq  406f90 <fprintf@plt>
      usage(argv[0]);
  40889d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4088a1:	48 8b 00             	mov    (%rax),%rax
  4088a4:	48 89 c7             	mov    %rax,%rdi
  4088a7:	e8 07 fd ff ff       	callq  4085b3 <usage>
      return -1;
  4088ac:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  4088b1:	e9 89 00 00 00       	jmpq   40893f <main+0x304>

  //parse the args
  int ch;
  opterr = 0;
  optind = 1;
  while (-1 != (ch = getopt(argc, argv, "csufpo:i:b:w:t:h"))) {
  4088b6:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  4088ba:	8b 45 dc             	mov    -0x24(%rbp),%eax
  4088bd:	ba 34 80 43 00       	mov    $0x438034,%edx
  4088c2:	48 89 ce             	mov    %rcx,%rsi
  4088c5:	89 c7                	mov    %eax,%edi
  4088c7:	e8 64 e4 ff ff       	callq  406d30 <getopt@plt>
  4088cc:	89 45 ec             	mov    %eax,-0x14(%rbp)
  4088cf:	83 7d ec ff          	cmpl   $0xffffffff,-0x14(%rbp)
  4088d3:	0f 85 f8 fd ff ff    	jne    4086d1 <main+0x96>
 if (conf->nthreads != 1){
    printf("Number of threads must be 1 (serial version)\n");
    exit(1);
  }
#endif
  cache = create_hashtable(65536, hash_from_key_fn, keys_equal_fn);
  4088d9:	ba 81 85 40 00       	mov    $0x408581,%edx
  4088de:	be c3 da 40 00       	mov    $0x40dac3,%esi
  4088e3:	bf 00 00 01 00       	mov    $0x10000,%edi
  4088e8:	e8 4d 3f 00 00       	callq  40c83a <create_hashtable>
  4088ed:	48 89 05 cc 20 25 01 	mov    %rax,0x12520cc(%rip)        # 165a9c0 <cache>
  if(cache == NULL) {
  4088f4:	48 8b 05 c5 20 25 01 	mov    0x12520c5(%rip),%rax        # 165a9c0 <cache>
  4088fb:	48 85 c0             	test   %rax,%rax
  4088fe:	75 14                	jne    408914 <main+0x2d9>
    printf("ERROR: Out of memory\n");
  408900:	bf 45 80 43 00       	mov    $0x438045,%edi
  408905:	e8 c6 e3 ff ff       	callq  406cd0 <puts@plt>
    exit(1);
  40890a:	bf 01 00 00 00       	mov    $0x1,%edi
  40890f:	e8 0c e4 ff ff       	callq  406d20 <exit@plt>
  }

  if (compress) {
  408914:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)
  408918:	74 11                	je     40892b <main+0x2f0>
    Encode(conf);
  40891a:	48 8b 05 df 20 a5 01 	mov    0x1a520df(%rip),%rax        # 1e5aa00 <conf>
  408921:	48 89 c7             	mov    %rax,%rdi
  408924:	e8 40 32 00 00       	callq  40bb69 <Encode>
  408929:	eb 0f                	jmp    40893a <main+0x2ff>
  } else {
    Decode(conf);
  40892b:	48 8b 05 ce 20 a5 01 	mov    0x1a520ce(%rip),%rax        # 1e5aa00 <conf>
  408932:	48 89 c7             	mov    %rax,%rdi
  408935:	e8 ee fb ff ff       	callq  408528 <Decode>

#ifdef ENABLE_PARSEC_HOOKS
  __parsec_bench_end();
#endif

  return 0;
  40893a:	b8 00 00 00 00       	mov    $0x0,%eax
}
  40893f:	48 83 c4 28          	add    $0x28,%rsp
  408943:	5b                   	pop    %rbx
  408944:	5d                   	pop    %rbp
  408945:	c3                   	retq   

0000000000408946 <write_file>:
  int fd;
  //configuration, last pipeline stage only
  config * conf;
};

static int write_file(int fd, u_char type, int seq_count, u_long len, u_char * content) {
  408946:	55                   	push   %rbp
  408947:	48 89 e5             	mov    %rsp,%rbp
  40894a:	48 83 ec 20          	sub    $0x20,%rsp
  40894e:	89 7d fc             	mov    %edi,-0x4(%rbp)
  408951:	89 f0                	mov    %esi,%eax
  408953:	89 55 f4             	mov    %edx,-0xc(%rbp)
  408956:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
  40895a:	4c 89 45 e0          	mov    %r8,-0x20(%rbp)
  40895e:	88 45 f8             	mov    %al,-0x8(%rbp)
  if (xwrite(fd, &type, sizeof(type)) < 0){
  408961:	48 8d 4d f8          	lea    -0x8(%rbp),%rcx
  408965:	8b 45 fc             	mov    -0x4(%rbp),%eax
  408968:	ba 01 00 00 00       	mov    $0x1,%edx
  40896d:	48 89 ce             	mov    %rcx,%rsi
  408970:	89 c7                	mov    %eax,%edi
  408972:	e8 b8 50 00 00       	callq  40da2f <xwrite>
  408977:	85 c0                	test   %eax,%eax
  408979:	79 32                	jns    4089ad <write_file+0x67>
    perror("xwrite:");
  40897b:	bf 30 82 43 00       	mov    $0x438230,%edi
  408980:	e8 fb e5 ff ff       	callq  406f80 <perror@plt>
    EXIT_TRACE("xwrite type fails\n");
  408985:	48 8b 05 f4 ff 24 00 	mov    0x24fff4(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  40898c:	ba a5 84 43 00       	mov    $0x4384a5,%edx
  408991:	be 38 82 43 00       	mov    $0x438238,%esi
  408996:	48 89 c7             	mov    %rax,%rdi
  408999:	b8 00 00 00 00       	mov    $0x0,%eax
  40899e:	e8 ed e5 ff ff       	callq  406f90 <fprintf@plt>
  4089a3:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  4089a8:	e8 73 e3 ff ff       	callq  406d20 <exit@plt>
    return -1;
  }
  if (xwrite(fd, &seq_count, sizeof(seq_count)) < 0){
  4089ad:	48 8d 4d f4          	lea    -0xc(%rbp),%rcx
  4089b1:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4089b4:	ba 04 00 00 00       	mov    $0x4,%edx
  4089b9:	48 89 ce             	mov    %rcx,%rsi
  4089bc:	89 c7                	mov    %eax,%edi
  4089be:	e8 6c 50 00 00       	callq  40da2f <xwrite>
  4089c3:	85 c0                	test   %eax,%eax
  4089c5:	79 28                	jns    4089ef <write_file+0xa9>
    EXIT_TRACE("xwrite content fails\n");
  4089c7:	48 8b 05 b2 ff 24 00 	mov    0x24ffb2(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  4089ce:	ba a5 84 43 00       	mov    $0x4384a5,%edx
  4089d3:	be 50 82 43 00       	mov    $0x438250,%esi
  4089d8:	48 89 c7             	mov    %rax,%rdi
  4089db:	b8 00 00 00 00       	mov    $0x0,%eax
  4089e0:	e8 ab e5 ff ff       	callq  406f90 <fprintf@plt>
  4089e5:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  4089ea:	e8 31 e3 ff ff       	callq  406d20 <exit@plt>
  }
  if (xwrite(fd, &len, sizeof(len)) < 0){
  4089ef:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  4089f3:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4089f6:	ba 08 00 00 00       	mov    $0x8,%edx
  4089fb:	48 89 ce             	mov    %rcx,%rsi
  4089fe:	89 c7                	mov    %eax,%edi
  408a00:	e8 2a 50 00 00       	callq  40da2f <xwrite>
  408a05:	85 c0                	test   %eax,%eax
  408a07:	79 28                	jns    408a31 <write_file+0xeb>
    EXIT_TRACE("xwrite content fails\n");
  408a09:	48 8b 05 70 ff 24 00 	mov    0x24ff70(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  408a10:	ba a5 84 43 00       	mov    $0x4384a5,%edx
  408a15:	be 50 82 43 00       	mov    $0x438250,%esi
  408a1a:	48 89 c7             	mov    %rax,%rdi
  408a1d:	b8 00 00 00 00       	mov    $0x0,%eax
  408a22:	e8 69 e5 ff ff       	callq  406f90 <fprintf@plt>
  408a27:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  408a2c:	e8 ef e2 ff ff       	callq  406d20 <exit@plt>
  }
  if (xwrite(fd, content, len) < 0){
  408a31:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  408a35:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  408a39:	8b 45 fc             	mov    -0x4(%rbp),%eax
  408a3c:	48 89 ce             	mov    %rcx,%rsi
  408a3f:	89 c7                	mov    %eax,%edi
  408a41:	e8 e9 4f 00 00       	callq  40da2f <xwrite>
  408a46:	85 c0                	test   %eax,%eax
  408a48:	79 28                	jns    408a72 <write_file+0x12c>
    EXIT_TRACE("xwrite content fails\n");
  408a4a:	48 8b 05 2f ff 24 00 	mov    0x24ff2f(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  408a51:	ba a5 84 43 00       	mov    $0x4384a5,%edx
  408a56:	be 50 82 43 00       	mov    $0x438250,%esi
  408a5b:	48 89 c7             	mov    %rax,%rdi
  408a5e:	b8 00 00 00 00       	mov    $0x0,%eax
  408a63:	e8 28 e5 ff ff       	callq  406f90 <fprintf@plt>
  408a68:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  408a6d:	e8 ae e2 ff ff       	callq  406d20 <exit@plt>
  }
  return 0;
  408a72:	b8 00 00 00 00       	mov    $0x0,%eax
}
  408a77:	c9                   	leaveq 
  408a78:	c3                   	retq   

0000000000408a79 <sub_Compress>:

int rf_win;
int rf_win_dataprocess;

void sub_Compress(send_buf_item * item) {
  408a79:	55                   	push   %rbp
  408a7a:	48 89 e5             	mov    %rsp,%rbp
  408a7d:	48 83 ec 60          	sub    $0x60,%rsp
  408a81:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  408a85:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  408a8c:	00 00 
  408a8e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  408a92:	31 c0                	xor    %eax,%eax
    send_body * body = (send_body*)item->str;
  408a94:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  408a98:	48 8b 40 08          	mov    0x8(%rax),%rax
  408a9c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    u_long len;
    byte * pstr = NULL;
  408aa0:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  408aa7:	00 

    //compress the item
    if (compress_way == COMPRESS_GZIP) {
  408aa8:	8b 05 1a 1f 25 01    	mov    0x1251f1a(%rip),%eax        # 165a9c8 <compress_way>
  408aae:	85 c0                	test   %eax,%eax
  408ab0:	0f 85 6f 02 00 00    	jne    408d25 <sub_Compress+0x2ac>
      unsigned long len_32;
      len = body->len + (body->len >> 12) + (body->len >> 14) + 11;
  408ab6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  408aba:	48 8b 50 10          	mov    0x10(%rax),%rdx
  408abe:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  408ac2:	48 8b 40 10          	mov    0x10(%rax),%rax
  408ac6:	48 c1 e8 0c          	shr    $0xc,%rax
  408aca:	48 01 c2             	add    %rax,%rdx
  408acd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  408ad1:	48 8b 40 10          	mov    0x10(%rax),%rax
  408ad5:	48 c1 e8 0e          	shr    $0xe,%rax
  408ad9:	48 01 d0             	add    %rdx,%rax
  408adc:	48 83 c0 0b          	add    $0xb,%rax
  408ae0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      if(len >> 32) {
  408ae4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408ae8:	48 c1 e8 20          	shr    $0x20,%rax
  408aec:	48 85 c0             	test   %rax,%rax
  408aef:	74 32                	je     408b23 <sub_Compress+0xaa>
        perror("compress");
  408af1:	bf 6b 82 43 00       	mov    $0x43826b,%edi
  408af6:	e8 85 e4 ff ff       	callq  406f80 <perror@plt>
        EXIT_TRACE("compress() failed\n");
  408afb:	48 8b 05 7e fe 24 00 	mov    0x24fe7e(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  408b02:	ba b0 84 43 00       	mov    $0x4384b0,%edx
  408b07:	be 74 82 43 00       	mov    $0x438274,%esi
  408b0c:	48 89 c7             	mov    %rax,%rdi
  408b0f:	b8 00 00 00 00       	mov    $0x0,%eax
  408b14:	e8 77 e4 ff ff       	callq  406f90 <fprintf@plt>
  408b19:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  408b1e:	e8 fd e1 ff ff       	callq  406d20 <exit@plt>
      }
      len_32 = len & 0xFFFFFFFF;
  408b23:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408b27:	89 c0                	mov    %eax,%eax
  408b29:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
      pstr = (byte *)malloc(len);
  408b2d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  408b31:	48 89 c7             	mov    %rax,%rdi
  408b34:	e8 17 e2 ff ff       	callq  406d50 <malloc@plt>
  408b39:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
      if(pstr == NULL) {
  408b3d:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  408b42:	75 28                	jne    408b6c <sub_Compress+0xf3>
        EXIT_TRACE("Memory allocation failed.\n");
  408b44:	48 8b 05 35 fe 24 00 	mov    0x24fe35(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  408b4b:	ba b0 84 43 00       	mov    $0x4384b0,%edx
  408b50:	be 90 82 43 00       	mov    $0x438290,%esi
  408b55:	48 89 c7             	mov    %rax,%rdi
  408b58:	b8 00 00 00 00       	mov    $0x0,%eax
  408b5d:	e8 2e e4 ff ff       	callq  406f90 <fprintf@plt>
  408b62:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  408b67:	e8 b4 e1 ff ff       	callq  406d20 <exit@plt>
      }
      /* compress the block */
      if (compress(pstr, &len_32, item->content, body->len) != Z_OK) {
  408b6c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  408b70:	48 8b 48 10          	mov    0x10(%rax),%rcx
  408b74:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  408b78:	48 8b 50 10          	mov    0x10(%rax),%rdx
  408b7c:	48 8d 75 b8          	lea    -0x48(%rbp),%rsi
  408b80:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  408b84:	48 89 c7             	mov    %rax,%rdi
  408b87:	e8 44 53 00 00       	callq  40ded0 <compress>
  408b8c:	85 c0                	test   %eax,%eax
  408b8e:	74 32                	je     408bc2 <sub_Compress+0x149>
        perror("compress");
  408b90:	bf 6b 82 43 00       	mov    $0x43826b,%edi
  408b95:	e8 e6 e3 ff ff       	callq  406f80 <perror@plt>
        EXIT_TRACE("compress() failed\n");
  408b9a:	48 8b 05 df fd 24 00 	mov    0x24fddf(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  408ba1:	ba b0 84 43 00       	mov    $0x4384b0,%edx
  408ba6:	be 74 82 43 00       	mov    $0x438274,%esi
  408bab:	48 89 c7             	mov    %rax,%rdi
  408bae:	b8 00 00 00 00       	mov    $0x0,%eax
  408bb3:	e8 d8 e3 ff ff       	callq  406f90 <fprintf@plt>
  408bb8:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  408bbd:	e8 5e e1 ff ff       	callq  406d20 <exit@plt>
        }
      len = len_32;
  408bc2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  408bc6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)

      u_char * key = (u_char *)malloc(SHA1_LEN);
  408bca:	bf 14 00 00 00       	mov    $0x14,%edi
  408bcf:	e8 7c e1 ff ff       	callq  406d50 <malloc@plt>
  408bd4:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      if(key == NULL) {
  408bd8:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  408bdd:	75 28                	jne    408c07 <sub_Compress+0x18e>
        EXIT_TRACE("Memory allocation failed.\n");
  408bdf:	48 8b 05 9a fd 24 00 	mov    0x24fd9a(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  408be6:	ba b0 84 43 00       	mov    $0x4384b0,%edx
  408beb:	be 90 82 43 00       	mov    $0x438290,%esi
  408bf0:	48 89 c7             	mov    %rax,%rdi
  408bf3:	b8 00 00 00 00       	mov    $0x0,%eax
  408bf8:	e8 93 e3 ff ff       	callq  406f90 <fprintf@plt>
  408bfd:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  408c02:	e8 19 e1 ff ff       	callq  406d20 <exit@plt>
      }
	  //fprintf(stderr, "process %d : allocated key %p\n", getpid(), key);
      memcpy(key, item->sha1, sizeof(u_char)*SHA1_LEN);
  408c07:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  408c0b:	48 8b 48 18          	mov    0x18(%rax),%rcx
  408c0f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  408c13:	ba 14 00 00 00       	mov    $0x14,%edx
  408c18:	48 89 ce             	mov    %rcx,%rsi
  408c1b:	48 89 c7             	mov    %rax,%rdi
  408c1e:	e8 cd e3 ff ff       	callq  406ff0 <memcpy@plt>
      //Calc_SHA1Sig(item->content, body->len, key);
      struct hash_entry * entry;
      /* search the cache */
#ifdef PARALLEL
      pthread_mutex_t *ht_lock = hashtable_getlock(cache, (void *)key);
  408c23:	48 8b 05 96 1d 25 01 	mov    0x1251d96(%rip),%rax        # 165a9c0 <cache>
  408c2a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  408c2e:	48 89 d6             	mov    %rdx,%rsi
  408c31:	48 89 c7             	mov    %rax,%rdi
  408c34:	e8 ef 3d 00 00       	callq  40ca28 <hashtable_getlock>
  408c39:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      pthread_mutex_lock(ht_lock);
  408c3d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408c41:	48 89 c7             	mov    %rax,%rdi
  408c44:	e8 37 e1 ff ff       	callq  406d80 <pthread_mutex_lock@plt>
#endif
      if ((entry = hashtable_search(cache, (void *)key)) == NULL) {
  408c49:	48 8b 05 70 1d 25 01 	mov    0x1251d70(%rip),%rax        # 165a9c0 <cache>
  408c50:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  408c54:	48 89 d6             	mov    %rdx,%rsi
  408c57:	48 89 c7             	mov    %rax,%rdi
  408c5a:	e8 de 3e 00 00       	callq  40cb3d <hashtable_search>
  408c5f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  408c63:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  408c68:	75 14                	jne    408c7e <sub_Compress+0x205>
        //if cannot find the entry, error
        printf("Error: Compress hash error\n");
  408c6a:	bf b0 82 43 00       	mov    $0x4382b0,%edi
  408c6f:	e8 5c e0 ff ff       	callq  406cd0 <puts@plt>
        exit(1);
  408c74:	bf 01 00 00 00       	mov    $0x1,%edi
  408c79:	e8 a2 e0 ff ff       	callq  406d20 <exit@plt>
      } else {
        //if cache hit, put the compressed data in the hash
        //There is a memory leak here. 
        //free(item->sha1);
        item->sha1 = NULL;
  408c7e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  408c82:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  408c89:	00 
        struct pContent * value = ((struct pContent *)entry->v);
  408c8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408c8e:	48 8b 40 08          	mov    0x8(%rax),%rax
  408c92:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        value->len = len;
  408c96:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408c9a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  408c9e:	48 89 10             	mov    %rdx,(%rax)
        value->content = pstr;
  408ca1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408ca5:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  408ca9:	48 89 50 08          	mov    %rdx,0x8(%rax)
        value->tag = TAG_DATAREADY;
  408cad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408cb1:	c6 40 14 01          	movb   $0x1,0x14(%rax)

        hashtable_change(entry, (void *)value);
  408cb5:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  408cb9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  408cbd:	48 89 d6             	mov    %rdx,%rsi
  408cc0:	48 89 c7             	mov    %rax,%rdi
  408cc3:	e8 16 3f 00 00       	callq  40cbde <hashtable_change>
#ifdef PARALLEL
        pthread_cond_signal(&value->empty);
  408cc8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  408ccc:	48 83 c0 18          	add    $0x18,%rax
  408cd0:	48 89 c7             	mov    %rax,%rdi
  408cd3:	e8 18 e0 ff ff       	callq  406cf0 <pthread_cond_signal@plt>
#endif
      }

#ifdef PARALLEL
    pthread_mutex_unlock(ht_lock);
  408cd8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  408cdc:	48 89 c7             	mov    %rax,%rdi
  408cdf:	e8 5c e2 ff ff       	callq  406f40 <pthread_mutex_unlock@plt>
#endif

      body->len = SHA1_LEN;
  408ce4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  408ce8:	48 c7 40 10 14 00 00 	movq   $0x14,0x10(%rax)
  408cef:	00 
      MEM_FREE(item->content);
  408cf0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  408cf4:	48 8b 40 10          	mov    0x10(%rax),%rax
  408cf8:	48 85 c0             	test   %rax,%rax
  408cfb:	74 1c                	je     408d19 <sub_Compress+0x2a0>
  408cfd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  408d01:	48 8b 40 10          	mov    0x10(%rax),%rax
  408d05:	48 89 c7             	mov    %rax,%rdi
  408d08:	e8 93 e0 ff ff       	callq  406da0 <free@plt>
  408d0d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  408d11:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  408d18:	00 
      item->content = key;    
  408d19:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  408d1d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  408d21:	48 89 50 10          	mov    %rdx,0x10(%rax)
    }
    
   return;
  408d25:	90                   	nop
}
  408d26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  408d2a:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  408d31:	00 00 
  408d33:	74 05                	je     408d3a <sub_Compress+0x2c1>
  408d35:	e8 86 e1 ff ff       	callq  406ec0 <__stack_chk_fail@plt>
  408d3a:	c9                   	leaveq 
  408d3b:	c3                   	retq   

0000000000408d3c <Compress>:

/*
 * Compress the chunks
 */
void *Compress(void * targs) {
  408d3c:	55                   	push   %rbp
  408d3d:	48 89 e5             	mov    %rsp,%rbp
  408d40:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  408d47:	48 89 bd 18 ff ff ff 	mov    %rdi,-0xe8(%rbp)
  408d4e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  408d55:	00 00 
  408d57:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  408d5b:	31 c0                	xor    %eax,%eax
  struct thread_args *args = (struct thread_args *)targs;
  408d5d:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  408d64:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  const int qid = args->tid / MAX_THREADS_PER_QUEUE;
  408d6b:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  408d72:	8b 00                	mov    (%rax),%eax
  408d74:	8d 50 03             	lea    0x3(%rax),%edx
  408d77:	85 c0                	test   %eax,%eax
  408d79:	0f 48 c2             	cmovs  %edx,%eax
  408d7c:	c1 f8 02             	sar    $0x2,%eax
  408d7f:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%rbp)
  send_buf_item * item;
  send_buf_item ** fetchbuf;

  fprintf(stderr, "%d : Compress\n", getpid()); 
  408d85:	e8 e6 df ff ff       	callq  406d70 <getpid@plt>
  408d8a:	89 c2                	mov    %eax,%edx
  408d8c:	48 8b 05 ed fb 24 00 	mov    0x24fbed(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  408d93:	be cb 82 43 00       	mov    $0x4382cb,%esi
  408d98:	48 89 c7             	mov    %rax,%rdi
  408d9b:	b8 00 00 00 00       	mov    $0x0,%eax
  408da0:	e8 eb e1 ff ff       	callq  406f90 <fprintf@plt>
  fetchbuf = (send_buf_item **)malloc(sizeof(send_buf_item *)*ITEM_PER_FETCH);
  408da5:	bf a0 00 00 00       	mov    $0xa0,%edi
  408daa:	e8 a1 df ff ff       	callq  406d50 <malloc@plt>
  408daf:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  if(fetchbuf == NULL) {
  408db6:	48 83 bd 40 ff ff ff 	cmpq   $0x0,-0xc0(%rbp)
  408dbd:	00 
  408dbe:	75 28                	jne    408de8 <Compress+0xac>
    EXIT_TRACE("Memory allocation failed.\n");
  408dc0:	48 8b 05 b9 fb 24 00 	mov    0x24fbb9(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  408dc7:	ba bd 84 43 00       	mov    $0x4384bd,%edx
  408dcc:	be 90 82 43 00       	mov    $0x438290,%esi
  408dd1:	48 89 c7             	mov    %rax,%rdi
  408dd4:	b8 00 00 00 00       	mov    $0x0,%eax
  408dd9:	e8 b2 e1 ff ff       	callq  406f90 <fprintf@plt>
  408dde:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  408de3:	e8 38 df ff ff       	callq  406d20 <exit@plt>
  }
  int fetch_count = 0, fetch_start = 0;
  408de8:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%rbp)
  408def:	00 00 00 
  408df2:	c7 85 2c ff ff ff 00 	movl   $0x0,-0xd4(%rbp)
  408df9:	00 00 00 
  
  send_buf_item * tmpbuf[ITEM_PER_INSERT];
  int tmp_count = 0;  
  408dfc:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%rbp)
  408e03:	00 00 00 

  while(1) {
    //get items from the queue
    if (fetch_count == fetch_start) {
  408e06:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
  408e0c:	3b 85 2c ff ff ff    	cmp    -0xd4(%rbp),%eax
  408e12:	75 5f                	jne    408e73 <Compress+0x137>
      int r = dequeue(&compress_que[qid], &fetch_count, (void **)fetchbuf);
  408e14:	48 8b 0d 65 1c e5 01 	mov    0x1e51c65(%rip),%rcx        # 225aa80 <compress_que>
  408e1b:	8b 85 30 ff ff ff    	mov    -0xd0(%rbp),%eax
  408e21:	48 63 d0             	movslq %eax,%rdx
  408e24:	48 89 d0             	mov    %rdx,%rax
  408e27:	48 c1 e0 02          	shl    $0x2,%rax
  408e2b:	48 01 d0             	add    %rdx,%rax
  408e2e:	48 c1 e0 02          	shl    $0x2,%rax
  408e32:	48 01 d0             	add    %rdx,%rax
  408e35:	48 c1 e0 03          	shl    $0x3,%rax
  408e39:	48 01 c1             	add    %rax,%rcx
  408e3c:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
  408e43:	48 8d 85 24 ff ff ff 	lea    -0xdc(%rbp),%rax
  408e4a:	48 89 c6             	mov    %rax,%rsi
  408e4d:	48 89 cf             	mov    %rcx,%rdi
  408e50:	e8 0d 41 00 00       	callq  40cf62 <dequeue>
  408e55:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%rbp)
      if (r < 0) break;
  408e5b:	83 bd 34 ff ff ff 00 	cmpl   $0x0,-0xcc(%rbp)
  408e62:	79 05                	jns    408e69 <Compress+0x12d>
  408e64:	e9 ca 00 00 00       	jmpq   408f33 <Compress+0x1f7>

      fetch_start = 0;
  408e69:	c7 85 2c ff ff ff 00 	movl   $0x0,-0xd4(%rbp)
  408e70:	00 00 00 
    }
    
    //fetch one item
    item = fetchbuf[fetch_start];
  408e73:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
  408e79:	48 98                	cltq   
  408e7b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  408e82:	00 
  408e83:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  408e8a:	48 01 d0             	add    %rdx,%rax
  408e8d:	48 8b 00             	mov    (%rax),%rax
  408e90:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
    fetch_start ++;
  408e97:	83 85 2c ff ff ff 01 	addl   $0x1,-0xd4(%rbp)

    if (item == NULL) break;
  408e9e:	48 83 bd 48 ff ff ff 	cmpq   $0x0,-0xb8(%rbp)
  408ea5:	00 
  408ea6:	75 05                	jne    408ead <Compress+0x171>
  408ea8:	e9 86 00 00 00       	jmpq   408f33 <Compress+0x1f7>

    sub_Compress(item);
  408ead:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  408eb4:	48 89 c7             	mov    %rax,%rdi
  408eb7:	e8 bd fb ff ff       	callq  408a79 <sub_Compress>

    tmpbuf[tmp_count] = item;
  408ebc:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
  408ec2:	48 98                	cltq   
  408ec4:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
  408ecb:	48 89 94 c5 50 ff ff 	mov    %rdx,-0xb0(%rbp,%rax,8)
  408ed2:	ff 
    tmp_count ++;
  408ed3:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
  408ed9:	83 c0 01             	add    $0x1,%eax
  408edc:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%rbp)
    
    //put the item in the next queue for the write thread
    if (tmp_count >= ITEM_PER_INSERT) {      
  408ee2:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
  408ee8:	83 f8 13             	cmp    $0x13,%eax
  408eeb:	7e 41                	jle    408f2e <Compress+0x1f2>
      enqueue(&send_que[qid], &tmp_count, (void **)tmpbuf);
  408eed:	48 8b 0d 5c 1b a5 01 	mov    0x1a51b5c(%rip),%rcx        # 1e5aa50 <send_que>
  408ef4:	8b 85 30 ff ff ff    	mov    -0xd0(%rbp),%eax
  408efa:	48 63 d0             	movslq %eax,%rdx
  408efd:	48 89 d0             	mov    %rdx,%rax
  408f00:	48 c1 e0 02          	shl    $0x2,%rax
  408f04:	48 01 d0             	add    %rdx,%rax
  408f07:	48 c1 e0 02          	shl    $0x2,%rax
  408f0b:	48 01 d0             	add    %rdx,%rax
  408f0e:	48 c1 e0 03          	shl    $0x3,%rax
  408f12:	48 01 c1             	add    %rax,%rcx
  408f15:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
  408f1c:	48 8d 85 28 ff ff ff 	lea    -0xd8(%rbp),%rax
  408f23:	48 89 c6             	mov    %rax,%rsi
  408f26:	48 89 cf             	mov    %rcx,%rdi
  408f29:	e8 be 41 00 00       	callq  40d0ec <enqueue>
    }
  }
  408f2e:	e9 d3 fe ff ff       	jmpq   408e06 <Compress+0xca>
 
  if (tmp_count > 0) {
  408f33:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
  408f39:	85 c0                	test   %eax,%eax
  408f3b:	7e 41                	jle    408f7e <Compress+0x242>
    enqueue(&send_que[qid], &tmp_count, (void **)tmpbuf);
  408f3d:	48 8b 0d 0c 1b a5 01 	mov    0x1a51b0c(%rip),%rcx        # 1e5aa50 <send_que>
  408f44:	8b 85 30 ff ff ff    	mov    -0xd0(%rbp),%eax
  408f4a:	48 63 d0             	movslq %eax,%rdx
  408f4d:	48 89 d0             	mov    %rdx,%rax
  408f50:	48 c1 e0 02          	shl    $0x2,%rax
  408f54:	48 01 d0             	add    %rdx,%rax
  408f57:	48 c1 e0 02          	shl    $0x2,%rax
  408f5b:	48 01 d0             	add    %rdx,%rax
  408f5e:	48 c1 e0 03          	shl    $0x3,%rax
  408f62:	48 01 c1             	add    %rax,%rcx
  408f65:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
  408f6c:	48 8d 85 28 ff ff ff 	lea    -0xd8(%rbp),%rax
  408f73:	48 89 c6             	mov    %rax,%rsi
  408f76:	48 89 cf             	mov    %rcx,%rdi
  408f79:	e8 6e 41 00 00       	callq  40d0ec <enqueue>
  
  //free(fetchbuf);


  //count the number of compress threads that have finished
  queue_signal_terminate(&send_que[qid]);
  408f7e:	48 8b 0d cb 1a a5 01 	mov    0x1a51acb(%rip),%rcx        # 1e5aa50 <send_que>
  408f85:	8b 85 30 ff ff ff    	mov    -0xd0(%rbp),%eax
  408f8b:	48 63 d0             	movslq %eax,%rdx
  408f8e:	48 89 d0             	mov    %rdx,%rax
  408f91:	48 c1 e0 02          	shl    $0x2,%rax
  408f95:	48 01 d0             	add    %rdx,%rax
  408f98:	48 c1 e0 02          	shl    $0x2,%rax
  408f9c:	48 01 d0             	add    %rdx,%rax
  408f9f:	48 c1 e0 03          	shl    $0x3,%rax
  408fa3:	48 01 c8             	add    %rcx,%rax
  408fa6:	48 89 c7             	mov    %rax,%rdi
  408fa9:	e8 65 3f 00 00       	callq  40cf13 <queue_signal_terminate>
  return NULL;
  408fae:	b8 00 00 00 00       	mov    $0x0,%eax
}
  408fb3:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  408fb7:	64 48 33 34 25 28 00 	xor    %fs:0x28,%rsi
  408fbe:	00 00 
  408fc0:	74 05                	je     408fc7 <Compress+0x28b>
  408fc2:	e8 f9 de ff ff       	callq  406ec0 <__stack_chk_fail@plt>
  408fc7:	c9                   	leaveq 
  408fc8:	c3                   	retq   

0000000000408fc9 <sub_ChunkProcess>:
// Then it will search the hash table to find whether this chunk has been
// in process. If it is not in hash table, put it in the hashtable and the queue for
// the compress thread.
// If current chunk has already in the hash table, put the item into the queue for the write thread.
// But before that, we should know that there is one more count, so we modify value->count and put it back?
send_buf_item * sub_ChunkProcess(data_chunk chunk) {
  408fc9:	55                   	push   %rbp
  408fca:	48 89 e5             	mov    %rsp,%rbp
  408fcd:	48 83 ec 40          	sub    $0x40,%rsp
  send_buf_item * item;
  send_body * body = NULL;
  408fd1:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  408fd8:	00 
  u_char * key;

  key = (u_char *)malloc(SHA1_LEN);
  408fd9:	bf 14 00 00 00       	mov    $0x14,%edi
  408fde:	e8 6d dd ff ff       	callq  406d50 <malloc@plt>
  408fe3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  if(key == NULL) {
  408fe7:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  408fec:	75 28                	jne    409016 <sub_ChunkProcess+0x4d>
    EXIT_TRACE("Memory allocation failed.\n");
  408fee:	48 8b 05 8b f9 24 00 	mov    0x24f98b(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  408ff5:	ba d0 84 43 00       	mov    $0x4384d0,%edx
  408ffa:	be 90 82 43 00       	mov    $0x438290,%esi
  408fff:	48 89 c7             	mov    %rax,%rdi
  409002:	b8 00 00 00 00       	mov    $0x0,%eax
  409007:	e8 84 df ff ff       	callq  406f90 <fprintf@plt>
  40900c:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  409011:	e8 0a dd ff ff       	callq  406d20 <exit@plt>
  }
  
  Calc_SHA1Sig(chunk.start, chunk.len, key);
  409016:	48 8b 45 18          	mov    0x18(%rbp),%rax
  40901a:	89 c1                	mov    %eax,%ecx
  40901c:	48 8b 45 10          	mov    0x10(%rbp),%rax
  409020:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  409024:	89 ce                	mov    %ecx,%esi
  409026:	48 89 c7             	mov    %rax,%rdi
  409029:	e8 15 49 00 00       	callq  40d943 <Calc_SHA1Sig>


  struct hash_entry * entry;
  /* search the cache */
#ifdef PARALLEL
  pthread_mutex_t *ht_lock = hashtable_getlock(cache, (void *)key);
  40902e:	48 8b 05 8b 19 25 01 	mov    0x125198b(%rip),%rax        # 165a9c0 <cache>
  409035:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  409039:	48 89 d6             	mov    %rdx,%rsi
  40903c:	48 89 c7             	mov    %rax,%rdi
  40903f:	e8 e4 39 00 00       	callq  40ca28 <hashtable_getlock>
  409044:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  pthread_mutex_lock(ht_lock);
  409048:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40904c:	48 89 c7             	mov    %rax,%rdi
  40904f:	e8 2c dd ff ff       	callq  406d80 <pthread_mutex_lock@plt>
#endif
  if ((entry = hashtable_search(cache, (void *)key)) == NULL) {
  409054:	48 8b 05 65 19 25 01 	mov    0x1251965(%rip),%rax        # 165a9c0 <cache>
  40905b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40905f:	48 89 d6             	mov    %rdx,%rsi
  409062:	48 89 c7             	mov    %rax,%rdi
  409065:	e8 d3 3a 00 00       	callq  40cb3d <hashtable_search>
  40906a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40906e:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  409073:	0f 85 49 02 00 00    	jne    4092c2 <sub_ChunkProcess+0x2f9>
    // cache miss: put it in the hashtable and the queue for the compress thread
    struct pContent * value;

    value = (struct pContent *)malloc(sizeof(struct pContent));
  409079:	bf 48 00 00 00       	mov    $0x48,%edi
  40907e:	e8 cd dc ff ff       	callq  406d50 <malloc@plt>
  409083:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    if(value == NULL) {
  409087:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  40908c:	75 28                	jne    4090b6 <sub_ChunkProcess+0xed>
      EXIT_TRACE("Memory allocation failed.\n");
  40908e:	48 8b 05 eb f8 24 00 	mov    0x24f8eb(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  409095:	ba d0 84 43 00       	mov    $0x4384d0,%edx
  40909a:	be 90 82 43 00       	mov    $0x438290,%esi
  40909f:	48 89 c7             	mov    %rax,%rdi
  4090a2:	b8 00 00 00 00       	mov    $0x0,%eax
  4090a7:	e8 e4 de ff ff       	callq  406f90 <fprintf@plt>
  4090ac:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  4090b1:	e8 6a dc ff ff       	callq  406d20 <exit@plt>
    }
    value->len = 0;
  4090b6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4090ba:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    value->count = 1;
  4090c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4090c5:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%rax)
    value->content = NULL;
  4090cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4090d0:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  4090d7:	00 
    value->tag = TAG_OCCUPY;
  4090d8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4090dc:	c6 40 14 00          	movb   $0x0,0x14(%rax)
    if (hashtable_insert(cache, key, value) == 0) {
  4090e0:	48 8b 05 d9 18 25 01 	mov    0x12518d9(%rip),%rax        # 165a9c0 <cache>
  4090e7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4090eb:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  4090ef:	48 89 ce             	mov    %rcx,%rsi
  4090f2:	48 89 c7             	mov    %rax,%rdi
  4090f5:	e8 87 39 00 00       	callq  40ca81 <hashtable_insert>
  4090fa:	85 c0                	test   %eax,%eax
  4090fc:	75 28                	jne    409126 <sub_ChunkProcess+0x15d>
      EXIT_TRACE("hashtable_insert failed");
  4090fe:	48 8b 05 7b f8 24 00 	mov    0x24f87b(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  409105:	ba d0 84 43 00       	mov    $0x4384d0,%edx
  40910a:	be da 82 43 00       	mov    $0x4382da,%esi
  40910f:	48 89 c7             	mov    %rax,%rdi
  409112:	b8 00 00 00 00       	mov    $0x0,%eax
  409117:	e8 74 de ff ff       	callq  406f90 <fprintf@plt>
  40911c:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  409121:	e8 fa db ff ff       	callq  406d20 <exit@plt>
    }
//	fprintf(stderr, "%d: insert key %p\n", getpid(), key);
#ifdef PARALLEL
    pthread_cond_init(&value->empty, NULL);
  409126:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40912a:	48 83 c0 18          	add    $0x18,%rax
  40912e:	be 00 00 00 00       	mov    $0x0,%esi
  409133:	48 89 c7             	mov    %rax,%rdi
  409136:	e8 a5 dc ff ff       	callq  406de0 <pthread_cond_init@plt>
#endif
      
    item = (send_buf_item *)malloc(sizeof(send_buf_item));
  40913b:	bf 20 00 00 00       	mov    $0x20,%edi
  409140:	e8 0b dc ff ff       	callq  406d50 <malloc@plt>
  409145:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    body = (send_body *)malloc(sizeof(send_body));
  409149:	bf 18 00 00 00       	mov    $0x18,%edi
  40914e:	e8 fd db ff ff       	callq  406d50 <malloc@plt>
  409153:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    if(item == NULL || body == NULL) {
  409157:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  40915c:	74 07                	je     409165 <sub_ChunkProcess+0x19c>
  40915e:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  409163:	75 28                	jne    40918d <sub_ChunkProcess+0x1c4>
      EXIT_TRACE("Memory allocation failed.\n");
  409165:	48 8b 05 14 f8 24 00 	mov    0x24f814(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  40916c:	ba d0 84 43 00       	mov    $0x4384d0,%edx
  409171:	be 90 82 43 00       	mov    $0x438290,%esi
  409176:	48 89 c7             	mov    %rax,%rdi
  409179:	b8 00 00 00 00       	mov    $0x0,%eax
  40917e:	e8 0d de ff ff       	callq  406f90 <fprintf@plt>
  409183:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  409188:	e8 93 db ff ff       	callq  406d20 <exit@plt>
    }
    body->fid = filecount;
  40918d:	8b 05 21 fb 24 00    	mov    0x24fb21(%rip),%eax        # 658cb4 <filecount>
  409193:	89 c2                	mov    %eax,%edx
  409195:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  409199:	89 10                	mov    %edx,(%rax)
    body->cid = chunk.cid;
  40919b:	8b 55 24             	mov    0x24(%rbp),%edx
  40919e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4091a2:	89 50 08             	mov    %edx,0x8(%rax)
    body->anchorid = chunk.anchorid;
  4091a5:	8b 55 20             	mov    0x20(%rbp),%edx
  4091a8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4091ac:	89 50 04             	mov    %edx,0x4(%rax)
    body->len = chunk.len;
  4091af:	48 8b 55 18          	mov    0x18(%rbp),%rdx
  4091b3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4091b7:	48 89 50 10          	mov    %rdx,0x10(%rax)
    item->content = (u_char * )malloc(body->len + 1);
  4091bb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4091bf:	48 8b 40 10          	mov    0x10(%rax),%rax
  4091c3:	48 83 c0 01          	add    $0x1,%rax
  4091c7:	48 89 c7             	mov    %rax,%rdi
  4091ca:	e8 81 db ff ff       	callq  406d50 <malloc@plt>
  4091cf:	48 89 c2             	mov    %rax,%rdx
  4091d2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4091d6:	48 89 50 10          	mov    %rdx,0x10(%rax)
    if(item->content == NULL) {
  4091da:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4091de:	48 8b 40 10          	mov    0x10(%rax),%rax
  4091e2:	48 85 c0             	test   %rax,%rax
  4091e5:	75 28                	jne    40920f <sub_ChunkProcess+0x246>
      EXIT_TRACE("Memory allocation failed.\n");
  4091e7:	48 8b 05 92 f7 24 00 	mov    0x24f792(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  4091ee:	ba d0 84 43 00       	mov    $0x4384d0,%edx
  4091f3:	be 90 82 43 00       	mov    $0x438290,%esi
  4091f8:	48 89 c7             	mov    %rax,%rdi
  4091fb:	b8 00 00 00 00       	mov    $0x0,%eax
  409200:	e8 8b dd ff ff       	callq  406f90 <fprintf@plt>
  409205:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  40920a:	e8 11 db ff ff       	callq  406d20 <exit@plt>
    }
    memcpy(item->content, chunk.start, body->len);
  40920f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  409213:	48 8b 50 10          	mov    0x10(%rax),%rdx
  409217:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
  40921b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40921f:	48 8b 40 10          	mov    0x10(%rax),%rax
  409223:	48 89 ce             	mov    %rcx,%rsi
  409226:	48 89 c7             	mov    %rax,%rdi
  409229:	e8 c2 dd ff ff       	callq  406ff0 <memcpy@plt>
    item->content[body->len] = 0;
  40922e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  409232:	48 8b 50 10          	mov    0x10(%rax),%rdx
  409236:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40923a:	48 8b 40 10          	mov    0x10(%rax),%rax
  40923e:	48 01 d0             	add    %rdx,%rax
  409241:	c6 00 00             	movb   $0x0,(%rax)
    item->sha1 = (u_char *)malloc(SHA1_LEN);
  409244:	bf 14 00 00 00       	mov    $0x14,%edi
  409249:	e8 02 db ff ff       	callq  406d50 <malloc@plt>
  40924e:	48 89 c2             	mov    %rax,%rdx
  409251:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  409255:	48 89 50 18          	mov    %rdx,0x18(%rax)
    if(item->sha1 == NULL) {
  409259:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40925d:	48 8b 40 18          	mov    0x18(%rax),%rax
  409261:	48 85 c0             	test   %rax,%rax
  409264:	75 28                	jne    40928e <sub_ChunkProcess+0x2c5>
      EXIT_TRACE("Memory allocation failed.\n");
  409266:	48 8b 05 13 f7 24 00 	mov    0x24f713(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  40926d:	ba d0 84 43 00       	mov    $0x4384d0,%edx
  409272:	be 90 82 43 00       	mov    $0x438290,%esi
  409277:	48 89 c7             	mov    %rax,%rdi
  40927a:	b8 00 00 00 00       	mov    $0x0,%eax
  40927f:	e8 0c dd ff ff       	callq  406f90 <fprintf@plt>
  409284:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  409289:	e8 92 da ff ff       	callq  406d20 <exit@plt>
    }
    memcpy(item->sha1, key, sizeof(u_char)*SHA1_LEN);
  40928e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  409292:	48 8b 40 18          	mov    0x18(%rax),%rax
  409296:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  40929a:	ba 14 00 00 00       	mov    $0x14,%edx
  40929f:	48 89 ce             	mov    %rcx,%rsi
  4092a2:	48 89 c7             	mov    %rax,%rdi
  4092a5:	e8 46 dd ff ff       	callq  406ff0 <memcpy@plt>

    item->type = TYPE_COMPRESS;
  4092aa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4092ae:	c6 00 01             	movb   $0x1,(%rax)
    // In fact, body is just one field in the item, that includes the total information.
    item->str = (u_char *)body;
  4092b1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4092b5:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  4092b9:	48 89 50 08          	mov    %rdx,0x8(%rax)
  4092bd:	e9 db 00 00 00       	jmpq   40939d <sub_ChunkProcess+0x3d4>

  } else {
    // cache hit: put the item into the queue for the write thread 
    struct pContent * value = ((struct pContent *)entry->v);
  4092c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4092c6:	48 8b 40 08          	mov    0x8(%rax),%rax
  4092ca:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    value->count += 1;
  4092ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4092d2:	8b 40 10             	mov    0x10(%rax),%eax
  4092d5:	8d 50 01             	lea    0x1(%rax),%edx
  4092d8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4092dc:	89 50 10             	mov    %edx,0x10(%rax)
    // LTP, it is weird since value is pointed to v. unnecessary at all.
    hashtable_change(entry, (void *)value);
  4092df:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4092e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4092e7:	48 89 d6             	mov    %rdx,%rsi
  4092ea:	48 89 c7             	mov    %rax,%rdi
  4092ed:	e8 ec 38 00 00       	callq  40cbde <hashtable_change>

    item = (send_buf_item *)malloc(sizeof(send_buf_item));
  4092f2:	bf 20 00 00 00       	mov    $0x20,%edi
  4092f7:	e8 54 da ff ff       	callq  406d50 <malloc@plt>
  4092fc:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    body = (send_body *)malloc(sizeof(send_body));
  409300:	bf 18 00 00 00       	mov    $0x18,%edi
  409305:	e8 46 da ff ff       	callq  406d50 <malloc@plt>
  40930a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    if(item == NULL || body == NULL) {
  40930e:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  409313:	74 07                	je     40931c <sub_ChunkProcess+0x353>
  409315:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  40931a:	75 28                	jne    409344 <sub_ChunkProcess+0x37b>
      EXIT_TRACE("Memory allocation failed.\n");
  40931c:	48 8b 05 5d f6 24 00 	mov    0x24f65d(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  409323:	ba d0 84 43 00       	mov    $0x4384d0,%edx
  409328:	be 90 82 43 00       	mov    $0x438290,%esi
  40932d:	48 89 c7             	mov    %rax,%rdi
  409330:	b8 00 00 00 00       	mov    $0x0,%eax
  409335:	e8 56 dc ff ff       	callq  406f90 <fprintf@plt>
  40933a:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  40933f:	e8 dc d9 ff ff       	callq  406d20 <exit@plt>
    }
    body->fid = filecount;
  409344:	8b 05 6a f9 24 00    	mov    0x24f96a(%rip),%eax        # 658cb4 <filecount>
  40934a:	89 c2                	mov    %eax,%edx
  40934c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  409350:	89 10                	mov    %edx,(%rax)
    body->cid = chunk.cid;
  409352:	8b 55 24             	mov    0x24(%rbp),%edx
  409355:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  409359:	89 50 08             	mov    %edx,0x8(%rax)
    body->anchorid = chunk.anchorid;
  40935c:	8b 55 20             	mov    0x20(%rbp),%edx
  40935f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  409363:	89 50 04             	mov    %edx,0x4(%rax)
    body->len = SHA1_LEN;
  409366:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40936a:	48 c7 40 10 14 00 00 	movq   $0x14,0x10(%rax)
  409371:	00 
    // What??? content is a key now but previous is the chunk itself?
    // Also, if the chunk is already met, why we still need to handle this?
    item->content = key;
  409372:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  409376:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40937a:	48 89 50 10          	mov    %rdx,0x10(%rax)
	//sha1 is NULL now, not the key anymore?
    item->sha1 = NULL;
  40937e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  409382:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  409389:	00 

    item->type = TYPE_FINGERPRINT;
  40938a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40938e:	c6 00 00             	movb   $0x0,(%rax)
    item->str = (u_char *)body;
  409391:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  409395:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  409399:	48 89 50 08          	mov    %rdx,0x8(%rax)

  }

#ifdef PARALLEL
  pthread_mutex_unlock(ht_lock);
  40939d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4093a1:	48 89 c7             	mov    %rax,%rdi
  4093a4:	e8 97 db ff ff       	callq  406f40 <pthread_mutex_unlock@plt>
#endif

  if (chunk.start) MEM_FREE(chunk.start);
  4093a9:	48 8b 45 10          	mov    0x10(%rbp),%rax
  4093ad:	48 85 c0             	test   %rax,%rax
  4093b0:	74 1d                	je     4093cf <sub_ChunkProcess+0x406>
  4093b2:	48 8b 45 10          	mov    0x10(%rbp),%rax
  4093b6:	48 85 c0             	test   %rax,%rax
  4093b9:	74 14                	je     4093cf <sub_ChunkProcess+0x406>
  4093bb:	48 8b 45 10          	mov    0x10(%rbp),%rax
  4093bf:	48 89 c7             	mov    %rax,%rdi
  4093c2:	e8 d9 d9 ff ff       	callq  406da0 <free@plt>
  4093c7:	48 c7 45 10 00 00 00 	movq   $0x0,0x10(%rbp)
  4093ce:	00 
    
  return item;
  4093cf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
}
  4093d3:	c9                   	leaveq 
  4093d4:	c3                   	retq   

00000000004093d5 <ChunkProcess>:
 * Check whether a chunk is in the hash table or not.
 * If it is in the hash table, send only the SHA1 sum to the write thread
 * If not, send the data to the compress thread to get the output data
 */
void * 
ChunkProcess(void * targs) {
  4093d5:	55                   	push   %rbp
  4093d6:	48 89 e5             	mov    %rsp,%rbp
  4093d9:	48 81 ec 50 02 00 00 	sub    $0x250,%rsp
  4093e0:	48 89 bd b8 fd ff ff 	mov    %rdi,-0x248(%rbp)
  4093e7:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  4093ee:	00 00 
  4093f0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  4093f4:	31 c0                	xor    %eax,%eax
  struct thread_args *args = (struct thread_args *)targs;
  4093f6:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
  4093fd:	48 89 85 e0 fd ff ff 	mov    %rax,-0x220(%rbp)
  const int qid = args->tid / MAX_THREADS_PER_QUEUE;
  409404:	48 8b 85 e0 fd ff ff 	mov    -0x220(%rbp),%rax
  40940b:	8b 00                	mov    (%rax),%eax
  40940d:	8d 50 03             	lea    0x3(%rax),%edx
  409410:	85 c0                	test   %eax,%eax
  409412:	0f 48 c2             	cmovs  %edx,%eax
  409415:	c1 f8 02             	sar    $0x2,%eax
  409418:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%rbp)
  data_chunk chunk;
  send_buf_item * item;
  
  fprintf(stderr, "%d : ChunkProcess\n", getpid()); 
  40941e:	e8 4d d9 ff ff       	callq  406d70 <getpid@plt>
  409423:	89 c2                	mov    %eax,%edx
  409425:	48 8b 05 54 f5 24 00 	mov    0x24f554(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  40942c:	be f7 82 43 00       	mov    $0x4382f7,%esi
  409431:	48 89 c7             	mov    %rax,%rdi
  409434:	b8 00 00 00 00       	mov    $0x0,%eax
  409439:	e8 52 db ff ff       	callq  406f90 <fprintf@plt>

  data_chunk * fetchbuf[CHUNK_ANCHOR_PER_FETCH];
  int fetch_count = 0, fetch_start = 0;
  40943e:	c7 85 c8 fd ff ff 00 	movl   $0x0,-0x238(%rbp)
  409445:	00 00 00 
  409448:	c7 85 d4 fd ff ff 00 	movl   $0x0,-0x22c(%rbp)
  40944f:	00 00 00 
  
  send_buf_item * tmpbuf[ITEM_PER_INSERT];
  int tmp_count = 0;
  409452:	c7 85 cc fd ff ff 00 	movl   $0x0,-0x234(%rbp)
  409459:	00 00 00 
  send_buf_item * tmpsendbuf[ITEM_PER_INSERT];
  int tmpsend_count = 0;
  40945c:	c7 85 d0 fd ff ff 00 	movl   $0x0,-0x230(%rbp)
  409463:	00 00 00 

  // The input for this threads just come from the previous stage only. 
  // Each thread just need to remember its qid only.
  while (1) {
    //if no items existing, fetch a group of items from the pipeline
    if (fetch_count == fetch_start) {
  409466:	8b 85 c8 fd ff ff    	mov    -0x238(%rbp),%eax
  40946c:	3b 85 d4 fd ff ff    	cmp    -0x22c(%rbp),%eax
  409472:	75 5f                	jne    4094d3 <ChunkProcess+0xfe>
	  //dequeue will cause current thread to hang on the queue. 
      // When r < 0, means no data anymore. Current thread can exit now.
      int r = dequeue(&chunk_que[qid], &fetch_count, (void **)fetchbuf);
  409474:	48 8b 0d 15 16 e5 01 	mov    0x1e51615(%rip),%rcx        # 225aa90 <chunk_que>
  40947b:	8b 85 d8 fd ff ff    	mov    -0x228(%rbp),%eax
  409481:	48 63 d0             	movslq %eax,%rdx
  409484:	48 89 d0             	mov    %rdx,%rax
  409487:	48 c1 e0 02          	shl    $0x2,%rax
  40948b:	48 01 d0             	add    %rdx,%rax
  40948e:	48 c1 e0 02          	shl    $0x2,%rax
  409492:	48 01 d0             	add    %rdx,%rax
  409495:	48 c1 e0 03          	shl    $0x3,%rax
  409499:	48 01 c1             	add    %rax,%rcx
  40949c:	48 8d 95 10 fe ff ff 	lea    -0x1f0(%rbp),%rdx
  4094a3:	48 8d 85 c8 fd ff ff 	lea    -0x238(%rbp),%rax
  4094aa:	48 89 c6             	mov    %rax,%rsi
  4094ad:	48 89 cf             	mov    %rcx,%rdi
  4094b0:	e8 ad 3a 00 00       	callq  40cf62 <dequeue>
  4094b5:	89 85 dc fd ff ff    	mov    %eax,-0x224(%rbp)
      if (r < 0) break;
  4094bb:	83 bd dc fd ff ff 00 	cmpl   $0x0,-0x224(%rbp)
  4094c2:	79 05                	jns    4094c9 <ChunkProcess+0xf4>
  4094c4:	e9 af 01 00 00       	jmpq   409678 <ChunkProcess+0x2a3>

      fetch_start = 0;
  4094c9:	c7 85 d4 fd ff ff 00 	movl   $0x0,-0x22c(%rbp)
  4094d0:	00 00 00 
    }
    
    //get one item
	//fprintf(stderr, "%d: %d item %p\n", getpid(), args->tid, chunk.start);
    chunk.start = fetchbuf[fetch_start]->start;
  4094d3:	8b 85 d4 fd ff ff    	mov    -0x22c(%rbp),%eax
  4094d9:	48 98                	cltq   
  4094db:	48 8b 84 c5 10 fe ff 	mov    -0x1f0(%rbp,%rax,8),%rax
  4094e2:	ff 
  4094e3:	48 8b 00             	mov    (%rax),%rax
  4094e6:	48 89 85 f0 fd ff ff 	mov    %rax,-0x210(%rbp)
    chunk.len = fetchbuf[fetch_start]->len;    
  4094ed:	8b 85 d4 fd ff ff    	mov    -0x22c(%rbp),%eax
  4094f3:	48 98                	cltq   
  4094f5:	48 8b 84 c5 10 fe ff 	mov    -0x1f0(%rbp,%rax,8),%rax
  4094fc:	ff 
  4094fd:	48 8b 40 08          	mov    0x8(%rax),%rax
  409501:	48 89 85 f8 fd ff ff 	mov    %rax,-0x208(%rbp)
    chunk.cid = fetchbuf[fetch_start]->cid;
  409508:	8b 85 d4 fd ff ff    	mov    -0x22c(%rbp),%eax
  40950e:	48 98                	cltq   
  409510:	48 8b 84 c5 10 fe ff 	mov    -0x1f0(%rbp,%rax,8),%rax
  409517:	ff 
  409518:	8b 40 14             	mov    0x14(%rax),%eax
  40951b:	89 85 04 fe ff ff    	mov    %eax,-0x1fc(%rbp)
    chunk.anchorid = fetchbuf[fetch_start]->anchorid;
  409521:	8b 85 d4 fd ff ff    	mov    -0x22c(%rbp),%eax
  409527:	48 98                	cltq   
  409529:	48 8b 84 c5 10 fe ff 	mov    -0x1f0(%rbp,%rax,8),%rax
  409530:	ff 
  409531:	8b 40 10             	mov    0x10(%rax),%eax
  409534:	89 85 00 fe ff ff    	mov    %eax,-0x200(%rbp)
    fetch_start ++;
  40953a:	83 85 d4 fd ff ff 01 	addl   $0x1,-0x22c(%rbp)

    if (chunk.start == NULL) break;
  409541:	48 8b 85 f0 fd ff ff 	mov    -0x210(%rbp),%rax
  409548:	48 85 c0             	test   %rax,%rax
  40954b:	75 05                	jne    409552 <ChunkProcess+0x17d>
  40954d:	e9 26 01 00 00       	jmpq   409678 <ChunkProcess+0x2a3>

    item = sub_ChunkProcess(chunk);
  409552:	48 83 ec 08          	sub    $0x8,%rsp
  409556:	ff b5 00 fe ff ff    	pushq  -0x200(%rbp)
  40955c:	ff b5 f8 fd ff ff    	pushq  -0x208(%rbp)
  409562:	ff b5 f0 fd ff ff    	pushq  -0x210(%rbp)
  409568:	e8 5c fa ff ff       	callq  408fc9 <sub_ChunkProcess>
  40956d:	48 83 c4 20          	add    $0x20,%rsp
  409571:	48 89 85 e8 fd ff ff 	mov    %rax,-0x218(%rbp)

	// After sub_chunkprocess, we just got the item. 
    // Start to handle the item according different type now.
    if (item->type == TYPE_COMPRESS) {
  409578:	48 8b 85 e8 fd ff ff 	mov    -0x218(%rbp),%rax
  40957f:	0f b6 00             	movzbl (%rax),%eax
  409582:	3c 01                	cmp    $0x1,%al
  409584:	75 7b                	jne    409601 <ChunkProcess+0x22c>

      tmpbuf[tmp_count] = item;
  409586:	8b 85 cc fd ff ff    	mov    -0x234(%rbp),%eax
  40958c:	48 98                	cltq   
  40958e:	48 8b 95 e8 fd ff ff 	mov    -0x218(%rbp),%rdx
  409595:	48 89 94 c5 b0 fe ff 	mov    %rdx,-0x150(%rbp,%rax,8)
  40959c:	ff 
      tmp_count ++;
  40959d:	8b 85 cc fd ff ff    	mov    -0x234(%rbp),%eax
  4095a3:	83 c0 01             	add    $0x1,%eax
  4095a6:	89 85 cc fd ff ff    	mov    %eax,-0x234(%rbp)
     
	  // We won't do insert every time, we will wait for ITEM_PER_INSERT.
      // That means we can improve the performance???? Not sure, but we will
      // decrease the number of communication since we use local buffer to cache all items. 
      if (tmp_count >= ITEM_PER_INSERT) {      
  4095ac:	8b 85 cc fd ff ff    	mov    -0x234(%rbp),%eax
  4095b2:	83 f8 13             	cmp    $0x13,%eax
  4095b5:	0f 8e b8 00 00 00    	jle    409673 <ChunkProcess+0x29e>
        enqueue(&compress_que[qid], &tmp_count, (void **)tmpbuf);
  4095bb:	48 8b 0d be 14 e5 01 	mov    0x1e514be(%rip),%rcx        # 225aa80 <compress_que>
  4095c2:	8b 85 d8 fd ff ff    	mov    -0x228(%rbp),%eax
  4095c8:	48 63 d0             	movslq %eax,%rdx
  4095cb:	48 89 d0             	mov    %rdx,%rax
  4095ce:	48 c1 e0 02          	shl    $0x2,%rax
  4095d2:	48 01 d0             	add    %rdx,%rax
  4095d5:	48 c1 e0 02          	shl    $0x2,%rax
  4095d9:	48 01 d0             	add    %rdx,%rax
  4095dc:	48 c1 e0 03          	shl    $0x3,%rax
  4095e0:	48 01 c1             	add    %rax,%rcx
  4095e3:	48 8d 95 b0 fe ff ff 	lea    -0x150(%rbp),%rdx
  4095ea:	48 8d 85 cc fd ff ff 	lea    -0x234(%rbp),%rax
  4095f1:	48 89 c6             	mov    %rax,%rsi
  4095f4:	48 89 cf             	mov    %rcx,%rdi
  4095f7:	e8 f0 3a 00 00       	callq  40d0ec <enqueue>
  4095fc:	e9 65 fe ff ff       	jmpq   409466 <ChunkProcess+0x91>
      }
    } else {
      tmpsendbuf[tmpsend_count] = item;
  409601:	8b 85 d0 fd ff ff    	mov    -0x230(%rbp),%eax
  409607:	48 98                	cltq   
  409609:	48 8b 95 e8 fd ff ff 	mov    -0x218(%rbp),%rdx
  409610:	48 89 94 c5 50 ff ff 	mov    %rdx,-0xb0(%rbp,%rax,8)
  409617:	ff 
      tmpsend_count ++;
  409618:	8b 85 d0 fd ff ff    	mov    -0x230(%rbp),%eax
  40961e:	83 c0 01             	add    $0x1,%eax
  409621:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%rbp)
      
      if (tmpsend_count >= ITEM_PER_INSERT) {
  409627:	8b 85 d0 fd ff ff    	mov    -0x230(%rbp),%eax
  40962d:	83 f8 13             	cmp    $0x13,%eax
  409630:	7e 41                	jle    409673 <ChunkProcess+0x29e>
        enqueue(&send_que[qid], &tmpsend_count, (void **)tmpsendbuf);
  409632:	48 8b 0d 17 14 a5 01 	mov    0x1a51417(%rip),%rcx        # 1e5aa50 <send_que>
  409639:	8b 85 d8 fd ff ff    	mov    -0x228(%rbp),%eax
  40963f:	48 63 d0             	movslq %eax,%rdx
  409642:	48 89 d0             	mov    %rdx,%rax
  409645:	48 c1 e0 02          	shl    $0x2,%rax
  409649:	48 01 d0             	add    %rdx,%rax
  40964c:	48 c1 e0 02          	shl    $0x2,%rax
  409650:	48 01 d0             	add    %rdx,%rax
  409653:	48 c1 e0 03          	shl    $0x3,%rax
  409657:	48 01 c1             	add    %rax,%rcx
  40965a:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
  409661:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
  409668:	48 89 c6             	mov    %rax,%rsi
  40966b:	48 89 cf             	mov    %rcx,%rdi
  40966e:	e8 79 3a 00 00       	callq  40d0ec <enqueue>
      }
    }
  }
  409673:	e9 ee fd ff ff       	jmpq   409466 <ChunkProcess+0x91>
 
  // There is no previous worker here, we should add remainning work to corresponding queue anyway. 
  if (tmp_count > 0) {      
  409678:	8b 85 cc fd ff ff    	mov    -0x234(%rbp),%eax
  40967e:	85 c0                	test   %eax,%eax
  409680:	7e 41                	jle    4096c3 <ChunkProcess+0x2ee>
    enqueue(&compress_que[qid], &tmp_count, (void **)tmpbuf);
  409682:	48 8b 0d f7 13 e5 01 	mov    0x1e513f7(%rip),%rcx        # 225aa80 <compress_que>
  409689:	8b 85 d8 fd ff ff    	mov    -0x228(%rbp),%eax
  40968f:	48 63 d0             	movslq %eax,%rdx
  409692:	48 89 d0             	mov    %rdx,%rax
  409695:	48 c1 e0 02          	shl    $0x2,%rax
  409699:	48 01 d0             	add    %rdx,%rax
  40969c:	48 c1 e0 02          	shl    $0x2,%rax
  4096a0:	48 01 d0             	add    %rdx,%rax
  4096a3:	48 c1 e0 03          	shl    $0x3,%rax
  4096a7:	48 01 c1             	add    %rax,%rcx
  4096aa:	48 8d 95 b0 fe ff ff 	lea    -0x150(%rbp),%rdx
  4096b1:	48 8d 85 cc fd ff ff 	lea    -0x234(%rbp),%rax
  4096b8:	48 89 c6             	mov    %rax,%rsi
  4096bb:	48 89 cf             	mov    %rcx,%rdi
  4096be:	e8 29 3a 00 00       	callq  40d0ec <enqueue>
  }
    
  if (tmpsend_count > 0) {      
  4096c3:	8b 85 d0 fd ff ff    	mov    -0x230(%rbp),%eax
  4096c9:	85 c0                	test   %eax,%eax
  4096cb:	7e 41                	jle    40970e <ChunkProcess+0x339>
    enqueue(&send_que[qid], &tmpsend_count, (void **)tmpsendbuf);
  4096cd:	48 8b 0d 7c 13 a5 01 	mov    0x1a5137c(%rip),%rcx        # 1e5aa50 <send_que>
  4096d4:	8b 85 d8 fd ff ff    	mov    -0x228(%rbp),%eax
  4096da:	48 63 d0             	movslq %eax,%rdx
  4096dd:	48 89 d0             	mov    %rdx,%rax
  4096e0:	48 c1 e0 02          	shl    $0x2,%rax
  4096e4:	48 01 d0             	add    %rdx,%rax
  4096e7:	48 c1 e0 02          	shl    $0x2,%rax
  4096eb:	48 01 d0             	add    %rdx,%rax
  4096ee:	48 c1 e0 03          	shl    $0x3,%rax
  4096f2:	48 01 c1             	add    %rax,%rcx
  4096f5:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
  4096fc:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
  409703:	48 89 c6             	mov    %rax,%rsi
  409706:	48 89 cf             	mov    %rcx,%rdi
  409709:	e8 de 39 00 00       	callq  40d0ec <enqueue>
  }

  //Used to tell next stage that one more chunkProcess thread ends
  queue_signal_terminate(&compress_que[qid]);
  40970e:	48 8b 0d 6b 13 e5 01 	mov    0x1e5136b(%rip),%rcx        # 225aa80 <compress_que>
  409715:	8b 85 d8 fd ff ff    	mov    -0x228(%rbp),%eax
  40971b:	48 63 d0             	movslq %eax,%rdx
  40971e:	48 89 d0             	mov    %rdx,%rax
  409721:	48 c1 e0 02          	shl    $0x2,%rax
  409725:	48 01 d0             	add    %rdx,%rax
  409728:	48 c1 e0 02          	shl    $0x2,%rax
  40972c:	48 01 d0             	add    %rdx,%rax
  40972f:	48 c1 e0 03          	shl    $0x3,%rax
  409733:	48 01 c8             	add    %rcx,%rax
  409736:	48 89 c7             	mov    %rax,%rdi
  409739:	e8 d5 37 00 00       	callq  40cf13 <queue_signal_terminate>
    return NULL;
  40973e:	b8 00 00 00 00       	mov    $0x0,%eax
}
  409743:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  409747:	64 48 33 34 25 28 00 	xor    %fs:0x28,%rsi
  40974e:	00 00 
  409750:	74 05                	je     409757 <ChunkProcess+0x382>
  409752:	e8 69 d7 ff ff       	callq  406ec0 <__stack_chk_fail@plt>
  409757:	c9                   	leaveq 
  409758:	c3                   	retq   

0000000000409759 <FindAllAnchors>:

/* 
 * Use rabin fingerprint to find all the anchors.
 */
void *
FindAllAnchors(void * targs) {
  409759:	55                   	push   %rbp
  40975a:	48 89 e5             	mov    %rsp,%rbp
  40975d:	53                   	push   %rbx
  40975e:	48 81 ec b8 39 01 00 	sub    $0x139b8,%rsp
  409765:	48 89 bd 48 c6 fe ff 	mov    %rdi,-0x139b8(%rbp)
  40976c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  409773:	00 00 
  409775:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  409779:	31 c0                	xor    %eax,%eax
  struct thread_args *args = (struct thread_args *)targs;
  40977b:	48 8b 85 48 c6 fe ff 	mov    -0x139b8(%rbp),%rax
  409782:	48 89 85 88 c6 fe ff 	mov    %rax,-0x13978(%rbp)
  const int qid = args->tid / MAX_THREADS_PER_QUEUE;
  409789:	48 8b 85 88 c6 fe ff 	mov    -0x13978(%rbp),%rax
  409790:	8b 00                	mov    (%rax),%eax
  409792:	8d 50 03             	lea    0x3(%rax),%edx
  409795:	85 c0                	test   %eax,%eax
  409797:	0f 48 c2             	cmovs  %edx,%eax
  40979a:	c1 f8 02             	sar    $0x2,%eax
  40979d:	89 85 70 c6 fe ff    	mov    %eax,-0x13990(%rbp)
  data_chunk * fetchbuf[MAX_PER_FETCH];
  int fetch_count = 0;
  4097a3:	c7 85 5c c6 fe ff 00 	movl   $0x0,-0x139a4(%rbp)
  4097aa:	00 00 00 
  int fetch_start = 0;
  4097ad:	c7 85 64 c6 fe ff 00 	movl   $0x0,-0x1399c(%rbp)
  4097b4:	00 00 00 
  
  fprintf(stderr, "%d : FindAllAnchors\n", getpid()); 
  4097b7:	e8 b4 d5 ff ff       	callq  406d70 <getpid@plt>
  4097bc:	89 c2                	mov    %eax,%edx
  4097be:	48 8b 05 bb f1 24 00 	mov    0x24f1bb(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  4097c5:	be 0a 83 43 00       	mov    $0x43830a,%esi
  4097ca:	48 89 c7             	mov    %rax,%rdi
  4097cd:	b8 00 00 00 00       	mov    $0x0,%eax
  4097d2:	e8 b9 d7 ff ff       	callq  406f90 <fprintf@plt>
  u32int * rabintab = malloc(256*sizeof rabintab[0]);
  4097d7:	bf 00 04 00 00       	mov    $0x400,%edi
  4097dc:	e8 6f d5 ff ff       	callq  406d50 <malloc@plt>
  4097e1:	48 89 85 90 c6 fe ff 	mov    %rax,-0x13970(%rbp)
  u32int * rabinwintab = malloc(256*sizeof rabintab[0]);
  4097e8:	bf 00 04 00 00       	mov    $0x400,%edi
  4097ed:	e8 5e d5 ff ff       	callq  406d50 <malloc@plt>
  4097f2:	48 89 85 98 c6 fe ff 	mov    %rax,-0x13968(%rbp)
  if(rabintab == NULL || rabinwintab == NULL) {
  4097f9:	48 83 bd 90 c6 fe ff 	cmpq   $0x0,-0x13970(%rbp)
  409800:	00 
  409801:	74 0a                	je     40980d <FindAllAnchors+0xb4>
  409803:	48 83 bd 98 c6 fe ff 	cmpq   $0x0,-0x13968(%rbp)
  40980a:	00 
  40980b:	75 28                	jne    409835 <FindAllAnchors+0xdc>
    EXIT_TRACE("Memory allocation failed.\n");
  40980d:	48 8b 05 6c f1 24 00 	mov    0x24f16c(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  409814:	ba e1 84 43 00       	mov    $0x4384e1,%edx
  409819:	be 90 82 43 00       	mov    $0x438290,%esi
  40981e:	48 89 c7             	mov    %rax,%rdi
  409821:	b8 00 00 00 00       	mov    $0x0,%eax
  409826:	e8 65 d7 ff ff       	callq  406f90 <fprintf@plt>
  40982b:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  409830:	e8 eb d4 ff ff       	callq  406d20 <exit@plt>
  }

  data_chunk * tmpbuf[CHUNK_ANCHOR_PER_INSERT];
  int tmp_count = 0;
  409835:	c7 85 60 c6 fe ff 00 	movl   $0x0,-0x139a0(%rbp)
  40983c:	00 00 00 

    while (1) {
      data_chunk item;
      //if no item for process, get a group of items from the pipeline
      if (fetch_count == fetch_start) {
  40983f:	8b 85 5c c6 fe ff    	mov    -0x139a4(%rbp),%eax
  409845:	3b 85 64 c6 fe ff    	cmp    -0x1399c(%rbp),%eax
  40984b:	75 6e                	jne    4098bb <FindAllAnchors+0x162>
		// Fetch some items from anchor_queue
        int r = dequeue(&anchor_que[qid], &fetch_count, (void **)fetchbuf);
  40984d:	48 8b 0d ec 11 a5 01 	mov    0x1a511ec(%rip),%rcx        # 1e5aa40 <anchor_que>
  409854:	8b 85 70 c6 fe ff    	mov    -0x13990(%rbp),%eax
  40985a:	48 63 d0             	movslq %eax,%rdx
  40985d:	48 89 d0             	mov    %rdx,%rax
  409860:	48 c1 e0 02          	shl    $0x2,%rax
  409864:	48 01 d0             	add    %rdx,%rax
  409867:	48 c1 e0 02          	shl    $0x2,%rax
  40986b:	48 01 d0             	add    %rdx,%rax
  40986e:	48 c1 e0 03          	shl    $0x3,%rax
  409872:	48 01 c1             	add    %rax,%rcx
  409875:	48 8d 95 60 c7 fe ff 	lea    -0x138a0(%rbp),%rdx
  40987c:	48 8d 85 5c c6 fe ff 	lea    -0x139a4(%rbp),%rax
  409883:	48 89 c6             	mov    %rax,%rsi
  409886:	48 89 cf             	mov    %rcx,%rdi
  409889:	e8 d4 36 00 00       	callq  40cf62 <dequeue>
  40988e:	89 85 74 c6 fe ff    	mov    %eax,-0x1398c(%rbp)
	    // If r is -1, that means no item anymore??? 
        if (r < 0) {
  409894:	83 bd 74 c6 fe ff 00 	cmpl   $0x0,-0x1398c(%rbp)
  40989b:	79 14                	jns    4098b1 <FindAllAnchors+0x158>
          break;
  40989d:	90                   	nop

          MEM_FREE(item.start);
        }
    }  

    if (tmp_count > 0) {
  40989e:	8b 85 60 c6 fe ff    	mov    -0x139a0(%rbp),%eax
  4098a4:	85 c0                	test   %eax,%eax
  4098a6:	0f 8e 86 06 00 00    	jle    409f32 <FindAllAnchors+0x7d9>
  4098ac:	e9 40 06 00 00       	jmpq   409ef1 <FindAllAnchors+0x798>
	    // If r is -1, that means no item anymore??? 
        if (r < 0) {
          break;
        }
        
        fetch_start = 0;
  4098b1:	c7 85 64 c6 fe ff 00 	movl   $0x0,-0x1399c(%rbp)
  4098b8:	00 00 00 
      }
         
      // Fetch_start is used to identify first item that we can process. Fetch_count is 
      // the number of items that we fetch from the queue 
      if (fetch_start < fetch_count) {
  4098bb:	8b 85 5c c6 fe ff    	mov    -0x139a4(%rbp),%eax
  4098c1:	39 85 64 c6 fe ff    	cmp    %eax,-0x1399c(%rbp)
  4098c7:	0f 8d 1f 06 00 00    	jge    409eec <FindAllAnchors+0x793>
          //get one item
          item.start = fetchbuf[fetch_start]->start;
  4098cd:	8b 85 64 c6 fe ff    	mov    -0x1399c(%rbp),%eax
  4098d3:	48 98                	cltq   
  4098d5:	48 8b 84 c5 60 c7 fe 	mov    -0x138a0(%rbp,%rax,8),%rax
  4098dc:	ff 
  4098dd:	48 8b 00             	mov    (%rax),%rax
  4098e0:	48 89 85 a0 c6 fe ff 	mov    %rax,-0x13960(%rbp)
          item.len = fetchbuf[fetch_start]->len;
  4098e7:	8b 85 64 c6 fe ff    	mov    -0x1399c(%rbp),%eax
  4098ed:	48 98                	cltq   
  4098ef:	48 8b 84 c5 60 c7 fe 	mov    -0x138a0(%rbp,%rax,8),%rax
  4098f6:	ff 
  4098f7:	48 8b 40 08          	mov    0x8(%rax),%rax
  4098fb:	48 89 85 a8 c6 fe ff 	mov    %rax,-0x13958(%rbp)
          item.anchorid = fetchbuf[fetch_start]->anchorid;
  409902:	8b 85 64 c6 fe ff    	mov    -0x1399c(%rbp),%eax
  409908:	48 98                	cltq   
  40990a:	48 8b 84 c5 60 c7 fe 	mov    -0x138a0(%rbp,%rax,8),%rax
  409911:	ff 
  409912:	8b 40 10             	mov    0x10(%rax),%eax
  409915:	89 85 b0 c6 fe ff    	mov    %eax,-0x13950(%rbp)
		  // What? We don't need to do this, since it is not a circular buffer. But there is no harm to do this???
          fetch_start = (fetch_start + 1)%MAX_PER_FETCH;
  40991b:	8b 85 64 c6 fe ff    	mov    -0x1399c(%rbp),%eax
  409921:	8d 48 01             	lea    0x1(%rax),%ecx
  409924:	ba ad 8b db 68       	mov    $0x68db8bad,%edx
  409929:	89 c8                	mov    %ecx,%eax
  40992b:	f7 ea                	imul   %edx
  40992d:	c1 fa 0c             	sar    $0xc,%edx
  409930:	89 c8                	mov    %ecx,%eax
  409932:	c1 f8 1f             	sar    $0x1f,%eax
  409935:	29 c2                	sub    %eax,%edx
  409937:	89 d0                	mov    %edx,%eax
  409939:	89 85 64 c6 fe ff    	mov    %eax,-0x1399c(%rbp)
  40993f:	8b 85 64 c6 fe ff    	mov    -0x1399c(%rbp),%eax
  409945:	69 c0 10 27 00 00    	imul   $0x2710,%eax,%eax
  40994b:	29 c1                	sub    %eax,%ecx
  40994d:	89 c8                	mov    %ecx,%eax
  40994f:	89 85 64 c6 fe ff    	mov    %eax,-0x1399c(%rbp)
               
          rabininit(rf_win, rabintab, rabinwintab);
  409955:	8b 05 2d 11 e5 01    	mov    0x1e5112d(%rip),%eax        # 225aa88 <rf_win>
  40995b:	48 8b 95 98 c6 fe ff 	mov    -0x13968(%rbp),%rdx
  409962:	48 8b 8d 90 c6 fe ff 	mov    -0x13970(%rbp),%rcx
  409969:	48 89 ce             	mov    %rcx,%rsi
  40996c:	89 c7                	mov    %eax,%edi
  40996e:	e8 88 3a 00 00       	callq  40d3fb <rabininit>
          
          u_char * p;
          
          u_int32 chcount = 0;
  409973:	c7 85 68 c6 fe ff 00 	movl   $0x0,-0x13998(%rbp)
  40997a:	00 00 00 
          // First, anchor and p will have the same value in the beginning.
          u_char * anchor = item.start;
  40997d:	48 8b 85 a0 c6 fe ff 	mov    -0x13960(%rbp),%rax
  409984:	48 89 85 80 c6 fe ff 	mov    %rax,-0x13980(%rbp)
          p = item.start;
  40998b:	48 8b 85 a0 c6 fe ff 	mov    -0x13960(%rbp),%rax
  409992:	48 89 85 78 c6 fe ff 	mov    %rax,-0x13988(%rbp)
		  // n is 60K in the beginning
          int n = MAX_RABIN_CHUNK_SIZE;
  409999:	c7 85 6c c6 fe ff 00 	movl   $0xf000,-0x13994(%rbp)
  4099a0:	f0 00 00 
          while(p < item.start+item.len) {
  4099a3:	e9 9d 02 00 00       	jmpq   409c45 <FindAllAnchors+0x4ec>
			// Check whether current item is smaller than specified size?
            if (item.len + item.start - p < n) {
  4099a8:	48 8b 95 a0 c6 fe ff 	mov    -0x13960(%rbp),%rdx
  4099af:	48 8b 85 a8 c6 fe ff 	mov    -0x13958(%rbp),%rax
  4099b6:	48 01 d0             	add    %rdx,%rax
  4099b9:	48 89 c2             	mov    %rax,%rdx
  4099bc:	48 8b 85 78 c6 fe ff 	mov    -0x13988(%rbp),%rax
  4099c3:	48 29 c2             	sub    %rax,%rdx
  4099c6:	8b 85 6c c6 fe ff    	mov    -0x13994(%rbp),%eax
  4099cc:	48 98                	cltq   
  4099ce:	48 39 c2             	cmp    %rax,%rdx
  4099d1:	7d 27                	jge    4099fa <FindAllAnchors+0x2a1>
              n = item.len +item.start -p;
  4099d3:	48 8b 95 a0 c6 fe ff 	mov    -0x13960(%rbp),%rdx
  4099da:	48 8b 85 a8 c6 fe ff 	mov    -0x13958(%rbp),%rax
  4099e1:	48 01 d0             	add    %rdx,%rax
  4099e4:	48 89 c2             	mov    %rax,%rdx
  4099e7:	48 8b 85 78 c6 fe ff 	mov    -0x13988(%rbp),%rax
  4099ee:	48 29 c2             	sub    %rax,%rdx
  4099f1:	48 89 d0             	mov    %rdx,%rax
  4099f4:	89 85 6c c6 fe ff    	mov    %eax,-0x13994(%rbp)
            }
            //find next anchor
            p = p + rabinseg(p, n, rf_win, rabintab, rabinwintab);
  4099fa:	8b 15 88 10 e5 01    	mov    0x1e51088(%rip),%edx        # 225aa88 <rf_win>
  409a00:	48 8b bd 98 c6 fe ff 	mov    -0x13968(%rbp),%rdi
  409a07:	48 8b 8d 90 c6 fe ff 	mov    -0x13970(%rbp),%rcx
  409a0e:	8b b5 6c c6 fe ff    	mov    -0x13994(%rbp),%esi
  409a14:	48 8b 85 78 c6 fe ff 	mov    -0x13988(%rbp),%rax
  409a1b:	49 89 f8             	mov    %rdi,%r8
  409a1e:	48 89 c7             	mov    %rax,%rdi
  409a21:	e8 19 3a 00 00       	callq  40d43f <rabinseg>
  409a26:	48 98                	cltq   
  409a28:	48 01 85 78 c6 fe ff 	add    %rax,-0x13988(%rbp)
          
            //insert into anchor queue: (anchor, p-src+1)
            tmpbuf[tmp_count] = (data_chunk *)malloc(sizeof(data_chunk));
  409a2f:	8b 9d 60 c6 fe ff    	mov    -0x139a0(%rbp),%ebx
  409a35:	bf 18 00 00 00       	mov    $0x18,%edi
  409a3a:	e8 11 d3 ff ff       	callq  406d50 <malloc@plt>
  409a3f:	48 89 c2             	mov    %rax,%rdx
  409a42:	48 63 c3             	movslq %ebx,%rax
  409a45:	48 89 94 c5 c0 c6 fe 	mov    %rdx,-0x13940(%rbp,%rax,8)
  409a4c:	ff 
            if(tmpbuf[tmp_count] == NULL) {
  409a4d:	8b 85 60 c6 fe ff    	mov    -0x139a0(%rbp),%eax
  409a53:	48 98                	cltq   
  409a55:	48 8b 84 c5 c0 c6 fe 	mov    -0x13940(%rbp,%rax,8),%rax
  409a5c:	ff 
  409a5d:	48 85 c0             	test   %rax,%rax
  409a60:	75 28                	jne    409a8a <FindAllAnchors+0x331>
              EXIT_TRACE("Memory allocation failed.\n");
  409a62:	48 8b 05 17 ef 24 00 	mov    0x24ef17(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  409a69:	ba e1 84 43 00       	mov    $0x4384e1,%edx
  409a6e:	be 90 82 43 00       	mov    $0x438290,%esi
  409a73:	48 89 c7             	mov    %rax,%rdi
  409a76:	b8 00 00 00 00       	mov    $0x0,%eax
  409a7b:	e8 10 d5 ff ff       	callq  406f90 <fprintf@plt>
  409a80:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  409a85:	e8 96 d2 ff ff       	callq  406d20 <exit@plt>
            }

			// Report some race condition here.
            tmpbuf[tmp_count]->start = (u_char *)malloc(p - anchor + 1);
  409a8a:	8b 85 60 c6 fe ff    	mov    -0x139a0(%rbp),%eax
  409a90:	48 98                	cltq   
  409a92:	48 8b 9c c5 c0 c6 fe 	mov    -0x13940(%rbp,%rax,8),%rbx
  409a99:	ff 
  409a9a:	48 8b 95 78 c6 fe ff 	mov    -0x13988(%rbp),%rdx
  409aa1:	48 8b 85 80 c6 fe ff 	mov    -0x13980(%rbp),%rax
  409aa8:	48 29 c2             	sub    %rax,%rdx
  409aab:	48 89 d0             	mov    %rdx,%rax
  409aae:	48 83 c0 01          	add    $0x1,%rax
  409ab2:	48 89 c7             	mov    %rax,%rdi
  409ab5:	e8 96 d2 ff ff       	callq  406d50 <malloc@plt>
  409aba:	48 89 03             	mov    %rax,(%rbx)
            //fprintf(stderr, "anchor %p to %p\n", tmpbuf[tmp_count]->start, tmpbuf[tmp_count]->start+(p - anchor + 1));

            if(tmpbuf[tmp_count]->start == NULL) {
  409abd:	8b 85 60 c6 fe ff    	mov    -0x139a0(%rbp),%eax
  409ac3:	48 98                	cltq   
  409ac5:	48 8b 84 c5 c0 c6 fe 	mov    -0x13940(%rbp,%rax,8),%rax
  409acc:	ff 
  409acd:	48 8b 00             	mov    (%rax),%rax
  409ad0:	48 85 c0             	test   %rax,%rax
  409ad3:	75 28                	jne    409afd <FindAllAnchors+0x3a4>
              EXIT_TRACE("Memory allocation failed.\n");
  409ad5:	48 8b 05 a4 ee 24 00 	mov    0x24eea4(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  409adc:	ba e1 84 43 00       	mov    $0x4384e1,%edx
  409ae1:	be 90 82 43 00       	mov    $0x438290,%esi
  409ae6:	48 89 c7             	mov    %rax,%rdi
  409ae9:	b8 00 00 00 00       	mov    $0x0,%eax
  409aee:	e8 9d d4 ff ff       	callq  406f90 <fprintf@plt>
  409af3:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  409af8:	e8 23 d2 ff ff       	callq  406d20 <exit@plt>
            }
            tmpbuf[tmp_count]->len = p-anchor;
  409afd:	8b 85 60 c6 fe ff    	mov    -0x139a0(%rbp),%eax
  409b03:	48 98                	cltq   
  409b05:	48 8b 84 c5 c0 c6 fe 	mov    -0x13940(%rbp,%rax,8),%rax
  409b0c:	ff 
  409b0d:	48 8b 8d 78 c6 fe ff 	mov    -0x13988(%rbp),%rcx
  409b14:	48 8b 95 80 c6 fe ff 	mov    -0x13980(%rbp),%rdx
  409b1b:	48 29 d1             	sub    %rdx,%rcx
  409b1e:	48 89 ca             	mov    %rcx,%rdx
  409b21:	48 89 50 08          	mov    %rdx,0x8(%rax)
            tmpbuf[tmp_count]->anchorid = item.anchorid;
  409b25:	8b 85 60 c6 fe ff    	mov    -0x139a0(%rbp),%eax
  409b2b:	48 98                	cltq   
  409b2d:	48 8b 84 c5 c0 c6 fe 	mov    -0x13940(%rbp,%rax,8),%rax
  409b34:	ff 
  409b35:	8b 95 b0 c6 fe ff    	mov    -0x13950(%rbp),%edx
  409b3b:	89 50 10             	mov    %edx,0x10(%rax)
            tmpbuf[tmp_count]->cid = chcount;
  409b3e:	8b 85 60 c6 fe ff    	mov    -0x139a0(%rbp),%eax
  409b44:	48 98                	cltq   
  409b46:	48 8b 84 c5 c0 c6 fe 	mov    -0x13940(%rbp,%rax,8),%rax
  409b4d:	ff 
  409b4e:	8b 95 68 c6 fe ff    	mov    -0x13998(%rbp),%edx
  409b54:	89 50 14             	mov    %edx,0x14(%rax)
              
            chcount++;              
  409b57:	83 85 68 c6 fe ff 01 	addl   $0x1,-0x13998(%rbp)
            chunks_per_anchor[item.anchorid] = chcount;
  409b5e:	8b 95 b0 c6 fe ff    	mov    -0x13950(%rbp),%edx
  409b64:	8b 85 68 c6 fe ff    	mov    -0x13998(%rbp),%eax
  409b6a:	89 d2                	mov    %edx,%edx
  409b6c:	89 04 95 80 aa e5 01 	mov    %eax,0x1e5aa80(,%rdx,4)
            memcpy(tmpbuf[tmp_count]->start, anchor, p-anchor);
  409b73:	48 8b 95 78 c6 fe ff 	mov    -0x13988(%rbp),%rdx
  409b7a:	48 8b 85 80 c6 fe ff 	mov    -0x13980(%rbp),%rax
  409b81:	48 29 c2             	sub    %rax,%rdx
  409b84:	48 89 d0             	mov    %rdx,%rax
  409b87:	48 89 c2             	mov    %rax,%rdx
  409b8a:	8b 85 60 c6 fe ff    	mov    -0x139a0(%rbp),%eax
  409b90:	48 98                	cltq   
  409b92:	48 8b 84 c5 c0 c6 fe 	mov    -0x13940(%rbp,%rax,8),%rax
  409b99:	ff 
  409b9a:	48 8b 00             	mov    (%rax),%rax
  409b9d:	48 8b 8d 80 c6 fe ff 	mov    -0x13980(%rbp),%rcx
  409ba4:	48 89 ce             	mov    %rcx,%rsi
  409ba7:	48 89 c7             	mov    %rax,%rdi
  409baa:	e8 41 d4 ff ff       	callq  406ff0 <memcpy@plt>
            tmpbuf[tmp_count]->start[p-anchor] = 0;
  409baf:	8b 85 60 c6 fe ff    	mov    -0x139a0(%rbp),%eax
  409bb5:	48 98                	cltq   
  409bb7:	48 8b 84 c5 c0 c6 fe 	mov    -0x13940(%rbp,%rax,8),%rax
  409bbe:	ff 
  409bbf:	48 8b 00             	mov    (%rax),%rax
  409bc2:	48 8b 8d 78 c6 fe ff 	mov    -0x13988(%rbp),%rcx
  409bc9:	48 8b 95 80 c6 fe ff 	mov    -0x13980(%rbp),%rdx
  409bd0:	48 29 d1             	sub    %rdx,%rcx
  409bd3:	48 89 ca             	mov    %rcx,%rdx
  409bd6:	48 01 d0             	add    %rdx,%rax
  409bd9:	c6 00 00             	movb   $0x0,(%rax)
            tmp_count ++;                            
  409bdc:	8b 85 60 c6 fe ff    	mov    -0x139a0(%rbp),%eax
  409be2:	83 c0 01             	add    $0x1,%eax
  409be5:	89 85 60 c6 fe ff    	mov    %eax,-0x139a0(%rbp)

            if (tmp_count >= CHUNK_ANCHOR_PER_INSERT) {
  409beb:	8b 85 60 c6 fe ff    	mov    -0x139a0(%rbp),%eax
  409bf1:	83 f8 13             	cmp    $0x13,%eax
  409bf4:	7e 41                	jle    409c37 <FindAllAnchors+0x4de>
              enqueue(&chunk_que[qid], &tmp_count, (void **)tmpbuf);
  409bf6:	48 8b 0d 93 0e e5 01 	mov    0x1e50e93(%rip),%rcx        # 225aa90 <chunk_que>
  409bfd:	8b 85 70 c6 fe ff    	mov    -0x13990(%rbp),%eax
  409c03:	48 63 d0             	movslq %eax,%rdx
  409c06:	48 89 d0             	mov    %rdx,%rax
  409c09:	48 c1 e0 02          	shl    $0x2,%rax
  409c0d:	48 01 d0             	add    %rdx,%rax
  409c10:	48 c1 e0 02          	shl    $0x2,%rax
  409c14:	48 01 d0             	add    %rdx,%rax
  409c17:	48 c1 e0 03          	shl    $0x3,%rax
  409c1b:	48 01 c1             	add    %rax,%rcx
  409c1e:	48 8d 95 c0 c6 fe ff 	lea    -0x13940(%rbp),%rdx
  409c25:	48 8d 85 60 c6 fe ff 	lea    -0x139a0(%rbp),%rax
  409c2c:	48 89 c6             	mov    %rax,%rsi
  409c2f:	48 89 cf             	mov    %rcx,%rdi
  409c32:	e8 b5 34 00 00       	callq  40d0ec <enqueue>
            }
              
            anchor = p;
  409c37:	48 8b 85 78 c6 fe ff 	mov    -0x13988(%rbp),%rax
  409c3e:	48 89 85 80 c6 fe ff 	mov    %rax,-0x13980(%rbp)
          // First, anchor and p will have the same value in the beginning.
          u_char * anchor = item.start;
          p = item.start;
		  // n is 60K in the beginning
          int n = MAX_RABIN_CHUNK_SIZE;
          while(p < item.start+item.len) {
  409c45:	48 8b 95 a0 c6 fe ff 	mov    -0x13960(%rbp),%rdx
  409c4c:	48 8b 85 a8 c6 fe ff 	mov    -0x13958(%rbp),%rax
  409c53:	48 01 d0             	add    %rdx,%rax
  409c56:	48 3b 85 78 c6 fe ff 	cmp    -0x13988(%rbp),%rax
  409c5d:	0f 87 45 fd ff ff    	ja     4099a8 <FindAllAnchors+0x24f>
              
            anchor = p;
          } 

          //insert the remaining item to the anchor queue
          if (item.start + item.len - anchor > 0) {
  409c63:	48 8b 95 a0 c6 fe ff 	mov    -0x13960(%rbp),%rdx
  409c6a:	48 8b 85 a8 c6 fe ff 	mov    -0x13958(%rbp),%rax
  409c71:	48 01 d0             	add    %rdx,%rax
  409c74:	48 89 c2             	mov    %rax,%rdx
  409c77:	48 8b 85 80 c6 fe ff 	mov    -0x13980(%rbp),%rax
  409c7e:	48 29 c2             	sub    %rax,%rdx
  409c81:	48 89 d0             	mov    %rdx,%rax
  409c84:	48 85 c0             	test   %rax,%rax
  409c87:	0f 8e 39 02 00 00    	jle    409ec6 <FindAllAnchors+0x76d>
            
            tmpbuf[tmp_count] = (data_chunk*)malloc(sizeof(data_chunk));
  409c8d:	8b 9d 60 c6 fe ff    	mov    -0x139a0(%rbp),%ebx
  409c93:	bf 18 00 00 00       	mov    $0x18,%edi
  409c98:	e8 b3 d0 ff ff       	callq  406d50 <malloc@plt>
  409c9d:	48 89 c2             	mov    %rax,%rdx
  409ca0:	48 63 c3             	movslq %ebx,%rax
  409ca3:	48 89 94 c5 c0 c6 fe 	mov    %rdx,-0x13940(%rbp,%rax,8)
  409caa:	ff 
            if(tmpbuf[tmp_count] == NULL) {
  409cab:	8b 85 60 c6 fe ff    	mov    -0x139a0(%rbp),%eax
  409cb1:	48 98                	cltq   
  409cb3:	48 8b 84 c5 c0 c6 fe 	mov    -0x13940(%rbp,%rax,8),%rax
  409cba:	ff 
  409cbb:	48 85 c0             	test   %rax,%rax
  409cbe:	75 28                	jne    409ce8 <FindAllAnchors+0x58f>
              EXIT_TRACE("Memory allocation failed.\n");
  409cc0:	48 8b 05 b9 ec 24 00 	mov    0x24ecb9(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  409cc7:	ba e1 84 43 00       	mov    $0x4384e1,%edx
  409ccc:	be 90 82 43 00       	mov    $0x438290,%esi
  409cd1:	48 89 c7             	mov    %rax,%rdi
  409cd4:	b8 00 00 00 00       	mov    $0x0,%eax
  409cd9:	e8 b2 d2 ff ff       	callq  406f90 <fprintf@plt>
  409cde:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  409ce3:	e8 38 d0 ff ff       	callq  406d20 <exit@plt>
            }

            tmpbuf[tmp_count]->start = (u_char *)malloc(item.start + item.len - anchor + 1);
  409ce8:	8b 85 60 c6 fe ff    	mov    -0x139a0(%rbp),%eax
  409cee:	48 98                	cltq   
  409cf0:	48 8b 9c c5 c0 c6 fe 	mov    -0x13940(%rbp,%rax,8),%rbx
  409cf7:	ff 
  409cf8:	48 8b 95 a0 c6 fe ff 	mov    -0x13960(%rbp),%rdx
  409cff:	48 8b 85 a8 c6 fe ff 	mov    -0x13958(%rbp),%rax
  409d06:	48 01 d0             	add    %rdx,%rax
  409d09:	48 89 c2             	mov    %rax,%rdx
  409d0c:	48 8b 85 80 c6 fe ff 	mov    -0x13980(%rbp),%rax
  409d13:	48 29 c2             	sub    %rax,%rdx
  409d16:	48 89 d0             	mov    %rdx,%rax
  409d19:	48 83 c0 01          	add    $0x1,%rax
  409d1d:	48 89 c7             	mov    %rax,%rdi
  409d20:	e8 2b d0 ff ff       	callq  406d50 <malloc@plt>
  409d25:	48 89 03             	mov    %rax,(%rbx)
			
            if(tmpbuf[tmp_count] == NULL) {
  409d28:	8b 85 60 c6 fe ff    	mov    -0x139a0(%rbp),%eax
  409d2e:	48 98                	cltq   
  409d30:	48 8b 84 c5 c0 c6 fe 	mov    -0x13940(%rbp,%rax,8),%rax
  409d37:	ff 
  409d38:	48 85 c0             	test   %rax,%rax
  409d3b:	75 28                	jne    409d65 <FindAllAnchors+0x60c>
              EXIT_TRACE("Memory allocation failed.\n");
  409d3d:	48 8b 05 3c ec 24 00 	mov    0x24ec3c(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  409d44:	ba e1 84 43 00       	mov    $0x4384e1,%edx
  409d49:	be 90 82 43 00       	mov    $0x438290,%esi
  409d4e:	48 89 c7             	mov    %rax,%rdi
  409d51:	b8 00 00 00 00       	mov    $0x0,%eax
  409d56:	e8 35 d2 ff ff       	callq  406f90 <fprintf@plt>
  409d5b:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  409d60:	e8 bb cf ff ff       	callq  406d20 <exit@plt>
            }
            tmpbuf[tmp_count]->len = item.start + item.len -anchor;
  409d65:	8b 85 60 c6 fe ff    	mov    -0x139a0(%rbp),%eax
  409d6b:	48 98                	cltq   
  409d6d:	48 8b 84 c5 c0 c6 fe 	mov    -0x13940(%rbp,%rax,8),%rax
  409d74:	ff 
  409d75:	48 8b 8d a0 c6 fe ff 	mov    -0x13960(%rbp),%rcx
  409d7c:	48 8b 95 a8 c6 fe ff 	mov    -0x13958(%rbp),%rdx
  409d83:	48 01 ca             	add    %rcx,%rdx
  409d86:	48 89 d1             	mov    %rdx,%rcx
  409d89:	48 8b 95 80 c6 fe ff 	mov    -0x13980(%rbp),%rdx
  409d90:	48 29 d1             	sub    %rdx,%rcx
  409d93:	48 89 ca             	mov    %rcx,%rdx
  409d96:	48 89 50 08          	mov    %rdx,0x8(%rax)
            tmpbuf[tmp_count]->cid = chcount;
  409d9a:	8b 85 60 c6 fe ff    	mov    -0x139a0(%rbp),%eax
  409da0:	48 98                	cltq   
  409da2:	48 8b 84 c5 c0 c6 fe 	mov    -0x13940(%rbp,%rax,8),%rax
  409da9:	ff 
  409daa:	8b 95 68 c6 fe ff    	mov    -0x13998(%rbp),%edx
  409db0:	89 50 14             	mov    %edx,0x14(%rax)
            tmpbuf[tmp_count]->anchorid = item.anchorid;
  409db3:	8b 85 60 c6 fe ff    	mov    -0x139a0(%rbp),%eax
  409db9:	48 98                	cltq   
  409dbb:	48 8b 84 c5 c0 c6 fe 	mov    -0x13940(%rbp,%rax,8),%rax
  409dc2:	ff 
  409dc3:	8b 95 b0 c6 fe ff    	mov    -0x13950(%rbp),%edx
  409dc9:	89 50 10             	mov    %edx,0x10(%rax)
            chcount ++;
  409dcc:	83 85 68 c6 fe ff 01 	addl   $0x1,-0x13998(%rbp)
            chunks_per_anchor[item.anchorid] = chcount;
  409dd3:	8b 95 b0 c6 fe ff    	mov    -0x13950(%rbp),%edx
  409dd9:	8b 85 68 c6 fe ff    	mov    -0x13998(%rbp),%eax
  409ddf:	89 d2                	mov    %edx,%edx
  409de1:	89 04 95 80 aa e5 01 	mov    %eax,0x1e5aa80(,%rdx,4)
            memcpy(tmpbuf[tmp_count]->start, anchor, item.start + item.len -anchor);
  409de8:	48 8b 95 a0 c6 fe ff 	mov    -0x13960(%rbp),%rdx
  409def:	48 8b 85 a8 c6 fe ff 	mov    -0x13958(%rbp),%rax
  409df6:	48 01 d0             	add    %rdx,%rax
  409df9:	48 89 c2             	mov    %rax,%rdx
  409dfc:	48 8b 85 80 c6 fe ff 	mov    -0x13980(%rbp),%rax
  409e03:	48 29 c2             	sub    %rax,%rdx
  409e06:	48 89 d0             	mov    %rdx,%rax
  409e09:	48 89 c2             	mov    %rax,%rdx
  409e0c:	8b 85 60 c6 fe ff    	mov    -0x139a0(%rbp),%eax
  409e12:	48 98                	cltq   
  409e14:	48 8b 84 c5 c0 c6 fe 	mov    -0x13940(%rbp,%rax,8),%rax
  409e1b:	ff 
  409e1c:	48 8b 00             	mov    (%rax),%rax
  409e1f:	48 8b 8d 80 c6 fe ff 	mov    -0x13980(%rbp),%rcx
  409e26:	48 89 ce             	mov    %rcx,%rsi
  409e29:	48 89 c7             	mov    %rax,%rdi
  409e2c:	e8 bf d1 ff ff       	callq  406ff0 <memcpy@plt>
            tmpbuf[tmp_count]->start[item.start + item.len -anchor] = 0;
  409e31:	8b 85 60 c6 fe ff    	mov    -0x139a0(%rbp),%eax
  409e37:	48 98                	cltq   
  409e39:	48 8b 84 c5 c0 c6 fe 	mov    -0x13940(%rbp,%rax,8),%rax
  409e40:	ff 
  409e41:	48 8b 00             	mov    (%rax),%rax
  409e44:	48 8b 8d a0 c6 fe ff 	mov    -0x13960(%rbp),%rcx
  409e4b:	48 8b 95 a8 c6 fe ff 	mov    -0x13958(%rbp),%rdx
  409e52:	48 01 ca             	add    %rcx,%rdx
  409e55:	48 89 d1             	mov    %rdx,%rcx
  409e58:	48 8b 95 80 c6 fe ff 	mov    -0x13980(%rbp),%rdx
  409e5f:	48 29 d1             	sub    %rdx,%rcx
  409e62:	48 89 ca             	mov    %rcx,%rdx
  409e65:	48 01 d0             	add    %rdx,%rax
  409e68:	c6 00 00             	movb   $0x0,(%rax)
            tmp_count ++;
  409e6b:	8b 85 60 c6 fe ff    	mov    -0x139a0(%rbp),%eax
  409e71:	83 c0 01             	add    $0x1,%eax
  409e74:	89 85 60 c6 fe ff    	mov    %eax,-0x139a0(%rbp)
            
            if (tmp_count >= CHUNK_ANCHOR_PER_INSERT) {
  409e7a:	8b 85 60 c6 fe ff    	mov    -0x139a0(%rbp),%eax
  409e80:	83 f8 13             	cmp    $0x13,%eax
  409e83:	7e 41                	jle    409ec6 <FindAllAnchors+0x76d>
              enqueue(&chunk_que[qid], &tmp_count, (void **)tmpbuf);
  409e85:	48 8b 0d 04 0c e5 01 	mov    0x1e50c04(%rip),%rcx        # 225aa90 <chunk_que>
  409e8c:	8b 85 70 c6 fe ff    	mov    -0x13990(%rbp),%eax
  409e92:	48 63 d0             	movslq %eax,%rdx
  409e95:	48 89 d0             	mov    %rdx,%rax
  409e98:	48 c1 e0 02          	shl    $0x2,%rax
  409e9c:	48 01 d0             	add    %rdx,%rax
  409e9f:	48 c1 e0 02          	shl    $0x2,%rax
  409ea3:	48 01 d0             	add    %rdx,%rax
  409ea6:	48 c1 e0 03          	shl    $0x3,%rax
  409eaa:	48 01 c1             	add    %rax,%rcx
  409ead:	48 8d 95 c0 c6 fe ff 	lea    -0x13940(%rbp),%rdx
  409eb4:	48 8d 85 60 c6 fe ff 	lea    -0x139a0(%rbp),%rax
  409ebb:	48 89 c6             	mov    %rax,%rsi
  409ebe:	48 89 cf             	mov    %rcx,%rdi
  409ec1:	e8 26 32 00 00       	callq  40d0ec <enqueue>
            }
          }

          MEM_FREE(item.start);
  409ec6:	48 8b 85 a0 c6 fe ff 	mov    -0x13960(%rbp),%rax
  409ecd:	48 85 c0             	test   %rax,%rax
  409ed0:	74 1a                	je     409eec <FindAllAnchors+0x793>
  409ed2:	48 8b 85 a0 c6 fe ff 	mov    -0x13960(%rbp),%rax
  409ed9:	48 89 c7             	mov    %rax,%rdi
  409edc:	e8 bf ce ff ff       	callq  406da0 <free@plt>
  409ee1:	48 c7 85 a0 c6 fe ff 	movq   $0x0,-0x13960(%rbp)
  409ee8:	00 00 00 00 
        }
    }  
  409eec:	e9 4e f9 ff ff       	jmpq   40983f <FindAllAnchors+0xe6>

    if (tmp_count > 0) {
      enqueue(&chunk_que[qid], &tmp_count, (void **)tmpbuf);
  409ef1:	48 8b 0d 98 0b e5 01 	mov    0x1e50b98(%rip),%rcx        # 225aa90 <chunk_que>
  409ef8:	8b 85 70 c6 fe ff    	mov    -0x13990(%rbp),%eax
  409efe:	48 63 d0             	movslq %eax,%rdx
  409f01:	48 89 d0             	mov    %rdx,%rax
  409f04:	48 c1 e0 02          	shl    $0x2,%rax
  409f08:	48 01 d0             	add    %rdx,%rax
  409f0b:	48 c1 e0 02          	shl    $0x2,%rax
  409f0f:	48 01 d0             	add    %rdx,%rax
  409f12:	48 c1 e0 03          	shl    $0x3,%rax
  409f16:	48 01 c1             	add    %rax,%rcx
  409f19:	48 8d 95 c0 c6 fe ff 	lea    -0x13940(%rbp),%rdx
  409f20:	48 8d 85 60 c6 fe ff 	lea    -0x139a0(%rbp),%rax
  409f27:	48 89 c6             	mov    %rax,%rsi
  409f2a:	48 89 cf             	mov    %rcx,%rdi
  409f2d:	e8 ba 31 00 00       	callq  40d0ec <enqueue>
  for (i = 0; i < CHUNK_ANCHOR_PER_INSERT; i ++) {
    MEM_FREE(tmpbuf[i]);
    }*/

    //count the end thread
    queue_signal_terminate(&chunk_que[qid]);
  409f32:	48 8b 0d 57 0b e5 01 	mov    0x1e50b57(%rip),%rcx        # 225aa90 <chunk_que>
  409f39:	8b 85 70 c6 fe ff    	mov    -0x13990(%rbp),%eax
  409f3f:	48 63 d0             	movslq %eax,%rdx
  409f42:	48 89 d0             	mov    %rdx,%rax
  409f45:	48 c1 e0 02          	shl    $0x2,%rax
  409f49:	48 01 d0             	add    %rdx,%rax
  409f4c:	48 c1 e0 02          	shl    $0x2,%rax
  409f50:	48 01 d0             	add    %rdx,%rax
  409f53:	48 c1 e0 03          	shl    $0x3,%rax
  409f57:	48 01 c8             	add    %rcx,%rax
  409f5a:	48 89 c7             	mov    %rax,%rdi
  409f5d:	e8 b1 2f 00 00       	callq  40cf13 <queue_signal_terminate>
  return NULL;
  409f62:	b8 00 00 00 00       	mov    $0x0,%eax
}
  409f67:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  409f6b:	64 48 33 1c 25 28 00 	xor    %fs:0x28,%rbx
  409f72:	00 00 
  409f74:	74 05                	je     409f7b <FindAllAnchors+0x822>
  409f76:	e8 45 cf ff ff       	callq  406ec0 <__stack_chk_fail@plt>
  409f7b:	48 81 c4 b8 39 01 00 	add    $0x139b8,%rsp
  409f82:	5b                   	pop    %rbx
  409f83:	5d                   	pop    %rbp
  409f84:	c3                   	retq   

0000000000409f85 <SerialIntegratedPipeline>:
/* 
 * Integrate all computationally intensive pipeline
 * stages to improve cache efficiency.
 */
void *
SerialIntegratedPipeline(void * targs) {
  409f85:	55                   	push   %rbp
  409f86:	48 89 e5             	mov    %rsp,%rbp
  409f89:	48 81 ec c0 39 01 00 	sub    $0x139c0,%rsp
  409f90:	48 89 bd 48 c6 fe ff 	mov    %rdi,-0x139b8(%rbp)
  409f97:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  409f9e:	00 00 
  409fa0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  409fa4:	31 c0                	xor    %eax,%eax
  struct thread_args *args = (struct thread_args *)targs;
  409fa6:	48 8b 85 48 c6 fe ff 	mov    -0x139b8(%rbp),%rax
  409fad:	48 89 85 88 c6 fe ff 	mov    %rax,-0x13978(%rbp)
  const int qid = args->tid / MAX_THREADS_PER_QUEUE;
  409fb4:	48 8b 85 88 c6 fe ff 	mov    -0x13978(%rbp),%rax
  409fbb:	8b 00                	mov    (%rax),%eax
  409fbd:	8d 50 03             	lea    0x3(%rax),%edx
  409fc0:	85 c0                	test   %eax,%eax
  409fc2:	0f 48 c2             	cmovs  %edx,%eax
  409fc5:	c1 f8 02             	sar    $0x2,%eax
  409fc8:	89 85 70 c6 fe ff    	mov    %eax,-0x13990(%rbp)
  data_chunk * fetchbuf[MAX_PER_FETCH];
  int fetch_count = 0;
  409fce:	c7 85 5c c6 fe ff 00 	movl   $0x0,-0x139a4(%rbp)
  409fd5:	00 00 00 
  int fetch_start = 0;
  409fd8:	c7 85 64 c6 fe ff 00 	movl   $0x0,-0x1399c(%rbp)
  409fdf:	00 00 00 

  u32int * rabintab = malloc(256*sizeof rabintab[0]);
  409fe2:	bf 00 04 00 00       	mov    $0x400,%edi
  409fe7:	e8 64 cd ff ff       	callq  406d50 <malloc@plt>
  409fec:	48 89 85 90 c6 fe ff 	mov    %rax,-0x13970(%rbp)
  u32int * rabinwintab = malloc(256*sizeof rabintab[0]);
  409ff3:	bf 00 04 00 00       	mov    $0x400,%edi
  409ff8:	e8 53 cd ff ff       	callq  406d50 <malloc@plt>
  409ffd:	48 89 85 98 c6 fe ff 	mov    %rax,-0x13968(%rbp)
  if(rabintab == NULL || rabinwintab == NULL) {
  40a004:	48 83 bd 90 c6 fe ff 	cmpq   $0x0,-0x13970(%rbp)
  40a00b:	00 
  40a00c:	74 0a                	je     40a018 <SerialIntegratedPipeline+0x93>
  40a00e:	48 83 bd 98 c6 fe ff 	cmpq   $0x0,-0x13968(%rbp)
  40a015:	00 
  40a016:	75 28                	jne    40a040 <SerialIntegratedPipeline+0xbb>
    EXIT_TRACE("Memory allocation failed.\n");
  40a018:	48 8b 05 61 e9 24 00 	mov    0x24e961(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  40a01f:	ba f0 84 43 00       	mov    $0x4384f0,%edx
  40a024:	be 90 82 43 00       	mov    $0x438290,%esi
  40a029:	48 89 c7             	mov    %rax,%rdi
  40a02c:	b8 00 00 00 00       	mov    $0x0,%eax
  40a031:	e8 5a cf ff ff       	callq  406f90 <fprintf@plt>
  40a036:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  40a03b:	e8 e0 cc ff ff       	callq  406d20 <exit@plt>
  }

  data_chunk * tmpbuf;
  int tmpsend_count = 0;
  40a040:	c7 85 60 c6 fe ff 00 	movl   $0x0,-0x139a0(%rbp)
  40a047:	00 00 00 
  send_buf_item * tmpsendbuf[ITEM_PER_INSERT];

    while (1) {
      data_chunk item;
      //if no item for process, get a group of items from the pipeline
      if (fetch_count == fetch_start) {
  40a04a:	8b 85 5c c6 fe ff    	mov    -0x139a4(%rbp),%eax
  40a050:	3b 85 64 c6 fe ff    	cmp    -0x1399c(%rbp),%eax
  40a056:	75 6e                	jne    40a0c6 <SerialIntegratedPipeline+0x141>
        int r = dequeue(&anchor_que[qid], &fetch_count, (void **)fetchbuf); 
  40a058:	48 8b 0d e1 09 a5 01 	mov    0x1a509e1(%rip),%rcx        # 1e5aa40 <anchor_que>
  40a05f:	8b 85 70 c6 fe ff    	mov    -0x13990(%rbp),%eax
  40a065:	48 63 d0             	movslq %eax,%rdx
  40a068:	48 89 d0             	mov    %rdx,%rax
  40a06b:	48 c1 e0 02          	shl    $0x2,%rax
  40a06f:	48 01 d0             	add    %rdx,%rax
  40a072:	48 c1 e0 02          	shl    $0x2,%rax
  40a076:	48 01 d0             	add    %rdx,%rax
  40a079:	48 c1 e0 03          	shl    $0x3,%rax
  40a07d:	48 01 c1             	add    %rax,%rcx
  40a080:	48 8d 95 70 c7 fe ff 	lea    -0x13890(%rbp),%rdx
  40a087:	48 8d 85 5c c6 fe ff 	lea    -0x139a4(%rbp),%rax
  40a08e:	48 89 c6             	mov    %rax,%rsi
  40a091:	48 89 cf             	mov    %rcx,%rdi
  40a094:	e8 c9 2e 00 00       	callq  40cf62 <dequeue>
  40a099:	89 85 74 c6 fe ff    	mov    %eax,-0x1398c(%rbp)
        if (r < 0) break;
  40a09f:	83 bd 74 c6 fe ff 00 	cmpl   $0x0,-0x1398c(%rbp)
  40a0a6:	79 14                	jns    40a0bc <SerialIntegratedPipeline+0x137>
  40a0a8:	90                   	nop

          MEM_FREE(item.start);
        }
    }  

    if (tmpsend_count > 0) {
  40a0a9:	8b 85 60 c6 fe ff    	mov    -0x139a0(%rbp),%eax
  40a0af:	85 c0                	test   %eax,%eax
  40a0b1:	0f 8e 95 06 00 00    	jle    40a74c <SerialIntegratedPipeline+0x7c7>
  40a0b7:	e9 4f 06 00 00       	jmpq   40a70b <SerialIntegratedPipeline+0x786>
      //if no item for process, get a group of items from the pipeline
      if (fetch_count == fetch_start) {
        int r = dequeue(&anchor_que[qid], &fetch_count, (void **)fetchbuf); 
        if (r < 0) break;
        
        fetch_start = 0;
  40a0bc:	c7 85 64 c6 fe ff 00 	movl   $0x0,-0x1399c(%rbp)
  40a0c3:	00 00 00 
      }
          
        if (fetch_start < fetch_count) {
  40a0c6:	8b 85 5c c6 fe ff    	mov    -0x139a4(%rbp),%eax
  40a0cc:	39 85 64 c6 fe ff    	cmp    %eax,-0x1399c(%rbp)
  40a0d2:	0f 8d 2e 06 00 00    	jge    40a706 <SerialIntegratedPipeline+0x781>
          //get one item
          item.start = fetchbuf[fetch_start]->start;
  40a0d8:	8b 85 64 c6 fe ff    	mov    -0x1399c(%rbp),%eax
  40a0de:	48 98                	cltq   
  40a0e0:	48 8b 84 c5 70 c7 fe 	mov    -0x13890(%rbp,%rax,8),%rax
  40a0e7:	ff 
  40a0e8:	48 8b 00             	mov    (%rax),%rax
  40a0eb:	48 89 85 b0 c6 fe ff 	mov    %rax,-0x13950(%rbp)
          item.len = fetchbuf[fetch_start]->len;
  40a0f2:	8b 85 64 c6 fe ff    	mov    -0x1399c(%rbp),%eax
  40a0f8:	48 98                	cltq   
  40a0fa:	48 8b 84 c5 70 c7 fe 	mov    -0x13890(%rbp,%rax,8),%rax
  40a101:	ff 
  40a102:	48 8b 40 08          	mov    0x8(%rax),%rax
  40a106:	48 89 85 b8 c6 fe ff 	mov    %rax,-0x13948(%rbp)
          item.anchorid = fetchbuf[fetch_start]->anchorid;
  40a10d:	8b 85 64 c6 fe ff    	mov    -0x1399c(%rbp),%eax
  40a113:	48 98                	cltq   
  40a115:	48 8b 84 c5 70 c7 fe 	mov    -0x13890(%rbp,%rax,8),%rax
  40a11c:	ff 
  40a11d:	8b 40 10             	mov    0x10(%rax),%eax
  40a120:	89 85 c0 c6 fe ff    	mov    %eax,-0x13940(%rbp)
          fetch_start = (fetch_start + 1)%MAX_PER_FETCH;
  40a126:	8b 85 64 c6 fe ff    	mov    -0x1399c(%rbp),%eax
  40a12c:	8d 48 01             	lea    0x1(%rax),%ecx
  40a12f:	ba ad 8b db 68       	mov    $0x68db8bad,%edx
  40a134:	89 c8                	mov    %ecx,%eax
  40a136:	f7 ea                	imul   %edx
  40a138:	c1 fa 0c             	sar    $0xc,%edx
  40a13b:	89 c8                	mov    %ecx,%eax
  40a13d:	c1 f8 1f             	sar    $0x1f,%eax
  40a140:	29 c2                	sub    %eax,%edx
  40a142:	89 d0                	mov    %edx,%eax
  40a144:	89 85 64 c6 fe ff    	mov    %eax,-0x1399c(%rbp)
  40a14a:	8b 85 64 c6 fe ff    	mov    -0x1399c(%rbp),%eax
  40a150:	69 c0 10 27 00 00    	imul   $0x2710,%eax,%eax
  40a156:	29 c1                	sub    %eax,%ecx
  40a158:	89 c8                	mov    %ecx,%eax
  40a15a:	89 85 64 c6 fe ff    	mov    %eax,-0x1399c(%rbp)
    
          rabininit(rf_win, rabintab, rabinwintab);
  40a160:	8b 05 22 09 e5 01    	mov    0x1e50922(%rip),%eax        # 225aa88 <rf_win>
  40a166:	48 8b 95 98 c6 fe ff 	mov    -0x13968(%rbp),%rdx
  40a16d:	48 8b 8d 90 c6 fe ff 	mov    -0x13970(%rbp),%rcx
  40a174:	48 89 ce             	mov    %rcx,%rsi
  40a177:	89 c7                	mov    %eax,%edi
  40a179:	e8 7d 32 00 00       	callq  40d3fb <rabininit>
          
          u_char * p;
          
          u_int32 chcount = 0;
  40a17e:	c7 85 68 c6 fe ff 00 	movl   $0x0,-0x13998(%rbp)
  40a185:	00 00 00 
          u_char * anchor = item.start;
  40a188:	48 8b 85 b0 c6 fe ff 	mov    -0x13950(%rbp),%rax
  40a18f:	48 89 85 80 c6 fe ff 	mov    %rax,-0x13980(%rbp)
          p = item.start;
  40a196:	48 8b 85 b0 c6 fe ff 	mov    -0x13950(%rbp),%rax
  40a19d:	48 89 85 78 c6 fe ff 	mov    %rax,-0x13988(%rbp)
          int n = MAX_RABIN_CHUNK_SIZE;
  40a1a4:	c7 85 6c c6 fe ff 00 	movl   $0xf000,-0x13994(%rbp)
  40a1ab:	f0 00 00 
          while(p < item.start+item.len) {
  40a1ae:	e9 a3 02 00 00       	jmpq   40a456 <SerialIntegratedPipeline+0x4d1>
            if (item.len + item.start - p < n) {
  40a1b3:	48 8b 95 b0 c6 fe ff 	mov    -0x13950(%rbp),%rdx
  40a1ba:	48 8b 85 b8 c6 fe ff 	mov    -0x13948(%rbp),%rax
  40a1c1:	48 01 d0             	add    %rdx,%rax
  40a1c4:	48 89 c2             	mov    %rax,%rdx
  40a1c7:	48 8b 85 78 c6 fe ff 	mov    -0x13988(%rbp),%rax
  40a1ce:	48 29 c2             	sub    %rax,%rdx
  40a1d1:	8b 85 6c c6 fe ff    	mov    -0x13994(%rbp),%eax
  40a1d7:	48 98                	cltq   
  40a1d9:	48 39 c2             	cmp    %rax,%rdx
  40a1dc:	7d 27                	jge    40a205 <SerialIntegratedPipeline+0x280>
              n = item.len +item.start -p;
  40a1de:	48 8b 95 b0 c6 fe ff 	mov    -0x13950(%rbp),%rdx
  40a1e5:	48 8b 85 b8 c6 fe ff 	mov    -0x13948(%rbp),%rax
  40a1ec:	48 01 d0             	add    %rdx,%rax
  40a1ef:	48 89 c2             	mov    %rax,%rdx
  40a1f2:	48 8b 85 78 c6 fe ff 	mov    -0x13988(%rbp),%rax
  40a1f9:	48 29 c2             	sub    %rax,%rdx
  40a1fc:	48 89 d0             	mov    %rdx,%rax
  40a1ff:	89 85 6c c6 fe ff    	mov    %eax,-0x13994(%rbp)
            }
            //find next anchor
            p = p + rabinseg(p, n, rf_win, rabintab, rabinwintab);
  40a205:	8b 15 7d 08 e5 01    	mov    0x1e5087d(%rip),%edx        # 225aa88 <rf_win>
  40a20b:	48 8b bd 98 c6 fe ff 	mov    -0x13968(%rbp),%rdi
  40a212:	48 8b 8d 90 c6 fe ff 	mov    -0x13970(%rbp),%rcx
  40a219:	8b b5 6c c6 fe ff    	mov    -0x13994(%rbp),%esi
  40a21f:	48 8b 85 78 c6 fe ff 	mov    -0x13988(%rbp),%rax
  40a226:	49 89 f8             	mov    %rdi,%r8
  40a229:	48 89 c7             	mov    %rax,%rdi
  40a22c:	e8 0e 32 00 00       	callq  40d43f <rabinseg>
  40a231:	48 98                	cltq   
  40a233:	48 01 85 78 c6 fe ff 	add    %rax,-0x13988(%rbp)
          
            //insert into anchor queue: (anchor, p-src+1)
            tmpbuf = (data_chunk *)malloc(sizeof(data_chunk));
  40a23a:	bf 18 00 00 00       	mov    $0x18,%edi
  40a23f:	e8 0c cb ff ff       	callq  406d50 <malloc@plt>
  40a244:	48 89 85 a0 c6 fe ff 	mov    %rax,-0x13960(%rbp)
            if(tmpbuf == NULL) {
  40a24b:	48 83 bd a0 c6 fe ff 	cmpq   $0x0,-0x13960(%rbp)
  40a252:	00 
  40a253:	75 28                	jne    40a27d <SerialIntegratedPipeline+0x2f8>
              EXIT_TRACE("Memory allocation failed.\n");
  40a255:	48 8b 05 24 e7 24 00 	mov    0x24e724(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  40a25c:	ba f0 84 43 00       	mov    $0x4384f0,%edx
  40a261:	be 90 82 43 00       	mov    $0x438290,%esi
  40a266:	48 89 c7             	mov    %rax,%rdi
  40a269:	b8 00 00 00 00       	mov    $0x0,%eax
  40a26e:	e8 1d cd ff ff       	callq  406f90 <fprintf@plt>
  40a273:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  40a278:	e8 a3 ca ff ff       	callq  406d20 <exit@plt>
            }

            tmpbuf->start = (u_char *)malloc(p - anchor + 1);
  40a27d:	48 8b 95 78 c6 fe ff 	mov    -0x13988(%rbp),%rdx
  40a284:	48 8b 85 80 c6 fe ff 	mov    -0x13980(%rbp),%rax
  40a28b:	48 29 c2             	sub    %rax,%rdx
  40a28e:	48 89 d0             	mov    %rdx,%rax
  40a291:	48 83 c0 01          	add    $0x1,%rax
  40a295:	48 89 c7             	mov    %rax,%rdi
  40a298:	e8 b3 ca ff ff       	callq  406d50 <malloc@plt>
  40a29d:	48 89 c2             	mov    %rax,%rdx
  40a2a0:	48 8b 85 a0 c6 fe ff 	mov    -0x13960(%rbp),%rax
  40a2a7:	48 89 10             	mov    %rdx,(%rax)
            if(tmpbuf->start == NULL) {
  40a2aa:	48 8b 85 a0 c6 fe ff 	mov    -0x13960(%rbp),%rax
  40a2b1:	48 8b 00             	mov    (%rax),%rax
  40a2b4:	48 85 c0             	test   %rax,%rax
  40a2b7:	75 28                	jne    40a2e1 <SerialIntegratedPipeline+0x35c>
              EXIT_TRACE("Memory allocation failed.\n");
  40a2b9:	48 8b 05 c0 e6 24 00 	mov    0x24e6c0(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  40a2c0:	ba f0 84 43 00       	mov    $0x4384f0,%edx
  40a2c5:	be 90 82 43 00       	mov    $0x438290,%esi
  40a2ca:	48 89 c7             	mov    %rax,%rdi
  40a2cd:	b8 00 00 00 00       	mov    $0x0,%eax
  40a2d2:	e8 b9 cc ff ff       	callq  406f90 <fprintf@plt>
  40a2d7:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  40a2dc:	e8 3f ca ff ff       	callq  406d20 <exit@plt>
            }
            tmpbuf->len = p-anchor;
  40a2e1:	48 8b 95 78 c6 fe ff 	mov    -0x13988(%rbp),%rdx
  40a2e8:	48 8b 85 80 c6 fe ff 	mov    -0x13980(%rbp),%rax
  40a2ef:	48 29 c2             	sub    %rax,%rdx
  40a2f2:	48 89 d0             	mov    %rdx,%rax
  40a2f5:	48 89 c2             	mov    %rax,%rdx
  40a2f8:	48 8b 85 a0 c6 fe ff 	mov    -0x13960(%rbp),%rax
  40a2ff:	48 89 50 08          	mov    %rdx,0x8(%rax)
            tmpbuf->anchorid = item.anchorid;
  40a303:	8b 95 c0 c6 fe ff    	mov    -0x13940(%rbp),%edx
  40a309:	48 8b 85 a0 c6 fe ff 	mov    -0x13960(%rbp),%rax
  40a310:	89 50 10             	mov    %edx,0x10(%rax)
            tmpbuf->cid = chcount;
  40a313:	48 8b 85 a0 c6 fe ff 	mov    -0x13960(%rbp),%rax
  40a31a:	8b 95 68 c6 fe ff    	mov    -0x13998(%rbp),%edx
  40a320:	89 50 14             	mov    %edx,0x14(%rax)
              
            chcount++;              
  40a323:	83 85 68 c6 fe ff 01 	addl   $0x1,-0x13998(%rbp)
            chunks_per_anchor[item.anchorid] = chcount;
  40a32a:	8b 95 c0 c6 fe ff    	mov    -0x13940(%rbp),%edx
  40a330:	8b 85 68 c6 fe ff    	mov    -0x13998(%rbp),%eax
  40a336:	89 d2                	mov    %edx,%edx
  40a338:	89 04 95 80 aa e5 01 	mov    %eax,0x1e5aa80(,%rdx,4)
            memcpy(tmpbuf->start, anchor, p-anchor);
  40a33f:	48 8b 95 78 c6 fe ff 	mov    -0x13988(%rbp),%rdx
  40a346:	48 8b 85 80 c6 fe ff 	mov    -0x13980(%rbp),%rax
  40a34d:	48 29 c2             	sub    %rax,%rdx
  40a350:	48 89 d0             	mov    %rdx,%rax
  40a353:	48 89 c2             	mov    %rax,%rdx
  40a356:	48 8b 85 a0 c6 fe ff 	mov    -0x13960(%rbp),%rax
  40a35d:	48 8b 00             	mov    (%rax),%rax
  40a360:	48 8b 8d 80 c6 fe ff 	mov    -0x13980(%rbp),%rcx
  40a367:	48 89 ce             	mov    %rcx,%rsi
  40a36a:	48 89 c7             	mov    %rax,%rdi
  40a36d:	e8 7e cc ff ff       	callq  406ff0 <memcpy@plt>
            tmpbuf->start[p-anchor] = 0;
  40a372:	48 8b 85 a0 c6 fe ff 	mov    -0x13960(%rbp),%rax
  40a379:	48 8b 00             	mov    (%rax),%rax
  40a37c:	48 8b 8d 78 c6 fe ff 	mov    -0x13988(%rbp),%rcx
  40a383:	48 8b 95 80 c6 fe ff 	mov    -0x13980(%rbp),%rdx
  40a38a:	48 29 d1             	sub    %rdx,%rcx
  40a38d:	48 89 ca             	mov    %rcx,%rdx
  40a390:	48 01 d0             	add    %rdx,%rax
  40a393:	c6 00 00             	movb   $0x0,(%rax)
              
            senditem = sub_ChunkProcess(*tmpbuf);
  40a396:	48 83 ec 08          	sub    $0x8,%rsp
  40a39a:	48 8b 85 a0 c6 fe ff 	mov    -0x13960(%rbp),%rax
  40a3a1:	ff 70 10             	pushq  0x10(%rax)
  40a3a4:	ff 70 08             	pushq  0x8(%rax)
  40a3a7:	ff 30                	pushq  (%rax)
  40a3a9:	e8 1b ec ff ff       	callq  408fc9 <sub_ChunkProcess>
  40a3ae:	48 83 c4 20          	add    $0x20,%rsp
  40a3b2:	48 89 85 a8 c6 fe ff 	mov    %rax,-0x13958(%rbp)

            if (senditem->type == TYPE_COMPRESS) {
  40a3b9:	48 8b 85 a8 c6 fe ff 	mov    -0x13958(%rbp),%rax
  40a3c0:	0f b6 00             	movzbl (%rax),%eax
  40a3c3:	3c 01                	cmp    $0x1,%al
  40a3c5:	75 0f                	jne    40a3d6 <SerialIntegratedPipeline+0x451>
              sub_Compress(senditem);
  40a3c7:	48 8b 85 a8 c6 fe ff 	mov    -0x13958(%rbp),%rax
  40a3ce:	48 89 c7             	mov    %rax,%rdi
  40a3d1:	e8 a3 e6 ff ff       	callq  408a79 <sub_Compress>
            } 

            tmpsendbuf[tmpsend_count] = senditem;
  40a3d6:	8b 85 60 c6 fe ff    	mov    -0x139a0(%rbp),%eax
  40a3dc:	48 98                	cltq   
  40a3de:	48 8b 95 a8 c6 fe ff 	mov    -0x13958(%rbp),%rdx
  40a3e5:	48 89 94 c5 d0 c6 fe 	mov    %rdx,-0x13930(%rbp,%rax,8)
  40a3ec:	ff 
            tmpsend_count ++;
  40a3ed:	8b 85 60 c6 fe ff    	mov    -0x139a0(%rbp),%eax
  40a3f3:	83 c0 01             	add    $0x1,%eax
  40a3f6:	89 85 60 c6 fe ff    	mov    %eax,-0x139a0(%rbp)
              
            if (tmpsend_count >= ITEM_PER_INSERT) {
  40a3fc:	8b 85 60 c6 fe ff    	mov    -0x139a0(%rbp),%eax
  40a402:	83 f8 13             	cmp    $0x13,%eax
  40a405:	7e 41                	jle    40a448 <SerialIntegratedPipeline+0x4c3>
              enqueue(&send_que[qid], &tmpsend_count, (void **)tmpsendbuf);
  40a407:	48 8b 0d 42 06 a5 01 	mov    0x1a50642(%rip),%rcx        # 1e5aa50 <send_que>
  40a40e:	8b 85 70 c6 fe ff    	mov    -0x13990(%rbp),%eax
  40a414:	48 63 d0             	movslq %eax,%rdx
  40a417:	48 89 d0             	mov    %rdx,%rax
  40a41a:	48 c1 e0 02          	shl    $0x2,%rax
  40a41e:	48 01 d0             	add    %rdx,%rax
  40a421:	48 c1 e0 02          	shl    $0x2,%rax
  40a425:	48 01 d0             	add    %rdx,%rax
  40a428:	48 c1 e0 03          	shl    $0x3,%rax
  40a42c:	48 01 c1             	add    %rax,%rcx
  40a42f:	48 8d 95 d0 c6 fe ff 	lea    -0x13930(%rbp),%rdx
  40a436:	48 8d 85 60 c6 fe ff 	lea    -0x139a0(%rbp),%rax
  40a43d:	48 89 c6             	mov    %rax,%rsi
  40a440:	48 89 cf             	mov    %rcx,%rdi
  40a443:	e8 a4 2c 00 00       	callq  40d0ec <enqueue>
            }

            anchor = p;
  40a448:	48 8b 85 78 c6 fe ff 	mov    -0x13988(%rbp),%rax
  40a44f:	48 89 85 80 c6 fe ff 	mov    %rax,-0x13980(%rbp)
          
          u_int32 chcount = 0;
          u_char * anchor = item.start;
          p = item.start;
          int n = MAX_RABIN_CHUNK_SIZE;
          while(p < item.start+item.len) {
  40a456:	48 8b 95 b0 c6 fe ff 	mov    -0x13950(%rbp),%rdx
  40a45d:	48 8b 85 b8 c6 fe ff 	mov    -0x13948(%rbp),%rax
  40a464:	48 01 d0             	add    %rdx,%rax
  40a467:	48 3b 85 78 c6 fe ff 	cmp    -0x13988(%rbp),%rax
  40a46e:	0f 87 3f fd ff ff    	ja     40a1b3 <SerialIntegratedPipeline+0x22e>

            anchor = p;
          } 

          //insert the remaining item to the anchor queue
          if (item.start + item.len - anchor > 0) {
  40a474:	48 8b 95 b0 c6 fe ff 	mov    -0x13950(%rbp),%rdx
  40a47b:	48 8b 85 b8 c6 fe ff 	mov    -0x13948(%rbp),%rax
  40a482:	48 01 d0             	add    %rdx,%rax
  40a485:	48 89 c2             	mov    %rax,%rdx
  40a488:	48 8b 85 80 c6 fe ff 	mov    -0x13980(%rbp),%rax
  40a48f:	48 29 c2             	sub    %rax,%rdx
  40a492:	48 89 d0             	mov    %rdx,%rax
  40a495:	48 85 c0             	test   %rax,%rax
  40a498:	0f 8e 42 02 00 00    	jle    40a6e0 <SerialIntegratedPipeline+0x75b>
            
            tmpbuf = (data_chunk*)malloc(sizeof(data_chunk));
  40a49e:	bf 18 00 00 00       	mov    $0x18,%edi
  40a4a3:	e8 a8 c8 ff ff       	callq  406d50 <malloc@plt>
  40a4a8:	48 89 85 a0 c6 fe ff 	mov    %rax,-0x13960(%rbp)
            if(tmpbuf == NULL) {
  40a4af:	48 83 bd a0 c6 fe ff 	cmpq   $0x0,-0x13960(%rbp)
  40a4b6:	00 
  40a4b7:	75 28                	jne    40a4e1 <SerialIntegratedPipeline+0x55c>
              EXIT_TRACE("Memory allocation failed.\n");
  40a4b9:	48 8b 05 c0 e4 24 00 	mov    0x24e4c0(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  40a4c0:	ba f0 84 43 00       	mov    $0x4384f0,%edx
  40a4c5:	be 90 82 43 00       	mov    $0x438290,%esi
  40a4ca:	48 89 c7             	mov    %rax,%rdi
  40a4cd:	b8 00 00 00 00       	mov    $0x0,%eax
  40a4d2:	e8 b9 ca ff ff       	callq  406f90 <fprintf@plt>
  40a4d7:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  40a4dc:	e8 3f c8 ff ff       	callq  406d20 <exit@plt>
            }

            tmpbuf->start = (u_char *)malloc(item.start + item.len - anchor + 1);
  40a4e1:	48 8b 95 b0 c6 fe ff 	mov    -0x13950(%rbp),%rdx
  40a4e8:	48 8b 85 b8 c6 fe ff 	mov    -0x13948(%rbp),%rax
  40a4ef:	48 01 d0             	add    %rdx,%rax
  40a4f2:	48 89 c2             	mov    %rax,%rdx
  40a4f5:	48 8b 85 80 c6 fe ff 	mov    -0x13980(%rbp),%rax
  40a4fc:	48 29 c2             	sub    %rax,%rdx
  40a4ff:	48 89 d0             	mov    %rdx,%rax
  40a502:	48 83 c0 01          	add    $0x1,%rax
  40a506:	48 89 c7             	mov    %rax,%rdi
  40a509:	e8 42 c8 ff ff       	callq  406d50 <malloc@plt>
  40a50e:	48 89 c2             	mov    %rax,%rdx
  40a511:	48 8b 85 a0 c6 fe ff 	mov    -0x13960(%rbp),%rax
  40a518:	48 89 10             	mov    %rdx,(%rax)
            if(tmpbuf->start == NULL) {
  40a51b:	48 8b 85 a0 c6 fe ff 	mov    -0x13960(%rbp),%rax
  40a522:	48 8b 00             	mov    (%rax),%rax
  40a525:	48 85 c0             	test   %rax,%rax
  40a528:	75 28                	jne    40a552 <SerialIntegratedPipeline+0x5cd>
              EXIT_TRACE("Memory allocation failed.\n");
  40a52a:	48 8b 05 4f e4 24 00 	mov    0x24e44f(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  40a531:	ba f0 84 43 00       	mov    $0x4384f0,%edx
  40a536:	be 90 82 43 00       	mov    $0x438290,%esi
  40a53b:	48 89 c7             	mov    %rax,%rdi
  40a53e:	b8 00 00 00 00       	mov    $0x0,%eax
  40a543:	e8 48 ca ff ff       	callq  406f90 <fprintf@plt>
  40a548:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  40a54d:	e8 ce c7 ff ff       	callq  406d20 <exit@plt>
            }
            tmpbuf->len = item.start + item.len -anchor;
  40a552:	48 8b 95 b0 c6 fe ff 	mov    -0x13950(%rbp),%rdx
  40a559:	48 8b 85 b8 c6 fe ff 	mov    -0x13948(%rbp),%rax
  40a560:	48 01 d0             	add    %rdx,%rax
  40a563:	48 89 c2             	mov    %rax,%rdx
  40a566:	48 8b 85 80 c6 fe ff 	mov    -0x13980(%rbp),%rax
  40a56d:	48 29 c2             	sub    %rax,%rdx
  40a570:	48 89 d0             	mov    %rdx,%rax
  40a573:	48 89 c2             	mov    %rax,%rdx
  40a576:	48 8b 85 a0 c6 fe ff 	mov    -0x13960(%rbp),%rax
  40a57d:	48 89 50 08          	mov    %rdx,0x8(%rax)
            tmpbuf->cid = chcount;
  40a581:	48 8b 85 a0 c6 fe ff 	mov    -0x13960(%rbp),%rax
  40a588:	8b 95 68 c6 fe ff    	mov    -0x13998(%rbp),%edx
  40a58e:	89 50 14             	mov    %edx,0x14(%rax)
            tmpbuf->anchorid = item.anchorid;
  40a591:	8b 95 c0 c6 fe ff    	mov    -0x13940(%rbp),%edx
  40a597:	48 8b 85 a0 c6 fe ff 	mov    -0x13960(%rbp),%rax
  40a59e:	89 50 10             	mov    %edx,0x10(%rax)
            chcount ++;
  40a5a1:	83 85 68 c6 fe ff 01 	addl   $0x1,-0x13998(%rbp)
            chunks_per_anchor[item.anchorid] = chcount;
  40a5a8:	8b 95 c0 c6 fe ff    	mov    -0x13940(%rbp),%edx
  40a5ae:	8b 85 68 c6 fe ff    	mov    -0x13998(%rbp),%eax
  40a5b4:	89 d2                	mov    %edx,%edx
  40a5b6:	89 04 95 80 aa e5 01 	mov    %eax,0x1e5aa80(,%rdx,4)
            memcpy(tmpbuf->start, anchor, item.start + item.len -anchor);
  40a5bd:	48 8b 95 b0 c6 fe ff 	mov    -0x13950(%rbp),%rdx
  40a5c4:	48 8b 85 b8 c6 fe ff 	mov    -0x13948(%rbp),%rax
  40a5cb:	48 01 d0             	add    %rdx,%rax
  40a5ce:	48 89 c2             	mov    %rax,%rdx
  40a5d1:	48 8b 85 80 c6 fe ff 	mov    -0x13980(%rbp),%rax
  40a5d8:	48 29 c2             	sub    %rax,%rdx
  40a5db:	48 89 d0             	mov    %rdx,%rax
  40a5de:	48 89 c2             	mov    %rax,%rdx
  40a5e1:	48 8b 85 a0 c6 fe ff 	mov    -0x13960(%rbp),%rax
  40a5e8:	48 8b 00             	mov    (%rax),%rax
  40a5eb:	48 8b 8d 80 c6 fe ff 	mov    -0x13980(%rbp),%rcx
  40a5f2:	48 89 ce             	mov    %rcx,%rsi
  40a5f5:	48 89 c7             	mov    %rax,%rdi
  40a5f8:	e8 f3 c9 ff ff       	callq  406ff0 <memcpy@plt>
            tmpbuf->start[item.start + item.len -anchor] = 0;
  40a5fd:	48 8b 85 a0 c6 fe ff 	mov    -0x13960(%rbp),%rax
  40a604:	48 8b 00             	mov    (%rax),%rax
  40a607:	48 8b 8d b0 c6 fe ff 	mov    -0x13950(%rbp),%rcx
  40a60e:	48 8b 95 b8 c6 fe ff 	mov    -0x13948(%rbp),%rdx
  40a615:	48 01 ca             	add    %rcx,%rdx
  40a618:	48 89 d1             	mov    %rdx,%rcx
  40a61b:	48 8b 95 80 c6 fe ff 	mov    -0x13980(%rbp),%rdx
  40a622:	48 29 d1             	sub    %rdx,%rcx
  40a625:	48 89 ca             	mov    %rcx,%rdx
  40a628:	48 01 d0             	add    %rdx,%rax
  40a62b:	c6 00 00             	movb   $0x0,(%rax)
            
  
            senditem = sub_ChunkProcess(*tmpbuf);
  40a62e:	48 83 ec 08          	sub    $0x8,%rsp
  40a632:	48 8b 85 a0 c6 fe ff 	mov    -0x13960(%rbp),%rax
  40a639:	ff 70 10             	pushq  0x10(%rax)
  40a63c:	ff 70 08             	pushq  0x8(%rax)
  40a63f:	ff 30                	pushq  (%rax)
  40a641:	e8 83 e9 ff ff       	callq  408fc9 <sub_ChunkProcess>
  40a646:	48 83 c4 20          	add    $0x20,%rsp
  40a64a:	48 89 85 a8 c6 fe ff 	mov    %rax,-0x13958(%rbp)
            
            if (senditem->type == TYPE_COMPRESS) {
  40a651:	48 8b 85 a8 c6 fe ff 	mov    -0x13958(%rbp),%rax
  40a658:	0f b6 00             	movzbl (%rax),%eax
  40a65b:	3c 01                	cmp    $0x1,%al
  40a65d:	75 0f                	jne    40a66e <SerialIntegratedPipeline+0x6e9>
              sub_Compress(senditem);
  40a65f:	48 8b 85 a8 c6 fe ff 	mov    -0x13958(%rbp),%rax
  40a666:	48 89 c7             	mov    %rax,%rdi
  40a669:	e8 0b e4 ff ff       	callq  408a79 <sub_Compress>
            } 
            
            tmpsendbuf[tmpsend_count] = senditem;
  40a66e:	8b 85 60 c6 fe ff    	mov    -0x139a0(%rbp),%eax
  40a674:	48 98                	cltq   
  40a676:	48 8b 95 a8 c6 fe ff 	mov    -0x13958(%rbp),%rdx
  40a67d:	48 89 94 c5 d0 c6 fe 	mov    %rdx,-0x13930(%rbp,%rax,8)
  40a684:	ff 
            tmpsend_count ++;
  40a685:	8b 85 60 c6 fe ff    	mov    -0x139a0(%rbp),%eax
  40a68b:	83 c0 01             	add    $0x1,%eax
  40a68e:	89 85 60 c6 fe ff    	mov    %eax,-0x139a0(%rbp)
            
            if (tmpsend_count >= ITEM_PER_INSERT) {
  40a694:	8b 85 60 c6 fe ff    	mov    -0x139a0(%rbp),%eax
  40a69a:	83 f8 13             	cmp    $0x13,%eax
  40a69d:	7e 41                	jle    40a6e0 <SerialIntegratedPipeline+0x75b>
              enqueue(&send_que[qid], &tmpsend_count, (void **)tmpsendbuf);
  40a69f:	48 8b 0d aa 03 a5 01 	mov    0x1a503aa(%rip),%rcx        # 1e5aa50 <send_que>
  40a6a6:	8b 85 70 c6 fe ff    	mov    -0x13990(%rbp),%eax
  40a6ac:	48 63 d0             	movslq %eax,%rdx
  40a6af:	48 89 d0             	mov    %rdx,%rax
  40a6b2:	48 c1 e0 02          	shl    $0x2,%rax
  40a6b6:	48 01 d0             	add    %rdx,%rax
  40a6b9:	48 c1 e0 02          	shl    $0x2,%rax
  40a6bd:	48 01 d0             	add    %rdx,%rax
  40a6c0:	48 c1 e0 03          	shl    $0x3,%rax
  40a6c4:	48 01 c1             	add    %rax,%rcx
  40a6c7:	48 8d 95 d0 c6 fe ff 	lea    -0x13930(%rbp),%rdx
  40a6ce:	48 8d 85 60 c6 fe ff 	lea    -0x139a0(%rbp),%rax
  40a6d5:	48 89 c6             	mov    %rax,%rsi
  40a6d8:	48 89 cf             	mov    %rcx,%rdi
  40a6db:	e8 0c 2a 00 00       	callq  40d0ec <enqueue>
            }
          }

          MEM_FREE(item.start);
  40a6e0:	48 8b 85 b0 c6 fe ff 	mov    -0x13950(%rbp),%rax
  40a6e7:	48 85 c0             	test   %rax,%rax
  40a6ea:	74 1a                	je     40a706 <SerialIntegratedPipeline+0x781>
  40a6ec:	48 8b 85 b0 c6 fe ff 	mov    -0x13950(%rbp),%rax
  40a6f3:	48 89 c7             	mov    %rax,%rdi
  40a6f6:	e8 a5 c6 ff ff       	callq  406da0 <free@plt>
  40a6fb:	48 c7 85 b0 c6 fe ff 	movq   $0x0,-0x13950(%rbp)
  40a702:	00 00 00 00 
        }
    }  
  40a706:	e9 3f f9 ff ff       	jmpq   40a04a <SerialIntegratedPipeline+0xc5>

    if (tmpsend_count > 0) {
      enqueue(&send_que[qid], &tmpsend_count, (void **)tmpsendbuf);
  40a70b:	48 8b 0d 3e 03 a5 01 	mov    0x1a5033e(%rip),%rcx        # 1e5aa50 <send_que>
  40a712:	8b 85 70 c6 fe ff    	mov    -0x13990(%rbp),%eax
  40a718:	48 63 d0             	movslq %eax,%rdx
  40a71b:	48 89 d0             	mov    %rdx,%rax
  40a71e:	48 c1 e0 02          	shl    $0x2,%rax
  40a722:	48 01 d0             	add    %rdx,%rax
  40a725:	48 c1 e0 02          	shl    $0x2,%rax
  40a729:	48 01 d0             	add    %rdx,%rax
  40a72c:	48 c1 e0 03          	shl    $0x3,%rax
  40a730:	48 01 c1             	add    %rax,%rcx
  40a733:	48 8d 95 d0 c6 fe ff 	lea    -0x13930(%rbp),%rdx
  40a73a:	48 8d 85 60 c6 fe ff 	lea    -0x139a0(%rbp),%rax
  40a741:	48 89 c6             	mov    %rax,%rsi
  40a744:	48 89 cf             	mov    %rcx,%rdi
  40a747:	e8 a0 29 00 00       	callq  40d0ec <enqueue>
    }
  
  //count the number of compress threads that have finished
    queue_signal_terminate(&send_que[qid]);
  40a74c:	48 8b 0d fd 02 a5 01 	mov    0x1a502fd(%rip),%rcx        # 1e5aa50 <send_que>
  40a753:	8b 85 70 c6 fe ff    	mov    -0x13990(%rbp),%eax
  40a759:	48 63 d0             	movslq %eax,%rdx
  40a75c:	48 89 d0             	mov    %rdx,%rax
  40a75f:	48 c1 e0 02          	shl    $0x2,%rax
  40a763:	48 01 d0             	add    %rdx,%rax
  40a766:	48 c1 e0 02          	shl    $0x2,%rax
  40a76a:	48 01 d0             	add    %rdx,%rax
  40a76d:	48 c1 e0 03          	shl    $0x3,%rax
  40a771:	48 01 c8             	add    %rcx,%rax
  40a774:	48 89 c7             	mov    %rax,%rdi
  40a777:	e8 97 27 00 00       	callq  40cf13 <queue_signal_terminate>
    
  return NULL;
  40a77c:	b8 00 00 00 00       	mov    $0x0,%eax
}
  40a781:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40a785:	64 48 33 34 25 28 00 	xor    %fs:0x28,%rsi
  40a78c:	00 00 
  40a78e:	74 05                	je     40a795 <SerialIntegratedPipeline+0x810>
  40a790:	e8 2b c7 ff ff       	callq  406ec0 <__stack_chk_fail@plt>
  40a795:	c9                   	leaveq 
  40a796:	c3                   	retq   

000000000040a797 <DataProcess>:

/*
 * read file and send it to FindAllAnchor thread
 */
void * 
DataProcess(void * targs){
  40a797:	55                   	push   %rbp
  40a798:	48 89 e5             	mov    %rsp,%rbp
  40a79b:	53                   	push   %rbx
  40a79c:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  40a7a3:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
  40a7aa:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  40a7b1:	00 00 
  40a7b3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40a7b7:	31 c0                	xor    %eax,%eax
  struct thread_args *args = (struct thread_args *)targs;
  40a7b9:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  40a7c0:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  int qid = 0;
  40a7c4:	c7 85 74 ff ff ff 00 	movl   $0x0,-0x8c(%rbp)
  40a7cb:	00 00 00 
  int fd = args->fd;
  40a7ce:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40a7d2:	8b 40 08             	mov    0x8(%rax),%eax
  40a7d5:	89 45 8c             	mov    %eax,-0x74(%rbp)
  u_long tmp;
  u_char * p;
  //int avg_bsize = 0;
  fprintf(stderr, "%d : DataProcess\n", getpid()); 
  40a7d8:	e8 93 c5 ff ff       	callq  406d70 <getpid@plt>
  40a7dd:	89 c2                	mov    %eax,%edx
  40a7df:	48 8b 05 9a e1 24 00 	mov    0x24e19a(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  40a7e6:	be 1f 83 43 00       	mov    $0x43831f,%esi
  40a7eb:	48 89 c7             	mov    %rax,%rdi
  40a7ee:	b8 00 00 00 00       	mov    $0x0,%eax
  40a7f3:	e8 98 c7 ff ff       	callq  406f90 <fprintf@plt>
  u_char * anchor;
  
  u_char * src = (u_char *)malloc(MAXBUF*2);
  40a7f8:	bf 00 00 00 02       	mov    $0x2000000,%edi
  40a7fd:	e8 4e c5 ff ff       	callq  406d50 <malloc@plt>
  40a802:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  u_char * left = (u_char *)malloc(MAXBUF);
  40a806:	bf 00 00 00 01       	mov    $0x1000000,%edi
  40a80b:	e8 40 c5 ff ff       	callq  406d50 <malloc@plt>
  40a810:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  u_char * new = (u_char *) malloc(MAXBUF);
  40a814:	bf 00 00 00 01       	mov    $0x1000000,%edi
  40a819:	e8 32 c5 ff ff       	callq  406d50 <malloc@plt>
  40a81e:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  if(src == NULL || left == NULL || new == NULL) {
  40a822:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  40a827:	74 0e                	je     40a837 <DataProcess+0xa0>
  40a829:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  40a82e:	74 07                	je     40a837 <DataProcess+0xa0>
  40a830:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  40a835:	75 28                	jne    40a85f <DataProcess+0xc8>
    EXIT_TRACE("Memory allocation failed.\n");
  40a837:	48 8b 05 42 e1 24 00 	mov    0x24e142(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  40a83e:	ba 09 85 43 00       	mov    $0x438509,%edx
  40a843:	be 90 82 43 00       	mov    $0x438290,%esi
  40a848:	48 89 c7             	mov    %rax,%rdi
  40a84b:	b8 00 00 00 00       	mov    $0x0,%eax
  40a850:	e8 3b c7 ff ff       	callq  406f90 <fprintf@plt>
  40a855:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  40a85a:	e8 c1 c4 ff ff       	callq  406d20 <exit@plt>
  }
  int srclen, left_bytes = 0;
  40a85f:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%rbp)
  40a866:	00 00 00 
  char more = 0;
  40a869:	c6 85 6f ff ff ff 00 	movb   $0x0,-0x91(%rbp)

  data_chunk * tmpbuf[ANCHOR_DATA_PER_INSERT];
  int tmp_count = 0;
  40a870:	c7 85 70 ff ff ff 00 	movl   $0x0,-0x90(%rbp)
  40a877:	00 00 00 

  int anchorcount = 0;
  40a87a:	c7 45 80 00 00 00 00 	movl   $0x0,-0x80(%rbp)

  u32int * rabintab = malloc(256*sizeof rabintab[0]);
  40a881:	bf 00 04 00 00       	mov    $0x400,%edi
  40a886:	e8 c5 c4 ff ff       	callq  406d50 <malloc@plt>
  40a88b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  u32int * rabinwintab = malloc(256*sizeof rabintab[0]);
  40a88f:	bf 00 04 00 00       	mov    $0x400,%edi
  40a894:	e8 b7 c4 ff ff       	callq  406d50 <malloc@plt>
  40a899:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  if(rabintab == NULL || rabinwintab == NULL) {
  40a89d:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  40a8a2:	74 07                	je     40a8ab <DataProcess+0x114>
  40a8a4:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  40a8a9:	75 28                	jne    40a8d3 <DataProcess+0x13c>
    EXIT_TRACE("Memory allocation failed.\n");
  40a8ab:	48 8b 05 ce e0 24 00 	mov    0x24e0ce(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  40a8b2:	ba 09 85 43 00       	mov    $0x438509,%edx
  40a8b7:	be 90 82 43 00       	mov    $0x438290,%esi
  40a8bc:	48 89 c7             	mov    %rax,%rdi
  40a8bf:	b8 00 00 00 00       	mov    $0x0,%eax
  40a8c4:	e8 c7 c6 ff ff       	callq  406f90 <fprintf@plt>
  40a8c9:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  40a8ce:	e8 4d c4 ff ff       	callq  406d20 <exit@plt>
  }

  rf_win_dataprocess = 0;
  40a8d3:	c7 05 af 01 e5 01 00 	movl   $0x0,0x1e501af(%rip)        # 225aa8c <rf_win_dataprocess>
  40a8da:	00 00 00 
  rabininit(rf_win_dataprocess, rabintab, rabinwintab);
  40a8dd:	8b 05 a9 01 e5 01    	mov    0x1e501a9(%rip),%eax        # 225aa8c <rf_win_dataprocess>
  40a8e3:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40a8e7:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  40a8eb:	48 89 ce             	mov    %rcx,%rsi
  40a8ee:	89 c7                	mov    %eax,%edi
  40a8f0:	e8 06 2b 00 00       	callq  40d3fb <rabininit>
  int n = MAX_RABIN_CHUNK_SIZE;
  40a8f5:	c7 45 84 00 f0 00 00 	movl   $0xf000,-0x7c(%rbp)


  //read from the file
  while ((srclen = read(fd, new, MAXBUF)) >= 0) {    
  40a8fc:	e9 9b 03 00 00       	jmpq   40ac9c <DataProcess+0x505>
    if (srclen) more = 1;
  40a901:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%rbp)
  40a908:	74 09                	je     40a913 <DataProcess+0x17c>
  40a90a:	c6 85 6f ff ff ff 01 	movb   $0x1,-0x91(%rbp)
  40a911:	eb 15                	jmp    40a928 <DataProcess+0x191>
    else {
      if (!more) break;
  40a913:	80 bd 6f ff ff ff 00 	cmpb   $0x0,-0x91(%rbp)
  40a91a:	75 05                	jne    40a921 <DataProcess+0x18a>
  40a91c:	e9 a4 03 00 00       	jmpq   40acc5 <DataProcess+0x52e>
      more =0;
  40a921:	c6 85 6f ff ff ff 00 	movb   $0x0,-0x91(%rbp)
    }
    
    memset(src, 0, sizeof(u_char)*MAXBUF);
  40a928:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40a92c:	ba 00 00 00 01       	mov    $0x1000000,%edx
  40a931:	be 00 00 00 00       	mov    $0x0,%esi
  40a936:	48 89 c7             	mov    %rax,%rdi
  40a939:	e8 42 c3 ff ff       	callq  406c80 <memset@plt>

    if (left_bytes > 0){ 
  40a93e:	83 bd 7c ff ff ff 00 	cmpl   $0x0,-0x84(%rbp)
  40a945:	7e 5c                	jle    40a9a3 <DataProcess+0x20c>
      memcpy(src, left, left_bytes* sizeof(u_char));
  40a947:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
  40a94d:	48 63 d0             	movslq %eax,%rdx
  40a950:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  40a954:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40a958:	48 89 ce             	mov    %rcx,%rsi
  40a95b:	48 89 c7             	mov    %rax,%rdi
  40a95e:	e8 8d c6 ff ff       	callq  406ff0 <memcpy@plt>
      memcpy(src+left_bytes, new, srclen *sizeof(u_char));
  40a963:	8b 85 78 ff ff ff    	mov    -0x88(%rbp),%eax
  40a969:	48 63 d0             	movslq %eax,%rdx
  40a96c:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
  40a972:	48 63 c8             	movslq %eax,%rcx
  40a975:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40a979:	48 01 c1             	add    %rax,%rcx
  40a97c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40a980:	48 89 c6             	mov    %rax,%rsi
  40a983:	48 89 cf             	mov    %rcx,%rdi
  40a986:	e8 65 c6 ff ff       	callq  406ff0 <memcpy@plt>
      srclen+= left_bytes;
  40a98b:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
  40a991:	01 85 78 ff ff ff    	add    %eax,-0x88(%rbp)
      left_bytes = 0;
  40a997:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%rbp)
  40a99e:	00 00 00 
  40a9a1:	eb 1c                	jmp    40a9bf <DataProcess+0x228>
    } else {
      memcpy(src, new, srclen * sizeof(u_char));
  40a9a3:	8b 85 78 ff ff ff    	mov    -0x88(%rbp),%eax
  40a9a9:	48 63 d0             	movslq %eax,%rdx
  40a9ac:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  40a9b0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40a9b4:	48 89 ce             	mov    %rcx,%rsi
  40a9b7:	48 89 c7             	mov    %rax,%rdi
  40a9ba:	e8 31 c6 ff ff       	callq  406ff0 <memcpy@plt>
    }
    tmp = 0; 
  40a9bf:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
  40a9c6:	00 
    p = src;
  40a9c7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40a9cb:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
 
    while (tmp < srclen) {
  40a9cf:	e9 b6 02 00 00       	jmpq   40ac8a <DataProcess+0x4f3>
      anchor = src + tmp;          
  40a9d4:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  40a9d8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40a9dc:	48 01 d0             	add    %rdx,%rax
  40a9df:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      p = anchor + ANCHOR_JUMP;
  40a9e3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40a9e7:	48 05 00 00 20 00    	add    $0x200000,%rax
  40a9ed:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
      if (tmp + ANCHOR_JUMP >= srclen) {
  40a9f1:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40a9f5:	48 8d 90 00 00 20 00 	lea    0x200000(%rax),%rdx
  40a9fc:	8b 85 78 ff ff ff    	mov    -0x88(%rbp),%eax
  40aa02:	48 98                	cltq   
  40aa04:	48 39 c2             	cmp    %rax,%rdx
  40aa07:	72 69                	jb     40aa72 <DataProcess+0x2db>
        if (!more) {
  40aa09:	80 bd 6f ff ff ff 00 	cmpb   $0x0,-0x91(%rbp)
  40aa10:	75 19                	jne    40aa2b <DataProcess+0x294>
          p = src + srclen;
  40aa12:	8b 85 78 ff ff ff    	mov    -0x88(%rbp),%eax
  40aa18:	48 63 d0             	movslq %eax,%rdx
  40aa1b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40aa1f:	48 01 d0             	add    %rdx,%rax
  40aa22:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  40aa26:	e9 95 00 00 00       	jmpq   40aac0 <DataProcess+0x329>
        } else {
          //move p to the next 00 point
          n = MAX_RABIN_CHUNK_SIZE;
  40aa2b:	c7 45 84 00 f0 00 00 	movl   $0xf000,-0x7c(%rbp)
          memcpy(left, src+tmp, (srclen - tmp) * sizeof(u_char));
  40aa32:	8b 85 78 ff ff ff    	mov    -0x88(%rbp),%eax
  40aa38:	48 98                	cltq   
  40aa3a:	48 2b 45 a0          	sub    -0x60(%rbp),%rax
  40aa3e:	48 89 c2             	mov    %rax,%rdx
  40aa41:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  40aa45:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40aa49:	48 01 c1             	add    %rax,%rcx
  40aa4c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40aa50:	48 89 ce             	mov    %rcx,%rsi
  40aa53:	48 89 c7             	mov    %rax,%rdi
  40aa56:	e8 95 c5 ff ff       	callq  406ff0 <memcpy@plt>
          left_bytes= srclen -tmp;
  40aa5b:	8b 85 78 ff ff ff    	mov    -0x88(%rbp),%eax
  40aa61:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  40aa65:	29 d0                	sub    %edx,%eax
  40aa67:	89 85 7c ff ff ff    	mov    %eax,-0x84(%rbp)
          break;
  40aa6d:	e9 2a 02 00 00       	jmpq   40ac9c <DataProcess+0x505>
        }
      } else {
        if (srclen - tmp < n) 
  40aa72:	8b 85 78 ff ff ff    	mov    -0x88(%rbp),%eax
  40aa78:	48 98                	cltq   
  40aa7a:	48 2b 45 a0          	sub    -0x60(%rbp),%rax
  40aa7e:	48 89 c2             	mov    %rax,%rdx
  40aa81:	8b 45 84             	mov    -0x7c(%rbp),%eax
  40aa84:	48 98                	cltq   
  40aa86:	48 39 c2             	cmp    %rax,%rdx
  40aa89:	73 0f                	jae    40aa9a <DataProcess+0x303>
          n = srclen - tmp;
  40aa8b:	8b 85 78 ff ff ff    	mov    -0x88(%rbp),%eax
  40aa91:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  40aa95:	29 d0                	sub    %edx,%eax
  40aa97:	89 45 84             	mov    %eax,-0x7c(%rbp)
        p = p + rabinseg(p, n, rf_win_dataprocess, rabintab, rabinwintab);        
  40aa9a:	8b 15 ec ff e4 01    	mov    0x1e4ffec(%rip),%edx        # 225aa8c <rf_win_dataprocess>
  40aaa0:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  40aaa4:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  40aaa8:	8b 75 84             	mov    -0x7c(%rbp),%esi
  40aaab:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40aaaf:	49 89 f8             	mov    %rdi,%r8
  40aab2:	48 89 c7             	mov    %rax,%rdi
  40aab5:	e8 85 29 00 00       	callq  40d43f <rabinseg>
  40aaba:	48 98                	cltq   
  40aabc:	48 01 45 a8          	add    %rax,-0x58(%rbp)
      }

      tmpbuf[tmp_count] = (data_chunk *)malloc(sizeof(data_chunk));
  40aac0:	8b 9d 70 ff ff ff    	mov    -0x90(%rbp),%ebx
  40aac6:	bf 18 00 00 00       	mov    $0x18,%edi
  40aacb:	e8 80 c2 ff ff       	callq  406d50 <malloc@plt>
  40aad0:	48 89 c2             	mov    %rax,%rdx
  40aad3:	48 63 c3             	movslq %ebx,%rax
  40aad6:	48 89 54 c5 90       	mov    %rdx,-0x70(%rbp,%rax,8)
      if(tmpbuf[tmp_count] == NULL) {
  40aadb:	8b 85 70 ff ff ff    	mov    -0x90(%rbp),%eax
  40aae1:	48 98                	cltq   
  40aae3:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax
  40aae8:	48 85 c0             	test   %rax,%rax
  40aaeb:	75 28                	jne    40ab15 <DataProcess+0x37e>
        EXIT_TRACE("Memory allocation failed.\n");
  40aaed:	48 8b 05 8c de 24 00 	mov    0x24de8c(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  40aaf4:	ba 09 85 43 00       	mov    $0x438509,%edx
  40aaf9:	be 90 82 43 00       	mov    $0x438290,%esi
  40aafe:	48 89 c7             	mov    %rax,%rdi
  40ab01:	b8 00 00 00 00       	mov    $0x0,%eax
  40ab06:	e8 85 c4 ff ff       	callq  406f90 <fprintf@plt>
  40ab0b:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  40ab10:	e8 0b c2 ff ff       	callq  406d20 <exit@plt>
      }

      tmpbuf[tmp_count]->start = (u_char *)malloc(p - anchor + 1);
  40ab15:	8b 85 70 ff ff ff    	mov    -0x90(%rbp),%eax
  40ab1b:	48 98                	cltq   
  40ab1d:	48 8b 5c c5 90       	mov    -0x70(%rbp,%rax,8),%rbx
  40ab22:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40ab26:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40ab2a:	48 29 c2             	sub    %rax,%rdx
  40ab2d:	48 89 d0             	mov    %rdx,%rax
  40ab30:	48 83 c0 01          	add    $0x1,%rax
  40ab34:	48 89 c7             	mov    %rax,%rdi
  40ab37:	e8 14 c2 ff ff       	callq  406d50 <malloc@plt>
  40ab3c:	48 89 03             	mov    %rax,(%rbx)
      if(tmpbuf[tmp_count]->start == NULL) {
  40ab3f:	8b 85 70 ff ff ff    	mov    -0x90(%rbp),%eax
  40ab45:	48 98                	cltq   
  40ab47:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax
  40ab4c:	48 8b 00             	mov    (%rax),%rax
  40ab4f:	48 85 c0             	test   %rax,%rax
  40ab52:	75 28                	jne    40ab7c <DataProcess+0x3e5>
        EXIT_TRACE("Memory allocation failed.\n");
  40ab54:	48 8b 05 25 de 24 00 	mov    0x24de25(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  40ab5b:	ba 09 85 43 00       	mov    $0x438509,%edx
  40ab60:	be 90 82 43 00       	mov    $0x438290,%esi
  40ab65:	48 89 c7             	mov    %rax,%rdi
  40ab68:	b8 00 00 00 00       	mov    $0x0,%eax
  40ab6d:	e8 1e c4 ff ff       	callq  406f90 <fprintf@plt>
  40ab72:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  40ab77:	e8 a4 c1 ff ff       	callq  406d20 <exit@plt>
      }
      tmpbuf[tmp_count]->len = p-anchor;
  40ab7c:	8b 85 70 ff ff ff    	mov    -0x90(%rbp),%eax
  40ab82:	48 98                	cltq   
  40ab84:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax
  40ab89:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  40ab8d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ab91:	48 29 d1             	sub    %rdx,%rcx
  40ab94:	48 89 ca             	mov    %rcx,%rdx
  40ab97:	48 89 50 08          	mov    %rdx,0x8(%rax)
      tmpbuf[tmp_count]->anchorid = anchorcount;
  40ab9b:	8b 85 70 ff ff ff    	mov    -0x90(%rbp),%eax
  40aba1:	48 98                	cltq   
  40aba3:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax
  40aba8:	8b 55 80             	mov    -0x80(%rbp),%edx
  40abab:	89 50 10             	mov    %edx,0x10(%rax)
      anchorcount ++;
  40abae:	83 45 80 01          	addl   $0x1,-0x80(%rbp)
      memcpy(tmpbuf[tmp_count]->start, anchor, p-anchor);
  40abb2:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40abb6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40abba:	48 29 c2             	sub    %rax,%rdx
  40abbd:	48 89 d0             	mov    %rdx,%rax
  40abc0:	48 89 c2             	mov    %rax,%rdx
  40abc3:	8b 85 70 ff ff ff    	mov    -0x90(%rbp),%eax
  40abc9:	48 98                	cltq   
  40abcb:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax
  40abd0:	48 8b 00             	mov    (%rax),%rax
  40abd3:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  40abd7:	48 89 ce             	mov    %rcx,%rsi
  40abda:	48 89 c7             	mov    %rax,%rdi
  40abdd:	e8 0e c4 ff ff       	callq  406ff0 <memcpy@plt>
      tmpbuf[tmp_count]->start[p-anchor] = 0;
  40abe2:	8b 85 70 ff ff ff    	mov    -0x90(%rbp),%eax
  40abe8:	48 98                	cltq   
  40abea:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax
  40abef:	48 8b 00             	mov    (%rax),%rax
  40abf2:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  40abf6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40abfa:	48 29 d1             	sub    %rdx,%rcx
  40abfd:	48 89 ca             	mov    %rcx,%rdx
  40ac00:	48 01 d0             	add    %rdx,%rax
  40ac03:	c6 00 00             	movb   $0x0,(%rax)
      tmp_count ++;
  40ac06:	8b 85 70 ff ff ff    	mov    -0x90(%rbp),%eax
  40ac0c:	83 c0 01             	add    $0x1,%eax
  40ac0f:	89 85 70 ff ff ff    	mov    %eax,-0x90(%rbp)

	  //fprintf(stderr, "%d : try to enqueue\n", getpid());

      //send a group of items into the next queue in round-robin fashion
      if (tmp_count >= ANCHOR_DATA_PER_INSERT) { 
  40ac15:	8b 85 70 ff ff ff    	mov    -0x90(%rbp),%eax
  40ac1b:	85 c0                	test   %eax,%eax
  40ac1d:	7e 59                	jle    40ac78 <DataProcess+0x4e1>
        enqueue(&anchor_que[qid], &tmp_count, (void **)tmpbuf);
  40ac1f:	48 8b 0d 1a fe a4 01 	mov    0x1a4fe1a(%rip),%rcx        # 1e5aa40 <anchor_que>
  40ac26:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
  40ac2c:	48 63 d0             	movslq %eax,%rdx
  40ac2f:	48 89 d0             	mov    %rdx,%rax
  40ac32:	48 c1 e0 02          	shl    $0x2,%rax
  40ac36:	48 01 d0             	add    %rdx,%rax
  40ac39:	48 c1 e0 02          	shl    $0x2,%rax
  40ac3d:	48 01 d0             	add    %rdx,%rax
  40ac40:	48 c1 e0 03          	shl    $0x3,%rax
  40ac44:	48 01 c1             	add    %rax,%rcx
  40ac47:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
  40ac4b:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  40ac52:	48 89 c6             	mov    %rax,%rsi
  40ac55:	48 89 cf             	mov    %rcx,%rdi
  40ac58:	e8 8f 24 00 00       	callq  40d0ec <enqueue>
	  //	fprintf(stderr, "%d : after enqueue 1\n", getpid());
        qid = (qid+1) % args->nqueues;
  40ac5d:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
  40ac63:	8d 50 01             	lea    0x1(%rax),%edx
  40ac66:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40ac6a:	8b 48 04             	mov    0x4(%rax),%ecx
  40ac6d:	89 d0                	mov    %edx,%eax
  40ac6f:	99                   	cltd   
  40ac70:	f7 f9                	idiv   %ecx
  40ac72:	89 95 74 ff ff ff    	mov    %edx,-0x8c(%rbp)
      }

      tmp += p - anchor;//ANCHOR_JUMP;
  40ac78:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  40ac7c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40ac80:	48 29 c2             	sub    %rax,%rdx
  40ac83:	48 89 d0             	mov    %rdx,%rax
  40ac86:	48 01 45 a0          	add    %rax,-0x60(%rbp)
      memcpy(src, new, srclen * sizeof(u_char));
    }
    tmp = 0; 
    p = src;
 
    while (tmp < srclen) {
  40ac8a:	8b 85 78 ff ff ff    	mov    -0x88(%rbp),%eax
  40ac90:	48 98                	cltq   
  40ac92:	48 3b 45 a0          	cmp    -0x60(%rbp),%rax
  40ac96:	0f 87 38 fd ff ff    	ja     40a9d4 <DataProcess+0x23d>
  rabininit(rf_win_dataprocess, rabintab, rabinwintab);
  int n = MAX_RABIN_CHUNK_SIZE;


  //read from the file
  while ((srclen = read(fd, new, MAXBUF)) >= 0) {    
  40ac9c:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  40aca0:	8b 45 8c             	mov    -0x74(%rbp),%eax
  40aca3:	ba 00 00 00 01       	mov    $0x1000000,%edx
  40aca8:	48 89 ce             	mov    %rcx,%rsi
  40acab:	89 c7                	mov    %eax,%edi
  40acad:	e8 8e c0 ff ff       	callq  406d40 <read@plt>
  40acb2:	89 85 78 ff ff ff    	mov    %eax,-0x88(%rbp)
  40acb8:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%rbp)
  40acbf:	0f 89 3c fc ff ff    	jns    40a901 <DataProcess+0x16a>

      tmp += p - anchor;//ANCHOR_JUMP;
    }
  } 

  free(src);
  40acc5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40acc9:	48 89 c7             	mov    %rax,%rdi
  40accc:	e8 cf c0 ff ff       	callq  406da0 <free@plt>

  if (tmp_count >= 0) {
  40acd1:	8b 85 70 ff ff ff    	mov    -0x90(%rbp),%eax
  40acd7:	85 c0                	test   %eax,%eax
  40acd9:	78 59                	js     40ad34 <DataProcess+0x59d>
    enqueue(&anchor_que[qid], &tmp_count, (void **)tmpbuf);
  40acdb:	48 8b 0d 5e fd a4 01 	mov    0x1a4fd5e(%rip),%rcx        # 1e5aa40 <anchor_que>
  40ace2:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
  40ace8:	48 63 d0             	movslq %eax,%rdx
  40aceb:	48 89 d0             	mov    %rdx,%rax
  40acee:	48 c1 e0 02          	shl    $0x2,%rax
  40acf2:	48 01 d0             	add    %rdx,%rax
  40acf5:	48 c1 e0 02          	shl    $0x2,%rax
  40acf9:	48 01 d0             	add    %rdx,%rax
  40acfc:	48 c1 e0 03          	shl    $0x3,%rax
  40ad00:	48 01 c1             	add    %rax,%rcx
  40ad03:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
  40ad07:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  40ad0e:	48 89 c6             	mov    %rax,%rsi
  40ad11:	48 89 cf             	mov    %rcx,%rdi
  40ad14:	e8 d3 23 00 00       	callq  40d0ec <enqueue>
    qid = (qid+1) % args->nqueues;
  40ad19:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
  40ad1f:	8d 50 01             	lea    0x1(%rax),%edx
  40ad22:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40ad26:	8b 48 04             	mov    0x4(%rax),%ecx
  40ad29:	89 d0                	mov    %edx,%eax
  40ad2b:	99                   	cltd   
  40ad2c:	f7 f9                	idiv   %ecx
  40ad2e:	89 95 74 ff ff ff    	mov    %edx,-0x8c(%rbp)
  }

  //terminate all output queues
  for(int i=0; i<args->nqueues; i++) {
  40ad34:	c7 45 88 00 00 00 00 	movl   $0x0,-0x78(%rbp)
  40ad3b:	eb 31                	jmp    40ad6e <DataProcess+0x5d7>
    queue_signal_terminate(&anchor_que[i]);
  40ad3d:	48 8b 0d fc fc a4 01 	mov    0x1a4fcfc(%rip),%rcx        # 1e5aa40 <anchor_que>
  40ad44:	8b 45 88             	mov    -0x78(%rbp),%eax
  40ad47:	48 63 d0             	movslq %eax,%rdx
  40ad4a:	48 89 d0             	mov    %rdx,%rax
  40ad4d:	48 c1 e0 02          	shl    $0x2,%rax
  40ad51:	48 01 d0             	add    %rdx,%rax
  40ad54:	48 c1 e0 02          	shl    $0x2,%rax
  40ad58:	48 01 d0             	add    %rdx,%rax
  40ad5b:	48 c1 e0 03          	shl    $0x3,%rax
  40ad5f:	48 01 c8             	add    %rcx,%rax
  40ad62:	48 89 c7             	mov    %rax,%rdi
  40ad65:	e8 a9 21 00 00       	callq  40cf13 <queue_signal_terminate>
    enqueue(&anchor_que[qid], &tmp_count, (void **)tmpbuf);
    qid = (qid+1) % args->nqueues;
  }

  //terminate all output queues
  for(int i=0; i<args->nqueues; i++) {
  40ad6a:	83 45 88 01          	addl   $0x1,-0x78(%rbp)
  40ad6e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40ad72:	8b 40 04             	mov    0x4(%rax),%eax
  40ad75:	3b 45 88             	cmp    -0x78(%rbp),%eax
  40ad78:	7f c3                	jg     40ad3d <DataProcess+0x5a6>
    queue_signal_terminate(&anchor_que[i]);
  }

  return 0;
  40ad7a:	b8 00 00 00 00       	mov    $0x0,%eax
}
  40ad7f:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  40ad83:	64 48 33 1c 25 28 00 	xor    %fs:0x28,%rbx
  40ad8a:	00 00 
  40ad8c:	74 05                	je     40ad93 <DataProcess+0x5fc>
  40ad8e:	e8 2d c1 ff ff       	callq  406ec0 <__stack_chk_fail@plt>
  40ad93:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  40ad9a:	5b                   	pop    %rbx
  40ad9b:	5d                   	pop    %rbp
  40ad9c:	c3                   	retq   

000000000040ad9d <SendBlock>:
/*
 * write blocks to the file
 */
void *
SendBlock(void * targs) 
{
  40ad9d:	55                   	push   %rbp
  40ad9e:	48 89 e5             	mov    %rsp,%rbp
  40ada1:	48 81 ec 80 01 00 00 	sub    $0x180,%rsp
  40ada8:	48 89 bd 88 fe ff ff 	mov    %rdi,-0x178(%rbp)
  40adaf:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  40adb6:	00 00 
  40adb8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40adbc:	31 c0                	xor    %eax,%eax
  struct thread_args *args = (struct thread_args *)targs;
  40adbe:	48 8b 85 88 fe ff ff 	mov    -0x178(%rbp),%rax
  40adc5:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  config * conf = args->conf;
  40adcc:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  40add3:	48 8b 40 10          	mov    0x10(%rax),%rax
  40add7:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  //NOTE: We *must* start with the first queue in order to get the header first
  int qid = 0;
  40adde:	c7 85 a0 fe ff ff 00 	movl   $0x0,-0x160(%rbp)
  40ade5:	00 00 00 
  int fd = 0;
  40ade8:	c7 85 b8 fe ff ff 00 	movl   $0x0,-0x148(%rbp)
  40adef:	00 00 00 
  struct hash_entry * entry; 

  fd = open(conf->outfile, O_CREAT|O_TRUNC|O_WRONLY|O_TRUNC, S_IRUSR|S_IWUSR);
  40adf2:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  40adf9:	48 83 c0 64          	add    $0x64,%rax
  40adfd:	ba 80 01 00 00       	mov    $0x180,%edx
  40ae02:	be 41 02 00 00       	mov    $0x241,%esi
  40ae07:	48 89 c7             	mov    %rax,%rdi
  40ae0a:	b8 00 00 00 00       	mov    $0x0,%eax
  40ae0f:	e8 ec c1 ff ff       	callq  407000 <open@plt>
  40ae14:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%rbp)
  if (fd < 0) {
  40ae1a:	83 bd b8 fe ff ff 00 	cmpl   $0x0,-0x148(%rbp)
  40ae21:	79 14                	jns    40ae37 <SendBlock+0x9a>
    perror("SendBlock open");
  40ae23:	bf 31 83 43 00       	mov    $0x438331,%edi
  40ae28:	e8 53 c1 ff ff       	callq  406f80 <perror@plt>
    return NULL;
  40ae2d:	b8 00 00 00 00       	mov    $0x0,%eax
  40ae32:	e9 1c 0d 00 00       	jmpq   40bb53 <SendBlock+0xdb6>
  }
  fchmod(fd, S_IRGRP | S_IWUSR | S_IRUSR | S_IROTH);
  40ae37:	8b 85 b8 fe ff ff    	mov    -0x148(%rbp),%eax
  40ae3d:	be a4 01 00 00       	mov    $0x1a4,%esi
  40ae42:	89 c7                	mov    %eax,%edi
  40ae44:	e8 07 c0 ff ff       	callq  406e50 <fchmod@plt>

  send_buf_item * fetchbuf[ITEM_PER_FETCH];
  int fetch_count = 0, fetch_start = 0;
  40ae49:	c7 85 98 fe ff ff 00 	movl   $0x0,-0x168(%rbp)
  40ae50:	00 00 00 
  40ae53:	c7 85 a4 fe ff ff 00 	movl   $0x0,-0x15c(%rbp)
  40ae5a:	00 00 00 
  send_buf_item * item;

  SearchTree T;
  T = TreeMakeEmpty(NULL);
  40ae5d:	bf 00 00 00 00       	mov    $0x0,%edi
  40ae62:	e8 0a 27 00 00       	callq  40d571 <TreeMakeEmpty>
  40ae67:	48 89 85 c0 fe ff ff 	mov    %rax,-0x140(%rbp)
  Position pos;
  struct tree_element * tele;
  struct heap_element * hele;

  int reassemble_count = 0, seq_count = 0, anchor_count = 0;
  40ae6e:	c7 85 a8 fe ff ff 00 	movl   $0x0,-0x158(%rbp)
  40ae75:	00 00 00 
  40ae78:	c7 85 ac fe ff ff 00 	movl   $0x0,-0x154(%rbp)
  40ae7f:	00 00 00 
  40ae82:	c7 85 b0 fe ff ff 00 	movl   $0x0,-0x150(%rbp)
  40ae89:	00 00 00 

  send_body * body = NULL;
  40ae8c:	48 c7 85 d8 fe ff ff 	movq   $0x0,-0x128(%rbp)
  40ae93:	00 00 00 00 
  send_head * head = NULL;
  40ae97:	48 c7 85 f0 fe ff ff 	movq   $0x0,-0x110(%rbp)
  40ae9e:	00 00 00 00 
  
  head = (send_head *)headitem->str;
  40aea2:	48 8b 05 9f fb a4 01 	mov    0x1a4fb9f(%rip),%rax        # 1e5aa48 <headitem>
  40aea9:	48 8b 40 08          	mov    0x8(%rax),%rax
  40aead:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
  if (xwrite(fd, &headitem->type, sizeof(headitem->type)) < 0){
  40aeb4:	48 8b 05 8d fb a4 01 	mov    0x1a4fb8d(%rip),%rax        # 1e5aa48 <headitem>
  40aebb:	48 89 c1             	mov    %rax,%rcx
  40aebe:	8b 85 b8 fe ff ff    	mov    -0x148(%rbp),%eax
  40aec4:	ba 01 00 00 00       	mov    $0x1,%edx
  40aec9:	48 89 ce             	mov    %rcx,%rsi
  40aecc:	89 c7                	mov    %eax,%edi
  40aece:	e8 5c 2b 00 00       	callq  40da2f <xwrite>
  40aed3:	85 c0                	test   %eax,%eax
  40aed5:	79 32                	jns    40af09 <SendBlock+0x16c>
    perror("xwrite:");
  40aed7:	bf 30 82 43 00       	mov    $0x438230,%edi
  40aedc:	e8 9f c0 ff ff       	callq  406f80 <perror@plt>
    EXIT_TRACE("xwrite type fails\n");
  40aee1:	48 8b 05 98 da 24 00 	mov    0x24da98(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  40aee8:	ba 15 85 43 00       	mov    $0x438515,%edx
  40aeed:	be 38 82 43 00       	mov    $0x438238,%esi
  40aef2:	48 89 c7             	mov    %rax,%rdi
  40aef5:	b8 00 00 00 00       	mov    $0x0,%eax
  40aefa:	e8 91 c0 ff ff       	callq  406f90 <fprintf@plt>
  40aeff:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  40af04:	e8 17 be ff ff       	callq  406d20 <exit@plt>
    return NULL;
  }
  int checkbit = CHECKBIT;
  40af09:	c7 85 9c fe ff ff 40 	movl   $0x1e240,-0x164(%rbp)
  40af10:	e2 01 00 
  if (xwrite(fd, &checkbit, sizeof(int)) < 0){
  40af13:	48 8d 8d 9c fe ff ff 	lea    -0x164(%rbp),%rcx
  40af1a:	8b 85 b8 fe ff ff    	mov    -0x148(%rbp),%eax
  40af20:	ba 04 00 00 00       	mov    $0x4,%edx
  40af25:	48 89 ce             	mov    %rcx,%rsi
  40af28:	89 c7                	mov    %eax,%edi
  40af2a:	e8 00 2b 00 00       	callq  40da2f <xwrite>
  40af2f:	85 c0                	test   %eax,%eax
  40af31:	79 28                	jns    40af5b <SendBlock+0x1be>
    EXIT_TRACE("xwrite head fails\n");
  40af33:	48 8b 05 46 da 24 00 	mov    0x24da46(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  40af3a:	ba 15 85 43 00       	mov    $0x438515,%edx
  40af3f:	be 40 83 43 00       	mov    $0x438340,%esi
  40af44:	48 89 c7             	mov    %rax,%rdi
  40af47:	b8 00 00 00 00       	mov    $0x0,%eax
  40af4c:	e8 3f c0 ff ff       	callq  406f90 <fprintf@plt>
  40af51:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  40af56:	e8 c5 bd ff ff       	callq  406d20 <exit@plt>
  }
  if (xwrite(fd, head, sizeof(send_head)) < 0){
  40af5b:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  40af62:	8b 85 b8 fe ff ff    	mov    -0x148(%rbp),%eax
  40af68:	ba 68 00 00 00       	mov    $0x68,%edx
  40af6d:	48 89 ce             	mov    %rcx,%rsi
  40af70:	89 c7                	mov    %eax,%edi
  40af72:	e8 b8 2a 00 00       	callq  40da2f <xwrite>
  40af77:	85 c0                	test   %eax,%eax
  40af79:	79 28                	jns    40afa3 <SendBlock+0x206>
    EXIT_TRACE("xwrite head fails\n");
  40af7b:	48 8b 05 fe d9 24 00 	mov    0x24d9fe(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  40af82:	ba 15 85 43 00       	mov    $0x438515,%edx
  40af87:	be 40 83 43 00       	mov    $0x438340,%esi
  40af8c:	48 89 c7             	mov    %rax,%rdi
  40af8f:	b8 00 00 00 00       	mov    $0x0,%eax
  40af94:	e8 f7 bf ff ff       	callq  406f90 <fprintf@plt>
  40af99:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  40af9e:	e8 7d bd ff ff       	callq  406d20 <exit@plt>
  }
  MEM_FREE(head);
  40afa3:	48 83 bd f0 fe ff ff 	cmpq   $0x0,-0x110(%rbp)
  40afaa:	00 
  40afab:	74 1a                	je     40afc7 <SendBlock+0x22a>
  40afad:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  40afb4:	48 89 c7             	mov    %rax,%rdi
  40afb7:	e8 e4 bd ff ff       	callq  406da0 <free@plt>
  40afbc:	48 c7 85 f0 fe ff ff 	movq   $0x0,-0x110(%rbp)
  40afc3:	00 00 00 00 

  while(1) {
    //get a group of items
    if (fetch_count == fetch_start) {
  40afc7:	8b 85 98 fe ff ff    	mov    -0x168(%rbp),%eax
  40afcd:	3b 85 a4 fe ff ff    	cmp    -0x15c(%rbp),%eax
  40afd3:	0f 85 ad 00 00 00    	jne    40b086 <SendBlock+0x2e9>
      //process queues in round-robin fashion
      int r;
      int i=0;
  40afd9:	c7 85 b4 fe ff ff 00 	movl   $0x0,-0x14c(%rbp)
  40afe0:	00 00 00 
      do {
        r = dequeue(&send_que[qid], &fetch_count, (void **)fetchbuf);
  40afe3:	48 8b 0d 66 fa a4 01 	mov    0x1a4fa66(%rip),%rcx        # 1e5aa50 <send_que>
  40afea:	8b 85 a0 fe ff ff    	mov    -0x160(%rbp),%eax
  40aff0:	48 63 d0             	movslq %eax,%rdx
  40aff3:	48 89 d0             	mov    %rdx,%rax
  40aff6:	48 c1 e0 02          	shl    $0x2,%rax
  40affa:	48 01 d0             	add    %rdx,%rax
  40affd:	48 c1 e0 02          	shl    $0x2,%rax
  40b001:	48 01 d0             	add    %rdx,%rax
  40b004:	48 c1 e0 03          	shl    $0x3,%rax
  40b008:	48 01 c1             	add    %rax,%rcx
  40b00b:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
  40b012:	48 8d 85 98 fe ff ff 	lea    -0x168(%rbp),%rax
  40b019:	48 89 c6             	mov    %rax,%rsi
  40b01c:	48 89 cf             	mov    %rcx,%rdi
  40b01f:	e8 3e 1f 00 00       	callq  40cf62 <dequeue>
  40b024:	89 85 bc fe ff ff    	mov    %eax,-0x144(%rbp)
        qid = (qid+1) % args->nqueues;
  40b02a:	8b 85 a0 fe ff ff    	mov    -0x160(%rbp),%eax
  40b030:	8d 50 01             	lea    0x1(%rax),%edx
  40b033:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  40b03a:	8b 48 04             	mov    0x4(%rax),%ecx
  40b03d:	89 d0                	mov    %edx,%eax
  40b03f:	99                   	cltd   
  40b040:	f7 f9                	idiv   %ecx
  40b042:	89 95 a0 fe ff ff    	mov    %edx,-0x160(%rbp)
        i++;
  40b048:	83 85 b4 fe ff ff 01 	addl   $0x1,-0x14c(%rbp)
      } while(r<0 && i<args->nqueues);
  40b04f:	83 bd bc fe ff ff 00 	cmpl   $0x0,-0x144(%rbp)
  40b056:	79 16                	jns    40b06e <SendBlock+0x2d1>
  40b058:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  40b05f:	8b 40 04             	mov    0x4(%rax),%eax
  40b062:	3b 85 b4 fe ff ff    	cmp    -0x14c(%rbp),%eax
  40b068:	0f 8f 75 ff ff ff    	jg     40afe3 <SendBlock+0x246>
      if (r<0) {
  40b06e:	83 bd bc fe ff ff 00 	cmpl   $0x0,-0x144(%rbp)
  40b075:	79 05                	jns    40b07c <SendBlock+0x2df>
        break;
  40b077:	e9 c7 07 00 00       	jmpq   40b843 <SendBlock+0xaa6>
      }
      fetch_start = 0;
  40b07c:	c7 85 a4 fe ff ff 00 	movl   $0x0,-0x15c(%rbp)
  40b083:	00 00 00 
    }
    item = fetchbuf[fetch_start];
  40b086:	8b 85 a4 fe ff ff    	mov    -0x15c(%rbp),%eax
  40b08c:	48 98                	cltq   
  40b08e:	48 8b 84 c5 50 ff ff 	mov    -0xb0(%rbp,%rax,8),%rax
  40b095:	ff 
  40b096:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
    fetch_start ++;
  40b09d:	83 85 a4 fe ff ff 01 	addl   $0x1,-0x15c(%rbp)

    if (item == NULL) break;
  40b0a4:	48 83 bd f8 fe ff ff 	cmpq   $0x0,-0x108(%rbp)
  40b0ab:	00 
  40b0ac:	75 05                	jne    40b0b3 <SendBlock+0x316>
  40b0ae:	e9 90 07 00 00       	jmpq   40b843 <SendBlock+0xaa6>

    switch (item->type) {
  40b0b3:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  40b0ba:	0f b6 00             	movzbl (%rax),%eax
  40b0bd:	0f b6 c0             	movzbl %al,%eax
  40b0c0:	83 f8 03             	cmp    $0x3,%eax
  40b0c3:	0f 84 74 07 00 00    	je     40b83d <SendBlock+0xaa0>
  40b0c9:	83 f8 03             	cmp    $0x3,%eax
  40b0cc:	7f 0e                	jg     40b0dc <SendBlock+0x33f>
  40b0ce:	83 c0 00             	add    $0x0,%eax
  40b0d1:	83 f8 01             	cmp    $0x1,%eax
  40b0d4:	0f 87 ed fe ff ff    	ja     40afc7 <SendBlock+0x22a>
  40b0da:	eb 08                	jmp    40b0e4 <SendBlock+0x347>
  40b0dc:	83 f8 04             	cmp    $0x4,%eax
        EXIT_TRACE("xwrite head fails\n");
      }
      MEM_FREE(head);*/
      break;
    case TYPE_FINISH:
      break;
  40b0df:	e9 5a 07 00 00       	jmpq   40b83e <SendBlock+0xaa1>

    switch (item->type) {
    case TYPE_FINGERPRINT:
    case TYPE_COMPRESS:
      //process one item
      body = (send_body *)item->str;
  40b0e4:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  40b0eb:	48 8b 40 08          	mov    0x8(%rax),%rax
  40b0ef:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
      if (body->cid == reassemble_count && body->anchorid == anchor_count) {
  40b0f6:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  40b0fd:	8b 50 08             	mov    0x8(%rax),%edx
  40b100:	8b 85 a8 fe ff ff    	mov    -0x158(%rbp),%eax
  40b106:	39 c2                	cmp    %eax,%edx
  40b108:	0f 85 96 05 00 00    	jne    40b6a4 <SendBlock+0x907>
  40b10e:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  40b115:	8b 50 04             	mov    0x4(%rax),%edx
  40b118:	8b 85 b0 fe ff ff    	mov    -0x150(%rbp),%eax
  40b11e:	39 c2                	cmp    %eax,%edx
  40b120:	0f 85 7e 05 00 00    	jne    40b6a4 <SendBlock+0x907>
        //the item is the next block to write to file, write it.
#ifdef PARALLEL
        pthread_mutex_t *ht_lock = hashtable_getlock(cache, (void *)item->content);
  40b126:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  40b12d:	48 8b 50 10          	mov    0x10(%rax),%rdx
  40b131:	48 8b 05 88 f8 24 01 	mov    0x124f888(%rip),%rax        # 165a9c0 <cache>
  40b138:	48 89 d6             	mov    %rdx,%rsi
  40b13b:	48 89 c7             	mov    %rax,%rdi
  40b13e:	e8 e5 18 00 00       	callq  40ca28 <hashtable_getlock>
  40b143:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
        pthread_mutex_lock(ht_lock);
  40b14a:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  40b151:	48 89 c7             	mov    %rax,%rdi
  40b154:	e8 27 bc ff ff       	callq  406d80 <pthread_mutex_lock@plt>
#endif
        if ((entry = hashtable_search(cache, (void *)item->content)) != NULL) {
  40b159:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  40b160:	48 8b 50 10          	mov    0x10(%rax),%rdx
  40b164:	48 8b 05 55 f8 24 01 	mov    0x124f855(%rip),%rax        # 165a9c0 <cache>
  40b16b:	48 89 d6             	mov    %rdx,%rsi
  40b16e:	48 89 c7             	mov    %rax,%rdi
  40b171:	e8 c7 19 00 00       	callq  40cb3d <hashtable_search>
  40b176:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
  40b17d:	48 83 bd 08 ff ff ff 	cmpq   $0x0,-0xf8(%rbp)
  40b184:	00 
  40b185:	0f 84 27 01 00 00    	je     40b2b2 <SendBlock+0x515>
          struct pContent * value = ((struct pContent *)entry->v);
  40b18b:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  40b192:	48 8b 40 08          	mov    0x8(%rax),%rax
  40b196:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
          if (value->tag == TAG_WRITTEN) {
  40b19d:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  40b1a4:	0f b6 40 14          	movzbl 0x14(%rax),%eax
  40b1a8:	3c 02                	cmp    $0x2,%al
  40b1aa:	75 45                	jne    40b1f1 <SendBlock+0x454>
            //if the data has been written, just write SHA-1
#ifdef PARALLEL
            pthread_mutex_unlock(ht_lock);
  40b1ac:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  40b1b3:	48 89 c7             	mov    %rax,%rdi
  40b1b6:	e8 85 bd ff ff       	callq  406f40 <pthread_mutex_unlock@plt>
#endif
            write_file(fd, TYPE_FINGERPRINT, seq_count, body->len, item->content);
  40b1bb:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  40b1c2:	48 8b 70 10          	mov    0x10(%rax),%rsi
  40b1c6:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  40b1cd:	48 8b 48 10          	mov    0x10(%rax),%rcx
  40b1d1:	8b 95 ac fe ff ff    	mov    -0x154(%rbp),%edx
  40b1d7:	8b 85 b8 fe ff ff    	mov    -0x148(%rbp),%eax
  40b1dd:	49 89 f0             	mov    %rsi,%r8
  40b1e0:	be 00 00 00 00       	mov    $0x0,%esi
  40b1e5:	89 c7                	mov    %eax,%edi
  40b1e7:	e8 5a d7 ff ff       	callq  408946 <write_file>
  40b1ec:	e9 da 00 00 00       	jmpq   40b2cb <SendBlock+0x52e>
          } else {            
            //if the data has not been written, write the compressed data
#ifdef PARALLEL
            while (value->tag == TAG_OCCUPY) {
  40b1f1:	eb 1d                	jmp    40b210 <SendBlock+0x473>
              pthread_cond_wait(&value->empty, ht_lock);
  40b1f3:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  40b1fa:	48 8d 50 18          	lea    0x18(%rax),%rdx
  40b1fe:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  40b205:	48 89 c6             	mov    %rax,%rsi
  40b208:	48 89 d7             	mov    %rdx,%rdi
  40b20b:	e8 a0 bd ff ff       	callq  406fb0 <pthread_cond_wait@plt>
#endif
            write_file(fd, TYPE_FINGERPRINT, seq_count, body->len, item->content);
          } else {            
            //if the data has not been written, write the compressed data
#ifdef PARALLEL
            while (value->tag == TAG_OCCUPY) {
  40b210:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  40b217:	0f b6 40 14          	movzbl 0x14(%rax),%eax
  40b21b:	84 c0                	test   %al,%al
  40b21d:	74 d4                	je     40b1f3 <SendBlock+0x456>
              pthread_cond_wait(&value->empty, ht_lock);
            }
#endif
            if (value->tag == TAG_DATAREADY) {
  40b21f:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  40b226:	0f b6 40 14          	movzbl 0x14(%rax),%eax
  40b22a:	3c 01                	cmp    $0x1,%al
  40b22c:	75 69                	jne    40b297 <SendBlock+0x4fa>
              write_file(fd, TYPE_COMPRESS, seq_count, value->len, value->content);
  40b22e:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  40b235:	48 8b 70 08          	mov    0x8(%rax),%rsi
  40b239:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  40b240:	48 8b 08             	mov    (%rax),%rcx
  40b243:	8b 95 ac fe ff ff    	mov    -0x154(%rbp),%edx
  40b249:	8b 85 b8 fe ff ff    	mov    -0x148(%rbp),%eax
  40b24f:	49 89 f0             	mov    %rsi,%r8
  40b252:	be 01 00 00 00       	mov    $0x1,%esi
  40b257:	89 c7                	mov    %eax,%edi
  40b259:	e8 e8 d6 ff ff       	callq  408946 <write_file>
              value->len = seq_count;
  40b25e:	8b 85 ac fe ff ff    	mov    -0x154(%rbp),%eax
  40b264:	48 63 d0             	movslq %eax,%rdx
  40b267:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  40b26e:	48 89 10             	mov    %rdx,(%rax)
              value->tag = TAG_WRITTEN;
  40b271:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  40b278:	c6 40 14 02          	movb   $0x2,0x14(%rax)
              hashtable_change(entry, (void *)value);      
  40b27c:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
  40b283:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  40b28a:	48 89 d6             	mov    %rdx,%rsi
  40b28d:	48 89 c7             	mov    %rax,%rdi
  40b290:	e8 49 19 00 00       	callq  40cbde <hashtable_change>
  40b295:	eb 0a                	jmp    40b2a1 <SendBlock+0x504>
            } else {
              printf("Error: Illegal tag\n");
  40b297:	bf 58 83 43 00       	mov    $0x438358,%edi
  40b29c:	e8 2f ba ff ff       	callq  406cd0 <puts@plt>
            }
#ifdef PARALLEL
            pthread_mutex_unlock(ht_lock);
  40b2a1:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  40b2a8:	48 89 c7             	mov    %rax,%rdi
  40b2ab:	e8 90 bc ff ff       	callq  406f40 <pthread_mutex_unlock@plt>
  40b2b0:	eb 19                	jmp    40b2cb <SendBlock+0x52e>
#endif
          }
        } else {
		  //FIXME: LTP, if this happens, whether that means a race condition????? LTP
          printf("Error: Cannot find entry\n");
  40b2b2:	bf 6b 83 43 00       	mov    $0x43836b,%edi
  40b2b7:	e8 14 ba ff ff       	callq  406cd0 <puts@plt>
#ifdef PARALLEL
          pthread_mutex_unlock(ht_lock);
  40b2bc:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  40b2c3:	48 89 c7             	mov    %rax,%rdi
  40b2c6:	e8 75 bc ff ff       	callq  406f40 <pthread_mutex_unlock@plt>
#endif
        }  
        MEM_FREE(body);
  40b2cb:	48 83 bd d8 fe ff ff 	cmpq   $0x0,-0x128(%rbp)
  40b2d2:	00 
  40b2d3:	74 1a                	je     40b2ef <SendBlock+0x552>
  40b2d5:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  40b2dc:	48 89 c7             	mov    %rax,%rdi
  40b2df:	e8 bc ba ff ff       	callq  406da0 <free@plt>
  40b2e4:	48 c7 85 d8 fe ff ff 	movq   $0x0,-0x128(%rbp)
  40b2eb:	00 00 00 00 
        reassemble_count ++;
  40b2ef:	83 85 a8 fe ff ff 01 	addl   $0x1,-0x158(%rbp)
        if (reassemble_count == chunks_per_anchor[anchor_count]) {
  40b2f6:	8b 85 b0 fe ff ff    	mov    -0x150(%rbp),%eax
  40b2fc:	48 98                	cltq   
  40b2fe:	8b 04 85 80 aa e5 01 	mov    0x1e5aa80(,%rax,4),%eax
  40b305:	3b 85 a8 fe ff ff    	cmp    -0x158(%rbp),%eax
  40b30b:	75 11                	jne    40b31e <SendBlock+0x581>
          reassemble_count = 0;
  40b30d:	c7 85 a8 fe ff ff 00 	movl   $0x0,-0x158(%rbp)
  40b314:	00 00 00 
          anchor_count ++;
  40b317:	83 85 b0 fe ff ff 01 	addl   $0x1,-0x150(%rbp)
        }
        seq_count ++;
  40b31e:	83 85 ac fe ff ff 01 	addl   $0x1,-0x154(%rbp)
        //check whether there are more data in order in the queue that can be written to the file        
        pos = TreeFindMin(T);
  40b325:	48 8b 85 c0 fe ff ff 	mov    -0x140(%rbp),%rax
  40b32c:	48 89 c7             	mov    %rax,%rdi
  40b32f:	e8 ff 22 00 00       	callq  40d633 <TreeFindMin>
  40b334:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
        //while (p != NULL && p->cid == reassemble_count && p->anchorid == anchor_count) {
        if (pos != NULL && (pos->Element)->aid == anchor_count) {
  40b33b:	48 83 bd 18 ff ff ff 	cmpq   $0x0,-0xe8(%rbp)
  40b342:	00 
  40b343:	0f 84 56 03 00 00    	je     40b69f <SendBlock+0x902>
  40b349:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  40b350:	48 8b 00             	mov    (%rax),%rax
  40b353:	8b 10                	mov    (%rax),%edx
  40b355:	8b 85 b0 fe ff ff    	mov    -0x150(%rbp),%eax
  40b35b:	39 c2                	cmp    %eax,%edx
  40b35d:	0f 85 3c 03 00 00    	jne    40b69f <SendBlock+0x902>
          tele = pos->Element;
  40b363:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  40b36a:	48 8b 00             	mov    (%rax),%rax
  40b36d:	48 89 85 c8 fe ff ff 	mov    %rax,-0x138(%rbp)
          hele = FindMin(tele->queue);
  40b374:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  40b37b:	48 8b 40 08          	mov    0x8(%rax),%rax
  40b37f:	48 89 c7             	mov    %rax,%rdi
  40b382:	e8 d3 c1 ff ff       	callq  40755a <FindMin>
  40b387:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
          while (hele!= NULL && hele->cid == reassemble_count && tele->aid == anchor_count) {
  40b38e:	e9 d8 02 00 00       	jmpq   40b66b <SendBlock+0x8ce>
#ifdef PARALLEL
            pthread_mutex_t *ht_lock = hashtable_getlock(cache, (void *)hele->content);
  40b393:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  40b39a:	48 8b 50 10          	mov    0x10(%rax),%rdx
  40b39e:	48 8b 05 1b f6 24 01 	mov    0x124f61b(%rip),%rax        # 165a9c0 <cache>
  40b3a5:	48 89 d6             	mov    %rdx,%rsi
  40b3a8:	48 89 c7             	mov    %rax,%rdi
  40b3ab:	e8 78 16 00 00       	callq  40ca28 <hashtable_getlock>
  40b3b0:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
            pthread_mutex_lock(ht_lock);
  40b3b7:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  40b3be:	48 89 c7             	mov    %rax,%rdi
  40b3c1:	e8 ba b9 ff ff       	callq  406d80 <pthread_mutex_lock@plt>
#endif
            if ((entry = hashtable_search(cache, (void *)hele->content)) != NULL) {
  40b3c6:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  40b3cd:	48 8b 50 10          	mov    0x10(%rax),%rdx
  40b3d1:	48 8b 05 e8 f5 24 01 	mov    0x124f5e8(%rip),%rax        # 165a9c0 <cache>
  40b3d8:	48 89 d6             	mov    %rdx,%rsi
  40b3db:	48 89 c7             	mov    %rax,%rdi
  40b3de:	e8 5a 17 00 00       	callq  40cb3d <hashtable_search>
  40b3e3:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
  40b3ea:	48 83 bd 08 ff ff ff 	cmpq   $0x0,-0xf8(%rbp)
  40b3f1:	00 
  40b3f2:	0f 84 27 01 00 00    	je     40b51f <SendBlock+0x782>
              struct pContent * value = ((struct pContent *)entry->v);
  40b3f8:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  40b3ff:	48 8b 40 08          	mov    0x8(%rax),%rax
  40b403:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
              if (value->tag == TAG_WRITTEN) {
  40b40a:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40b411:	0f b6 40 14          	movzbl 0x14(%rax),%eax
  40b415:	3c 02                	cmp    $0x2,%al
  40b417:	75 45                	jne    40b45e <SendBlock+0x6c1>
#ifdef PARALLEL
                pthread_mutex_unlock(ht_lock);
  40b419:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  40b420:	48 89 c7             	mov    %rax,%rdi
  40b423:	e8 18 bb ff ff       	callq  406f40 <pthread_mutex_unlock@plt>
#endif
                write_file(fd, TYPE_FINGERPRINT, seq_count, hele->len, hele->content);
  40b428:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  40b42f:	48 8b 70 10          	mov    0x10(%rax),%rsi
  40b433:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  40b43a:	48 8b 48 08          	mov    0x8(%rax),%rcx
  40b43e:	8b 95 ac fe ff ff    	mov    -0x154(%rbp),%edx
  40b444:	8b 85 b8 fe ff ff    	mov    -0x148(%rbp),%eax
  40b44a:	49 89 f0             	mov    %rsi,%r8
  40b44d:	be 00 00 00 00       	mov    $0x0,%esi
  40b452:	89 c7                	mov    %eax,%edi
  40b454:	e8 ed d4 ff ff       	callq  408946 <write_file>
  40b459:	e9 da 00 00 00       	jmpq   40b538 <SendBlock+0x79b>
              } else {            
#ifdef PARALLEL
                while (value->tag == TAG_OCCUPY) {
  40b45e:	eb 1d                	jmp    40b47d <SendBlock+0x6e0>
                  pthread_cond_wait(&value->empty, ht_lock);
  40b460:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40b467:	48 8d 50 18          	lea    0x18(%rax),%rdx
  40b46b:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  40b472:	48 89 c6             	mov    %rax,%rsi
  40b475:	48 89 d7             	mov    %rdx,%rdi
  40b478:	e8 33 bb ff ff       	callq  406fb0 <pthread_cond_wait@plt>
                pthread_mutex_unlock(ht_lock);
#endif
                write_file(fd, TYPE_FINGERPRINT, seq_count, hele->len, hele->content);
              } else {            
#ifdef PARALLEL
                while (value->tag == TAG_OCCUPY) {
  40b47d:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40b484:	0f b6 40 14          	movzbl 0x14(%rax),%eax
  40b488:	84 c0                	test   %al,%al
  40b48a:	74 d4                	je     40b460 <SendBlock+0x6c3>
                  pthread_cond_wait(&value->empty, ht_lock);
                }
#endif
                if (value->tag == TAG_DATAREADY) {
  40b48c:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40b493:	0f b6 40 14          	movzbl 0x14(%rax),%eax
  40b497:	3c 01                	cmp    $0x1,%al
  40b499:	75 69                	jne    40b504 <SendBlock+0x767>
                  write_file(fd, TYPE_COMPRESS, seq_count, value->len, value->content);
  40b49b:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40b4a2:	48 8b 70 08          	mov    0x8(%rax),%rsi
  40b4a6:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40b4ad:	48 8b 08             	mov    (%rax),%rcx
  40b4b0:	8b 95 ac fe ff ff    	mov    -0x154(%rbp),%edx
  40b4b6:	8b 85 b8 fe ff ff    	mov    -0x148(%rbp),%eax
  40b4bc:	49 89 f0             	mov    %rsi,%r8
  40b4bf:	be 01 00 00 00       	mov    $0x1,%esi
  40b4c4:	89 c7                	mov    %eax,%edi
  40b4c6:	e8 7b d4 ff ff       	callq  408946 <write_file>
                  value->len = seq_count;
  40b4cb:	8b 85 ac fe ff ff    	mov    -0x154(%rbp),%eax
  40b4d1:	48 63 d0             	movslq %eax,%rdx
  40b4d4:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40b4db:	48 89 10             	mov    %rdx,(%rax)
                  value->tag = TAG_WRITTEN;
  40b4de:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40b4e5:	c6 40 14 02          	movb   $0x2,0x14(%rax)
                  hashtable_change(entry, (void *)value);      
  40b4e9:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
  40b4f0:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  40b4f7:	48 89 d6             	mov    %rdx,%rsi
  40b4fa:	48 89 c7             	mov    %rax,%rdi
  40b4fd:	e8 dc 16 00 00       	callq  40cbde <hashtable_change>
  40b502:	eb 0a                	jmp    40b50e <SendBlock+0x771>
                } else {
                  printf("Error: Illegal tag\n");
  40b504:	bf 58 83 43 00       	mov    $0x438358,%edi
  40b509:	e8 c2 b7 ff ff       	callq  406cd0 <puts@plt>
                }
#ifdef PARALLEL
                pthread_mutex_unlock(ht_lock);
  40b50e:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  40b515:	48 89 c7             	mov    %rax,%rdi
  40b518:	e8 23 ba ff ff       	callq  406f40 <pthread_mutex_unlock@plt>
  40b51d:	eb 19                	jmp    40b538 <SendBlock+0x79b>
#endif
              }
            } else {
              printf("Error: Cannot find entry\n");
  40b51f:	bf 6b 83 43 00       	mov    $0x43836b,%edi
  40b524:	e8 a7 b7 ff ff       	callq  406cd0 <puts@plt>
#ifdef PARALLEL
              pthread_mutex_unlock(ht_lock);
  40b529:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  40b530:	48 89 c7             	mov    %rax,%rdi
  40b533:	e8 08 ba ff ff       	callq  406f40 <pthread_mutex_unlock@plt>
#endif
            }  
            MEM_FREE(body);
  40b538:	48 83 bd d8 fe ff ff 	cmpq   $0x0,-0x128(%rbp)
  40b53f:	00 
  40b540:	74 1a                	je     40b55c <SendBlock+0x7bf>
  40b542:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  40b549:	48 89 c7             	mov    %rax,%rdi
  40b54c:	e8 4f b8 ff ff       	callq  406da0 <free@plt>
  40b551:	48 c7 85 d8 fe ff ff 	movq   $0x0,-0x128(%rbp)
  40b558:	00 00 00 00 
            if (hele->content) MEM_FREE(hele->content);
  40b55c:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  40b563:	48 8b 40 10          	mov    0x10(%rax),%rax
  40b567:	48 85 c0             	test   %rax,%rax
  40b56a:	74 32                	je     40b59e <SendBlock+0x801>
  40b56c:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  40b573:	48 8b 40 10          	mov    0x10(%rax),%rax
  40b577:	48 85 c0             	test   %rax,%rax
  40b57a:	74 22                	je     40b59e <SendBlock+0x801>
  40b57c:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  40b583:	48 8b 40 10          	mov    0x10(%rax),%rax
  40b587:	48 89 c7             	mov    %rax,%rdi
  40b58a:	e8 11 b8 ff ff       	callq  406da0 <free@plt>
  40b58f:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  40b596:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  40b59d:	00 
            
            seq_count ++;
  40b59e:	83 85 ac fe ff ff 01 	addl   $0x1,-0x154(%rbp)
            DeleteMin(tele->queue);
  40b5a5:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  40b5ac:	48 8b 40 08          	mov    0x8(%rax),%rax
  40b5b0:	48 89 c7             	mov    %rax,%rdi
  40b5b3:	e8 30 be ff ff       	callq  4073e8 <DeleteMin>
            
            reassemble_count ++;
  40b5b8:	83 85 a8 fe ff ff 01 	addl   $0x1,-0x158(%rbp)
            if (reassemble_count == chunks_per_anchor[anchor_count]) {
  40b5bf:	8b 85 b0 fe ff ff    	mov    -0x150(%rbp),%eax
  40b5c5:	48 98                	cltq   
  40b5c7:	8b 04 85 80 aa e5 01 	mov    0x1e5aa80(,%rax,4),%eax
  40b5ce:	3b 85 a8 fe ff ff    	cmp    -0x158(%rbp),%eax
  40b5d4:	75 11                	jne    40b5e7 <SendBlock+0x84a>
              reassemble_count = 0;
  40b5d6:	c7 85 a8 fe ff ff 00 	movl   $0x0,-0x158(%rbp)
  40b5dd:	00 00 00 
              anchor_count ++;
  40b5e0:	83 85 b0 fe ff ff 01 	addl   $0x1,-0x150(%rbp)
            }
            
            if (IsEmpty(tele->queue)) {
  40b5e7:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  40b5ee:	48 8b 40 08          	mov    0x8(%rax),%rax
  40b5f2:	48 89 c7             	mov    %rax,%rdi
  40b5f5:	e8 91 bf ff ff       	callq  40758b <IsEmpty>
  40b5fa:	85 c0                	test   %eax,%eax
  40b5fc:	74 53                	je     40b651 <SendBlock+0x8b4>
              T = TreeDelete(tele, T);
  40b5fe:	48 8b 95 c0 fe ff ff 	mov    -0x140(%rbp),%rdx
  40b605:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  40b60c:	48 89 d6             	mov    %rdx,%rsi
  40b60f:	48 89 c7             	mov    %rax,%rdi
  40b612:	e8 a3 21 00 00       	callq  40d7ba <TreeDelete>
  40b617:	48 89 85 c0 fe ff ff 	mov    %rax,-0x140(%rbp)
              pos = TreeFindMin(T);
  40b61e:	48 8b 85 c0 fe ff ff 	mov    -0x140(%rbp),%rax
  40b625:	48 89 c7             	mov    %rax,%rdi
  40b628:	e8 06 20 00 00       	callq  40d633 <TreeFindMin>
  40b62d:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
              if (pos == NULL) break;
  40b634:	48 83 bd 18 ff ff ff 	cmpq   $0x0,-0xe8(%rbp)
  40b63b:	00 
  40b63c:	75 02                	jne    40b640 <SendBlock+0x8a3>
  40b63e:	eb 5f                	jmp    40b69f <SendBlock+0x902>
              tele = pos->Element;     
  40b640:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  40b647:	48 8b 00             	mov    (%rax),%rax
  40b64a:	48 89 85 c8 fe ff ff 	mov    %rax,-0x138(%rbp)
            }       
            
            hele = FindMin(tele->queue);
  40b651:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  40b658:	48 8b 40 08          	mov    0x8(%rax),%rax
  40b65c:	48 89 c7             	mov    %rax,%rdi
  40b65f:	e8 f6 be ff ff       	callq  40755a <FindMin>
  40b664:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
        pos = TreeFindMin(T);
        //while (p != NULL && p->cid == reassemble_count && p->anchorid == anchor_count) {
        if (pos != NULL && (pos->Element)->aid == anchor_count) {
          tele = pos->Element;
          hele = FindMin(tele->queue);
          while (hele!= NULL && hele->cid == reassemble_count && tele->aid == anchor_count) {
  40b66b:	48 83 bd d0 fe ff ff 	cmpq   $0x0,-0x130(%rbp)
  40b672:	00 
  40b673:	74 2a                	je     40b69f <SendBlock+0x902>
  40b675:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  40b67c:	8b 10                	mov    (%rax),%edx
  40b67e:	8b 85 a8 fe ff ff    	mov    -0x158(%rbp),%eax
  40b684:	39 c2                	cmp    %eax,%edx
  40b686:	75 17                	jne    40b69f <SendBlock+0x902>
  40b688:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  40b68f:	8b 10                	mov    (%rax),%edx
  40b691:	8b 85 b0 fe ff ff    	mov    -0x150(%rbp),%eax
  40b697:	39 c2                	cmp    %eax,%edx
  40b699:	0f 84 f4 fc ff ff    	je     40b393 <SendBlock+0x5f6>
    switch (item->type) {
    case TYPE_FINGERPRINT:
    case TYPE_COMPRESS:
      //process one item
      body = (send_body *)item->str;
      if (body->cid == reassemble_count && body->anchorid == anchor_count) {
  40b69f:	e9 97 01 00 00       	jmpq   40b83b <SendBlock+0xa9e>
            hele = FindMin(tele->queue);
          }
        }
      } else {
        // the item is not the next block to write, put it in a queue.
        struct heap_element * p = (struct heap_element*)malloc(sizeof(struct heap_element));
  40b6a4:	bf 20 00 00 00       	mov    $0x20,%edi
  40b6a9:	e8 a2 b6 ff ff       	callq  406d50 <malloc@plt>
  40b6ae:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
        if(p == NULL) {
  40b6b5:	48 83 bd 30 ff ff ff 	cmpq   $0x0,-0xd0(%rbp)
  40b6bc:	00 
  40b6bd:	75 28                	jne    40b6e7 <SendBlock+0x94a>
          EXIT_TRACE("Memory allocation failed.\n");
  40b6bf:	48 8b 05 ba d2 24 00 	mov    0x24d2ba(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  40b6c6:	ba 15 85 43 00       	mov    $0x438515,%edx
  40b6cb:	be 90 82 43 00       	mov    $0x438290,%esi
  40b6d0:	48 89 c7             	mov    %rax,%rdi
  40b6d3:	b8 00 00 00 00       	mov    $0x0,%eax
  40b6d8:	e8 b3 b8 ff ff       	callq  406f90 <fprintf@plt>
  40b6dd:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  40b6e2:	e8 39 b6 ff ff       	callq  406d20 <exit@plt>
        }

        p->content = item->content;
  40b6e7:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  40b6ee:	48 8b 50 10          	mov    0x10(%rax),%rdx
  40b6f2:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  40b6f9:	48 89 50 10          	mov    %rdx,0x10(%rax)
        p->cid = body->cid;
  40b6fd:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  40b704:	8b 50 08             	mov    0x8(%rax),%edx
  40b707:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  40b70e:	89 10                	mov    %edx,(%rax)
        p->len = body->len;
  40b710:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  40b717:	48 8b 50 10          	mov    0x10(%rax),%rdx
  40b71b:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  40b722:	48 89 50 08          	mov    %rdx,0x8(%rax)
        p->type = item->type;
  40b726:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  40b72d:	0f b6 10             	movzbl (%rax),%edx
  40b730:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  40b737:	88 50 18             	mov    %dl,0x18(%rax)
        pos = TreeFind(body->anchorid, T);
  40b73a:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  40b741:	8b 40 04             	mov    0x4(%rax),%eax
  40b744:	89 c2                	mov    %eax,%edx
  40b746:	48 8b 85 c0 fe ff ff 	mov    -0x140(%rbp),%rax
  40b74d:	48 89 c6             	mov    %rax,%rsi
  40b750:	89 d7                	mov    %edx,%edi
  40b752:	e8 6b 1e 00 00       	callq  40d5c2 <TreeFind>
  40b757:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
        if (pos == NULL) {
  40b75e:	48 83 bd 18 ff ff ff 	cmpq   $0x0,-0xe8(%rbp)
  40b765:	00 
  40b766:	0f 85 ad 00 00 00    	jne    40b819 <SendBlock+0xa7c>
          struct tree_element * tree = (struct tree_element*)malloc(sizeof(struct tree_element));
  40b76c:	bf 10 00 00 00       	mov    $0x10,%edi
  40b771:	e8 da b5 ff ff       	callq  406d50 <malloc@plt>
  40b776:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
          if(tree == NULL) {
  40b77d:	48 83 bd 38 ff ff ff 	cmpq   $0x0,-0xc8(%rbp)
  40b784:	00 
  40b785:	75 28                	jne    40b7af <SendBlock+0xa12>
            EXIT_TRACE("Memory allocation failed.\n");
  40b787:	48 8b 05 f2 d1 24 00 	mov    0x24d1f2(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  40b78e:	ba 15 85 43 00       	mov    $0x438515,%edx
  40b793:	be 90 82 43 00       	mov    $0x438290,%esi
  40b798:	48 89 c7             	mov    %rax,%rdi
  40b79b:	b8 00 00 00 00       	mov    $0x0,%eax
  40b7a0:	e8 eb b7 ff ff       	callq  406f90 <fprintf@plt>
  40b7a5:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  40b7aa:	e8 71 b5 ff ff       	callq  406d20 <exit@plt>
          }

          tree->aid = body->anchorid;
  40b7af:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  40b7b6:	8b 50 04             	mov    0x4(%rax),%edx
  40b7b9:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  40b7c0:	89 10                	mov    %edx,(%rax)
          tree->queue = Initialize(INITIAL_SIZE);
  40b7c2:	bf 00 10 00 00       	mov    $0x1000,%edi
  40b7c7:	e8 7a b9 ff ff       	callq  407146 <Initialize>
  40b7cc:	48 89 c2             	mov    %rax,%rdx
  40b7cf:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  40b7d6:	48 89 50 08          	mov    %rdx,0x8(%rax)
          Insert(p, tree->queue);
  40b7da:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  40b7e1:	48 8b 50 08          	mov    0x8(%rax),%rdx
  40b7e5:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  40b7ec:	48 89 d6             	mov    %rdx,%rsi
  40b7ef:	48 89 c7             	mov    %rax,%rdi
  40b7f2:	e8 57 ba ff ff       	callq  40724e <Insert>
          T = TreeInsert(tree, T);
  40b7f7:	48 8b 95 c0 fe ff ff 	mov    -0x140(%rbp),%rdx
  40b7fe:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  40b805:	48 89 d6             	mov    %rdx,%rsi
  40b808:	48 89 c7             	mov    %rax,%rdi
  40b80b:	e8 a7 1e 00 00       	callq  40d6b7 <TreeInsert>
  40b810:	48 89 85 c0 fe ff ff 	mov    %rax,-0x140(%rbp)
  40b817:	eb 22                	jmp    40b83b <SendBlock+0xa9e>
        } else {
          Insert(p, pos->Element->queue);
  40b819:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  40b820:	48 8b 00             	mov    (%rax),%rax
  40b823:	48 8b 50 08          	mov    0x8(%rax),%rdx
  40b827:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  40b82e:	48 89 d6             	mov    %rdx,%rsi
  40b831:	48 89 c7             	mov    %rax,%rdi
  40b834:	e8 15 ba ff ff       	callq  40724e <Insert>
        }
      }
      break;
  40b839:	eb 03                	jmp    40b83e <SendBlock+0xaa1>
  40b83b:	eb 01                	jmp    40b83e <SendBlock+0xaa1>
      }
      if (xwrite(fd, head, sizeof(send_head)) < 0){
        EXIT_TRACE("xwrite head fails\n");
      }
      MEM_FREE(head);*/
      break;
  40b83d:	90                   	nop
    case TYPE_FINISH:
      break;
    }
  }
  40b83e:	e9 84 f7 ff ff       	jmpq   40afc7 <SendBlock+0x22a>

  //write the blocks left in the queue to the file
  pos = TreeFindMin(T);        
  40b843:	48 8b 85 c0 fe ff ff 	mov    -0x140(%rbp),%rax
  40b84a:	48 89 c7             	mov    %rax,%rdi
  40b84d:	e8 e1 1d 00 00       	callq  40d633 <TreeFindMin>
  40b852:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
  if (pos != NULL) {
  40b859:	48 83 bd 18 ff ff ff 	cmpq   $0x0,-0xe8(%rbp)
  40b860:	00 
  40b861:	0f 84 81 02 00 00    	je     40bae8 <SendBlock+0xd4b>
    tele = pos->Element;
  40b867:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  40b86e:	48 8b 00             	mov    (%rax),%rax
  40b871:	48 89 85 c8 fe ff ff 	mov    %rax,-0x138(%rbp)
    hele = FindMin(tele->queue);
  40b878:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  40b87f:	48 8b 40 08          	mov    0x8(%rax),%rax
  40b883:	48 89 c7             	mov    %rax,%rdi
  40b886:	e8 cf bc ff ff       	callq  40755a <FindMin>
  40b88b:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
    while (hele!= NULL) {
  40b892:	e9 43 02 00 00       	jmpq   40bada <SendBlock+0xd3d>
#ifdef PARALLEL
      pthread_mutex_t *ht_lock = hashtable_getlock(cache, (void *)hele->content);
  40b897:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  40b89e:	48 8b 50 10          	mov    0x10(%rax),%rdx
  40b8a2:	48 8b 05 17 f1 24 01 	mov    0x124f117(%rip),%rax        # 165a9c0 <cache>
  40b8a9:	48 89 d6             	mov    %rdx,%rsi
  40b8ac:	48 89 c7             	mov    %rax,%rdi
  40b8af:	e8 74 11 00 00       	callq  40ca28 <hashtable_getlock>
  40b8b4:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
      pthread_mutex_lock(ht_lock);
  40b8bb:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  40b8c2:	48 89 c7             	mov    %rax,%rdi
  40b8c5:	e8 b6 b4 ff ff       	callq  406d80 <pthread_mutex_lock@plt>
#endif
      if ((entry = hashtable_search(cache, (void *)hele->content)) != NULL) {
  40b8ca:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  40b8d1:	48 8b 50 10          	mov    0x10(%rax),%rdx
  40b8d5:	48 8b 05 e4 f0 24 01 	mov    0x124f0e4(%rip),%rax        # 165a9c0 <cache>
  40b8dc:	48 89 d6             	mov    %rdx,%rsi
  40b8df:	48 89 c7             	mov    %rax,%rdi
  40b8e2:	e8 56 12 00 00       	callq  40cb3d <hashtable_search>
  40b8e7:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
  40b8ee:	48 83 bd 08 ff ff ff 	cmpq   $0x0,-0xf8(%rbp)
  40b8f5:	00 
  40b8f6:	0f 84 27 01 00 00    	je     40ba23 <SendBlock+0xc86>
        struct pContent * value = ((struct pContent *)entry->v);
  40b8fc:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  40b903:	48 8b 40 08          	mov    0x8(%rax),%rax
  40b907:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
        if (value->tag == TAG_WRITTEN) {
  40b90e:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40b915:	0f b6 40 14          	movzbl 0x14(%rax),%eax
  40b919:	3c 02                	cmp    $0x2,%al
  40b91b:	75 45                	jne    40b962 <SendBlock+0xbc5>
#ifdef PARALLEL
          pthread_mutex_unlock(ht_lock);
  40b91d:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  40b924:	48 89 c7             	mov    %rax,%rdi
  40b927:	e8 14 b6 ff ff       	callq  406f40 <pthread_mutex_unlock@plt>
#endif
          write_file(fd, TYPE_FINGERPRINT, seq_count, hele->len, hele->content);
  40b92c:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  40b933:	48 8b 70 10          	mov    0x10(%rax),%rsi
  40b937:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  40b93e:	48 8b 48 08          	mov    0x8(%rax),%rcx
  40b942:	8b 95 ac fe ff ff    	mov    -0x154(%rbp),%edx
  40b948:	8b 85 b8 fe ff ff    	mov    -0x148(%rbp),%eax
  40b94e:	49 89 f0             	mov    %rsi,%r8
  40b951:	be 00 00 00 00       	mov    $0x0,%esi
  40b956:	89 c7                	mov    %eax,%edi
  40b958:	e8 e9 cf ff ff       	callq  408946 <write_file>
  40b95d:	e9 da 00 00 00       	jmpq   40ba3c <SendBlock+0xc9f>
        } else {            
#ifdef PARALLEL
          while (value->tag == TAG_OCCUPY) {
  40b962:	eb 1d                	jmp    40b981 <SendBlock+0xbe4>
            pthread_cond_wait(&value->empty, ht_lock);
  40b964:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40b96b:	48 8d 50 18          	lea    0x18(%rax),%rdx
  40b96f:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  40b976:	48 89 c6             	mov    %rax,%rsi
  40b979:	48 89 d7             	mov    %rdx,%rdi
  40b97c:	e8 2f b6 ff ff       	callq  406fb0 <pthread_cond_wait@plt>
          pthread_mutex_unlock(ht_lock);
#endif
          write_file(fd, TYPE_FINGERPRINT, seq_count, hele->len, hele->content);
        } else {            
#ifdef PARALLEL
          while (value->tag == TAG_OCCUPY) {
  40b981:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40b988:	0f b6 40 14          	movzbl 0x14(%rax),%eax
  40b98c:	84 c0                	test   %al,%al
  40b98e:	74 d4                	je     40b964 <SendBlock+0xbc7>
            pthread_cond_wait(&value->empty, ht_lock);
          }
#endif
          if (value->tag == TAG_DATAREADY) {
  40b990:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40b997:	0f b6 40 14          	movzbl 0x14(%rax),%eax
  40b99b:	3c 01                	cmp    $0x1,%al
  40b99d:	75 69                	jne    40ba08 <SendBlock+0xc6b>
            write_file(fd, TYPE_COMPRESS, seq_count, value->len, value->content);
  40b99f:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40b9a6:	48 8b 70 08          	mov    0x8(%rax),%rsi
  40b9aa:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40b9b1:	48 8b 08             	mov    (%rax),%rcx
  40b9b4:	8b 95 ac fe ff ff    	mov    -0x154(%rbp),%edx
  40b9ba:	8b 85 b8 fe ff ff    	mov    -0x148(%rbp),%eax
  40b9c0:	49 89 f0             	mov    %rsi,%r8
  40b9c3:	be 01 00 00 00       	mov    $0x1,%esi
  40b9c8:	89 c7                	mov    %eax,%edi
  40b9ca:	e8 77 cf ff ff       	callq  408946 <write_file>
            value->len = seq_count;
  40b9cf:	8b 85 ac fe ff ff    	mov    -0x154(%rbp),%eax
  40b9d5:	48 63 d0             	movslq %eax,%rdx
  40b9d8:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40b9df:	48 89 10             	mov    %rdx,(%rax)
            value->tag = TAG_WRITTEN;
  40b9e2:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40b9e9:	c6 40 14 02          	movb   $0x2,0x14(%rax)
            hashtable_change(entry, (void *)value);      
  40b9ed:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
  40b9f4:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  40b9fb:	48 89 d6             	mov    %rdx,%rsi
  40b9fe:	48 89 c7             	mov    %rax,%rdi
  40ba01:	e8 d8 11 00 00       	callq  40cbde <hashtable_change>
  40ba06:	eb 0a                	jmp    40ba12 <SendBlock+0xc75>
          } else {
            printf("Error: Illegal tag\n");
  40ba08:	bf 58 83 43 00       	mov    $0x438358,%edi
  40ba0d:	e8 be b2 ff ff       	callq  406cd0 <puts@plt>
          }
#ifdef PARALLEL
          pthread_mutex_unlock(ht_lock);
  40ba12:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  40ba19:	48 89 c7             	mov    %rax,%rdi
  40ba1c:	e8 1f b5 ff ff       	callq  406f40 <pthread_mutex_unlock@plt>
  40ba21:	eb 19                	jmp    40ba3c <SendBlock+0xc9f>
#endif
        }
      } else {
        printf("Error: Cannot find entry\n");
  40ba23:	bf 6b 83 43 00       	mov    $0x43836b,%edi
  40ba28:	e8 a3 b2 ff ff       	callq  406cd0 <puts@plt>
#ifdef PARALLEL
        pthread_mutex_unlock(ht_lock);
  40ba2d:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  40ba34:	48 89 c7             	mov    %rax,%rdi
  40ba37:	e8 04 b5 ff ff       	callq  406f40 <pthread_mutex_unlock@plt>
#endif
      }  
      seq_count ++;
  40ba3c:	83 85 ac fe ff ff 01 	addl   $0x1,-0x154(%rbp)
      DeleteMin(tele->queue);
  40ba43:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  40ba4a:	48 8b 40 08          	mov    0x8(%rax),%rax
  40ba4e:	48 89 c7             	mov    %rax,%rdi
  40ba51:	e8 92 b9 ff ff       	callq  4073e8 <DeleteMin>
      if (IsEmpty(tele->queue)) {
  40ba56:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  40ba5d:	48 8b 40 08          	mov    0x8(%rax),%rax
  40ba61:	48 89 c7             	mov    %rax,%rdi
  40ba64:	e8 22 bb ff ff       	callq  40758b <IsEmpty>
  40ba69:	85 c0                	test   %eax,%eax
  40ba6b:	74 53                	je     40bac0 <SendBlock+0xd23>
        T = TreeDelete(tele, T);
  40ba6d:	48 8b 95 c0 fe ff ff 	mov    -0x140(%rbp),%rdx
  40ba74:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  40ba7b:	48 89 d6             	mov    %rdx,%rsi
  40ba7e:	48 89 c7             	mov    %rax,%rdi
  40ba81:	e8 34 1d 00 00       	callq  40d7ba <TreeDelete>
  40ba86:	48 89 85 c0 fe ff ff 	mov    %rax,-0x140(%rbp)
        pos = TreeFindMin(T);
  40ba8d:	48 8b 85 c0 fe ff ff 	mov    -0x140(%rbp),%rax
  40ba94:	48 89 c7             	mov    %rax,%rdi
  40ba97:	e8 97 1b 00 00       	callq  40d633 <TreeFindMin>
  40ba9c:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
        if (pos == NULL) break;
  40baa3:	48 83 bd 18 ff ff ff 	cmpq   $0x0,-0xe8(%rbp)
  40baaa:	00 
  40baab:	75 02                	jne    40baaf <SendBlock+0xd12>
  40baad:	eb 39                	jmp    40bae8 <SendBlock+0xd4b>
        tele = pos->Element;
  40baaf:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  40bab6:	48 8b 00             	mov    (%rax),%rax
  40bab9:	48 89 85 c8 fe ff ff 	mov    %rax,-0x138(%rbp)
      }
      hele = FindMin(tele->queue);    
  40bac0:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  40bac7:	48 8b 40 08          	mov    0x8(%rax),%rax
  40bacb:	48 89 c7             	mov    %rax,%rdi
  40bace:	e8 87 ba ff ff       	callq  40755a <FindMin>
  40bad3:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  //write the blocks left in the queue to the file
  pos = TreeFindMin(T);        
  if (pos != NULL) {
    tele = pos->Element;
    hele = FindMin(tele->queue);
    while (hele!= NULL) {
  40bada:	48 83 bd d0 fe ff ff 	cmpq   $0x0,-0x130(%rbp)
  40bae1:	00 
  40bae2:	0f 85 af fd ff ff    	jne    40b897 <SendBlock+0xafa>
      }
      hele = FindMin(tele->queue);    
    }
  }
 
  u_char type = TYPE_FINISH;
  40bae8:	c6 85 97 fe ff ff 04 	movb   $0x4,-0x169(%rbp)
  if (xwrite(fd, &type, sizeof(type)) < 0){
  40baef:	48 8d 8d 97 fe ff ff 	lea    -0x169(%rbp),%rcx
  40baf6:	8b 85 b8 fe ff ff    	mov    -0x148(%rbp),%eax
  40bafc:	ba 01 00 00 00       	mov    $0x1,%edx
  40bb01:	48 89 ce             	mov    %rcx,%rsi
  40bb04:	89 c7                	mov    %eax,%edi
  40bb06:	e8 24 1f 00 00       	callq  40da2f <xwrite>
  40bb0b:	85 c0                	test   %eax,%eax
  40bb0d:	79 32                	jns    40bb41 <SendBlock+0xda4>
    perror("xwrite:");
  40bb0f:	bf 30 82 43 00       	mov    $0x438230,%edi
  40bb14:	e8 67 b4 ff ff       	callq  406f80 <perror@plt>
    EXIT_TRACE("xwrite type fails\n");
  40bb19:	48 8b 05 60 ce 24 00 	mov    0x24ce60(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  40bb20:	ba 15 85 43 00       	mov    $0x438515,%edx
  40bb25:	be 38 82 43 00       	mov    $0x438238,%esi
  40bb2a:	48 89 c7             	mov    %rax,%rdi
  40bb2d:	b8 00 00 00 00       	mov    $0x0,%eax
  40bb32:	e8 59 b4 ff ff       	callq  406f90 <fprintf@plt>
  40bb37:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  40bb3c:	e8 df b1 ff ff       	callq  406d20 <exit@plt>
    return NULL;
  }

  close(fd);
  40bb41:	8b 85 b8 fe ff ff    	mov    -0x148(%rbp),%eax
  40bb47:	89 c7                	mov    %eax,%edi
  40bb49:	e8 52 b1 ff ff       	callq  406ca0 <close@plt>

  return NULL;
  40bb4e:	b8 00 00 00 00       	mov    $0x0,%eax
}
  40bb53:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  40bb57:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  40bb5e:	00 00 
  40bb60:	74 05                	je     40bb67 <SendBlock+0xdca>
  40bb62:	e8 59 b3 ff ff       	callq  406ec0 <__stack_chk_fail@plt>
  40bb67:	c9                   	leaveq 
  40bb68:	c3                   	retq   

000000000040bb69 <Encode>:
 *   conf:		Configuration parameters
 *
 */
void 
Encode(config * conf)
{
  40bb69:	55                   	push   %rbp
  40bb6a:	48 89 e5             	mov    %rsp,%rbp
  40bb6d:	41 57                	push   %r15
  40bb6f:	41 56                	push   %r14
  40bb71:	41 55                	push   %r13
  40bb73:	41 54                	push   %r12
  40bb75:	53                   	push   %rbx
  40bb76:	48 81 ec f8 0a 00 00 	sub    $0xaf8,%rsp
  40bb7d:	48 89 bd 28 f5 ff ff 	mov    %rdi,-0xad8(%rbp)
  40bb84:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  40bb8b:	00 00 
  40bb8d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  40bb91:	31 c0                	xor    %eax,%eax
  struct stat filestat;

  //queue allocation & initialization
  // Here MAX_THREADS_PER_QUEUE is 4, that means we don't want too many threads 
  // are contending for a queue, so we limit the number of threads that one queue can serve 
  const int nqueues = (conf->nthreads / MAX_THREADS_PER_QUEUE) +
  40bb93:	48 8b 85 28 f5 ff ff 	mov    -0xad8(%rbp),%rax
  40bb9a:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  40bba0:	8d 50 03             	lea    0x3(%rax),%edx
  40bba3:	85 c0                	test   %eax,%eax
  40bba5:	0f 48 c2             	cmovs  %edx,%eax
  40bba8:	c1 f8 02             	sar    $0x2,%eax
  40bbab:	89 c2                	mov    %eax,%edx
                      ((conf->nthreads % MAX_THREADS_PER_QUEUE != 0) ? 1 : 0);
  40bbad:	48 8b 85 28 f5 ff ff 	mov    -0xad8(%rbp),%rax
  40bbb4:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  40bbba:	83 e0 03             	and    $0x3,%eax
  40bbbd:	85 c0                	test   %eax,%eax
  40bbbf:	0f 95 c0             	setne  %al
  40bbc2:	0f b6 c0             	movzbl %al,%eax
  struct stat filestat;

  //queue allocation & initialization
  // Here MAX_THREADS_PER_QUEUE is 4, that means we don't want too many threads 
  // are contending for a queue, so we limit the number of threads that one queue can serve 
  const int nqueues = (conf->nthreads / MAX_THREADS_PER_QUEUE) +
  40bbc5:	01 d0                	add    %edx,%eax
  40bbc7:	89 85 40 f5 ff ff    	mov    %eax,-0xac0(%rbp)
                      ((conf->nthreads % MAX_THREADS_PER_QUEUE != 0) ? 1 : 0);
  chunk_que = malloc(sizeof(struct queue) * nqueues);
  40bbcd:	8b 85 40 f5 ff ff    	mov    -0xac0(%rbp),%eax
  40bbd3:	48 63 d0             	movslq %eax,%rdx
  40bbd6:	48 89 d0             	mov    %rdx,%rax
  40bbd9:	48 c1 e0 02          	shl    $0x2,%rax
  40bbdd:	48 01 d0             	add    %rdx,%rax
  40bbe0:	48 c1 e0 02          	shl    $0x2,%rax
  40bbe4:	48 01 d0             	add    %rdx,%rax
  40bbe7:	48 c1 e0 03          	shl    $0x3,%rax
  40bbeb:	48 89 c7             	mov    %rax,%rdi
  40bbee:	e8 5d b1 ff ff       	callq  406d50 <malloc@plt>
  40bbf3:	48 89 05 96 ee e4 01 	mov    %rax,0x1e4ee96(%rip)        # 225aa90 <chunk_que>
  anchor_que = malloc(sizeof(struct queue) * nqueues);
  40bbfa:	8b 85 40 f5 ff ff    	mov    -0xac0(%rbp),%eax
  40bc00:	48 63 d0             	movslq %eax,%rdx
  40bc03:	48 89 d0             	mov    %rdx,%rax
  40bc06:	48 c1 e0 02          	shl    $0x2,%rax
  40bc0a:	48 01 d0             	add    %rdx,%rax
  40bc0d:	48 c1 e0 02          	shl    $0x2,%rax
  40bc11:	48 01 d0             	add    %rdx,%rax
  40bc14:	48 c1 e0 03          	shl    $0x3,%rax
  40bc18:	48 89 c7             	mov    %rax,%rdi
  40bc1b:	e8 30 b1 ff ff       	callq  406d50 <malloc@plt>
  40bc20:	48 89 05 19 ee a4 01 	mov    %rax,0x1a4ee19(%rip)        # 1e5aa40 <anchor_que>
  send_que = malloc(sizeof(struct queue) * nqueues);
  40bc27:	8b 85 40 f5 ff ff    	mov    -0xac0(%rbp),%eax
  40bc2d:	48 63 d0             	movslq %eax,%rdx
  40bc30:	48 89 d0             	mov    %rdx,%rax
  40bc33:	48 c1 e0 02          	shl    $0x2,%rax
  40bc37:	48 01 d0             	add    %rdx,%rax
  40bc3a:	48 c1 e0 02          	shl    $0x2,%rax
  40bc3e:	48 01 d0             	add    %rdx,%rax
  40bc41:	48 c1 e0 03          	shl    $0x3,%rax
  40bc45:	48 89 c7             	mov    %rax,%rdi
  40bc48:	e8 03 b1 ff ff       	callq  406d50 <malloc@plt>
  40bc4d:	48 89 05 fc ed a4 01 	mov    %rax,0x1a4edfc(%rip)        # 1e5aa50 <send_que>
  compress_que = malloc(sizeof(struct queue) * nqueues);
  40bc54:	8b 85 40 f5 ff ff    	mov    -0xac0(%rbp),%eax
  40bc5a:	48 63 d0             	movslq %eax,%rdx
  40bc5d:	48 89 d0             	mov    %rdx,%rax
  40bc60:	48 c1 e0 02          	shl    $0x2,%rax
  40bc64:	48 01 d0             	add    %rdx,%rax
  40bc67:	48 c1 e0 02          	shl    $0x2,%rax
  40bc6b:	48 01 d0             	add    %rdx,%rax
  40bc6e:	48 c1 e0 03          	shl    $0x3,%rax
  40bc72:	48 89 c7             	mov    %rax,%rdi
  40bc75:	e8 d6 b0 ff ff       	callq  406d50 <malloc@plt>
  40bc7a:	48 89 05 ff ed e4 01 	mov    %rax,0x1e4edff(%rip)        # 225aa80 <compress_que>
  if( (chunk_que == NULL) || (anchor_que == NULL) || (send_que == NULL) || (compress_que == NULL)) {
  40bc81:	48 8b 05 08 ee e4 01 	mov    0x1e4ee08(%rip),%rax        # 225aa90 <chunk_que>
  40bc88:	48 85 c0             	test   %rax,%rax
  40bc8b:	74 24                	je     40bcb1 <Encode+0x148>
  40bc8d:	48 8b 05 ac ed a4 01 	mov    0x1a4edac(%rip),%rax        # 1e5aa40 <anchor_que>
  40bc94:	48 85 c0             	test   %rax,%rax
  40bc97:	74 18                	je     40bcb1 <Encode+0x148>
  40bc99:	48 8b 05 b0 ed a4 01 	mov    0x1a4edb0(%rip),%rax        # 1e5aa50 <send_que>
  40bca0:	48 85 c0             	test   %rax,%rax
  40bca3:	74 0c                	je     40bcb1 <Encode+0x148>
  40bca5:	48 8b 05 d4 ed e4 01 	mov    0x1e4edd4(%rip),%rax        # 225aa80 <compress_que>
  40bcac:	48 85 c0             	test   %rax,%rax
  40bcaf:	75 14                	jne    40bcc5 <Encode+0x15c>
    printf("Out of memory\n");
  40bcb1:	bf 84 83 43 00       	mov    $0x438384,%edi
  40bcb6:	e8 15 b0 ff ff       	callq  406cd0 <puts@plt>
    exit(1);
  40bcbb:	bf 01 00 00 00       	mov    $0x1,%edi
  40bcc0:	e8 5b b0 ff ff       	callq  406d20 <exit@plt>
  }
  int threads_per_queue;
  for(int i=0; i<nqueues; i++) {
  40bcc5:	c7 85 38 f5 ff ff 00 	movl   $0x0,-0xac8(%rbp)
  40bccc:	00 00 00 
  40bccf:	e9 47 01 00 00       	jmpq   40be1b <Encode+0x2b2>
    if (i < nqueues -1 || conf->nthreads %MAX_THREADS_PER_QUEUE == 0) {
  40bcd4:	8b 85 40 f5 ff ff    	mov    -0xac0(%rbp),%eax
  40bcda:	83 e8 01             	sub    $0x1,%eax
  40bcdd:	3b 85 38 f5 ff ff    	cmp    -0xac8(%rbp),%eax
  40bce3:	7f 14                	jg     40bcf9 <Encode+0x190>
  40bce5:	48 8b 85 28 f5 ff ff 	mov    -0xad8(%rbp),%rax
  40bcec:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  40bcf2:	83 e0 03             	and    $0x3,%eax
  40bcf5:	85 c0                	test   %eax,%eax
  40bcf7:	75 0c                	jne    40bd05 <Encode+0x19c>
      //all but last queue
      threads_per_queue = MAX_THREADS_PER_QUEUE;
  40bcf9:	c7 85 34 f5 ff ff 04 	movl   $0x4,-0xacc(%rbp)
  40bd00:	00 00 00 
  40bd03:	eb 1e                	jmp    40bd23 <Encode+0x1ba>
    } else {
      //remaining threads work on last queue
      threads_per_queue = conf->nthreads %MAX_THREADS_PER_QUEUE;
  40bd05:	48 8b 85 28 f5 ff ff 	mov    -0xad8(%rbp),%rax
  40bd0c:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  40bd12:	99                   	cltd   
  40bd13:	c1 ea 1e             	shr    $0x1e,%edx
  40bd16:	01 d0                	add    %edx,%eax
  40bd18:	83 e0 03             	and    $0x3,%eax
  40bd1b:	29 d0                	sub    %edx,%eax
  40bd1d:	89 85 34 f5 ff ff    	mov    %eax,-0xacc(%rbp)
    }    

    //call queue_init with threads_per_queue
    queue_init(&chunk_que[i], QUEUE_SIZE, threads_per_queue);
  40bd23:	48 8b 0d 66 ed e4 01 	mov    0x1e4ed66(%rip),%rcx        # 225aa90 <chunk_que>
  40bd2a:	8b 85 38 f5 ff ff    	mov    -0xac8(%rbp),%eax
  40bd30:	48 63 d0             	movslq %eax,%rdx
  40bd33:	48 89 d0             	mov    %rdx,%rax
  40bd36:	48 c1 e0 02          	shl    $0x2,%rax
  40bd3a:	48 01 d0             	add    %rdx,%rax
  40bd3d:	48 c1 e0 02          	shl    $0x2,%rax
  40bd41:	48 01 d0             	add    %rdx,%rax
  40bd44:	48 c1 e0 03          	shl    $0x3,%rax
  40bd48:	48 01 c1             	add    %rax,%rcx
  40bd4b:	8b 85 34 f5 ff ff    	mov    -0xacc(%rbp),%eax
  40bd51:	89 c2                	mov    %eax,%edx
  40bd53:	be 00 00 10 00       	mov    $0x100000,%esi
  40bd58:	48 89 cf             	mov    %rcx,%rdi
  40bd5b:	e8 0d 11 00 00       	callq  40ce6d <queue_init>
    queue_init(&anchor_que[i], QUEUE_SIZE, 1);
  40bd60:	48 8b 0d d9 ec a4 01 	mov    0x1a4ecd9(%rip),%rcx        # 1e5aa40 <anchor_que>
  40bd67:	8b 85 38 f5 ff ff    	mov    -0xac8(%rbp),%eax
  40bd6d:	48 63 d0             	movslq %eax,%rdx
  40bd70:	48 89 d0             	mov    %rdx,%rax
  40bd73:	48 c1 e0 02          	shl    $0x2,%rax
  40bd77:	48 01 d0             	add    %rdx,%rax
  40bd7a:	48 c1 e0 02          	shl    $0x2,%rax
  40bd7e:	48 01 d0             	add    %rdx,%rax
  40bd81:	48 c1 e0 03          	shl    $0x3,%rax
  40bd85:	48 01 c8             	add    %rcx,%rax
  40bd88:	ba 01 00 00 00       	mov    $0x1,%edx
  40bd8d:	be 00 00 10 00       	mov    $0x100000,%esi
  40bd92:	48 89 c7             	mov    %rax,%rdi
  40bd95:	e8 d3 10 00 00       	callq  40ce6d <queue_init>
    queue_init(&send_que[i], QUEUE_SIZE, threads_per_queue);
  40bd9a:	48 8b 0d af ec a4 01 	mov    0x1a4ecaf(%rip),%rcx        # 1e5aa50 <send_que>
  40bda1:	8b 85 38 f5 ff ff    	mov    -0xac8(%rbp),%eax
  40bda7:	48 63 d0             	movslq %eax,%rdx
  40bdaa:	48 89 d0             	mov    %rdx,%rax
  40bdad:	48 c1 e0 02          	shl    $0x2,%rax
  40bdb1:	48 01 d0             	add    %rdx,%rax
  40bdb4:	48 c1 e0 02          	shl    $0x2,%rax
  40bdb8:	48 01 d0             	add    %rdx,%rax
  40bdbb:	48 c1 e0 03          	shl    $0x3,%rax
  40bdbf:	48 01 c1             	add    %rax,%rcx
  40bdc2:	8b 85 34 f5 ff ff    	mov    -0xacc(%rbp),%eax
  40bdc8:	89 c2                	mov    %eax,%edx
  40bdca:	be 00 00 10 00       	mov    $0x100000,%esi
  40bdcf:	48 89 cf             	mov    %rcx,%rdi
  40bdd2:	e8 96 10 00 00       	callq  40ce6d <queue_init>
    queue_init(&compress_que[i], QUEUE_SIZE, threads_per_queue);
  40bdd7:	48 8b 0d a2 ec e4 01 	mov    0x1e4eca2(%rip),%rcx        # 225aa80 <compress_que>
  40bdde:	8b 85 38 f5 ff ff    	mov    -0xac8(%rbp),%eax
  40bde4:	48 63 d0             	movslq %eax,%rdx
  40bde7:	48 89 d0             	mov    %rdx,%rax
  40bdea:	48 c1 e0 02          	shl    $0x2,%rax
  40bdee:	48 01 d0             	add    %rdx,%rax
  40bdf1:	48 c1 e0 02          	shl    $0x2,%rax
  40bdf5:	48 01 d0             	add    %rdx,%rax
  40bdf8:	48 c1 e0 03          	shl    $0x3,%rax
  40bdfc:	48 01 c1             	add    %rax,%rcx
  40bdff:	8b 85 34 f5 ff ff    	mov    -0xacc(%rbp),%eax
  40be05:	89 c2                	mov    %eax,%edx
  40be07:	be 00 00 10 00       	mov    $0x100000,%esi
  40be0c:	48 89 cf             	mov    %rcx,%rdi
  40be0f:	e8 59 10 00 00       	callq  40ce6d <queue_init>
  if( (chunk_que == NULL) || (anchor_que == NULL) || (send_que == NULL) || (compress_que == NULL)) {
    printf("Out of memory\n");
    exit(1);
  }
  int threads_per_queue;
  for(int i=0; i<nqueues; i++) {
  40be14:	83 85 38 f5 ff ff 01 	addl   $0x1,-0xac8(%rbp)
  40be1b:	8b 85 38 f5 ff ff    	mov    -0xac8(%rbp),%eax
  40be21:	3b 85 40 f5 ff ff    	cmp    -0xac0(%rbp),%eax
  40be27:	0f 8c a7 fe ff ff    	jl     40bcd4 <Encode+0x16b>
    queue_init(&anchor_que[i], QUEUE_SIZE, 1);
    queue_init(&send_que[i], QUEUE_SIZE, threads_per_queue);
    queue_init(&compress_que[i], QUEUE_SIZE, threads_per_queue);
  }

  memset(chunks_per_anchor, 0, sizeof(chunks_per_anchor));
  40be2d:	ba 00 00 40 00       	mov    $0x400000,%edx
  40be32:	be 00 00 00 00       	mov    $0x0,%esi
  40be37:	bf 80 aa e5 01       	mov    $0x1e5aa80,%edi
  40be3c:	e8 3f ae ff ff       	callq  406c80 <memset@plt>

  //initialize output file header
  headitem = (send_buf_item *)malloc(sizeof(send_buf_item));
  40be41:	bf 20 00 00 00       	mov    $0x20,%edi
  40be46:	e8 05 af ff ff       	callq  406d50 <malloc@plt>
  40be4b:	48 89 05 f6 eb a4 01 	mov    %rax,0x1a4ebf6(%rip)        # 1e5aa48 <headitem>
  if(headitem == NULL) {
  40be52:	48 8b 05 ef eb a4 01 	mov    0x1a4ebef(%rip),%rax        # 1e5aa48 <headitem>
  40be59:	48 85 c0             	test   %rax,%rax
  40be5c:	75 28                	jne    40be86 <Encode+0x31d>
    EXIT_TRACE("Memory allocation failed.\n");
  40be5e:	48 8b 05 1b cb 24 00 	mov    0x24cb1b(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  40be65:	ba 1f 85 43 00       	mov    $0x43851f,%edx
  40be6a:	be 90 82 43 00       	mov    $0x438290,%esi
  40be6f:	48 89 c7             	mov    %rax,%rdi
  40be72:	b8 00 00 00 00       	mov    $0x0,%eax
  40be77:	e8 14 b1 ff ff       	callq  406f90 <fprintf@plt>
  40be7c:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  40be81:	e8 9a ae ff ff       	callq  406d20 <exit@plt>
  }

  headitem->type = TYPE_HEAD;
  40be86:	48 8b 05 bb eb a4 01 	mov    0x1a4ebbb(%rip),%rax        # 1e5aa48 <headitem>
  40be8d:	c6 00 03             	movb   $0x3,(%rax)
  send_head * head = (send_head *)malloc(sizeof(send_head));
  40be90:	bf 68 00 00 00       	mov    $0x68,%edi
  40be95:	e8 b6 ae ff ff       	callq  406d50 <malloc@plt>
  40be9a:	48 89 85 58 f5 ff ff 	mov    %rax,-0xaa8(%rbp)
  if(head == NULL) {
  40bea1:	48 83 bd 58 f5 ff ff 	cmpq   $0x0,-0xaa8(%rbp)
  40bea8:	00 
  40bea9:	75 28                	jne    40bed3 <Encode+0x36a>
    EXIT_TRACE("Memory allocation failed.\n");
  40beab:	48 8b 05 ce ca 24 00 	mov    0x24cace(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  40beb2:	ba 1f 85 43 00       	mov    $0x43851f,%edx
  40beb7:	be 90 82 43 00       	mov    $0x438290,%esi
  40bebc:	48 89 c7             	mov    %rax,%rdi
  40bebf:	b8 00 00 00 00       	mov    $0x0,%eax
  40bec4:	e8 c7 b0 ff ff       	callq  406f90 <fprintf@plt>
  40bec9:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  40bece:	e8 4d ae ff ff       	callq  406d20 <exit@plt>
  }

  strcpy(head->filename, conf->infile);
  40bed3:	48 8b 95 28 f5 ff ff 	mov    -0xad8(%rbp),%rdx
  40beda:	48 8b 85 58 f5 ff ff 	mov    -0xaa8(%rbp),%rax
  40bee1:	48 89 d6             	mov    %rdx,%rsi
  40bee4:	48 89 c7             	mov    %rax,%rdi
  40bee7:	e8 04 b0 ff ff       	callq  406ef0 <strcpy@plt>
  filecount ++;
  40beec:	8b 05 c2 cd 24 00    	mov    0x24cdc2(%rip),%eax        # 658cb4 <filecount>
  40bef2:	83 c0 01             	add    $0x1,%eax
  40bef5:	89 05 b9 cd 24 00    	mov    %eax,0x24cdb9(%rip)        # 658cb4 <filecount>
  head->fid = filecount;
  40befb:	8b 05 b3 cd 24 00    	mov    0x24cdb3(%rip),%eax        # 658cb4 <filecount>
  40bf01:	89 c2                	mov    %eax,%edx
  40bf03:	48 8b 85 58 f5 ff ff 	mov    -0xaa8(%rbp),%rax
  40bf0a:	89 50 64             	mov    %edx,0x64(%rax)
  chunkcount = 0;
  40bf0d:	c7 05 a1 cd 24 00 00 	movl   $0x0,0x24cda1(%rip)        # 658cb8 <chunkcount>
  40bf14:	00 00 00 
  headitem->str = (u_char * )head;
  40bf17:	48 8b 05 2a eb a4 01 	mov    0x1a4eb2a(%rip),%rax        # 1e5aa48 <headitem>
  40bf1e:	48 8b 95 58 f5 ff ff 	mov    -0xaa8(%rbp),%rdx
  40bf25:	48 89 50 08          	mov    %rdx,0x8(%rax)
  send_buf_item * frombuf[1];
  frombuf[0] = item;
  enqueue(&send_que[0], &fetch_count_tmp, (void **)frombuf);
  */
   /* src file stat */
  if (stat(conf->infile, &filestat) < 0) 
  40bf29:	48 8b 85 28 f5 ff ff 	mov    -0xad8(%rbp),%rax
  40bf30:	48 8d 95 d0 f5 ff ff 	lea    -0xa30(%rbp),%rdx
  40bf37:	48 89 d6             	mov    %rdx,%rsi
  40bf3a:	48 89 c7             	mov    %rax,%rdi
  40bf3d:	e8 ae bc 02 00       	callq  437bf0 <__stat>
  40bf42:	85 c0                	test   %eax,%eax
  40bf44:	79 46                	jns    40bf8c <Encode+0x423>
      EXIT_TRACE("stat() %s failed: %s\n", conf->infile, strerror(errno));
  40bf46:	e8 55 af ff ff       	callq  406ea0 <__errno_location@plt>
  40bf4b:	8b 00                	mov    (%rax),%eax
  40bf4d:	89 c7                	mov    %eax,%edi
  40bf4f:	e8 dc ae ff ff       	callq  406e30 <strerror@plt>
  40bf54:	48 89 c1             	mov    %rax,%rcx
  40bf57:	48 8b 95 28 f5 ff ff 	mov    -0xad8(%rbp),%rdx
  40bf5e:	48 8b 05 1b ca 24 00 	mov    0x24ca1b(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  40bf65:	49 89 c8             	mov    %rcx,%r8
  40bf68:	48 89 d1             	mov    %rdx,%rcx
  40bf6b:	ba 1f 85 43 00       	mov    $0x43851f,%edx
  40bf70:	be 92 83 43 00       	mov    $0x438392,%esi
  40bf75:	48 89 c7             	mov    %rax,%rdi
  40bf78:	b8 00 00 00 00       	mov    $0x0,%eax
  40bf7d:	e8 0e b0 ff ff       	callq  406f90 <fprintf@plt>
  40bf82:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  40bf87:	e8 94 ad ff ff       	callq  406d20 <exit@plt>

    if (!S_ISREG(filestat.st_mode)) 
  40bf8c:	8b 85 e8 f5 ff ff    	mov    -0xa18(%rbp),%eax
  40bf92:	25 00 f0 00 00       	and    $0xf000,%eax
  40bf97:	3d 00 80 00 00       	cmp    $0x8000,%eax
  40bf9c:	74 32                	je     40bfd0 <Encode+0x467>
      EXIT_TRACE("not a normal file: %s\n", conf->infile);
  40bf9e:	48 8b 95 28 f5 ff ff 	mov    -0xad8(%rbp),%rdx
  40bfa5:	48 8b 05 d4 c9 24 00 	mov    0x24c9d4(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  40bfac:	48 89 d1             	mov    %rdx,%rcx
  40bfaf:	ba 1f 85 43 00       	mov    $0x43851f,%edx
  40bfb4:	be ad 83 43 00       	mov    $0x4383ad,%esi
  40bfb9:	48 89 c7             	mov    %rax,%rdi
  40bfbc:	b8 00 00 00 00       	mov    $0x0,%eax
  40bfc1:	e8 ca af ff ff       	callq  406f90 <fprintf@plt>
  40bfc6:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  40bfcb:	e8 50 ad ff ff       	callq  406d20 <exit@plt>

    /* src file open */
    if((fd = open(conf->infile, O_RDONLY | O_LARGEFILE)) < 0) 
  40bfd0:	48 8b 85 28 f5 ff ff 	mov    -0xad8(%rbp),%rax
  40bfd7:	be 00 80 00 00       	mov    $0x8000,%esi
  40bfdc:	48 89 c7             	mov    %rax,%rdi
  40bfdf:	b8 00 00 00 00       	mov    $0x0,%eax
  40bfe4:	e8 17 b0 ff ff       	callq  407000 <open@plt>
  40bfe9:	89 85 44 f5 ff ff    	mov    %eax,-0xabc(%rbp)
  40bfef:	83 bd 44 f5 ff ff 00 	cmpl   $0x0,-0xabc(%rbp)
  40bff6:	79 46                	jns    40c03e <Encode+0x4d5>
      EXIT_TRACE("%s file open error %s\n", conf->infile, strerror(errno));
  40bff8:	e8 a3 ae ff ff       	callq  406ea0 <__errno_location@plt>
  40bffd:	8b 00                	mov    (%rax),%eax
  40bfff:	89 c7                	mov    %eax,%edi
  40c001:	e8 2a ae ff ff       	callq  406e30 <strerror@plt>
  40c006:	48 89 c1             	mov    %rax,%rcx
  40c009:	48 8b 95 28 f5 ff ff 	mov    -0xad8(%rbp),%rdx
  40c010:	48 8b 05 69 c9 24 00 	mov    0x24c969(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  40c017:	49 89 c8             	mov    %rcx,%r8
  40c01a:	48 89 d1             	mov    %rdx,%rcx
  40c01d:	ba 1f 85 43 00       	mov    $0x43851f,%edx
  40c022:	be c9 83 43 00       	mov    $0x4383c9,%esi
  40c027:	48 89 c7             	mov    %rax,%rdi
  40c02a:	b8 00 00 00 00       	mov    $0x0,%eax
  40c02f:	e8 5c af ff ff       	callq  406f90 <fprintf@plt>
  40c034:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  40c039:	e8 e2 ac ff ff       	callq  406d20 <exit@plt>
    threads_chunk[MAX_THREADS],
    threads_compress[MAX_THREADS],
    threads_send, threads_process;

  struct thread_args data_process_args;
  data_process_args.tid = 0;
  40c03e:	c7 85 90 f5 ff ff 00 	movl   $0x0,-0xa70(%rbp)
  40c045:	00 00 00 
  data_process_args.nqueues = nqueues;
  40c048:	8b 85 40 f5 ff ff    	mov    -0xac0(%rbp),%eax
  40c04e:	89 85 94 f5 ff ff    	mov    %eax,-0xa6c(%rbp)
  data_process_args.fd = fd;
  40c054:	8b 85 44 f5 ff ff    	mov    -0xabc(%rbp),%eax
  40c05a:	89 85 98 f5 ff ff    	mov    %eax,-0xa68(%rbp)
  if (conf->preloading) {
  40c060:	48 8b 85 28 f5 ff ff 	mov    -0xad8(%rbp),%rax
  40c067:	8b 80 cc 00 00 00    	mov    0xcc(%rax),%eax
  40c06d:	85 c0                	test   %eax,%eax
  40c06f:	74 11                	je     40c082 <Encode+0x519>
    //Preload entire file if selected by user to reduce I/O during parallel phase
    DataProcess(&data_process_args);
  40c071:	48 8d 85 90 f5 ff ff 	lea    -0xa70(%rbp),%rax
  40c078:	48 89 c7             	mov    %rax,%rdi
  40c07b:	e8 17 e7 ff ff       	callq  40a797 <DataProcess>
  40c080:	eb 20                	jmp    40c0a2 <Encode+0x539>
  } else {
#ifdef ENABLE_PARSEC_HOOKS
    __parsec_roi_begin();
#endif
    //thread for first pipeline stage (input)
    pthread_create(&threads_process, NULL, DataProcess, &data_process_args);
  40c082:	48 8d 85 90 f5 ff ff 	lea    -0xa70(%rbp),%rax
  40c089:	48 8d bd 50 f5 ff ff 	lea    -0xab0(%rbp),%rdi
  40c090:	48 89 c1             	mov    %rax,%rcx
  40c093:	ba 97 a7 40 00       	mov    $0x40a797,%edx
  40c098:	be 00 00 00 00       	mov    $0x0,%esi
  40c09d:	e8 7e ad ff ff       	callq  406e20 <pthread_create@plt>
  }

  fprintf(stderr, "%d: Check dataprocessing's memory now\n", getpid());
  40c0a2:	e8 c9 ac ff ff       	callq  406d70 <getpid@plt>
  40c0a7:	48 8b 0d d2 c8 24 00 	mov    0x24c8d2(%rip),%rcx        # 658980 <stderr@@GLIBC_2.2.5>
  40c0ae:	89 c2                	mov    %eax,%edx
  40c0b0:	be e8 83 43 00       	mov    $0x4383e8,%esi
  40c0b5:	48 89 cf             	mov    %rcx,%rdi
  40c0b8:	b8 00 00 00 00       	mov    $0x0,%eax
  40c0bd:	e8 ce ae ff ff       	callq  406f90 <fprintf@plt>
  int i;

  //Create 3 thread pools for the intermediate pipeline stages
  struct thread_args chunk_thread_args[conf->nthreads];
  40c0c2:	48 8b 85 28 f5 ff ff 	mov    -0xad8(%rbp),%rax
  40c0c9:	8b b0 d0 00 00 00    	mov    0xd0(%rax),%esi
  40c0cf:	48 89 e0             	mov    %rsp,%rax
  40c0d2:	48 89 85 20 f5 ff ff 	mov    %rax,-0xae0(%rbp)
  40c0d9:	48 63 c6             	movslq %esi,%rax
  40c0dc:	48 83 e8 01          	sub    $0x1,%rax
  40c0e0:	48 89 85 60 f5 ff ff 	mov    %rax,-0xaa0(%rbp)
  40c0e7:	48 63 c6             	movslq %esi,%rax
  40c0ea:	49 89 c4             	mov    %rax,%r12
  40c0ed:	41 bd 00 00 00 00    	mov    $0x0,%r13d
  40c0f3:	49 69 d5 c0 00 00 00 	imul   $0xc0,%r13,%rdx
  40c0fa:	49 6b c4 00          	imul   $0x0,%r12,%rax
  40c0fe:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  40c102:	b8 c0 00 00 00       	mov    $0xc0,%eax
  40c107:	49 f7 e4             	mul    %r12
  40c10a:	48 01 d1             	add    %rdx,%rcx
  40c10d:	48 89 ca             	mov    %rcx,%rdx
  40c110:	48 63 d6             	movslq %esi,%rdx
  40c113:	48 89 d0             	mov    %rdx,%rax
  40c116:	48 01 c0             	add    %rax,%rax
  40c119:	48 01 d0             	add    %rdx,%rax
  40c11c:	48 c1 e0 03          	shl    $0x3,%rax
  40c120:	48 63 c6             	movslq %esi,%rax
  40c123:	48 89 85 10 f5 ff ff 	mov    %rax,-0xaf0(%rbp)
  40c12a:	48 c7 85 18 f5 ff ff 	movq   $0x0,-0xae8(%rbp)
  40c131:	00 00 00 00 
  40c135:	4c 8b 8d 10 f5 ff ff 	mov    -0xaf0(%rbp),%r9
  40c13c:	4c 8b 95 18 f5 ff ff 	mov    -0xae8(%rbp),%r10
  40c143:	49 69 d2 c0 00 00 00 	imul   $0xc0,%r10,%rdx
  40c14a:	49 6b c1 00          	imul   $0x0,%r9,%rax
  40c14e:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  40c152:	b8 c0 00 00 00       	mov    $0xc0,%eax
  40c157:	49 f7 e1             	mul    %r9
  40c15a:	48 01 d1             	add    %rdx,%rcx
  40c15d:	48 89 ca             	mov    %rcx,%rdx
  40c160:	48 63 d6             	movslq %esi,%rdx
  40c163:	48 89 d0             	mov    %rdx,%rax
  40c166:	48 01 c0             	add    %rax,%rax
  40c169:	48 01 d0             	add    %rdx,%rax
  40c16c:	48 c1 e0 03          	shl    $0x3,%rax
  40c170:	48 8d 50 07          	lea    0x7(%rax),%rdx
  40c174:	b8 10 00 00 00       	mov    $0x10,%eax
  40c179:	48 83 e8 01          	sub    $0x1,%rax
  40c17d:	48 01 d0             	add    %rdx,%rax
  40c180:	bb 10 00 00 00       	mov    $0x10,%ebx
  40c185:	ba 00 00 00 00       	mov    $0x0,%edx
  40c18a:	48 f7 f3             	div    %rbx
  40c18d:	48 6b c0 10          	imul   $0x10,%rax,%rax
  40c191:	48 29 c4             	sub    %rax,%rsp
  40c194:	48 89 e0             	mov    %rsp,%rax
  40c197:	48 83 c0 07          	add    $0x7,%rax
  40c19b:	48 c1 e8 03          	shr    $0x3,%rax
  40c19f:	48 c1 e0 03          	shl    $0x3,%rax
  40c1a3:	48 89 85 68 f5 ff ff 	mov    %rax,-0xa98(%rbp)
  for (i = 0; i < conf->nthreads; i ++) {
  40c1aa:	c7 85 3c f5 ff ff 00 	movl   $0x0,-0xac4(%rbp)
  40c1b1:	00 00 00 
  40c1b4:	eb 7c                	jmp    40c232 <Encode+0x6c9>
    chunk_thread_args[i].tid = i;
  40c1b6:	48 8b 8d 68 f5 ff ff 	mov    -0xa98(%rbp),%rcx
  40c1bd:	8b 85 3c f5 ff ff    	mov    -0xac4(%rbp),%eax
  40c1c3:	48 63 d0             	movslq %eax,%rdx
  40c1c6:	48 89 d0             	mov    %rdx,%rax
  40c1c9:	48 01 c0             	add    %rax,%rax
  40c1cc:	48 01 d0             	add    %rdx,%rax
  40c1cf:	48 c1 e0 03          	shl    $0x3,%rax
  40c1d3:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  40c1d7:	8b 85 3c f5 ff ff    	mov    -0xac4(%rbp),%eax
  40c1dd:	89 02                	mov    %eax,(%rdx)
    pthread_create(&threads_chunk[i], NULL, ChunkProcess, &chunk_thread_args[i]);
  40c1df:	8b 85 3c f5 ff ff    	mov    -0xac4(%rbp),%eax
  40c1e5:	48 63 d0             	movslq %eax,%rdx
  40c1e8:	48 89 d0             	mov    %rdx,%rax
  40c1eb:	48 01 c0             	add    %rax,%rax
  40c1ee:	48 01 d0             	add    %rdx,%rax
  40c1f1:	48 c1 e0 03          	shl    $0x3,%rax
  40c1f5:	48 8b 95 68 f5 ff ff 	mov    -0xa98(%rbp),%rdx
  40c1fc:	48 01 c2             	add    %rax,%rdx
  40c1ff:	48 8d 85 80 f9 ff ff 	lea    -0x680(%rbp),%rax
  40c206:	8b 8d 3c f5 ff ff    	mov    -0xac4(%rbp),%ecx
  40c20c:	48 63 c9             	movslq %ecx,%rcx
  40c20f:	48 c1 e1 03          	shl    $0x3,%rcx
  40c213:	48 01 c8             	add    %rcx,%rax
  40c216:	48 89 d1             	mov    %rdx,%rcx
  40c219:	ba d5 93 40 00       	mov    $0x4093d5,%edx
  40c21e:	be 00 00 00 00       	mov    $0x0,%esi
  40c223:	48 89 c7             	mov    %rax,%rdi
  40c226:	e8 f5 ab ff ff       	callq  406e20 <pthread_create@plt>
  fprintf(stderr, "%d: Check dataprocessing's memory now\n", getpid());
  int i;

  //Create 3 thread pools for the intermediate pipeline stages
  struct thread_args chunk_thread_args[conf->nthreads];
  for (i = 0; i < conf->nthreads; i ++) {
  40c22b:	83 85 3c f5 ff ff 01 	addl   $0x1,-0xac4(%rbp)
  40c232:	48 8b 85 28 f5 ff ff 	mov    -0xad8(%rbp),%rax
  40c239:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  40c23f:	3b 85 3c f5 ff ff    	cmp    -0xac4(%rbp),%eax
  40c245:	0f 8f 6b ff ff ff    	jg     40c1b6 <Encode+0x64d>
    chunk_thread_args[i].tid = i;
    pthread_create(&threads_chunk[i], NULL, ChunkProcess, &chunk_thread_args[i]);
  }

  fprintf(stderr, "%d: Creating chunkprocess\n", getpid());
  40c24b:	e8 20 ab ff ff       	callq  406d70 <getpid@plt>
  40c250:	89 c2                	mov    %eax,%edx
  40c252:	48 8b 05 27 c7 24 00 	mov    0x24c727(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  40c259:	be 0f 84 43 00       	mov    $0x43840f,%esi
  40c25e:	48 89 c7             	mov    %rax,%rdi
  40c261:	b8 00 00 00 00       	mov    $0x0,%eax
  40c266:	e8 25 ad ff ff       	callq  406f90 <fprintf@plt>
  struct thread_args anchor_thread_args[conf->nthreads];
  40c26b:	48 8b 85 28 f5 ff ff 	mov    -0xad8(%rbp),%rax
  40c272:	8b b8 d0 00 00 00    	mov    0xd0(%rax),%edi
  40c278:	48 89 e2             	mov    %rsp,%rdx
  40c27b:	48 89 d3             	mov    %rdx,%rbx
  40c27e:	48 63 d7             	movslq %edi,%rdx
  40c281:	48 83 ea 01          	sub    $0x1,%rdx
  40c285:	48 89 95 70 f5 ff ff 	mov    %rdx,-0xa90(%rbp)
  40c28c:	48 63 d7             	movslq %edi,%rdx
  40c28f:	48 89 95 00 f5 ff ff 	mov    %rdx,-0xb00(%rbp)
  40c296:	48 c7 85 08 f5 ff ff 	movq   $0x0,-0xaf8(%rbp)
  40c29d:	00 00 00 00 
  40c2a1:	4c 8b 85 00 f5 ff ff 	mov    -0xb00(%rbp),%r8
  40c2a8:	4c 8b 8d 08 f5 ff ff 	mov    -0xaf8(%rbp),%r9
  40c2af:	49 69 c9 c0 00 00 00 	imul   $0xc0,%r9,%rcx
  40c2b6:	49 6b d0 00          	imul   $0x0,%r8,%rdx
  40c2ba:	48 8d 34 11          	lea    (%rcx,%rdx,1),%rsi
  40c2be:	b9 c0 00 00 00       	mov    $0xc0,%ecx
  40c2c3:	48 89 c8             	mov    %rcx,%rax
  40c2c6:	49 f7 e0             	mul    %r8
  40c2c9:	48 89 d1             	mov    %rdx,%rcx
  40c2cc:	48 89 c2             	mov    %rax,%rdx
  40c2cf:	48 01 ce             	add    %rcx,%rsi
  40c2d2:	48 89 f1             	mov    %rsi,%rcx
  40c2d5:	48 63 cf             	movslq %edi,%rcx
  40c2d8:	48 89 ca             	mov    %rcx,%rdx
  40c2db:	48 01 d2             	add    %rdx,%rdx
  40c2de:	48 01 ca             	add    %rcx,%rdx
  40c2e1:	48 c1 e2 03          	shl    $0x3,%rdx
  40c2e5:	48 63 d7             	movslq %edi,%rdx
  40c2e8:	48 89 95 f0 f4 ff ff 	mov    %rdx,-0xb10(%rbp)
  40c2ef:	48 c7 85 f8 f4 ff ff 	movq   $0x0,-0xb08(%rbp)
  40c2f6:	00 00 00 00 
  40c2fa:	4c 8b 9d f0 f4 ff ff 	mov    -0xb10(%rbp),%r11
  40c301:	4c 8b a5 f8 f4 ff ff 	mov    -0xb08(%rbp),%r12
  40c308:	49 69 cc c0 00 00 00 	imul   $0xc0,%r12,%rcx
  40c30f:	49 6b d3 00          	imul   $0x0,%r11,%rdx
  40c313:	48 8d 34 11          	lea    (%rcx,%rdx,1),%rsi
  40c317:	b9 c0 00 00 00       	mov    $0xc0,%ecx
  40c31c:	48 89 c8             	mov    %rcx,%rax
  40c31f:	49 f7 e3             	mul    %r11
  40c322:	48 89 d1             	mov    %rdx,%rcx
  40c325:	48 89 c2             	mov    %rax,%rdx
  40c328:	48 01 ce             	add    %rcx,%rsi
  40c32b:	48 89 f1             	mov    %rsi,%rcx
  40c32e:	48 63 d7             	movslq %edi,%rdx
  40c331:	48 89 d0             	mov    %rdx,%rax
  40c334:	48 01 c0             	add    %rax,%rax
  40c337:	48 01 d0             	add    %rdx,%rax
  40c33a:	48 c1 e0 03          	shl    $0x3,%rax
  40c33e:	48 8d 50 07          	lea    0x7(%rax),%rdx
  40c342:	b8 10 00 00 00       	mov    $0x10,%eax
  40c347:	48 83 e8 01          	sub    $0x1,%rax
  40c34b:	48 01 d0             	add    %rdx,%rax
  40c34e:	be 10 00 00 00       	mov    $0x10,%esi
  40c353:	ba 00 00 00 00       	mov    $0x0,%edx
  40c358:	48 f7 f6             	div    %rsi
  40c35b:	48 6b c0 10          	imul   $0x10,%rax,%rax
  40c35f:	48 29 c4             	sub    %rax,%rsp
  40c362:	48 89 e0             	mov    %rsp,%rax
  40c365:	48 83 c0 07          	add    $0x7,%rax
  40c369:	48 c1 e8 03          	shr    $0x3,%rax
  40c36d:	48 c1 e0 03          	shl    $0x3,%rax
  40c371:	48 89 85 78 f5 ff ff 	mov    %rax,-0xa88(%rbp)
  for (i = 0; i < conf->nthreads; i ++) {
  40c378:	c7 85 3c f5 ff ff 00 	movl   $0x0,-0xac4(%rbp)
  40c37f:	00 00 00 
  40c382:	eb 7c                	jmp    40c400 <Encode+0x897>
     anchor_thread_args[i].tid = i;
  40c384:	48 8b 8d 78 f5 ff ff 	mov    -0xa88(%rbp),%rcx
  40c38b:	8b 85 3c f5 ff ff    	mov    -0xac4(%rbp),%eax
  40c391:	48 63 d0             	movslq %eax,%rdx
  40c394:	48 89 d0             	mov    %rdx,%rax
  40c397:	48 01 c0             	add    %rax,%rax
  40c39a:	48 01 d0             	add    %rdx,%rax
  40c39d:	48 c1 e0 03          	shl    $0x3,%rax
  40c3a1:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  40c3a5:	8b 85 3c f5 ff ff    	mov    -0xac4(%rbp),%eax
  40c3ab:	89 02                	mov    %eax,(%rdx)
     pthread_create(&threads_anchor[i], NULL, FindAllAnchors, &anchor_thread_args[i]);
  40c3ad:	8b 85 3c f5 ff ff    	mov    -0xac4(%rbp),%eax
  40c3b3:	48 63 d0             	movslq %eax,%rdx
  40c3b6:	48 89 d0             	mov    %rdx,%rax
  40c3b9:	48 01 c0             	add    %rax,%rax
  40c3bc:	48 01 d0             	add    %rdx,%rax
  40c3bf:	48 c1 e0 03          	shl    $0x3,%rax
  40c3c3:	48 8b 95 78 f5 ff ff 	mov    -0xa88(%rbp),%rdx
  40c3ca:	48 01 c2             	add    %rax,%rdx
  40c3cd:	48 8d 85 60 f6 ff ff 	lea    -0x9a0(%rbp),%rax
  40c3d4:	8b 8d 3c f5 ff ff    	mov    -0xac4(%rbp),%ecx
  40c3da:	48 63 c9             	movslq %ecx,%rcx
  40c3dd:	48 c1 e1 03          	shl    $0x3,%rcx
  40c3e1:	48 01 c8             	add    %rcx,%rax
  40c3e4:	48 89 d1             	mov    %rdx,%rcx
  40c3e7:	ba 59 97 40 00       	mov    $0x409759,%edx
  40c3ec:	be 00 00 00 00       	mov    $0x0,%esi
  40c3f1:	48 89 c7             	mov    %rax,%rdi
  40c3f4:	e8 27 aa ff ff       	callq  406e20 <pthread_create@plt>
    pthread_create(&threads_chunk[i], NULL, ChunkProcess, &chunk_thread_args[i]);
  }

  fprintf(stderr, "%d: Creating chunkprocess\n", getpid());
  struct thread_args anchor_thread_args[conf->nthreads];
  for (i = 0; i < conf->nthreads; i ++) {
  40c3f9:	83 85 3c f5 ff ff 01 	addl   $0x1,-0xac4(%rbp)
  40c400:	48 8b 85 28 f5 ff ff 	mov    -0xad8(%rbp),%rax
  40c407:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  40c40d:	3b 85 3c f5 ff ff    	cmp    -0xac4(%rbp),%eax
  40c413:	0f 8f 6b ff ff ff    	jg     40c384 <Encode+0x81b>
     anchor_thread_args[i].tid = i;
     pthread_create(&threads_anchor[i], NULL, FindAllAnchors, &anchor_thread_args[i]);
  }
  fprintf(stderr, "%d: Find all anchors' process\n", getpid());
  40c419:	e8 52 a9 ff ff       	callq  406d70 <getpid@plt>
  40c41e:	89 c2                	mov    %eax,%edx
  40c420:	48 8b 05 59 c5 24 00 	mov    0x24c559(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  40c427:	be 30 84 43 00       	mov    $0x438430,%esi
  40c42c:	48 89 c7             	mov    %rax,%rdi
  40c42f:	b8 00 00 00 00       	mov    $0x0,%eax
  40c434:	e8 57 ab ff ff       	callq  406f90 <fprintf@plt>

  struct thread_args compress_thread_args[conf->nthreads];
  40c439:	48 8b 85 28 f5 ff ff 	mov    -0xad8(%rbp),%rax
  40c440:	8b b8 d0 00 00 00    	mov    0xd0(%rax),%edi
  40c446:	48 89 e2             	mov    %rsp,%rdx
  40c449:	49 89 d4             	mov    %rdx,%r12
  40c44c:	48 63 d7             	movslq %edi,%rdx
  40c44f:	48 83 ea 01          	sub    $0x1,%rdx
  40c453:	48 89 95 80 f5 ff ff 	mov    %rdx,-0xa80(%rbp)
  40c45a:	48 63 d7             	movslq %edi,%rdx
  40c45d:	48 89 95 e0 f4 ff ff 	mov    %rdx,-0xb20(%rbp)
  40c464:	48 c7 85 e8 f4 ff ff 	movq   $0x0,-0xb18(%rbp)
  40c46b:	00 00 00 00 
  40c46f:	4c 8b 95 e0 f4 ff ff 	mov    -0xb20(%rbp),%r10
  40c476:	4c 8b 9d e8 f4 ff ff 	mov    -0xb18(%rbp),%r11
  40c47d:	49 69 cb c0 00 00 00 	imul   $0xc0,%r11,%rcx
  40c484:	49 6b d2 00          	imul   $0x0,%r10,%rdx
  40c488:	48 8d 34 11          	lea    (%rcx,%rdx,1),%rsi
  40c48c:	b9 c0 00 00 00       	mov    $0xc0,%ecx
  40c491:	48 89 c8             	mov    %rcx,%rax
  40c494:	49 f7 e2             	mul    %r10
  40c497:	48 89 d1             	mov    %rdx,%rcx
  40c49a:	48 89 c2             	mov    %rax,%rdx
  40c49d:	48 01 ce             	add    %rcx,%rsi
  40c4a0:	48 89 f1             	mov    %rsi,%rcx
  40c4a3:	48 63 cf             	movslq %edi,%rcx
  40c4a6:	48 89 ca             	mov    %rcx,%rdx
  40c4a9:	48 01 d2             	add    %rdx,%rdx
  40c4ac:	48 01 ca             	add    %rcx,%rdx
  40c4af:	48 c1 e2 03          	shl    $0x3,%rdx
  40c4b3:	48 63 d7             	movslq %edi,%rdx
  40c4b6:	49 89 d6             	mov    %rdx,%r14
  40c4b9:	41 bf 00 00 00 00    	mov    $0x0,%r15d
  40c4bf:	49 69 cf c0 00 00 00 	imul   $0xc0,%r15,%rcx
  40c4c6:	49 6b d6 00          	imul   $0x0,%r14,%rdx
  40c4ca:	48 8d 34 11          	lea    (%rcx,%rdx,1),%rsi
  40c4ce:	b9 c0 00 00 00       	mov    $0xc0,%ecx
  40c4d3:	48 89 c8             	mov    %rcx,%rax
  40c4d6:	49 f7 e6             	mul    %r14
  40c4d9:	48 89 d1             	mov    %rdx,%rcx
  40c4dc:	48 89 c2             	mov    %rax,%rdx
  40c4df:	48 01 ce             	add    %rcx,%rsi
  40c4e2:	48 89 f1             	mov    %rsi,%rcx
  40c4e5:	48 63 d7             	movslq %edi,%rdx
  40c4e8:	48 89 d0             	mov    %rdx,%rax
  40c4eb:	48 01 c0             	add    %rax,%rax
  40c4ee:	48 01 d0             	add    %rdx,%rax
  40c4f1:	48 c1 e0 03          	shl    $0x3,%rax
  40c4f5:	48 8d 50 07          	lea    0x7(%rax),%rdx
  40c4f9:	b8 10 00 00 00       	mov    $0x10,%eax
  40c4fe:	48 83 e8 01          	sub    $0x1,%rax
  40c502:	48 01 d0             	add    %rdx,%rax
  40c505:	be 10 00 00 00       	mov    $0x10,%esi
  40c50a:	ba 00 00 00 00       	mov    $0x0,%edx
  40c50f:	48 f7 f6             	div    %rsi
  40c512:	48 6b c0 10          	imul   $0x10,%rax,%rax
  40c516:	48 29 c4             	sub    %rax,%rsp
  40c519:	48 89 e0             	mov    %rsp,%rax
  40c51c:	48 83 c0 07          	add    $0x7,%rax
  40c520:	48 c1 e8 03          	shr    $0x3,%rax
  40c524:	48 c1 e0 03          	shl    $0x3,%rax
  40c528:	48 89 85 88 f5 ff ff 	mov    %rax,-0xa78(%rbp)
  for (i = 0; i < conf->nthreads; i ++) {
  40c52f:	c7 85 3c f5 ff ff 00 	movl   $0x0,-0xac4(%rbp)
  40c536:	00 00 00 
  40c539:	eb 7c                	jmp    40c5b7 <Encode+0xa4e>
    compress_thread_args[i].tid = i;
  40c53b:	48 8b 8d 88 f5 ff ff 	mov    -0xa78(%rbp),%rcx
  40c542:	8b 85 3c f5 ff ff    	mov    -0xac4(%rbp),%eax
  40c548:	48 63 d0             	movslq %eax,%rdx
  40c54b:	48 89 d0             	mov    %rdx,%rax
  40c54e:	48 01 c0             	add    %rax,%rax
  40c551:	48 01 d0             	add    %rdx,%rax
  40c554:	48 c1 e0 03          	shl    $0x3,%rax
  40c558:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  40c55c:	8b 85 3c f5 ff ff    	mov    -0xac4(%rbp),%eax
  40c562:	89 02                	mov    %eax,(%rdx)
    pthread_create(&threads_compress[i], NULL, Compress, &compress_thread_args[i]);
  40c564:	8b 85 3c f5 ff ff    	mov    -0xac4(%rbp),%eax
  40c56a:	48 63 d0             	movslq %eax,%rdx
  40c56d:	48 89 d0             	mov    %rdx,%rax
  40c570:	48 01 c0             	add    %rax,%rax
  40c573:	48 01 d0             	add    %rdx,%rax
  40c576:	48 c1 e0 03          	shl    $0x3,%rax
  40c57a:	48 8b 95 88 f5 ff ff 	mov    -0xa78(%rbp),%rdx
  40c581:	48 01 c2             	add    %rax,%rdx
  40c584:	48 8d 85 a0 fc ff ff 	lea    -0x360(%rbp),%rax
  40c58b:	8b 8d 3c f5 ff ff    	mov    -0xac4(%rbp),%ecx
  40c591:	48 63 c9             	movslq %ecx,%rcx
  40c594:	48 c1 e1 03          	shl    $0x3,%rcx
  40c598:	48 01 c8             	add    %rcx,%rax
  40c59b:	48 89 d1             	mov    %rdx,%rcx
  40c59e:	ba 3c 8d 40 00       	mov    $0x408d3c,%edx
  40c5a3:	be 00 00 00 00       	mov    $0x0,%esi
  40c5a8:	48 89 c7             	mov    %rax,%rdi
  40c5ab:	e8 70 a8 ff ff       	callq  406e20 <pthread_create@plt>
     pthread_create(&threads_anchor[i], NULL, FindAllAnchors, &anchor_thread_args[i]);
  }
  fprintf(stderr, "%d: Find all anchors' process\n", getpid());

  struct thread_args compress_thread_args[conf->nthreads];
  for (i = 0; i < conf->nthreads; i ++) {
  40c5b0:	83 85 3c f5 ff ff 01 	addl   $0x1,-0xac4(%rbp)
  40c5b7:	48 8b 85 28 f5 ff ff 	mov    -0xad8(%rbp),%rax
  40c5be:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  40c5c4:	3b 85 3c f5 ff ff    	cmp    -0xac4(%rbp),%eax
  40c5ca:	0f 8f 6b ff ff ff    	jg     40c53b <Encode+0x9d2>
    compress_thread_args[i].tid = i;
    pthread_create(&threads_compress[i], NULL, Compress, &compress_thread_args[i]);
  }
  fprintf(stderr, "%d: compress process\n", getpid());
  40c5d0:	e8 9b a7 ff ff       	callq  406d70 <getpid@plt>
  40c5d5:	89 c2                	mov    %eax,%edx
  40c5d7:	48 8b 05 a2 c3 24 00 	mov    0x24c3a2(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  40c5de:	be 4f 84 43 00       	mov    $0x43844f,%esi
  40c5e3:	48 89 c7             	mov    %rax,%rdi
  40c5e6:	b8 00 00 00 00       	mov    $0x0,%eax
  40c5eb:	e8 a0 a9 ff ff       	callq  406f90 <fprintf@plt>

  //thread for last pipeline stage (output)
  struct thread_args send_block_args;
  send_block_args.tid = 0;
  40c5f0:	c7 85 b0 f5 ff ff 00 	movl   $0x0,-0xa50(%rbp)
  40c5f7:	00 00 00 
  send_block_args.nqueues = nqueues;
  40c5fa:	8b 85 40 f5 ff ff    	mov    -0xac0(%rbp),%eax
  40c600:	89 85 b4 f5 ff ff    	mov    %eax,-0xa4c(%rbp)
  send_block_args.conf = conf;
  40c606:	48 8b 85 28 f5 ff ff 	mov    -0xad8(%rbp),%rax
  40c60d:	48 89 85 c0 f5 ff ff 	mov    %rax,-0xa40(%rbp)
  if (!conf->preloading) {
  40c614:	48 8b 85 28 f5 ff ff 	mov    -0xad8(%rbp),%rax
  40c61b:	8b 80 cc 00 00 00    	mov    0xcc(%rax),%eax
  40c621:	85 c0                	test   %eax,%eax
  40c623:	75 23                	jne    40c648 <Encode+0xadf>
    pthread_create(&threads_send, NULL, SendBlock, &send_block_args);
  40c625:	48 8d 95 b0 f5 ff ff 	lea    -0xa50(%rbp),%rdx
  40c62c:	48 8d 85 48 f5 ff ff 	lea    -0xab8(%rbp),%rax
  40c633:	48 89 d1             	mov    %rdx,%rcx
  40c636:	ba 9d ad 40 00       	mov    $0x40ad9d,%edx
  40c63b:	be 00 00 00 00       	mov    $0x0,%esi
  40c640:	48 89 c7             	mov    %rax,%rdi
  40c643:	e8 d8 a7 ff ff       	callq  406e20 <pthread_create@plt>
  }
  
  fprintf(stderr, "%d: sending block process\n", getpid());
  40c648:	e8 23 a7 ff ff       	callq  406d70 <getpid@plt>
  40c64d:	89 c2                	mov    %eax,%edx
  40c64f:	48 8b 05 2a c3 24 00 	mov    0x24c32a(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  40c656:	be 65 84 43 00       	mov    $0x438465,%esi
  40c65b:	48 89 c7             	mov    %rax,%rdi
  40c65e:	b8 00 00 00 00       	mov    $0x0,%eax
  40c663:	e8 28 a9 ff ff       	callq  406f90 <fprintf@plt>

  /*** parallel phase ***/

  //join all threads 
  if (!conf->preloading) {
  40c668:	48 8b 85 28 f5 ff ff 	mov    -0xad8(%rbp),%rax
  40c66f:	8b 80 cc 00 00 00    	mov    0xcc(%rax),%eax
  40c675:	85 c0                	test   %eax,%eax
  40c677:	75 14                	jne    40c68d <Encode+0xb24>
    pthread_join(threads_process, NULL);
  40c679:	48 8b 85 50 f5 ff ff 	mov    -0xab0(%rbp),%rax
  40c680:	be 00 00 00 00       	mov    $0x0,%esi
  40c685:	48 89 c7             	mov    %rax,%rdi
  40c688:	e8 a3 a9 ff ff       	callq  407030 <pthread_join@plt>
  }

 for (i = 0; i < conf->nthreads; i ++)
  40c68d:	c7 85 3c f5 ff ff 00 	movl   $0x0,-0xac4(%rbp)
  40c694:	00 00 00 
  40c697:	eb 24                	jmp    40c6bd <Encode+0xb54>
    pthread_join(threads_anchor[i], NULL);
  40c699:	8b 85 3c f5 ff ff    	mov    -0xac4(%rbp),%eax
  40c69f:	48 98                	cltq   
  40c6a1:	48 8b 84 c5 60 f6 ff 	mov    -0x9a0(%rbp,%rax,8),%rax
  40c6a8:	ff 
  40c6a9:	be 00 00 00 00       	mov    $0x0,%esi
  40c6ae:	48 89 c7             	mov    %rax,%rdi
  40c6b1:	e8 7a a9 ff ff       	callq  407030 <pthread_join@plt>
  //join all threads 
  if (!conf->preloading) {
    pthread_join(threads_process, NULL);
  }

 for (i = 0; i < conf->nthreads; i ++)
  40c6b6:	83 85 3c f5 ff ff 01 	addl   $0x1,-0xac4(%rbp)
  40c6bd:	48 8b 85 28 f5 ff ff 	mov    -0xad8(%rbp),%rax
  40c6c4:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  40c6ca:	3b 85 3c f5 ff ff    	cmp    -0xac4(%rbp),%eax
  40c6d0:	7f c7                	jg     40c699 <Encode+0xb30>
    pthread_join(threads_anchor[i], NULL);

  for (i = 0; i < conf->nthreads; i ++)
  40c6d2:	c7 85 3c f5 ff ff 00 	movl   $0x0,-0xac4(%rbp)
  40c6d9:	00 00 00 
  40c6dc:	eb 24                	jmp    40c702 <Encode+0xb99>
    pthread_join(threads_chunk[i], NULL);
  40c6de:	8b 85 3c f5 ff ff    	mov    -0xac4(%rbp),%eax
  40c6e4:	48 98                	cltq   
  40c6e6:	48 8b 84 c5 80 f9 ff 	mov    -0x680(%rbp,%rax,8),%rax
  40c6ed:	ff 
  40c6ee:	be 00 00 00 00       	mov    $0x0,%esi
  40c6f3:	48 89 c7             	mov    %rax,%rdi
  40c6f6:	e8 35 a9 ff ff       	callq  407030 <pthread_join@plt>
  }

 for (i = 0; i < conf->nthreads; i ++)
    pthread_join(threads_anchor[i], NULL);

  for (i = 0; i < conf->nthreads; i ++)
  40c6fb:	83 85 3c f5 ff ff 01 	addl   $0x1,-0xac4(%rbp)
  40c702:	48 8b 85 28 f5 ff ff 	mov    -0xad8(%rbp),%rax
  40c709:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  40c70f:	3b 85 3c f5 ff ff    	cmp    -0xac4(%rbp),%eax
  40c715:	7f c7                	jg     40c6de <Encode+0xb75>
    pthread_join(threads_chunk[i], NULL);

  for (i = 0; i < conf->nthreads; i ++)
  40c717:	c7 85 3c f5 ff ff 00 	movl   $0x0,-0xac4(%rbp)
  40c71e:	00 00 00 
  40c721:	eb 24                	jmp    40c747 <Encode+0xbde>
    pthread_join(threads_compress[i], NULL);
  40c723:	8b 85 3c f5 ff ff    	mov    -0xac4(%rbp),%eax
  40c729:	48 98                	cltq   
  40c72b:	48 8b 84 c5 a0 fc ff 	mov    -0x360(%rbp,%rax,8),%rax
  40c732:	ff 
  40c733:	be 00 00 00 00       	mov    $0x0,%esi
  40c738:	48 89 c7             	mov    %rax,%rdi
  40c73b:	e8 f0 a8 ff ff       	callq  407030 <pthread_join@plt>
    pthread_join(threads_anchor[i], NULL);

  for (i = 0; i < conf->nthreads; i ++)
    pthread_join(threads_chunk[i], NULL);

  for (i = 0; i < conf->nthreads; i ++)
  40c740:	83 85 3c f5 ff ff 01 	addl   $0x1,-0xac4(%rbp)
  40c747:	48 8b 85 28 f5 ff ff 	mov    -0xad8(%rbp),%rax
  40c74e:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  40c754:	3b 85 3c f5 ff ff    	cmp    -0xac4(%rbp),%eax
  40c75a:	7f c7                	jg     40c723 <Encode+0xbba>
    pthread_join(threads_compress[i], NULL);

  if (conf->preloading) {
  40c75c:	48 8b 85 28 f5 ff ff 	mov    -0xad8(%rbp),%rax
  40c763:	8b 80 cc 00 00 00    	mov    0xcc(%rax),%eax
  40c769:	85 c0                	test   %eax,%eax
  40c76b:	74 11                	je     40c77e <Encode+0xc15>
#ifdef ENABLE_PARSEC_HOOKS
    __parsec_roi_end();
#endif
    SendBlock(&send_block_args);
  40c76d:	48 8d 85 b0 f5 ff ff 	lea    -0xa50(%rbp),%rax
  40c774:	48 89 c7             	mov    %rax,%rdi
  40c777:	e8 21 e6 ff ff       	callq  40ad9d <SendBlock>
  40c77c:	eb 14                	jmp    40c792 <Encode+0xc29>
  } else {
    pthread_join(threads_send, NULL);
  40c77e:	48 8b 85 48 f5 ff ff 	mov    -0xab8(%rbp),%rax
  40c785:	be 00 00 00 00       	mov    $0x0,%esi
  40c78a:	48 89 c7             	mov    %rax,%rdi
  40c78d:	e8 9e a8 ff ff       	callq  407030 <pthread_join@plt>
#ifdef ENABLE_PARSEC_HOOKS
    __parsec_roi_end();
#endif
  }
  fprintf(stderr, "doing process\n");
  40c792:	48 8b 05 e7 c1 24 00 	mov    0x24c1e7(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  40c799:	48 89 c1             	mov    %rax,%rcx
  40c79c:	ba 0e 00 00 00       	mov    $0xe,%edx
  40c7a1:	be 01 00 00 00       	mov    $0x1,%esi
  40c7a6:	bf 80 84 43 00       	mov    $0x438480,%edi
  40c7ab:	e8 b0 a7 ff ff       	callq  406f60 <fwrite@plt>
#endif
  }
  
#endif //PARALLEL

  fprintf(stderr, "dumping scan numbers\n");
  40c7b0:	48 8b 05 c9 c1 24 00 	mov    0x24c1c9(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  40c7b7:	48 89 c1             	mov    %rax,%rcx
  40c7ba:	ba 15 00 00 00       	mov    $0x15,%edx
  40c7bf:	be 01 00 00 00       	mov    $0x1,%esi
  40c7c4:	bf 8f 84 43 00       	mov    $0x43848f,%edi
  40c7c9:	e8 92 a7 ff ff       	callq  406f60 <fwrite@plt>
  void dump_scannums();
  dump_scannums();
  40c7ce:	b8 00 00 00 00       	mov    $0x0,%eax
  40c7d3:	e8 37 13 00 00       	callq  40db0f <dump_scannums>

  /* clean up with the src file */
  if (conf->infile != NULL)
  40c7d8:	48 8b 85 28 f5 ff ff 	mov    -0xad8(%rbp),%rax
  40c7df:	48 85 c0             	test   %rax,%rax
  40c7e2:	74 0d                	je     40c7f1 <Encode+0xc88>
    close(fd);
  40c7e4:	8b 85 44 f5 ff ff    	mov    -0xabc(%rbp),%eax
  40c7ea:	89 c7                	mov    %eax,%edi
  40c7ec:	e8 af a4 ff ff       	callq  406ca0 <close@plt>
  40c7f1:	4c 89 e4             	mov    %r12,%rsp
  40c7f4:	48 89 dc             	mov    %rbx,%rsp
  40c7f7:	48 8b a5 20 f5 ff ff 	mov    -0xae0(%rbp),%rsp
}
  40c7fe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40c802:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  40c809:	00 00 
  40c80b:	74 05                	je     40c812 <Encode+0xca9>
  40c80d:	e8 ae a6 ff ff       	callq  406ec0 <__stack_chk_fail@plt>
  40c812:	48 8d 65 d8          	lea    -0x28(%rbp),%rsp
  40c816:	5b                   	pop    %rbx
  40c817:	41 5c                	pop    %r12
  40c819:	41 5d                	pop    %r13
  40c81b:	41 5e                	pop    %r14
  40c81d:	41 5f                	pop    %r15
  40c81f:	5d                   	pop    %rbp
  40c820:	c3                   	retq   

000000000040c821 <indexFor>:
hash(struct hashtable *h, void *k);

/*****************************************************************************/
/* indexFor */
static inline unsigned int
indexFor(unsigned int tablelength, unsigned int hashvalue) {
  40c821:	55                   	push   %rbp
  40c822:	48 89 e5             	mov    %rsp,%rbp
  40c825:	89 7d fc             	mov    %edi,-0x4(%rbp)
  40c828:	89 75 f8             	mov    %esi,-0x8(%rbp)
    return (hashvalue % tablelength);
  40c82b:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40c82e:	ba 00 00 00 00       	mov    $0x0,%edx
  40c833:	f7 75 fc             	divl   -0x4(%rbp)
  40c836:	89 d0                	mov    %edx,%eax
};
  40c838:	5d                   	pop    %rbp
  40c839:	c3                   	retq   

000000000040c83a <create_hashtable>:
/*****************************************************************************/
struct hashtable *
create_hashtable(unsigned int minsize,
                 unsigned int (*hashf) (void*),
                 int (*eqf) (void*,void*))
{
  40c83a:	55                   	push   %rbp
  40c83b:	48 89 e5             	mov    %rsp,%rbp
  40c83e:	48 83 ec 40          	sub    $0x40,%rsp
  40c842:	89 7d dc             	mov    %edi,-0x24(%rbp)
  40c845:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40c849:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    struct hashtable *h;
    unsigned int pindex, size = primes[0];
  40c84d:	c7 45 f0 35 00 00 00 	movl   $0x35,-0x10(%rbp)
    /* Check requested hashtable isn't too large */
    if (minsize > (1u << 30)) return NULL;
  40c854:	81 7d dc 00 00 00 40 	cmpl   $0x40000000,-0x24(%rbp)
  40c85b:	76 0a                	jbe    40c867 <create_hashtable+0x2d>
  40c85d:	b8 00 00 00 00       	mov    $0x0,%eax
  40c862:	e9 68 01 00 00       	jmpq   40c9cf <create_hashtable+0x195>
    /* Enforce size as prime */
    for (pindex=0; pindex < prime_table_length; pindex++) {
  40c867:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  40c86e:	eb 22                	jmp    40c892 <create_hashtable+0x58>
        if (primes[pindex] > minsize) { size = primes[pindex]; break; }
  40c870:	8b 45 ec             	mov    -0x14(%rbp),%eax
  40c873:	8b 04 85 40 85 43 00 	mov    0x438540(,%rax,4),%eax
  40c87a:	3b 45 dc             	cmp    -0x24(%rbp),%eax
  40c87d:	76 0f                	jbe    40c88e <create_hashtable+0x54>
  40c87f:	8b 45 ec             	mov    -0x14(%rbp),%eax
  40c882:	8b 04 85 40 85 43 00 	mov    0x438540(,%rax,4),%eax
  40c889:	89 45 f0             	mov    %eax,-0x10(%rbp)
  40c88c:	eb 0e                	jmp    40c89c <create_hashtable+0x62>
    struct hashtable *h;
    unsigned int pindex, size = primes[0];
    /* Check requested hashtable isn't too large */
    if (minsize > (1u << 30)) return NULL;
    /* Enforce size as prime */
    for (pindex=0; pindex < prime_table_length; pindex++) {
  40c88e:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  40c892:	b8 1a 00 00 00       	mov    $0x1a,%eax
  40c897:	39 45 ec             	cmp    %eax,-0x14(%rbp)
  40c89a:	72 d4                	jb     40c870 <create_hashtable+0x36>
        if (primes[pindex] > minsize) { size = primes[pindex]; break; }
    }
    h = (struct hashtable *)malloc(sizeof(struct hashtable));
  40c89c:	bf 28 00 00 00       	mov    $0x28,%edi
  40c8a1:	e8 aa a4 ff ff       	callq  406d50 <malloc@plt>
  40c8a6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    if (NULL == h) return NULL; /*oom*/
  40c8aa:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40c8af:	75 0a                	jne    40c8bb <create_hashtable+0x81>
  40c8b1:	b8 00 00 00 00       	mov    $0x0,%eax
  40c8b6:	e9 14 01 00 00       	jmpq   40c9cf <create_hashtable+0x195>
    h->table = (struct hash_entry **)malloc(sizeof(struct hash_entry*) * size);
  40c8bb:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40c8be:	48 c1 e0 03          	shl    $0x3,%rax
  40c8c2:	48 89 c7             	mov    %rax,%rdi
  40c8c5:	e8 86 a4 ff ff       	callq  406d50 <malloc@plt>
  40c8ca:	48 89 c2             	mov    %rax,%rdx
  40c8cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c8d1:	48 89 50 08          	mov    %rdx,0x8(%rax)
    if (NULL == h->table) { free(h); return NULL; } /*oom*/
  40c8d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c8d9:	48 8b 40 08          	mov    0x8(%rax),%rax
  40c8dd:	48 85 c0             	test   %rax,%rax
  40c8e0:	75 16                	jne    40c8f8 <create_hashtable+0xbe>
  40c8e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c8e6:	48 89 c7             	mov    %rax,%rdi
  40c8e9:	e8 b2 a4 ff ff       	callq  406da0 <free@plt>
  40c8ee:	b8 00 00 00 00       	mov    $0x0,%eax
  40c8f3:	e9 d7 00 00 00       	jmpq   40c9cf <create_hashtable+0x195>
    memset(h->table, 0, size * sizeof(struct hash_entry *));
  40c8f8:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40c8fb:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  40c902:	00 
  40c903:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c907:	48 8b 40 08          	mov    0x8(%rax),%rax
  40c90b:	be 00 00 00 00       	mov    $0x0,%esi
  40c910:	48 89 c7             	mov    %rax,%rdi
  40c913:	e8 68 a3 ff ff       	callq  406c80 <memset@plt>
    h->tablelength  = size;
  40c918:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c91c:	8b 55 f0             	mov    -0x10(%rbp),%edx
  40c91f:	89 10                	mov    %edx,(%rax)
#ifdef PARALLEL
    //allocate and initialize array with locks
    h->locks = (pthread_mutex_t *)malloc(sizeof(pthread_mutex_t) * size);
  40c921:	8b 55 f0             	mov    -0x10(%rbp),%edx
  40c924:	48 89 d0             	mov    %rdx,%rax
  40c927:	48 c1 e0 02          	shl    $0x2,%rax
  40c92b:	48 01 d0             	add    %rdx,%rax
  40c92e:	48 c1 e0 03          	shl    $0x3,%rax
  40c932:	48 89 c7             	mov    %rax,%rdi
  40c935:	e8 16 a4 ff ff       	callq  406d50 <malloc@plt>
  40c93a:	48 89 c2             	mov    %rax,%rdx
  40c93d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c941:	48 89 50 10          	mov    %rdx,0x10(%rax)
    if(NULL == h->locks) {free(h->table); free(h); return NULL;} /*oom*/
  40c945:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c949:	48 8b 40 10          	mov    0x10(%rax),%rax
  40c94d:	48 85 c0             	test   %rax,%rax
  40c950:	75 23                	jne    40c975 <create_hashtable+0x13b>
  40c952:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c956:	48 8b 40 08          	mov    0x8(%rax),%rax
  40c95a:	48 89 c7             	mov    %rax,%rdi
  40c95d:	e8 3e a4 ff ff       	callq  406da0 <free@plt>
  40c962:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c966:	48 89 c7             	mov    %rax,%rdi
  40c969:	e8 32 a4 ff ff       	callq  406da0 <free@plt>
  40c96e:	b8 00 00 00 00       	mov    $0x0,%eax
  40c973:	eb 5a                	jmp    40c9cf <create_hashtable+0x195>
	//fprintf(stderr, "%d : create_hash_table try to init mutex %p ~ 0x%x\n", getpid(), h->locks, (int)h->locks + size*sizeof(pthread_mutex_t)); 
    for(unsigned int i=0; i<size; i++) {
  40c975:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  40c97c:	eb 2d                	jmp    40c9ab <create_hashtable+0x171>
        pthread_mutex_init(&(h->locks[i]), NULL);
  40c97e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c982:	48 8b 48 10          	mov    0x10(%rax),%rcx
  40c986:	8b 55 f4             	mov    -0xc(%rbp),%edx
  40c989:	48 89 d0             	mov    %rdx,%rax
  40c98c:	48 c1 e0 02          	shl    $0x2,%rax
  40c990:	48 01 d0             	add    %rdx,%rax
  40c993:	48 c1 e0 03          	shl    $0x3,%rax
  40c997:	48 01 c8             	add    %rcx,%rax
  40c99a:	be 00 00 00 00       	mov    $0x0,%esi
  40c99f:	48 89 c7             	mov    %rax,%rdi
  40c9a2:	e8 69 a3 ff ff       	callq  406d10 <pthread_mutex_init@plt>
#ifdef PARALLEL
    //allocate and initialize array with locks
    h->locks = (pthread_mutex_t *)malloc(sizeof(pthread_mutex_t) * size);
    if(NULL == h->locks) {free(h->table); free(h); return NULL;} /*oom*/
	//fprintf(stderr, "%d : create_hash_table try to init mutex %p ~ 0x%x\n", getpid(), h->locks, (int)h->locks + size*sizeof(pthread_mutex_t)); 
    for(unsigned int i=0; i<size; i++) {
  40c9a7:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  40c9ab:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40c9ae:	3b 45 f0             	cmp    -0x10(%rbp),%eax
  40c9b1:	72 cb                	jb     40c97e <create_hashtable+0x144>
#ifdef ENABLE_DYNAMIC_EXPANSION
    h->primeindex   = pindex;
    h->entrycount   = 0;
    h->loadlimit    = (unsigned int) ceil(size * max_load_factor);
#endif
    h->hashfn       = hashf;
  40c9b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c9b7:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40c9bb:	48 89 50 18          	mov    %rdx,0x18(%rax)
    h->eqfn         = eqf;
  40c9bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40c9c3:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40c9c7:	48 89 50 20          	mov    %rdx,0x20(%rax)
    return h;
  40c9cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  40c9cf:	c9                   	leaveq 
  40c9d0:	c3                   	retq   

000000000040c9d1 <hash>:

/*****************************************************************************/
unsigned int
hash(struct hashtable *h, void *k)
{
  40c9d1:	55                   	push   %rbp
  40c9d2:	48 89 e5             	mov    %rsp,%rbp
  40c9d5:	48 83 ec 20          	sub    $0x20,%rsp
  40c9d9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40c9dd:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    /* Aim to protect against poor hash functions by adding logic here
     * - logic taken from java 1.4 hashtable source */
    unsigned int i = h->hashfn(k);
  40c9e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40c9e5:	48 8b 40 18          	mov    0x18(%rax),%rax
  40c9e9:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40c9ed:	48 89 d7             	mov    %rdx,%rdi
  40c9f0:	ff d0                	callq  *%rax
  40c9f2:	89 45 fc             	mov    %eax,-0x4(%rbp)
    i += ~(i << 9);
  40c9f5:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40c9f8:	c1 e0 09             	shl    $0x9,%eax
  40c9fb:	89 c2                	mov    %eax,%edx
  40c9fd:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40ca00:	29 d0                	sub    %edx,%eax
  40ca02:	83 e8 01             	sub    $0x1,%eax
  40ca05:	89 45 fc             	mov    %eax,-0x4(%rbp)
    i ^=  ((i >> 14) | (i << 18)); /* >>> */
  40ca08:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40ca0b:	c1 c8 0e             	ror    $0xe,%eax
  40ca0e:	31 45 fc             	xor    %eax,-0x4(%rbp)
    i +=  (i << 4);
  40ca11:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40ca14:	c1 e0 04             	shl    $0x4,%eax
  40ca17:	01 45 fc             	add    %eax,-0x4(%rbp)
    i ^=  ((i >> 10) | (i << 22)); /* >>> */
  40ca1a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40ca1d:	c1 c8 0a             	ror    $0xa,%eax
  40ca20:	31 45 fc             	xor    %eax,-0x4(%rbp)
    return i;
  40ca23:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  40ca26:	c9                   	leaveq 
  40ca27:	c3                   	retq   

000000000040ca28 <hashtable_getlock>:

#ifdef PARALLEL
/*****************************************************************************/
pthread_mutex_t *
hashtable_getlock(struct hashtable *h, void *k) {
  40ca28:	55                   	push   %rbp
  40ca29:	48 89 e5             	mov    %rsp,%rbp
  40ca2c:	48 83 ec 20          	sub    $0x20,%rsp
  40ca30:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40ca34:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    unsigned int hashvalue, index;

    hashvalue = hash(h,k);
  40ca38:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ca3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ca40:	48 89 d6             	mov    %rdx,%rsi
  40ca43:	48 89 c7             	mov    %rax,%rdi
  40ca46:	e8 86 ff ff ff       	callq  40c9d1 <hash>
  40ca4b:	89 45 f8             	mov    %eax,-0x8(%rbp)
    //NOTE: If dynamic expansion is disabled then tablelength is read-only
    index = indexFor(h->tablelength,hashvalue);
  40ca4e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ca52:	8b 00                	mov    (%rax),%eax
  40ca54:	8b 55 f8             	mov    -0x8(%rbp),%edx
  40ca57:	89 d6                	mov    %edx,%esi
  40ca59:	89 c7                	mov    %eax,%edi
  40ca5b:	e8 c1 fd ff ff       	callq  40c821 <indexFor>
  40ca60:	89 45 fc             	mov    %eax,-0x4(%rbp)
    return &(h->locks[index]);
  40ca63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ca67:	48 8b 48 10          	mov    0x10(%rax),%rcx
  40ca6b:	8b 55 fc             	mov    -0x4(%rbp),%edx
  40ca6e:	48 89 d0             	mov    %rdx,%rax
  40ca71:	48 c1 e0 02          	shl    $0x2,%rax
  40ca75:	48 01 d0             	add    %rdx,%rax
  40ca78:	48 c1 e0 03          	shl    $0x3,%rax
  40ca7c:	48 01 c8             	add    %rcx,%rax
}
  40ca7f:	c9                   	leaveq 
  40ca80:	c3                   	retq   

000000000040ca81 <hashtable_insert>:
#endif //ENABLE_DYNAMIC_EXPANSION

/*****************************************************************************/
int
hashtable_insert(struct hashtable *h, void *k, void *v)
{
  40ca81:	55                   	push   %rbp
  40ca82:	48 89 e5             	mov    %rsp,%rbp
  40ca85:	48 83 ec 30          	sub    $0x30,%rsp
  40ca89:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40ca8d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40ca91:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
         * element may be ok. Next time we insert, we'll try expanding again.*/
      hashtable_expand(h);
    }
#endif

    e = (struct hash_entry *)malloc(sizeof(struct hash_entry));
  40ca95:	bf 20 00 00 00       	mov    $0x20,%edi
  40ca9a:	e8 b1 a2 ff ff       	callq  406d50 <malloc@plt>
  40ca9f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    if (NULL == e) { /*oom*/
  40caa3:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40caa8:	75 0a                	jne    40cab4 <hashtable_insert+0x33>
#ifdef ENABLE_DYNAMIC_EXPANSION
      --(h->entrycount);
#endif
      return 0;
  40caaa:	b8 00 00 00 00       	mov    $0x0,%eax
  40caaf:	e9 87 00 00 00       	jmpq   40cb3b <hashtable_insert+0xba>
    }
    e->h = hash(h,k);
  40cab4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40cab8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40cabc:	48 89 d6             	mov    %rdx,%rsi
  40cabf:	48 89 c7             	mov    %rax,%rdi
  40cac2:	e8 0a ff ff ff       	callq  40c9d1 <hash>
  40cac7:	89 c2                	mov    %eax,%edx
  40cac9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cacd:	89 50 10             	mov    %edx,0x10(%rax)
    //NOTE: If dynamic expansion is disabled then tablelength is read-only
    index = indexFor(h->tablelength,e->h);
  40cad0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cad4:	8b 50 10             	mov    0x10(%rax),%edx
  40cad7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40cadb:	8b 00                	mov    (%rax),%eax
  40cadd:	89 d6                	mov    %edx,%esi
  40cadf:	89 c7                	mov    %eax,%edi
  40cae1:	e8 3b fd ff ff       	callq  40c821 <indexFor>
  40cae6:	89 45 f4             	mov    %eax,-0xc(%rbp)
    e->k = k;
  40cae9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40caed:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40caf1:	48 89 10             	mov    %rdx,(%rax)
    e->v = v;
  40caf4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40caf8:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40cafc:	48 89 50 08          	mov    %rdx,0x8(%rax)
    //If parallelization is enabled we need the lock for entry table[index] for that
    e->next = h->table[index];
  40cb00:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40cb04:	48 8b 40 08          	mov    0x8(%rax),%rax
  40cb08:	8b 55 f4             	mov    -0xc(%rbp),%edx
  40cb0b:	48 c1 e2 03          	shl    $0x3,%rdx
  40cb0f:	48 01 d0             	add    %rdx,%rax
  40cb12:	48 8b 10             	mov    (%rax),%rdx
  40cb15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cb19:	48 89 50 18          	mov    %rdx,0x18(%rax)
    h->table[index] = e;
  40cb1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40cb21:	48 8b 40 08          	mov    0x8(%rax),%rax
  40cb25:	8b 55 f4             	mov    -0xc(%rbp),%edx
  40cb28:	48 c1 e2 03          	shl    $0x3,%rdx
  40cb2c:	48 01 c2             	add    %rax,%rdx
  40cb2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cb33:	48 89 02             	mov    %rax,(%rdx)

    return -1;
  40cb36:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
  40cb3b:	c9                   	leaveq 
  40cb3c:	c3                   	retq   

000000000040cb3d <hashtable_search>:

/*****************************************************************************/
struct hash_entry * /* returns value associated with key */
hashtable_search(struct hashtable *h, void *k)
{
  40cb3d:	55                   	push   %rbp
  40cb3e:	48 89 e5             	mov    %rsp,%rbp
  40cb41:	48 83 ec 20          	sub    $0x20,%rsp
  40cb45:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40cb49:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    struct hash_entry *e;
    unsigned int hashvalue, index;
    hashvalue = hash(h,k);
  40cb4d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40cb51:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40cb55:	48 89 d6             	mov    %rdx,%rsi
  40cb58:	48 89 c7             	mov    %rax,%rdi
  40cb5b:	e8 71 fe ff ff       	callq  40c9d1 <hash>
  40cb60:	89 45 f0             	mov    %eax,-0x10(%rbp)

    index = indexFor(h->tablelength,hashvalue);
  40cb63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40cb67:	8b 00                	mov    (%rax),%eax
  40cb69:	8b 55 f0             	mov    -0x10(%rbp),%edx
  40cb6c:	89 d6                	mov    %edx,%esi
  40cb6e:	89 c7                	mov    %eax,%edi
  40cb70:	e8 ac fc ff ff       	callq  40c821 <indexFor>
  40cb75:	89 45 f4             	mov    %eax,-0xc(%rbp)
    //If parallelization is enabled we need the lock for entry table[index] for that
    e = h->table[index];
  40cb78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40cb7c:	48 8b 40 08          	mov    0x8(%rax),%rax
  40cb80:	8b 55 f4             	mov    -0xc(%rbp),%edx
  40cb83:	48 c1 e2 03          	shl    $0x3,%rdx
  40cb87:	48 01 d0             	add    %rdx,%rax
  40cb8a:	48 8b 00             	mov    (%rax),%rax
  40cb8d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    while (NULL != e)
  40cb91:	eb 3d                	jmp    40cbd0 <hashtable_search+0x93>
    {
        /* Check hash value to short circuit heavier comparison */
      if ((hashvalue == e->h) && (h->eqfn(k, e->k))) return e;
  40cb93:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cb97:	8b 40 10             	mov    0x10(%rax),%eax
  40cb9a:	3b 45 f0             	cmp    -0x10(%rbp),%eax
  40cb9d:	75 25                	jne    40cbc4 <hashtable_search+0x87>
  40cb9f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40cba3:	48 8b 40 20          	mov    0x20(%rax),%rax
  40cba7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40cbab:	48 8b 0a             	mov    (%rdx),%rcx
  40cbae:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40cbb2:	48 89 ce             	mov    %rcx,%rsi
  40cbb5:	48 89 d7             	mov    %rdx,%rdi
  40cbb8:	ff d0                	callq  *%rax
  40cbba:	85 c0                	test   %eax,%eax
  40cbbc:	74 06                	je     40cbc4 <hashtable_search+0x87>
  40cbbe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cbc2:	eb 18                	jmp    40cbdc <hashtable_search+0x9f>
        e = e->next;  
  40cbc4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cbc8:	48 8b 40 18          	mov    0x18(%rax),%rax
  40cbcc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    hashvalue = hash(h,k);

    index = indexFor(h->tablelength,hashvalue);
    //If parallelization is enabled we need the lock for entry table[index] for that
    e = h->table[index];
    while (NULL != e)
  40cbd0:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40cbd5:	75 bc                	jne    40cb93 <hashtable_search+0x56>
        /* Check hash value to short circuit heavier comparison */
      if ((hashvalue == e->h) && (h->eqfn(k, e->k))) return e;
        e = e->next;  
    }

    return NULL;
  40cbd7:	b8 00 00 00 00       	mov    $0x0,%eax
}
  40cbdc:	c9                   	leaveq 
  40cbdd:	c3                   	retq   

000000000040cbde <hashtable_change>:

void *
hashtable_change(struct hash_entry * e, void * newv) {
  40cbde:	55                   	push   %rbp
  40cbdf:	48 89 e5             	mov    %rsp,%rbp
  40cbe2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40cbe6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  //Locking required
  e->v = newv;
  40cbea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cbee:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40cbf2:	48 89 50 08          	mov    %rdx,0x8(%rax)

  return NULL;
  40cbf6:	b8 00 00 00 00       	mov    $0x0,%eax
}
  40cbfb:	5d                   	pop    %rbp
  40cbfc:	c3                   	retq   

000000000040cbfd <hashtable_remove>:

/*****************************************************************************/
void * /* returns value associated with key */
hashtable_remove(struct hashtable *h, void *k)
{
  40cbfd:	55                   	push   %rbp
  40cbfe:	48 89 e5             	mov    %rsp,%rbp
  40cc01:	48 83 ec 30          	sub    $0x30,%rsp
  40cc05:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40cc09:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    struct hash_entry *e;
    struct hash_entry **pE;
    void *v;
    unsigned int hashvalue, index;

    hashvalue = hash(h,k);
  40cc0d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40cc11:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40cc15:	48 89 d6             	mov    %rdx,%rsi
  40cc18:	48 89 c7             	mov    %rax,%rdi
  40cc1b:	e8 b1 fd ff ff       	callq  40c9d1 <hash>
  40cc20:	89 45 e0             	mov    %eax,-0x20(%rbp)
    //NOTE: tablelength is read-only if dynamic expansion is disabled
    index = indexFor(h->tablelength,hash(h,k));
  40cc23:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40cc27:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40cc2b:	48 89 d6             	mov    %rdx,%rsi
  40cc2e:	48 89 c7             	mov    %rax,%rdi
  40cc31:	e8 9b fd ff ff       	callq  40c9d1 <hash>
  40cc36:	89 c2                	mov    %eax,%edx
  40cc38:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40cc3c:	8b 00                	mov    (%rax),%eax
  40cc3e:	89 d6                	mov    %edx,%esi
  40cc40:	89 c7                	mov    %eax,%edi
  40cc42:	e8 da fb ff ff       	callq  40c821 <indexFor>
  40cc47:	89 45 e4             	mov    %eax,-0x1c(%rbp)
    //Proper locking required
    pE = &(h->table[index]);
  40cc4a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40cc4e:	48 8b 40 08          	mov    0x8(%rax),%rax
  40cc52:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  40cc55:	48 c1 e2 03          	shl    $0x3,%rdx
  40cc59:	48 01 d0             	add    %rdx,%rax
  40cc5c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    e = *pE;
  40cc60:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40cc64:	48 8b 00             	mov    (%rax),%rax
  40cc67:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    while (NULL != e)
  40cc6b:	eb 7f                	jmp    40ccec <hashtable_remove+0xef>
    {
        /* Check hash value to short circuit heavier comparison */
        if ((hashvalue == e->h) && (h->eqfn(k, e->k)))
  40cc6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40cc71:	8b 40 10             	mov    0x10(%rax),%eax
  40cc74:	3b 45 e0             	cmp    -0x20(%rbp),%eax
  40cc77:	75 5b                	jne    40ccd4 <hashtable_remove+0xd7>
  40cc79:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40cc7d:	48 8b 40 20          	mov    0x20(%rax),%rax
  40cc81:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40cc85:	48 8b 0a             	mov    (%rdx),%rcx
  40cc88:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  40cc8c:	48 89 ce             	mov    %rcx,%rsi
  40cc8f:	48 89 d7             	mov    %rdx,%rdi
  40cc92:	ff d0                	callq  *%rax
  40cc94:	85 c0                	test   %eax,%eax
  40cc96:	74 3c                	je     40ccd4 <hashtable_remove+0xd7>
        {
            *pE = e->next;
  40cc98:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40cc9c:	48 8b 50 18          	mov    0x18(%rax),%rdx
  40cca0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40cca4:	48 89 10             	mov    %rdx,(%rax)
#ifdef ENABLE_DYNAMIC_EXPANSION
            h->entrycount--;
#endif
            v = e->v;
  40cca7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ccab:	48 8b 40 08          	mov    0x8(%rax),%rax
  40ccaf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            freekey(e->k);
  40ccb3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ccb7:	48 8b 00             	mov    (%rax),%rax
  40ccba:	48 89 c7             	mov    %rax,%rdi
  40ccbd:	e8 de a0 ff ff       	callq  406da0 <free@plt>
            free(e);
  40ccc2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ccc6:	48 89 c7             	mov    %rax,%rdi
  40ccc9:	e8 d2 a0 ff ff       	callq  406da0 <free@plt>
            return v;
  40ccce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ccd2:	eb 28                	jmp    40ccfc <hashtable_remove+0xff>
        }
        pE = &(e->next);
  40ccd4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40ccd8:	48 83 c0 18          	add    $0x18,%rax
  40ccdc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        e = e->next;
  40cce0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40cce4:	48 8b 40 18          	mov    0x18(%rax),%rax
  40cce8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    //NOTE: tablelength is read-only if dynamic expansion is disabled
    index = indexFor(h->tablelength,hash(h,k));
    //Proper locking required
    pE = &(h->table[index]);
    e = *pE;
    while (NULL != e)
  40ccec:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  40ccf1:	0f 85 76 ff ff ff    	jne    40cc6d <hashtable_remove+0x70>
            return v;
        }
        pE = &(e->next);
        e = e->next;
    }
    return NULL;
  40ccf7:	b8 00 00 00 00       	mov    $0x0,%eax
}
  40ccfc:	c9                   	leaveq 
  40ccfd:	c3                   	retq   

000000000040ccfe <hashtable_destroy>:

/*****************************************************************************/
/* destroy */
void
hashtable_destroy(struct hashtable *h, int free_values)
{
  40ccfe:	55                   	push   %rbp
  40ccff:	48 89 e5             	mov    %rsp,%rbp
  40cd02:	48 83 ec 30          	sub    $0x30,%rsp
  40cd06:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40cd0a:	89 75 d4             	mov    %esi,-0x2c(%rbp)
    unsigned int i;
    struct hash_entry *e, *f;
    struct hash_entry **table = h->table;
  40cd0d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40cd11:	48 8b 40 08          	mov    0x8(%rax),%rax
  40cd15:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    if (free_values)
  40cd19:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
  40cd1d:	74 7b                	je     40cd9a <hashtable_destroy+0x9c>
    {
        for (i = 0; i < h->tablelength; i++)
  40cd1f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  40cd26:	eb 65                	jmp    40cd8d <hashtable_destroy+0x8f>
        {
            e = table[i];
  40cd28:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  40cd2b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  40cd32:	00 
  40cd33:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40cd37:	48 01 d0             	add    %rdx,%rax
  40cd3a:	48 8b 00             	mov    (%rax),%rax
  40cd3d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
            while (NULL != e)
  40cd41:	eb 3f                	jmp    40cd82 <hashtable_destroy+0x84>
            { f = e; e = e->next; freekey(f->k); free(f->v); free(f); }
  40cd43:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40cd47:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40cd4b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40cd4f:	48 8b 40 18          	mov    0x18(%rax),%rax
  40cd53:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40cd57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cd5b:	48 8b 00             	mov    (%rax),%rax
  40cd5e:	48 89 c7             	mov    %rax,%rdi
  40cd61:	e8 3a a0 ff ff       	callq  406da0 <free@plt>
  40cd66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cd6a:	48 8b 40 08          	mov    0x8(%rax),%rax
  40cd6e:	48 89 c7             	mov    %rax,%rdi
  40cd71:	e8 2a a0 ff ff       	callq  406da0 <free@plt>
  40cd76:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cd7a:	48 89 c7             	mov    %rax,%rdi
  40cd7d:	e8 1e a0 ff ff       	callq  406da0 <free@plt>
    if (free_values)
    {
        for (i = 0; i < h->tablelength; i++)
        {
            e = table[i];
            while (NULL != e)
  40cd82:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  40cd87:	75 ba                	jne    40cd43 <hashtable_destroy+0x45>
    unsigned int i;
    struct hash_entry *e, *f;
    struct hash_entry **table = h->table;
    if (free_values)
    {
        for (i = 0; i < h->tablelength; i++)
  40cd89:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
  40cd8d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40cd91:	8b 00                	mov    (%rax),%eax
  40cd93:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
  40cd96:	77 90                	ja     40cd28 <hashtable_destroy+0x2a>
  40cd98:	eb 69                	jmp    40ce03 <hashtable_destroy+0x105>
            { f = e; e = e->next; freekey(f->k); free(f->v); free(f); }
        }
    }
    else
    {
        for (i = 0; i < h->tablelength; i++)
  40cd9a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  40cda1:	eb 55                	jmp    40cdf8 <hashtable_destroy+0xfa>
        {
            e = table[i];
  40cda3:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  40cda6:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  40cdad:	00 
  40cdae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40cdb2:	48 01 d0             	add    %rdx,%rax
  40cdb5:	48 8b 00             	mov    (%rax),%rax
  40cdb8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
            while (NULL != e)
  40cdbc:	eb 2f                	jmp    40cded <hashtable_destroy+0xef>
            { f = e; e = e->next; freekey(f->k); free(f); }
  40cdbe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40cdc2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40cdc6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40cdca:	48 8b 40 18          	mov    0x18(%rax),%rax
  40cdce:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40cdd2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cdd6:	48 8b 00             	mov    (%rax),%rax
  40cdd9:	48 89 c7             	mov    %rax,%rdi
  40cddc:	e8 bf 9f ff ff       	callq  406da0 <free@plt>
  40cde1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cde5:	48 89 c7             	mov    %rax,%rdi
  40cde8:	e8 b3 9f ff ff       	callq  406da0 <free@plt>
    else
    {
        for (i = 0; i < h->tablelength; i++)
        {
            e = table[i];
            while (NULL != e)
  40cded:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  40cdf2:	75 ca                	jne    40cdbe <hashtable_destroy+0xc0>
            { f = e; e = e->next; freekey(f->k); free(f->v); free(f); }
        }
    }
    else
    {
        for (i = 0; i < h->tablelength; i++)
  40cdf4:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
  40cdf8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40cdfc:	8b 00                	mov    (%rax),%eax
  40cdfe:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
  40ce01:	77 a0                	ja     40cda3 <hashtable_destroy+0xa5>
            while (NULL != e)
            { f = e; e = e->next; freekey(f->k); free(f); }
        }
    }
#ifdef PARALLEL
    for(i=0; i<h->tablelength; i++) {
  40ce03:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  40ce0a:	eb 28                	jmp    40ce34 <hashtable_destroy+0x136>
        pthread_mutex_destroy(&(h->locks[i]));
  40ce0c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40ce10:	48 8b 48 10          	mov    0x10(%rax),%rcx
  40ce14:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  40ce17:	48 89 d0             	mov    %rdx,%rax
  40ce1a:	48 c1 e0 02          	shl    $0x2,%rax
  40ce1e:	48 01 d0             	add    %rdx,%rax
  40ce21:	48 c1 e0 03          	shl    $0x3,%rax
  40ce25:	48 01 c8             	add    %rcx,%rax
  40ce28:	48 89 c7             	mov    %rax,%rdi
  40ce2b:	e8 d0 9f ff ff       	callq  406e00 <pthread_mutex_destroy@plt>
            while (NULL != e)
            { f = e; e = e->next; freekey(f->k); free(f); }
        }
    }
#ifdef PARALLEL
    for(i=0; i<h->tablelength; i++) {
  40ce30:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
  40ce34:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40ce38:	8b 00                	mov    (%rax),%eax
  40ce3a:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
  40ce3d:	77 cd                	ja     40ce0c <hashtable_destroy+0x10e>
        pthread_mutex_destroy(&(h->locks[i]));
    }
    free(h->locks);
  40ce3f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40ce43:	48 8b 40 10          	mov    0x10(%rax),%rax
  40ce47:	48 89 c7             	mov    %rax,%rdi
  40ce4a:	e8 51 9f ff ff       	callq  406da0 <free@plt>
#endif
    free(h->table);
  40ce4f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40ce53:	48 8b 40 08          	mov    0x8(%rax),%rax
  40ce57:	48 89 c7             	mov    %rax,%rdi
  40ce5a:	e8 41 9f ff ff       	callq  406da0 <free@plt>
    free(h);
  40ce5f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40ce63:	48 89 c7             	mov    %rax,%rdi
  40ce66:	e8 35 9f ff ff       	callq  406da0 <free@plt>
}
  40ce6b:	c9                   	leaveq 
  40ce6c:	c3                   	retq   

000000000040ce6d <queue_init>:

#ifdef PARALLEL
#include <pthread.h>
#endif //PARALLEL

void queue_init(struct queue * que, int size, int threads) {
  40ce6d:	55                   	push   %rbp
  40ce6e:	48 89 e5             	mov    %rsp,%rbp
  40ce71:	48 83 ec 10          	sub    $0x10,%rsp
  40ce75:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40ce79:	89 75 f4             	mov    %esi,-0xc(%rbp)
  40ce7c:	89 55 f0             	mov    %edx,-0x10(%rbp)
#ifdef PARALLEL
  pthread_mutex_init(&que->mutex, NULL);
  40ce7f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ce83:	48 83 c0 20          	add    $0x20,%rax
  40ce87:	be 00 00 00 00       	mov    $0x0,%esi
  40ce8c:	48 89 c7             	mov    %rax,%rdi
  40ce8f:	e8 7c 9e ff ff       	callq  406d10 <pthread_mutex_init@plt>
  pthread_cond_init(&que->empty, NULL);
  40ce94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ce98:	48 83 c0 48          	add    $0x48,%rax
  40ce9c:	be 00 00 00 00       	mov    $0x0,%esi
  40cea1:	48 89 c7             	mov    %rax,%rdi
  40cea4:	e8 37 9f ff ff       	callq  406de0 <pthread_cond_init@plt>
  pthread_cond_init(&que->full, NULL);
  40cea9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cead:	48 83 c0 78          	add    $0x78,%rax
  40ceb1:	be 00 00 00 00       	mov    $0x0,%esi
  40ceb6:	48 89 c7             	mov    %rax,%rdi
  40ceb9:	e8 22 9f ff ff       	callq  406de0 <pthread_cond_init@plt>
#endif
  que->head = que->tail = 0;
  40cebe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cec2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%rax)
  40cec9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cecd:	8b 50 04             	mov    0x4(%rax),%edx
  40ced0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ced4:	89 10                	mov    %edx,(%rax)
  que->data = (void **)malloc(sizeof(void*) *size);
  40ced6:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40ced9:	48 98                	cltq   
  40cedb:	48 c1 e0 03          	shl    $0x3,%rax
  40cedf:	48 89 c7             	mov    %rax,%rdi
  40cee2:	e8 69 9e ff ff       	callq  406d50 <malloc@plt>
  40cee7:	48 89 c2             	mov    %rax,%rdx
  40ceea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40ceee:	48 89 50 08          	mov    %rdx,0x8(%rax)
  que->size = size;
  40cef2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cef6:	8b 55 f4             	mov    -0xc(%rbp),%edx
  40cef9:	89 50 10             	mov    %edx,0x10(%rax)
  que->threads = threads;
  40cefc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cf00:	8b 55 f0             	mov    -0x10(%rbp),%edx
  40cf03:	89 50 14             	mov    %edx,0x14(%rax)
  que->end_count = 0;
  40cf06:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cf0a:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%rax)
}
  40cf11:	c9                   	leaveq 
  40cf12:	c3                   	retq   

000000000040cf13 <queue_signal_terminate>:

void queue_signal_terminate(struct queue * que) {
  40cf13:	55                   	push   %rbp
  40cf14:	48 89 e5             	mov    %rsp,%rbp
  40cf17:	48 83 ec 10          	sub    $0x10,%rsp
  40cf1b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
#ifdef PARALLEL
  pthread_mutex_lock(&que->mutex);
  40cf1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cf23:	48 83 c0 20          	add    $0x20,%rax
  40cf27:	48 89 c7             	mov    %rax,%rdi
  40cf2a:	e8 51 9e ff ff       	callq  406d80 <pthread_mutex_lock@plt>
#endif
  que->end_count ++;
  40cf2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cf33:	8b 40 18             	mov    0x18(%rax),%eax
  40cf36:	8d 50 01             	lea    0x1(%rax),%edx
  40cf39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cf3d:	89 50 18             	mov    %edx,0x18(%rax)
#ifdef PARALLEL
  pthread_cond_broadcast(&que->empty);    
  40cf40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cf44:	48 83 c0 48          	add    $0x48,%rax
  40cf48:	48 89 c7             	mov    %rax,%rdi
  40cf4b:	e8 80 a0 ff ff       	callq  406fd0 <pthread_cond_broadcast@plt>
  pthread_mutex_unlock(&que->mutex);  
  40cf50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cf54:	48 83 c0 20          	add    $0x20,%rax
  40cf58:	48 89 c7             	mov    %rax,%rdi
  40cf5b:	e8 e0 9f ff ff       	callq  406f40 <pthread_mutex_unlock@plt>
#endif
}
  40cf60:	c9                   	leaveq 
  40cf61:	c3                   	retq   

000000000040cf62 <dequeue>:
// Dequeue will always pull one item from the tail of queue. 
// When que->tail == queue->head, means there is no items inside.
int dequeue(struct queue * que, int * fetch_count, void ** to_buf) {
  40cf62:	55                   	push   %rbp
  40cf63:	48 89 e5             	mov    %rsp,%rbp
  40cf66:	48 83 ec 20          	sub    $0x20,%rsp
  40cf6a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40cf6e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40cf72:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
#ifdef PARALLEL
      pthread_mutex_lock(&que->mutex);
  40cf76:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cf7a:	48 83 c0 20          	add    $0x20,%rax
  40cf7e:	48 89 c7             	mov    %rax,%rdi
  40cf81:	e8 fa 9d ff ff       	callq  406d80 <pthread_mutex_lock@plt>
      // queue->end_count is less than queue->threads, that means, there is still some threads
      // are working on that (they can insert something to this queue), so 
      // current thread need to wait.
      // If the speed of two continuous state are different, maybe we should use different number about fetch and insert.
	  while (que->tail == que->head && (que->end_count) < que->threads) {
  40cf86:	eb 1b                	jmp    40cfa3 <dequeue+0x41>
        pthread_cond_wait(&que->empty, &que->mutex);      
  40cf88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cf8c:	48 8d 50 20          	lea    0x20(%rax),%rdx
  40cf90:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cf94:	48 83 c0 48          	add    $0x48,%rax
  40cf98:	48 89 d6             	mov    %rdx,%rsi
  40cf9b:	48 89 c7             	mov    %rax,%rdi
  40cf9e:	e8 0d a0 ff ff       	callq  406fb0 <pthread_cond_wait@plt>
      pthread_mutex_lock(&que->mutex);
      // queue->end_count is less than queue->threads, that means, there is still some threads
      // are working on that (they can insert something to this queue), so 
      // current thread need to wait.
      // If the speed of two continuous state are different, maybe we should use different number about fetch and insert.
	  while (que->tail == que->head && (que->end_count) < que->threads) {
  40cfa3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cfa7:	8b 50 04             	mov    0x4(%rax),%edx
  40cfaa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cfae:	8b 00                	mov    (%rax),%eax
  40cfb0:	39 c2                	cmp    %eax,%edx
  40cfb2:	75 12                	jne    40cfc6 <dequeue+0x64>
  40cfb4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cfb8:	8b 50 18             	mov    0x18(%rax),%edx
  40cfbb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cfbf:	8b 40 14             	mov    0x14(%rax),%eax
  40cfc2:	39 c2                	cmp    %eax,%edx
  40cfc4:	7c c2                	jl     40cf88 <dequeue+0x26>
        pthread_cond_wait(&que->empty, &que->mutex);      
      }
#endif
	  // If the queue is empty and no one is working to add something to this queue anymore.
      // broadcast to those threads waiting on queue->empty
      if (que->tail == que->head && (que->end_count) == que->threads) {
  40cfc6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cfca:	8b 50 04             	mov    0x4(%rax),%edx
  40cfcd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cfd1:	8b 00                	mov    (%rax),%eax
  40cfd3:	39 c2                	cmp    %eax,%edx
  40cfd5:	75 3c                	jne    40d013 <dequeue+0xb1>
  40cfd7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cfdb:	8b 50 18             	mov    0x18(%rax),%edx
  40cfde:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cfe2:	8b 40 14             	mov    0x14(%rax),%eax
  40cfe5:	39 c2                	cmp    %eax,%edx
  40cfe7:	75 2a                	jne    40d013 <dequeue+0xb1>
#ifdef PARALLEL
        pthread_cond_broadcast(&que->empty);
  40cfe9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cfed:	48 83 c0 48          	add    $0x48,%rax
  40cff1:	48 89 c7             	mov    %rax,%rdi
  40cff4:	e8 d7 9f ff ff       	callq  406fd0 <pthread_cond_broadcast@plt>
        pthread_mutex_unlock(&que->mutex);
  40cff9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40cffd:	48 83 c0 20          	add    $0x20,%rax
  40d001:	48 89 c7             	mov    %rax,%rdi
  40d004:	e8 37 9f ff ff       	callq  406f40 <pthread_mutex_unlock@plt>
#endif
        return -1;     
  40d009:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  40d00e:	e9 d7 00 00 00       	jmpq   40d0ea <dequeue+0x188>
      }
      for ((*fetch_count) = 0; (*fetch_count) < ITEM_PER_FETCH; (*fetch_count) ++) {
  40d013:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d017:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  40d01d:	e9 94 00 00 00       	jmpq   40d0b6 <dequeue+0x154>
        to_buf[(*fetch_count)] = que->data[que->tail];
  40d022:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d026:	8b 00                	mov    (%rax),%eax
  40d028:	48 98                	cltq   
  40d02a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  40d031:	00 
  40d032:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d036:	48 01 c2             	add    %rax,%rdx
  40d039:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d03d:	48 8b 48 08          	mov    0x8(%rax),%rcx
  40d041:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d045:	8b 40 04             	mov    0x4(%rax),%eax
  40d048:	48 98                	cltq   
  40d04a:	48 c1 e0 03          	shl    $0x3,%rax
  40d04e:	48 01 c8             	add    %rcx,%rax
  40d051:	48 8b 00             	mov    (%rax),%rax
  40d054:	48 89 02             	mov    %rax,(%rdx)
        que->tail ++;
  40d057:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d05b:	8b 40 04             	mov    0x4(%rax),%eax
  40d05e:	8d 50 01             	lea    0x1(%rax),%edx
  40d061:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d065:	89 50 04             	mov    %edx,0x4(%rax)
        if (que->tail == que->size) que->tail = 0;
  40d068:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d06c:	8b 50 04             	mov    0x4(%rax),%edx
  40d06f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d073:	8b 40 10             	mov    0x10(%rax),%eax
  40d076:	39 c2                	cmp    %eax,%edx
  40d078:	75 0b                	jne    40d085 <dequeue+0x123>
  40d07a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d07e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%rax)
		// If the queue is empty, we will return simply. Notify to increment once again for fetch_count.
        if (que->tail == que->head) {
  40d085:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d089:	8b 50 04             	mov    0x4(%rax),%edx
  40d08c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d090:	8b 00                	mov    (%rax),%eax
  40d092:	39 c2                	cmp    %eax,%edx
  40d094:	75 11                	jne    40d0a7 <dequeue+0x145>
          (*fetch_count) ++;
  40d096:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d09a:	8b 00                	mov    (%rax),%eax
  40d09c:	8d 50 01             	lea    0x1(%rax),%edx
  40d09f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d0a3:	89 10                	mov    %edx,(%rax)
          break;
  40d0a5:	eb 1e                	jmp    40d0c5 <dequeue+0x163>
        pthread_cond_broadcast(&que->empty);
        pthread_mutex_unlock(&que->mutex);
#endif
        return -1;     
      }
      for ((*fetch_count) = 0; (*fetch_count) < ITEM_PER_FETCH; (*fetch_count) ++) {
  40d0a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d0ab:	8b 00                	mov    (%rax),%eax
  40d0ad:	8d 50 01             	lea    0x1(%rax),%edx
  40d0b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d0b4:	89 10                	mov    %edx,(%rax)
  40d0b6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d0ba:	8b 00                	mov    (%rax),%eax
  40d0bc:	83 f8 13             	cmp    $0x13,%eax
  40d0bf:	0f 8e 5d ff ff ff    	jle    40d022 <dequeue+0xc0>
          (*fetch_count) ++;
          break;
        }
      }
#ifdef PARALLEL
      pthread_cond_signal(&que->full);
  40d0c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d0c9:	48 83 c0 78          	add    $0x78,%rax
  40d0cd:	48 89 c7             	mov    %rax,%rdi
  40d0d0:	e8 1b 9c ff ff       	callq  406cf0 <pthread_cond_signal@plt>
      pthread_mutex_unlock(&que->mutex);  
  40d0d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d0d9:	48 83 c0 20          	add    $0x20,%rax
  40d0dd:	48 89 c7             	mov    %rax,%rdi
  40d0e0:	e8 5b 9e ff ff       	callq  406f40 <pthread_mutex_unlock@plt>
#endif
      return 0;
  40d0e5:	b8 00 00 00 00       	mov    $0x0,%eax
}
  40d0ea:	c9                   	leaveq 
  40d0eb:	c3                   	retq   

000000000040d0ec <enqueue>:

int enqueue(struct queue * que, int * fetch_count, void ** from_buf) {
  40d0ec:	55                   	push   %rbp
  40d0ed:	48 89 e5             	mov    %rsp,%rbp
  40d0f0:	48 83 ec 20          	sub    $0x20,%rsp
  40d0f4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40d0f8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40d0fc:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
#ifdef PARALLEL
  pthread_mutex_lock(&que->mutex);
  40d100:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d104:	48 83 c0 20          	add    $0x20,%rax
  40d108:	48 89 c7             	mov    %rax,%rdi
  40d10b:	e8 70 9c ff ff       	callq  406d80 <pthread_mutex_lock@plt>

  // If the queue is full, then we will wait on conditional variable queue->full.
  // In theory, each job will have a queue. 
  while (que->head == (que->tail-1+que->size)%que->size)
  40d110:	eb 1b                	jmp    40d12d <enqueue+0x41>
    pthread_cond_wait(&que->full, &que->mutex);
  40d112:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d116:	48 8d 50 20          	lea    0x20(%rax),%rdx
  40d11a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d11e:	48 83 c0 78          	add    $0x78,%rax
  40d122:	48 89 d6             	mov    %rdx,%rsi
  40d125:	48 89 c7             	mov    %rax,%rdi
  40d128:	e8 83 9e ff ff       	callq  406fb0 <pthread_cond_wait@plt>
#ifdef PARALLEL
  pthread_mutex_lock(&que->mutex);

  // If the queue is full, then we will wait on conditional variable queue->full.
  // In theory, each job will have a queue. 
  while (que->head == (que->tail-1+que->size)%que->size)
  40d12d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d131:	8b 08                	mov    (%rax),%ecx
  40d133:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d137:	8b 40 04             	mov    0x4(%rax),%eax
  40d13a:	8d 50 ff             	lea    -0x1(%rax),%edx
  40d13d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d141:	8b 40 10             	mov    0x10(%rax),%eax
  40d144:	01 c2                	add    %eax,%edx
  40d146:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d14a:	8b 70 10             	mov    0x10(%rax),%esi
  40d14d:	89 d0                	mov    %edx,%eax
  40d14f:	99                   	cltd   
  40d150:	f7 fe                	idiv   %esi
  40d152:	89 d0                	mov    %edx,%eax
  40d154:	39 c1                	cmp    %eax,%ecx
  40d156:	74 ba                	je     40d112 <enqueue+0x26>
    pthread_cond_wait(&que->full, &que->mutex);
#endif
  // fetch_count is -9999 means that there is only one item inside???
  if ((*fetch_count) == -9999) {
  40d158:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d15c:	8b 00                	mov    (%rax),%eax
  40d15e:	3d f1 d8 ff ff       	cmp    $0xffffd8f1,%eax
  40d163:	75 51                	jne    40d1b6 <enqueue+0xca>
    que->data[que->head] = from_buf[0];
  40d165:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d169:	48 8b 50 08          	mov    0x8(%rax),%rdx
  40d16d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d171:	8b 00                	mov    (%rax),%eax
  40d173:	48 98                	cltq   
  40d175:	48 c1 e0 03          	shl    $0x3,%rax
  40d179:	48 01 c2             	add    %rax,%rdx
  40d17c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d180:	48 8b 00             	mov    (%rax),%rax
  40d183:	48 89 02             	mov    %rax,(%rdx)
    que->head ++;
  40d186:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d18a:	8b 00                	mov    (%rax),%eax
  40d18c:	8d 50 01             	lea    0x1(%rax),%edx
  40d18f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d193:	89 10                	mov    %edx,(%rax)
    if (que->head == que->size) que->head = 0;
  40d195:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d199:	8b 10                	mov    (%rax),%edx
  40d19b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d19f:	8b 40 10             	mov    0x10(%rax),%eax
  40d1a2:	39 c2                	cmp    %eax,%edx
  40d1a4:	0f 85 85 00 00 00    	jne    40d22f <enqueue+0x143>
  40d1aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d1ae:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  40d1b4:	eb 79                	jmp    40d22f <enqueue+0x143>
  } else {
    // Here, the queue is a circular queue. Queue->head means that we will put the item
    // into the placement in the queue. In fact, queue->data is just an pre-defined array
    while ((*fetch_count) > 0) {
  40d1b6:	eb 6d                	jmp    40d225 <enqueue+0x139>
      (*fetch_count) --;
  40d1b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d1bc:	8b 00                	mov    (%rax),%eax
  40d1be:	8d 50 ff             	lea    -0x1(%rax),%edx
  40d1c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d1c5:	89 10                	mov    %edx,(%rax)
      que->data[que->head] = from_buf[(*fetch_count)];
  40d1c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d1cb:	48 8b 50 08          	mov    0x8(%rax),%rdx
  40d1cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d1d3:	8b 00                	mov    (%rax),%eax
  40d1d5:	48 98                	cltq   
  40d1d7:	48 c1 e0 03          	shl    $0x3,%rax
  40d1db:	48 01 c2             	add    %rax,%rdx
  40d1de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d1e2:	8b 00                	mov    (%rax),%eax
  40d1e4:	48 98                	cltq   
  40d1e6:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
  40d1ed:	00 
  40d1ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d1f2:	48 01 c8             	add    %rcx,%rax
  40d1f5:	48 8b 00             	mov    (%rax),%rax
  40d1f8:	48 89 02             	mov    %rax,(%rdx)
      que->head ++;
  40d1fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d1ff:	8b 00                	mov    (%rax),%eax
  40d201:	8d 50 01             	lea    0x1(%rax),%edx
  40d204:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d208:	89 10                	mov    %edx,(%rax)
      if (que->head == que->size) que->head = 0;
  40d20a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d20e:	8b 10                	mov    (%rax),%edx
  40d210:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d214:	8b 40 10             	mov    0x10(%rax),%eax
  40d217:	39 c2                	cmp    %eax,%edx
  40d219:	75 0a                	jne    40d225 <enqueue+0x139>
  40d21b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d21f:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
    que->head ++;
    if (que->head == que->size) que->head = 0;
  } else {
    // Here, the queue is a circular queue. Queue->head means that we will put the item
    // into the placement in the queue. In fact, queue->data is just an pre-defined array
    while ((*fetch_count) > 0) {
  40d225:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d229:	8b 00                	mov    (%rax),%eax
  40d22b:	85 c0                	test   %eax,%eax
  40d22d:	7f 89                	jg     40d1b8 <enqueue+0xcc>
    }
  }
#ifdef PARALLEL
  // We are not sure that whether next stage's process is waiting on this queue or not.
  // Just give them a signal.
  pthread_cond_signal(&que->empty);
  40d22f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d233:	48 83 c0 48          	add    $0x48,%rax
  40d237:	48 89 c7             	mov    %rax,%rdi
  40d23a:	e8 b1 9a ff ff       	callq  406cf0 <pthread_cond_signal@plt>
  pthread_mutex_unlock(&que->mutex);
  40d23f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d243:	48 83 c0 20          	add    $0x20,%rax
  40d247:	48 89 c7             	mov    %rax,%rdi
  40d24a:	e8 f1 9c ff ff       	callq  406f40 <pthread_mutex_unlock@plt>
#endif
  return 0;
  40d24f:	b8 00 00 00 00       	mov    $0x0,%eax
}
  40d254:	c9                   	leaveq 
  40d255:	c3                   	retq   

000000000040d256 <bswap32>:
//static u32int irrpoly = 0x759ddb9f;
static u32int irrpoly = 0x45c2b6a1;

uint32_t
bswap32(x) uint32_t x;
{
  40d256:	55                   	push   %rbp
  40d257:	48 89 e5             	mov    %rsp,%rbp
  40d25a:	89 7d fc             	mov    %edi,-0x4(%rbp)
        return  ((x << 24) & 0xff000000 ) |
  40d25d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40d260:	c1 e0 18             	shl    $0x18,%eax
  40d263:	89 c2                	mov    %eax,%edx
                 ((x <<  8) & 0x00ff0000 ) |
  40d265:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40d268:	c1 e0 08             	shl    $0x8,%eax
  40d26b:	25 00 00 ff 00       	and    $0xff0000,%eax
static u32int irrpoly = 0x45c2b6a1;

uint32_t
bswap32(x) uint32_t x;
{
        return  ((x << 24) & 0xff000000 ) |
  40d270:	09 c2                	or     %eax,%edx
                 ((x <<  8) & 0x00ff0000 ) |
                 ((x >>  8) & 0x0000ff00 ) |
  40d272:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40d275:	c1 e8 08             	shr    $0x8,%eax
  40d278:	25 00 ff 00 00       	and    $0xff00,%eax

uint32_t
bswap32(x) uint32_t x;
{
        return  ((x << 24) & 0xff000000 ) |
                 ((x <<  8) & 0x00ff0000 ) |
  40d27d:	09 c2                	or     %eax,%edx
                 ((x >>  8) & 0x0000ff00 ) |
                 ((x >> 24) & 0x000000ff );
  40d27f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40d282:	c1 e8 18             	shr    $0x18,%eax
static u32int irrpoly = 0x45c2b6a1;

uint32_t
bswap32(x) uint32_t x;
{
        return  ((x << 24) & 0xff000000 ) |
  40d285:	09 d0                	or     %edx,%eax
                 ((x <<  8) & 0x00ff0000 ) |
                 ((x >>  8) & 0x0000ff00 ) |
                 ((x >> 24) & 0x000000ff );
}
  40d287:	5d                   	pop    %rbp
  40d288:	c3                   	retq   

000000000040d289 <fpreduce>:

static u32int
fpreduce(u32int x, u32int irr)
{
  40d289:	55                   	push   %rbp
  40d28a:	48 89 e5             	mov    %rsp,%rbp
  40d28d:	89 7d ec             	mov    %edi,-0x14(%rbp)
  40d290:	89 75 e8             	mov    %esi,-0x18(%rbp)
	int i;

	for(i=32; i!=0; i--){
  40d293:	c7 45 fc 20 00 00 00 	movl   $0x20,-0x4(%rbp)
  40d29a:	eb 19                	jmp    40d2b5 <fpreduce+0x2c>
		if(x >> 31){
  40d29c:	8b 45 ec             	mov    -0x14(%rbp),%eax
  40d29f:	85 c0                	test   %eax,%eax
  40d2a1:	79 0b                	jns    40d2ae <fpreduce+0x25>
			x <<= 1;
  40d2a3:	d1 65 ec             	shll   -0x14(%rbp)
			x ^= irr;
  40d2a6:	8b 45 e8             	mov    -0x18(%rbp),%eax
  40d2a9:	31 45 ec             	xor    %eax,-0x14(%rbp)
  40d2ac:	eb 03                	jmp    40d2b1 <fpreduce+0x28>
		}else
			x <<= 1;
  40d2ae:	d1 65 ec             	shll   -0x14(%rbp)
static u32int
fpreduce(u32int x, u32int irr)
{
	int i;

	for(i=32; i!=0; i--){
  40d2b1:	83 6d fc 01          	subl   $0x1,-0x4(%rbp)
  40d2b5:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  40d2b9:	75 e1                	jne    40d29c <fpreduce+0x13>
			x <<= 1;
			x ^= irr;
		}else
			x <<= 1;
	}
	return x;
  40d2bb:	8b 45 ec             	mov    -0x14(%rbp),%eax
}
  40d2be:	5d                   	pop    %rbp
  40d2bf:	c3                   	retq   

000000000040d2c0 <fpmkredtab>:

static void
fpmkredtab(u32int irr, int s, u32int *tab)
{
  40d2c0:	55                   	push   %rbp
  40d2c1:	48 89 e5             	mov    %rsp,%rbp
  40d2c4:	53                   	push   %rbx
  40d2c5:	48 83 ec 20          	sub    $0x20,%rsp
  40d2c9:	89 7d e4             	mov    %edi,-0x1c(%rbp)
  40d2cc:	89 75 e0             	mov    %esi,-0x20(%rbp)
  40d2cf:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	u32int i;

	for(i=0; i<256; i++)
  40d2d3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  40d2da:	eb 2f                	jmp    40d30b <fpmkredtab+0x4b>
		tab[i] = fpreduce(i<<s, irr);
  40d2dc:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40d2df:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  40d2e6:	00 
  40d2e7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d2eb:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  40d2ef:	8b 45 e0             	mov    -0x20(%rbp),%eax
  40d2f2:	8b 55 f4             	mov    -0xc(%rbp),%edx
  40d2f5:	89 c1                	mov    %eax,%ecx
  40d2f7:	d3 e2                	shl    %cl,%edx
  40d2f9:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  40d2fc:	89 c6                	mov    %eax,%esi
  40d2fe:	89 d7                	mov    %edx,%edi
  40d300:	e8 84 ff ff ff       	callq  40d289 <fpreduce>
  40d305:	89 03                	mov    %eax,(%rbx)
static void
fpmkredtab(u32int irr, int s, u32int *tab)
{
	u32int i;

	for(i=0; i<256; i++)
  40d307:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  40d30b:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%rbp)
  40d312:	76 c8                	jbe    40d2dc <fpmkredtab+0x1c>
		tab[i] = fpreduce(i<<s, irr);
	return;
  40d314:	90                   	nop
}
  40d315:	48 83 c4 20          	add    $0x20,%rsp
  40d319:	5b                   	pop    %rbx
  40d31a:	5d                   	pop    %rbp
  40d31b:	c3                   	retq   

000000000040d31c <fpwinreduce>:

static u32int
fpwinreduce(u32int irr, int winlen, u32int x, u32int * rabintab)
{
  40d31c:	55                   	push   %rbp
  40d31d:	48 89 e5             	mov    %rsp,%rbp
  40d320:	89 7d ec             	mov    %edi,-0x14(%rbp)
  40d323:	89 75 e8             	mov    %esi,-0x18(%rbp)
  40d326:	89 55 e4             	mov    %edx,-0x1c(%rbp)
  40d329:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
	int i;
	u32int winval;

	winval = 0;
  40d32d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	winval = ((winval<<8)|x) ^ rabintab[winval>>24];
  40d334:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40d337:	c1 e0 08             	shl    $0x8,%eax
  40d33a:	0b 45 e4             	or     -0x1c(%rbp),%eax
  40d33d:	89 c2                	mov    %eax,%edx
  40d33f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40d342:	c1 e8 18             	shr    $0x18,%eax
  40d345:	89 c0                	mov    %eax,%eax
  40d347:	48 8d 0c 85 00 00 00 	lea    0x0(,%rax,4),%rcx
  40d34e:	00 
  40d34f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d353:	48 01 c8             	add    %rcx,%rax
  40d356:	8b 00                	mov    (%rax),%eax
  40d358:	31 d0                	xor    %edx,%eax
  40d35a:	89 45 fc             	mov    %eax,-0x4(%rbp)
	for(i=1; i<winlen; i++)
  40d35d:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%rbp)
  40d364:	eb 2a                	jmp    40d390 <fpwinreduce+0x74>
		winval = (winval<<8) ^ rabintab[winval>>24];
  40d366:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40d369:	c1 e0 08             	shl    $0x8,%eax
  40d36c:	89 c2                	mov    %eax,%edx
  40d36e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40d371:	c1 e8 18             	shr    $0x18,%eax
  40d374:	89 c0                	mov    %eax,%eax
  40d376:	48 8d 0c 85 00 00 00 	lea    0x0(,%rax,4),%rcx
  40d37d:	00 
  40d37e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d382:	48 01 c8             	add    %rcx,%rax
  40d385:	8b 00                	mov    (%rax),%eax
  40d387:	31 d0                	xor    %edx,%eax
  40d389:	89 45 fc             	mov    %eax,-0x4(%rbp)
	int i;
	u32int winval;

	winval = 0;
	winval = ((winval<<8)|x) ^ rabintab[winval>>24];
	for(i=1; i<winlen; i++)
  40d38c:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  40d390:	8b 45 f8             	mov    -0x8(%rbp),%eax
  40d393:	3b 45 e8             	cmp    -0x18(%rbp),%eax
  40d396:	7c ce                	jl     40d366 <fpwinreduce+0x4a>
		winval = (winval<<8) ^ rabintab[winval>>24];
	return winval;
  40d398:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  40d39b:	5d                   	pop    %rbp
  40d39c:	c3                   	retq   

000000000040d39d <fpmkwinredtab>:

static void
fpmkwinredtab(u32int irr, int winlen, u32int * rabintab, u32int *rabinwintab)
{
  40d39d:	55                   	push   %rbp
  40d39e:	48 89 e5             	mov    %rsp,%rbp
  40d3a1:	53                   	push   %rbx
  40d3a2:	48 83 ec 28          	sub    $0x28,%rsp
  40d3a6:	89 7d e4             	mov    %edi,-0x1c(%rbp)
  40d3a9:	89 75 e0             	mov    %esi,-0x20(%rbp)
  40d3ac:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40d3b0:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	u32int i;

	for(i=0; i<256; i++)
  40d3b4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  40d3bb:	eb 2d                	jmp    40d3ea <fpmkwinredtab+0x4d>
          rabinwintab[i] = fpwinreduce(irr, winlen, i, rabintab);
  40d3bd:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40d3c0:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  40d3c7:	00 
  40d3c8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40d3cc:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  40d3d0:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  40d3d4:	8b 55 f4             	mov    -0xc(%rbp),%edx
  40d3d7:	8b 75 e0             	mov    -0x20(%rbp),%esi
  40d3da:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  40d3dd:	89 c7                	mov    %eax,%edi
  40d3df:	e8 38 ff ff ff       	callq  40d31c <fpwinreduce>
  40d3e4:	89 03                	mov    %eax,(%rbx)
static void
fpmkwinredtab(u32int irr, int winlen, u32int * rabintab, u32int *rabinwintab)
{
	u32int i;

	for(i=0; i<256; i++)
  40d3e6:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  40d3ea:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%rbp)
  40d3f1:	76 ca                	jbe    40d3bd <fpmkwinredtab+0x20>
          rabinwintab[i] = fpwinreduce(irr, winlen, i, rabintab);
	return;
  40d3f3:	90                   	nop
}
  40d3f4:	48 83 c4 28          	add    $0x28,%rsp
  40d3f8:	5b                   	pop    %rbx
  40d3f9:	5d                   	pop    %rbp
  40d3fa:	c3                   	retq   

000000000040d3fb <rabininit>:

void
rabininit(int winlen, u32int * rabintab, u32int * rabinwintab)
{
  40d3fb:	55                   	push   %rbp
  40d3fc:	48 89 e5             	mov    %rsp,%rbp
  40d3ff:	48 83 ec 18          	sub    $0x18,%rsp
  40d403:	89 7d fc             	mov    %edi,-0x4(%rbp)
  40d406:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40d40a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  //rabintab = malloc(256*sizeof rabintab[0]);
  //rabinwintab = malloc(256*sizeof rabintab[0]);
	fpmkredtab(irrpoly, 0, rabintab);
  40d40e:	8b 05 fc ad 24 00    	mov    0x24adfc(%rip),%eax        # 658210 <irrpoly>
  40d414:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40d418:	be 00 00 00 00       	mov    $0x0,%esi
  40d41d:	89 c7                	mov    %eax,%edi
  40d41f:	e8 9c fe ff ff       	callq  40d2c0 <fpmkredtab>
	fpmkwinredtab(irrpoly, winlen, rabintab, rabinwintab);
  40d424:	8b 05 e6 ad 24 00    	mov    0x24ade6(%rip),%eax        # 658210 <irrpoly>
  40d42a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40d42e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  40d432:	8b 75 fc             	mov    -0x4(%rbp),%esi
  40d435:	89 c7                	mov    %eax,%edi
  40d437:	e8 61 ff ff ff       	callq  40d39d <fpmkwinredtab>
	return;
  40d43c:	90                   	nop
}
  40d43d:	c9                   	leaveq 
  40d43e:	c3                   	retq   

000000000040d43f <rabinseg>:

int
rabinseg(uchar *p, int n, int winlen, u32int * rabintab, u32int * rabinwintab)
{
  40d43f:	55                   	push   %rbp
  40d440:	48 89 e5             	mov    %rsp,%rbp
  40d443:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  40d447:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  40d44a:	89 55 d0             	mov    %edx,-0x30(%rbp)
  40d44d:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  40d451:	4c 89 45 c0          	mov    %r8,-0x40(%rbp)
	int i;
	u32int h;
	u32int x;

	USED(winlen);
  40d455:	8b 45 d0             	mov    -0x30(%rbp),%eax
  40d458:	48 98                	cltq   
  40d45a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if(n < NWINDOW)
  40d45e:	83 7d d4 1f          	cmpl   $0x1f,-0x2c(%rbp)
  40d462:	7f 08                	jg     40d46c <rabinseg+0x2d>
		return n;
  40d464:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  40d467:	e9 03 01 00 00       	jmpq   40d56f <rabinseg+0x130>

	h = 0;
  40d46c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
	for(i=0; i<NWINDOW; i++){
  40d473:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  40d47a:	eb 44                	jmp    40d4c0 <rabinseg+0x81>
		x = h >> 24;
  40d47c:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40d47f:	c1 e8 18             	shr    $0x18,%eax
  40d482:	89 45 f4             	mov    %eax,-0xc(%rbp)
		h = (h<<8)|p[i];
  40d485:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40d488:	c1 e0 08             	shl    $0x8,%eax
  40d48b:	89 c1                	mov    %eax,%ecx
  40d48d:	8b 45 ec             	mov    -0x14(%rbp),%eax
  40d490:	48 63 d0             	movslq %eax,%rdx
  40d493:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d497:	48 01 d0             	add    %rdx,%rax
  40d49a:	0f b6 00             	movzbl (%rax),%eax
  40d49d:	0f b6 c0             	movzbl %al,%eax
  40d4a0:	09 c8                	or     %ecx,%eax
  40d4a2:	89 45 f0             	mov    %eax,-0x10(%rbp)
		h ^= rabintab[x];
  40d4a5:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40d4a8:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  40d4af:	00 
  40d4b0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d4b4:	48 01 d0             	add    %rdx,%rax
  40d4b7:	8b 00                	mov    (%rax),%eax
  40d4b9:	31 45 f0             	xor    %eax,-0x10(%rbp)
	USED(winlen);
	if(n < NWINDOW)
		return n;

	h = 0;
	for(i=0; i<NWINDOW; i++){
  40d4bc:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  40d4c0:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%rbp)
  40d4c4:	7e b6                	jle    40d47c <rabinseg+0x3d>
		x = h >> 24;
		h = (h<<8)|p[i];
		h ^= rabintab[x];
	}
	if((h & RabinMask) == 0)
  40d4c6:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40d4c9:	25 ff 0f 00 00       	and    $0xfff,%eax
  40d4ce:	85 c0                	test   %eax,%eax
  40d4d0:	75 08                	jne    40d4da <rabinseg+0x9b>
		return i;
  40d4d2:	8b 45 ec             	mov    -0x14(%rbp),%eax
  40d4d5:	e9 95 00 00 00       	jmpq   40d56f <rabinseg+0x130>
	while(i<n){
  40d4da:	e9 81 00 00 00       	jmpq   40d560 <rabinseg+0x121>
		x = p[i-NWINDOW];
  40d4df:	8b 45 ec             	mov    -0x14(%rbp),%eax
  40d4e2:	48 98                	cltq   
  40d4e4:	48 8d 50 e0          	lea    -0x20(%rax),%rdx
  40d4e8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d4ec:	48 01 d0             	add    %rdx,%rax
  40d4ef:	0f b6 00             	movzbl (%rax),%eax
  40d4f2:	0f b6 c0             	movzbl %al,%eax
  40d4f5:	89 45 f4             	mov    %eax,-0xc(%rbp)
		h ^= rabinwintab[x];
  40d4f8:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40d4fb:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  40d502:	00 
  40d503:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40d507:	48 01 d0             	add    %rdx,%rax
  40d50a:	8b 00                	mov    (%rax),%eax
  40d50c:	31 45 f0             	xor    %eax,-0x10(%rbp)
		x = h >> 24;
  40d50f:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40d512:	c1 e8 18             	shr    $0x18,%eax
  40d515:	89 45 f4             	mov    %eax,-0xc(%rbp)
		h <<= 8;
  40d518:	c1 65 f0 08          	shll   $0x8,-0x10(%rbp)
		h |= p[i++];
  40d51c:	8b 45 ec             	mov    -0x14(%rbp),%eax
  40d51f:	8d 50 01             	lea    0x1(%rax),%edx
  40d522:	89 55 ec             	mov    %edx,-0x14(%rbp)
  40d525:	48 63 d0             	movslq %eax,%rdx
  40d528:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40d52c:	48 01 d0             	add    %rdx,%rax
  40d52f:	0f b6 00             	movzbl (%rax),%eax
  40d532:	0f b6 c0             	movzbl %al,%eax
  40d535:	09 45 f0             	or     %eax,-0x10(%rbp)
		h ^= rabintab[x];
  40d538:	8b 45 f4             	mov    -0xc(%rbp),%eax
  40d53b:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  40d542:	00 
  40d543:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d547:	48 01 d0             	add    %rdx,%rax
  40d54a:	8b 00                	mov    (%rax),%eax
  40d54c:	31 45 f0             	xor    %eax,-0x10(%rbp)
		if((h & RabinMask) == 0)
  40d54f:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40d552:	25 ff 0f 00 00       	and    $0xfff,%eax
  40d557:	85 c0                	test   %eax,%eax
  40d559:	75 05                	jne    40d560 <rabinseg+0x121>
			return i;
  40d55b:	8b 45 ec             	mov    -0x14(%rbp),%eax
  40d55e:	eb 0f                	jmp    40d56f <rabinseg+0x130>
		h = (h<<8)|p[i];
		h ^= rabintab[x];
	}
	if((h & RabinMask) == 0)
		return i;
	while(i<n){
  40d560:	8b 45 ec             	mov    -0x14(%rbp),%eax
  40d563:	3b 45 d4             	cmp    -0x2c(%rbp),%eax
  40d566:	0f 8c 73 ff ff ff    	jl     40d4df <rabinseg+0xa0>
		h |= p[i++];
		h ^= rabintab[x];
		if((h & RabinMask) == 0)
			return i;
	}
	return n;
  40d56c:	8b 45 d4             	mov    -0x2c(%rbp),%eax
}
  40d56f:	5d                   	pop    %rbp
  40d570:	c3                   	retq   

000000000040d571 <TreeMakeEmpty>:
#include "util.h"

struct TreeNode * pmin;

        SearchTree TreeMakeEmpty( SearchTree T )
        {
  40d571:	55                   	push   %rbp
  40d572:	48 89 e5             	mov    %rsp,%rbp
  40d575:	48 83 ec 10          	sub    $0x10,%rsp
  40d579:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
            if( T != NULL )
  40d57d:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40d582:	74 37                	je     40d5bb <TreeMakeEmpty+0x4a>
            {
                TreeMakeEmpty( T->Left );
  40d584:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d588:	48 8b 40 08          	mov    0x8(%rax),%rax
  40d58c:	48 89 c7             	mov    %rax,%rdi
  40d58f:	e8 dd ff ff ff       	callq  40d571 <TreeMakeEmpty>
                TreeMakeEmpty( T->Right );
  40d594:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d598:	48 8b 40 10          	mov    0x10(%rax),%rax
  40d59c:	48 89 c7             	mov    %rax,%rdi
  40d59f:	e8 cd ff ff ff       	callq  40d571 <TreeMakeEmpty>
                free( T );
  40d5a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d5a8:	48 89 c7             	mov    %rax,%rdi
  40d5ab:	e8 f0 97 ff ff       	callq  406da0 <free@plt>
                pmin = NULL;
  40d5b0:	48 c7 05 dd d4 e4 01 	movq   $0x0,0x1e4d4dd(%rip)        # 225aa98 <pmin>
  40d5b7:	00 00 00 00 
            }
            return NULL;
  40d5bb:	b8 00 00 00 00       	mov    $0x0,%eax
        }
  40d5c0:	c9                   	leaveq 
  40d5c1:	c3                   	retq   

000000000040d5c2 <TreeFind>:

        Position
        TreeFind( int value, SearchTree T )
        {
  40d5c2:	55                   	push   %rbp
  40d5c3:	48 89 e5             	mov    %rsp,%rbp
  40d5c6:	48 83 ec 10          	sub    $0x10,%rsp
  40d5ca:	89 7d fc             	mov    %edi,-0x4(%rbp)
  40d5cd:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
            if( T == NULL )
  40d5d1:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  40d5d6:	75 07                	jne    40d5df <TreeFind+0x1d>
                return NULL;
  40d5d8:	b8 00 00 00 00       	mov    $0x0,%eax
  40d5dd:	eb 52                	jmp    40d631 <TreeFind+0x6f>
            if( value < T->Element->aid )
  40d5df:	8b 55 fc             	mov    -0x4(%rbp),%edx
  40d5e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d5e6:	48 8b 00             	mov    (%rax),%rax
  40d5e9:	8b 00                	mov    (%rax),%eax
  40d5eb:	39 c2                	cmp    %eax,%edx
  40d5ed:	73 17                	jae    40d606 <TreeFind+0x44>
                return TreeFind( value, T->Left );
  40d5ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d5f3:	48 8b 50 08          	mov    0x8(%rax),%rdx
  40d5f7:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40d5fa:	48 89 d6             	mov    %rdx,%rsi
  40d5fd:	89 c7                	mov    %eax,%edi
  40d5ff:	e8 be ff ff ff       	callq  40d5c2 <TreeFind>
  40d604:	eb 2b                	jmp    40d631 <TreeFind+0x6f>
            else
            if( value > T->Element->aid )
  40d606:	8b 55 fc             	mov    -0x4(%rbp),%edx
  40d609:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d60d:	48 8b 00             	mov    (%rax),%rax
  40d610:	8b 00                	mov    (%rax),%eax
  40d612:	39 c2                	cmp    %eax,%edx
  40d614:	76 17                	jbe    40d62d <TreeFind+0x6b>
                return TreeFind(value, T->Right );
  40d616:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d61a:	48 8b 50 10          	mov    0x10(%rax),%rdx
  40d61e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40d621:	48 89 d6             	mov    %rdx,%rsi
  40d624:	89 c7                	mov    %eax,%edi
  40d626:	e8 97 ff ff ff       	callq  40d5c2 <TreeFind>
  40d62b:	eb 04                	jmp    40d631 <TreeFind+0x6f>
            else
                return T;
  40d62d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
        }
  40d631:	c9                   	leaveq 
  40d632:	c3                   	retq   

000000000040d633 <TreeFindMin>:

        Position
        TreeFindMin( SearchTree T )
        {
  40d633:	55                   	push   %rbp
  40d634:	48 89 e5             	mov    %rsp,%rbp
  40d637:	48 83 ec 10          	sub    $0x10,%rsp
  40d63b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
          if (pmin != NULL) return pmin;
  40d63f:	48 8b 05 52 d4 e4 01 	mov    0x1e4d452(%rip),%rax        # 225aa98 <pmin>
  40d646:	48 85 c0             	test   %rax,%rax
  40d649:	74 09                	je     40d654 <TreeFindMin+0x21>
  40d64b:	48 8b 05 46 d4 e4 01 	mov    0x1e4d446(%rip),%rax        # 225aa98 <pmin>
  40d652:	eb 31                	jmp    40d685 <TreeFindMin+0x52>
            if( T == NULL )
  40d654:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40d659:	75 07                	jne    40d662 <TreeFindMin+0x2f>
                return NULL;
  40d65b:	b8 00 00 00 00       	mov    $0x0,%eax
  40d660:	eb 23                	jmp    40d685 <TreeFindMin+0x52>
            else
            if( T->Left == NULL )
  40d662:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d666:	48 8b 40 08          	mov    0x8(%rax),%rax
  40d66a:	48 85 c0             	test   %rax,%rax
  40d66d:	75 06                	jne    40d675 <TreeFindMin+0x42>
                return T;
  40d66f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d673:	eb 10                	jmp    40d685 <TreeFindMin+0x52>
            else
                return TreeFindMin( T->Left );
  40d675:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d679:	48 8b 40 08          	mov    0x8(%rax),%rax
  40d67d:	48 89 c7             	mov    %rax,%rdi
  40d680:	e8 ae ff ff ff       	callq  40d633 <TreeFindMin>
        }
  40d685:	c9                   	leaveq 
  40d686:	c3                   	retq   

000000000040d687 <TreeFindMax>:

        Position
        TreeFindMax( SearchTree T )
        {
  40d687:	55                   	push   %rbp
  40d688:	48 89 e5             	mov    %rsp,%rbp
  40d68b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
            if( T != NULL )
  40d68f:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40d694:	74 1b                	je     40d6b1 <TreeFindMax+0x2a>
                while( T->Right != NULL )
  40d696:	eb 0c                	jmp    40d6a4 <TreeFindMax+0x1d>
                    T = T->Right;
  40d698:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d69c:	48 8b 40 10          	mov    0x10(%rax),%rax
  40d6a0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

        Position
        TreeFindMax( SearchTree T )
        {
            if( T != NULL )
                while( T->Right != NULL )
  40d6a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d6a8:	48 8b 40 10          	mov    0x10(%rax),%rax
  40d6ac:	48 85 c0             	test   %rax,%rax
  40d6af:	75 e7                	jne    40d698 <TreeFindMax+0x11>
                    T = T->Right;

            return T;
  40d6b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
        }
  40d6b5:	5d                   	pop    %rbp
  40d6b6:	c3                   	retq   

000000000040d6b7 <TreeInsert>:

        SearchTree
        TreeInsert( TreeElementType X, SearchTree T )
        {
  40d6b7:	55                   	push   %rbp
  40d6b8:	48 89 e5             	mov    %rsp,%rbp
  40d6bb:	48 83 ec 10          	sub    $0x10,%rsp
  40d6bf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  40d6c3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
          if (pmin!= NULL && X->aid < pmin->Element->aid) pmin = NULL;
  40d6c7:	48 8b 05 ca d3 e4 01 	mov    0x1e4d3ca(%rip),%rax        # 225aa98 <pmin>
  40d6ce:	48 85 c0             	test   %rax,%rax
  40d6d1:	74 21                	je     40d6f4 <TreeInsert+0x3d>
  40d6d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d6d7:	8b 10                	mov    (%rax),%edx
  40d6d9:	48 8b 05 b8 d3 e4 01 	mov    0x1e4d3b8(%rip),%rax        # 225aa98 <pmin>
  40d6e0:	48 8b 00             	mov    (%rax),%rax
  40d6e3:	8b 00                	mov    (%rax),%eax
  40d6e5:	39 c2                	cmp    %eax,%edx
  40d6e7:	73 0b                	jae    40d6f4 <TreeInsert+0x3d>
  40d6e9:	48 c7 05 a4 d3 e4 01 	movq   $0x0,0x1e4d3a4(%rip)        # 225aa98 <pmin>
  40d6f0:	00 00 00 00 
          if( T == NULL )
  40d6f4:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  40d6f9:	75 4d                	jne    40d748 <TreeInsert+0x91>
            {
                /* Create and return a one-node tree */
              T = malloc( sizeof( struct TreeNode ) );
  40d6fb:	bf 18 00 00 00       	mov    $0x18,%edi
  40d700:	e8 4b 96 ff ff       	callq  406d50 <malloc@plt>
  40d705:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
              if( T == NULL )
  40d709:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  40d70e:	75 0f                	jne    40d71f <TreeInsert+0x68>
                perror( "Out of space!!!" );
  40d710:	bf ac 85 43 00       	mov    $0x4385ac,%edi
  40d715:	e8 66 98 ff ff       	callq  406f80 <perror@plt>
  40d71a:	e9 95 00 00 00       	jmpq   40d7b4 <TreeInsert+0xfd>
                else
                {
                  T->Element = X;
  40d71f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d723:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40d727:	48 89 10             	mov    %rdx,(%rax)
                  T->Left = T->Right = NULL;
  40d72a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d72e:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  40d735:	00 
  40d736:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d73a:	48 8b 50 10          	mov    0x10(%rax),%rdx
  40d73e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d742:	48 89 50 08          	mov    %rdx,0x8(%rax)
  40d746:	eb 6c                	jmp    40d7b4 <TreeInsert+0xfd>
                }
            }
            else
              if( X->aid < T->Element->aid )
  40d748:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d74c:	8b 10                	mov    (%rax),%edx
  40d74e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d752:	48 8b 00             	mov    (%rax),%rax
  40d755:	8b 00                	mov    (%rax),%eax
  40d757:	39 c2                	cmp    %eax,%edx
  40d759:	73 24                	jae    40d77f <TreeInsert+0xc8>
                T->Left = TreeInsert( X, T->Left );
  40d75b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d75f:	48 8b 50 08          	mov    0x8(%rax),%rdx
  40d763:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d767:	48 89 d6             	mov    %rdx,%rsi
  40d76a:	48 89 c7             	mov    %rax,%rdi
  40d76d:	e8 45 ff ff ff       	callq  40d6b7 <TreeInsert>
  40d772:	48 89 c2             	mov    %rax,%rdx
  40d775:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d779:	48 89 50 08          	mov    %rdx,0x8(%rax)
  40d77d:	eb 35                	jmp    40d7b4 <TreeInsert+0xfd>
            else
              if( X->aid > T->Element->aid )
  40d77f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d783:	8b 10                	mov    (%rax),%edx
  40d785:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d789:	48 8b 00             	mov    (%rax),%rax
  40d78c:	8b 00                	mov    (%rax),%eax
  40d78e:	39 c2                	cmp    %eax,%edx
  40d790:	76 22                	jbe    40d7b4 <TreeInsert+0xfd>
                T->Right = TreeInsert( X, T->Right );
  40d792:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d796:	48 8b 50 10          	mov    0x10(%rax),%rdx
  40d79a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d79e:	48 89 d6             	mov    %rdx,%rsi
  40d7a1:	48 89 c7             	mov    %rax,%rdi
  40d7a4:	e8 0e ff ff ff       	callq  40d6b7 <TreeInsert>
  40d7a9:	48 89 c2             	mov    %rax,%rdx
  40d7ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40d7b0:	48 89 50 10          	mov    %rdx,0x10(%rax)
            /* Else X is in the tree already; we'll do nothing */

          return T;  /* Do not forget this line!! */
  40d7b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
        }
  40d7b8:	c9                   	leaveq 
  40d7b9:	c3                   	retq   

000000000040d7ba <TreeDelete>:

        SearchTree
        TreeDelete( TreeElementType X, SearchTree T )
        {
  40d7ba:	55                   	push   %rbp
  40d7bb:	48 89 e5             	mov    %rsp,%rbp
  40d7be:	48 83 ec 20          	sub    $0x20,%rsp
  40d7c2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40d7c6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
            Position TmpCell;
            
            if (pmin != NULL && X->aid == pmin->Element->aid) pmin = NULL;
  40d7ca:	48 8b 05 c7 d2 e4 01 	mov    0x1e4d2c7(%rip),%rax        # 225aa98 <pmin>
  40d7d1:	48 85 c0             	test   %rax,%rax
  40d7d4:	74 21                	je     40d7f7 <TreeDelete+0x3d>
  40d7d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d7da:	8b 10                	mov    (%rax),%edx
  40d7dc:	48 8b 05 b5 d2 e4 01 	mov    0x1e4d2b5(%rip),%rax        # 225aa98 <pmin>
  40d7e3:	48 8b 00             	mov    (%rax),%rax
  40d7e6:	8b 00                	mov    (%rax),%eax
  40d7e8:	39 c2                	cmp    %eax,%edx
  40d7ea:	75 0b                	jne    40d7f7 <TreeDelete+0x3d>
  40d7ec:	48 c7 05 a1 d2 e4 01 	movq   $0x0,0x1e4d2a1(%rip)        # 225aa98 <pmin>
  40d7f3:	00 00 00 00 

            if( T == NULL )
  40d7f7:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  40d7fc:	75 0f                	jne    40d80d <TreeDelete+0x53>
                perror( "Element not found" );
  40d7fe:	bf bc 85 43 00       	mov    $0x4385bc,%edi
  40d803:	e8 78 97 ff ff       	callq  406f80 <perror@plt>
  40d808:	e9 1f 01 00 00       	jmpq   40d92c <TreeDelete+0x172>
            else
            if( X->aid < T->Element->aid )  /* Go left */
  40d80d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d811:	8b 10                	mov    (%rax),%edx
  40d813:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d817:	48 8b 00             	mov    (%rax),%rax
  40d81a:	8b 00                	mov    (%rax),%eax
  40d81c:	39 c2                	cmp    %eax,%edx
  40d81e:	73 27                	jae    40d847 <TreeDelete+0x8d>
                T->Left = TreeDelete( X, T->Left );
  40d820:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d824:	48 8b 50 08          	mov    0x8(%rax),%rdx
  40d828:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d82c:	48 89 d6             	mov    %rdx,%rsi
  40d82f:	48 89 c7             	mov    %rax,%rdi
  40d832:	e8 83 ff ff ff       	callq  40d7ba <TreeDelete>
  40d837:	48 89 c2             	mov    %rax,%rdx
  40d83a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d83e:	48 89 50 08          	mov    %rdx,0x8(%rax)
  40d842:	e9 e5 00 00 00       	jmpq   40d92c <TreeDelete+0x172>
            else
            if( X->aid > T->Element->aid )  /* Go right */
  40d847:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d84b:	8b 10                	mov    (%rax),%edx
  40d84d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d851:	48 8b 00             	mov    (%rax),%rax
  40d854:	8b 00                	mov    (%rax),%eax
  40d856:	39 c2                	cmp    %eax,%edx
  40d858:	76 27                	jbe    40d881 <TreeDelete+0xc7>
                T->Right = TreeDelete( X, T->Right );
  40d85a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d85e:	48 8b 50 10          	mov    0x10(%rax),%rdx
  40d862:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40d866:	48 89 d6             	mov    %rdx,%rsi
  40d869:	48 89 c7             	mov    %rax,%rdi
  40d86c:	e8 49 ff ff ff       	callq  40d7ba <TreeDelete>
  40d871:	48 89 c2             	mov    %rax,%rdx
  40d874:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d878:	48 89 50 10          	mov    %rdx,0x10(%rax)
  40d87c:	e9 ab 00 00 00       	jmpq   40d92c <TreeDelete+0x172>
            else  /* Found element to be deleted */
            if( T->Left && T->Right )  /* Two children */
  40d881:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d885:	48 8b 40 08          	mov    0x8(%rax),%rax
  40d889:	48 85 c0             	test   %rax,%rax
  40d88c:	74 56                	je     40d8e4 <TreeDelete+0x12a>
  40d88e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d892:	48 8b 40 10          	mov    0x10(%rax),%rax
  40d896:	48 85 c0             	test   %rax,%rax
  40d899:	74 49                	je     40d8e4 <TreeDelete+0x12a>
            {
                /* Replace with smallest in right subtree */
                TmpCell = TreeFindMin( T->Right );
  40d89b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d89f:	48 8b 40 10          	mov    0x10(%rax),%rax
  40d8a3:	48 89 c7             	mov    %rax,%rdi
  40d8a6:	e8 88 fd ff ff       	callq  40d633 <TreeFindMin>
  40d8ab:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                T->Element = TmpCell->Element;
  40d8af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d8b3:	48 8b 10             	mov    (%rax),%rdx
  40d8b6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d8ba:	48 89 10             	mov    %rdx,(%rax)
                T->Right = TreeDelete( T->Element, T->Right );
  40d8bd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d8c1:	48 8b 50 10          	mov    0x10(%rax),%rdx
  40d8c5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d8c9:	48 8b 00             	mov    (%rax),%rax
  40d8cc:	48 89 d6             	mov    %rdx,%rsi
  40d8cf:	48 89 c7             	mov    %rax,%rdi
  40d8d2:	e8 e3 fe ff ff       	callq  40d7ba <TreeDelete>
  40d8d7:	48 89 c2             	mov    %rax,%rdx
  40d8da:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d8de:	48 89 50 10          	mov    %rdx,0x10(%rax)
  40d8e2:	eb 48                	jmp    40d92c <TreeDelete+0x172>
            }
            else  /* One or zero children */
            {
                TmpCell = T;
  40d8e4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d8e8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                if( T->Left == NULL ) /* Also handles 0 children */
  40d8ec:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d8f0:	48 8b 40 08          	mov    0x8(%rax),%rax
  40d8f4:	48 85 c0             	test   %rax,%rax
  40d8f7:	75 0e                	jne    40d907 <TreeDelete+0x14d>
                    T = T->Right;
  40d8f9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d8fd:	48 8b 40 10          	mov    0x10(%rax),%rax
  40d901:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  40d905:	eb 19                	jmp    40d920 <TreeDelete+0x166>
                else if( T->Right == NULL )
  40d907:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d90b:	48 8b 40 10          	mov    0x10(%rax),%rax
  40d90f:	48 85 c0             	test   %rax,%rax
  40d912:	75 0c                	jne    40d920 <TreeDelete+0x166>
                    T = T->Left;
  40d914:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40d918:	48 8b 40 08          	mov    0x8(%rax),%rax
  40d91c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
                free( TmpCell );
  40d920:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d924:	48 89 c7             	mov    %rax,%rdi
  40d927:	e8 74 94 ff ff       	callq  406da0 <free@plt>
            }

            return T;
  40d92c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
        }
  40d930:	c9                   	leaveq 
  40d931:	c3                   	retq   

000000000040d932 <Retrieve>:

        TreeElementType
        Retrieve( Position P )
        {
  40d932:	55                   	push   %rbp
  40d933:	48 89 e5             	mov    %rsp,%rbp
  40d936:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
            return P->Element;
  40d93a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d93e:	48 8b 00             	mov    (%rax),%rax
        }
  40d941:	5d                   	pop    %rbp
  40d942:	c3                   	retq   

000000000040d943 <Calc_SHA1Sig>:
#include "queue.h"
#include "dedupdef.h"
#include "util.h"

void Calc_SHA1Sig(const byte* buf, int32 num_bytes, u_char * digest)
{
  40d943:	55                   	push   %rbp
  40d944:	48 89 e5             	mov    %rsp,%rbp
  40d947:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
  40d94e:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  40d952:	89 75 84             	mov    %esi,-0x7c(%rbp)
  40d955:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  40d95c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  40d963:	00 00 
  40d965:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40d969:	31 c0                	xor    %eax,%eax
  SHA_CTX sha;
 
  SHA1_Init(&sha);
  40d96b:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  40d96f:	48 89 c7             	mov    %rax,%rdi
  40d972:	e8 c9 3c 01 00       	callq  421640 <SHA1_Init>
  SHA1_Update(&sha, buf, num_bytes);
  40d977:	8b 45 84             	mov    -0x7c(%rbp),%eax
  40d97a:	48 63 d0             	movslq %eax,%rdx
  40d97d:	48 8b 4d 88          	mov    -0x78(%rbp),%rcx
  40d981:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  40d985:	48 89 ce             	mov    %rcx,%rsi
  40d988:	48 89 c7             	mov    %rax,%rdi
  40d98b:	e8 f0 38 01 00       	callq  421280 <SHA1_Update>
  SHA1_Final(digest, &sha);
  40d990:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
  40d994:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  40d99b:	48 89 d6             	mov    %rdx,%rsi
  40d99e:	48 89 c7             	mov    %rax,%rdi
  40d9a1:	e8 fa 3a 01 00       	callq  4214a0 <SHA1_Final>
}
  40d9a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40d9aa:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  40d9b1:	00 00 
  40d9b3:	74 05                	je     40d9ba <Calc_SHA1Sig+0x77>
  40d9b5:	e8 06 95 ff ff       	callq  406ec0 <__stack_chk_fail@plt>
  40d9ba:	c9                   	leaveq 
  40d9bb:	c3                   	retq   

000000000040d9bc <xread>:

int
xread(int sd, void *buf, size_t len)
{
  40d9bc:	55                   	push   %rbp
  40d9bd:	48 89 e5             	mov    %rsp,%rbp
  40d9c0:	48 83 ec 40          	sub    $0x40,%rsp
  40d9c4:	89 7d dc             	mov    %edi,-0x24(%rbp)
  40d9c7:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40d9cb:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  char *p = (char *)buf;
  40d9cf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40d9d3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  size_t nrecv = 0;
  40d9d7:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  40d9de:	00 
  size_t rv;
  
  while (nrecv < len) {
  40d9df:	eb 3e                	jmp    40da1f <xread+0x63>
    rv = read(sd, p, len - nrecv);
  40d9e1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40d9e5:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
  40d9e9:	48 89 c2             	mov    %rax,%rdx
  40d9ec:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40d9f0:	8b 45 dc             	mov    -0x24(%rbp),%eax
  40d9f3:	48 89 ce             	mov    %rcx,%rsi
  40d9f6:	89 c7                	mov    %eax,%edi
  40d9f8:	e8 43 93 ff ff       	callq  406d40 <read@plt>
  40d9fd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    //write(stdout, p, len - nrecv);
    if (0 > rv && errno == EINTR)
      continue;
    if (0 > rv)
      return -1;
    if (0 == rv)
  40da01:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40da06:	75 07                	jne    40da0f <xread+0x53>
      return 0;
  40da08:	b8 00 00 00 00       	mov    $0x0,%eax
  40da0d:	eb 1e                	jmp    40da2d <xread+0x71>
    nrecv += rv;
  40da0f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40da13:	48 01 45 f0          	add    %rax,-0x10(%rbp)
    p += rv;
  40da17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40da1b:	48 01 45 e8          	add    %rax,-0x18(%rbp)
{
  char *p = (char *)buf;
  size_t nrecv = 0;
  size_t rv;
  
  while (nrecv < len) {
  40da1f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40da23:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  40da27:	72 b8                	jb     40d9e1 <xread+0x25>
    if (0 == rv)
      return 0;
    nrecv += rv;
    p += rv;
  }
  return nrecv;
  40da29:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
  40da2d:	c9                   	leaveq 
  40da2e:	c3                   	retq   

000000000040da2f <xwrite>:

int
xwrite(int sd, const void *buf, size_t len)
{
  40da2f:	55                   	push   %rbp
  40da30:	48 89 e5             	mov    %rsp,%rbp
  40da33:	48 83 ec 40          	sub    $0x40,%rsp
  40da37:	89 7d dc             	mov    %edi,-0x24(%rbp)
  40da3a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  40da3e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  char *p = (char *)buf;
  40da42:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40da46:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  size_t nsent = 0;
  40da4a:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  40da51:	00 
  ssize_t rv;
  
  while (nsent < len) {
  40da52:	eb 5f                	jmp    40dab3 <xwrite+0x84>
    rv = write(sd, p, len - nsent);
  40da54:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40da58:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
  40da5c:	48 89 c2             	mov    %rax,%rdx
  40da5f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  40da63:	8b 45 dc             	mov    -0x24(%rbp),%eax
  40da66:	48 89 ce             	mov    %rcx,%rsi
  40da69:	89 c7                	mov    %eax,%edi
  40da6b:	e8 50 95 ff ff       	callq  406fc0 <write@plt>
  40da70:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    if (0 > rv && (errno == EINTR || errno == EAGAIN))
  40da74:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40da79:	79 1a                	jns    40da95 <xwrite+0x66>
  40da7b:	e8 20 94 ff ff       	callq  406ea0 <__errno_location@plt>
  40da80:	8b 00                	mov    (%rax),%eax
  40da82:	83 f8 04             	cmp    $0x4,%eax
  40da85:	74 0c                	je     40da93 <xwrite+0x64>
  40da87:	e8 14 94 ff ff       	callq  406ea0 <__errno_location@plt>
  40da8c:	8b 00                	mov    (%rax),%eax
  40da8e:	83 f8 0b             	cmp    $0xb,%eax
  40da91:	75 02                	jne    40da95 <xwrite+0x66>
      continue;
  40da93:	eb 1e                	jmp    40dab3 <xwrite+0x84>
    if (0 > rv)
  40da95:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  40da9a:	79 07                	jns    40daa3 <xwrite+0x74>
      return -1;
  40da9c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  40daa1:	eb 1e                	jmp    40dac1 <xwrite+0x92>
    nsent += rv;
  40daa3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40daa7:	48 01 45 f0          	add    %rax,-0x10(%rbp)
    p += rv;
  40daab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40daaf:	48 01 45 e8          	add    %rax,-0x18(%rbp)
{
  char *p = (char *)buf;
  size_t nsent = 0;
  ssize_t rv;
  
  while (nsent < len) {
  40dab3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40dab7:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  40dabb:	72 97                	jb     40da54 <xwrite+0x25>
    if (0 > rv)
      return -1;
    nsent += rv;
    p += rv;
  }
  return nsent;
  40dabd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
  40dac1:	c9                   	leaveq 
  40dac2:	c3                   	retq   

000000000040dac3 <hash_from_key_fn>:

unsigned int
hash_from_key_fn( void *k ){
  40dac3:	55                   	push   %rbp
  40dac4:	48 89 e5             	mov    %rsp,%rbp
  40dac7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  int i = 0;
  40dacb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  int hash = 0;
  40dad2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  unsigned char* sha1name = ((CacheKey*)k)->sha1name;
  40dad9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40dadd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  for (i = 0; i < SHA1_LEN; i++) {
  40dae1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  40dae8:	eb 1a                	jmp    40db04 <hash_from_key_fn+0x41>
    hash += *(((unsigned char*)sha1name) + i);
  40daea:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40daed:	48 63 d0             	movslq %eax,%rdx
  40daf0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40daf4:	48 01 d0             	add    %rdx,%rax
  40daf7:	0f b6 00             	movzbl (%rax),%eax
  40dafa:	0f b6 c0             	movzbl %al,%eax
  40dafd:	01 45 f4             	add    %eax,-0xc(%rbp)
unsigned int
hash_from_key_fn( void *k ){
  int i = 0;
  int hash = 0;
  unsigned char* sha1name = ((CacheKey*)k)->sha1name;
  for (i = 0; i < SHA1_LEN; i++) {
  40db00:	83 45 f0 01          	addl   $0x1,-0x10(%rbp)
  40db04:	83 7d f0 13          	cmpl   $0x13,-0x10(%rbp)
  40db08:	7e e0                	jle    40daea <hash_from_key_fn+0x27>
    hash += *(((unsigned char*)sha1name) + i);
  }
  return hash;
  40db0a:	8b 45 f4             	mov    -0xc(%rbp),%eax
}
  40db0d:	5d                   	pop    %rbp
  40db0e:	c3                   	retq   

000000000040db0f <dump_scannums>:
static uint64_t l1_num = 0;
static uint64_t l1_scans = 0;
static uint64_t l2_num = 0;
static uint64_t l2_scans = 0;

void dump_scannums() {
  40db0f:	55                   	push   %rbp
  40db10:	48 89 e5             	mov    %rsp,%rbp
  /*printf("Number L1 scans: %"PRIu64"\n", l1_num);
  printf("Number L1 elements touched on average: %"PRIu64"\n", l1_scans/l1_num);
  printf("Number L2 scans: %"PRIu64"\n", l2_num);
  printf("Number L2 elements touched on average: %"PRIu64"\n", l2_scans/l2_num);
  */
}
  40db13:	5d                   	pop    %rbp
  40db14:	c3                   	retq   

000000000040db15 <writelist_insert>:

struct write_list * writelist_insert(struct write_list * list_head, u_int32 aid, u_int32 cid) {
  40db15:	55                   	push   %rbp
  40db16:	48 89 e5             	mov    %rsp,%rbp
  40db19:	48 83 ec 40          	sub    $0x40,%rsp
  40db1d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  40db21:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  40db24:	89 55 c0             	mov    %edx,-0x40(%rbp)
  struct write_list * p, * pnext = NULL, *panchornext = NULL, *prenew, *tmp;
  40db27:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40db2e:	00 
  40db2f:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  40db36:	00 
  if (list_head == NULL) {
  40db37:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  40db3c:	75 2b                	jne    40db69 <writelist_insert+0x54>
    list_head = (struct write_list *) malloc(sizeof(struct write_list));
  40db3e:	bf 30 00 00 00       	mov    $0x30,%edi
  40db43:	e8 08 92 ff ff       	callq  406d50 <malloc@plt>
  40db48:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    pnext = NULL;
  40db4c:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  40db53:	00 
    p = list_head;
  40db54:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40db58:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    panchornext = p;
  40db5c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40db60:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  40db64:	e9 5f 02 00 00       	jmpq   40ddc8 <writelist_insert+0x2b3>
  } else {
    if (aid < list_head->anchorid || (aid == list_head->anchorid && cid < list_head->cid)) {
  40db69:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40db6d:	8b 40 14             	mov    0x14(%rax),%eax
  40db70:	3b 45 c4             	cmp    -0x3c(%rbp),%eax
  40db73:	77 18                	ja     40db8d <writelist_insert+0x78>
  40db75:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40db79:	8b 40 14             	mov    0x14(%rax),%eax
  40db7c:	3b 45 c4             	cmp    -0x3c(%rbp),%eax
  40db7f:	75 58                	jne    40dbd9 <writelist_insert+0xc4>
  40db81:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40db85:	8b 40 10             	mov    0x10(%rax),%eax
  40db88:	3b 45 c0             	cmp    -0x40(%rbp),%eax
  40db8b:	76 4c                	jbe    40dbd9 <writelist_insert+0xc4>
      p = (struct write_list *) malloc(sizeof(struct write_list));
  40db8d:	bf 30 00 00 00       	mov    $0x30,%edi
  40db92:	e8 b9 91 ff ff       	callq  406d50 <malloc@plt>
  40db97:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      p->next = list_head;
  40db9b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40db9f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40dba3:	48 89 10             	mov    %rdx,(%rax)
      if (aid < list_head->anchorid) {
  40dba6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40dbaa:	8b 40 14             	mov    0x14(%rax),%eax
  40dbad:	3b 45 c4             	cmp    -0x3c(%rbp),%eax
  40dbb0:	76 0e                	jbe    40dbc0 <writelist_insert+0xab>
        p->anchornext = p;
  40dbb2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40dbb6:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40dbba:	48 89 50 08          	mov    %rdx,0x8(%rax)
  40dbbe:	eb 10                	jmp    40dbd0 <writelist_insert+0xbb>
      } else {
        p->anchornext = list_head->anchornext;
  40dbc0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40dbc4:	48 8b 50 08          	mov    0x8(%rax),%rdx
  40dbc8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40dbcc:	48 89 50 08          	mov    %rdx,0x8(%rax)
      }
      return p;
  40dbd0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40dbd4:	e9 0a 02 00 00       	jmpq   40dde3 <writelist_insert+0x2ce>
    } else {
      p = list_head;
  40dbd9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40dbdd:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

      l1_num++;
  40dbe1:	48 8b 05 d8 b0 24 00 	mov    0x24b0d8(%rip),%rax        # 658cc0 <l1_num>
  40dbe8:	48 83 c0 01          	add    $0x1,%rax
  40dbec:	48 89 05 cd b0 24 00 	mov    %rax,0x24b0cd(%rip)        # 658cc0 <l1_num>
      while (p->anchornext->next != NULL && aid > p->anchornext->next->anchorid) {
  40dbf3:	eb 21                	jmp    40dc16 <writelist_insert+0x101>
        p = p->anchornext->next;
  40dbf5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40dbf9:	48 8b 40 08          	mov    0x8(%rax),%rax
  40dbfd:	48 8b 00             	mov    (%rax),%rax
  40dc00:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        l1_scans++;
  40dc04:	48 8b 05 bd b0 24 00 	mov    0x24b0bd(%rip),%rax        # 658cc8 <l1_scans>
  40dc0b:	48 83 c0 01          	add    $0x1,%rax
  40dc0f:	48 89 05 b2 b0 24 00 	mov    %rax,0x24b0b2(%rip)        # 658cc8 <l1_scans>
      return p;
    } else {
      p = list_head;

      l1_num++;
      while (p->anchornext->next != NULL && aid > p->anchornext->next->anchorid) {
  40dc16:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40dc1a:	48 8b 40 08          	mov    0x8(%rax),%rax
  40dc1e:	48 8b 00             	mov    (%rax),%rax
  40dc21:	48 85 c0             	test   %rax,%rax
  40dc24:	74 13                	je     40dc39 <writelist_insert+0x124>
  40dc26:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40dc2a:	48 8b 40 08          	mov    0x8(%rax),%rax
  40dc2e:	48 8b 00             	mov    (%rax),%rax
  40dc31:	8b 40 14             	mov    0x14(%rax),%eax
  40dc34:	3b 45 c4             	cmp    -0x3c(%rbp),%eax
  40dc37:	72 bc                	jb     40dbf5 <writelist_insert+0xe0>
        p = p->anchornext->next;
        l1_scans++;
      }
      panchornext = p->anchornext;
  40dc39:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40dc3d:	48 8b 40 08          	mov    0x8(%rax),%rax
  40dc41:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      l2_num++;
  40dc45:	48 8b 05 84 b0 24 00 	mov    0x24b084(%rip),%rax        # 658cd0 <l2_num>
  40dc4c:	48 83 c0 01          	add    $0x1,%rax
  40dc50:	48 89 05 79 b0 24 00 	mov    %rax,0x24b079(%rip)        # 658cd0 <l2_num>
      while (p->next != NULL && (aid > p->next->anchorid || (aid == p->next->anchorid && cid > p->next->cid))) {
  40dc57:	eb 1d                	jmp    40dc76 <writelist_insert+0x161>
        p = p->next;
  40dc59:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40dc5d:	48 8b 00             	mov    (%rax),%rax
  40dc60:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        l2_scans++;
  40dc64:	48 8b 05 6d b0 24 00 	mov    0x24b06d(%rip),%rax        # 658cd8 <l2_scans>
  40dc6b:	48 83 c0 01          	add    $0x1,%rax
  40dc6f:	48 89 05 62 b0 24 00 	mov    %rax,0x24b062(%rip)        # 658cd8 <l2_scans>
        p = p->anchornext->next;
        l1_scans++;
      }
      panchornext = p->anchornext;
      l2_num++;
      while (p->next != NULL && (aid > p->next->anchorid || (aid == p->next->anchorid && cid > p->next->cid))) {
  40dc76:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40dc7a:	48 8b 00             	mov    (%rax),%rax
  40dc7d:	48 85 c0             	test   %rax,%rax
  40dc80:	74 2d                	je     40dcaf <writelist_insert+0x19a>
  40dc82:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40dc86:	48 8b 00             	mov    (%rax),%rax
  40dc89:	8b 40 14             	mov    0x14(%rax),%eax
  40dc8c:	3b 45 c4             	cmp    -0x3c(%rbp),%eax
  40dc8f:	72 c8                	jb     40dc59 <writelist_insert+0x144>
  40dc91:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40dc95:	48 8b 00             	mov    (%rax),%rax
  40dc98:	8b 40 14             	mov    0x14(%rax),%eax
  40dc9b:	3b 45 c4             	cmp    -0x3c(%rbp),%eax
  40dc9e:	75 0f                	jne    40dcaf <writelist_insert+0x19a>
  40dca0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40dca4:	48 8b 00             	mov    (%rax),%rax
  40dca7:	8b 40 10             	mov    0x10(%rax),%eax
  40dcaa:	3b 45 c0             	cmp    -0x40(%rbp),%eax
  40dcad:	72 aa                	jb     40dc59 <writelist_insert+0x144>
        p = p->next;
        l2_scans++;
      }
      tmp = p;
  40dcaf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40dcb3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      pnext = p->next;   
  40dcb7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40dcbb:	48 8b 00             	mov    (%rax),%rax
  40dcbe:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      p->next = (struct write_list *) malloc(sizeof(struct write_list));
  40dcc2:	bf 30 00 00 00       	mov    $0x30,%edi
  40dcc7:	e8 84 90 ff ff       	callq  406d50 <malloc@plt>
  40dccc:	48 89 c2             	mov    %rax,%rdx
  40dccf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40dcd3:	48 89 10             	mov    %rdx,(%rax)
      p = p->next;
  40dcd6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40dcda:	48 8b 00             	mov    (%rax),%rax
  40dcdd:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      if (aid == tmp->anchorid && cid > tmp->cid && (pnext == NULL || pnext->anchorid >aid)) {
  40dce1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40dce5:	8b 40 14             	mov    0x14(%rax),%eax
  40dce8:	3b 45 c4             	cmp    -0x3c(%rbp),%eax
  40dceb:	0f 85 91 00 00 00    	jne    40dd82 <writelist_insert+0x26d>
  40dcf1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40dcf5:	8b 40 10             	mov    0x10(%rax),%eax
  40dcf8:	3b 45 c0             	cmp    -0x40(%rbp),%eax
  40dcfb:	0f 83 81 00 00 00    	jae    40dd82 <writelist_insert+0x26d>
  40dd01:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  40dd06:	74 0c                	je     40dd14 <writelist_insert+0x1ff>
  40dd08:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40dd0c:	8b 40 14             	mov    0x14(%rax),%eax
  40dd0f:	3b 45 c4             	cmp    -0x3c(%rbp),%eax
  40dd12:	76 6e                	jbe    40dd82 <writelist_insert+0x26d>
        prenew = list_head;
  40dd14:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40dd18:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        while (aid > 0 && prenew->anchorid < aid-1) {
  40dd1c:	eb 0f                	jmp    40dd2d <writelist_insert+0x218>
          prenew= prenew->anchornext->next;
  40dd1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40dd22:	48 8b 40 08          	mov    0x8(%rax),%rax
  40dd26:	48 8b 00             	mov    (%rax),%rax
  40dd29:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
      pnext = p->next;   
      p->next = (struct write_list *) malloc(sizeof(struct write_list));
      p = p->next;
      if (aid == tmp->anchorid && cid > tmp->cid && (pnext == NULL || pnext->anchorid >aid)) {
        prenew = list_head;
        while (aid > 0 && prenew->anchorid < aid-1) {
  40dd2d:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  40dd31:	74 11                	je     40dd44 <writelist_insert+0x22f>
  40dd33:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40dd37:	8b 40 14             	mov    0x14(%rax),%eax
  40dd3a:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  40dd3d:	83 ea 01             	sub    $0x1,%edx
  40dd40:	39 d0                	cmp    %edx,%eax
  40dd42:	72 da                	jb     40dd1e <writelist_insert+0x209>
          prenew= prenew->anchornext->next;
        }
        while (prenew != NULL && prenew != p && prenew->anchorid == aid) {
  40dd44:	eb 17                	jmp    40dd5d <writelist_insert+0x248>
          prenew->anchornext = p;
  40dd46:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40dd4a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40dd4e:	48 89 50 08          	mov    %rdx,0x8(%rax)
          prenew = prenew->next;
  40dd52:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40dd56:	48 8b 00             	mov    (%rax),%rax
  40dd59:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
      if (aid == tmp->anchorid && cid > tmp->cid && (pnext == NULL || pnext->anchorid >aid)) {
        prenew = list_head;
        while (aid > 0 && prenew->anchorid < aid-1) {
          prenew= prenew->anchornext->next;
        }
        while (prenew != NULL && prenew != p && prenew->anchorid == aid) {
  40dd5d:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  40dd62:	74 16                	je     40dd7a <writelist_insert+0x265>
  40dd64:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40dd68:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  40dd6c:	74 0c                	je     40dd7a <writelist_insert+0x265>
  40dd6e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40dd72:	8b 40 14             	mov    0x14(%rax),%eax
  40dd75:	3b 45 c4             	cmp    -0x3c(%rbp),%eax
  40dd78:	74 cc                	je     40dd46 <writelist_insert+0x231>
          prenew->anchornext = p;
          prenew = prenew->next;
        } 
        panchornext = p;
  40dd7a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40dd7e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      }
      if (pnext != NULL && pnext->anchorid == aid) {
  40dd82:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  40dd87:	74 18                	je     40dda1 <writelist_insert+0x28c>
  40dd89:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40dd8d:	8b 40 14             	mov    0x14(%rax),%eax
  40dd90:	3b 45 c4             	cmp    -0x3c(%rbp),%eax
  40dd93:	75 0c                	jne    40dda1 <writelist_insert+0x28c>
        panchornext = pnext->anchornext;
  40dd95:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40dd99:	48 8b 40 08          	mov    0x8(%rax),%rax
  40dd9d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      }
      if (aid > tmp->anchorid && (pnext == NULL || pnext->anchorid > aid)) {
  40dda1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40dda5:	8b 40 14             	mov    0x14(%rax),%eax
  40dda8:	3b 45 c4             	cmp    -0x3c(%rbp),%eax
  40ddab:	73 1b                	jae    40ddc8 <writelist_insert+0x2b3>
  40ddad:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  40ddb2:	74 0c                	je     40ddc0 <writelist_insert+0x2ab>
  40ddb4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40ddb8:	8b 40 14             	mov    0x14(%rax),%eax
  40ddbb:	3b 45 c4             	cmp    -0x3c(%rbp),%eax
  40ddbe:	76 08                	jbe    40ddc8 <writelist_insert+0x2b3>
        panchornext = p;
  40ddc0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40ddc4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      }
    }
  }

  p->next = pnext;
  40ddc8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40ddcc:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40ddd0:	48 89 10             	mov    %rdx,(%rax)
  p->anchornext = panchornext;
  40ddd3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40ddd7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40dddb:	48 89 50 08          	mov    %rdx,0x8(%rax)

  return p;
  40dddf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
} 
  40dde3:	c9                   	leaveq 
  40dde4:	c3                   	retq   
  40dde5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40ddec:	00 00 00 
  40ddef:	90                   	nop

000000000040ddf0 <compress2>:
    Bytef *dest;
    uLongf *destLen;
    const Bytef *source;
    uLong sourceLen;
    int level;
{
  40ddf0:	55                   	push   %rbp
  40ddf1:	53                   	push   %rbx
  40ddf2:	48 89 f5             	mov    %rsi,%rbp
  40ddf5:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
    z_stream stream;
    int err;

    stream.next_in = (Bytef*)source;
  40ddfc:	48 89 14 24          	mov    %rdx,(%rsp)
#ifdef MAXSEG_64K
    /* Check for source > 64K on 16-bit machine: */
    if ((uLong)stream.avail_in != sourceLen) return Z_BUF_ERROR;
#endif
    stream.next_out = dest;
    stream.avail_out = (uInt)*destLen;
  40de00:	48 8b 16             	mov    (%rsi),%rdx
{
    z_stream stream;
    int err;

    stream.next_in = (Bytef*)source;
    stream.avail_in = (uInt)sourceLen;
  40de03:	89 4c 24 08          	mov    %ecx,0x8(%rsp)
#ifdef MAXSEG_64K
    /* Check for source > 64K on 16-bit machine: */
    if ((uLong)stream.avail_in != sourceLen) return Z_BUF_ERROR;
#endif
    stream.next_out = dest;
  40de07:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
    Bytef *dest;
    uLongf *destLen;
    const Bytef *source;
    uLong sourceLen;
    int level;
{
  40de0c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  40de13:	00 00 
  40de15:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  40de1a:	31 c0                	xor    %eax,%eax
    /* Check for source > 64K on 16-bit machine: */
    if ((uLong)stream.avail_in != sourceLen) return Z_BUF_ERROR;
#endif
    stream.next_out = dest;
    stream.avail_out = (uInt)*destLen;
    if ((uLong)stream.avail_out != *destLen) return Z_BUF_ERROR;
  40de1c:	89 d1                	mov    %edx,%ecx
#ifdef MAXSEG_64K
    /* Check for source > 64K on 16-bit machine: */
    if ((uLong)stream.avail_in != sourceLen) return Z_BUF_ERROR;
#endif
    stream.next_out = dest;
    stream.avail_out = (uInt)*destLen;
  40de1e:	89 54 24 20          	mov    %edx,0x20(%rsp)
    if ((uLong)stream.avail_out != *destLen) return Z_BUF_ERROR;
  40de22:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
  40de27:	48 39 ca             	cmp    %rcx,%rdx
  40de2a:	75 34                	jne    40de60 <compress2+0x70>

    stream.zalloc = (alloc_func)0;
    stream.zfree = (free_func)0;
    stream.opaque = (voidpf)0;

    err = deflateInit(&stream, level);
  40de2c:	b9 70 00 00 00       	mov    $0x70,%ecx
  40de31:	ba ce 85 43 00       	mov    $0x4385ce,%edx
  40de36:	44 89 c6             	mov    %r8d,%esi
  40de39:	48 89 e7             	mov    %rsp,%rdi
#endif
    stream.next_out = dest;
    stream.avail_out = (uInt)*destLen;
    if ((uLong)stream.avail_out != *destLen) return Z_BUF_ERROR;

    stream.zalloc = (alloc_func)0;
  40de3c:	48 c7 44 24 40 00 00 	movq   $0x0,0x40(%rsp)
  40de43:	00 00 
    stream.zfree = (free_func)0;
  40de45:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  40de4c:	00 00 
    stream.opaque = (voidpf)0;
  40de4e:	48 c7 44 24 50 00 00 	movq   $0x0,0x50(%rsp)
  40de55:	00 00 

    err = deflateInit(&stream, level);
  40de57:	e8 f4 3a 00 00       	callq  411950 <deflateInit_>
    if (err != Z_OK) return err;
  40de5c:	85 c0                	test   %eax,%eax
  40de5e:	74 20                	je     40de80 <compress2+0x90>
    }
    *destLen = stream.total_out;

    err = deflateEnd(&stream);
    return err;
}
  40de60:	48 8b 5c 24 78       	mov    0x78(%rsp),%rbx
  40de65:	64 48 33 1c 25 28 00 	xor    %fs:0x28,%rbx
  40de6c:	00 00 
  40de6e:	75 53                	jne    40dec3 <compress2+0xd3>
  40de70:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  40de77:	5b                   	pop    %rbx
  40de78:	5d                   	pop    %rbp
  40de79:	c3                   	retq   
  40de7a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    stream.opaque = (voidpf)0;

    err = deflateInit(&stream, level);
    if (err != Z_OK) return err;

    err = deflate(&stream, Z_FINISH);
  40de80:	be 04 00 00 00       	mov    $0x4,%esi
  40de85:	48 89 e7             	mov    %rsp,%rdi
  40de88:	e8 d3 26 00 00       	callq  410560 <deflate>
    if (err != Z_STREAM_END) {
  40de8d:	83 f8 01             	cmp    $0x1,%eax
    stream.opaque = (voidpf)0;

    err = deflateInit(&stream, level);
    if (err != Z_OK) return err;

    err = deflate(&stream, Z_FINISH);
  40de90:	89 c3                	mov    %eax,%ebx
    if (err != Z_STREAM_END) {
  40de92:	74 1c                	je     40deb0 <compress2+0xc0>
        deflateEnd(&stream);
  40de94:	48 89 e7             	mov    %rsp,%rdi
  40de97:	e8 e4 36 00 00       	callq  411580 <deflateEnd>
        return err == Z_OK ? Z_BUF_ERROR : err;
  40de9c:	85 db                	test   %ebx,%ebx
  40de9e:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
  40dea3:	0f 45 c3             	cmovne %ebx,%eax
  40dea6:	eb b8                	jmp    40de60 <compress2+0x70>
  40dea8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40deaf:	00 
    }
    *destLen = stream.total_out;
  40deb0:	48 8b 44 24 28       	mov    0x28(%rsp),%rax

    err = deflateEnd(&stream);
  40deb5:	48 89 e7             	mov    %rsp,%rdi
    err = deflate(&stream, Z_FINISH);
    if (err != Z_STREAM_END) {
        deflateEnd(&stream);
        return err == Z_OK ? Z_BUF_ERROR : err;
    }
    *destLen = stream.total_out;
  40deb8:	48 89 45 00          	mov    %rax,0x0(%rbp)

    err = deflateEnd(&stream);
  40debc:	e8 bf 36 00 00       	callq  411580 <deflateEnd>
    return err;
  40dec1:	eb 9d                	jmp    40de60 <compress2+0x70>
}
  40dec3:	e8 f8 8f ff ff       	callq  406ec0 <__stack_chk_fail@plt>
  40dec8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40decf:	00 

000000000040ded0 <compress>:
int ZEXPORT compress (dest, destLen, source, sourceLen)
    Bytef *dest;
    uLongf *destLen;
    const Bytef *source;
    uLong sourceLen;
{
  40ded0:	55                   	push   %rbp
  40ded1:	53                   	push   %rbx
  40ded2:	48 89 f5             	mov    %rsi,%rbp
  40ded5:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
    int level;
{
    z_stream stream;
    int err;

    stream.next_in = (Bytef*)source;
  40dedc:	48 89 14 24          	mov    %rdx,(%rsp)
#ifdef MAXSEG_64K
    /* Check for source > 64K on 16-bit machine: */
    if ((uLong)stream.avail_in != sourceLen) return Z_BUF_ERROR;
#endif
    stream.next_out = dest;
    stream.avail_out = (uInt)*destLen;
  40dee0:	48 8b 16             	mov    (%rsi),%rdx
{
    z_stream stream;
    int err;

    stream.next_in = (Bytef*)source;
    stream.avail_in = (uInt)sourceLen;
  40dee3:	89 4c 24 08          	mov    %ecx,0x8(%rsp)
#ifdef MAXSEG_64K
    /* Check for source > 64K on 16-bit machine: */
    if ((uLong)stream.avail_in != sourceLen) return Z_BUF_ERROR;
#endif
    stream.next_out = dest;
  40dee7:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
int ZEXPORT compress (dest, destLen, source, sourceLen)
    Bytef *dest;
    uLongf *destLen;
    const Bytef *source;
    uLong sourceLen;
{
  40deec:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  40def3:	00 00 
  40def5:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  40defa:	31 c0                	xor    %eax,%eax
    /* Check for source > 64K on 16-bit machine: */
    if ((uLong)stream.avail_in != sourceLen) return Z_BUF_ERROR;
#endif
    stream.next_out = dest;
    stream.avail_out = (uInt)*destLen;
    if ((uLong)stream.avail_out != *destLen) return Z_BUF_ERROR;
  40defc:	89 d1                	mov    %edx,%ecx
#ifdef MAXSEG_64K
    /* Check for source > 64K on 16-bit machine: */
    if ((uLong)stream.avail_in != sourceLen) return Z_BUF_ERROR;
#endif
    stream.next_out = dest;
    stream.avail_out = (uInt)*destLen;
  40defe:	89 54 24 20          	mov    %edx,0x20(%rsp)
    if ((uLong)stream.avail_out != *destLen) return Z_BUF_ERROR;
  40df02:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
  40df07:	48 39 ca             	cmp    %rcx,%rdx
  40df0a:	75 36                	jne    40df42 <compress+0x72>

    stream.zalloc = (alloc_func)0;
    stream.zfree = (free_func)0;
    stream.opaque = (voidpf)0;

    err = deflateInit(&stream, level);
  40df0c:	b9 70 00 00 00       	mov    $0x70,%ecx
  40df11:	ba ce 85 43 00       	mov    $0x4385ce,%edx
  40df16:	be ff ff ff ff       	mov    $0xffffffff,%esi
  40df1b:	48 89 e7             	mov    %rsp,%rdi
#endif
    stream.next_out = dest;
    stream.avail_out = (uInt)*destLen;
    if ((uLong)stream.avail_out != *destLen) return Z_BUF_ERROR;

    stream.zalloc = (alloc_func)0;
  40df1e:	48 c7 44 24 40 00 00 	movq   $0x0,0x40(%rsp)
  40df25:	00 00 
    stream.zfree = (free_func)0;
  40df27:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  40df2e:	00 00 
    stream.opaque = (voidpf)0;
  40df30:	48 c7 44 24 50 00 00 	movq   $0x0,0x50(%rsp)
  40df37:	00 00 

    err = deflateInit(&stream, level);
  40df39:	e8 12 3a 00 00       	callq  411950 <deflateInit_>
    if (err != Z_OK) return err;
  40df3e:	85 c0                	test   %eax,%eax
  40df40:	74 1e                	je     40df60 <compress+0x90>
    uLongf *destLen;
    const Bytef *source;
    uLong sourceLen;
{
    return compress2(dest, destLen, source, sourceLen, Z_DEFAULT_COMPRESSION);
}
  40df42:	48 8b 5c 24 78       	mov    0x78(%rsp),%rbx
  40df47:	64 48 33 1c 25 28 00 	xor    %fs:0x28,%rbx
  40df4e:	00 00 
  40df50:	75 51                	jne    40dfa3 <compress+0xd3>
  40df52:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  40df59:	5b                   	pop    %rbx
  40df5a:	5d                   	pop    %rbp
  40df5b:	c3                   	retq   
  40df5c:	0f 1f 40 00          	nopl   0x0(%rax)
    stream.opaque = (voidpf)0;

    err = deflateInit(&stream, level);
    if (err != Z_OK) return err;

    err = deflate(&stream, Z_FINISH);
  40df60:	be 04 00 00 00       	mov    $0x4,%esi
  40df65:	48 89 e7             	mov    %rsp,%rdi
  40df68:	e8 f3 25 00 00       	callq  410560 <deflate>
    if (err != Z_STREAM_END) {
  40df6d:	83 f8 01             	cmp    $0x1,%eax
    stream.opaque = (voidpf)0;

    err = deflateInit(&stream, level);
    if (err != Z_OK) return err;

    err = deflate(&stream, Z_FINISH);
  40df70:	89 c3                	mov    %eax,%ebx
    if (err != Z_STREAM_END) {
  40df72:	74 1c                	je     40df90 <compress+0xc0>
        deflateEnd(&stream);
  40df74:	48 89 e7             	mov    %rsp,%rdi
  40df77:	e8 04 36 00 00       	callq  411580 <deflateEnd>
        return err == Z_OK ? Z_BUF_ERROR : err;
  40df7c:	85 db                	test   %ebx,%ebx
  40df7e:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
  40df83:	0f 45 c3             	cmovne %ebx,%eax
  40df86:	eb ba                	jmp    40df42 <compress+0x72>
  40df88:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40df8f:	00 
    }
    *destLen = stream.total_out;
  40df90:	48 8b 44 24 28       	mov    0x28(%rsp),%rax

    err = deflateEnd(&stream);
  40df95:	48 89 e7             	mov    %rsp,%rdi
    err = deflate(&stream, Z_FINISH);
    if (err != Z_STREAM_END) {
        deflateEnd(&stream);
        return err == Z_OK ? Z_BUF_ERROR : err;
    }
    *destLen = stream.total_out;
  40df98:	48 89 45 00          	mov    %rax,0x0(%rbp)

    err = deflateEnd(&stream);
  40df9c:	e8 df 35 00 00       	callq  411580 <deflateEnd>
  40dfa1:	eb 9f                	jmp    40df42 <compress+0x72>
    uLongf *destLen;
    const Bytef *source;
    uLong sourceLen;
{
    return compress2(dest, destLen, source, sourceLen, Z_DEFAULT_COMPRESSION);
}
  40dfa3:	e8 18 8f ff ff       	callq  406ec0 <__stack_chk_fail@plt>
  40dfa8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40dfaf:	00 

000000000040dfb0 <compressBound>:
   this function needs to be updated.
 */
uLong ZEXPORT compressBound (sourceLen)
    uLong sourceLen;
{
    return sourceLen + (sourceLen >> 12) + (sourceLen >> 14) + 11;
  40dfb0:	48 89 f8             	mov    %rdi,%rax
  40dfb3:	48 c1 e8 0c          	shr    $0xc,%rax
  40dfb7:	48 8d 44 07 0b       	lea    0xb(%rdi,%rax,1),%rax
  40dfbc:	48 c1 ef 0e          	shr    $0xe,%rdi
  40dfc0:	48 01 f8             	add    %rdi,%rax
}
  40dfc3:	c3                   	retq   
  40dfc4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40dfcb:	00 00 00 
  40dfce:	66 90                	xchg   %ax,%ax

000000000040dfd0 <uncompress>:
int ZEXPORT uncompress (dest, destLen, source, sourceLen)
    Bytef *dest;
    uLongf *destLen;
    const Bytef *source;
    uLong sourceLen;
{
  40dfd0:	55                   	push   %rbp
  40dfd1:	53                   	push   %rbx
  40dfd2:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  40dfd9:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  40dfe0:	00 00 
  40dfe2:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
  40dfe7:	31 c0                	xor    %eax,%eax
    int err;

    stream.next_in = (Bytef*)source;
    stream.avail_in = (uInt)sourceLen;
    /* Check for source > 64K on 16-bit machine: */
    if ((uLong)stream.avail_in != sourceLen) return Z_BUF_ERROR;
  40dfe9:	89 c8                	mov    %ecx,%eax
    uLong sourceLen;
{
    z_stream stream;
    int err;

    stream.next_in = (Bytef*)source;
  40dfeb:	48 89 14 24          	mov    %rdx,(%rsp)
    stream.avail_in = (uInt)sourceLen;
  40dfef:	89 4c 24 08          	mov    %ecx,0x8(%rsp)
    /* Check for source > 64K on 16-bit machine: */
    if ((uLong)stream.avail_in != sourceLen) return Z_BUF_ERROR;
  40dff3:	48 39 c8             	cmp    %rcx,%rax
  40dff6:	0f 85 94 00 00 00    	jne    40e090 <uncompress+0xc0>

    stream.next_out = dest;
    stream.avail_out = (uInt)*destLen;
  40dffc:	48 8b 0e             	mov    (%rsi),%rcx
  40dfff:	48 89 f5             	mov    %rsi,%rbp
    stream.next_in = (Bytef*)source;
    stream.avail_in = (uInt)sourceLen;
    /* Check for source > 64K on 16-bit machine: */
    if ((uLong)stream.avail_in != sourceLen) return Z_BUF_ERROR;

    stream.next_out = dest;
  40e002:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
    stream.avail_out = (uInt)*destLen;
    if ((uLong)stream.avail_out != *destLen) return Z_BUF_ERROR;
  40e007:	89 ca                	mov    %ecx,%edx
    stream.avail_in = (uInt)sourceLen;
    /* Check for source > 64K on 16-bit machine: */
    if ((uLong)stream.avail_in != sourceLen) return Z_BUF_ERROR;

    stream.next_out = dest;
    stream.avail_out = (uInt)*destLen;
  40e009:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
    if ((uLong)stream.avail_out != *destLen) return Z_BUF_ERROR;
  40e00d:	48 39 d1             	cmp    %rdx,%rcx
  40e010:	75 7e                	jne    40e090 <uncompress+0xc0>

    stream.zalloc = (alloc_func)0;
    stream.zfree = (free_func)0;

    err = inflateInit(&stream);
  40e012:	ba 70 00 00 00       	mov    $0x70,%edx
  40e017:	be ce 85 43 00       	mov    $0x4385ce,%esi
  40e01c:	48 89 e7             	mov    %rsp,%rdi

    stream.next_out = dest;
    stream.avail_out = (uInt)*destLen;
    if ((uLong)stream.avail_out != *destLen) return Z_BUF_ERROR;

    stream.zalloc = (alloc_func)0;
  40e01f:	48 c7 44 24 40 00 00 	movq   $0x0,0x40(%rsp)
  40e026:	00 00 
    stream.zfree = (free_func)0;
  40e028:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  40e02f:	00 00 

    err = inflateInit(&stream);
  40e031:	e8 ba 84 00 00       	callq  4164f0 <inflateInit_>
    if (err != Z_OK) return err;
  40e036:	85 c0                	test   %eax,%eax
  40e038:	74 1e                	je     40e058 <uncompress+0x88>
    }
    *destLen = stream.total_out;

    err = inflateEnd(&stream);
    return err;
}
  40e03a:	48 8b 5c 24 78       	mov    0x78(%rsp),%rbx
  40e03f:	64 48 33 1c 25 28 00 	xor    %fs:0x28,%rbx
  40e046:	00 00 
  40e048:	75 70                	jne    40e0ba <uncompress+0xea>
  40e04a:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  40e051:	5b                   	pop    %rbx
  40e052:	5d                   	pop    %rbp
  40e053:	c3                   	retq   
  40e054:	0f 1f 40 00          	nopl   0x0(%rax)
    stream.zfree = (free_func)0;

    err = inflateInit(&stream);
    if (err != Z_OK) return err;

    err = inflate(&stream, Z_FINISH);
  40e058:	be 04 00 00 00       	mov    $0x4,%esi
  40e05d:	48 89 e7             	mov    %rsp,%rdi
  40e060:	e8 eb 85 00 00       	callq  416650 <inflate>
    if (err != Z_STREAM_END) {
  40e065:	83 f8 01             	cmp    $0x1,%eax
    stream.zfree = (free_func)0;

    err = inflateInit(&stream);
    if (err != Z_OK) return err;

    err = inflate(&stream, Z_FINISH);
  40e068:	89 c3                	mov    %eax,%ebx
    if (err != Z_STREAM_END) {
  40e06a:	74 34                	je     40e0a0 <uncompress+0xd0>
        inflateEnd(&stream);
  40e06c:	48 89 e7             	mov    %rsp,%rdi
  40e06f:	e8 ac dc 00 00       	callq  41bd20 <inflateEnd>
        if (err == Z_NEED_DICT || (err == Z_BUF_ERROR && stream.avail_in == 0))
  40e074:	83 fb 02             	cmp    $0x2,%ebx
  40e077:	74 3a                	je     40e0b3 <uncompress+0xe3>
  40e079:	83 fb fb             	cmp    $0xfffffffb,%ebx
  40e07c:	89 d8                	mov    %ebx,%eax
  40e07e:	75 ba                	jne    40e03a <uncompress+0x6a>
            return Z_DATA_ERROR;
  40e080:	83 7c 24 08 01       	cmpl   $0x1,0x8(%rsp)
  40e085:	19 c0                	sbb    %eax,%eax
  40e087:	83 e0 02             	and    $0x2,%eax
  40e08a:	83 e8 05             	sub    $0x5,%eax
  40e08d:	eb ab                	jmp    40e03a <uncompress+0x6a>
  40e08f:	90                   	nop
    int err;

    stream.next_in = (Bytef*)source;
    stream.avail_in = (uInt)sourceLen;
    /* Check for source > 64K on 16-bit machine: */
    if ((uLong)stream.avail_in != sourceLen) return Z_BUF_ERROR;
  40e090:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
  40e095:	eb a3                	jmp    40e03a <uncompress+0x6a>
  40e097:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40e09e:	00 00 
        inflateEnd(&stream);
        if (err == Z_NEED_DICT || (err == Z_BUF_ERROR && stream.avail_in == 0))
            return Z_DATA_ERROR;
        return err;
    }
    *destLen = stream.total_out;
  40e0a0:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi

    err = inflateEnd(&stream);
  40e0a5:	48 89 e7             	mov    %rsp,%rdi
        inflateEnd(&stream);
        if (err == Z_NEED_DICT || (err == Z_BUF_ERROR && stream.avail_in == 0))
            return Z_DATA_ERROR;
        return err;
    }
    *destLen = stream.total_out;
  40e0a8:	48 89 75 00          	mov    %rsi,0x0(%rbp)

    err = inflateEnd(&stream);
  40e0ac:	e8 6f dc 00 00       	callq  41bd20 <inflateEnd>
    return err;
  40e0b1:	eb 87                	jmp    40e03a <uncompress+0x6a>

    err = inflate(&stream, Z_FINISH);
    if (err != Z_STREAM_END) {
        inflateEnd(&stream);
        if (err == Z_NEED_DICT || (err == Z_BUF_ERROR && stream.avail_in == 0))
            return Z_DATA_ERROR;
  40e0b3:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  40e0b8:	eb 80                	jmp    40e03a <uncompress+0x6a>
    }
    *destLen = stream.total_out;

    err = inflateEnd(&stream);
    return err;
}
  40e0ba:	e8 01 8e ff ff       	callq  406ec0 <__stack_chk_fail@plt>
  40e0bf:	90                   	nop

000000000040e0c0 <longest_match>:
 * match.S. The code will be functionally equivalent.
 */
local uInt longest_match(s, cur_match)
    deflate_state *s;
    IPos cur_match;                             /* current match */
{
  40e0c0:	41 57                	push   %r15
  40e0c2:	41 56                	push   %r14
    register Bytef *match;                       /* matched string */
    register int len;                           /* length of current match */
    int best_len = s->prev_length;              /* best match length so far */
    int nice_match = s->nice_match;             /* stop if match long enough */
    IPos limit = s->strstart > (IPos)MAX_DIST(s) ?
        s->strstart - (IPos)MAX_DIST(s) : NIL;
  40e0c4:	45 31 d2             	xor    %r10d,%r10d
 * match.S. The code will be functionally equivalent.
 */
local uInt longest_match(s, cur_match)
    deflate_state *s;
    IPos cur_match;                             /* current match */
{
  40e0c7:	41 55                	push   %r13
  40e0c9:	41 54                	push   %r12
  40e0cb:	55                   	push   %rbp
  40e0cc:	53                   	push   %rbx
    register Bytef *scan = s->window + s->strstart; /* current string */
    register Bytef *match;                       /* matched string */
    register int len;                           /* length of current match */
    int best_len = s->prev_length;              /* best match length so far */
    int nice_match = s->nice_match;             /* stop if match long enough */
    IPos limit = s->strstart > (IPos)MAX_DIST(s) ?
  40e0cd:	8b 5f 44             	mov    0x44(%rdi),%ebx
local uInt longest_match(s, cur_match)
    deflate_state *s;
    IPos cur_match;                             /* current match */
{
    unsigned chain_length = s->max_chain_length;/* max hash chain length */
    register Bytef *scan = s->window + s->strstart; /* current string */
  40e0d0:	44 8b 9f 9c 00 00 00 	mov    0x9c(%rdi),%r11d
  40e0d7:	4c 8b 4f 50          	mov    0x50(%rdi),%r9
    register Bytef *match;                       /* matched string */
    register int len;                           /* length of current match */
    int best_len = s->prev_length;              /* best match length so far */
  40e0db:	44 8b a7 a8 00 00 00 	mov    0xa8(%rdi),%r12d
 */
local uInt longest_match(s, cur_match)
    deflate_state *s;
    IPos cur_match;                             /* current match */
{
    unsigned chain_length = s->max_chain_length;/* max hash chain length */
  40e0e2:	8b 8f ac 00 00 00    	mov    0xac(%rdi),%ecx
    register Bytef *scan = s->window + s->strstart; /* current string */
    register Bytef *match;                       /* matched string */
    register int len;                           /* length of current match */
    int best_len = s->prev_length;              /* best match length so far */
    int nice_match = s->nice_match;             /* stop if match long enough */
  40e0e8:	44 8b 87 c0 00 00 00 	mov    0xc0(%rdi),%r8d
    IPos limit = s->strstart > (IPos)MAX_DIST(s) ?
  40e0ef:	8d ab fa fe ff ff    	lea    -0x106(%rbx),%ebp
local uInt longest_match(s, cur_match)
    deflate_state *s;
    IPos cur_match;                             /* current match */
{
    unsigned chain_length = s->max_chain_length;/* max hash chain length */
    register Bytef *scan = s->window + s->strstart; /* current string */
  40e0f5:	4f 8d 2c 19          	lea    (%r9,%r11,1),%r13
    register Bytef *match;                       /* matched string */
    register int len;                           /* length of current match */
    int best_len = s->prev_length;              /* best match length so far */
  40e0f9:	44 89 e0             	mov    %r12d,%eax
    int nice_match = s->nice_match;             /* stop if match long enough */
    IPos limit = s->strstart > (IPos)MAX_DIST(s) ?
        s->strstart - (IPos)MAX_DIST(s) : NIL;
  40e0fc:	41 39 eb             	cmp    %ebp,%r11d
  40e0ff:	76 0a                	jbe    40e10b <longest_match+0x4b>
  40e101:	45 8d 93 06 01 00 00 	lea    0x106(%r11),%r10d
  40e108:	41 29 da             	sub    %ebx,%r10d
     */
    register Bytef *strend = s->window + s->strstart + MAX_MATCH - 1;
    register ush scan_start = *(ushf*)scan;
    register ush scan_end   = *(ushf*)(scan+best_len-1);
#else
    register Bytef *strend = s->window + s->strstart + MAX_MATCH;
  40e10b:	4f 8d b4 19 02 01 00 	lea    0x102(%r9,%r11,1),%r14
  40e112:	00 
     */
    Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

    /* Do not waste too much time if we already have a good match: */
    if (s->prev_length >= s->good_match) {
        chain_length >>= 2;
  40e113:	89 ca                	mov    %ecx,%edx
    register Bytef *strend = s->window + s->strstart + MAX_MATCH - 1;
    register ush scan_start = *(ushf*)scan;
    register ush scan_end   = *(ushf*)(scan+best_len-1);
#else
    register Bytef *strend = s->window + s->strstart + MAX_MATCH;
    register Byte scan_end1  = scan[best_len-1];
  40e115:	4d 63 dc             	movslq %r12d,%r11
     */
    Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

    /* Do not waste too much time if we already have a good match: */
    if (s->prev_length >= s->good_match) {
        chain_length >>= 2;
  40e118:	c1 ea 02             	shr    $0x2,%edx
  40e11b:	44 3b a7 bc 00 00 00 	cmp    0xbc(%rdi),%r12d
    register Bytef *strend = s->window + s->strstart + MAX_MATCH - 1;
    register ush scan_start = *(ushf*)scan;
    register ush scan_end   = *(ushf*)(scan+best_len-1);
#else
    register Bytef *strend = s->window + s->strstart + MAX_MATCH;
    register Byte scan_end1  = scan[best_len-1];
  40e122:	47 0f b6 7c 1d ff    	movzbl -0x1(%r13,%r11,1),%r15d
     */
    register Bytef *strend = s->window + s->strstart + MAX_MATCH - 1;
    register ush scan_start = *(ushf*)scan;
    register ush scan_end   = *(ushf*)(scan+best_len-1);
#else
    register Bytef *strend = s->window + s->strstart + MAX_MATCH;
  40e128:	4c 89 74 24 e8       	mov    %r14,-0x18(%rsp)
        chain_length >>= 2;
    }
    /* Do not look for matches beyond the end of the input. This is necessary
     * to make deflate deterministic.
     */
    if ((uInt)nice_match > s->lookahead) nice_match = s->lookahead;
  40e12d:	44 8b b7 a4 00 00 00 	mov    0xa4(%rdi),%r14d
    IPos limit = s->strstart > (IPos)MAX_DIST(s) ?
        s->strstart - (IPos)MAX_DIST(s) : NIL;
    /* Stop when cur_match becomes <= limit. To simplify the code,
     * we prevent matches with the string of window index 0.
     */
    Posf *prev = s->prev;
  40e134:	48 8b 6f 60          	mov    0x60(%rdi),%rbp
    uInt wmask = s->w_mask;
  40e138:	8b 5f 4c             	mov    0x4c(%rdi),%ebx
    register ush scan_start = *(ushf*)scan;
    register ush scan_end   = *(ushf*)(scan+best_len-1);
#else
    register Bytef *strend = s->window + s->strstart + MAX_MATCH;
    register Byte scan_end1  = scan[best_len-1];
    register Byte scan_end   = scan[best_len];
  40e13b:	47 0f b6 5c 1d 00    	movzbl 0x0(%r13,%r11,1),%r11d
                 *++scan == *++match && *++scan == *++match &&
                 scan < strend);

        Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

        len = MAX_MATCH - (int)(strend - scan);
  40e141:	48 89 7c 24 f0       	mov    %rdi,-0x10(%rsp)
     */
    Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

    /* Do not waste too much time if we already have a good match: */
    if (s->prev_length >= s->good_match) {
        chain_length >>= 2;
  40e146:	0f 43 ca             	cmovae %edx,%ecx
    }
    /* Do not look for matches beyond the end of the input. This is necessary
     * to make deflate deterministic.
     */
    if ((uInt)nice_match > s->lookahead) nice_match = s->lookahead;
  40e149:	45 39 f0             	cmp    %r14d,%r8d
  40e14c:	45 0f 47 c6          	cmova  %r14d,%r8d
  40e150:	44 89 44 24 fc       	mov    %r8d,-0x4(%rsp)
  40e155:	eb 22                	jmp    40e179 <longest_match+0xb9>
  40e157:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40e15e:	00 00 
#else
            scan_end1  = scan[best_len-1];
            scan_end   = scan[best_len];
#endif
        }
    } while ((cur_match = prev[cur_match & wmask]) > limit
  40e160:	21 de                	and    %ebx,%esi
  40e162:	0f b7 74 75 00       	movzwl 0x0(%rbp,%rsi,2),%esi
             && --chain_length != 0);
  40e167:	41 39 f2             	cmp    %esi,%r10d
  40e16a:	0f 83 d8 02 00 00    	jae    40e448 <longest_match+0x388>
  40e170:	83 e9 01             	sub    $0x1,%ecx
  40e173:	0f 84 cf 02 00 00    	je     40e448 <longest_match+0x388>

    Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

    do {
        Assert(cur_match < s->strstart, "no future");
        match = s->window + cur_match;
  40e179:	89 f2                	mov    %esi,%edx
        len = (MAX_MATCH - 1) - (int)(strend-scan);
        scan = strend - (MAX_MATCH-1);

#else /* UNALIGNED_OK */

        if (match[best_len]   != scan_end  ||
  40e17b:	48 63 f8             	movslq %eax,%rdi

    Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

    do {
        Assert(cur_match < s->strstart, "no future");
        match = s->window + cur_match;
  40e17e:	4c 01 ca             	add    %r9,%rdx
        len = (MAX_MATCH - 1) - (int)(strend-scan);
        scan = strend - (MAX_MATCH-1);

#else /* UNALIGNED_OK */

        if (match[best_len]   != scan_end  ||
  40e181:	44 0f b6 24 3a       	movzbl (%rdx,%rdi,1),%r12d
  40e186:	45 38 dc             	cmp    %r11b,%r12b
  40e189:	75 d5                	jne    40e160 <longest_match+0xa0>
            match[best_len-1] != scan_end1 ||
  40e18b:	44 0f b6 44 3a ff    	movzbl -0x1(%rdx,%rdi,1),%r8d
        len = (MAX_MATCH - 1) - (int)(strend-scan);
        scan = strend - (MAX_MATCH-1);

#else /* UNALIGNED_OK */

        if (match[best_len]   != scan_end  ||
  40e191:	45 38 f8             	cmp    %r15b,%r8b
  40e194:	75 ca                	jne    40e160 <longest_match+0xa0>
            match[best_len-1] != scan_end1 ||
  40e196:	41 0f b6 7d 00       	movzbl 0x0(%r13),%edi
  40e19b:	40 38 3a             	cmp    %dil,(%rdx)
  40e19e:	75 c0                	jne    40e160 <longest_match+0xa0>
            *match            != *scan     ||
  40e1a0:	41 0f b6 7d 01       	movzbl 0x1(%r13),%edi
  40e1a5:	40 38 7a 01          	cmp    %dil,0x1(%rdx)
  40e1a9:	75 b5                	jne    40e160 <longest_match+0xa0>
         * again later. (This heuristic is not always a win.)
         * It is not necessary to compare scan[2] and match[2] since they
         * are always equal when the other bytes match, given that
         * the hash keys are equal and that HASH_BITS >= 8.
         */
        scan += 2, match++;
  40e1ab:	49 83 c5 02          	add    $0x2,%r13
  40e1af:	48 83 c2 02          	add    $0x2,%rdx
        do {
        } while (*++scan == *++match && *++scan == *++match &&
                 *++scan == *++match && *++scan == *++match &&
                 *++scan == *++match && *++scan == *++match &&
                 *++scan == *++match && *++scan == *++match &&
                 scan < strend);
  40e1b3:	44 0f b6 5a 01       	movzbl 0x1(%rdx),%r11d
  40e1b8:	4d 89 ef             	mov    %r13,%r15
  40e1bb:	49 f7 d7             	not    %r15
  40e1be:	4c 03 7c 24 e8       	add    -0x18(%rsp),%r15
  40e1c3:	49 c1 ef 03          	shr    $0x3,%r15
  40e1c7:	41 83 e7 01          	and    $0x1,%r15d
  40e1cb:	45 38 5d 01          	cmp    %r11b,0x1(%r13)
  40e1cf:	0f 85 e6 02 00 00    	jne    40e4bb <longest_match+0x3fb>

        /* We check for insufficient lookahead only every 8th comparison;
         * the 256th check will be made at strstart+258.
         */
        do {
        } while (*++scan == *++match && *++scan == *++match &&
  40e1d5:	0f b6 7a 02          	movzbl 0x2(%rdx),%edi
  40e1d9:	41 38 7d 02          	cmp    %dil,0x2(%r13)
  40e1dd:	0f 85 ca 02 00 00    	jne    40e4ad <longest_match+0x3ed>
  40e1e3:	44 0f b6 5a 03       	movzbl 0x3(%rdx),%r11d
  40e1e8:	45 38 5d 03          	cmp    %r11b,0x3(%r13)
  40e1ec:	0f 85 ad 02 00 00    	jne    40e49f <longest_match+0x3df>
                 *++scan == *++match && *++scan == *++match &&
  40e1f2:	0f b6 7a 04          	movzbl 0x4(%rdx),%edi
  40e1f6:	41 38 7d 04          	cmp    %dil,0x4(%r13)
  40e1fa:	0f 85 91 02 00 00    	jne    40e491 <longest_match+0x3d1>
  40e200:	44 0f b6 5a 05       	movzbl 0x5(%rdx),%r11d
  40e205:	45 38 5d 05          	cmp    %r11b,0x5(%r13)
  40e209:	0f 85 74 02 00 00    	jne    40e483 <longest_match+0x3c3>
                 *++scan == *++match && *++scan == *++match &&
  40e20f:	0f b6 7a 06          	movzbl 0x6(%rdx),%edi
  40e213:	41 38 7d 06          	cmp    %dil,0x6(%r13)
  40e217:	0f 85 58 02 00 00    	jne    40e475 <longest_match+0x3b5>
  40e21d:	44 0f b6 5a 07       	movzbl 0x7(%rdx),%r11d
  40e222:	45 38 5d 07          	cmp    %r11b,0x7(%r13)
  40e226:	0f 85 3e 02 00 00    	jne    40e46a <longest_match+0x3aa>
  40e22c:	49 83 c5 08          	add    $0x8,%r13
  40e230:	4c 8d 5a 08          	lea    0x8(%rdx),%r11
                 *++scan == *++match && *++scan == *++match &&
  40e234:	0f b6 52 08          	movzbl 0x8(%rdx),%edx
  40e238:	41 38 55 00          	cmp    %dl,0x0(%r13)
  40e23c:	0f 85 b2 01 00 00    	jne    40e3f4 <longest_match+0x334>
  40e242:	48 8b 7c 24 e8       	mov    -0x18(%rsp),%rdi
  40e247:	4c 39 ef             	cmp    %r13,%rdi
  40e24a:	0f 86 a4 01 00 00    	jbe    40e3f4 <longest_match+0x334>
  40e250:	4d 85 ff             	test   %r15,%r15
  40e253:	0f 84 88 00 00 00    	je     40e2e1 <longest_match+0x221>
                 scan < strend);
  40e259:	45 0f b6 7b 01       	movzbl 0x1(%r11),%r15d
  40e25e:	45 38 7d 01          	cmp    %r15b,0x1(%r13)
  40e262:	0f 85 53 02 00 00    	jne    40e4bb <longest_match+0x3fb>

        /* We check for insufficient lookahead only every 8th comparison;
         * the 256th check will be made at strstart+258.
         */
        do {
        } while (*++scan == *++match && *++scan == *++match &&
  40e268:	41 0f b6 53 02       	movzbl 0x2(%r11),%edx
  40e26d:	41 38 55 02          	cmp    %dl,0x2(%r13)
  40e271:	0f 85 36 02 00 00    	jne    40e4ad <longest_match+0x3ed>
  40e277:	45 0f b6 7b 03       	movzbl 0x3(%r11),%r15d
  40e27c:	45 38 7d 03          	cmp    %r15b,0x3(%r13)
  40e280:	0f 85 19 02 00 00    	jne    40e49f <longest_match+0x3df>
                 *++scan == *++match && *++scan == *++match &&
  40e286:	41 0f b6 53 04       	movzbl 0x4(%r11),%edx
  40e28b:	41 38 55 04          	cmp    %dl,0x4(%r13)
  40e28f:	0f 85 fc 01 00 00    	jne    40e491 <longest_match+0x3d1>
  40e295:	45 0f b6 7b 05       	movzbl 0x5(%r11),%r15d
  40e29a:	45 38 7d 05          	cmp    %r15b,0x5(%r13)
  40e29e:	0f 85 df 01 00 00    	jne    40e483 <longest_match+0x3c3>
                 *++scan == *++match && *++scan == *++match &&
  40e2a4:	41 0f b6 53 06       	movzbl 0x6(%r11),%edx
  40e2a9:	41 38 55 06          	cmp    %dl,0x6(%r13)
  40e2ad:	0f 85 c2 01 00 00    	jne    40e475 <longest_match+0x3b5>
  40e2b3:	45 0f b6 7b 07       	movzbl 0x7(%r11),%r15d
  40e2b8:	45 38 7d 07          	cmp    %r15b,0x7(%r13)
  40e2bc:	0f 85 a8 01 00 00    	jne    40e46a <longest_match+0x3aa>
  40e2c2:	49 83 c3 08          	add    $0x8,%r11
  40e2c6:	49 83 c5 08          	add    $0x8,%r13
                 *++scan == *++match && *++scan == *++match &&
  40e2ca:	41 0f b6 13          	movzbl (%r11),%edx
  40e2ce:	41 38 55 00          	cmp    %dl,0x0(%r13)
  40e2d2:	0f 85 1c 01 00 00    	jne    40e3f4 <longest_match+0x334>
  40e2d8:	4c 39 ef             	cmp    %r13,%rdi
  40e2db:	0f 86 13 01 00 00    	jbe    40e3f4 <longest_match+0x334>
  40e2e1:	48 8b 7c 24 f0       	mov    -0x10(%rsp),%rdi
                 scan < strend);
  40e2e6:	45 0f b6 7b 01       	movzbl 0x1(%r11),%r15d
  40e2eb:	45 38 7d 01          	cmp    %r15b,0x1(%r13)
  40e2ef:	0f 85 c1 01 00 00    	jne    40e4b6 <longest_match+0x3f6>

        /* We check for insufficient lookahead only every 8th comparison;
         * the 256th check will be made at strstart+258.
         */
        do {
        } while (*++scan == *++match && *++scan == *++match &&
  40e2f5:	41 0f b6 53 02       	movzbl 0x2(%r11),%edx
  40e2fa:	41 38 55 02          	cmp    %dl,0x2(%r13)
  40e2fe:	0f 85 a4 01 00 00    	jne    40e4a8 <longest_match+0x3e8>
  40e304:	45 0f b6 7b 03       	movzbl 0x3(%r11),%r15d
  40e309:	45 38 7d 03          	cmp    %r15b,0x3(%r13)
  40e30d:	0f 85 87 01 00 00    	jne    40e49a <longest_match+0x3da>
                 *++scan == *++match && *++scan == *++match &&
  40e313:	41 0f b6 53 04       	movzbl 0x4(%r11),%edx
  40e318:	41 38 55 04          	cmp    %dl,0x4(%r13)
  40e31c:	0f 85 6a 01 00 00    	jne    40e48c <longest_match+0x3cc>
  40e322:	45 0f b6 7b 05       	movzbl 0x5(%r11),%r15d
  40e327:	45 38 7d 05          	cmp    %r15b,0x5(%r13)
  40e32b:	0f 85 4d 01 00 00    	jne    40e47e <longest_match+0x3be>
                 *++scan == *++match && *++scan == *++match &&
  40e331:	41 0f b6 53 06       	movzbl 0x6(%r11),%edx
  40e336:	41 38 55 06          	cmp    %dl,0x6(%r13)
  40e33a:	0f 85 30 01 00 00    	jne    40e470 <longest_match+0x3b0>
  40e340:	45 0f b6 7b 07       	movzbl 0x7(%r11),%r15d
  40e345:	45 38 7d 07          	cmp    %r15b,0x7(%r13)
  40e349:	0f 85 16 01 00 00    	jne    40e465 <longest_match+0x3a5>
  40e34f:	49 8d 55 08          	lea    0x8(%r13),%rdx
  40e353:	4d 8d 7b 08          	lea    0x8(%r11),%r15
                 *++scan == *++match && *++scan == *++match &&
  40e357:	45 0f b6 5b 08       	movzbl 0x8(%r11),%r11d
  40e35c:	44 38 1a             	cmp    %r11b,(%rdx)
  40e35f:	49 89 d5             	mov    %rdx,%r13
  40e362:	0f 85 87 00 00 00    	jne    40e3ef <longest_match+0x32f>
                 scan < strend);
  40e368:	45 0f b6 5f 01       	movzbl 0x1(%r15),%r11d
  40e36d:	44 38 5a 01          	cmp    %r11b,0x1(%rdx)
  40e371:	0f 85 3f 01 00 00    	jne    40e4b6 <longest_match+0x3f6>

        /* We check for insufficient lookahead only every 8th comparison;
         * the 256th check will be made at strstart+258.
         */
        do {
        } while (*++scan == *++match && *++scan == *++match &&
  40e377:	45 0f b6 5f 02       	movzbl 0x2(%r15),%r11d
  40e37c:	44 38 5a 02          	cmp    %r11b,0x2(%rdx)
  40e380:	0f 85 22 01 00 00    	jne    40e4a8 <longest_match+0x3e8>
  40e386:	45 0f b6 5f 03       	movzbl 0x3(%r15),%r11d
  40e38b:	44 38 5a 03          	cmp    %r11b,0x3(%rdx)
  40e38f:	0f 85 05 01 00 00    	jne    40e49a <longest_match+0x3da>
                 *++scan == *++match && *++scan == *++match &&
  40e395:	45 0f b6 5f 04       	movzbl 0x4(%r15),%r11d
  40e39a:	44 38 5a 04          	cmp    %r11b,0x4(%rdx)
  40e39e:	0f 85 e8 00 00 00    	jne    40e48c <longest_match+0x3cc>
  40e3a4:	45 0f b6 5f 05       	movzbl 0x5(%r15),%r11d
  40e3a9:	44 38 5a 05          	cmp    %r11b,0x5(%rdx)
  40e3ad:	0f 85 cb 00 00 00    	jne    40e47e <longest_match+0x3be>
                 *++scan == *++match && *++scan == *++match &&
  40e3b3:	45 0f b6 5f 06       	movzbl 0x6(%r15),%r11d
  40e3b8:	44 38 5a 06          	cmp    %r11b,0x6(%rdx)
  40e3bc:	0f 85 ae 00 00 00    	jne    40e470 <longest_match+0x3b0>
  40e3c2:	45 0f b6 5f 07       	movzbl 0x7(%r15),%r11d
  40e3c7:	44 38 5a 07          	cmp    %r11b,0x7(%rdx)
  40e3cb:	0f 85 94 00 00 00    	jne    40e465 <longest_match+0x3a5>
  40e3d1:	4d 8d 5f 08          	lea    0x8(%r15),%r11
                 *++scan == *++match && *++scan == *++match &&
  40e3d5:	45 0f b6 7f 08       	movzbl 0x8(%r15),%r15d
  40e3da:	4c 8d 6a 08          	lea    0x8(%rdx),%r13
  40e3de:	44 38 7a 08          	cmp    %r15b,0x8(%rdx)
  40e3e2:	75 0b                	jne    40e3ef <longest_match+0x32f>
  40e3e4:	4c 39 6c 24 e8       	cmp    %r13,-0x18(%rsp)
  40e3e9:	0f 87 f7 fe ff ff    	ja     40e2e6 <longest_match+0x226>
  40e3ef:	48 89 7c 24 f0       	mov    %rdi,-0x10(%rsp)
                 scan < strend);

        Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

        len = MAX_MATCH - (int)(strend - scan);
  40e3f4:	48 8b 7c 24 e8       	mov    -0x18(%rsp),%rdi
  40e3f9:	48 89 fa             	mov    %rdi,%rdx
  40e3fc:	4c 29 ea             	sub    %r13,%rdx
  40e3ff:	41 bd 02 01 00 00    	mov    $0x102,%r13d
  40e405:	41 29 d5             	sub    %edx,%r13d
  40e408:	44 89 ea             	mov    %r13d,%edx
        scan = strend - MAX_MATCH;
  40e40b:	4c 8d af fe fe ff ff 	lea    -0x102(%rdi),%r13

#endif /* UNALIGNED_OK */

        if (len > best_len) {
  40e412:	39 d0                	cmp    %edx,%eax
  40e414:	7d 44                	jge    40e45a <longest_match+0x39a>
            s->match_start = cur_match;
            best_len = len;
            if (len >= nice_match) break;
  40e416:	39 54 24 fc          	cmp    %edx,-0x4(%rsp)
        scan = strend - MAX_MATCH;

#endif /* UNALIGNED_OK */

        if (len > best_len) {
            s->match_start = cur_match;
  40e41a:	48 8b 44 24 f0       	mov    -0x10(%rsp),%rax
  40e41f:	89 b0 a0 00 00 00    	mov    %esi,0xa0(%rax)
            best_len = len;
            if (len >= nice_match) break;
  40e425:	7e 19                	jle    40e440 <longest_match+0x380>
#ifdef UNALIGNED_OK
            scan_end = *(ushf*)(scan+best_len-1);
#else
            scan_end1  = scan[best_len-1];
  40e427:	4c 63 c2             	movslq %edx,%r8
            scan_end   = scan[best_len];
  40e42a:	89 d0                	mov    %edx,%eax
            best_len = len;
            if (len >= nice_match) break;
#ifdef UNALIGNED_OK
            scan_end = *(ushf*)(scan+best_len-1);
#else
            scan_end1  = scan[best_len-1];
  40e42c:	47 0f b6 7c 05 ff    	movzbl -0x1(%r13,%r8,1),%r15d
            scan_end   = scan[best_len];
  40e432:	46 0f b6 9c 07 fe fe 	movzbl -0x102(%rdi,%r8,1),%r11d
  40e439:	ff ff 
  40e43b:	e9 20 fd ff ff       	jmpq   40e160 <longest_match+0xa0>
  40e440:	89 d0                	mov    %edx,%eax
  40e442:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  40e448:	44 39 f0             	cmp    %r14d,%eax
    } while ((cur_match = prev[cur_match & wmask]) > limit
             && --chain_length != 0);

    if ((uInt)best_len <= s->lookahead) return (uInt)best_len;
    return s->lookahead;
}
  40e44b:	5b                   	pop    %rbx
  40e44c:	41 0f 47 c6          	cmova  %r14d,%eax
  40e450:	5d                   	pop    %rbp
  40e451:	41 5c                	pop    %r12
  40e453:	41 5d                	pop    %r13
  40e455:	41 5e                	pop    %r14
  40e457:	41 5f                	pop    %r15
  40e459:	c3                   	retq   
  40e45a:	45 89 e3             	mov    %r12d,%r11d
  40e45d:	45 89 c7             	mov    %r8d,%r15d
  40e460:	e9 fb fc ff ff       	jmpq   40e160 <longest_match+0xa0>
  40e465:	48 89 7c 24 f0       	mov    %rdi,-0x10(%rsp)
         * the 256th check will be made at strstart+258.
         */
        do {
        } while (*++scan == *++match && *++scan == *++match &&
                 *++scan == *++match && *++scan == *++match &&
                 *++scan == *++match && *++scan == *++match &&
  40e46a:	49 83 c5 07          	add    $0x7,%r13
  40e46e:	eb 84                	jmp    40e3f4 <longest_match+0x334>
  40e470:	48 89 7c 24 f0       	mov    %rdi,-0x10(%rsp)
  40e475:	49 83 c5 06          	add    $0x6,%r13
  40e479:	e9 76 ff ff ff       	jmpq   40e3f4 <longest_match+0x334>
  40e47e:	48 89 7c 24 f0       	mov    %rdi,-0x10(%rsp)
        /* We check for insufficient lookahead only every 8th comparison;
         * the 256th check will be made at strstart+258.
         */
        do {
        } while (*++scan == *++match && *++scan == *++match &&
                 *++scan == *++match && *++scan == *++match &&
  40e483:	49 83 c5 05          	add    $0x5,%r13
  40e487:	e9 68 ff ff ff       	jmpq   40e3f4 <longest_match+0x334>
  40e48c:	48 89 7c 24 f0       	mov    %rdi,-0x10(%rsp)
  40e491:	49 83 c5 04          	add    $0x4,%r13
  40e495:	e9 5a ff ff ff       	jmpq   40e3f4 <longest_match+0x334>
  40e49a:	48 89 7c 24 f0       	mov    %rdi,-0x10(%rsp)

        /* We check for insufficient lookahead only every 8th comparison;
         * the 256th check will be made at strstart+258.
         */
        do {
        } while (*++scan == *++match && *++scan == *++match &&
  40e49f:	49 83 c5 03          	add    $0x3,%r13
  40e4a3:	e9 4c ff ff ff       	jmpq   40e3f4 <longest_match+0x334>
  40e4a8:	48 89 7c 24 f0       	mov    %rdi,-0x10(%rsp)
  40e4ad:	49 83 c5 02          	add    $0x2,%r13
  40e4b1:	e9 3e ff ff ff       	jmpq   40e3f4 <longest_match+0x334>
  40e4b6:	48 89 7c 24 f0       	mov    %rdi,-0x10(%rsp)
                 *++scan == *++match && *++scan == *++match &&
                 *++scan == *++match && *++scan == *++match &&
                 *++scan == *++match && *++scan == *++match &&
                 scan < strend);
  40e4bb:	49 83 c5 01          	add    $0x1,%r13
  40e4bf:	e9 30 ff ff ff       	jmpq   40e3f4 <longest_match+0x334>
  40e4c4:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
  40e4cb:	00 00 00 00 00 

000000000040e4d0 <longest_match_fast>:
 */
local uInt longest_match_fast(s, cur_match)
    deflate_state *s;
    IPos cur_match;                             /* current match */
{
    register Bytef *scan = s->window + s->strstart; /* current string */
  40e4d0:	44 8b 8f 9c 00 00 00 	mov    0x9c(%rdi),%r9d
  40e4d7:	48 8b 4f 50          	mov    0x50(%rdi),%rcx

    Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

    Assert(cur_match < s->strstart, "no future");

    match = s->window + cur_match;
  40e4db:	89 f2                	mov    %esi,%edx

    /* Return failure if the match length is less than 2:
     */
    if (match[0] != scan[0] || match[1] != scan[1]) return MIN_MATCH-1;
  40e4dd:	b8 02 00 00 00       	mov    $0x2,%eax

    Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

    Assert(cur_match < s->strstart, "no future");

    match = s->window + cur_match;
  40e4e2:	48 01 ca             	add    %rcx,%rdx
 */
local uInt longest_match_fast(s, cur_match)
    deflate_state *s;
    IPos cur_match;                             /* current match */
{
    register Bytef *scan = s->window + s->strstart; /* current string */
  40e4e5:	4e 8d 04 09          	lea    (%rcx,%r9,1),%r8

    match = s->window + cur_match;

    /* Return failure if the match length is less than 2:
     */
    if (match[0] != scan[0] || match[1] != scan[1]) return MIN_MATCH-1;
  40e4e9:	45 0f b6 10          	movzbl (%r8),%r10d
  40e4ed:	44 38 12             	cmp    %r10b,(%rdx)
  40e4f0:	74 06                	je     40e4f8 <longest_match_fast+0x28>

    if (len < MIN_MATCH) return MIN_MATCH - 1;

    s->match_start = cur_match;
    return (uInt)len <= s->lookahead ? (uInt)len : s->lookahead;
}
  40e4f2:	f3 c3                	repz retq 
  40e4f4:	0f 1f 40 00          	nopl   0x0(%rax)

    match = s->window + cur_match;

    /* Return failure if the match length is less than 2:
     */
    if (match[0] != scan[0] || match[1] != scan[1]) return MIN_MATCH-1;
  40e4f8:	45 0f b6 58 01       	movzbl 0x1(%r8),%r11d
  40e4fd:	44 38 5a 01          	cmp    %r11b,0x1(%rdx)
  40e501:	75 ef                	jne    40e4f2 <longest_match_fast+0x22>
    IPos cur_match;                             /* current match */
{
    register Bytef *scan = s->window + s->strstart; /* current string */
    register Bytef *match;                       /* matched string */
    register int len;                           /* length of current match */
    register Bytef *strend = s->window + s->strstart + MAX_MATCH;
  40e503:	4e 8d 8c 09 02 01 00 	lea    0x102(%rcx,%r9,1),%r9
  40e50a:	00 
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */
    scan += 2, match += 2;
  40e50b:	48 8d 4a 02          	lea    0x2(%rdx),%rcx
  40e50f:	49 8d 40 02          	lea    0x2(%r8),%rax
    do {
    } while (*++scan == *++match && *++scan == *++match &&
             *++scan == *++match && *++scan == *++match &&
             *++scan == *++match && *++scan == *++match &&
             *++scan == *++match && *++scan == *++match &&
             scan < strend);
  40e513:	44 0f b6 51 01       	movzbl 0x1(%rcx),%r10d
  40e518:	44 38 50 01          	cmp    %r10b,0x1(%rax)
  40e51c:	0f 85 1b 02 00 00    	jne    40e73d <longest_match_fast+0x26d>

    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
    do {
    } while (*++scan == *++match && *++scan == *++match &&
  40e522:	44 0f b6 59 02       	movzbl 0x2(%rcx),%r11d
  40e527:	44 38 58 02          	cmp    %r11b,0x2(%rax)
  40e52b:	0f 85 12 02 00 00    	jne    40e743 <longest_match_fast+0x273>
  40e531:	44 0f b6 51 03       	movzbl 0x3(%rcx),%r10d
  40e536:	44 38 50 03          	cmp    %r10b,0x3(%rax)
  40e53a:	0f 85 09 02 00 00    	jne    40e749 <longest_match_fast+0x279>
             *++scan == *++match && *++scan == *++match &&
  40e540:	44 0f b6 59 04       	movzbl 0x4(%rcx),%r11d
  40e545:	44 38 58 04          	cmp    %r11b,0x4(%rax)
  40e549:	0f 85 00 02 00 00    	jne    40e74f <longest_match_fast+0x27f>
  40e54f:	44 0f b6 51 05       	movzbl 0x5(%rcx),%r10d
  40e554:	44 38 50 05          	cmp    %r10b,0x5(%rax)
  40e558:	0f 85 f7 01 00 00    	jne    40e755 <longest_match_fast+0x285>
             *++scan == *++match && *++scan == *++match &&
  40e55e:	44 0f b6 59 06       	movzbl 0x6(%rcx),%r11d
  40e563:	44 38 58 06          	cmp    %r11b,0x6(%rax)
  40e567:	0f 85 f4 01 00 00    	jne    40e761 <longest_match_fast+0x291>
  40e56d:	0f b6 49 07          	movzbl 0x7(%rcx),%ecx
  40e571:	38 48 07             	cmp    %cl,0x7(%rax)
  40e574:	0f 85 e1 01 00 00    	jne    40e75b <longest_match_fast+0x28b>
  40e57a:	49 83 c0 0a          	add    $0xa,%r8
             *++scan == *++match && *++scan == *++match &&
  40e57e:	44 0f b6 52 0a       	movzbl 0xa(%rdx),%r10d
  40e583:	48 83 c2 0a          	add    $0xa,%rdx
  40e587:	45 38 10             	cmp    %r10b,(%r8)
  40e58a:	4c 89 c0             	mov    %r8,%rax
  40e58d:	0f 85 7d 01 00 00    	jne    40e710 <longest_match_fast+0x240>
  40e593:	4d 39 c1             	cmp    %r8,%r9
  40e596:	0f 86 74 01 00 00    	jbe    40e710 <longest_match_fast+0x240>
             scan < strend);
  40e59c:	44 0f b6 5a 01       	movzbl 0x1(%rdx),%r11d
  40e5a1:	45 38 58 01          	cmp    %r11b,0x1(%r8)
  40e5a5:	0f 85 92 01 00 00    	jne    40e73d <longest_match_fast+0x26d>

    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
    do {
    } while (*++scan == *++match && *++scan == *++match &&
  40e5ab:	0f b6 4a 02          	movzbl 0x2(%rdx),%ecx
  40e5af:	41 38 48 02          	cmp    %cl,0x2(%r8)
  40e5b3:	0f 85 8a 01 00 00    	jne    40e743 <longest_match_fast+0x273>
  40e5b9:	44 0f b6 52 03       	movzbl 0x3(%rdx),%r10d
  40e5be:	45 38 50 03          	cmp    %r10b,0x3(%r8)
  40e5c2:	0f 85 81 01 00 00    	jne    40e749 <longest_match_fast+0x279>
             *++scan == *++match && *++scan == *++match &&
  40e5c8:	44 0f b6 5a 04       	movzbl 0x4(%rdx),%r11d
  40e5cd:	45 38 58 04          	cmp    %r11b,0x4(%r8)
  40e5d1:	0f 85 78 01 00 00    	jne    40e74f <longest_match_fast+0x27f>
  40e5d7:	0f b6 4a 05          	movzbl 0x5(%rdx),%ecx
  40e5db:	41 38 48 05          	cmp    %cl,0x5(%r8)
  40e5df:	0f 85 70 01 00 00    	jne    40e755 <longest_match_fast+0x285>
             *++scan == *++match && *++scan == *++match &&
  40e5e5:	44 0f b6 52 06       	movzbl 0x6(%rdx),%r10d
  40e5ea:	45 38 50 06          	cmp    %r10b,0x6(%r8)
  40e5ee:	0f 85 6d 01 00 00    	jne    40e761 <longest_match_fast+0x291>
  40e5f4:	44 0f b6 5a 07       	movzbl 0x7(%rdx),%r11d
  40e5f9:	45 38 58 07          	cmp    %r11b,0x7(%r8)
  40e5fd:	0f 85 58 01 00 00    	jne    40e75b <longest_match_fast+0x28b>
  40e603:	49 8d 40 08          	lea    0x8(%r8),%rax
  40e607:	48 83 c2 08          	add    $0x8,%rdx
             *++scan == *++match && *++scan == *++match &&
  40e60b:	44 0f b6 02          	movzbl (%rdx),%r8d
  40e60f:	44 38 00             	cmp    %r8b,(%rax)
  40e612:	0f 85 f8 00 00 00    	jne    40e710 <longest_match_fast+0x240>
  40e618:	49 39 c1             	cmp    %rax,%r9
  40e61b:	0f 86 ef 00 00 00    	jbe    40e710 <longest_match_fast+0x240>
             scan < strend);
  40e621:	0f b6 4a 01          	movzbl 0x1(%rdx),%ecx
  40e625:	38 48 01             	cmp    %cl,0x1(%rax)
  40e628:	0f 85 0f 01 00 00    	jne    40e73d <longest_match_fast+0x26d>

    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
    do {
    } while (*++scan == *++match && *++scan == *++match &&
  40e62e:	44 0f b6 52 02       	movzbl 0x2(%rdx),%r10d
  40e633:	44 38 50 02          	cmp    %r10b,0x2(%rax)
  40e637:	0f 85 06 01 00 00    	jne    40e743 <longest_match_fast+0x273>
  40e63d:	44 0f b6 5a 03       	movzbl 0x3(%rdx),%r11d
  40e642:	44 38 58 03          	cmp    %r11b,0x3(%rax)
  40e646:	0f 85 fd 00 00 00    	jne    40e749 <longest_match_fast+0x279>
             *++scan == *++match && *++scan == *++match &&
  40e64c:	44 0f b6 42 04       	movzbl 0x4(%rdx),%r8d
  40e651:	44 38 40 04          	cmp    %r8b,0x4(%rax)
  40e655:	0f 85 f4 00 00 00    	jne    40e74f <longest_match_fast+0x27f>
  40e65b:	0f b6 4a 05          	movzbl 0x5(%rdx),%ecx
  40e65f:	38 48 05             	cmp    %cl,0x5(%rax)
  40e662:	0f 85 ed 00 00 00    	jne    40e755 <longest_match_fast+0x285>
             *++scan == *++match && *++scan == *++match &&
  40e668:	44 0f b6 52 06       	movzbl 0x6(%rdx),%r10d
  40e66d:	44 38 50 06          	cmp    %r10b,0x6(%rax)
  40e671:	0f 85 ea 00 00 00    	jne    40e761 <longest_match_fast+0x291>
  40e677:	44 0f b6 5a 07       	movzbl 0x7(%rdx),%r11d
  40e67c:	44 38 58 07          	cmp    %r11b,0x7(%rax)
  40e680:	0f 85 d5 00 00 00    	jne    40e75b <longest_match_fast+0x28b>
  40e686:	48 8d 48 08          	lea    0x8(%rax),%rcx
  40e68a:	4c 8d 42 08          	lea    0x8(%rdx),%r8
             *++scan == *++match && *++scan == *++match &&
  40e68e:	0f b6 52 08          	movzbl 0x8(%rdx),%edx
  40e692:	38 11                	cmp    %dl,(%rcx)
  40e694:	48 89 c8             	mov    %rcx,%rax
  40e697:	75 77                	jne    40e710 <longest_match_fast+0x240>
             scan < strend);
  40e699:	45 0f b6 50 01       	movzbl 0x1(%r8),%r10d
  40e69e:	44 38 51 01          	cmp    %r10b,0x1(%rcx)
  40e6a2:	0f 85 95 00 00 00    	jne    40e73d <longest_match_fast+0x26d>

    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
    do {
    } while (*++scan == *++match && *++scan == *++match &&
  40e6a8:	45 0f b6 58 02       	movzbl 0x2(%r8),%r11d
  40e6ad:	44 38 59 02          	cmp    %r11b,0x2(%rcx)
  40e6b1:	0f 85 8c 00 00 00    	jne    40e743 <longest_match_fast+0x273>
  40e6b7:	41 0f b6 50 03       	movzbl 0x3(%r8),%edx
  40e6bc:	38 51 03             	cmp    %dl,0x3(%rcx)
  40e6bf:	0f 85 84 00 00 00    	jne    40e749 <longest_match_fast+0x279>
             *++scan == *++match && *++scan == *++match &&
  40e6c5:	45 0f b6 50 04       	movzbl 0x4(%r8),%r10d
  40e6ca:	44 38 51 04          	cmp    %r10b,0x4(%rcx)
  40e6ce:	75 7f                	jne    40e74f <longest_match_fast+0x27f>
  40e6d0:	45 0f b6 58 05       	movzbl 0x5(%r8),%r11d
  40e6d5:	44 38 59 05          	cmp    %r11b,0x5(%rcx)
  40e6d9:	75 7a                	jne    40e755 <longest_match_fast+0x285>
             *++scan == *++match && *++scan == *++match &&
  40e6db:	41 0f b6 50 06       	movzbl 0x6(%r8),%edx
  40e6e0:	38 51 06             	cmp    %dl,0x6(%rcx)
  40e6e3:	75 7c                	jne    40e761 <longest_match_fast+0x291>
  40e6e5:	45 0f b6 50 07       	movzbl 0x7(%r8),%r10d
  40e6ea:	44 38 51 07          	cmp    %r10b,0x7(%rcx)
  40e6ee:	75 6b                	jne    40e75b <longest_match_fast+0x28b>
  40e6f0:	49 8d 50 08          	lea    0x8(%r8),%rdx
             *++scan == *++match && *++scan == *++match &&
  40e6f4:	45 0f b6 40 08       	movzbl 0x8(%r8),%r8d
  40e6f9:	48 8d 41 08          	lea    0x8(%rcx),%rax
  40e6fd:	44 38 41 08          	cmp    %r8b,0x8(%rcx)
  40e701:	0f 84 11 ff ff ff    	je     40e618 <longest_match_fast+0x148>
  40e707:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40e70e:	00 00 
             scan < strend);

    Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

    len = MAX_MATCH - (int)(strend - scan);
  40e710:	44 29 c8             	sub    %r9d,%eax
  40e713:	44 8d 88 02 01 00 00 	lea    0x102(%rax),%r9d

    match = s->window + cur_match;

    /* Return failure if the match length is less than 2:
     */
    if (match[0] != scan[0] || match[1] != scan[1]) return MIN_MATCH-1;
  40e71a:	b8 02 00 00 00       	mov    $0x2,%eax

    Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

    len = MAX_MATCH - (int)(strend - scan);

    if (len < MIN_MATCH) return MIN_MATCH - 1;
  40e71f:	41 83 f9 02          	cmp    $0x2,%r9d
  40e723:	0f 8e c9 fd ff ff    	jle    40e4f2 <longest_match_fast+0x22>

    s->match_start = cur_match;
    return (uInt)len <= s->lookahead ? (uInt)len : s->lookahead;
  40e729:	8b 87 a4 00 00 00    	mov    0xa4(%rdi),%eax

    len = MAX_MATCH - (int)(strend - scan);

    if (len < MIN_MATCH) return MIN_MATCH - 1;

    s->match_start = cur_match;
  40e72f:	89 b7 a0 00 00 00    	mov    %esi,0xa0(%rdi)
    return (uInt)len <= s->lookahead ? (uInt)len : s->lookahead;
  40e735:	41 39 c1             	cmp    %eax,%r9d
  40e738:	41 0f 46 c1          	cmovbe %r9d,%eax
}
  40e73c:	c3                   	retq   
    do {
    } while (*++scan == *++match && *++scan == *++match &&
             *++scan == *++match && *++scan == *++match &&
             *++scan == *++match && *++scan == *++match &&
             *++scan == *++match && *++scan == *++match &&
             scan < strend);
  40e73d:	48 83 c0 01          	add    $0x1,%rax
  40e741:	eb cd                	jmp    40e710 <longest_match_fast+0x240>

    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
    do {
    } while (*++scan == *++match && *++scan == *++match &&
  40e743:	48 83 c0 02          	add    $0x2,%rax
  40e747:	eb c7                	jmp    40e710 <longest_match_fast+0x240>
  40e749:	48 83 c0 03          	add    $0x3,%rax
  40e74d:	eb c1                	jmp    40e710 <longest_match_fast+0x240>
             *++scan == *++match && *++scan == *++match &&
  40e74f:	48 83 c0 04          	add    $0x4,%rax
  40e753:	eb bb                	jmp    40e710 <longest_match_fast+0x240>
  40e755:	48 83 c0 05          	add    $0x5,%rax
  40e759:	eb b5                	jmp    40e710 <longest_match_fast+0x240>
             *++scan == *++match && *++scan == *++match &&
  40e75b:	48 83 c0 07          	add    $0x7,%rax
  40e75f:	eb af                	jmp    40e710 <longest_match_fast+0x240>
  40e761:	48 83 c0 06          	add    $0x6,%rax
  40e765:	eb a9                	jmp    40e710 <longest_match_fast+0x240>
  40e767:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40e76e:	00 00 

000000000040e770 <fill_window>:
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */
local void fill_window(s)
    deflate_state *s;
{
  40e770:	41 57                	push   %r15
  40e772:	41 56                	push   %r14
  40e774:	48 c7 c2 fe ff ff ff 	mov    $0xfffffffffffffffe,%rdx
  40e77b:	41 55                	push   %r13
  40e77d:	41 54                	push   %r12
  40e77f:	49 89 ff             	mov    %rdi,%r15
  40e782:	55                   	push   %rbp
  40e783:	53                   	push   %rbx
  40e784:	48 89 d3             	mov    %rdx,%rbx
  40e787:	45 31 f6             	xor    %r14d,%r14d
  40e78a:	48 83 ec 48          	sub    $0x48,%rsp
    register unsigned n, m;
    register Posf *p;
    unsigned more;    /* Amount of free space at the end of the window. */
    uInt wsize = s->w_size;
  40e78e:	8b 47 44             	mov    0x44(%rdi),%eax
  40e791:	8b af a4 00 00 00    	mov    0xa4(%rdi),%ebp
  40e797:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  40e79c:	89 ef                	mov    %ebp,%edi
  40e79e:	49 89 c5             	mov    %rax,%r13
        /* If the window is almost full and there is insufficient lookahead,
         * move the upper half to the lower one to make room in the upper half.
         */
        if (s->strstart >= wsize+MAX_DIST(s)) {

            zmemcpy(s->window, s->window+wsize, (unsigned)wsize);
  40e7a1:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
                *p = (Pos)(m >= wsize ? m-wsize : NIL);
            } while (--n);

            n = wsize;
#ifndef FASTEST
            p = &s->prev[n];
  40e7a6:	48 01 c0             	add    %rax,%rax
  40e7a9:	41 8d 4d ff          	lea    -0x1(%r13),%ecx
  40e7ad:	41 8d b5 fa fe ff ff 	lea    -0x106(%r13),%esi
  40e7b4:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  40e7b9:	45 89 eb             	mov    %r13d,%r11d
  40e7bc:	48 01 c9             	add    %rcx,%rcx
  40e7bf:	89 74 24 0c          	mov    %esi,0xc(%rsp)
  40e7c3:	48 29 cb             	sub    %rcx,%rbx
  40e7c6:	48 89 5c 24 18       	mov    %rbx,0x18(%rsp)
  40e7cb:	eb 6d                	jmp    40e83a <fill_window+0xca>
  40e7cd:	0f 1f 00             	nopl   (%rax)
    unsigned size;
{
    unsigned len = strm->avail_in;

    if (len > size) len = size;
    if (len == 0) return 0;
  40e7d0:	31 ff                	xor    %edi,%edi
  40e7d2:	85 db                	test   %ebx,%ebx
  40e7d4:	0f 85 26 05 00 00    	jne    40ed00 <fill_window+0x590>
         * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
         */
        Assert(more >= 2, "more < 2");

        n = read_buf(s->strm, s->window + s->strstart + s->lookahead, more);
        s->lookahead += n;
  40e7da:	01 cf                	add    %ecx,%edi

        /* Initialize the hash value now that we have some input: */
        if (s->lookahead >= MIN_MATCH) {
  40e7dc:	83 ff 02             	cmp    $0x2,%edi
         * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
         */
        Assert(more >= 2, "more < 2");

        n = read_buf(s->strm, s->window + s->strstart + s->lookahead, more);
        s->lookahead += n;
  40e7df:	41 89 bf a4 00 00 00 	mov    %edi,0xa4(%r15)

        /* Initialize the hash value now that we have some input: */
        if (s->lookahead >= MIN_MATCH) {
  40e7e6:	76 3f                	jbe    40e827 <fill_window+0xb7>
            s->ins_h = s->window[s->strstart];
  40e7e8:	45 8b 87 9c 00 00 00 	mov    0x9c(%r15),%r8d
  40e7ef:	49 8b 77 50          	mov    0x50(%r15),%rsi
            UPDATE_HASH(s, s->ins_h, s->window[s->strstart+1]);
  40e7f3:	41 8b 8f 80 00 00 00 	mov    0x80(%r15),%ecx
        n = read_buf(s->strm, s->window + s->strstart + s->lookahead, more);
        s->lookahead += n;

        /* Initialize the hash value now that we have some input: */
        if (s->lookahead >= MIN_MATCH) {
            s->ins_h = s->window[s->strstart];
  40e7fa:	42 0f b6 2c 06       	movzbl (%rsi,%r8,1),%ebp
  40e7ff:	4c 89 c2             	mov    %r8,%rdx
            UPDATE_HASH(s, s->ins_h, s->window[s->strstart+1]);
  40e802:	83 c2 01             	add    $0x1,%edx
        n = read_buf(s->strm, s->window + s->strstart + s->lookahead, more);
        s->lookahead += n;

        /* Initialize the hash value now that we have some input: */
        if (s->lookahead >= MIN_MATCH) {
            s->ins_h = s->window[s->strstart];
  40e805:	41 89 6f 70          	mov    %ebp,0x70(%r15)
            UPDATE_HASH(s, s->ins_h, s->window[s->strstart+1]);
  40e809:	44 0f b6 24 16       	movzbl (%rsi,%rdx,1),%r12d
  40e80e:	d3 e5                	shl    %cl,%ebp
  40e810:	44 31 e5             	xor    %r12d,%ebp
  40e813:	41 23 6f 7c          	and    0x7c(%r15),%ebp
        }
        /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
         * but this is not important since only literal bytes will be emitted.
         */

    } while (s->lookahead < MIN_LOOKAHEAD && s->strm->avail_in != 0);
  40e817:	81 ff 05 01 00 00    	cmp    $0x105,%edi
        s->lookahead += n;

        /* Initialize the hash value now that we have some input: */
        if (s->lookahead >= MIN_MATCH) {
            s->ins_h = s->window[s->strstart];
            UPDATE_HASH(s, s->ins_h, s->window[s->strstart+1]);
  40e81d:	41 89 6f 70          	mov    %ebp,0x70(%r15)
        }
        /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
         * but this is not important since only literal bytes will be emitted.
         */

    } while (s->lookahead < MIN_LOOKAHEAD && s->strm->avail_in != 0);
  40e821:	0f 87 c1 04 00 00    	ja     40ece8 <fill_window+0x578>
  40e827:	4d 8b 17             	mov    (%r15),%r10
  40e82a:	41 8b 42 08          	mov    0x8(%r10),%eax
  40e82e:	85 c0                	test   %eax,%eax
  40e830:	0f 84 b2 04 00 00    	je     40ece8 <fill_window+0x578>
  40e836:	45 8b 5f 44          	mov    0x44(%r15),%r11d
    register Posf *p;
    unsigned more;    /* Amount of free space at the end of the window. */
    uInt wsize = s->w_size;

    do {
        more = (unsigned)(s->window_size -(ulg)s->lookahead -(ulg)s->strstart);
  40e83a:	41 8b 5f 58          	mov    0x58(%r15),%ebx
        }

        /* If the window is almost full and there is insufficient lookahead,
         * move the upper half to the lower one to make room in the upper half.
         */
        if (s->strstart >= wsize+MAX_DIST(s)) {
  40e83e:	44 03 5c 24 0c       	add    0xc(%rsp),%r11d
    register Posf *p;
    unsigned more;    /* Amount of free space at the end of the window. */
    uInt wsize = s->w_size;

    do {
        more = (unsigned)(s->window_size -(ulg)s->lookahead -(ulg)s->strstart);
  40e843:	45 8b 8f 9c 00 00 00 	mov    0x9c(%r15),%r9d
  40e84a:	29 fb                	sub    %edi,%ebx
  40e84c:	44 29 cb             	sub    %r9d,%ebx
        }

        /* If the window is almost full and there is insufficient lookahead,
         * move the upper half to the lower one to make room in the upper half.
         */
        if (s->strstart >= wsize+MAX_DIST(s)) {
  40e84f:	45 39 d9             	cmp    %r11d,%r9d
  40e852:	73 7c                	jae    40e8d0 <fill_window+0x160>
                 */
            } while (--n);
#endif
            more += wsize;
        }
        if (s->strm->avail_in == 0) return;
  40e854:	49 8b 2f             	mov    (%r15),%rbp
  40e857:	44 8b 65 08          	mov    0x8(%rbp),%r12d
  40e85b:	45 85 e4             	test   %r12d,%r12d
  40e85e:	0f 84 84 04 00 00    	je     40ece8 <fill_window+0x578>
    Bytef *buf;
    unsigned size;
{
    unsigned len = strm->avail_in;

    if (len > size) len = size;
  40e864:	44 39 e3             	cmp    %r12d,%ebx
         * Otherwise, window_size == 2*WSIZE so more >= 2.
         * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
         */
        Assert(more >= 2, "more < 2");

        n = read_buf(s->strm, s->window + s->strstart + s->lookahead, more);
  40e867:	4d 8b 5f 50          	mov    0x50(%r15),%r11
  40e86b:	41 8b 8f a4 00 00 00 	mov    0xa4(%r15),%ecx
    Bytef *buf;
    unsigned size;
{
    unsigned len = strm->avail_in;

    if (len > size) len = size;
  40e872:	0f 82 58 ff ff ff    	jb     40e7d0 <fill_window+0x60>
    if (len == 0) return 0;

    strm->avail_in  -= len;

    if (strm->state->wrap == 1) {
  40e878:	48 8b 5d 38          	mov    0x38(%rbp),%rbx
    Bytef *buf;
    unsigned size;
{
    unsigned len = strm->avail_in;

    if (len > size) len = size;
  40e87c:	45 31 d2             	xor    %r10d,%r10d
    if (len == 0) return 0;

    strm->avail_in  -= len;
  40e87f:	44 89 55 08          	mov    %r10d,0x8(%rbp)

    if (strm->state->wrap == 1) {
  40e883:	8b 43 2c             	mov    0x2c(%rbx),%eax
  40e886:	83 f8 01             	cmp    $0x1,%eax
  40e889:	0f 84 91 04 00 00    	je     40ed20 <fill_window+0x5b0>
        strm->adler = adler32(strm->adler, strm->next_in, len);
    }
#ifdef GZIP
    else if (strm->state->wrap == 2) {
  40e88f:	83 f8 02             	cmp    $0x2,%eax
  40e892:	0f 84 c0 04 00 00    	je     40ed58 <fill_window+0x5e8>
         * Otherwise, window_size == 2*WSIZE so more >= 2.
         * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
         */
        Assert(more >= 2, "more < 2");

        n = read_buf(s->strm, s->window + s->strstart + s->lookahead, more);
  40e898:	44 89 cf             	mov    %r9d,%edi

__fortify_function void *
__NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
	       size_t __len))
{
  return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
  40e89b:	48 8b 75 00          	mov    0x0(%rbp),%rsi
#ifdef GZIP
    else if (strm->state->wrap == 2) {
        strm->adler = crc32(strm->adler, strm->next_in, len);
    }
#endif
    zmemcpy(buf, strm->next_in, len);
  40e89f:	44 89 e3             	mov    %r12d,%ebx
         * Otherwise, window_size == 2*WSIZE so more >= 2.
         * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
         */
        Assert(more >= 2, "more < 2");

        n = read_buf(s->strm, s->window + s->strstart + s->lookahead, more);
  40e8a2:	48 01 cf             	add    %rcx,%rdi
  40e8a5:	48 89 da             	mov    %rbx,%rdx
  40e8a8:	4c 01 df             	add    %r11,%rdi
  40e8ab:	e8 40 87 ff ff       	callq  406ff0 <memcpy@plt>
    else if (strm->state->wrap == 2) {
        strm->adler = crc32(strm->adler, strm->next_in, len);
    }
#endif
    zmemcpy(buf, strm->next_in, len);
    strm->next_in  += len;
  40e8b0:	48 01 5d 00          	add    %rbx,0x0(%rbp)
    strm->total_in += len;
  40e8b4:	48 01 5d 10          	add    %rbx,0x10(%rbp)
  40e8b8:	44 89 e7             	mov    %r12d,%edi
  40e8bb:	41 8b 8f a4 00 00 00 	mov    0xa4(%r15),%ecx
  40e8c2:	e9 13 ff ff ff       	jmpq   40e7da <fill_window+0x6a>
  40e8c7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40e8ce:	00 00 
        /* If the window is almost full and there is insufficient lookahead,
         * move the upper half to the lower one to make room in the upper half.
         */
        if (s->strstart >= wsize+MAX_DIST(s)) {

            zmemcpy(s->window, s->window+wsize, (unsigned)wsize);
  40e8d0:	4c 8b 64 24 20       	mov    0x20(%rsp),%r12
  40e8d5:	49 8b 7f 50          	mov    0x50(%r15),%rdi
  40e8d9:	4a 8d 34 27          	lea    (%rdi,%r12,1),%rsi
  40e8dd:	4c 89 e2             	mov    %r12,%rdx
  40e8e0:	e8 0b 87 ff ff       	callq  406ff0 <memcpy@plt>
               to keep the hash table consistent if we switch back to level > 0
               later. (Using level 0 permanently is not an optimal usage of
               zlib, so we don't care about this pathological case.)
             */
            /* %%% avoid this when Z_RLE */
            n = s->hash_size;
  40e8e5:	45 8b 57 74          	mov    0x74(%r15),%r10d
            p = &s->head[n];
  40e8e9:	49 8b 47 68          	mov    0x68(%r15),%rax
  40e8ed:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
         */
        if (s->strstart >= wsize+MAX_DIST(s)) {

            zmemcpy(s->window, s->window+wsize, (unsigned)wsize);
            s->match_start -= wsize;
            s->strstart    -= wsize; /* we now have strstart >= MAX_DIST */
  40e8f2:	45 8b 8f 9c 00 00 00 	mov    0x9c(%r15),%r9d
            s->block_start -= (long) wsize;
  40e8f9:	4d 29 a7 88 00 00 00 	sub    %r12,0x88(%r15)
         * move the upper half to the lower one to make room in the upper half.
         */
        if (s->strstart >= wsize+MAX_DIST(s)) {

            zmemcpy(s->window, s->window+wsize, (unsigned)wsize);
            s->match_start -= wsize;
  40e900:	45 29 af a0 00 00 00 	sub    %r13d,0xa0(%r15)
               to keep the hash table consistent if we switch back to level > 0
               later. (Using level 0 permanently is not an optimal usage of
               zlib, so we don't care about this pathological case.)
             */
            /* %%% avoid this when Z_RLE */
            n = s->hash_size;
  40e907:	4d 89 d3             	mov    %r10,%r11
            p = &s->head[n];
  40e90a:	4a 8d 2c 50          	lea    (%rax,%r10,2),%rbp
         */
        if (s->strstart >= wsize+MAX_DIST(s)) {

            zmemcpy(s->window, s->window+wsize, (unsigned)wsize);
            s->match_start -= wsize;
            s->strstart    -= wsize; /* we now have strstart >= MAX_DIST */
  40e90e:	45 29 e9             	sub    %r13d,%r9d
  40e911:	41 83 eb 01          	sub    $0x1,%r11d
  40e915:	4d 01 db             	add    %r11,%r11
  40e918:	48 89 e9             	mov    %rbp,%rcx
             */
            /* %%% avoid this when Z_RLE */
            n = s->hash_size;
            p = &s->head[n];
            do {
                m = *--p;
  40e91b:	4c 8d 45 fe          	lea    -0x2(%rbp),%r8
  40e91f:	0f b7 55 fe          	movzwl -0x2(%rbp),%edx
  40e923:	4c 29 de             	sub    %r11,%rsi
         */
        if (s->strstart >= wsize+MAX_DIST(s)) {

            zmemcpy(s->window, s->window+wsize, (unsigned)wsize);
            s->match_start -= wsize;
            s->strstart    -= wsize; /* we now have strstart >= MAX_DIST */
  40e926:	45 89 8f 9c 00 00 00 	mov    %r9d,0x9c(%r15)
  40e92d:	48 01 ee             	add    %rbp,%rsi
  40e930:	48 29 f1             	sub    %rsi,%rcx
  40e933:	48 83 e9 02          	sub    $0x2,%rcx
  40e937:	48 d1 e9             	shr    %rcx
            /* %%% avoid this when Z_RLE */
            n = s->hash_size;
            p = &s->head[n];
            do {
                m = *--p;
                *p = (Pos)(m >= wsize ? m-wsize : NIL);
  40e93a:	41 89 d4             	mov    %edx,%r12d
  40e93d:	45 29 ec             	sub    %r13d,%r12d
  40e940:	83 e1 07             	and    $0x7,%ecx
  40e943:	41 39 d5             	cmp    %edx,%r13d
  40e946:	45 0f 47 e6          	cmova  %r14d,%r12d
            } while (--n);
  40e94a:	49 39 f0             	cmp    %rsi,%r8
            /* %%% avoid this when Z_RLE */
            n = s->hash_size;
            p = &s->head[n];
            do {
                m = *--p;
                *p = (Pos)(m >= wsize ? m-wsize : NIL);
  40e94d:	66 44 89 65 fe       	mov    %r12w,-0x2(%rbp)
            } while (--n);
  40e952:	0f 84 a0 01 00 00    	je     40eaf8 <fill_window+0x388>
  40e958:	48 85 c9             	test   %rcx,%rcx
  40e95b:	0f 84 e8 00 00 00    	je     40ea49 <fill_window+0x2d9>
  40e961:	48 83 f9 01          	cmp    $0x1,%rcx
  40e965:	0f 84 bd 00 00 00    	je     40ea28 <fill_window+0x2b8>
  40e96b:	48 83 f9 02          	cmp    $0x2,%rcx
  40e96f:	0f 84 99 00 00 00    	je     40ea0e <fill_window+0x29e>
  40e975:	48 83 f9 03          	cmp    $0x3,%rcx
  40e979:	74 79                	je     40e9f4 <fill_window+0x284>
  40e97b:	48 83 f9 04          	cmp    $0x4,%rcx
  40e97f:	74 59                	je     40e9da <fill_window+0x26a>
  40e981:	48 83 f9 05          	cmp    $0x5,%rcx
  40e985:	74 3a                	je     40e9c1 <fill_window+0x251>
  40e987:	48 83 f9 06          	cmp    $0x6,%rcx
  40e98b:	74 1a                	je     40e9a7 <fill_window+0x237>
             */
            /* %%% avoid this when Z_RLE */
            n = s->hash_size;
            p = &s->head[n];
            do {
                m = *--p;
  40e98d:	0f b7 7d fc          	movzwl -0x4(%rbp),%edi
  40e991:	4c 8d 45 fc          	lea    -0x4(%rbp),%r8
                *p = (Pos)(m >= wsize ? m-wsize : NIL);
  40e995:	41 89 fa             	mov    %edi,%r10d
  40e998:	45 29 ea             	sub    %r13d,%r10d
  40e99b:	41 39 fd             	cmp    %edi,%r13d
  40e99e:	45 0f 47 d6          	cmova  %r14d,%r10d
  40e9a2:	66 44 89 55 fc       	mov    %r10w,-0x4(%rbp)
             */
            /* %%% avoid this when Z_RLE */
            n = s->hash_size;
            p = &s->head[n];
            do {
                m = *--p;
  40e9a7:	45 0f b7 58 fe       	movzwl -0x2(%r8),%r11d
  40e9ac:	49 83 e8 02          	sub    $0x2,%r8
                *p = (Pos)(m >= wsize ? m-wsize : NIL);
  40e9b0:	44 89 d8             	mov    %r11d,%eax
  40e9b3:	44 29 e8             	sub    %r13d,%eax
  40e9b6:	45 39 dd             	cmp    %r11d,%r13d
  40e9b9:	41 0f 47 c6          	cmova  %r14d,%eax
  40e9bd:	66 41 89 00          	mov    %ax,(%r8)
             */
            /* %%% avoid this when Z_RLE */
            n = s->hash_size;
            p = &s->head[n];
            do {
                m = *--p;
  40e9c1:	41 0f b7 68 fe       	movzwl -0x2(%r8),%ebp
  40e9c6:	49 83 e8 02          	sub    $0x2,%r8
                *p = (Pos)(m >= wsize ? m-wsize : NIL);
  40e9ca:	89 e9                	mov    %ebp,%ecx
  40e9cc:	44 29 e9             	sub    %r13d,%ecx
  40e9cf:	41 39 ed             	cmp    %ebp,%r13d
  40e9d2:	41 0f 47 ce          	cmova  %r14d,%ecx
  40e9d6:	66 41 89 08          	mov    %cx,(%r8)
             */
            /* %%% avoid this when Z_RLE */
            n = s->hash_size;
            p = &s->head[n];
            do {
                m = *--p;
  40e9da:	45 0f b7 60 fe       	movzwl -0x2(%r8),%r12d
  40e9df:	49 83 e8 02          	sub    $0x2,%r8
                *p = (Pos)(m >= wsize ? m-wsize : NIL);
  40e9e3:	44 89 e2             	mov    %r12d,%edx
  40e9e6:	44 29 ea             	sub    %r13d,%edx
  40e9e9:	45 39 e5             	cmp    %r12d,%r13d
  40e9ec:	41 0f 47 d6          	cmova  %r14d,%edx
  40e9f0:	66 41 89 10          	mov    %dx,(%r8)
             */
            /* %%% avoid this when Z_RLE */
            n = s->hash_size;
            p = &s->head[n];
            do {
                m = *--p;
  40e9f4:	41 0f b7 78 fe       	movzwl -0x2(%r8),%edi
  40e9f9:	49 83 e8 02          	sub    $0x2,%r8
                *p = (Pos)(m >= wsize ? m-wsize : NIL);
  40e9fd:	41 89 fa             	mov    %edi,%r10d
  40ea00:	45 29 ea             	sub    %r13d,%r10d
  40ea03:	41 39 fd             	cmp    %edi,%r13d
  40ea06:	45 0f 47 d6          	cmova  %r14d,%r10d
  40ea0a:	66 45 89 10          	mov    %r10w,(%r8)
             */
            /* %%% avoid this when Z_RLE */
            n = s->hash_size;
            p = &s->head[n];
            do {
                m = *--p;
  40ea0e:	45 0f b7 58 fe       	movzwl -0x2(%r8),%r11d
  40ea13:	49 83 e8 02          	sub    $0x2,%r8
                *p = (Pos)(m >= wsize ? m-wsize : NIL);
  40ea17:	44 89 d8             	mov    %r11d,%eax
  40ea1a:	44 29 e8             	sub    %r13d,%eax
  40ea1d:	45 39 dd             	cmp    %r11d,%r13d
  40ea20:	41 0f 47 c6          	cmova  %r14d,%eax
  40ea24:	66 41 89 00          	mov    %ax,(%r8)
             */
            /* %%% avoid this when Z_RLE */
            n = s->hash_size;
            p = &s->head[n];
            do {
                m = *--p;
  40ea28:	49 83 e8 02          	sub    $0x2,%r8
  40ea2c:	41 0f b7 28          	movzwl (%r8),%ebp
                *p = (Pos)(m >= wsize ? m-wsize : NIL);
  40ea30:	89 e9                	mov    %ebp,%ecx
  40ea32:	44 29 e9             	sub    %r13d,%ecx
  40ea35:	41 39 ed             	cmp    %ebp,%r13d
  40ea38:	41 0f 47 ce          	cmova  %r14d,%ecx
            } while (--n);
  40ea3c:	49 39 f0             	cmp    %rsi,%r8
            /* %%% avoid this when Z_RLE */
            n = s->hash_size;
            p = &s->head[n];
            do {
                m = *--p;
                *p = (Pos)(m >= wsize ? m-wsize : NIL);
  40ea3f:	66 41 89 08          	mov    %cx,(%r8)
            } while (--n);
  40ea43:	0f 84 af 00 00 00    	je     40eaf8 <fill_window+0x388>
             */
            /* %%% avoid this when Z_RLE */
            n = s->hash_size;
            p = &s->head[n];
            do {
                m = *--p;
  40ea49:	45 0f b7 50 fe       	movzwl -0x2(%r8),%r10d
  40ea4e:	41 0f b7 48 fc       	movzwl -0x4(%r8),%ecx
  40ea53:	41 0f b7 78 fa       	movzwl -0x6(%r8),%edi
  40ea58:	41 0f b7 68 f8       	movzwl -0x8(%r8),%ebp
                *p = (Pos)(m >= wsize ? m-wsize : NIL);
  40ea5d:	44 89 d0             	mov    %r10d,%eax
  40ea60:	41 89 cb             	mov    %ecx,%r11d
  40ea63:	44 29 e8             	sub    %r13d,%eax
  40ea66:	45 39 d5             	cmp    %r10d,%r13d
             */
            /* %%% avoid this when Z_RLE */
            n = s->hash_size;
            p = &s->head[n];
            do {
                m = *--p;
  40ea69:	45 0f b7 50 f6       	movzwl -0xa(%r8),%r10d
  40ea6e:	41 0f 47 c6          	cmova  %r14d,%eax
                *p = (Pos)(m >= wsize ? m-wsize : NIL);
  40ea72:	89 fa                	mov    %edi,%edx
  40ea74:	45 29 eb             	sub    %r13d,%r11d
  40ea77:	41 39 cd             	cmp    %ecx,%r13d
             */
            /* %%% avoid this when Z_RLE */
            n = s->hash_size;
            p = &s->head[n];
            do {
                m = *--p;
  40ea7a:	41 0f b7 48 f4       	movzwl -0xc(%r8),%ecx
                *p = (Pos)(m >= wsize ? m-wsize : NIL);
  40ea7f:	41 89 ec             	mov    %ebp,%r12d
  40ea82:	45 0f 47 de          	cmova  %r14d,%r11d
  40ea86:	44 29 ea             	sub    %r13d,%edx
  40ea89:	41 39 fd             	cmp    %edi,%r13d
             */
            /* %%% avoid this when Z_RLE */
            n = s->hash_size;
            p = &s->head[n];
            do {
                m = *--p;
  40ea8c:	41 0f b7 78 f2       	movzwl -0xe(%r8),%edi
  40ea91:	41 0f 47 d6          	cmova  %r14d,%edx
                *p = (Pos)(m >= wsize ? m-wsize : NIL);
  40ea95:	66 41 89 40 fe       	mov    %ax,-0x2(%r8)
  40ea9a:	45 29 ec             	sub    %r13d,%r12d
  40ea9d:	44 89 d0             	mov    %r10d,%eax
  40eaa0:	41 39 ed             	cmp    %ebp,%r13d
  40eaa3:	45 0f 47 e6          	cmova  %r14d,%r12d
  40eaa7:	66 45 89 58 fc       	mov    %r11w,-0x4(%r8)
  40eaac:	44 29 e8             	sub    %r13d,%eax
  40eaaf:	41 89 cb             	mov    %ecx,%r11d
  40eab2:	45 39 d5             	cmp    %r10d,%r13d
  40eab5:	66 41 89 50 fa       	mov    %dx,-0x6(%r8)
  40eaba:	41 0f 47 c6          	cmova  %r14d,%eax
  40eabe:	89 fa                	mov    %edi,%edx
  40eac0:	45 29 eb             	sub    %r13d,%r11d
  40eac3:	41 39 cd             	cmp    %ecx,%r13d
  40eac6:	66 45 89 60 f8       	mov    %r12w,-0x8(%r8)
  40eacb:	66 41 89 40 f6       	mov    %ax,-0xa(%r8)
  40ead0:	45 0f 47 de          	cmova  %r14d,%r11d
  40ead4:	44 29 ea             	sub    %r13d,%edx
  40ead7:	41 39 fd             	cmp    %edi,%r13d
  40eada:	41 0f 47 d6          	cmova  %r14d,%edx
  40eade:	66 45 89 58 f4       	mov    %r11w,-0xc(%r8)
             */
            /* %%% avoid this when Z_RLE */
            n = s->hash_size;
            p = &s->head[n];
            do {
                m = *--p;
  40eae3:	49 83 e8 10          	sub    $0x10,%r8
                *p = (Pos)(m >= wsize ? m-wsize : NIL);
  40eae7:	66 41 89 50 02       	mov    %dx,0x2(%r8)
  40eaec:	e9 3b ff ff ff       	jmpq   40ea2c <fill_window+0x2bc>
  40eaf1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            } while (--n);

            n = wsize;
#ifndef FASTEST
            p = &s->prev[n];
  40eaf8:	4c 8b 64 24 10       	mov    0x10(%rsp),%r12
  40eafd:	4d 03 67 60          	add    0x60(%r15),%r12
  40eb01:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
            do {
                m = *--p;
  40eb06:	45 0f b7 5c 24 fe    	movzwl -0x2(%r12),%r11d
  40eb0c:	4d 8d 14 34          	lea    (%r12,%rsi,1),%r10
  40eb10:	4d 89 e0             	mov    %r12,%r8
  40eb13:	49 8d 44 24 fe       	lea    -0x2(%r12),%rax
  40eb18:	4d 29 d0             	sub    %r10,%r8
  40eb1b:	49 83 e8 02          	sub    $0x2,%r8
  40eb1f:	49 d1 e8             	shr    %r8
                *p = (Pos)(m >= wsize ? m-wsize : NIL);
  40eb22:	44 89 df             	mov    %r11d,%edi
  40eb25:	44 29 ef             	sub    %r13d,%edi
  40eb28:	41 83 e0 07          	and    $0x7,%r8d
  40eb2c:	45 39 dd             	cmp    %r11d,%r13d
  40eb2f:	41 0f 47 fe          	cmova  %r14d,%edi
                /* If n is not on any hash chain, prev[n] is garbage but
                 * its value will never be used.
                 */
            } while (--n);
  40eb33:	4c 39 d0             	cmp    %r10,%rax
            n = wsize;
#ifndef FASTEST
            p = &s->prev[n];
            do {
                m = *--p;
                *p = (Pos)(m >= wsize ? m-wsize : NIL);
  40eb36:	66 41 89 7c 24 fe    	mov    %di,-0x2(%r12)
                /* If n is not on any hash chain, prev[n] is garbage but
                 * its value will never be used.
                 */
            } while (--n);
  40eb3c:	0f 84 8e 01 00 00    	je     40ecd0 <fill_window+0x560>
  40eb42:	4d 85 c0             	test   %r8,%r8
  40eb45:	0f 84 e5 00 00 00    	je     40ec30 <fill_window+0x4c0>
  40eb4b:	49 83 f8 01          	cmp    $0x1,%r8
  40eb4f:	0f 84 ba 00 00 00    	je     40ec0f <fill_window+0x49f>
  40eb55:	49 83 f8 02          	cmp    $0x2,%r8
  40eb59:	0f 84 97 00 00 00    	je     40ebf6 <fill_window+0x486>
  40eb5f:	49 83 f8 03          	cmp    $0x3,%r8
  40eb63:	74 7a                	je     40ebdf <fill_window+0x46f>
  40eb65:	49 83 f8 04          	cmp    $0x4,%r8
  40eb69:	74 5b                	je     40ebc6 <fill_window+0x456>
  40eb6b:	49 83 f8 05          	cmp    $0x5,%r8
  40eb6f:	74 3c                	je     40ebad <fill_window+0x43d>
  40eb71:	49 83 f8 06          	cmp    $0x6,%r8
  40eb75:	74 1d                	je     40eb94 <fill_window+0x424>

            n = wsize;
#ifndef FASTEST
            p = &s->prev[n];
            do {
                m = *--p;
  40eb77:	41 0f b7 6c 24 fc    	movzwl -0x4(%r12),%ebp
  40eb7d:	49 8d 44 24 fc       	lea    -0x4(%r12),%rax
                *p = (Pos)(m >= wsize ? m-wsize : NIL);
  40eb82:	89 e9                	mov    %ebp,%ecx
  40eb84:	44 29 e9             	sub    %r13d,%ecx
  40eb87:	41 39 ed             	cmp    %ebp,%r13d
  40eb8a:	41 0f 47 ce          	cmova  %r14d,%ecx
  40eb8e:	66 41 89 4c 24 fc    	mov    %cx,-0x4(%r12)

            n = wsize;
#ifndef FASTEST
            p = &s->prev[n];
            do {
                m = *--p;
  40eb94:	44 0f b7 60 fe       	movzwl -0x2(%rax),%r12d
  40eb99:	48 83 e8 02          	sub    $0x2,%rax
                *p = (Pos)(m >= wsize ? m-wsize : NIL);
  40eb9d:	44 89 e6             	mov    %r12d,%esi
  40eba0:	44 29 ee             	sub    %r13d,%esi
  40eba3:	45 39 e5             	cmp    %r12d,%r13d
  40eba6:	41 0f 47 f6          	cmova  %r14d,%esi
  40ebaa:	66 89 30             	mov    %si,(%rax)

            n = wsize;
#ifndef FASTEST
            p = &s->prev[n];
            do {
                m = *--p;
  40ebad:	44 0f b7 40 fe       	movzwl -0x2(%rax),%r8d
  40ebb2:	48 83 e8 02          	sub    $0x2,%rax
                *p = (Pos)(m >= wsize ? m-wsize : NIL);
  40ebb6:	44 89 c2             	mov    %r8d,%edx
  40ebb9:	44 29 ea             	sub    %r13d,%edx
  40ebbc:	45 39 c5             	cmp    %r8d,%r13d
  40ebbf:	41 0f 47 d6          	cmova  %r14d,%edx
  40ebc3:	66 89 10             	mov    %dx,(%rax)

            n = wsize;
#ifndef FASTEST
            p = &s->prev[n];
            do {
                m = *--p;
  40ebc6:	44 0f b7 58 fe       	movzwl -0x2(%rax),%r11d
  40ebcb:	48 83 e8 02          	sub    $0x2,%rax
                *p = (Pos)(m >= wsize ? m-wsize : NIL);
  40ebcf:	44 89 df             	mov    %r11d,%edi
  40ebd2:	44 29 ef             	sub    %r13d,%edi
  40ebd5:	45 39 dd             	cmp    %r11d,%r13d
  40ebd8:	41 0f 47 fe          	cmova  %r14d,%edi
  40ebdc:	66 89 38             	mov    %di,(%rax)

            n = wsize;
#ifndef FASTEST
            p = &s->prev[n];
            do {
                m = *--p;
  40ebdf:	0f b7 68 fe          	movzwl -0x2(%rax),%ebp
  40ebe3:	48 83 e8 02          	sub    $0x2,%rax
                *p = (Pos)(m >= wsize ? m-wsize : NIL);
  40ebe7:	89 e9                	mov    %ebp,%ecx
  40ebe9:	44 29 e9             	sub    %r13d,%ecx
  40ebec:	41 39 ed             	cmp    %ebp,%r13d
  40ebef:	41 0f 47 ce          	cmova  %r14d,%ecx
  40ebf3:	66 89 08             	mov    %cx,(%rax)

            n = wsize;
#ifndef FASTEST
            p = &s->prev[n];
            do {
                m = *--p;
  40ebf6:	44 0f b7 60 fe       	movzwl -0x2(%rax),%r12d
  40ebfb:	48 83 e8 02          	sub    $0x2,%rax
                *p = (Pos)(m >= wsize ? m-wsize : NIL);
  40ebff:	44 89 e6             	mov    %r12d,%esi
  40ec02:	44 29 ee             	sub    %r13d,%esi
  40ec05:	45 39 e5             	cmp    %r12d,%r13d
  40ec08:	41 0f 47 f6          	cmova  %r14d,%esi
  40ec0c:	66 89 30             	mov    %si,(%rax)

            n = wsize;
#ifndef FASTEST
            p = &s->prev[n];
            do {
                m = *--p;
  40ec0f:	48 83 e8 02          	sub    $0x2,%rax
  40ec13:	44 0f b7 00          	movzwl (%rax),%r8d
                *p = (Pos)(m >= wsize ? m-wsize : NIL);
  40ec17:	44 89 c2             	mov    %r8d,%edx
  40ec1a:	44 29 ea             	sub    %r13d,%edx
  40ec1d:	45 39 c5             	cmp    %r8d,%r13d
  40ec20:	41 0f 47 d6          	cmova  %r14d,%edx
                /* If n is not on any hash chain, prev[n] is garbage but
                 * its value will never be used.
                 */
            } while (--n);
  40ec24:	4c 39 d0             	cmp    %r10,%rax
            n = wsize;
#ifndef FASTEST
            p = &s->prev[n];
            do {
                m = *--p;
                *p = (Pos)(m >= wsize ? m-wsize : NIL);
  40ec27:	66 89 10             	mov    %dx,(%rax)
                /* If n is not on any hash chain, prev[n] is garbage but
                 * its value will never be used.
                 */
            } while (--n);
  40ec2a:	0f 84 a0 00 00 00    	je     40ecd0 <fill_window+0x560>

            n = wsize;
#ifndef FASTEST
            p = &s->prev[n];
            do {
                m = *--p;
  40ec30:	0f b7 78 fe          	movzwl -0x2(%rax),%edi
  40ec34:	44 0f b7 40 fc       	movzwl -0x4(%rax),%r8d
  40ec39:	0f b7 68 fa          	movzwl -0x6(%rax),%ebp
  40ec3d:	0f b7 48 f8          	movzwl -0x8(%rax),%ecx
                *p = (Pos)(m >= wsize ? m-wsize : NIL);
  40ec41:	89 fe                	mov    %edi,%esi
  40ec43:	44 89 c2             	mov    %r8d,%edx
  40ec46:	44 29 ee             	sub    %r13d,%esi
  40ec49:	41 39 fd             	cmp    %edi,%r13d

            n = wsize;
#ifndef FASTEST
            p = &s->prev[n];
            do {
                m = *--p;
  40ec4c:	0f b7 78 f6          	movzwl -0xa(%rax),%edi
  40ec50:	41 0f 47 f6          	cmova  %r14d,%esi
                *p = (Pos)(m >= wsize ? m-wsize : NIL);
  40ec54:	41 89 ec             	mov    %ebp,%r12d
  40ec57:	44 29 ea             	sub    %r13d,%edx
  40ec5a:	45 39 c5             	cmp    %r8d,%r13d

            n = wsize;
#ifndef FASTEST
            p = &s->prev[n];
            do {
                m = *--p;
  40ec5d:	44 0f b7 40 f4       	movzwl -0xc(%rax),%r8d
                *p = (Pos)(m >= wsize ? m-wsize : NIL);
  40ec62:	41 89 cb             	mov    %ecx,%r11d
  40ec65:	41 0f 47 d6          	cmova  %r14d,%edx
  40ec69:	45 29 ec             	sub    %r13d,%r12d
  40ec6c:	41 39 ed             	cmp    %ebp,%r13d

            n = wsize;
#ifndef FASTEST
            p = &s->prev[n];
            do {
                m = *--p;
  40ec6f:	0f b7 68 f2          	movzwl -0xe(%rax),%ebp
  40ec73:	45 0f 47 e6          	cmova  %r14d,%r12d
                *p = (Pos)(m >= wsize ? m-wsize : NIL);
  40ec77:	66 89 70 fe          	mov    %si,-0x2(%rax)
  40ec7b:	45 29 eb             	sub    %r13d,%r11d
  40ec7e:	89 fe                	mov    %edi,%esi
  40ec80:	41 39 cd             	cmp    %ecx,%r13d
  40ec83:	45 0f 47 de          	cmova  %r14d,%r11d
  40ec87:	66 89 50 fc          	mov    %dx,-0x4(%rax)
  40ec8b:	44 29 ee             	sub    %r13d,%esi
  40ec8e:	44 89 c2             	mov    %r8d,%edx
  40ec91:	41 39 fd             	cmp    %edi,%r13d
  40ec94:	66 44 89 60 fa       	mov    %r12w,-0x6(%rax)
  40ec99:	41 0f 47 f6          	cmova  %r14d,%esi
  40ec9d:	41 89 ec             	mov    %ebp,%r12d
  40eca0:	44 29 ea             	sub    %r13d,%edx
  40eca3:	45 39 c5             	cmp    %r8d,%r13d
  40eca6:	66 44 89 58 f8       	mov    %r11w,-0x8(%rax)
  40ecab:	66 89 70 f6          	mov    %si,-0xa(%rax)
  40ecaf:	41 0f 47 d6          	cmova  %r14d,%edx
  40ecb3:	45 29 ec             	sub    %r13d,%r12d
  40ecb6:	41 39 ed             	cmp    %ebp,%r13d
  40ecb9:	45 0f 47 e6          	cmova  %r14d,%r12d
  40ecbd:	66 89 50 f4          	mov    %dx,-0xc(%rax)

            n = wsize;
#ifndef FASTEST
            p = &s->prev[n];
            do {
                m = *--p;
  40ecc1:	48 83 e8 10          	sub    $0x10,%rax
                *p = (Pos)(m >= wsize ? m-wsize : NIL);
  40ecc5:	66 44 89 60 02       	mov    %r12w,0x2(%rax)
  40ecca:	e9 44 ff ff ff       	jmpq   40ec13 <fill_window+0x4a3>
  40eccf:	90                   	nop
                 */
            } while (--n);
#endif
            more += wsize;
        }
        if (s->strm->avail_in == 0) return;
  40ecd0:	49 8b 2f             	mov    (%r15),%rbp
                /* If n is not on any hash chain, prev[n] is garbage but
                 * its value will never be used.
                 */
            } while (--n);
#endif
            more += wsize;
  40ecd3:	44 01 eb             	add    %r13d,%ebx
        }
        if (s->strm->avail_in == 0) return;
  40ecd6:	44 8b 65 08          	mov    0x8(%rbp),%r12d
  40ecda:	45 85 e4             	test   %r12d,%r12d
  40ecdd:	0f 85 81 fb ff ff    	jne    40e864 <fill_window+0xf4>
  40ece3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
         * but this is not important since only literal bytes will be emitted.
         */

    } while (s->lookahead < MIN_LOOKAHEAD && s->strm->avail_in != 0);
}
  40ece8:	48 83 c4 48          	add    $0x48,%rsp
  40ecec:	5b                   	pop    %rbx
  40eced:	5d                   	pop    %rbp
  40ecee:	41 5c                	pop    %r12
  40ecf0:	41 5d                	pop    %r13
  40ecf2:	41 5e                	pop    %r14
  40ecf4:	41 5f                	pop    %r15
  40ecf6:	c3                   	retq   
  40ecf7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40ecfe:	00 00 
  40ed00:	45 89 e2             	mov    %r12d,%r10d
    unsigned size;
{
    unsigned len = strm->avail_in;

    if (len > size) len = size;
    if (len == 0) return 0;
  40ed03:	41 89 dc             	mov    %ebx,%r12d
  40ed06:	41 29 da             	sub    %ebx,%r10d

    strm->avail_in  -= len;

    if (strm->state->wrap == 1) {
  40ed09:	48 8b 5d 38          	mov    0x38(%rbp),%rbx
    unsigned len = strm->avail_in;

    if (len > size) len = size;
    if (len == 0) return 0;

    strm->avail_in  -= len;
  40ed0d:	44 89 55 08          	mov    %r10d,0x8(%rbp)

    if (strm->state->wrap == 1) {
  40ed11:	8b 43 2c             	mov    0x2c(%rbx),%eax
  40ed14:	83 f8 01             	cmp    $0x1,%eax
  40ed17:	0f 85 72 fb ff ff    	jne    40e88f <fill_window+0x11f>
  40ed1d:	0f 1f 00             	nopl   (%rax)
        strm->adler = adler32(strm->adler, strm->next_in, len);
  40ed20:	48 8b 7d 60          	mov    0x60(%rbp),%rdi
  40ed24:	48 8b 75 00          	mov    0x0(%rbp),%rsi
  40ed28:	44 89 e2             	mov    %r12d,%edx
  40ed2b:	89 4c 24 3c          	mov    %ecx,0x3c(%rsp)
  40ed2f:	4c 89 5c 24 30       	mov    %r11,0x30(%rsp)
  40ed34:	44 89 4c 24 38       	mov    %r9d,0x38(%rsp)
  40ed39:	e8 f2 15 01 00       	callq  420330 <adler32>
  40ed3e:	44 8b 4c 24 38       	mov    0x38(%rsp),%r9d
  40ed43:	48 89 45 60          	mov    %rax,0x60(%rbp)
  40ed47:	4c 8b 5c 24 30       	mov    0x30(%rsp),%r11
  40ed4c:	8b 4c 24 3c          	mov    0x3c(%rsp),%ecx
  40ed50:	e9 43 fb ff ff       	jmpq   40e898 <fill_window+0x128>
  40ed55:	0f 1f 00             	nopl   (%rax)
    }
#ifdef GZIP
    else if (strm->state->wrap == 2) {
        strm->adler = crc32(strm->adler, strm->next_in, len);
  40ed58:	48 8b 7d 60          	mov    0x60(%rbp),%rdi
  40ed5c:	48 8b 75 00          	mov    0x0(%rbp),%rsi
  40ed60:	44 89 e2             	mov    %r12d,%edx
  40ed63:	89 4c 24 3c          	mov    %ecx,0x3c(%rsp)
  40ed67:	4c 89 5c 24 30       	mov    %r11,0x30(%rsp)
  40ed6c:	44 89 4c 24 38       	mov    %r9d,0x38(%rsp)
  40ed71:	e8 da 1d 01 00       	callq  420b50 <crc32>
  40ed76:	8b 4c 24 3c          	mov    0x3c(%rsp),%ecx
  40ed7a:	48 89 45 60          	mov    %rax,0x60(%rbp)
  40ed7e:	4c 8b 5c 24 30       	mov    0x30(%rsp),%r11
  40ed83:	44 8b 4c 24 38       	mov    0x38(%rsp),%r9d
  40ed88:	e9 0b fb ff ff       	jmpq   40e898 <fill_window+0x128>
  40ed8d:	0f 1f 00             	nopl   (%rax)

000000000040ed90 <deflate_stored>:
 * window to pending_buf.
 */
local block_state deflate_stored(s, flush)
    deflate_state *s;
    int flush;
{
  40ed90:	41 57                	push   %r15
  40ed92:	41 56                	push   %r14
  40ed94:	41 55                	push   %r13
  40ed96:	41 54                	push   %r12
  40ed98:	41 89 f4             	mov    %esi,%r12d
  40ed9b:	55                   	push   %rbp
  40ed9c:	53                   	push   %rbx
    /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
     * to pending_buf_size, and each stored block has a 5 byte header:
     */
    ulg max_block_size = 0xffff;
  40ed9d:	bd ff ff 00 00       	mov    $0xffff,%ebp
 * window to pending_buf.
 */
local block_state deflate_stored(s, flush)
    deflate_state *s;
    int flush;
{
  40eda2:	48 89 fb             	mov    %rdi,%rbx
  40eda5:	48 83 ec 08          	sub    $0x8,%rsp
     * to pending_buf_size, and each stored block has a 5 byte header:
     */
    ulg max_block_size = 0xffff;
    ulg max_start;

    if (max_block_size > s->pending_buf_size - 5) {
  40eda9:	48 8b 47 18          	mov    0x18(%rdi),%rax
  40edad:	48 83 e8 05          	sub    $0x5,%rax
    int flush;
{
    /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
     * to pending_buf_size, and each stored block has a 5 byte header:
     */
    ulg max_block_size = 0xffff;
  40edb1:	48 3d ff ff 00 00    	cmp    $0xffff,%rax
  40edb7:	48 0f 42 e8          	cmovb  %rax,%rbp
  40edbb:	eb 30                	jmp    40eded <deflate_stored+0x5d>
  40edbd:	0f 1f 00             	nopl   (%rax)
        max_start = s->block_start + max_block_size;
        if (s->strstart == 0 || (ulg)s->strstart >= max_start) {
            /* strstart == 0 is possible when wraparound on 16-bit machine */
            s->lookahead = (uInt)(s->strstart - max_start);
            s->strstart = (uInt)max_start;
            FLUSH_BLOCK(s, 0);
  40edc0:	45 85 db             	test   %r11d,%r11d
  40edc3:	0f 84 fb 00 00 00    	je     40eec4 <deflate_stored+0x134>
  40edc9:	8b 83 9c 00 00 00    	mov    0x9c(%rbx),%eax
  40edcf:	48 8b 8b 88 00 00 00 	mov    0x88(%rbx),%rcx
        }
        /* Flush if we may have to slide, otherwise block_start may become
         * negative and the data will be gone:
         */
        if (s->strstart - (uInt)s->block_start >= MAX_DIST(s)) {
  40edd6:	8b 53 44             	mov    0x44(%rbx),%edx
  40edd9:	89 c6                	mov    %eax,%esi
  40eddb:	29 ce                	sub    %ecx,%esi
  40eddd:	44 8d b2 fa fe ff ff 	lea    -0x106(%rdx),%r14d
  40ede4:	44 39 f6             	cmp    %r14d,%esi
  40ede7:	0f 83 83 01 00 00    	jae    40ef70 <deflate_stored+0x1e0>
    }

    /* Copy as much as possible from input to output: */
    for (;;) {
        /* Fill the window as much as possible: */
        if (s->lookahead <= 1) {
  40eded:	8b 83 a4 00 00 00    	mov    0xa4(%rbx),%eax
  40edf3:	83 f8 01             	cmp    $0x1,%eax
  40edf6:	0f 86 dc 00 00 00    	jbe    40eed8 <deflate_stored+0x148>

            if (s->lookahead == 0) break; /* flush the current block */
        }
        Assert(s->block_start >= 0L, "block gone");

        s->strstart += s->lookahead;
  40edfc:	03 83 9c 00 00 00    	add    0x9c(%rbx),%eax
        s->lookahead = 0;

        /* Emit a stored block if pending_buf will be full: */
        max_start = s->block_start + max_block_size;
  40ee02:	48 8b 8b 88 00 00 00 	mov    0x88(%rbx),%rcx
            if (s->lookahead == 0) break; /* flush the current block */
        }
        Assert(s->block_start >= 0L, "block gone");

        s->strstart += s->lookahead;
        s->lookahead = 0;
  40ee09:	c7 83 a4 00 00 00 00 	movl   $0x0,0xa4(%rbx)
  40ee10:	00 00 00 

        /* Emit a stored block if pending_buf will be full: */
        max_start = s->block_start + max_block_size;
  40ee13:	48 8d 54 0d 00       	lea    0x0(%rbp,%rcx,1),%rdx
        if (s->strstart == 0 || (ulg)s->strstart >= max_start) {
  40ee18:	85 c0                	test   %eax,%eax

            if (s->lookahead == 0) break; /* flush the current block */
        }
        Assert(s->block_start >= 0L, "block gone");

        s->strstart += s->lookahead;
  40ee1a:	89 83 9c 00 00 00    	mov    %eax,0x9c(%rbx)
        s->lookahead = 0;

        /* Emit a stored block if pending_buf will be full: */
        max_start = s->block_start + max_block_size;
        if (s->strstart == 0 || (ulg)s->strstart >= max_start) {
  40ee20:	74 07                	je     40ee29 <deflate_stored+0x99>
  40ee22:	89 c6                	mov    %eax,%esi
  40ee24:	48 39 f2             	cmp    %rsi,%rdx
  40ee27:	77 ad                	ja     40edd6 <deflate_stored+0x46>
            /* strstart == 0 is possible when wraparound on 16-bit machine */
            s->lookahead = (uInt)(s->strstart - max_start);
  40ee29:	29 d0                	sub    %edx,%eax
            s->strstart = (uInt)max_start;
  40ee2b:	89 93 9c 00 00 00    	mov    %edx,0x9c(%rbx)
  40ee31:	89 d2                	mov    %edx,%edx
            FLUSH_BLOCK(s, 0);
  40ee33:	48 29 ca             	sub    %rcx,%rdx
  40ee36:	31 f6                	xor    %esi,%esi
  40ee38:	48 85 c9             	test   %rcx,%rcx

        /* Emit a stored block if pending_buf will be full: */
        max_start = s->block_start + max_block_size;
        if (s->strstart == 0 || (ulg)s->strstart >= max_start) {
            /* strstart == 0 is possible when wraparound on 16-bit machine */
            s->lookahead = (uInt)(s->strstart - max_start);
  40ee3b:	89 83 a4 00 00 00    	mov    %eax,0xa4(%rbx)
            s->strstart = (uInt)max_start;
            FLUSH_BLOCK(s, 0);
  40ee41:	78 06                	js     40ee49 <deflate_stored+0xb9>
  40ee43:	89 ce                	mov    %ecx,%esi
  40ee45:	48 03 73 50          	add    0x50(%rbx),%rsi
  40ee49:	31 c9                	xor    %ecx,%ecx
  40ee4b:	48 89 df             	mov    %rbx,%rdi
  40ee4e:	e8 6d 5d 00 00       	callq  414bc0 <_tr_flush_block>
  40ee53:	4c 8b 33             	mov    (%rbx),%r14
  40ee56:	8b 8b 9c 00 00 00    	mov    0x9c(%rbx),%ecx
 * (See also read_buf()).
 */
local void flush_pending(strm)
    z_streamp strm;
{
    unsigned len = strm->state->pending;
  40ee5c:	4d 8b 46 38          	mov    0x38(%r14),%r8

    if (len > strm->avail_out) len = strm->avail_out;
  40ee60:	45 8b 5e 20          	mov    0x20(%r14),%r11d
        max_start = s->block_start + max_block_size;
        if (s->strstart == 0 || (ulg)s->strstart >= max_start) {
            /* strstart == 0 is possible when wraparound on 16-bit machine */
            s->lookahead = (uInt)(s->strstart - max_start);
            s->strstart = (uInt)max_start;
            FLUSH_BLOCK(s, 0);
  40ee64:	48 89 8b 88 00 00 00 	mov    %rcx,0x88(%rbx)
 * (See also read_buf()).
 */
local void flush_pending(strm)
    z_streamp strm;
{
    unsigned len = strm->state->pending;
  40ee6b:	45 8b 68 28          	mov    0x28(%r8),%r13d
  40ee6f:	45 39 eb             	cmp    %r13d,%r11d
  40ee72:	45 0f 46 eb          	cmovbe %r11d,%r13d

    if (len > strm->avail_out) len = strm->avail_out;
    if (len == 0) return;
  40ee76:	45 85 ed             	test   %r13d,%r13d
  40ee79:	0f 84 41 ff ff ff    	je     40edc0 <deflate_stored+0x30>
  40ee7f:	49 8b 7e 18          	mov    0x18(%r14),%rdi
  40ee83:	49 8b 70 20          	mov    0x20(%r8),%rsi

    zmemcpy(strm->next_out, strm->state->pending_out, len);
  40ee87:	45 89 ef             	mov    %r13d,%r15d
  40ee8a:	4c 89 fa             	mov    %r15,%rdx
  40ee8d:	e8 5e 81 ff ff       	callq  406ff0 <memcpy@plt>
    strm->next_out  += len;
    strm->state->pending_out  += len;
  40ee92:	49 8b 7e 38          	mov    0x38(%r14),%rdi

    if (len > strm->avail_out) len = strm->avail_out;
    if (len == 0) return;

    zmemcpy(strm->next_out, strm->state->pending_out, len);
    strm->next_out  += len;
  40ee96:	4d 01 7e 18          	add    %r15,0x18(%r14)
    strm->state->pending_out  += len;
  40ee9a:	4c 01 7f 20          	add    %r15,0x20(%rdi)
    strm->total_out += len;
  40ee9e:	4d 01 7e 28          	add    %r15,0x28(%r14)
    strm->avail_out  -= len;
  40eea2:	45 29 6e 20          	sub    %r13d,0x20(%r14)
    strm->state->pending -= len;
    if (strm->state->pending == 0) {
  40eea6:	44 29 6f 28          	sub    %r13d,0x28(%rdi)
  40eeaa:	75 08                	jne    40eeb4 <deflate_stored+0x124>
        strm->state->pending_out = strm->state->pending_buf;
  40eeac:	4c 8b 4f 10          	mov    0x10(%rdi),%r9
  40eeb0:	4c 89 4f 20          	mov    %r9,0x20(%rdi)
  40eeb4:	4c 8b 13             	mov    (%rbx),%r10
  40eeb7:	45 8b 5a 20          	mov    0x20(%r10),%r11d
        max_start = s->block_start + max_block_size;
        if (s->strstart == 0 || (ulg)s->strstart >= max_start) {
            /* strstart == 0 is possible when wraparound on 16-bit machine */
            s->lookahead = (uInt)(s->strstart - max_start);
            s->strstart = (uInt)max_start;
            FLUSH_BLOCK(s, 0);
  40eebb:	45 85 db             	test   %r11d,%r11d
  40eebe:	0f 85 05 ff ff ff    	jne    40edc9 <deflate_stored+0x39>

            Assert(s->strstart < s->w_size+MAX_DIST(s) ||
                   s->block_start >= (long)s->w_size, "slide too late");

            fill_window(s);
            if (s->lookahead == 0 && flush == Z_NO_FLUSH) return need_more;
  40eec4:	31 c0                	xor    %eax,%eax
            FLUSH_BLOCK(s, 0);
        }
    }
    FLUSH_BLOCK(s, flush == Z_FINISH);
    return flush == Z_FINISH ? finish_done : block_done;
}
  40eec6:	48 83 c4 08          	add    $0x8,%rsp
  40eeca:	5b                   	pop    %rbx
  40eecb:	5d                   	pop    %rbp
  40eecc:	41 5c                	pop    %r12
  40eece:	41 5d                	pop    %r13
  40eed0:	41 5e                	pop    %r14
  40eed2:	41 5f                	pop    %r15
  40eed4:	c3                   	retq   
  40eed5:	0f 1f 00             	nopl   (%rax)
        if (s->lookahead <= 1) {

            Assert(s->strstart < s->w_size+MAX_DIST(s) ||
                   s->block_start >= (long)s->w_size, "slide too late");

            fill_window(s);
  40eed8:	48 89 df             	mov    %rbx,%rdi
  40eedb:	e8 90 f8 ff ff       	callq  40e770 <fill_window>
            if (s->lookahead == 0 && flush == Z_NO_FLUSH) return need_more;
  40eee0:	8b 83 a4 00 00 00    	mov    0xa4(%rbx),%eax
  40eee6:	85 c0                	test   %eax,%eax
  40eee8:	0f 85 0e ff ff ff    	jne    40edfc <deflate_stored+0x6c>
  40eeee:	45 85 e4             	test   %r12d,%r12d
  40eef1:	74 d1                	je     40eec4 <deflate_stored+0x134>
         */
        if (s->strstart - (uInt)s->block_start >= MAX_DIST(s)) {
            FLUSH_BLOCK(s, 0);
        }
    }
    FLUSH_BLOCK(s, flush == Z_FINISH);
  40eef3:	8b 93 9c 00 00 00    	mov    0x9c(%rbx),%edx
  40eef9:	41 83 fc 04          	cmp    $0x4,%r12d
  40eefd:	4c 8b a3 88 00 00 00 	mov    0x88(%rbx),%r12
  40ef04:	40 0f 94 c5          	sete   %bpl
  40ef08:	31 f6                	xor    %esi,%esi
  40ef0a:	40 0f b6 cd          	movzbl %bpl,%ecx
  40ef0e:	4c 29 e2             	sub    %r12,%rdx
  40ef11:	4d 85 e4             	test   %r12,%r12
  40ef14:	78 07                	js     40ef1d <deflate_stored+0x18d>
  40ef16:	44 89 e6             	mov    %r12d,%esi
  40ef19:	48 03 73 50          	add    0x50(%rbx),%rsi
  40ef1d:	48 89 df             	mov    %rbx,%rdi
  40ef20:	e8 9b 5c 00 00       	callq  414bc0 <_tr_flush_block>
  40ef25:	4c 8b 3b             	mov    (%rbx),%r15
  40ef28:	8b 8b 9c 00 00 00    	mov    0x9c(%rbx),%ecx
 * (See also read_buf()).
 */
local void flush_pending(strm)
    z_streamp strm;
{
    unsigned len = strm->state->pending;
  40ef2e:	49 8b 57 38          	mov    0x38(%r15),%rdx

    if (len > strm->avail_out) len = strm->avail_out;
  40ef32:	41 8b 7f 20          	mov    0x20(%r15),%edi
         */
        if (s->strstart - (uInt)s->block_start >= MAX_DIST(s)) {
            FLUSH_BLOCK(s, 0);
        }
    }
    FLUSH_BLOCK(s, flush == Z_FINISH);
  40ef36:	48 89 8b 88 00 00 00 	mov    %rcx,0x88(%rbx)
 * (See also read_buf()).
 */
local void flush_pending(strm)
    z_streamp strm;
{
    unsigned len = strm->state->pending;
  40ef3d:	44 8b 6a 28          	mov    0x28(%rdx),%r13d
  40ef41:	44 39 ef             	cmp    %r13d,%edi
  40ef44:	44 0f 46 ef          	cmovbe %edi,%r13d

    if (len > strm->avail_out) len = strm->avail_out;
    if (len == 0) return;
  40ef48:	45 85 ed             	test   %r13d,%r13d
  40ef4b:	0f 85 ce 00 00 00    	jne    40f01f <deflate_stored+0x28f>
         */
        if (s->strstart - (uInt)s->block_start >= MAX_DIST(s)) {
            FLUSH_BLOCK(s, 0);
        }
    }
    FLUSH_BLOCK(s, flush == Z_FINISH);
  40ef51:	85 ff                	test   %edi,%edi
  40ef53:	0f 85 b5 00 00 00    	jne    40f00e <deflate_stored+0x27e>
  40ef59:	89 e8                	mov    %ebp,%eax
  40ef5b:	c1 e0 1f             	shl    $0x1f,%eax
  40ef5e:	c1 f8 1f             	sar    $0x1f,%eax
  40ef61:	83 e0 02             	and    $0x2,%eax
  40ef64:	e9 5d ff ff ff       	jmpq   40eec6 <deflate_stored+0x136>
  40ef69:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        }
        /* Flush if we may have to slide, otherwise block_start may become
         * negative and the data will be gone:
         */
        if (s->strstart - (uInt)s->block_start >= MAX_DIST(s)) {
            FLUSH_BLOCK(s, 0);
  40ef70:	89 c2                	mov    %eax,%edx
  40ef72:	31 f6                	xor    %esi,%esi
  40ef74:	48 29 ca             	sub    %rcx,%rdx
  40ef77:	48 85 c9             	test   %rcx,%rcx
  40ef7a:	78 0a                	js     40ef86 <deflate_stored+0x1f6>
  40ef7c:	41 89 c8             	mov    %ecx,%r8d
  40ef7f:	4c 03 43 50          	add    0x50(%rbx),%r8
  40ef83:	4c 89 c6             	mov    %r8,%rsi
  40ef86:	31 c9                	xor    %ecx,%ecx
  40ef88:	48 89 df             	mov    %rbx,%rdi
  40ef8b:	e8 30 5c 00 00       	callq  414bc0 <_tr_flush_block>
  40ef90:	4c 8b 33             	mov    (%rbx),%r14
  40ef93:	44 8b ab 9c 00 00 00 	mov    0x9c(%rbx),%r13d
 * (See also read_buf()).
 */
local void flush_pending(strm)
    z_streamp strm;
{
    unsigned len = strm->state->pending;
  40ef9a:	4d 8b 4e 38          	mov    0x38(%r14),%r9

    if (len > strm->avail_out) len = strm->avail_out;
  40ef9e:	41 8b 46 20          	mov    0x20(%r14),%eax
        }
        /* Flush if we may have to slide, otherwise block_start may become
         * negative and the data will be gone:
         */
        if (s->strstart - (uInt)s->block_start >= MAX_DIST(s)) {
            FLUSH_BLOCK(s, 0);
  40efa2:	4c 89 ab 88 00 00 00 	mov    %r13,0x88(%rbx)
 * (See also read_buf()).
 */
local void flush_pending(strm)
    z_streamp strm;
{
    unsigned len = strm->state->pending;
  40efa9:	45 8b 69 28          	mov    0x28(%r9),%r13d
  40efad:	44 39 e8             	cmp    %r13d,%eax
  40efb0:	44 0f 46 e8          	cmovbe %eax,%r13d

    if (len > strm->avail_out) len = strm->avail_out;
    if (len == 0) return;
  40efb4:	45 85 ed             	test   %r13d,%r13d
  40efb7:	75 17                	jne    40efd0 <deflate_stored+0x240>
        }
        /* Flush if we may have to slide, otherwise block_start may become
         * negative and the data will be gone:
         */
        if (s->strstart - (uInt)s->block_start >= MAX_DIST(s)) {
            FLUSH_BLOCK(s, 0);
  40efb9:	85 c0                	test   %eax,%eax
  40efbb:	0f 85 2c fe ff ff    	jne    40eded <deflate_stored+0x5d>
  40efc1:	e9 fe fe ff ff       	jmpq   40eec4 <deflate_stored+0x134>
  40efc6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40efcd:	00 00 00 
  40efd0:	49 8b 7e 18          	mov    0x18(%r14),%rdi
  40efd4:	49 8b 71 20          	mov    0x20(%r9),%rsi
    unsigned len = strm->state->pending;

    if (len > strm->avail_out) len = strm->avail_out;
    if (len == 0) return;

    zmemcpy(strm->next_out, strm->state->pending_out, len);
  40efd8:	45 89 ef             	mov    %r13d,%r15d
  40efdb:	4c 89 fa             	mov    %r15,%rdx
  40efde:	e8 0d 80 ff ff       	callq  406ff0 <memcpy@plt>
    strm->next_out  += len;
    strm->state->pending_out  += len;
  40efe3:	49 8b 7e 38          	mov    0x38(%r14),%rdi

    if (len > strm->avail_out) len = strm->avail_out;
    if (len == 0) return;

    zmemcpy(strm->next_out, strm->state->pending_out, len);
    strm->next_out  += len;
  40efe7:	4d 01 7e 18          	add    %r15,0x18(%r14)
    strm->state->pending_out  += len;
  40efeb:	4c 01 7f 20          	add    %r15,0x20(%rdi)
    strm->total_out += len;
  40efef:	4d 01 7e 28          	add    %r15,0x28(%r14)
    strm->avail_out  -= len;
  40eff3:	45 29 6e 20          	sub    %r13d,0x20(%r14)
    strm->state->pending -= len;
    if (strm->state->pending == 0) {
  40eff7:	44 29 6f 28          	sub    %r13d,0x28(%rdi)
  40effb:	75 08                	jne    40f005 <deflate_stored+0x275>
        strm->state->pending_out = strm->state->pending_buf;
  40effd:	4c 8b 57 10          	mov    0x10(%rdi),%r10
  40f001:	4c 89 57 20          	mov    %r10,0x20(%rdi)
  40f005:	4c 8b 1b             	mov    (%rbx),%r11
  40f008:	41 8b 43 20          	mov    0x20(%r11),%eax
  40f00c:	eb ab                	jmp    40efb9 <deflate_stored+0x229>
        if (s->strstart - (uInt)s->block_start >= MAX_DIST(s)) {
            FLUSH_BLOCK(s, 0);
        }
    }
    FLUSH_BLOCK(s, flush == Z_FINISH);
    return flush == Z_FINISH ? finish_done : block_done;
  40f00e:	40 80 fd 01          	cmp    $0x1,%bpl
  40f012:	19 c0                	sbb    %eax,%eax
  40f014:	83 e0 fe             	and    $0xfffffffe,%eax
  40f017:	83 c0 03             	add    $0x3,%eax
  40f01a:	e9 a7 fe ff ff       	jmpq   40eec6 <deflate_stored+0x136>
  40f01f:	48 8b 72 20          	mov    0x20(%rdx),%rsi
  40f023:	49 8b 7f 18          	mov    0x18(%r15),%rdi
    unsigned len = strm->state->pending;

    if (len > strm->avail_out) len = strm->avail_out;
    if (len == 0) return;

    zmemcpy(strm->next_out, strm->state->pending_out, len);
  40f027:	45 89 ee             	mov    %r13d,%r14d
  40f02a:	4c 89 f2             	mov    %r14,%rdx
  40f02d:	e8 be 7f ff ff       	callq  406ff0 <memcpy@plt>
    strm->next_out  += len;
    strm->state->pending_out  += len;
  40f032:	4d 8b 47 38          	mov    0x38(%r15),%r8

    if (len > strm->avail_out) len = strm->avail_out;
    if (len == 0) return;

    zmemcpy(strm->next_out, strm->state->pending_out, len);
    strm->next_out  += len;
  40f036:	4d 01 77 18          	add    %r14,0x18(%r15)
    strm->state->pending_out  += len;
  40f03a:	4d 01 70 20          	add    %r14,0x20(%r8)
    strm->total_out += len;
  40f03e:	4d 01 77 28          	add    %r14,0x28(%r15)
    strm->avail_out  -= len;
  40f042:	45 29 6f 20          	sub    %r13d,0x20(%r15)
    strm->state->pending -= len;
    if (strm->state->pending == 0) {
  40f046:	45 29 68 28          	sub    %r13d,0x28(%r8)
  40f04a:	75 08                	jne    40f054 <deflate_stored+0x2c4>
        strm->state->pending_out = strm->state->pending_buf;
  40f04c:	4d 8b 48 10          	mov    0x10(%r8),%r9
  40f050:	4d 89 48 20          	mov    %r9,0x20(%r8)
  40f054:	48 8b 1b             	mov    (%rbx),%rbx
  40f057:	8b 7b 20             	mov    0x20(%rbx),%edi
  40f05a:	e9 f2 fe ff ff       	jmpq   40ef51 <deflate_stored+0x1c1>
  40f05f:	90                   	nop

000000000040f060 <deflate_fast>:
 * matches. It is used only for the fast compression options.
 */
local block_state deflate_fast(s, flush)
    deflate_state *s;
    int flush;
{
  40f060:	41 57                	push   %r15
  40f062:	41 56                	push   %r14
  40f064:	49 89 ff             	mov    %rdi,%r15
  40f067:	41 55                	push   %r13
  40f069:	41 54                	push   %r12
  40f06b:	55                   	push   %rbp
  40f06c:	53                   	push   %rbx
    IPos hash_head = NIL; /* head of the hash chain */
  40f06d:	31 db                	xor    %ebx,%ebx
 * matches. It is used only for the fast compression options.
 */
local block_state deflate_fast(s, flush)
    deflate_state *s;
    int flush;
{
  40f06f:	48 83 ec 28          	sub    $0x28,%rsp
  40f073:	8b af a4 00 00 00    	mov    0xa4(%rdi),%ebp
  40f079:	89 74 24 1c          	mov    %esi,0x1c(%rsp)
  40f07d:	0f 1f 00             	nopl   (%rax)
        /* Make sure that we always have enough lookahead, except
         * at the end of the input file. We need MAX_MATCH bytes
         * for the next match, plus MIN_MATCH bytes to insert the
         * string following the next match.
         */
        if (s->lookahead < MIN_LOOKAHEAD) {
  40f080:	81 fd 05 01 00 00    	cmp    $0x105,%ebp
  40f086:	0f 86 67 03 00 00    	jbe    40f3f3 <deflate_fast+0x393>

        /* Insert the string window[strstart .. strstart+2] in the
         * dictionary, and set hash_head to the head of the hash chain:
         */
        if (s->lookahead >= MIN_MATCH) {
            INSERT_STRING(s, s->strstart, hash_head);
  40f08c:	41 8b 97 9c 00 00 00 	mov    0x9c(%r15),%edx
  40f093:	49 8b 4f 50          	mov    0x50(%r15),%rcx
  40f097:	41 8b 7f 70          	mov    0x70(%r15),%edi
  40f09b:	49 8b 6f 68          	mov    0x68(%r15),%rbp
  40f09f:	4d 8b 5f 60          	mov    0x60(%r15),%r11
  40f0a3:	8d 5a 02             	lea    0x2(%rdx),%ebx
  40f0a6:	41 89 d2             	mov    %edx,%r10d
  40f0a9:	45 23 57 4c          	and    0x4c(%r15),%r10d
  40f0ad:	0f b6 34 19          	movzbl (%rcx,%rbx,1),%esi
  40f0b1:	41 8b 8f 80 00 00 00 	mov    0x80(%r15),%ecx
  40f0b8:	d3 e7                	shl    %cl,%edi
  40f0ba:	31 f7                	xor    %esi,%edi
  40f0bc:	41 23 7f 7c          	and    0x7c(%r15),%edi
  40f0c0:	4c 8d 4c 7d 00       	lea    0x0(%rbp,%rdi,2),%r9
  40f0c5:	41 89 7f 70          	mov    %edi,0x70(%r15)
  40f0c9:	41 0f b7 19          	movzwl (%r9),%ebx
  40f0cd:	66 43 89 1c 53       	mov    %bx,(%r11,%r10,2)
  40f0d2:	66 41 89 11          	mov    %dx,(%r9)
        }

        /* Find the longest match, discarding those <= prev_length.
         * At this point we have always match_length < MIN_MATCH
         */
        if (hash_head != NIL && s->strstart - hash_head <= MAX_DIST(s)) {
  40f0d6:	85 db                	test   %ebx,%ebx
  40f0d8:	74 3e                	je     40f118 <deflate_fast+0xb8>
  40f0da:	45 8b 6f 44          	mov    0x44(%r15),%r13d
  40f0de:	41 89 d4             	mov    %edx,%r12d
  40f0e1:	41 29 dc             	sub    %ebx,%r12d
  40f0e4:	41 81 ed 06 01 00 00 	sub    $0x106,%r13d
  40f0eb:	45 39 ec             	cmp    %r13d,%r12d
  40f0ee:	77 28                	ja     40f118 <deflate_fast+0xb8>
            if ((s->strategy != Z_HUFFMAN_ONLY && s->strategy != Z_RLE) ||
                (s->strategy == Z_RLE && s->strstart - hash_head == 1)) {
                s->match_length = longest_match_fast (s, hash_head);
            }
#else
            if (s->strategy != Z_HUFFMAN_ONLY && s->strategy != Z_RLE) {
  40f0f0:	45 8b b7 b8 00 00 00 	mov    0xb8(%r15),%r14d
  40f0f7:	41 8d 46 fe          	lea    -0x2(%r14),%eax
  40f0fb:	83 f8 01             	cmp    $0x1,%eax
  40f0fe:	0f 87 8c 04 00 00    	ja     40f590 <deflate_fast+0x530>
                s->match_length = longest_match (s, hash_head);
            } else if (s->strategy == Z_RLE && s->strstart - hash_head == 1) {
  40f104:	41 83 fc 01          	cmp    $0x1,%r12d
  40f108:	75 0e                	jne    40f118 <deflate_fast+0xb8>
  40f10a:	41 83 fe 03          	cmp    $0x3,%r14d
  40f10e:	0f 84 6f 05 00 00    	je     40f683 <deflate_fast+0x623>
  40f114:	0f 1f 40 00          	nopl   0x0(%rax)
  40f118:	41 8b 87 90 00 00 00 	mov    0x90(%r15),%eax
                s->match_length = longest_match_fast (s, hash_head);
            }
#endif
            /* longest_match() or longest_match_fast() sets match_start */
        }
        if (s->match_length >= MIN_MATCH) {
  40f11f:	83 f8 02             	cmp    $0x2,%eax
  40f122:	0f 86 18 03 00 00    	jbe    40f440 <deflate_fast+0x3e0>
            check_match(s, s->strstart, s->match_start, s->match_length);

            _tr_tally_dist(s, s->strstart - s->match_start,
  40f128:	45 8b b7 fc 16 00 00 	mov    0x16fc(%r15),%r14d
  40f12f:	66 41 2b 97 a0 00 00 	sub    0xa0(%r15),%dx
  40f136:	00 
  40f137:	83 e8 03             	sub    $0x3,%eax
  40f13a:	49 8b af 00 17 00 00 	mov    0x1700(%r15),%rbp
  40f141:	49 8b 8f f0 16 00 00 	mov    0x16f0(%r15),%rcx
  40f148:	4d 89 f0             	mov    %r14,%r8
  40f14b:	66 42 89 54 75 00    	mov    %dx,0x0(%rbp,%r14,2)
  40f151:	83 ea 01             	sub    $0x1,%edx
  40f154:	41 83 c0 01          	add    $0x1,%r8d
  40f158:	45 89 87 fc 16 00 00 	mov    %r8d,0x16fc(%r15)
  40f15f:	42 88 04 31          	mov    %al,(%rcx,%r14,1)
  40f163:	0f b6 c0             	movzbl %al,%eax
  40f166:	0f b6 b0 00 88 43 00 	movzbl 0x438800(%rax),%esi
  40f16d:	66 41 83 84 b7 c8 04 	addw   $0x1,0x4c8(%r15,%rsi,4)
  40f174:	00 00 01 
  40f177:	66 81 fa ff 00       	cmp    $0xff,%dx
  40f17c:	0f 87 96 03 00 00    	ja     40f518 <deflate_fast+0x4b8>
  40f182:	44 0f b7 d2          	movzwl %dx,%r10d
  40f186:	41 0f b6 ba 00 89 43 	movzbl 0x438900(%r10),%edi
  40f18d:	00 
  40f18e:	66 41 83 84 bf b8 09 	addw   $0x1,0x9b8(%r15,%rdi,4)
  40f195:	00 00 01 
  40f198:	45 31 c9             	xor    %r9d,%r9d
  40f19b:	45 8b 9f f8 16 00 00 	mov    0x16f8(%r15),%r11d
                           s->match_length - MIN_MATCH, bflush);

            s->lookahead -= s->match_length;
  40f1a2:	41 8b af a4 00 00 00 	mov    0xa4(%r15),%ebp
  40f1a9:	41 8b 97 90 00 00 00 	mov    0x90(%r15),%edx
            /* longest_match() or longest_match_fast() sets match_start */
        }
        if (s->match_length >= MIN_MATCH) {
            check_match(s, s->strstart, s->match_start, s->match_length);

            _tr_tally_dist(s, s->strstart - s->match_start,
  40f1b0:	41 83 eb 01          	sub    $0x1,%r11d
  40f1b4:	45 39 9f fc 16 00 00 	cmp    %r11d,0x16fc(%r15)
  40f1bb:	41 0f 94 c1          	sete   %r9b
                           s->match_length - MIN_MATCH, bflush);

            s->lookahead -= s->match_length;
  40f1bf:	29 d5                	sub    %edx,%ebp

            /* Insert new strings in the hash table only if the match length
             * is not too large. This saves time but degrades compression.
             */
#ifndef FASTEST
            if (s->match_length <= s->max_insert_length &&
  40f1c1:	83 fd 02             	cmp    $0x2,%ebp
            check_match(s, s->strstart, s->match_start, s->match_length);

            _tr_tally_dist(s, s->strstart - s->match_start,
                           s->match_length - MIN_MATCH, bflush);

            s->lookahead -= s->match_length;
  40f1c4:	41 89 af a4 00 00 00 	mov    %ebp,0xa4(%r15)

            /* Insert new strings in the hash table only if the match length
             * is not too large. This saves time but degrades compression.
             */
#ifndef FASTEST
            if (s->match_length <= s->max_insert_length &&
  40f1cb:	0f 86 f7 02 00 00    	jbe    40f4c8 <deflate_fast+0x468>
  40f1d1:	41 3b 97 b0 00 00 00 	cmp    0xb0(%r15),%edx
  40f1d8:	0f 87 ea 02 00 00    	ja     40f4c8 <deflate_fast+0x468>
  40f1de:	45 8b 87 9c 00 00 00 	mov    0x9c(%r15),%r8d
  40f1e5:	4d 8b 6f 50          	mov    0x50(%r15),%r13
                s->lookahead >= MIN_MATCH) {
                s->match_length--; /* string at strstart already in table */
  40f1e9:	8d 5a ff             	lea    -0x1(%rdx),%ebx
                do {
                    s->strstart++;
                    INSERT_STRING(s, s->strstart, hash_head);
  40f1ec:	41 8b 7f 70          	mov    0x70(%r15),%edi
  40f1f0:	41 8b 8f 80 00 00 00 	mov    0x80(%r15),%ecx
  40f1f7:	41 89 d2             	mov    %edx,%r10d
             * is not too large. This saves time but degrades compression.
             */
#ifndef FASTEST
            if (s->match_length <= s->max_insert_length &&
                s->lookahead >= MIN_MATCH) {
                s->match_length--; /* string at strstart already in table */
  40f1fa:	41 89 9f 90 00 00 00 	mov    %ebx,0x90(%r15)
  40f201:	41 8b 5f 7c          	mov    0x7c(%r15),%ebx
  40f205:	41 83 e2 01          	and    $0x1,%r10d
  40f209:	41 8d 70 01          	lea    0x1(%r8),%esi
                do {
                    s->strstart++;
                    INSERT_STRING(s, s->strstart, hash_head);
  40f20d:	44 89 44 24 0c       	mov    %r8d,0xc(%rsp)
  40f212:	41 83 c0 03          	add    $0x3,%r8d
  40f216:	d3 e7                	shl    %cl,%edi
  40f218:	4d 8b 67 68          	mov    0x68(%r15),%r12
  40f21c:	45 8b 77 4c          	mov    0x4c(%r15),%r14d
#ifndef FASTEST
            if (s->match_length <= s->max_insert_length &&
                s->lookahead >= MIN_MATCH) {
                s->match_length--; /* string at strstart already in table */
                do {
                    s->strstart++;
  40f220:	41 89 b7 9c 00 00 00 	mov    %esi,0x9c(%r15)
                    INSERT_STRING(s, s->strstart, hash_head);
  40f227:	43 0f b6 44 05 00    	movzbl 0x0(%r13,%r8,1),%eax
  40f22d:	89 5c 24 10          	mov    %ebx,0x10(%rsp)
  40f231:	4d 8b 5f 60          	mov    0x60(%r15),%r11
  40f235:	31 f8                	xor    %edi,%eax
  40f237:	21 d8                	and    %ebx,%eax
  40f239:	41 89 c0             	mov    %eax,%r8d
  40f23c:	41 89 47 70          	mov    %eax,0x70(%r15)
  40f240:	4b 8d 3c 44          	lea    (%r12,%r8,2),%rdi
  40f244:	41 89 f0             	mov    %esi,%r8d
  40f247:	45 21 f0             	and    %r14d,%r8d
  40f24a:	0f b7 1f             	movzwl (%rdi),%ebx
  40f24d:	66 43 89 1c 43       	mov    %bx,(%r11,%r8,2)
  40f252:	66 89 37             	mov    %si,(%rdi)
                    /* strstart never exceeds WSIZE-MAX_MATCH, so there are
                     * always MIN_MATCH bytes ahead.
                     */
                } while (--s->match_length != 0);
  40f255:	8d 7a fe             	lea    -0x2(%rdx),%edi
  40f258:	8b 74 24 0c          	mov    0xc(%rsp),%esi
  40f25c:	41 89 bf 90 00 00 00 	mov    %edi,0x90(%r15)
  40f263:	83 c6 02             	add    $0x2,%esi
  40f266:	85 ff                	test   %edi,%edi
  40f268:	0f 84 fe 00 00 00    	je     40f36c <deflate_fast+0x30c>
  40f26e:	45 85 d2             	test   %r10d,%r10d
  40f271:	74 52                	je     40f2c5 <deflate_fast+0x265>
            if (s->match_length <= s->max_insert_length &&
                s->lookahead >= MIN_MATCH) {
                s->match_length--; /* string at strstart already in table */
                do {
                    s->strstart++;
                    INSERT_STRING(s, s->strstart, hash_head);
  40f273:	44 8b 54 24 0c       	mov    0xc(%rsp),%r10d
#ifndef FASTEST
            if (s->match_length <= s->max_insert_length &&
                s->lookahead >= MIN_MATCH) {
                s->match_length--; /* string at strstart already in table */
                do {
                    s->strstart++;
  40f278:	41 89 b7 9c 00 00 00 	mov    %esi,0x9c(%r15)
                    INSERT_STRING(s, s->strstart, hash_head);
  40f27f:	d3 e0                	shl    %cl,%eax
  40f281:	41 8d 7a 04          	lea    0x4(%r10),%edi
  40f285:	45 0f b6 44 3d 00    	movzbl 0x0(%r13,%rdi,1),%r8d
  40f28b:	44 31 c0             	xor    %r8d,%eax
  40f28e:	23 44 24 10          	and    0x10(%rsp),%eax
  40f292:	41 89 f0             	mov    %esi,%r8d
  40f295:	45 21 f0             	and    %r14d,%r8d
  40f298:	89 c3                	mov    %eax,%ebx
  40f29a:	41 89 47 70          	mov    %eax,0x70(%r15)
  40f29e:	49 8d 3c 5c          	lea    (%r12,%rbx,2),%rdi
  40f2a2:	0f b7 1f             	movzwl (%rdi),%ebx
  40f2a5:	66 43 89 1c 43       	mov    %bx,(%r11,%r8,2)
  40f2aa:	66 89 37             	mov    %si,(%rdi)
                    /* strstart never exceeds WSIZE-MAX_MATCH, so there are
                     * always MIN_MATCH bytes ahead.
                     */
                } while (--s->match_length != 0);
  40f2ad:	8d 7a fd             	lea    -0x3(%rdx),%edi
  40f2b0:	44 89 d6             	mov    %r10d,%esi
  40f2b3:	83 c6 03             	add    $0x3,%esi
  40f2b6:	85 ff                	test   %edi,%edi
  40f2b8:	41 89 bf 90 00 00 00 	mov    %edi,0x90(%r15)
  40f2bf:	0f 84 a7 00 00 00    	je     40f36c <deflate_fast+0x30c>
  40f2c5:	44 89 4c 24 14       	mov    %r9d,0x14(%rsp)
  40f2ca:	44 8b 4c 24 10       	mov    0x10(%rsp),%r9d
  40f2cf:	89 54 24 18          	mov    %edx,0x18(%rsp)
            if (s->match_length <= s->max_insert_length &&
                s->lookahead >= MIN_MATCH) {
                s->match_length--; /* string at strstart already in table */
                do {
                    s->strstart++;
                    INSERT_STRING(s, s->strstart, hash_head);
  40f2d3:	8d 56 02             	lea    0x2(%rsi),%edx
#ifndef FASTEST
            if (s->match_length <= s->max_insert_length &&
                s->lookahead >= MIN_MATCH) {
                s->match_length--; /* string at strstart already in table */
                do {
                    s->strstart++;
  40f2d6:	41 89 b7 9c 00 00 00 	mov    %esi,0x9c(%r15)
                    INSERT_STRING(s, s->strstart, hash_head);
  40f2dd:	d3 e0                	shl    %cl,%eax
  40f2df:	89 c3                	mov    %eax,%ebx
  40f2e1:	45 0f b6 54 15 00    	movzbl 0x0(%r13,%rdx,1),%r10d
  40f2e7:	89 f2                	mov    %esi,%edx
  40f2e9:	44 21 f2             	and    %r14d,%edx
  40f2ec:	44 31 d3             	xor    %r10d,%ebx
  40f2ef:	44 21 cb             	and    %r9d,%ebx
  40f2f2:	89 d8                	mov    %ebx,%eax
  40f2f4:	41 89 5f 70          	mov    %ebx,0x70(%r15)
  40f2f8:	4d 8d 04 44          	lea    (%r12,%rax,2),%r8
                    /* strstart never exceeds WSIZE-MAX_MATCH, so there are
                     * always MIN_MATCH bytes ahead.
                     */
                } while (--s->match_length != 0);
  40f2fc:	8d 47 ff             	lea    -0x1(%rdi),%eax
  40f2ff:	83 ef 02             	sub    $0x2,%edi
            if (s->match_length <= s->max_insert_length &&
                s->lookahead >= MIN_MATCH) {
                s->match_length--; /* string at strstart already in table */
                do {
                    s->strstart++;
                    INSERT_STRING(s, s->strstart, hash_head);
  40f302:	45 0f b7 10          	movzwl (%r8),%r10d
  40f306:	66 45 89 14 53       	mov    %r10w,(%r11,%rdx,2)
  40f30b:	66 41 89 30          	mov    %si,(%r8)
  40f30f:	8d 56 01             	lea    0x1(%rsi),%edx
  40f312:	44 8d 46 03          	lea    0x3(%rsi),%r8d
                    /* strstart never exceeds WSIZE-MAX_MATCH, so there are
                     * always MIN_MATCH bytes ahead.
                     */
                } while (--s->match_length != 0);
  40f316:	41 89 87 90 00 00 00 	mov    %eax,0x90(%r15)
            if (s->match_length <= s->max_insert_length &&
                s->lookahead >= MIN_MATCH) {
                s->match_length--; /* string at strstart already in table */
                do {
                    s->strstart++;
                    INSERT_STRING(s, s->strstart, hash_head);
  40f31d:	89 d8                	mov    %ebx,%eax
#ifndef FASTEST
            if (s->match_length <= s->max_insert_length &&
                s->lookahead >= MIN_MATCH) {
                s->match_length--; /* string at strstart already in table */
                do {
                    s->strstart++;
  40f31f:	41 89 97 9c 00 00 00 	mov    %edx,0x9c(%r15)
                    INSERT_STRING(s, s->strstart, hash_head);
  40f326:	d3 e0                	shl    %cl,%eax
  40f328:	83 c6 02             	add    $0x2,%esi
  40f32b:	47 0f b6 54 05 00    	movzbl 0x0(%r13,%r8,1),%r10d
  40f331:	44 31 d0             	xor    %r10d,%eax
  40f334:	41 89 d2             	mov    %edx,%r10d
  40f337:	44 21 c8             	and    %r9d,%eax
  40f33a:	45 21 f2             	and    %r14d,%r10d
                    /* strstart never exceeds WSIZE-MAX_MATCH, so there are
                     * always MIN_MATCH bytes ahead.
                     */
                } while (--s->match_length != 0);
  40f33d:	85 ff                	test   %edi,%edi
            if (s->match_length <= s->max_insert_length &&
                s->lookahead >= MIN_MATCH) {
                s->match_length--; /* string at strstart already in table */
                do {
                    s->strstart++;
                    INSERT_STRING(s, s->strstart, hash_head);
  40f33f:	89 c3                	mov    %eax,%ebx
  40f341:	41 89 47 70          	mov    %eax,0x70(%r15)
  40f345:	4d 8d 04 5c          	lea    (%r12,%rbx,2),%r8
  40f349:	41 0f b7 18          	movzwl (%r8),%ebx
  40f34d:	66 43 89 1c 53       	mov    %bx,(%r11,%r10,2)
  40f352:	66 41 89 10          	mov    %dx,(%r8)
                    /* strstart never exceeds WSIZE-MAX_MATCH, so there are
                     * always MIN_MATCH bytes ahead.
                     */
                } while (--s->match_length != 0);
  40f356:	41 89 bf 90 00 00 00 	mov    %edi,0x90(%r15)
  40f35d:	0f 85 70 ff ff ff    	jne    40f2d3 <deflate_fast+0x273>
  40f363:	44 8b 4c 24 14       	mov    0x14(%rsp),%r9d
  40f368:	8b 54 24 18          	mov    0x18(%rsp),%edx
                s->strstart++;
  40f36c:	03 54 24 0c          	add    0xc(%rsp),%edx
  40f370:	41 89 97 9c 00 00 00 	mov    %edx,0x9c(%r15)
  40f377:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40f37e:	00 00 
            Tracevv((stderr,"%c", s->window[s->strstart]));
            _tr_tally_lit (s, s->window[s->strstart], bflush);
            s->lookahead--;
            s->strstart++;
        }
        if (bflush) FLUSH_BLOCK(s, 0);
  40f380:	45 85 c9             	test   %r9d,%r9d
  40f383:	0f 84 f7 fc ff ff    	je     40f080 <deflate_fast+0x20>
  40f389:	49 8b af 88 00 00 00 	mov    0x88(%r15),%rbp
  40f390:	31 f6                	xor    %esi,%esi
  40f392:	48 29 ea             	sub    %rbp,%rdx
  40f395:	48 85 ed             	test   %rbp,%rbp
  40f398:	78 06                	js     40f3a0 <deflate_fast+0x340>
  40f39a:	89 ee                	mov    %ebp,%esi
  40f39c:	49 03 77 50          	add    0x50(%r15),%rsi
  40f3a0:	31 c9                	xor    %ecx,%ecx
  40f3a2:	4c 89 ff             	mov    %r15,%rdi
  40f3a5:	e8 16 58 00 00       	callq  414bc0 <_tr_flush_block>
  40f3aa:	4d 8b 37             	mov    (%r15),%r14
  40f3ad:	45 8b 8f 9c 00 00 00 	mov    0x9c(%r15),%r9d
 * (See also read_buf()).
 */
local void flush_pending(strm)
    z_streamp strm;
{
    unsigned len = strm->state->pending;
  40f3b4:	49 8b 56 38          	mov    0x38(%r14),%rdx

    if (len > strm->avail_out) len = strm->avail_out;
  40f3b8:	45 8b 5e 20          	mov    0x20(%r14),%r11d
            Tracevv((stderr,"%c", s->window[s->strstart]));
            _tr_tally_lit (s, s->window[s->strstart], bflush);
            s->lookahead--;
            s->strstart++;
        }
        if (bflush) FLUSH_BLOCK(s, 0);
  40f3bc:	4d 89 8f 88 00 00 00 	mov    %r9,0x88(%r15)
 * (See also read_buf()).
 */
local void flush_pending(strm)
    z_streamp strm;
{
    unsigned len = strm->state->pending;
  40f3c3:	44 8b 62 28          	mov    0x28(%rdx),%r12d
  40f3c7:	45 39 e3             	cmp    %r12d,%r11d
  40f3ca:	45 0f 46 e3          	cmovbe %r11d,%r12d

    if (len > strm->avail_out) len = strm->avail_out;
    if (len == 0) return;
  40f3ce:	45 85 e4             	test   %r12d,%r12d
  40f3d1:	0f 85 61 01 00 00    	jne    40f538 <deflate_fast+0x4d8>
            Tracevv((stderr,"%c", s->window[s->strstart]));
            _tr_tally_lit (s, s->window[s->strstart], bflush);
            s->lookahead--;
            s->strstart++;
        }
        if (bflush) FLUSH_BLOCK(s, 0);
  40f3d7:	45 85 db             	test   %r11d,%r11d
  40f3da:	0f 84 9d 01 00 00    	je     40f57d <deflate_fast+0x51d>
  40f3e0:	41 8b af a4 00 00 00 	mov    0xa4(%r15),%ebp
        /* Make sure that we always have enough lookahead, except
         * at the end of the input file. We need MAX_MATCH bytes
         * for the next match, plus MIN_MATCH bytes to insert the
         * string following the next match.
         */
        if (s->lookahead < MIN_LOOKAHEAD) {
  40f3e7:	81 fd 05 01 00 00    	cmp    $0x105,%ebp
  40f3ed:	0f 87 99 fc ff ff    	ja     40f08c <deflate_fast+0x2c>
            fill_window(s);
  40f3f3:	4c 89 ff             	mov    %r15,%rdi
  40f3f6:	e8 75 f3 ff ff       	callq  40e770 <fill_window>
            if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {
  40f3fb:	41 8b 87 a4 00 00 00 	mov    0xa4(%r15),%eax
  40f402:	3d 05 01 00 00       	cmp    $0x105,%eax
  40f407:	0f 87 7f fc ff ff    	ja     40f08c <deflate_fast+0x2c>
  40f40d:	44 8b 44 24 1c       	mov    0x1c(%rsp),%r8d
  40f412:	45 85 c0             	test   %r8d,%r8d
  40f415:	0f 84 62 01 00 00    	je     40f57d <deflate_fast+0x51d>
                return need_more;
            }
            if (s->lookahead == 0) break; /* flush the current block */
  40f41b:	85 c0                	test   %eax,%eax
  40f41d:	0f 84 8a 01 00 00    	je     40f5ad <deflate_fast+0x54d>
        }

        /* Insert the string window[strstart .. strstart+2] in the
         * dictionary, and set hash_head to the head of the hash chain:
         */
        if (s->lookahead >= MIN_MATCH) {
  40f423:	83 f8 02             	cmp    $0x2,%eax
  40f426:	0f 87 60 fc ff ff    	ja     40f08c <deflate_fast+0x2c>
  40f42c:	41 8b 97 9c 00 00 00 	mov    0x9c(%r15),%edx
  40f433:	e9 9e fc ff ff       	jmpq   40f0d6 <deflate_fast+0x76>
  40f438:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40f43f:	00 
                 */
            }
        } else {
            /* No match, output a literal byte */
            Tracevv((stderr,"%c", s->window[s->strstart]));
            _tr_tally_lit (s, s->window[s->strstart], bflush);
  40f440:	4d 8b 47 50          	mov    0x50(%r15),%r8
  40f444:	41 8b 8f fc 16 00 00 	mov    0x16fc(%r15),%ecx
  40f44b:	31 ff                	xor    %edi,%edi
  40f44d:	49 8b b7 00 17 00 00 	mov    0x1700(%r15),%rsi
  40f454:	4d 8b 97 f0 16 00 00 	mov    0x16f0(%r15),%r10
  40f45b:	41 0f b6 2c 10       	movzbl (%r8,%rdx,1),%ebp
  40f460:	49 89 c9             	mov    %rcx,%r9
  40f463:	66 89 3c 4e          	mov    %di,(%rsi,%rcx,2)
  40f467:	41 83 c1 01          	add    $0x1,%r9d
  40f46b:	45 89 8f fc 16 00 00 	mov    %r9d,0x16fc(%r15)
  40f472:	45 31 c9             	xor    %r9d,%r9d
  40f475:	41 88 2c 0a          	mov    %bpl,(%r10,%rcx,1)
  40f479:	66 41 83 84 af c4 00 	addw   $0x1,0xc4(%r15,%rbp,4)
  40f480:	00 00 01 
  40f483:	45 8b 9f f8 16 00 00 	mov    0x16f8(%r15),%r11d
            s->lookahead--;
  40f48a:	45 8b a7 a4 00 00 00 	mov    0xa4(%r15),%r12d
            s->strstart++;
  40f491:	45 8b af 9c 00 00 00 	mov    0x9c(%r15),%r13d
                 */
            }
        } else {
            /* No match, output a literal byte */
            Tracevv((stderr,"%c", s->window[s->strstart]));
            _tr_tally_lit (s, s->window[s->strstart], bflush);
  40f498:	41 83 eb 01          	sub    $0x1,%r11d
  40f49c:	45 39 9f fc 16 00 00 	cmp    %r11d,0x16fc(%r15)
            s->lookahead--;
  40f4a3:	41 8d 6c 24 ff       	lea    -0x1(%r12),%ebp
            s->strstart++;
  40f4a8:	41 8d 55 01          	lea    0x1(%r13),%edx
            }
        } else {
            /* No match, output a literal byte */
            Tracevv((stderr,"%c", s->window[s->strstart]));
            _tr_tally_lit (s, s->window[s->strstart], bflush);
            s->lookahead--;
  40f4ac:	41 89 af a4 00 00 00 	mov    %ebp,0xa4(%r15)
            s->strstart++;
  40f4b3:	41 89 97 9c 00 00 00 	mov    %edx,0x9c(%r15)
                 */
            }
        } else {
            /* No match, output a literal byte */
            Tracevv((stderr,"%c", s->window[s->strstart]));
            _tr_tally_lit (s, s->window[s->strstart], bflush);
  40f4ba:	41 0f 94 c1          	sete   %r9b
  40f4be:	e9 bd fe ff ff       	jmpq   40f380 <deflate_fast+0x320>
  40f4c3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
                } while (--s->match_length != 0);
                s->strstart++;
            } else
#endif
            {
                s->strstart += s->match_length;
  40f4c8:	41 03 97 9c 00 00 00 	add    0x9c(%r15),%edx
                s->match_length = 0;
                s->ins_h = s->window[s->strstart];
  40f4cf:	4d 8b 5f 50          	mov    0x50(%r15),%r11
                s->strstart++;
            } else
#endif
            {
                s->strstart += s->match_length;
                s->match_length = 0;
  40f4d3:	41 c7 87 90 00 00 00 	movl   $0x0,0x90(%r15)
  40f4da:	00 00 00 00 
                s->ins_h = s->window[s->strstart];
                UPDATE_HASH(s, s->ins_h, s->window[s->strstart+1]);
  40f4de:	41 8b 8f 80 00 00 00 	mov    0x80(%r15),%ecx
            } else
#endif
            {
                s->strstart += s->match_length;
                s->match_length = 0;
                s->ins_h = s->window[s->strstart];
  40f4e5:	41 89 d6             	mov    %edx,%r14d
                } while (--s->match_length != 0);
                s->strstart++;
            } else
#endif
            {
                s->strstart += s->match_length;
  40f4e8:	41 89 97 9c 00 00 00 	mov    %edx,0x9c(%r15)
                s->match_length = 0;
                s->ins_h = s->window[s->strstart];
                UPDATE_HASH(s, s->ins_h, s->window[s->strstart+1]);
  40f4ef:	44 8d 6a 01          	lea    0x1(%rdx),%r13d
            } else
#endif
            {
                s->strstart += s->match_length;
                s->match_length = 0;
                s->ins_h = s->window[s->strstart];
  40f4f3:	47 0f b6 24 33       	movzbl (%r11,%r14,1),%r12d
  40f4f8:	45 89 67 70          	mov    %r12d,0x70(%r15)
                UPDATE_HASH(s, s->ins_h, s->window[s->strstart+1]);
  40f4fc:	43 0f b6 3c 2b       	movzbl (%r11,%r13,1),%edi
  40f501:	41 d3 e4             	shl    %cl,%r12d
  40f504:	41 31 fc             	xor    %edi,%r12d
  40f507:	45 23 67 7c          	and    0x7c(%r15),%r12d
  40f50b:	45 89 67 70          	mov    %r12d,0x70(%r15)
  40f50f:	e9 6c fe ff ff       	jmpq   40f380 <deflate_fast+0x320>
  40f514:	0f 1f 40 00          	nopl   0x0(%rax)
            /* longest_match() or longest_match_fast() sets match_start */
        }
        if (s->match_length >= MIN_MATCH) {
            check_match(s, s->strstart, s->match_start, s->match_length);

            _tr_tally_dist(s, s->strstart - s->match_start,
  40f518:	66 c1 ea 07          	shr    $0x7,%dx
  40f51c:	48 8d 92 00 01 00 00 	lea    0x100(%rdx),%rdx
  40f523:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
  40f529:	0f b6 ba 00 89 43 00 	movzbl 0x438900(%rdx),%edi
  40f530:	e9 59 fc ff ff       	jmpq   40f18e <deflate_fast+0x12e>
  40f535:	0f 1f 00             	nopl   (%rax)
  40f538:	48 8b 72 20          	mov    0x20(%rdx),%rsi
  40f53c:	49 8b 7e 18          	mov    0x18(%r14),%rdi
    unsigned len = strm->state->pending;

    if (len > strm->avail_out) len = strm->avail_out;
    if (len == 0) return;

    zmemcpy(strm->next_out, strm->state->pending_out, len);
  40f540:	45 89 e5             	mov    %r12d,%r13d
  40f543:	4c 89 ea             	mov    %r13,%rdx
  40f546:	e8 a5 7a ff ff       	callq  406ff0 <memcpy@plt>
    strm->next_out  += len;
    strm->state->pending_out  += len;
  40f54b:	49 8b 46 38          	mov    0x38(%r14),%rax

    if (len > strm->avail_out) len = strm->avail_out;
    if (len == 0) return;

    zmemcpy(strm->next_out, strm->state->pending_out, len);
    strm->next_out  += len;
  40f54f:	4d 01 6e 18          	add    %r13,0x18(%r14)
    strm->state->pending_out  += len;
  40f553:	4c 01 68 20          	add    %r13,0x20(%rax)
    strm->total_out += len;
  40f557:	4d 01 6e 28          	add    %r13,0x28(%r14)
    strm->avail_out  -= len;
  40f55b:	45 29 66 20          	sub    %r12d,0x20(%r14)
    strm->state->pending -= len;
    if (strm->state->pending == 0) {
  40f55f:	44 29 60 28          	sub    %r12d,0x28(%rax)
  40f563:	75 08                	jne    40f56d <deflate_fast+0x50d>
        strm->state->pending_out = strm->state->pending_buf;
  40f565:	4c 8b 40 10          	mov    0x10(%rax),%r8
  40f569:	4c 89 40 20          	mov    %r8,0x20(%rax)
  40f56d:	4d 8b 17             	mov    (%r15),%r10
  40f570:	45 8b 5a 20          	mov    0x20(%r10),%r11d
            Tracevv((stderr,"%c", s->window[s->strstart]));
            _tr_tally_lit (s, s->window[s->strstart], bflush);
            s->lookahead--;
            s->strstart++;
        }
        if (bflush) FLUSH_BLOCK(s, 0);
  40f574:	45 85 db             	test   %r11d,%r11d
  40f577:	0f 85 63 fe ff ff    	jne    40f3e0 <deflate_fast+0x380>
    }
    FLUSH_BLOCK(s, flush == Z_FINISH);
    return flush == Z_FINISH ? finish_done : block_done;
}
  40f57d:	48 83 c4 28          	add    $0x28,%rsp
         * string following the next match.
         */
        if (s->lookahead < MIN_LOOKAHEAD) {
            fill_window(s);
            if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {
                return need_more;
  40f581:	31 c0                	xor    %eax,%eax
        }
        if (bflush) FLUSH_BLOCK(s, 0);
    }
    FLUSH_BLOCK(s, flush == Z_FINISH);
    return flush == Z_FINISH ? finish_done : block_done;
}
  40f583:	5b                   	pop    %rbx
  40f584:	5d                   	pop    %rbp
  40f585:	41 5c                	pop    %r12
  40f587:	41 5d                	pop    %r13
  40f589:	41 5e                	pop    %r14
  40f58b:	41 5f                	pop    %r15
  40f58d:	c3                   	retq   
  40f58e:	66 90                	xchg   %ax,%ax
                (s->strategy == Z_RLE && s->strstart - hash_head == 1)) {
                s->match_length = longest_match_fast (s, hash_head);
            }
#else
            if (s->strategy != Z_HUFFMAN_ONLY && s->strategy != Z_RLE) {
                s->match_length = longest_match (s, hash_head);
  40f590:	89 de                	mov    %ebx,%esi
  40f592:	4c 89 ff             	mov    %r15,%rdi
  40f595:	e8 26 eb ff ff       	callq  40e0c0 <longest_match>
  40f59a:	41 8b 97 9c 00 00 00 	mov    0x9c(%r15),%edx
  40f5a1:	41 89 87 90 00 00 00 	mov    %eax,0x90(%r15)
  40f5a8:	e9 72 fb ff ff       	jmpq   40f11f <deflate_fast+0xbf>
            s->lookahead--;
            s->strstart++;
        }
        if (bflush) FLUSH_BLOCK(s, 0);
    }
    FLUSH_BLOCK(s, flush == Z_FINISH);
  40f5ad:	83 7c 24 1c 04       	cmpl   $0x4,0x1c(%rsp)
  40f5b2:	41 8b 97 9c 00 00 00 	mov    0x9c(%r15),%edx
  40f5b9:	49 8b bf 88 00 00 00 	mov    0x88(%r15),%rdi
  40f5c0:	0f 94 c3             	sete   %bl
  40f5c3:	48 29 fa             	sub    %rdi,%rdx
  40f5c6:	31 f6                	xor    %esi,%esi
  40f5c8:	48 85 ff             	test   %rdi,%rdi
  40f5cb:	0f b6 cb             	movzbl %bl,%ecx
  40f5ce:	78 06                	js     40f5d6 <deflate_fast+0x576>
  40f5d0:	89 fe                	mov    %edi,%esi
  40f5d2:	49 03 77 50          	add    0x50(%r15),%rsi
  40f5d6:	4c 89 ff             	mov    %r15,%rdi
  40f5d9:	e8 e2 55 00 00       	callq  414bc0 <_tr_flush_block>
  40f5de:	4d 8b 37             	mov    (%r15),%r14
  40f5e1:	41 8b 8f 9c 00 00 00 	mov    0x9c(%r15),%ecx
 * (See also read_buf()).
 */
local void flush_pending(strm)
    z_streamp strm;
{
    unsigned len = strm->state->pending;
  40f5e8:	4d 8b 4e 38          	mov    0x38(%r14),%r9

    if (len > strm->avail_out) len = strm->avail_out;
  40f5ec:	45 8b 46 20          	mov    0x20(%r14),%r8d
            s->lookahead--;
            s->strstart++;
        }
        if (bflush) FLUSH_BLOCK(s, 0);
    }
    FLUSH_BLOCK(s, flush == Z_FINISH);
  40f5f0:	49 89 8f 88 00 00 00 	mov    %rcx,0x88(%r15)
 * (See also read_buf()).
 */
local void flush_pending(strm)
    z_streamp strm;
{
    unsigned len = strm->state->pending;
  40f5f7:	45 8b 61 28          	mov    0x28(%r9),%r12d
  40f5fb:	45 39 e0             	cmp    %r12d,%r8d
  40f5fe:	45 0f 46 e0          	cmovbe %r8d,%r12d

    if (len > strm->avail_out) len = strm->avail_out;
    if (len == 0) return;
  40f602:	45 85 e4             	test   %r12d,%r12d
  40f605:	75 39                	jne    40f640 <deflate_fast+0x5e0>
            s->lookahead--;
            s->strstart++;
        }
        if (bflush) FLUSH_BLOCK(s, 0);
    }
    FLUSH_BLOCK(s, flush == Z_FINISH);
  40f607:	45 85 c0             	test   %r8d,%r8d
  40f60a:	75 1a                	jne    40f626 <deflate_fast+0x5c6>
  40f60c:	89 d8                	mov    %ebx,%eax
    return flush == Z_FINISH ? finish_done : block_done;
}
  40f60e:	48 83 c4 28          	add    $0x28,%rsp
            s->lookahead--;
            s->strstart++;
        }
        if (bflush) FLUSH_BLOCK(s, 0);
    }
    FLUSH_BLOCK(s, flush == Z_FINISH);
  40f612:	c1 e0 1f             	shl    $0x1f,%eax
  40f615:	c1 f8 1f             	sar    $0x1f,%eax
    return flush == Z_FINISH ? finish_done : block_done;
}
  40f618:	5b                   	pop    %rbx
            s->lookahead--;
            s->strstart++;
        }
        if (bflush) FLUSH_BLOCK(s, 0);
    }
    FLUSH_BLOCK(s, flush == Z_FINISH);
  40f619:	83 e0 02             	and    $0x2,%eax
    return flush == Z_FINISH ? finish_done : block_done;
}
  40f61c:	5d                   	pop    %rbp
  40f61d:	41 5c                	pop    %r12
  40f61f:	41 5d                	pop    %r13
  40f621:	41 5e                	pop    %r14
  40f623:	41 5f                	pop    %r15
  40f625:	c3                   	retq   
            s->strstart++;
        }
        if (bflush) FLUSH_BLOCK(s, 0);
    }
    FLUSH_BLOCK(s, flush == Z_FINISH);
    return flush == Z_FINISH ? finish_done : block_done;
  40f626:	80 fb 01             	cmp    $0x1,%bl
  40f629:	19 c0                	sbb    %eax,%eax
}
  40f62b:	48 83 c4 28          	add    $0x28,%rsp
            s->strstart++;
        }
        if (bflush) FLUSH_BLOCK(s, 0);
    }
    FLUSH_BLOCK(s, flush == Z_FINISH);
    return flush == Z_FINISH ? finish_done : block_done;
  40f62f:	83 e0 fe             	and    $0xfffffffe,%eax
}
  40f632:	5b                   	pop    %rbx
            s->strstart++;
        }
        if (bflush) FLUSH_BLOCK(s, 0);
    }
    FLUSH_BLOCK(s, flush == Z_FINISH);
    return flush == Z_FINISH ? finish_done : block_done;
  40f633:	83 c0 03             	add    $0x3,%eax
}
  40f636:	5d                   	pop    %rbp
  40f637:	41 5c                	pop    %r12
  40f639:	41 5d                	pop    %r13
  40f63b:	41 5e                	pop    %r14
  40f63d:	41 5f                	pop    %r15
  40f63f:	c3                   	retq   
  40f640:	49 8b 7e 18          	mov    0x18(%r14),%rdi
  40f644:	49 8b 71 20          	mov    0x20(%r9),%rsi
    unsigned len = strm->state->pending;

    if (len > strm->avail_out) len = strm->avail_out;
    if (len == 0) return;

    zmemcpy(strm->next_out, strm->state->pending_out, len);
  40f648:	45 89 e5             	mov    %r12d,%r13d
  40f64b:	4c 89 ea             	mov    %r13,%rdx
  40f64e:	e8 9d 79 ff ff       	callq  406ff0 <memcpy@plt>
    strm->next_out  += len;
    strm->state->pending_out  += len;
  40f653:	49 8b 46 38          	mov    0x38(%r14),%rax

    if (len > strm->avail_out) len = strm->avail_out;
    if (len == 0) return;

    zmemcpy(strm->next_out, strm->state->pending_out, len);
    strm->next_out  += len;
  40f657:	4d 01 6e 18          	add    %r13,0x18(%r14)
    strm->state->pending_out  += len;
  40f65b:	4c 01 68 20          	add    %r13,0x20(%rax)
    strm->total_out += len;
  40f65f:	4d 01 6e 28          	add    %r13,0x28(%r14)
    strm->avail_out  -= len;
  40f663:	45 29 66 20          	sub    %r12d,0x20(%r14)
    strm->state->pending -= len;
    if (strm->state->pending == 0) {
  40f667:	44 29 60 28          	sub    %r12d,0x28(%rax)
  40f66b:	75 08                	jne    40f675 <deflate_fast+0x615>
        strm->state->pending_out = strm->state->pending_buf;
  40f66d:	48 8b 50 10          	mov    0x10(%rax),%rdx
  40f671:	48 89 50 20          	mov    %rdx,0x20(%rax)
  40f675:	4d 8b 3f             	mov    (%r15),%r15
  40f678:	45 8b 47 20          	mov    0x20(%r15),%r8d
            s->lookahead--;
            s->strstart++;
        }
        if (bflush) FLUSH_BLOCK(s, 0);
    }
    FLUSH_BLOCK(s, flush == Z_FINISH);
  40f67c:	45 85 c0             	test   %r8d,%r8d
  40f67f:	75 a5                	jne    40f626 <deflate_fast+0x5c6>
  40f681:	eb 89                	jmp    40f60c <deflate_fast+0x5ac>
            }
#else
            if (s->strategy != Z_HUFFMAN_ONLY && s->strategy != Z_RLE) {
                s->match_length = longest_match (s, hash_head);
            } else if (s->strategy == Z_RLE && s->strstart - hash_head == 1) {
                s->match_length = longest_match_fast (s, hash_head);
  40f683:	89 de                	mov    %ebx,%esi
  40f685:	4c 89 ff             	mov    %r15,%rdi
  40f688:	e8 43 ee ff ff       	callq  40e4d0 <longest_match_fast>
  40f68d:	41 8b 97 9c 00 00 00 	mov    0x9c(%r15),%edx
  40f694:	41 89 87 90 00 00 00 	mov    %eax,0x90(%r15)
  40f69b:	e9 7f fa ff ff       	jmpq   40f11f <deflate_fast+0xbf>

000000000040f6a0 <deflate_slow>:
 * no better match at the next window position.
 */
local block_state deflate_slow(s, flush)
    deflate_state *s;
    int flush;
{
  40f6a0:	41 57                	push   %r15
  40f6a2:	41 56                	push   %r14
  40f6a4:	41 55                	push   %r13
  40f6a6:	41 54                	push   %r12
  40f6a8:	41 89 f4             	mov    %esi,%r12d
  40f6ab:	55                   	push   %rbp
  40f6ac:	53                   	push   %rbx
    IPos hash_head = NIL;    /* head of hash chain */
  40f6ad:	31 ed                	xor    %ebp,%ebp
 * no better match at the next window position.
 */
local block_state deflate_slow(s, flush)
    deflate_state *s;
    int flush;
{
  40f6af:	48 89 fb             	mov    %rdi,%rbx
  40f6b2:	48 83 ec 08          	sub    $0x8,%rsp
  40f6b6:	8b b7 a4 00 00 00    	mov    0xa4(%rdi),%esi
  40f6bc:	0f 1f 40 00          	nopl   0x0(%rax)
        /* Make sure that we always have enough lookahead, except
         * at the end of the input file. We need MAX_MATCH bytes
         * for the next match, plus MIN_MATCH bytes to insert the
         * string following the next match.
         */
        if (s->lookahead < MIN_LOOKAHEAD) {
  40f6c0:	81 fe 05 01 00 00    	cmp    $0x105,%esi
  40f6c6:	0f 86 34 05 00 00    	jbe    40fc00 <deflate_slow+0x560>

        /* Insert the string window[strstart .. strstart+2] in the
         * dictionary, and set hash_head to the head of the hash chain:
         */
        if (s->lookahead >= MIN_MATCH) {
            INSERT_STRING(s, s->strstart, hash_head);
  40f6cc:	8b 93 9c 00 00 00    	mov    0x9c(%rbx),%edx
  40f6d2:	48 8b 4b 50          	mov    0x50(%rbx),%rcx
  40f6d6:	8b 6b 70             	mov    0x70(%rbx),%ebp
  40f6d9:	4c 8b 43 68          	mov    0x68(%rbx),%r8
  40f6dd:	4c 8b 5b 60          	mov    0x60(%rbx),%r11
  40f6e1:	8d 72 02             	lea    0x2(%rdx),%esi
  40f6e4:	41 89 d2             	mov    %edx,%r10d
  40f6e7:	44 23 53 4c          	and    0x4c(%rbx),%r10d
  40f6eb:	0f b6 3c 31          	movzbl (%rcx,%rsi,1),%edi
  40f6ef:	8b 8b 80 00 00 00    	mov    0x80(%rbx),%ecx
  40f6f5:	d3 e5                	shl    %cl,%ebp
  40f6f7:	31 fd                	xor    %edi,%ebp
  40f6f9:	23 6b 7c             	and    0x7c(%rbx),%ebp
  40f6fc:	4d 8d 0c 68          	lea    (%r8,%rbp,2),%r9
  40f700:	89 6b 70             	mov    %ebp,0x70(%rbx)
  40f703:	41 0f b7 29          	movzwl (%r9),%ebp
  40f707:	66 43 89 2c 53       	mov    %bp,(%r11,%r10,2)
  40f70c:	66 41 89 11          	mov    %dx,(%r9)
        }

        /* Find the longest match, discarding those <= prev_length.
         */
        s->prev_length = s->match_length, s->prev_match = s->match_start;
  40f710:	44 8b 93 90 00 00 00 	mov    0x90(%rbx),%r10d
  40f717:	44 8b ab a0 00 00 00 	mov    0xa0(%rbx),%r13d
        s->match_length = MIN_MATCH-1;

        if (hash_head != NIL && s->prev_length < s->max_lazy_match &&
  40f71e:	85 ed                	test   %ebp,%ebp
        }

        /* Find the longest match, discarding those <= prev_length.
         */
        s->prev_length = s->match_length, s->prev_match = s->match_start;
        s->match_length = MIN_MATCH-1;
  40f720:	c7 83 90 00 00 00 02 	movl   $0x2,0x90(%rbx)
  40f727:	00 00 00 
            INSERT_STRING(s, s->strstart, hash_head);
        }

        /* Find the longest match, discarding those <= prev_length.
         */
        s->prev_length = s->match_length, s->prev_match = s->match_start;
  40f72a:	44 89 93 a8 00 00 00 	mov    %r10d,0xa8(%rbx)
  40f731:	44 89 ab 94 00 00 00 	mov    %r13d,0x94(%rbx)
        s->match_length = MIN_MATCH-1;

        if (hash_head != NIL && s->prev_length < s->max_lazy_match &&
  40f738:	74 56                	je     40f790 <deflate_slow+0xf0>
  40f73a:	44 3b 93 b0 00 00 00 	cmp    0xb0(%rbx),%r10d
  40f741:	73 4d                	jae    40f790 <deflate_slow+0xf0>
            s->strstart - hash_head <= MAX_DIST(s)) {
  40f743:	44 8b 7b 44          	mov    0x44(%rbx),%r15d
  40f747:	41 89 d6             	mov    %edx,%r14d
  40f74a:	41 29 ee             	sub    %ebp,%r14d
  40f74d:	41 8d b7 fa fe ff ff 	lea    -0x106(%r15),%esi
        /* Find the longest match, discarding those <= prev_length.
         */
        s->prev_length = s->match_length, s->prev_match = s->match_start;
        s->match_length = MIN_MATCH-1;

        if (hash_head != NIL && s->prev_length < s->max_lazy_match &&
  40f754:	41 39 f6             	cmp    %esi,%r14d
  40f757:	77 37                	ja     40f790 <deflate_slow+0xf0>
            s->strstart - hash_head <= MAX_DIST(s)) {
            /* To simplify the code, we prevent matches with the string
             * of window index 0 (in particular we have to avoid a match
             * of the string with itself at the start of the input file).
             */
            if (s->strategy != Z_HUFFMAN_ONLY && s->strategy != Z_RLE) {
  40f759:	8b 83 b8 00 00 00    	mov    0xb8(%rbx),%eax
  40f75f:	8d 78 fe             	lea    -0x2(%rax),%edi
  40f762:	83 ff 01             	cmp    $0x1,%edi
  40f765:	0f 87 75 06 00 00    	ja     40fde0 <deflate_slow+0x740>
                s->match_length = longest_match (s, hash_head);
            } else if (s->strategy == Z_RLE && s->strstart - hash_head == 1) {
  40f76b:	41 83 fe 01          	cmp    $0x1,%r14d
  40f76f:	75 0f                	jne    40f780 <deflate_slow+0xe0>
  40f771:	83 f8 03             	cmp    $0x3,%eax
  40f774:	0f 84 19 08 00 00    	je     40ff93 <deflate_slow+0x8f3>
  40f77a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  40f780:	44 8b 93 a8 00 00 00 	mov    0xa8(%rbx),%r10d
  40f787:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40f78e:	00 00 
            }
        }
        /* If there was a match at the previous step and the current
         * match is not better, output the previous match:
         */
        if (s->prev_length >= MIN_MATCH && s->match_length <= s->prev_length) {
  40f790:	41 83 fa 02          	cmp    $0x2,%r10d
  40f794:	0f 86 a6 04 00 00    	jbe    40fc40 <deflate_slow+0x5a0>
  40f79a:	44 39 93 90 00 00 00 	cmp    %r10d,0x90(%rbx)
  40f7a1:	0f 87 99 04 00 00    	ja     40fc40 <deflate_slow+0x5a0>
  40f7a7:	44 8b 83 a4 00 00 00 	mov    0xa4(%rbx),%r8d
            uInt max_insert = s->strstart + s->lookahead - MIN_MATCH;
            /* Do not insert strings in hash table beyond this. */

            check_match(s, s->strstart-1, s->prev_match, s->prev_length);

            _tr_tally_dist(s, s->strstart -1 - s->prev_match,
  40f7ae:	44 8b b3 fc 16 00 00 	mov    0x16fc(%rbx),%r14d
  40f7b5:	41 83 ea 03          	sub    $0x3,%r10d
  40f7b9:	4c 8b bb 00 17 00 00 	mov    0x1700(%rbx),%r15
  40f7c0:	4c 8b 9b f0 16 00 00 	mov    0x16f0(%rbx),%r11
        }
        /* If there was a match at the previous step and the current
         * match is not better, output the previous match:
         */
        if (s->prev_length >= MIN_MATCH && s->match_length <= s->prev_length) {
            uInt max_insert = s->strstart + s->lookahead - MIN_MATCH;
  40f7c7:	46 8d 44 02 fd       	lea    -0x3(%rdx,%r8,1),%r8d
            /* Do not insert strings in hash table beyond this. */

            check_match(s, s->strstart-1, s->prev_match, s->prev_length);

            _tr_tally_dist(s, s->strstart -1 - s->prev_match,
  40f7cc:	66 2b 93 94 00 00 00 	sub    0x94(%rbx),%dx
  40f7d3:	4d 89 f5             	mov    %r14,%r13
  40f7d6:	41 83 c5 01          	add    $0x1,%r13d
  40f7da:	44 8d 4a ff          	lea    -0x1(%rdx),%r9d
  40f7de:	83 ea 02             	sub    $0x2,%edx
  40f7e1:	66 47 89 0c 77       	mov    %r9w,(%r15,%r14,2)
  40f7e6:	44 89 ab fc 16 00 00 	mov    %r13d,0x16fc(%rbx)
  40f7ed:	47 88 14 33          	mov    %r10b,(%r11,%r14,1)
  40f7f1:	45 0f b6 d2          	movzbl %r10b,%r10d
  40f7f5:	41 0f b6 b2 00 88 43 	movzbl 0x438800(%r10),%esi
  40f7fc:	00 
  40f7fd:	66 83 84 b3 c8 04 00 	addw   $0x1,0x4c8(%rbx,%rsi,4)
  40f804:	00 01 
  40f806:	66 81 fa ff 00       	cmp    $0xff,%dx
  40f80b:	0f 87 0f 05 00 00    	ja     40fd20 <deflate_slow+0x680>
  40f811:	0f b7 d2             	movzwl %dx,%edx
  40f814:	0f b6 ba 00 89 43 00 	movzbl 0x438900(%rdx),%edi
  40f81b:	66 83 84 bb b8 09 00 	addw   $0x1,0x9b8(%rbx,%rdi,4)
  40f822:	00 01 
            /* Insert in hash table all strings up to the end of the match.
             * strstart-1 and strstart are already inserted. If there is not
             * enough lookahead, the last two strings are not inserted in
             * the hash table.
             */
            s->lookahead -= s->prev_length-1;
  40f824:	44 8b 8b a8 00 00 00 	mov    0xa8(%rbx),%r9d
  40f82b:	44 8b b3 a4 00 00 00 	mov    0xa4(%rbx),%r14d
  40f832:	44 8b 9b 9c 00 00 00 	mov    0x9c(%rbx),%r11d
            uInt max_insert = s->strstart + s->lookahead - MIN_MATCH;
            /* Do not insert strings in hash table beyond this. */

            check_match(s, s->strstart-1, s->prev_match, s->prev_length);

            _tr_tally_dist(s, s->strstart -1 - s->prev_match,
  40f839:	8b 8b f8 16 00 00    	mov    0x16f8(%rbx),%ecx
  40f83f:	44 8b ab fc 16 00 00 	mov    0x16fc(%rbx),%r13d
  40f846:	41 8d 76 01          	lea    0x1(%r14),%esi
  40f84a:	45 8d 71 fd          	lea    -0x3(%r9),%r14d
             * strstart-1 and strstart are already inserted. If there is not
             * enough lookahead, the last two strings are not inserted in
             * the hash table.
             */
            s->lookahead -= s->prev_length-1;
            s->prev_length -= 2;
  40f84e:	41 8d 51 fe          	lea    -0x2(%r9),%edx
  40f852:	41 8d 7b 01          	lea    0x1(%r11),%edi
            uInt max_insert = s->strstart + s->lookahead - MIN_MATCH;
            /* Do not insert strings in hash table beyond this. */

            check_match(s, s->strstart-1, s->prev_match, s->prev_length);

            _tr_tally_dist(s, s->strstart -1 - s->prev_match,
  40f856:	44 8d 51 ff          	lea    -0x1(%rcx),%r10d
            /* Insert in hash table all strings up to the end of the match.
             * strstart-1 and strstart are already inserted. If there is not
             * enough lookahead, the last two strings are not inserted in
             * the hash table.
             */
            s->lookahead -= s->prev_length-1;
  40f85a:	44 29 ce             	sub    %r9d,%esi
  40f85d:	41 83 e6 03          	and    $0x3,%r14d
            s->prev_length -= 2;
  40f861:	89 93 a8 00 00 00    	mov    %edx,0xa8(%rbx)
            do {
                if (++s->strstart <= max_insert) {
  40f867:	41 39 f8             	cmp    %edi,%r8d
            /* Insert in hash table all strings up to the end of the match.
             * strstart-1 and strstart are already inserted. If there is not
             * enough lookahead, the last two strings are not inserted in
             * the hash table.
             */
            s->lookahead -= s->prev_length-1;
  40f86a:	89 b3 a4 00 00 00    	mov    %esi,0xa4(%rbx)
            s->prev_length -= 2;
            do {
                if (++s->strstart <= max_insert) {
  40f870:	89 bb 9c 00 00 00    	mov    %edi,0x9c(%rbx)
  40f876:	72 3e                	jb     40f8b6 <deflate_slow+0x216>
                    INSERT_STRING(s, s->strstart, hash_head);
  40f878:	4c 8b 7b 50          	mov    0x50(%rbx),%r15
  40f87c:	41 8d 6b 03          	lea    0x3(%r11),%ebp
  40f880:	8b 8b 80 00 00 00    	mov    0x80(%rbx),%ecx
  40f886:	8b 43 70             	mov    0x70(%rbx),%eax
  40f889:	41 0f b6 2c 2f       	movzbl (%r15,%rbp,1),%ebp
  40f88e:	4c 8b 7b 68          	mov    0x68(%rbx),%r15
  40f892:	d3 e0                	shl    %cl,%eax
  40f894:	48 8b 4b 60          	mov    0x60(%rbx),%rcx
  40f898:	31 e8                	xor    %ebp,%eax
  40f89a:	23 43 7c             	and    0x7c(%rbx),%eax
  40f89d:	89 43 70             	mov    %eax,0x70(%rbx)
  40f8a0:	49 8d 04 47          	lea    (%r15,%rax,2),%rax
  40f8a4:	41 89 ff             	mov    %edi,%r15d
  40f8a7:	44 23 7b 4c          	and    0x4c(%rbx),%r15d
  40f8ab:	0f b7 28             	movzwl (%rax),%ebp
  40f8ae:	66 42 89 2c 79       	mov    %bp,(%rcx,%r15,2)
  40f8b3:	66 89 38             	mov    %di,(%rax)
                }
            } while (--s->prev_length != 0);
  40f8b6:	83 ea 01             	sub    $0x1,%edx
  40f8b9:	8d 47 01             	lea    0x1(%rdi),%eax
  40f8bc:	85 d2                	test   %edx,%edx
  40f8be:	89 93 a8 00 00 00    	mov    %edx,0xa8(%rbx)
  40f8c4:	0f 84 98 02 00 00    	je     40fb62 <deflate_slow+0x4c2>
  40f8ca:	45 85 f6             	test   %r14d,%r14d
  40f8cd:	0f 84 24 01 00 00    	je     40f9f7 <deflate_slow+0x357>
  40f8d3:	41 83 fe 01          	cmp    $0x1,%r14d
  40f8d7:	0f 84 b9 00 00 00    	je     40f996 <deflate_slow+0x2f6>
  40f8dd:	41 83 fe 02          	cmp    $0x2,%r14d
  40f8e1:	74 5a                	je     40f93d <deflate_slow+0x29d>
             * the hash table.
             */
            s->lookahead -= s->prev_length-1;
            s->prev_length -= 2;
            do {
                if (++s->strstart <= max_insert) {
  40f8e3:	41 39 c0             	cmp    %eax,%r8d
  40f8e6:	89 83 9c 00 00 00    	mov    %eax,0x9c(%rbx)
  40f8ec:	72 43                	jb     40f931 <deflate_slow+0x291>
                    INSERT_STRING(s, s->strstart, hash_head);
  40f8ee:	4c 8b 73 50          	mov    0x50(%rbx),%r14
  40f8f2:	8b 8b 80 00 00 00    	mov    0x80(%rbx),%ecx
  40f8f8:	83 c7 03             	add    $0x3,%edi
  40f8fb:	8b 6b 70             	mov    0x70(%rbx),%ebp
  40f8fe:	41 0f b6 3c 3e       	movzbl (%r14,%rdi,1),%edi
  40f903:	4c 8b 73 68          	mov    0x68(%rbx),%r14
  40f907:	d3 e5                	shl    %cl,%ebp
  40f909:	41 89 ef             	mov    %ebp,%r15d
  40f90c:	41 31 ff             	xor    %edi,%r15d
  40f90f:	44 23 7b 7c          	and    0x7c(%rbx),%r15d
  40f913:	48 8b 7b 60          	mov    0x60(%rbx),%rdi
  40f917:	4b 8d 0c 7e          	lea    (%r14,%r15,2),%rcx
  40f91b:	44 89 7b 70          	mov    %r15d,0x70(%rbx)
  40f91f:	41 89 c7             	mov    %eax,%r15d
  40f922:	44 23 7b 4c          	and    0x4c(%rbx),%r15d
  40f926:	0f b7 29             	movzwl (%rcx),%ebp
  40f929:	66 42 89 2c 7f       	mov    %bp,(%rdi,%r15,2)
  40f92e:	66 89 01             	mov    %ax,(%rcx)
                }
            } while (--s->prev_length != 0);
  40f931:	83 ea 01             	sub    $0x1,%edx
  40f934:	83 c0 01             	add    $0x1,%eax
  40f937:	89 93 a8 00 00 00    	mov    %edx,0xa8(%rbx)
             * the hash table.
             */
            s->lookahead -= s->prev_length-1;
            s->prev_length -= 2;
            do {
                if (++s->strstart <= max_insert) {
  40f93d:	41 39 c0             	cmp    %eax,%r8d
  40f940:	89 83 9c 00 00 00    	mov    %eax,0x9c(%rbx)
  40f946:	72 42                	jb     40f98a <deflate_slow+0x2ea>
                    INSERT_STRING(s, s->strstart, hash_head);
  40f948:	4c 8b 73 50          	mov    0x50(%rbx),%r14
  40f94c:	8d 68 02             	lea    0x2(%rax),%ebp
  40f94f:	8b 8b 80 00 00 00    	mov    0x80(%rbx),%ecx
  40f955:	44 8b 7b 70          	mov    0x70(%rbx),%r15d
  40f959:	41 0f b6 3c 2e       	movzbl (%r14,%rbp,1),%edi
  40f95e:	4c 8b 73 68          	mov    0x68(%rbx),%r14
  40f962:	41 d3 e7             	shl    %cl,%r15d
  40f965:	44 89 fd             	mov    %r15d,%ebp
  40f968:	41 89 c7             	mov    %eax,%r15d
  40f96b:	44 23 7b 4c          	and    0x4c(%rbx),%r15d
  40f96f:	31 fd                	xor    %edi,%ebp
  40f971:	23 6b 7c             	and    0x7c(%rbx),%ebp
  40f974:	48 8b 7b 60          	mov    0x60(%rbx),%rdi
  40f978:	49 8d 0c 6e          	lea    (%r14,%rbp,2),%rcx
  40f97c:	89 6b 70             	mov    %ebp,0x70(%rbx)
  40f97f:	0f b7 29             	movzwl (%rcx),%ebp
  40f982:	66 42 89 2c 7f       	mov    %bp,(%rdi,%r15,2)
  40f987:	66 89 01             	mov    %ax,(%rcx)
                }
            } while (--s->prev_length != 0);
  40f98a:	83 ea 01             	sub    $0x1,%edx
  40f98d:	83 c0 01             	add    $0x1,%eax
  40f990:	89 93 a8 00 00 00    	mov    %edx,0xa8(%rbx)
             * the hash table.
             */
            s->lookahead -= s->prev_length-1;
            s->prev_length -= 2;
            do {
                if (++s->strstart <= max_insert) {
  40f996:	41 39 c0             	cmp    %eax,%r8d
  40f999:	89 83 9c 00 00 00    	mov    %eax,0x9c(%rbx)
  40f99f:	72 42                	jb     40f9e3 <deflate_slow+0x343>
                    INSERT_STRING(s, s->strstart, hash_head);
  40f9a1:	4c 8b 73 50          	mov    0x50(%rbx),%r14
  40f9a5:	8d 68 02             	lea    0x2(%rax),%ebp
  40f9a8:	8b 8b 80 00 00 00    	mov    0x80(%rbx),%ecx
  40f9ae:	44 8b 7b 70          	mov    0x70(%rbx),%r15d
  40f9b2:	41 0f b6 3c 2e       	movzbl (%r14,%rbp,1),%edi
  40f9b7:	4c 8b 73 68          	mov    0x68(%rbx),%r14
  40f9bb:	41 d3 e7             	shl    %cl,%r15d
  40f9be:	44 89 fd             	mov    %r15d,%ebp
  40f9c1:	41 89 c7             	mov    %eax,%r15d
  40f9c4:	44 23 7b 4c          	and    0x4c(%rbx),%r15d
  40f9c8:	31 fd                	xor    %edi,%ebp
  40f9ca:	23 6b 7c             	and    0x7c(%rbx),%ebp
  40f9cd:	48 8b 7b 60          	mov    0x60(%rbx),%rdi
  40f9d1:	49 8d 0c 6e          	lea    (%r14,%rbp,2),%rcx
  40f9d5:	89 6b 70             	mov    %ebp,0x70(%rbx)
  40f9d8:	0f b7 29             	movzwl (%rcx),%ebp
  40f9db:	66 42 89 2c 7f       	mov    %bp,(%rdi,%r15,2)
  40f9e0:	66 89 01             	mov    %ax,(%rcx)
                }
            } while (--s->prev_length != 0);
  40f9e3:	83 ea 01             	sub    $0x1,%edx
  40f9e6:	83 c0 01             	add    $0x1,%eax
  40f9e9:	85 d2                	test   %edx,%edx
  40f9eb:	89 93 a8 00 00 00    	mov    %edx,0xa8(%rbx)
  40f9f1:	0f 84 6b 01 00 00    	je     40fb62 <deflate_slow+0x4c2>
             * the hash table.
             */
            s->lookahead -= s->prev_length-1;
            s->prev_length -= 2;
            do {
                if (++s->strstart <= max_insert) {
  40f9f7:	41 39 c0             	cmp    %eax,%r8d
  40f9fa:	89 83 9c 00 00 00    	mov    %eax,0x9c(%rbx)
  40fa00:	72 42                	jb     40fa44 <deflate_slow+0x3a4>
                    INSERT_STRING(s, s->strstart, hash_head);
  40fa02:	4c 8b 73 50          	mov    0x50(%rbx),%r14
  40fa06:	8d 68 02             	lea    0x2(%rax),%ebp
  40fa09:	8b 8b 80 00 00 00    	mov    0x80(%rbx),%ecx
  40fa0f:	44 8b 7b 70          	mov    0x70(%rbx),%r15d
  40fa13:	41 0f b6 3c 2e       	movzbl (%r14,%rbp,1),%edi
  40fa18:	4c 8b 73 68          	mov    0x68(%rbx),%r14
  40fa1c:	41 d3 e7             	shl    %cl,%r15d
  40fa1f:	44 89 fd             	mov    %r15d,%ebp
  40fa22:	41 89 c7             	mov    %eax,%r15d
  40fa25:	44 23 7b 4c          	and    0x4c(%rbx),%r15d
  40fa29:	31 fd                	xor    %edi,%ebp
  40fa2b:	23 6b 7c             	and    0x7c(%rbx),%ebp
  40fa2e:	48 8b 7b 60          	mov    0x60(%rbx),%rdi
  40fa32:	49 8d 0c 6e          	lea    (%r14,%rbp,2),%rcx
  40fa36:	89 6b 70             	mov    %ebp,0x70(%rbx)
  40fa39:	0f b7 29             	movzwl (%rcx),%ebp
  40fa3c:	66 42 89 2c 7f       	mov    %bp,(%rdi,%r15,2)
  40fa41:	66 89 01             	mov    %ax,(%rcx)
  40fa44:	8d 78 01             	lea    0x1(%rax),%edi
                }
            } while (--s->prev_length != 0);
  40fa47:	83 ea 01             	sub    $0x1,%edx
  40fa4a:	89 93 a8 00 00 00    	mov    %edx,0xa8(%rbx)
             * the hash table.
             */
            s->lookahead -= s->prev_length-1;
            s->prev_length -= 2;
            do {
                if (++s->strstart <= max_insert) {
  40fa50:	41 39 f8             	cmp    %edi,%r8d
  40fa53:	89 bb 9c 00 00 00    	mov    %edi,0x9c(%rbx)
  40fa59:	72 3f                	jb     40fa9a <deflate_slow+0x3fa>
                    INSERT_STRING(s, s->strstart, hash_head);
  40fa5b:	48 8b 6b 50          	mov    0x50(%rbx),%rbp
  40fa5f:	83 c0 03             	add    $0x3,%eax
  40fa62:	8b 8b 80 00 00 00    	mov    0x80(%rbx),%ecx
  40fa68:	4c 8b 7b 68          	mov    0x68(%rbx),%r15
  40fa6c:	44 0f b6 74 05 00    	movzbl 0x0(%rbp,%rax,1),%r14d
  40fa72:	8b 43 70             	mov    0x70(%rbx),%eax
  40fa75:	d3 e0                	shl    %cl,%eax
  40fa77:	48 8b 4b 60          	mov    0x60(%rbx),%rcx
  40fa7b:	44 31 f0             	xor    %r14d,%eax
  40fa7e:	23 43 7c             	and    0x7c(%rbx),%eax
  40fa81:	41 89 fe             	mov    %edi,%r14d
  40fa84:	44 23 73 4c          	and    0x4c(%rbx),%r14d
  40fa88:	89 43 70             	mov    %eax,0x70(%rbx)
  40fa8b:	49 8d 04 47          	lea    (%r15,%rax,2),%rax
  40fa8f:	0f b7 28             	movzwl (%rax),%ebp
  40fa92:	66 42 89 2c 71       	mov    %bp,(%rcx,%r14,2)
  40fa97:	66 89 38             	mov    %di,(%rax)
  40fa9a:	44 8d 77 01          	lea    0x1(%rdi),%r14d
                }
            } while (--s->prev_length != 0);
  40fa9e:	44 8d 7a ff          	lea    -0x1(%rdx),%r15d
             * the hash table.
             */
            s->lookahead -= s->prev_length-1;
            s->prev_length -= 2;
            do {
                if (++s->strstart <= max_insert) {
  40faa2:	45 39 f0             	cmp    %r14d,%r8d
                    INSERT_STRING(s, s->strstart, hash_head);
                }
            } while (--s->prev_length != 0);
  40faa5:	44 89 bb a8 00 00 00 	mov    %r15d,0xa8(%rbx)
             * the hash table.
             */
            s->lookahead -= s->prev_length-1;
            s->prev_length -= 2;
            do {
                if (++s->strstart <= max_insert) {
  40faac:	44 89 b3 9c 00 00 00 	mov    %r14d,0x9c(%rbx)
  40fab3:	72 3f                	jb     40faf4 <deflate_slow+0x454>
                    INSERT_STRING(s, s->strstart, hash_head);
  40fab5:	48 8b 43 50          	mov    0x50(%rbx),%rax
  40fab9:	8d 6f 03             	lea    0x3(%rdi),%ebp
  40fabc:	8b 8b 80 00 00 00    	mov    0x80(%rbx),%ecx
  40fac2:	44 0f b6 3c 28       	movzbl (%rax,%rbp,1),%r15d
  40fac7:	8b 6b 70             	mov    0x70(%rbx),%ebp
  40faca:	48 8b 43 68          	mov    0x68(%rbx),%rax
  40face:	d3 e5                	shl    %cl,%ebp
  40fad0:	48 8b 4b 60          	mov    0x60(%rbx),%rcx
  40fad4:	44 31 fd             	xor    %r15d,%ebp
  40fad7:	23 6b 7c             	and    0x7c(%rbx),%ebp
  40fada:	45 89 f7             	mov    %r14d,%r15d
  40fadd:	44 23 7b 4c          	and    0x4c(%rbx),%r15d
  40fae1:	48 8d 04 68          	lea    (%rax,%rbp,2),%rax
  40fae5:	89 6b 70             	mov    %ebp,0x70(%rbx)
  40fae8:	0f b7 28             	movzwl (%rax),%ebp
  40faeb:	66 42 89 2c 79       	mov    %bp,(%rcx,%r15,2)
  40faf0:	66 44 89 30          	mov    %r14w,(%rax)
                }
            } while (--s->prev_length != 0);
  40faf4:	44 8d 72 fe          	lea    -0x2(%rdx),%r14d
  40faf8:	44 89 b3 a8 00 00 00 	mov    %r14d,0xa8(%rbx)
  40faff:	44 8d 77 02          	lea    0x2(%rdi),%r14d
             * the hash table.
             */
            s->lookahead -= s->prev_length-1;
            s->prev_length -= 2;
            do {
                if (++s->strstart <= max_insert) {
  40fb03:	45 39 f0             	cmp    %r14d,%r8d
  40fb06:	44 89 b3 9c 00 00 00 	mov    %r14d,0x9c(%rbx)
  40fb0d:	72 3f                	jb     40fb4e <deflate_slow+0x4ae>
                    INSERT_STRING(s, s->strstart, hash_head);
  40fb0f:	48 8b 43 50          	mov    0x50(%rbx),%rax
  40fb13:	8d 6f 04             	lea    0x4(%rdi),%ebp
  40fb16:	8b 8b 80 00 00 00    	mov    0x80(%rbx),%ecx
  40fb1c:	44 0f b6 3c 28       	movzbl (%rax,%rbp,1),%r15d
  40fb21:	8b 6b 70             	mov    0x70(%rbx),%ebp
  40fb24:	48 8b 43 68          	mov    0x68(%rbx),%rax
  40fb28:	d3 e5                	shl    %cl,%ebp
  40fb2a:	48 8b 4b 60          	mov    0x60(%rbx),%rcx
  40fb2e:	44 31 fd             	xor    %r15d,%ebp
  40fb31:	23 6b 7c             	and    0x7c(%rbx),%ebp
  40fb34:	45 89 f7             	mov    %r14d,%r15d
  40fb37:	44 23 7b 4c          	and    0x4c(%rbx),%r15d
  40fb3b:	48 8d 04 68          	lea    (%rax,%rbp,2),%rax
  40fb3f:	89 6b 70             	mov    %ebp,0x70(%rbx)
  40fb42:	0f b7 28             	movzwl (%rax),%ebp
  40fb45:	66 42 89 2c 79       	mov    %bp,(%rcx,%r15,2)
  40fb4a:	66 44 89 30          	mov    %r14w,(%rax)
                }
            } while (--s->prev_length != 0);
  40fb4e:	83 ea 03             	sub    $0x3,%edx
  40fb51:	8d 47 03             	lea    0x3(%rdi),%eax
  40fb54:	85 d2                	test   %edx,%edx
  40fb56:	89 93 a8 00 00 00    	mov    %edx,0xa8(%rbx)
  40fb5c:	0f 85 95 fe ff ff    	jne    40f9f7 <deflate_slow+0x357>
            s->match_available = 0;
            s->match_length = MIN_MATCH-1;
            s->strstart++;
  40fb62:	47 8d 44 19 ff       	lea    -0x1(%r9,%r11,1),%r8d

            if (bflush) FLUSH_BLOCK(s, 0);
  40fb67:	45 39 d5             	cmp    %r10d,%r13d
            do {
                if (++s->strstart <= max_insert) {
                    INSERT_STRING(s, s->strstart, hash_head);
                }
            } while (--s->prev_length != 0);
            s->match_available = 0;
  40fb6a:	c7 83 98 00 00 00 00 	movl   $0x0,0x98(%rbx)
  40fb71:	00 00 00 
            s->match_length = MIN_MATCH-1;
  40fb74:	c7 83 90 00 00 00 02 	movl   $0x2,0x90(%rbx)
  40fb7b:	00 00 00 
            s->strstart++;
  40fb7e:	44 89 83 9c 00 00 00 	mov    %r8d,0x9c(%rbx)

            if (bflush) FLUSH_BLOCK(s, 0);
  40fb85:	0f 85 35 fb ff ff    	jne    40f6c0 <deflate_slow+0x20>
  40fb8b:	4c 8b ab 88 00 00 00 	mov    0x88(%rbx),%r13
  40fb92:	44 89 c2             	mov    %r8d,%edx
  40fb95:	31 f6                	xor    %esi,%esi
  40fb97:	4c 29 ea             	sub    %r13,%rdx
  40fb9a:	4d 85 ed             	test   %r13,%r13
  40fb9d:	78 0a                	js     40fba9 <deflate_slow+0x509>
  40fb9f:	45 89 ea             	mov    %r13d,%r10d
  40fba2:	4c 89 d6             	mov    %r10,%rsi
  40fba5:	48 03 73 50          	add    0x50(%rbx),%rsi
  40fba9:	31 c9                	xor    %ecx,%ecx
  40fbab:	48 89 df             	mov    %rbx,%rdi
  40fbae:	e8 0d 50 00 00       	callq  414bc0 <_tr_flush_block>
  40fbb3:	4c 8b 33             	mov    (%rbx),%r14
  40fbb6:	44 8b 8b 9c 00 00 00 	mov    0x9c(%rbx),%r9d
 * (See also read_buf()).
 */
local void flush_pending(strm)
    z_streamp strm;
{
    unsigned len = strm->state->pending;
  40fbbd:	49 8b 76 38          	mov    0x38(%r14),%rsi

    if (len > strm->avail_out) len = strm->avail_out;
  40fbc1:	41 8b 4e 20          	mov    0x20(%r14),%ecx
            } while (--s->prev_length != 0);
            s->match_available = 0;
            s->match_length = MIN_MATCH-1;
            s->strstart++;

            if (bflush) FLUSH_BLOCK(s, 0);
  40fbc5:	4c 89 8b 88 00 00 00 	mov    %r9,0x88(%rbx)
 * (See also read_buf()).
 */
local void flush_pending(strm)
    z_streamp strm;
{
    unsigned len = strm->state->pending;
  40fbcc:	44 8b 6e 28          	mov    0x28(%rsi),%r13d
  40fbd0:	44 39 e9             	cmp    %r13d,%ecx
  40fbd3:	44 0f 46 e9          	cmovbe %ecx,%r13d

    if (len > strm->avail_out) len = strm->avail_out;
    if (len == 0) return;
  40fbd7:	45 85 ed             	test   %r13d,%r13d
  40fbda:	0f 85 70 02 00 00    	jne    40fe50 <deflate_slow+0x7b0>
            } while (--s->prev_length != 0);
            s->match_available = 0;
            s->match_length = MIN_MATCH-1;
            s->strstart++;

            if (bflush) FLUSH_BLOCK(s, 0);
  40fbe0:	85 c9                	test   %ecx,%ecx
  40fbe2:	0f 84 ed 00 00 00    	je     40fcd5 <deflate_slow+0x635>
  40fbe8:	8b b3 a4 00 00 00    	mov    0xa4(%rbx),%esi
        /* Make sure that we always have enough lookahead, except
         * at the end of the input file. We need MAX_MATCH bytes
         * for the next match, plus MIN_MATCH bytes to insert the
         * string following the next match.
         */
        if (s->lookahead < MIN_LOOKAHEAD) {
  40fbee:	81 fe 05 01 00 00    	cmp    $0x105,%esi
  40fbf4:	0f 87 d2 fa ff ff    	ja     40f6cc <deflate_slow+0x2c>
  40fbfa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            fill_window(s);
  40fc00:	48 89 df             	mov    %rbx,%rdi
  40fc03:	e8 68 eb ff ff       	callq  40e770 <fill_window>
            if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {
  40fc08:	8b 83 a4 00 00 00    	mov    0xa4(%rbx),%eax
  40fc0e:	3d 05 01 00 00       	cmp    $0x105,%eax
  40fc13:	0f 87 b3 fa ff ff    	ja     40f6cc <deflate_slow+0x2c>
  40fc19:	45 85 e4             	test   %r12d,%r12d
  40fc1c:	0f 84 b3 00 00 00    	je     40fcd5 <deflate_slow+0x635>
                return need_more;
            }
            if (s->lookahead == 0) break; /* flush the current block */
  40fc22:	85 c0                	test   %eax,%eax
  40fc24:	0f 84 66 02 00 00    	je     40fe90 <deflate_slow+0x7f0>
        }

        /* Insert the string window[strstart .. strstart+2] in the
         * dictionary, and set hash_head to the head of the hash chain:
         */
        if (s->lookahead >= MIN_MATCH) {
  40fc2a:	83 f8 02             	cmp    $0x2,%eax
  40fc2d:	0f 87 99 fa ff ff    	ja     40f6cc <deflate_slow+0x2c>
  40fc33:	8b 93 9c 00 00 00    	mov    0x9c(%rbx),%edx
  40fc39:	e9 d2 fa ff ff       	jmpq   40f710 <deflate_slow+0x70>
  40fc3e:	66 90                	xchg   %ax,%ax
            s->match_length = MIN_MATCH-1;
            s->strstart++;

            if (bflush) FLUSH_BLOCK(s, 0);

        } else if (s->match_available) {
  40fc40:	44 8b 83 98 00 00 00 	mov    0x98(%rbx),%r8d
  40fc47:	45 85 c0             	test   %r8d,%r8d
  40fc4a:	0f 84 a0 00 00 00    	je     40fcf0 <deflate_slow+0x650>
            /* If there was no match at the previous position, output a
             * single literal. If there was a match but the current match
             * is longer, truncate the previous match to a single literal.
             */
            Tracevv((stderr,"%c", s->window[s->strstart-1]));
            _tr_tally_lit(s, s->window[s->strstart-1], bflush);
  40fc50:	4c 8b 5b 50          	mov    0x50(%rbx),%r11
  40fc54:	44 8b b3 fc 16 00 00 	mov    0x16fc(%rbx),%r14d
  40fc5b:	83 ea 01             	sub    $0x1,%edx
  40fc5e:	48 8b b3 00 17 00 00 	mov    0x1700(%rbx),%rsi
  40fc65:	48 8b bb f0 16 00 00 	mov    0x16f0(%rbx),%rdi
  40fc6c:	31 c0                	xor    %eax,%eax
  40fc6e:	45 0f b6 2c 13       	movzbl (%r11,%rdx,1),%r13d
  40fc73:	4d 89 f7             	mov    %r14,%r15
  40fc76:	66 42 89 04 76       	mov    %ax,(%rsi,%r14,2)
  40fc7b:	41 83 c7 01          	add    $0x1,%r15d
  40fc7f:	44 89 bb fc 16 00 00 	mov    %r15d,0x16fc(%rbx)
  40fc86:	46 88 2c 37          	mov    %r13b,(%rdi,%r14,1)
  40fc8a:	66 42 83 84 ab c4 00 	addw   $0x1,0xc4(%rbx,%r13,4)
  40fc91:	00 00 01 
  40fc94:	8b 93 f8 16 00 00    	mov    0x16f8(%rbx),%edx
  40fc9a:	83 ea 01             	sub    $0x1,%edx
            if (bflush) {
  40fc9d:	39 93 fc 16 00 00    	cmp    %edx,0x16fc(%rbx)
  40fca3:	0f 84 97 00 00 00    	je     40fd40 <deflate_slow+0x6a0>
  40fca9:	48 8b 3b             	mov    (%rbx),%rdi
  40fcac:	8b 83 9c 00 00 00    	mov    0x9c(%rbx),%eax
  40fcb2:	8b 57 20             	mov    0x20(%rdi),%edx
                FLUSH_BLOCK_ONLY(s, 0);
            }
            s->strstart++;
            s->lookahead--;
  40fcb5:	8b 8b a4 00 00 00    	mov    0xa4(%rbx),%ecx
            Tracevv((stderr,"%c", s->window[s->strstart-1]));
            _tr_tally_lit(s, s->window[s->strstart-1], bflush);
            if (bflush) {
                FLUSH_BLOCK_ONLY(s, 0);
            }
            s->strstart++;
  40fcbb:	83 c0 01             	add    $0x1,%eax
            s->lookahead--;
            if (s->strm->avail_out == 0) return need_more;
  40fcbe:	85 d2                	test   %edx,%edx
            Tracevv((stderr,"%c", s->window[s->strstart-1]));
            _tr_tally_lit(s, s->window[s->strstart-1], bflush);
            if (bflush) {
                FLUSH_BLOCK_ONLY(s, 0);
            }
            s->strstart++;
  40fcc0:	89 83 9c 00 00 00    	mov    %eax,0x9c(%rbx)
            s->lookahead--;
  40fcc6:	8d 71 ff             	lea    -0x1(%rcx),%esi
  40fcc9:	89 b3 a4 00 00 00    	mov    %esi,0xa4(%rbx)
            if (s->strm->avail_out == 0) return need_more;
  40fccf:	0f 85 eb f9 ff ff    	jne    40f6c0 <deflate_slow+0x20>
        _tr_tally_lit(s, s->window[s->strstart-1], bflush);
        s->match_available = 0;
    }
    FLUSH_BLOCK(s, flush == Z_FINISH);
    return flush == Z_FINISH ? finish_done : block_done;
}
  40fcd5:	48 83 c4 08          	add    $0x8,%rsp
         * string following the next match.
         */
        if (s->lookahead < MIN_LOOKAHEAD) {
            fill_window(s);
            if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {
                return need_more;
  40fcd9:	31 c0                	xor    %eax,%eax
        _tr_tally_lit(s, s->window[s->strstart-1], bflush);
        s->match_available = 0;
    }
    FLUSH_BLOCK(s, flush == Z_FINISH);
    return flush == Z_FINISH ? finish_done : block_done;
}
  40fcdb:	5b                   	pop    %rbx
  40fcdc:	5d                   	pop    %rbp
  40fcdd:	41 5c                	pop    %r12
  40fcdf:	41 5d                	pop    %r13
  40fce1:	41 5e                	pop    %r14
  40fce3:	41 5f                	pop    %r15
  40fce5:	c3                   	retq   
  40fce6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40fced:	00 00 00 
            /* There is no previous match to compare with, wait for
             * the next step to decide.
             */
            s->match_available = 1;
            s->strstart++;
            s->lookahead--;
  40fcf0:	44 8b 8b a4 00 00 00 	mov    0xa4(%rbx),%r9d
        } else {
            /* There is no previous match to compare with, wait for
             * the next step to decide.
             */
            s->match_available = 1;
            s->strstart++;
  40fcf7:	83 c2 01             	add    $0x1,%edx
            if (s->strm->avail_out == 0) return need_more;
        } else {
            /* There is no previous match to compare with, wait for
             * the next step to decide.
             */
            s->match_available = 1;
  40fcfa:	c7 83 98 00 00 00 01 	movl   $0x1,0x98(%rbx)
  40fd01:	00 00 00 
            s->strstart++;
  40fd04:	89 93 9c 00 00 00    	mov    %edx,0x9c(%rbx)
            s->lookahead--;
  40fd0a:	41 8d 71 ff          	lea    -0x1(%r9),%esi
  40fd0e:	89 b3 a4 00 00 00    	mov    %esi,0xa4(%rbx)
  40fd14:	e9 a7 f9 ff ff       	jmpq   40f6c0 <deflate_slow+0x20>
  40fd19:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            uInt max_insert = s->strstart + s->lookahead - MIN_MATCH;
            /* Do not insert strings in hash table beyond this. */

            check_match(s, s->strstart-1, s->prev_match, s->prev_length);

            _tr_tally_dist(s, s->strstart -1 - s->prev_match,
  40fd20:	66 c1 ea 07          	shr    $0x7,%dx
  40fd24:	48 8d 82 00 01 00 00 	lea    0x100(%rdx),%rax
  40fd2b:	25 ff 03 00 00       	and    $0x3ff,%eax
  40fd30:	0f b6 b8 00 89 43 00 	movzbl 0x438900(%rax),%edi
  40fd37:	e9 df fa ff ff       	jmpq   40f81b <deflate_slow+0x17b>
  40fd3c:	0f 1f 40 00          	nopl   0x0(%rax)
             * is longer, truncate the previous match to a single literal.
             */
            Tracevv((stderr,"%c", s->window[s->strstart-1]));
            _tr_tally_lit(s, s->window[s->strstart-1], bflush);
            if (bflush) {
                FLUSH_BLOCK_ONLY(s, 0);
  40fd40:	8b 93 9c 00 00 00    	mov    0x9c(%rbx),%edx
  40fd46:	48 8b 8b 88 00 00 00 	mov    0x88(%rbx),%rcx
  40fd4d:	31 f6                	xor    %esi,%esi
  40fd4f:	48 29 ca             	sub    %rcx,%rdx
  40fd52:	48 85 c9             	test   %rcx,%rcx
  40fd55:	78 0a                	js     40fd61 <deflate_slow+0x6c1>
  40fd57:	41 89 ca             	mov    %ecx,%r10d
  40fd5a:	4c 03 53 50          	add    0x50(%rbx),%r10
  40fd5e:	4c 89 d6             	mov    %r10,%rsi
  40fd61:	31 c9                	xor    %ecx,%ecx
  40fd63:	48 89 df             	mov    %rbx,%rdi
  40fd66:	e8 55 4e 00 00       	callq  414bc0 <_tr_flush_block>
  40fd6b:	4c 8b 33             	mov    (%rbx),%r14
  40fd6e:	44 8b 83 9c 00 00 00 	mov    0x9c(%rbx),%r8d
 * (See also read_buf()).
 */
local void flush_pending(strm)
    z_streamp strm;
{
    unsigned len = strm->state->pending;
  40fd75:	4d 8b 4e 38          	mov    0x38(%r14),%r9

    if (len > strm->avail_out) len = strm->avail_out;
  40fd79:	41 8b 56 20          	mov    0x20(%r14),%edx
             * is longer, truncate the previous match to a single literal.
             */
            Tracevv((stderr,"%c", s->window[s->strstart-1]));
            _tr_tally_lit(s, s->window[s->strstart-1], bflush);
            if (bflush) {
                FLUSH_BLOCK_ONLY(s, 0);
  40fd7d:	4c 89 c0             	mov    %r8,%rax
  40fd80:	4c 89 83 88 00 00 00 	mov    %r8,0x88(%rbx)
 * (See also read_buf()).
 */
local void flush_pending(strm)
    z_streamp strm;
{
    unsigned len = strm->state->pending;
  40fd87:	45 8b 69 28          	mov    0x28(%r9),%r13d
  40fd8b:	44 39 ea             	cmp    %r13d,%edx
  40fd8e:	44 0f 46 ea          	cmovbe %edx,%r13d

    if (len > strm->avail_out) len = strm->avail_out;
    if (len == 0) return;
  40fd92:	45 85 ed             	test   %r13d,%r13d
  40fd95:	0f 84 1a ff ff ff    	je     40fcb5 <deflate_slow+0x615>
  40fd9b:	49 8b 7e 18          	mov    0x18(%r14),%rdi
  40fd9f:	49 8b 71 20          	mov    0x20(%r9),%rsi

    zmemcpy(strm->next_out, strm->state->pending_out, len);
  40fda3:	45 89 ef             	mov    %r13d,%r15d
  40fda6:	4c 89 fa             	mov    %r15,%rdx
  40fda9:	e8 42 72 ff ff       	callq  406ff0 <memcpy@plt>
    strm->next_out  += len;
    strm->state->pending_out  += len;
  40fdae:	4d 8b 5e 38          	mov    0x38(%r14),%r11

    if (len > strm->avail_out) len = strm->avail_out;
    if (len == 0) return;

    zmemcpy(strm->next_out, strm->state->pending_out, len);
    strm->next_out  += len;
  40fdb2:	4d 01 7e 18          	add    %r15,0x18(%r14)
    strm->state->pending_out  += len;
  40fdb6:	4d 01 7b 20          	add    %r15,0x20(%r11)
    strm->total_out += len;
  40fdba:	4d 01 7e 28          	add    %r15,0x28(%r14)
    strm->avail_out  -= len;
  40fdbe:	45 29 6e 20          	sub    %r13d,0x20(%r14)
    strm->state->pending -= len;
    if (strm->state->pending == 0) {
  40fdc2:	45 29 6b 28          	sub    %r13d,0x28(%r11)
  40fdc6:	0f 85 dd fe ff ff    	jne    40fca9 <deflate_slow+0x609>
        strm->state->pending_out = strm->state->pending_buf;
  40fdcc:	49 8b 73 10          	mov    0x10(%r11),%rsi
  40fdd0:	49 89 73 20          	mov    %rsi,0x20(%r11)
  40fdd4:	e9 d0 fe ff ff       	jmpq   40fca9 <deflate_slow+0x609>
  40fdd9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            /* To simplify the code, we prevent matches with the string
             * of window index 0 (in particular we have to avoid a match
             * of the string with itself at the start of the input file).
             */
            if (s->strategy != Z_HUFFMAN_ONLY && s->strategy != Z_RLE) {
                s->match_length = longest_match (s, hash_head);
  40fde0:	89 ee                	mov    %ebp,%esi
  40fde2:	48 89 df             	mov    %rbx,%rdi
  40fde5:	e8 d6 e2 ff ff       	callq  40e0c0 <longest_match>
  40fdea:	89 83 90 00 00 00    	mov    %eax,0x90(%rbx)
            } else if (s->strategy == Z_RLE && s->strstart - hash_head == 1) {
                s->match_length = longest_match_fast (s, hash_head);
            }
            /* longest_match() or longest_match_fast() sets match_start */

            if (s->match_length <= 5 && (s->strategy == Z_FILTERED
  40fdf0:	83 f8 05             	cmp    $0x5,%eax
  40fdf3:	76 1b                	jbe    40fe10 <deflate_slow+0x770>
  40fdf5:	44 8b 93 a8 00 00 00 	mov    0xa8(%rbx),%r10d
  40fdfc:	8b 93 9c 00 00 00    	mov    0x9c(%rbx),%edx
  40fe02:	e9 89 f9 ff ff       	jmpq   40f790 <deflate_slow+0xf0>
  40fe07:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40fe0e:	00 00 
  40fe10:	83 bb b8 00 00 00 01 	cmpl   $0x1,0xb8(%rbx)
  40fe17:	8b 93 9c 00 00 00    	mov    0x9c(%rbx),%edx
  40fe1d:	74 1d                	je     40fe3c <deflate_slow+0x79c>
#if TOO_FAR <= 32767
                || (s->match_length == MIN_MATCH &&
  40fe1f:	83 f8 03             	cmp    $0x3,%eax
  40fe22:	0f 85 58 f9 ff ff    	jne    40f780 <deflate_slow+0xe0>
                    s->strstart - s->match_start > TOO_FAR)
  40fe28:	89 d1                	mov    %edx,%ecx
  40fe2a:	2b 8b a0 00 00 00    	sub    0xa0(%rbx),%ecx
            }
            /* longest_match() or longest_match_fast() sets match_start */

            if (s->match_length <= 5 && (s->strategy == Z_FILTERED
#if TOO_FAR <= 32767
                || (s->match_length == MIN_MATCH &&
  40fe30:	81 f9 00 10 00 00    	cmp    $0x1000,%ecx
  40fe36:	0f 86 44 f9 ff ff    	jbe    40f780 <deflate_slow+0xe0>
                )) {

                /* If prev_match is also MIN_MATCH, match_start is garbage
                 * but we will ignore the current match anyway.
                 */
                s->match_length = MIN_MATCH-1;
  40fe3c:	c7 83 90 00 00 00 02 	movl   $0x2,0x90(%rbx)
  40fe43:	00 00 00 
  40fe46:	e9 35 f9 ff ff       	jmpq   40f780 <deflate_slow+0xe0>
  40fe4b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  40fe50:	49 8b 7e 18          	mov    0x18(%r14),%rdi
  40fe54:	48 8b 76 20          	mov    0x20(%rsi),%rsi
    unsigned len = strm->state->pending;

    if (len > strm->avail_out) len = strm->avail_out;
    if (len == 0) return;

    zmemcpy(strm->next_out, strm->state->pending_out, len);
  40fe58:	45 89 ef             	mov    %r13d,%r15d
  40fe5b:	4c 89 fa             	mov    %r15,%rdx
  40fe5e:	e8 8d 71 ff ff       	callq  406ff0 <memcpy@plt>
    strm->next_out  += len;
    strm->state->pending_out  += len;
  40fe63:	4d 8b 5e 38          	mov    0x38(%r14),%r11

    if (len > strm->avail_out) len = strm->avail_out;
    if (len == 0) return;

    zmemcpy(strm->next_out, strm->state->pending_out, len);
    strm->next_out  += len;
  40fe67:	4d 01 7e 18          	add    %r15,0x18(%r14)
    strm->state->pending_out  += len;
  40fe6b:	4d 01 7b 20          	add    %r15,0x20(%r11)
    strm->total_out += len;
  40fe6f:	4d 01 7e 28          	add    %r15,0x28(%r14)
    strm->avail_out  -= len;
  40fe73:	45 29 6e 20          	sub    %r13d,0x20(%r14)
    strm->state->pending -= len;
    if (strm->state->pending == 0) {
  40fe77:	45 29 6b 28          	sub    %r13d,0x28(%r11)
  40fe7b:	75 08                	jne    40fe85 <deflate_slow+0x7e5>
        strm->state->pending_out = strm->state->pending_buf;
  40fe7d:	49 8b 53 10          	mov    0x10(%r11),%rdx
  40fe81:	49 89 53 20          	mov    %rdx,0x20(%r11)
  40fe85:	48 8b 3b             	mov    (%rbx),%rdi
  40fe88:	8b 4f 20             	mov    0x20(%rdi),%ecx
  40fe8b:	e9 50 fd ff ff       	jmpq   40fbe0 <deflate_slow+0x540>
            s->strstart++;
            s->lookahead--;
        }
    }
    Assert (flush != Z_NO_FLUSH, "no flush?");
    if (s->match_available) {
  40fe90:	8b ab 98 00 00 00    	mov    0x98(%rbx),%ebp
  40fe96:	85 ed                	test   %ebp,%ebp
  40fe98:	0f 85 9b 00 00 00    	jne    40ff39 <deflate_slow+0x899>
        Tracevv((stderr,"%c", s->window[s->strstart-1]));
        _tr_tally_lit(s, s->window[s->strstart-1], bflush);
        s->match_available = 0;
    }
    FLUSH_BLOCK(s, flush == Z_FINISH);
  40fe9e:	8b 93 9c 00 00 00    	mov    0x9c(%rbx),%edx
  40fea4:	41 83 fc 04          	cmp    $0x4,%r12d
  40fea8:	4c 8b a3 88 00 00 00 	mov    0x88(%rbx),%r12
  40feaf:	40 0f 94 c5          	sete   %bpl
  40feb3:	31 f6                	xor    %esi,%esi
  40feb5:	40 0f b6 cd          	movzbl %bpl,%ecx
  40feb9:	4c 29 e2             	sub    %r12,%rdx
  40febc:	4d 85 e4             	test   %r12,%r12
  40febf:	78 0a                	js     40fecb <deflate_slow+0x82b>
  40fec1:	45 89 e3             	mov    %r12d,%r11d
  40fec4:	4c 03 5b 50          	add    0x50(%rbx),%r11
  40fec8:	4c 89 de             	mov    %r11,%rsi
  40fecb:	48 89 df             	mov    %rbx,%rdi
  40fece:	e8 ed 4c 00 00       	callq  414bc0 <_tr_flush_block>
  40fed3:	4c 8b 3b             	mov    (%rbx),%r15
  40fed6:	8b 93 9c 00 00 00    	mov    0x9c(%rbx),%edx
 * (See also read_buf()).
 */
local void flush_pending(strm)
    z_streamp strm;
{
    unsigned len = strm->state->pending;
  40fedc:	49 8b 4f 38          	mov    0x38(%r15),%rcx

    if (len > strm->avail_out) len = strm->avail_out;
  40fee0:	45 8b 47 20          	mov    0x20(%r15),%r8d
    if (s->match_available) {
        Tracevv((stderr,"%c", s->window[s->strstart-1]));
        _tr_tally_lit(s, s->window[s->strstart-1], bflush);
        s->match_available = 0;
    }
    FLUSH_BLOCK(s, flush == Z_FINISH);
  40fee4:	48 89 93 88 00 00 00 	mov    %rdx,0x88(%rbx)
 * (See also read_buf()).
 */
local void flush_pending(strm)
    z_streamp strm;
{
    unsigned len = strm->state->pending;
  40feeb:	44 8b 69 28          	mov    0x28(%rcx),%r13d
  40feef:	45 39 e8             	cmp    %r13d,%r8d
  40fef2:	45 0f 46 e8          	cmovbe %r8d,%r13d

    if (len > strm->avail_out) len = strm->avail_out;
    if (len == 0) return;
  40fef6:	45 85 ed             	test   %r13d,%r13d
  40fef9:	0f 85 a9 00 00 00    	jne    40ffa8 <deflate_slow+0x908>
    if (s->match_available) {
        Tracevv((stderr,"%c", s->window[s->strstart-1]));
        _tr_tally_lit(s, s->window[s->strstart-1], bflush);
        s->match_available = 0;
    }
    FLUSH_BLOCK(s, flush == Z_FINISH);
  40feff:	45 85 c0             	test   %r8d,%r8d
  40ff02:	75 1a                	jne    40ff1e <deflate_slow+0x87e>
  40ff04:	89 e8                	mov    %ebp,%eax
    return flush == Z_FINISH ? finish_done : block_done;
}
  40ff06:	48 83 c4 08          	add    $0x8,%rsp
    if (s->match_available) {
        Tracevv((stderr,"%c", s->window[s->strstart-1]));
        _tr_tally_lit(s, s->window[s->strstart-1], bflush);
        s->match_available = 0;
    }
    FLUSH_BLOCK(s, flush == Z_FINISH);
  40ff0a:	c1 e0 1f             	shl    $0x1f,%eax
  40ff0d:	c1 f8 1f             	sar    $0x1f,%eax
    return flush == Z_FINISH ? finish_done : block_done;
}
  40ff10:	5b                   	pop    %rbx
    if (s->match_available) {
        Tracevv((stderr,"%c", s->window[s->strstart-1]));
        _tr_tally_lit(s, s->window[s->strstart-1], bflush);
        s->match_available = 0;
    }
    FLUSH_BLOCK(s, flush == Z_FINISH);
  40ff11:	83 e0 02             	and    $0x2,%eax
    return flush == Z_FINISH ? finish_done : block_done;
}
  40ff14:	5d                   	pop    %rbp
  40ff15:	41 5c                	pop    %r12
  40ff17:	41 5d                	pop    %r13
  40ff19:	41 5e                	pop    %r14
  40ff1b:	41 5f                	pop    %r15
  40ff1d:	c3                   	retq   
        Tracevv((stderr,"%c", s->window[s->strstart-1]));
        _tr_tally_lit(s, s->window[s->strstart-1], bflush);
        s->match_available = 0;
    }
    FLUSH_BLOCK(s, flush == Z_FINISH);
    return flush == Z_FINISH ? finish_done : block_done;
  40ff1e:	40 80 fd 01          	cmp    $0x1,%bpl
  40ff22:	19 c0                	sbb    %eax,%eax
}
  40ff24:	48 83 c4 08          	add    $0x8,%rsp
        Tracevv((stderr,"%c", s->window[s->strstart-1]));
        _tr_tally_lit(s, s->window[s->strstart-1], bflush);
        s->match_available = 0;
    }
    FLUSH_BLOCK(s, flush == Z_FINISH);
    return flush == Z_FINISH ? finish_done : block_done;
  40ff28:	83 e0 fe             	and    $0xfffffffe,%eax
}
  40ff2b:	5b                   	pop    %rbx
        Tracevv((stderr,"%c", s->window[s->strstart-1]));
        _tr_tally_lit(s, s->window[s->strstart-1], bflush);
        s->match_available = 0;
    }
    FLUSH_BLOCK(s, flush == Z_FINISH);
    return flush == Z_FINISH ? finish_done : block_done;
  40ff2c:	83 c0 03             	add    $0x3,%eax
}
  40ff2f:	5d                   	pop    %rbp
  40ff30:	41 5c                	pop    %r12
  40ff32:	41 5d                	pop    %r13
  40ff34:	41 5e                	pop    %r14
  40ff36:	41 5f                	pop    %r15
  40ff38:	c3                   	retq   
        }
    }
    Assert (flush != Z_NO_FLUSH, "no flush?");
    if (s->match_available) {
        Tracevv((stderr,"%c", s->window[s->strstart-1]));
        _tr_tally_lit(s, s->window[s->strstart-1], bflush);
  40ff39:	8b 83 9c 00 00 00    	mov    0x9c(%rbx),%eax
  40ff3f:	4c 8b 43 50          	mov    0x50(%rbx),%r8
  40ff43:	45 31 ed             	xor    %r13d,%r13d
  40ff46:	44 8b 8b fc 16 00 00 	mov    0x16fc(%rbx),%r9d
  40ff4d:	48 8b b3 00 17 00 00 	mov    0x1700(%rbx),%rsi
  40ff54:	4c 8b bb f0 16 00 00 	mov    0x16f0(%rbx),%r15
  40ff5b:	83 e8 01             	sub    $0x1,%eax
  40ff5e:	45 0f b6 14 00       	movzbl (%r8,%rax,1),%r10d
  40ff63:	4d 89 ce             	mov    %r9,%r14
  40ff66:	66 46 89 2c 4e       	mov    %r13w,(%rsi,%r9,2)
  40ff6b:	41 83 c6 01          	add    $0x1,%r14d
  40ff6f:	44 89 b3 fc 16 00 00 	mov    %r14d,0x16fc(%rbx)
  40ff76:	47 88 14 0f          	mov    %r10b,(%r15,%r9,1)
  40ff7a:	66 42 83 84 93 c4 00 	addw   $0x1,0xc4(%rbx,%r10,4)
  40ff81:	00 00 01 
        s->match_available = 0;
  40ff84:	c7 83 98 00 00 00 00 	movl   $0x0,0x98(%rbx)
  40ff8b:	00 00 00 
  40ff8e:	e9 0b ff ff ff       	jmpq   40fe9e <deflate_slow+0x7fe>
             * of the string with itself at the start of the input file).
             */
            if (s->strategy != Z_HUFFMAN_ONLY && s->strategy != Z_RLE) {
                s->match_length = longest_match (s, hash_head);
            } else if (s->strategy == Z_RLE && s->strstart - hash_head == 1) {
                s->match_length = longest_match_fast (s, hash_head);
  40ff93:	89 ee                	mov    %ebp,%esi
  40ff95:	48 89 df             	mov    %rbx,%rdi
  40ff98:	e8 33 e5 ff ff       	callq  40e4d0 <longest_match_fast>
  40ff9d:	89 83 90 00 00 00    	mov    %eax,0x90(%rbx)
  40ffa3:	e9 48 fe ff ff       	jmpq   40fdf0 <deflate_slow+0x750>
  40ffa8:	49 8b 7f 18          	mov    0x18(%r15),%rdi
  40ffac:	48 8b 71 20          	mov    0x20(%rcx),%rsi
    unsigned len = strm->state->pending;

    if (len > strm->avail_out) len = strm->avail_out;
    if (len == 0) return;

    zmemcpy(strm->next_out, strm->state->pending_out, len);
  40ffb0:	45 89 ee             	mov    %r13d,%r14d
  40ffb3:	4c 89 f2             	mov    %r14,%rdx
  40ffb6:	e8 35 70 ff ff       	callq  406ff0 <memcpy@plt>
    strm->next_out  += len;
    strm->state->pending_out  += len;
  40ffbb:	49 8b 7f 38          	mov    0x38(%r15),%rdi

    if (len > strm->avail_out) len = strm->avail_out;
    if (len == 0) return;

    zmemcpy(strm->next_out, strm->state->pending_out, len);
    strm->next_out  += len;
  40ffbf:	4d 01 77 18          	add    %r14,0x18(%r15)
    strm->state->pending_out  += len;
  40ffc3:	4c 01 77 20          	add    %r14,0x20(%rdi)
    strm->total_out += len;
  40ffc7:	4d 01 77 28          	add    %r14,0x28(%r15)
    strm->avail_out  -= len;
  40ffcb:	45 29 6f 20          	sub    %r13d,0x20(%r15)
    strm->state->pending -= len;
    if (strm->state->pending == 0) {
  40ffcf:	44 29 6f 28          	sub    %r13d,0x28(%rdi)
  40ffd3:	75 08                	jne    40ffdd <deflate_slow+0x93d>
        strm->state->pending_out = strm->state->pending_buf;
  40ffd5:	48 8b 47 10          	mov    0x10(%rdi),%rax
  40ffd9:	48 89 47 20          	mov    %rax,0x20(%rdi)
  40ffdd:	48 8b 1b             	mov    (%rbx),%rbx
  40ffe0:	44 8b 43 20          	mov    0x20(%rbx),%r8d
  40ffe4:	e9 16 ff ff ff       	jmpq   40feff <deflate_slow+0x85f>
  40ffe9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000040fff0 <deflateSetDictionary>:
/* ========================================================================= */
int ZEXPORT deflateSetDictionary (strm, dictionary, dictLength)
    z_streamp strm;
    const Bytef *dictionary;
    uInt  dictLength;
{
  40fff0:	41 57                	push   %r15
  40fff2:	41 56                	push   %r14
  40fff4:	41 55                	push   %r13
  40fff6:	41 54                	push   %r12
  40fff8:	49 89 fc             	mov    %rdi,%r12
  40fffb:	55                   	push   %rbp
  40fffc:	53                   	push   %rbx
  40fffd:	48 83 ec 18          	sub    $0x18,%rsp
    deflate_state *s;
    uInt length = dictLength;
    uInt n;
    IPos hash_head = 0;

    if (strm == Z_NULL || strm->state == Z_NULL || dictionary == Z_NULL ||
  410001:	48 85 ff             	test   %rdi,%rdi
  410004:	0f 84 ce 02 00 00    	je     4102d8 <deflateSetDictionary+0x2e8>
  41000a:	48 85 f6             	test   %rsi,%rsi
  41000d:	49 89 f5             	mov    %rsi,%r13
  410010:	48 8b 5f 38          	mov    0x38(%rdi),%rbx
  410014:	0f 84 be 02 00 00    	je     4102d8 <deflateSetDictionary+0x2e8>
  41001a:	48 85 db             	test   %rbx,%rbx
  41001d:	0f 84 b5 02 00 00    	je     4102d8 <deflateSetDictionary+0x2e8>
        strm->state->wrap == 2 ||
  410023:	8b 43 2c             	mov    0x2c(%rbx),%eax
    deflate_state *s;
    uInt length = dictLength;
    uInt n;
    IPos hash_head = 0;

    if (strm == Z_NULL || strm->state == Z_NULL || dictionary == Z_NULL ||
  410026:	83 f8 02             	cmp    $0x2,%eax
  410029:	0f 84 a9 02 00 00    	je     4102d8 <deflateSetDictionary+0x2e8>
        strm->state->wrap == 2 ||
  41002f:	83 f8 01             	cmp    $0x1,%eax
  410032:	89 d5                	mov    %edx,%ebp
  410034:	0f 84 76 02 00 00    	je     4102b0 <deflateSetDictionary+0x2c0>
        (strm->state->wrap == 1 && strm->state->status != INIT_STATE))
        return Z_STREAM_ERROR;

    s = strm->state;
    if (s->wrap)
  41003a:	85 c0                	test   %eax,%eax
  41003c:	0f 85 79 02 00 00    	jne    4102bb <deflateSetDictionary+0x2cb>
        strm->adler = adler32(strm->adler, dictionary, dictLength);

    if (length < MIN_MATCH) return Z_OK;
  410042:	83 fd 02             	cmp    $0x2,%ebp
  410045:	0f 86 35 02 00 00    	jbe    410280 <deflateSetDictionary+0x290>
    if (length > MAX_DIST(s)) {
  41004b:	8b 4b 44             	mov    0x44(%rbx),%ecx
  41004e:	81 e9 06 01 00 00    	sub    $0x106,%ecx
  410054:	39 cd                	cmp    %ecx,%ebp
  410056:	0f 87 3c 02 00 00    	ja     410298 <deflateSetDictionary+0x2a8>
  41005c:	48 8b 7b 50          	mov    0x50(%rbx),%rdi
        length = MAX_DIST(s);
        dictionary += dictLength - length; /* use the tail of the dictionary */
    }
    zmemcpy(s->window, dictionary, length);
  410060:	41 89 ee             	mov    %ebp,%r14d
  410063:	4c 89 ee             	mov    %r13,%rsi
  410066:	4c 89 f2             	mov    %r14,%rdx
  410069:	e8 82 6f ff ff       	callq  406ff0 <memcpy@plt>

    /* Insert all strings in the hash table (except for the last two bytes).
     * s->lookahead stays null, so s->ins_h will be recomputed at the next
     * call of fill_window.
     */
    s->ins_h = s->window[0];
  41006e:	48 8b 7b 50          	mov    0x50(%rbx),%rdi
    if (length > MAX_DIST(s)) {
        length = MAX_DIST(s);
        dictionary += dictLength - length; /* use the tail of the dictionary */
    }
    zmemcpy(s->window, dictionary, length);
    s->strstart = length;
  410072:	89 ab 9c 00 00 00    	mov    %ebp,0x9c(%rbx)
     * s->lookahead stays null, so s->ins_h will be recomputed at the next
     * call of fill_window.
     */
    s->ins_h = s->window[0];
    UPDATE_HASH(s, s->ins_h, s->window[1]);
    for (n = 0; n <= length - MIN_MATCH; n++) {
  410078:	8d 55 fd             	lea    -0x3(%rbp),%edx
        length = MAX_DIST(s);
        dictionary += dictLength - length; /* use the tail of the dictionary */
    }
    zmemcpy(s->window, dictionary, length);
    s->strstart = length;
    s->block_start = (long)length;
  41007b:	4c 89 b3 88 00 00 00 	mov    %r14,0x88(%rbx)
    /* Insert all strings in the hash table (except for the last two bytes).
     * s->lookahead stays null, so s->ins_h will be recomputed at the next
     * call of fill_window.
     */
    s->ins_h = s->window[0];
    UPDATE_HASH(s, s->ins_h, s->window[1]);
  410082:	8b 8b 80 00 00 00    	mov    0x80(%rbx),%ecx
  410088:	44 8b 43 7c          	mov    0x7c(%rbx),%r8d
  41008c:	4c 8b 53 68          	mov    0x68(%rbx),%r10
  410090:	89 d5                	mov    %edx,%ebp

    /* Insert all strings in the hash table (except for the last two bytes).
     * s->lookahead stays null, so s->ins_h will be recomputed at the next
     * call of fill_window.
     */
    s->ins_h = s->window[0];
  410092:	44 0f b6 3f          	movzbl (%rdi),%r15d
  410096:	4c 8b 4b 60          	mov    0x60(%rbx),%r9
  41009a:	83 e5 03             	and    $0x3,%ebp
  41009d:	44 8b 5b 4c          	mov    0x4c(%rbx),%r11d
  4100a1:	44 89 7b 70          	mov    %r15d,0x70(%rbx)
    UPDATE_HASH(s, s->ins_h, s->window[1]);
  4100a5:	0f b6 77 01          	movzbl 0x1(%rdi),%esi
  4100a9:	41 d3 e7             	shl    %cl,%r15d
  4100ac:	41 31 f7             	xor    %esi,%r15d
    for (n = 0; n <= length - MIN_MATCH; n++) {
  4100af:	be 01 00 00 00       	mov    $0x1,%esi
    /* Insert all strings in the hash table (except for the last two bytes).
     * s->lookahead stays null, so s->ins_h will be recomputed at the next
     * call of fill_window.
     */
    s->ins_h = s->window[0];
    UPDATE_HASH(s, s->ins_h, s->window[1]);
  4100b4:	45 21 c7             	and    %r8d,%r15d
  4100b7:	44 89 7b 70          	mov    %r15d,0x70(%rbx)
    for (n = 0; n <= length - MIN_MATCH; n++) {
        INSERT_STRING(s, n, hash_head);
  4100bb:	44 0f b6 6f 02       	movzbl 0x2(%rdi),%r13d
  4100c0:	41 d3 e7             	shl    %cl,%r15d
  4100c3:	45 31 fd             	xor    %r15d,%r13d
  4100c6:	45 31 ff             	xor    %r15d,%r15d
  4100c9:	45 21 c5             	and    %r8d,%r13d
     * s->lookahead stays null, so s->ins_h will be recomputed at the next
     * call of fill_window.
     */
    s->ins_h = s->window[0];
    UPDATE_HASH(s, s->ins_h, s->window[1]);
    for (n = 0; n <= length - MIN_MATCH; n++) {
  4100cc:	39 d6                	cmp    %edx,%esi
        INSERT_STRING(s, n, hash_head);
  4100ce:	45 89 ec             	mov    %r13d,%r12d
  4100d1:	44 89 6b 70          	mov    %r13d,0x70(%rbx)
  4100d5:	4b 8d 04 62          	lea    (%r10,%r12,2),%rax
  4100d9:	44 0f b7 30          	movzwl (%rax),%r14d
  4100dd:	66 45 89 31          	mov    %r14w,(%r9)
  4100e1:	66 44 89 38          	mov    %r15w,(%rax)
     * s->lookahead stays null, so s->ins_h will be recomputed at the next
     * call of fill_window.
     */
    s->ins_h = s->window[0];
    UPDATE_HASH(s, s->ins_h, s->window[1]);
    for (n = 0; n <= length - MIN_MATCH; n++) {
  4100e5:	0f 87 95 01 00 00    	ja     410280 <deflateSetDictionary+0x290>
  4100eb:	85 ed                	test   %ebp,%ebp
  4100ed:	0f 84 ae 00 00 00    	je     4101a1 <deflateSetDictionary+0x1b1>
  4100f3:	83 fd 01             	cmp    $0x1,%ebp
  4100f6:	74 6f                	je     410167 <deflateSetDictionary+0x177>
  4100f8:	83 fd 02             	cmp    $0x2,%ebp
  4100fb:	74 39                	je     410136 <deflateSetDictionary+0x146>
        INSERT_STRING(s, n, hash_head);
  4100fd:	0f b6 77 03          	movzbl 0x3(%rdi),%esi
  410101:	41 d3 e5             	shl    %cl,%r13d
  410104:	45 89 de             	mov    %r11d,%r14d
  410107:	41 83 e6 01          	and    $0x1,%r14d
  41010b:	41 bf 01 00 00 00    	mov    $0x1,%r15d
  410111:	41 31 f5             	xor    %esi,%r13d
     * s->lookahead stays null, so s->ins_h will be recomputed at the next
     * call of fill_window.
     */
    s->ins_h = s->window[0];
    UPDATE_HASH(s, s->ins_h, s->window[1]);
    for (n = 0; n <= length - MIN_MATCH; n++) {
  410114:	be 02 00 00 00       	mov    $0x2,%esi
        INSERT_STRING(s, n, hash_head);
  410119:	45 21 c5             	and    %r8d,%r13d
  41011c:	44 89 ed             	mov    %r13d,%ebp
  41011f:	44 89 6b 70          	mov    %r13d,0x70(%rbx)
  410123:	4d 8d 24 6a          	lea    (%r10,%rbp,2),%r12
  410127:	41 0f b7 04 24       	movzwl (%r12),%eax
  41012c:	66 43 89 04 71       	mov    %ax,(%r9,%r14,2)
  410131:	66 45 89 3c 24       	mov    %r15w,(%r12)
  410136:	8d 6e 02             	lea    0x2(%rsi),%ebp
  410139:	41 d3 e5             	shl    %cl,%r13d
  41013c:	44 0f b6 24 2f       	movzbl (%rdi,%rbp,1),%r12d
  410141:	89 f5                	mov    %esi,%ebp
  410143:	44 21 dd             	and    %r11d,%ebp
  410146:	45 31 e5             	xor    %r12d,%r13d
  410149:	45 21 c5             	and    %r8d,%r13d
  41014c:	44 89 e8             	mov    %r13d,%eax
  41014f:	44 89 6b 70          	mov    %r13d,0x70(%rbx)
  410153:	4d 8d 34 42          	lea    (%r10,%rax,2),%r14
  410157:	45 0f b7 3e          	movzwl (%r14),%r15d
  41015b:	66 45 89 3c 69       	mov    %r15w,(%r9,%rbp,2)
  410160:	66 41 89 36          	mov    %si,(%r14)
     * s->lookahead stays null, so s->ins_h will be recomputed at the next
     * call of fill_window.
     */
    s->ins_h = s->window[0];
    UPDATE_HASH(s, s->ins_h, s->window[1]);
    for (n = 0; n <= length - MIN_MATCH; n++) {
  410164:	83 c6 01             	add    $0x1,%esi
        INSERT_STRING(s, n, hash_head);
  410167:	44 8d 66 02          	lea    0x2(%rsi),%r12d
  41016b:	41 d3 e5             	shl    %cl,%r13d
  41016e:	89 f5                	mov    %esi,%ebp
  410170:	44 21 dd             	and    %r11d,%ebp
  410173:	42 0f b6 04 27       	movzbl (%rdi,%r12,1),%eax
  410178:	41 31 c5             	xor    %eax,%r13d
  41017b:	45 21 c5             	and    %r8d,%r13d
  41017e:	45 89 ee             	mov    %r13d,%r14d
  410181:	44 89 6b 70          	mov    %r13d,0x70(%rbx)
  410185:	4f 8d 3c 72          	lea    (%r10,%r14,2),%r15
  410189:	45 0f b7 27          	movzwl (%r15),%r12d
  41018d:	66 45 89 24 69       	mov    %r12w,(%r9,%rbp,2)
  410192:	66 41 89 37          	mov    %si,(%r15)
     * s->lookahead stays null, so s->ins_h will be recomputed at the next
     * call of fill_window.
     */
    s->ins_h = s->window[0];
    UPDATE_HASH(s, s->ins_h, s->window[1]);
    for (n = 0; n <= length - MIN_MATCH; n++) {
  410196:	83 c6 01             	add    $0x1,%esi
  410199:	39 d6                	cmp    %edx,%esi
  41019b:	0f 87 df 00 00 00    	ja     410280 <deflateSetDictionary+0x290>
  4101a1:	89 54 24 0c          	mov    %edx,0xc(%rsp)
  4101a5:	8d 56 02             	lea    0x2(%rsi),%edx
        INSERT_STRING(s, n, hash_head);
  4101a8:	41 d3 e5             	shl    %cl,%r13d
  4101ab:	89 f5                	mov    %esi,%ebp
  4101ad:	44 21 dd             	and    %r11d,%ebp
  4101b0:	0f b6 04 17          	movzbl (%rdi,%rdx,1),%eax
  4101b4:	49 89 d4             	mov    %rdx,%r12
  4101b7:	41 31 c5             	xor    %eax,%r13d
  4101ba:	8d 46 03             	lea    0x3(%rsi),%eax
  4101bd:	45 21 c5             	and    %r8d,%r13d
  4101c0:	45 89 ee             	mov    %r13d,%r14d
  4101c3:	44 89 6b 70          	mov    %r13d,0x70(%rbx)
  4101c7:	4f 8d 3c 72          	lea    (%r10,%r14,2),%r15
     * s->lookahead stays null, so s->ins_h will be recomputed at the next
     * call of fill_window.
     */
    s->ins_h = s->window[0];
    UPDATE_HASH(s, s->ins_h, s->window[1]);
    for (n = 0; n <= length - MIN_MATCH; n++) {
  4101cb:	44 8d 76 01          	lea    0x1(%rsi),%r14d
        INSERT_STRING(s, n, hash_head);
  4101cf:	41 0f b7 17          	movzwl (%r15),%edx
  4101d3:	66 41 89 14 69       	mov    %dx,(%r9,%rbp,2)
  4101d8:	66 41 89 37          	mov    %si,(%r15)
  4101dc:	48 89 c5             	mov    %rax,%rbp
  4101df:	44 0f b6 3c 07       	movzbl (%rdi,%rax,1),%r15d
  4101e4:	44 89 e8             	mov    %r13d,%eax
  4101e7:	d3 e0                	shl    %cl,%eax
  4101e9:	44 31 f8             	xor    %r15d,%eax
  4101ec:	45 89 f7             	mov    %r14d,%r15d
  4101ef:	44 21 c0             	and    %r8d,%eax
  4101f2:	45 21 df             	and    %r11d,%r15d
  4101f5:	41 89 c5             	mov    %eax,%r13d
  4101f8:	89 43 70             	mov    %eax,0x70(%rbx)
  4101fb:	d3 e0                	shl    %cl,%eax
  4101fd:	4f 8d 2c 6a          	lea    (%r10,%r13,2),%r13
  410201:	41 0f b7 55 00       	movzwl 0x0(%r13),%edx
  410206:	66 43 89 14 79       	mov    %dx,(%r9,%r15,2)
  41020b:	66 45 89 75 00       	mov    %r14w,0x0(%r13)
  410210:	44 8d 76 04          	lea    0x4(%rsi),%r14d
  410214:	46 0f b6 2c 37       	movzbl (%rdi,%r14,1),%r13d
  410219:	45 89 e6             	mov    %r12d,%r14d
  41021c:	45 21 de             	and    %r11d,%r14d
  41021f:	44 31 e8             	xor    %r13d,%eax
  410222:	44 21 c0             	and    %r8d,%eax
  410225:	41 89 c7             	mov    %eax,%r15d
  410228:	89 43 70             	mov    %eax,0x70(%rbx)
  41022b:	d3 e0                	shl    %cl,%eax
  41022d:	4b 8d 14 7a          	lea    (%r10,%r15,2),%rdx
  410231:	44 0f b7 2a          	movzwl (%rdx),%r13d
  410235:	66 47 89 2c 71       	mov    %r13w,(%r9,%r14,2)
  41023a:	66 44 89 22          	mov    %r12w,(%rdx)
  41023e:	44 8d 66 05          	lea    0x5(%rsi),%r12d
  410242:	41 89 ee             	mov    %ebp,%r14d
     * s->lookahead stays null, so s->ins_h will be recomputed at the next
     * call of fill_window.
     */
    s->ins_h = s->window[0];
    UPDATE_HASH(s, s->ins_h, s->window[1]);
    for (n = 0; n <= length - MIN_MATCH; n++) {
  410245:	83 c6 04             	add    $0x4,%esi
        INSERT_STRING(s, n, hash_head);
  410248:	46 0f b6 2c 27       	movzbl (%rdi,%r12,1),%r13d
  41024d:	45 21 de             	and    %r11d,%r14d
  410250:	41 31 c5             	xor    %eax,%r13d
  410253:	45 21 c5             	and    %r8d,%r13d
     * s->lookahead stays null, so s->ins_h will be recomputed at the next
     * call of fill_window.
     */
    s->ins_h = s->window[0];
    UPDATE_HASH(s, s->ins_h, s->window[1]);
    for (n = 0; n <= length - MIN_MATCH; n++) {
  410256:	3b 74 24 0c          	cmp    0xc(%rsp),%esi
        INSERT_STRING(s, n, hash_head);
  41025a:	44 89 e8             	mov    %r13d,%eax
  41025d:	44 89 6b 70          	mov    %r13d,0x70(%rbx)
  410261:	4d 8d 3c 42          	lea    (%r10,%rax,2),%r15
  410265:	41 0f b7 17          	movzwl (%r15),%edx
  410269:	66 43 89 14 71       	mov    %dx,(%r9,%r14,2)
  41026e:	66 41 89 2f          	mov    %bp,(%r15)
     * s->lookahead stays null, so s->ins_h will be recomputed at the next
     * call of fill_window.
     */
    s->ins_h = s->window[0];
    UPDATE_HASH(s, s->ins_h, s->window[1]);
    for (n = 0; n <= length - MIN_MATCH; n++) {
  410272:	0f 86 2d ff ff ff    	jbe    4101a5 <deflateSetDictionary+0x1b5>
  410278:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41027f:	00 

    s = strm->state;
    if (s->wrap)
        strm->adler = adler32(strm->adler, dictionary, dictLength);

    if (length < MIN_MATCH) return Z_OK;
  410280:	31 c0                	xor    %eax,%eax
    for (n = 0; n <= length - MIN_MATCH; n++) {
        INSERT_STRING(s, n, hash_head);
    }
    if (hash_head) hash_head = 0;  /* to make compiler happy */
    return Z_OK;
}
  410282:	48 83 c4 18          	add    $0x18,%rsp
  410286:	5b                   	pop    %rbx
  410287:	5d                   	pop    %rbp
  410288:	41 5c                	pop    %r12
  41028a:	41 5d                	pop    %r13
  41028c:	41 5e                	pop    %r14
  41028e:	41 5f                	pop    %r15
  410290:	c3                   	retq   
  410291:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        strm->adler = adler32(strm->adler, dictionary, dictLength);

    if (length < MIN_MATCH) return Z_OK;
    if (length > MAX_DIST(s)) {
        length = MAX_DIST(s);
        dictionary += dictLength - length; /* use the tail of the dictionary */
  410298:	89 ea                	mov    %ebp,%edx
  41029a:	89 cd                	mov    %ecx,%ebp
  41029c:	29 ca                	sub    %ecx,%edx
  41029e:	49 01 d5             	add    %rdx,%r13
  4102a1:	e9 b6 fd ff ff       	jmpq   41005c <deflateSetDictionary+0x6c>
  4102a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4102ad:	00 00 00 
    uInt n;
    IPos hash_head = 0;

    if (strm == Z_NULL || strm->state == Z_NULL || dictionary == Z_NULL ||
        strm->state->wrap == 2 ||
        (strm->state->wrap == 1 && strm->state->status != INIT_STATE))
  4102b0:	83 7b 08 2a          	cmpl   $0x2a,0x8(%rbx)
        return Z_STREAM_ERROR;
  4102b4:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    uInt n;
    IPos hash_head = 0;

    if (strm == Z_NULL || strm->state == Z_NULL || dictionary == Z_NULL ||
        strm->state->wrap == 2 ||
        (strm->state->wrap == 1 && strm->state->status != INIT_STATE))
  4102b9:	75 c7                	jne    410282 <deflateSetDictionary+0x292>
        return Z_STREAM_ERROR;

    s = strm->state;
    if (s->wrap)
        strm->adler = adler32(strm->adler, dictionary, dictLength);
  4102bb:	49 8b 7c 24 60       	mov    0x60(%r12),%rdi
  4102c0:	89 ea                	mov    %ebp,%edx
  4102c2:	4c 89 ee             	mov    %r13,%rsi
  4102c5:	e8 66 00 01 00       	callq  420330 <adler32>
  4102ca:	49 89 44 24 60       	mov    %rax,0x60(%r12)
  4102cf:	e9 6e fd ff ff       	jmpq   410042 <deflateSetDictionary+0x52>
  4102d4:	0f 1f 40 00          	nopl   0x0(%rax)
    IPos hash_head = 0;

    if (strm == Z_NULL || strm->state == Z_NULL || dictionary == Z_NULL ||
        strm->state->wrap == 2 ||
        (strm->state->wrap == 1 && strm->state->status != INIT_STATE))
        return Z_STREAM_ERROR;
  4102d8:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  4102dd:	eb a3                	jmp    410282 <deflateSetDictionary+0x292>
  4102df:	90                   	nop

00000000004102e0 <deflateReset>:
int ZEXPORT deflateReset (strm)
    z_streamp strm;
{
    deflate_state *s;

    if (strm == Z_NULL || strm->state == Z_NULL ||
  4102e0:	48 85 ff             	test   %rdi,%rdi
  4102e3:	0f 84 7e 01 00 00    	je     410467 <deflateReset+0x187>
}

/* ========================================================================= */
int ZEXPORT deflateReset (strm)
    z_streamp strm;
{
  4102e9:	55                   	push   %rbp
  4102ea:	53                   	push   %rbx
  4102eb:	48 83 ec 08          	sub    $0x8,%rsp
    deflate_state *s;

    if (strm == Z_NULL || strm->state == Z_NULL ||
  4102ef:	48 8b 5f 38          	mov    0x38(%rdi),%rbx
  4102f3:	48 85 db             	test   %rbx,%rbx
  4102f6:	0f 84 64 01 00 00    	je     410460 <deflateReset+0x180>
  4102fc:	48 83 7f 40 00       	cmpq   $0x0,0x40(%rdi)
  410301:	0f 84 59 01 00 00    	je     410460 <deflateReset+0x180>
        strm->zalloc == (alloc_func)0 || strm->zfree == (free_func)0) {
  410307:	48 83 7f 48 00       	cmpq   $0x0,0x48(%rdi)
  41030c:	0f 84 4e 01 00 00    	je     410460 <deflateReset+0x180>

    s = (deflate_state *)strm->state;
    s->pending = 0;
    s->pending_out = s->pending_buf;

    if (s->wrap < 0) {
  410312:	8b 53 2c             	mov    0x2c(%rbx),%edx
    strm->msg = Z_NULL; /* use zfree if we ever allocate msg dynamically */
    strm->data_type = Z_UNKNOWN;

    s = (deflate_state *)strm->state;
    s->pending = 0;
    s->pending_out = s->pending_buf;
  410315:	48 8b 43 10          	mov    0x10(%rbx),%rax
  410319:	48 89 fd             	mov    %rdi,%rbp
    if (strm == Z_NULL || strm->state == Z_NULL ||
        strm->zalloc == (alloc_func)0 || strm->zfree == (free_func)0) {
        return Z_STREAM_ERROR;
    }

    strm->total_in = strm->total_out = 0;
  41031c:	48 c7 47 28 00 00 00 	movq   $0x0,0x28(%rdi)
  410323:	00 
  410324:	48 c7 47 10 00 00 00 	movq   $0x0,0x10(%rdi)
  41032b:	00 
    strm->msg = Z_NULL; /* use zfree if we ever allocate msg dynamically */
  41032c:	48 c7 47 30 00 00 00 	movq   $0x0,0x30(%rdi)
  410333:	00 
    strm->data_type = Z_UNKNOWN;
  410334:	c7 47 58 02 00 00 00 	movl   $0x2,0x58(%rdi)

    s = (deflate_state *)strm->state;
    s->pending = 0;
    s->pending_out = s->pending_buf;

    if (s->wrap < 0) {
  41033b:	85 d2                	test   %edx,%edx
    strm->total_in = strm->total_out = 0;
    strm->msg = Z_NULL; /* use zfree if we ever allocate msg dynamically */
    strm->data_type = Z_UNKNOWN;

    s = (deflate_state *)strm->state;
    s->pending = 0;
  41033d:	c7 43 28 00 00 00 00 	movl   $0x0,0x28(%rbx)
    s->pending_out = s->pending_buf;
  410344:	48 89 43 20          	mov    %rax,0x20(%rbx)

    if (s->wrap < 0) {
  410348:	0f 88 ea 00 00 00    	js     410438 <deflateReset+0x158>
        s->wrap = -s->wrap; /* was made negative by deflate(..., Z_FINISH); */
    }
    s->status = s->wrap ? INIT_STATE : BUSY_STATE;
  41034e:	0f 85 e9 00 00 00    	jne    41043d <deflateReset+0x15d>
  410354:	c7 43 08 71 00 00 00 	movl   $0x71,0x8(%rbx)
    strm->adler =
#ifdef GZIP
        s->wrap == 2 ? crc32(0L, Z_NULL, 0) :
  41035b:	31 d2                	xor    %edx,%edx
  41035d:	31 f6                	xor    %esi,%esi
  41035f:	31 ff                	xor    %edi,%edi
  410361:	e8 ca ff 00 00       	callq  420330 <adler32>

    if (s->wrap < 0) {
        s->wrap = -s->wrap; /* was made negative by deflate(..., Z_FINISH); */
    }
    s->status = s->wrap ? INIT_STATE : BUSY_STATE;
    strm->adler =
  410366:	48 89 45 60          	mov    %rax,0x60(%rbp)
        s->wrap == 2 ? crc32(0L, Z_NULL, 0) :
#endif
        adler32(0L, Z_NULL, 0);
    s->last_flush = Z_NO_FLUSH;

    _tr_init(s);
  41036a:	48 89 df             	mov    %rbx,%rdi
    strm->adler =
#ifdef GZIP
        s->wrap == 2 ? crc32(0L, Z_NULL, 0) :
#endif
        adler32(0L, Z_NULL, 0);
    s->last_flush = Z_NO_FLUSH;
  41036d:	c7 43 40 00 00 00 00 	movl   $0x0,0x40(%rbx)

    _tr_init(s);
  410374:	e8 c7 3b 00 00       	callq  413f40 <_tr_init>
 * Initialize the "longest match" routines for a new zlib stream
 */
local void lm_init (s)
    deflate_state *s;
{
    s->window_size = (ulg)2L*s->w_size;
  410379:	8b 4b 44             	mov    0x44(%rbx),%ecx

    CLEAR_HASH(s);
  41037c:	8b 73 74             	mov    0x74(%rbx),%esi
  41037f:	45 31 c0             	xor    %r8d,%r8d
  410382:	48 8b 7b 68          	mov    0x68(%rbx),%rdi
  410386:	83 ee 01             	sub    $0x1,%esi
 * Initialize the "longest match" routines for a new zlib stream
 */
local void lm_init (s)
    deflate_state *s;
{
    s->window_size = (ulg)2L*s->w_size;
  410389:	48 01 c9             	add    %rcx,%rcx

    CLEAR_HASH(s);
  41038c:	48 8d 14 36          	lea    (%rsi,%rsi,1),%rdx
 * Initialize the "longest match" routines for a new zlib stream
 */
local void lm_init (s)
    deflate_state *s;
{
    s->window_size = (ulg)2L*s->w_size;
  410390:	48 89 4b 58          	mov    %rcx,0x58(%rbx)

    CLEAR_HASH(s);
  410394:	66 44 89 04 77       	mov    %r8w,(%rdi,%rsi,2)
      && (!__builtin_constant_p (__ch) || __ch != 0))
    {
      __warn_memset_zero_len ();
      return __dest;
    }
  return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
  410399:	31 f6                	xor    %esi,%esi
  41039b:	e8 e0 68 ff ff       	callq  406c80 <memset@plt>

    /* Set the default configuration parameters:
     */
    s->max_lazy_match   = configuration_table[s->level].max_lazy;
  4103a0:	48 63 bb b4 00 00 00 	movslq 0xb4(%rbx),%rdi
    s->good_match       = configuration_table[s->level].good_length;
    s->nice_match       = configuration_table[s->level].nice_length;
    s->max_chain_length = configuration_table[s->level].max_chain;

    s->strstart = 0;
  4103a7:	c7 83 9c 00 00 00 00 	movl   $0x0,0x9c(%rbx)
  4103ae:	00 00 00 
    s->block_start = 0L;
  4103b1:	48 c7 83 88 00 00 00 	movq   $0x0,0x88(%rbx)
  4103b8:	00 00 00 00 
    s->lookahead = 0;
  4103bc:	c7 83 a4 00 00 00 00 	movl   $0x0,0xa4(%rbx)
  4103c3:	00 00 00 
    s->match_length = s->prev_length = MIN_MATCH-1;
  4103c6:	c7 83 a8 00 00 00 02 	movl   $0x2,0xa8(%rbx)
  4103cd:	00 00 00 
  4103d0:	c7 83 90 00 00 00 02 	movl   $0x2,0x90(%rbx)
  4103d7:	00 00 00 
    s->match_available = 0;
  4103da:	c7 83 98 00 00 00 00 	movl   $0x0,0x98(%rbx)
  4103e1:	00 00 00 
    s->ins_h = 0;
  4103e4:	c7 43 70 00 00 00 00 	movl   $0x0,0x70(%rbx)

    CLEAR_HASH(s);

    /* Set the default configuration parameters:
     */
    s->max_lazy_match   = configuration_table[s->level].max_lazy;
  4103eb:	48 c1 e7 04          	shl    $0x4,%rdi
  4103ef:	4c 8d 8f 00 86 43 00 	lea    0x438600(%rdi),%r9
  4103f6:	44 0f b7 97 02 86 43 	movzwl 0x438602(%rdi),%r10d
  4103fd:	00 
    s->good_match       = configuration_table[s->level].good_length;
  4103fe:	44 0f b7 9f 00 86 43 	movzwl 0x438600(%rdi),%r11d
  410405:	00 
    s->nice_match       = configuration_table[s->level].nice_length;
    s->max_chain_length = configuration_table[s->level].max_chain;
  410406:	41 0f b7 41 06       	movzwl 0x6(%r9),%eax

    /* Set the default configuration parameters:
     */
    s->max_lazy_match   = configuration_table[s->level].max_lazy;
    s->good_match       = configuration_table[s->level].good_length;
    s->nice_match       = configuration_table[s->level].nice_length;
  41040b:	41 0f b7 69 04       	movzwl 0x4(%r9),%ebp

    CLEAR_HASH(s);

    /* Set the default configuration parameters:
     */
    s->max_lazy_match   = configuration_table[s->level].max_lazy;
  410410:	44 89 93 b0 00 00 00 	mov    %r10d,0xb0(%rbx)
    s->good_match       = configuration_table[s->level].good_length;
  410417:	44 89 9b bc 00 00 00 	mov    %r11d,0xbc(%rbx)
    s->nice_match       = configuration_table[s->level].nice_length;
    s->max_chain_length = configuration_table[s->level].max_chain;
  41041e:	89 83 ac 00 00 00    	mov    %eax,0xac(%rbx)

    /* Set the default configuration parameters:
     */
    s->max_lazy_match   = configuration_table[s->level].max_lazy;
    s->good_match       = configuration_table[s->level].good_length;
    s->nice_match       = configuration_table[s->level].nice_length;
  410424:	89 ab c0 00 00 00    	mov    %ebp,0xc0(%rbx)
    s->last_flush = Z_NO_FLUSH;

    _tr_init(s);
    lm_init(s);

    return Z_OK;
  41042a:	31 c0                	xor    %eax,%eax
}
  41042c:	48 83 c4 08          	add    $0x8,%rsp
  410430:	5b                   	pop    %rbx
  410431:	5d                   	pop    %rbp
  410432:	c3                   	retq   
  410433:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    s = (deflate_state *)strm->state;
    s->pending = 0;
    s->pending_out = s->pending_buf;

    if (s->wrap < 0) {
        s->wrap = -s->wrap; /* was made negative by deflate(..., Z_FINISH); */
  410438:	f7 da                	neg    %edx
  41043a:	89 53 2c             	mov    %edx,0x2c(%rbx)
    }
    s->status = s->wrap ? INIT_STATE : BUSY_STATE;
    strm->adler =
#ifdef GZIP
        s->wrap == 2 ? crc32(0L, Z_NULL, 0) :
  41043d:	83 fa 02             	cmp    $0x2,%edx
    s->pending_out = s->pending_buf;

    if (s->wrap < 0) {
        s->wrap = -s->wrap; /* was made negative by deflate(..., Z_FINISH); */
    }
    s->status = s->wrap ? INIT_STATE : BUSY_STATE;
  410440:	c7 43 08 2a 00 00 00 	movl   $0x2a,0x8(%rbx)
    strm->adler =
#ifdef GZIP
        s->wrap == 2 ? crc32(0L, Z_NULL, 0) :
  410447:	0f 85 0e ff ff ff    	jne    41035b <deflateReset+0x7b>
  41044d:	31 d2                	xor    %edx,%edx
  41044f:	31 f6                	xor    %esi,%esi
  410451:	31 ff                	xor    %edi,%edi
  410453:	e8 f8 06 01 00       	callq  420b50 <crc32>
  410458:	e9 09 ff ff ff       	jmpq   410366 <deflateReset+0x86>
  41045d:	0f 1f 00             	nopl   (%rax)
{
    deflate_state *s;

    if (strm == Z_NULL || strm->state == Z_NULL ||
        strm->zalloc == (alloc_func)0 || strm->zfree == (free_func)0) {
        return Z_STREAM_ERROR;
  410460:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  410465:	eb c5                	jmp    41042c <deflateReset+0x14c>
  410467:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax

    _tr_init(s);
    lm_init(s);

    return Z_OK;
}
  41046c:	c3                   	retq   
  41046d:	0f 1f 00             	nopl   (%rax)

0000000000410470 <deflateSetHeader>:
/* ========================================================================= */
int ZEXPORT deflateSetHeader (strm, head)
    z_streamp strm;
    gz_headerp head;
{
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  410470:	48 85 ff             	test   %rdi,%rdi
  410473:	74 1d                	je     410492 <deflateSetHeader+0x22>
  410475:	48 8b 57 38          	mov    0x38(%rdi),%rdx
  410479:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  41047e:	48 85 d2             	test   %rdx,%rdx
  410481:	74 0d                	je     410490 <deflateSetHeader+0x20>
    if (strm->state->wrap != 2) return Z_STREAM_ERROR;
  410483:	83 7a 2c 02          	cmpl   $0x2,0x2c(%rdx)
  410487:	75 07                	jne    410490 <deflateSetHeader+0x20>
    strm->state->gzhead = head;
  410489:	48 89 72 30          	mov    %rsi,0x30(%rdx)
    return Z_OK;
  41048d:	31 c0                	xor    %eax,%eax
  41048f:	c3                   	retq   
}
  410490:	f3 c3                	repz retq 
/* ========================================================================= */
int ZEXPORT deflateSetHeader (strm, head)
    z_streamp strm;
    gz_headerp head;
{
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  410492:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  410497:	c3                   	retq   
  410498:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41049f:	00 

00000000004104a0 <deflatePrime>:
int ZEXPORT deflatePrime (strm, bits, value)
    z_streamp strm;
    int bits;
    int value;
{
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  4104a0:	48 85 ff             	test   %rdi,%rdi
  4104a3:	74 2b                	je     4104d0 <deflatePrime+0x30>
  4104a5:	48 8b 7f 38          	mov    0x38(%rdi),%rdi
  4104a9:	48 85 ff             	test   %rdi,%rdi
  4104ac:	74 22                	je     4104d0 <deflatePrime+0x30>
    strm->state->bi_valid = bits;
    strm->state->bi_buf = (ush)(value & ((1 << bits) - 1));
  4104ae:	89 f1                	mov    %esi,%ecx
  4104b0:	b8 01 00 00 00       	mov    $0x1,%eax
    z_streamp strm;
    int bits;
    int value;
{
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
    strm->state->bi_valid = bits;
  4104b5:	89 b7 24 17 00 00    	mov    %esi,0x1724(%rdi)
    strm->state->bi_buf = (ush)(value & ((1 << bits) - 1));
  4104bb:	d3 e0                	shl    %cl,%eax
  4104bd:	83 e8 01             	sub    $0x1,%eax
  4104c0:	21 d0                	and    %edx,%eax
  4104c2:	66 89 87 20 17 00 00 	mov    %ax,0x1720(%rdi)
    return Z_OK;
  4104c9:	31 c0                	xor    %eax,%eax
  4104cb:	c3                   	retq   
  4104cc:	0f 1f 40 00          	nopl   0x0(%rax)
int ZEXPORT deflatePrime (strm, bits, value)
    z_streamp strm;
    int bits;
    int value;
{
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  4104d0:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    strm->state->bi_valid = bits;
    strm->state->bi_buf = (ush)(value & ((1 << bits) - 1));
    return Z_OK;
}
  4104d5:	c3                   	retq   
  4104d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4104dd:	00 00 00 

00000000004104e0 <deflateTune>:
    int nice_length;
    int max_chain;
{
    deflate_state *s;

    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  4104e0:	48 85 ff             	test   %rdi,%rdi
  4104e3:	74 2b                	je     410510 <deflateTune+0x30>
  4104e5:	48 8b 47 38          	mov    0x38(%rdi),%rax
  4104e9:	48 85 c0             	test   %rax,%rax
  4104ec:	74 22                	je     410510 <deflateTune+0x30>
    s = strm->state;
    s->good_match = good_length;
  4104ee:	89 b0 bc 00 00 00    	mov    %esi,0xbc(%rax)
    s->max_lazy_match = max_lazy;
  4104f4:	89 90 b0 00 00 00    	mov    %edx,0xb0(%rax)
    s->nice_match = nice_length;
  4104fa:	89 88 c0 00 00 00    	mov    %ecx,0xc0(%rax)
    s->max_chain_length = max_chain;
  410500:	44 89 80 ac 00 00 00 	mov    %r8d,0xac(%rax)
    return Z_OK;
  410507:	31 c0                	xor    %eax,%eax
  410509:	c3                   	retq   
  41050a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    int nice_length;
    int max_chain;
{
    deflate_state *s;

    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  410510:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    s->good_match = good_length;
    s->max_lazy_match = max_lazy;
    s->nice_match = nice_length;
    s->max_chain_length = max_chain;
    return Z_OK;
}
  410515:	c3                   	retq   
  410516:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41051d:	00 00 00 

0000000000410520 <deflateBound>:
    deflate_state *s;
    uLong destLen;

    /* conservative upper bound */
    destLen = sourceLen +
              ((sourceLen + 7) >> 3) + ((sourceLen + 63) >> 6) + 11;
  410520:	48 8d 46 07          	lea    0x7(%rsi),%rax
  410524:	48 c1 e8 03          	shr    $0x3,%rax
  410528:	48 8d 54 06 0b       	lea    0xb(%rsi,%rax,1),%rdx
  41052d:	48 8d 46 3f          	lea    0x3f(%rsi),%rax
  410531:	48 c1 e8 06          	shr    $0x6,%rax
{
    deflate_state *s;
    uLong destLen;

    /* conservative upper bound */
    destLen = sourceLen +
  410535:	48 01 d0             	add    %rdx,%rax
              ((sourceLen + 7) >> 3) + ((sourceLen + 63) >> 6) + 11;

    /* if can't get parameters, return conservative bound */
    if (strm == Z_NULL || strm->state == Z_NULL)
  410538:	48 85 ff             	test   %rdi,%rdi
  41053b:	74 0f                	je     41054c <deflateBound+0x2c>
  41053d:	48 8b 4f 38          	mov    0x38(%rdi),%rcx
  410541:	48 85 c9             	test   %rcx,%rcx
  410544:	74 06                	je     41054c <deflateBound+0x2c>
        return destLen;

    /* if not default parameters, return conservative bound */
    s = strm->state;
    if (s->w_bits != 15 || s->hash_bits != 8 + 7)
  410546:	83 79 48 0f          	cmpl   $0xf,0x48(%rcx)
  41054a:	74 04                	je     410550 <deflateBound+0x30>
        return destLen;

    /* default settings: return tight bound for that case */
    return compressBound(sourceLen);
}
  41054c:	f3 c3                	repz retq 
  41054e:	66 90                	xchg   %ax,%ax
    if (strm == Z_NULL || strm->state == Z_NULL)
        return destLen;

    /* if not default parameters, return conservative bound */
    s = strm->state;
    if (s->w_bits != 15 || s->hash_bits != 8 + 7)
  410550:	83 79 78 0f          	cmpl   $0xf,0x78(%rcx)
  410554:	75 f6                	jne    41054c <deflateBound+0x2c>
        return destLen;

    /* default settings: return tight bound for that case */
    return compressBound(sourceLen);
  410556:	48 89 f7             	mov    %rsi,%rdi
  410559:	e9 52 da ff ff       	jmpq   40dfb0 <compressBound>
  41055e:	66 90                	xchg   %ax,%ax

0000000000410560 <deflate>:
    int flush;
{
    int old_flush; /* value of flush param for previous deflate call */
    deflate_state *s;

    if (strm == Z_NULL || strm->state == Z_NULL ||
  410560:	48 85 ff             	test   %rdi,%rdi
  410563:	0f 84 2f 0e 00 00    	je     411398 <deflate+0xe38>

/* ========================================================================= */
int ZEXPORT deflate (strm, flush)
    z_streamp strm;
    int flush;
{
  410569:	41 57                	push   %r15
  41056b:	41 56                	push   %r14
  41056d:	41 55                	push   %r13
  41056f:	41 54                	push   %r12
  410571:	55                   	push   %rbp
  410572:	53                   	push   %rbx
  410573:	48 83 ec 18          	sub    $0x18,%rsp
    int old_flush; /* value of flush param for previous deflate call */
    deflate_state *s;

    if (strm == Z_NULL || strm->state == Z_NULL ||
  410577:	48 8b 5f 38          	mov    0x38(%rdi),%rbx
  41057b:	48 85 db             	test   %rbx,%rbx
  41057e:	0f 84 bc 09 00 00    	je     410f40 <deflate+0x9e0>
        flush > Z_FINISH || flush < 0) {
  410584:	83 fe 04             	cmp    $0x4,%esi
  410587:	0f 87 b3 09 00 00    	ja     410f40 <deflate+0x9e0>
        return Z_STREAM_ERROR;
    }
    s = strm->state;

    if (strm->next_out == Z_NULL ||
  41058d:	48 83 7f 18 00       	cmpq   $0x0,0x18(%rdi)
  410592:	0f 84 10 09 00 00    	je     410ea8 <deflate+0x948>
  410598:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  41059c:	0f 84 f6 08 00 00    	je     410e98 <deflate+0x938>
        (strm->next_in == Z_NULL && strm->avail_in != 0) ||
        (s->status == FINISH_STATE && flush != Z_FINISH)) {
  4105a2:	83 fe 04             	cmp    $0x4,%esi
  4105a5:	8b 43 08             	mov    0x8(%rbx),%eax
  4105a8:	41 0f 95 c4          	setne  %r12b
  4105ac:	74 0b                	je     4105b9 <deflate+0x59>
  4105ae:	3d 9a 02 00 00       	cmp    $0x29a,%eax
  4105b3:	0f 84 ef 08 00 00    	je     410ea8 <deflate+0x948>
        ERR_RETURN(strm, Z_STREAM_ERROR);
    }
    if (strm->avail_out == 0) ERR_RETURN(strm, Z_BUF_ERROR);
  4105b9:	44 8b 57 20          	mov    0x20(%rdi),%r10d
  4105bd:	45 85 d2             	test   %r10d,%r10d
  4105c0:	0f 84 bf 0a 00 00    	je     411085 <deflate+0xb25>
    s->strm = strm; /* just in case */
    old_flush = s->last_flush;
    s->last_flush = flush;

    /* Write the header */
    if (s->status == INIT_STATE) {
  4105c6:	83 f8 2a             	cmp    $0x2a,%eax
        ERR_RETURN(strm, Z_STREAM_ERROR);
    }
    if (strm->avail_out == 0) ERR_RETURN(strm, Z_BUF_ERROR);

    s->strm = strm; /* just in case */
    old_flush = s->last_flush;
  4105c9:	44 8b 6b 40          	mov    0x40(%rbx),%r13d
  4105cd:	89 f5                	mov    %esi,%ebp
  4105cf:	49 89 fe             	mov    %rdi,%r14
        (s->status == FINISH_STATE && flush != Z_FINISH)) {
        ERR_RETURN(strm, Z_STREAM_ERROR);
    }
    if (strm->avail_out == 0) ERR_RETURN(strm, Z_BUF_ERROR);

    s->strm = strm; /* just in case */
  4105d2:	48 89 3b             	mov    %rdi,(%rbx)
    old_flush = s->last_flush;
    s->last_flush = flush;
  4105d5:	89 73 40             	mov    %esi,0x40(%rbx)

    /* Write the header */
    if (s->status == INIT_STATE) {
  4105d8:	0f 84 da 01 00 00    	je     4107b8 <deflate+0x258>
            }
            strm->adler = adler32(0L, Z_NULL, 0);
        }
    }
#ifdef GZIP
    if (s->status == EXTRA_STATE) {
  4105de:	83 f8 45             	cmp    $0x45,%eax
  4105e1:	0f 84 e8 02 00 00    	je     4108cf <deflate+0x36f>
            }
        }
        else
            s->status = NAME_STATE;
    }
    if (s->status == NAME_STATE) {
  4105e7:	83 f8 49             	cmp    $0x49,%eax
  4105ea:	8b 53 28             	mov    0x28(%rbx),%edx
  4105ed:	0f 84 ed 03 00 00    	je     4109e0 <deflate+0x480>
            }
        }
        else
            s->status = COMMENT_STATE;
    }
    if (s->status == COMMENT_STATE) {
  4105f3:	83 f8 5b             	cmp    $0x5b,%eax
  4105f6:	0f 84 e4 08 00 00    	je     410ee0 <deflate+0x980>
                s->status = HCRC_STATE;
        }
        else
            s->status = HCRC_STATE;
    }
    if (s->status == HCRC_STATE) {
  4105fc:	83 f8 67             	cmp    $0x67,%eax
  4105ff:	0f 84 eb 08 00 00    	je     410ef0 <deflate+0x990>
            s->status = BUSY_STATE;
    }
#endif

    /* Flush as much pending output as possible */
    if (s->pending != 0) {
  410605:	85 d2                	test   %edx,%edx
  410607:	0f 85 63 01 00 00    	jne    410770 <deflate+0x210>

    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
    } else if (strm->avail_in == 0 && flush <= old_flush &&
  41060d:	41 8b 46 08          	mov    0x8(%r14),%eax
  410611:	85 c0                	test   %eax,%eax
  410613:	74 5b                	je     410670 <deflate+0x110>
               flush != Z_FINISH) {
        ERR_RETURN(strm, Z_BUF_ERROR);
    }

    /* User must not provide more input after the first FINISH: */
    if (s->status == FINISH_STATE && strm->avail_in != 0) {
  410615:	81 7b 08 9a 02 00 00 	cmpl   $0x29a,0x8(%rbx)
  41061c:	0f 84 de 03 00 00    	je     410a00 <deflate+0x4a0>
     */
    if (strm->avail_in != 0 || s->lookahead != 0 ||
        (flush != Z_NO_FLUSH && s->status != FINISH_STATE)) {
        block_state bstate;

        bstate = (*(configuration_table[s->level].func))(s, flush);
  410622:	4c 63 ab b4 00 00 00 	movslq 0xb4(%rbx),%r13
  410629:	89 ee                	mov    %ebp,%esi
  41062b:	48 89 df             	mov    %rbx,%rdi
  41062e:	49 c1 e5 04          	shl    $0x4,%r13
  410632:	41 ff 95 08 86 43 00 	callq  *0x438608(%r13)

        if (bstate == finish_started || bstate == finish_done) {
  410639:	8d 50 fe             	lea    -0x2(%rax),%edx
  41063c:	83 fa 01             	cmp    $0x1,%edx
  41063f:	0f 86 1b 08 00 00    	jbe    410e60 <deflate+0x900>
            s->status = FINISH_STATE;
        }
        if (bstate == need_more || bstate == finish_started) {
  410645:	a9 fd ff ff ff       	test   $0xfffffffd,%eax
  41064a:	75 54                	jne    4106a0 <deflate+0x140>
            if (strm->avail_out == 0) {
  41064c:	41 8b 4e 20          	mov    0x20(%r14),%ecx
  410650:	85 c9                	test   %ecx,%ecx
  410652:	0f 84 c8 03 00 00    	je     410a20 <deflate+0x4c0>
                s->last_flush = -1; /* avoid BUF_ERROR next call, see above */
            }
            return Z_OK;
  410658:	31 c0                	xor    %eax,%eax
    /* If avail_out is zero, the application will call deflate again
     * to flush the rest.
     */
    if (s->wrap > 0) s->wrap = -s->wrap; /* write the trailer only once! */
    return s->pending != 0 ? Z_OK : Z_STREAM_END;
}
  41065a:	48 83 c4 18          	add    $0x18,%rsp
  41065e:	5b                   	pop    %rbx
  41065f:	5d                   	pop    %rbp
  410660:	41 5c                	pop    %r12
  410662:	41 5d                	pop    %r13
  410664:	41 5e                	pop    %r14
  410666:	41 5f                	pop    %r15
  410668:	c3                   	retq   
  410669:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
    } else if (strm->avail_in == 0 && flush <= old_flush &&
  410670:	44 39 ed             	cmp    %r13d,%ebp
  410673:	7f 09                	jg     41067e <deflate+0x11e>
  410675:	45 84 e4             	test   %r12b,%r12b
  410678:	0f 85 82 03 00 00    	jne    410a00 <deflate+0x4a0>
               flush != Z_FINISH) {
        ERR_RETURN(strm, Z_BUF_ERROR);
    }

    /* User must not provide more input after the first FINISH: */
    if (s->status == FINISH_STATE && strm->avail_in != 0) {
  41067e:	8b 73 08             	mov    0x8(%rbx),%esi
        ERR_RETURN(strm, Z_BUF_ERROR);
    }

    /* Start a new block or continue the current one.
     */
    if (strm->avail_in != 0 || s->lookahead != 0 ||
  410681:	44 8b 83 a4 00 00 00 	mov    0xa4(%rbx),%r8d
  410688:	45 85 c0             	test   %r8d,%r8d
  41068b:	75 95                	jne    410622 <deflate+0xc2>
  41068d:	85 ed                	test   %ebp,%ebp
  41068f:	74 c7                	je     410658 <deflate+0xf8>
        (flush != Z_NO_FLUSH && s->status != FINISH_STATE)) {
  410691:	81 fe 9a 02 00 00    	cmp    $0x29a,%esi
  410697:	75 89                	jne    410622 <deflate+0xc2>
  410699:	eb 0e                	jmp    4106a9 <deflate+0x149>
  41069b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
             * empty block here, this will be done at next call. This also
             * ensures that for a very small output buffer, we emit at most
             * one empty block.
             */
        }
        if (bstate == block_done) {
  4106a0:	83 f8 01             	cmp    $0x1,%eax
  4106a3:	0f 84 87 03 00 00    	je     410a30 <deflate+0x4d0>
            }
        }
    }
    Assert(strm->avail_out > 0, "bug2");

    if (flush != Z_FINISH) return Z_OK;
  4106a9:	45 84 e4             	test   %r12b,%r12b
  4106ac:	75 aa                	jne    410658 <deflate+0xf8>
    if (s->wrap <= 0) return Z_STREAM_END;
  4106ae:	44 8b 63 2c          	mov    0x2c(%rbx),%r12d
  4106b2:	45 85 e4             	test   %r12d,%r12d
  4106b5:	0f 8e 2e 0c 00 00    	jle    4112e9 <deflate+0xd89>

    /* Write the trailer */
#ifdef GZIP
    if (s->wrap == 2) {
  4106bb:	41 83 fc 02          	cmp    $0x2,%r12d
  4106bf:	0f 84 eb 08 00 00    	je     410fb0 <deflate+0xa50>
 */
local void putShortMSB (s, b)
    deflate_state *s;
    uInt b;
{
    put_byte(s, (Byte)(b >> 8));
  4106c5:	8b 43 28             	mov    0x28(%rbx),%eax
        put_byte(s, (Byte)((strm->total_in >> 24) & 0xff));
    }
    else
#endif
    {
        putShortMSB(s, (uInt)(strm->adler >> 16));
  4106c8:	4d 8b 4e 60          	mov    0x60(%r14),%r9
 */
local void putShortMSB (s, b)
    deflate_state *s;
    uInt b;
{
    put_byte(s, (Byte)(b >> 8));
  4106cc:	48 8b 4b 10          	mov    0x10(%rbx),%rcx
        put_byte(s, (Byte)((strm->total_in >> 24) & 0xff));
    }
    else
#endif
    {
        putShortMSB(s, (uInt)(strm->adler >> 16));
  4106d0:	49 c1 e9 10          	shr    $0x10,%r9
 */
local void putShortMSB (s, b)
    deflate_state *s;
    uInt b;
{
    put_byte(s, (Byte)(b >> 8));
  4106d4:	8d 70 01             	lea    0x1(%rax),%esi
  4106d7:	45 89 c8             	mov    %r9d,%r8d
  4106da:	41 c1 e8 08          	shr    $0x8,%r8d
  4106de:	89 73 28             	mov    %esi,0x28(%rbx)
  4106e1:	44 88 04 01          	mov    %r8b,(%rcx,%rax,1)
    put_byte(s, (Byte)(b & 0xff));
  4106e5:	44 8b 5b 28          	mov    0x28(%rbx),%r11d
  4106e9:	48 8b 53 10          	mov    0x10(%rbx),%rdx
  4106ed:	45 8d 7b 01          	lea    0x1(%r11),%r15d
  4106f1:	44 89 7b 28          	mov    %r15d,0x28(%rbx)
  4106f5:	46 88 0c 1a          	mov    %r9b,(%rdx,%r11,1)
    }
    else
#endif
    {
        putShortMSB(s, (uInt)(strm->adler >> 16));
        putShortMSB(s, (uInt)(strm->adler & 0xffff));
  4106f9:	41 0f b7 6e 60       	movzwl 0x60(%r14),%ebp
 */
local void putShortMSB (s, b)
    deflate_state *s;
    uInt b;
{
    put_byte(s, (Byte)(b >> 8));
  4106fe:	8b 7b 28             	mov    0x28(%rbx),%edi
  410701:	4c 8b 6b 10          	mov    0x10(%rbx),%r13
  410705:	44 8d 57 01          	lea    0x1(%rdi),%r10d
  410709:	41 89 ec             	mov    %ebp,%r12d
  41070c:	41 c1 ec 08          	shr    $0x8,%r12d
  410710:	44 89 53 28          	mov    %r10d,0x28(%rbx)
  410714:	45 88 64 3d 00       	mov    %r12b,0x0(%r13,%rdi,1)
    put_byte(s, (Byte)(b & 0xff));
  410719:	8b 4b 28             	mov    0x28(%rbx),%ecx
  41071c:	4c 8b 4b 10          	mov    0x10(%rbx),%r9
  410720:	8d 41 01             	lea    0x1(%rcx),%eax
  410723:	89 43 28             	mov    %eax,0x28(%rbx)
  410726:	41 88 2c 09          	mov    %bpl,(%r9,%rcx,1)
 * (See also read_buf()).
 */
local void flush_pending(strm)
    z_streamp strm;
{
    unsigned len = strm->state->pending;
  41072a:	4d 8b 6e 38          	mov    0x38(%r14),%r13

    if (len > strm->avail_out) len = strm->avail_out;
  41072e:	41 8b 7e 20          	mov    0x20(%r14),%edi
 * (See also read_buf()).
 */
local void flush_pending(strm)
    z_streamp strm;
{
    unsigned len = strm->state->pending;
  410732:	45 8b 7d 28          	mov    0x28(%r13),%r15d
  410736:	44 39 ff             	cmp    %r15d,%edi
  410739:	44 0f 46 ff          	cmovbe %edi,%r15d

    if (len > strm->avail_out) len = strm->avail_out;
    if (len == 0) return;
  41073d:	45 85 ff             	test   %r15d,%r15d
  410740:	0f 85 ba 07 00 00    	jne    410f00 <deflate+0x9a0>
    }
    flush_pending(strm);
    /* If avail_out is zero, the application will call deflate again
     * to flush the rest.
     */
    if (s->wrap > 0) s->wrap = -s->wrap; /* write the trailer only once! */
  410746:	44 8b 4b 2c          	mov    0x2c(%rbx),%r9d
  41074a:	45 85 c9             	test   %r9d,%r9d
  41074d:	7e 07                	jle    410756 <deflate+0x1f6>
  41074f:	41 f7 d9             	neg    %r9d
  410752:	44 89 4b 2c          	mov    %r9d,0x2c(%rbx)
    return s->pending != 0 ? Z_OK : Z_STREAM_END;
  410756:	8b 5b 28             	mov    0x28(%rbx),%ebx
  410759:	31 c0                	xor    %eax,%eax
  41075b:	85 db                	test   %ebx,%ebx
  41075d:	0f 94 c0             	sete   %al
}
  410760:	48 83 c4 18          	add    $0x18,%rsp
  410764:	5b                   	pop    %rbx
  410765:	5d                   	pop    %rbp
  410766:	41 5c                	pop    %r12
  410768:	41 5d                	pop    %r13
  41076a:	41 5e                	pop    %r14
  41076c:	41 5f                	pop    %r15
  41076e:	c3                   	retq   
  41076f:	90                   	nop
 * (See also read_buf()).
 */
local void flush_pending(strm)
    z_streamp strm;
{
    unsigned len = strm->state->pending;
  410770:	4d 8b 5e 38          	mov    0x38(%r14),%r11

    if (len > strm->avail_out) len = strm->avail_out;
  410774:	41 8b 46 20          	mov    0x20(%r14),%eax
 * (See also read_buf()).
 */
local void flush_pending(strm)
    z_streamp strm;
{
    unsigned len = strm->state->pending;
  410778:	45 8b 6b 28          	mov    0x28(%r11),%r13d
  41077c:	44 39 e8             	cmp    %r13d,%eax
  41077f:	44 0f 46 e8          	cmovbe %eax,%r13d

    if (len > strm->avail_out) len = strm->avail_out;
    if (len == 0) return;
  410783:	45 85 ed             	test   %r13d,%r13d
  410786:	0f 85 04 03 00 00    	jne    410a90 <deflate+0x530>
#endif

    /* Flush as much pending output as possible */
    if (s->pending != 0) {
        flush_pending(strm);
        if (strm->avail_out == 0) {
  41078c:	85 c0                	test   %eax,%eax
  41078e:	0f 84 dd 02 00 00    	je     410a71 <deflate+0x511>
               flush != Z_FINISH) {
        ERR_RETURN(strm, Z_BUF_ERROR);
    }

    /* User must not provide more input after the first FINISH: */
    if (s->status == FINISH_STATE && strm->avail_in != 0) {
  410794:	8b 73 08             	mov    0x8(%rbx),%esi
  410797:	81 fe 9a 02 00 00    	cmp    $0x29a,%esi
  41079d:	0f 84 4d 02 00 00    	je     4109f0 <deflate+0x490>
        ERR_RETURN(strm, Z_BUF_ERROR);
    }

    /* Start a new block or continue the current one.
     */
    if (strm->avail_in != 0 || s->lookahead != 0 ||
  4107a3:	45 8b 4e 08          	mov    0x8(%r14),%r9d
  4107a7:	45 85 c9             	test   %r9d,%r9d
  4107aa:	0f 84 d1 fe ff ff    	je     410681 <deflate+0x121>
  4107b0:	e9 6d fe ff ff       	jmpq   410622 <deflate+0xc2>
  4107b5:	0f 1f 00             	nopl   (%rax)
    s->last_flush = flush;

    /* Write the header */
    if (s->status == INIT_STATE) {
#ifdef GZIP
        if (s->wrap == 2) {
  4107b8:	83 7b 2c 02          	cmpl   $0x2,0x2c(%rbx)
  4107bc:	0f 84 01 09 00 00    	je     4110c3 <deflate+0xb63>
            }
        }
        else
#endif
        {
            uInt header = (Z_DEFLATED + ((s->w_bits-8)<<4)) << 8;
  4107c2:	8b 43 48             	mov    0x48(%rbx),%eax
  4107c5:	31 c9                	xor    %ecx,%ecx
  4107c7:	c1 e0 0c             	shl    $0xc,%eax
  4107ca:	2d 00 78 00 00       	sub    $0x7800,%eax
            uInt level_flags;

            if (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2)
  4107cf:	83 bb b8 00 00 00 01 	cmpl   $0x1,0xb8(%rbx)
  4107d6:	0f 8e 84 03 00 00    	jle    410b60 <deflate+0x600>
            else if (s->level == 6)
                level_flags = 2;
            else
                level_flags = 3;
            header |= (level_flags << 6);
            if (s->strstart != 0) header |= PRESET_DICT;
  4107dc:	44 8b 83 9c 00 00 00 	mov    0x9c(%rbx),%r8d
                level_flags = 1;
            else if (s->level == 6)
                level_flags = 2;
            else
                level_flags = 3;
            header |= (level_flags << 6);
  4107e3:	09 c1                	or     %eax,%ecx
            if (s->strstart != 0) header |= PRESET_DICT;
            header += 31 - (header % 31);
  4107e5:	41 b9 85 10 42 08    	mov    $0x8421085,%r9d
            else if (s->level == 6)
                level_flags = 2;
            else
                level_flags = 3;
            header |= (level_flags << 6);
            if (s->strstart != 0) header |= PRESET_DICT;
  4107eb:	89 cf                	mov    %ecx,%edi
 */
local void putShortMSB (s, b)
    deflate_state *s;
    uInt b;
{
    put_byte(s, (Byte)(b >> 8));
  4107ed:	44 8b 53 28          	mov    0x28(%rbx),%r10d
  4107f1:	4c 8b 5b 10          	mov    0x10(%rbx),%r11
            else if (s->level == 6)
                level_flags = 2;
            else
                level_flags = 3;
            header |= (level_flags << 6);
            if (s->strstart != 0) header |= PRESET_DICT;
  4107f5:	83 cf 20             	or     $0x20,%edi
            header += 31 - (header % 31);

            s->status = BUSY_STATE;
  4107f8:	c7 43 08 71 00 00 00 	movl   $0x71,0x8(%rbx)
            else if (s->level == 6)
                level_flags = 2;
            else
                level_flags = 3;
            header |= (level_flags << 6);
            if (s->strstart != 0) header |= PRESET_DICT;
  4107ff:	45 85 c0             	test   %r8d,%r8d
  410802:	0f 45 cf             	cmovne %edi,%ecx
            header += 31 - (header % 31);
  410805:	89 c8                	mov    %ecx,%eax
  410807:	41 f7 e1             	mul    %r9d
  41080a:	29 d1                	sub    %edx,%ecx
  41080c:	d1 e9                	shr    %ecx
  41080e:	01 ca                	add    %ecx,%edx
 */
local void putShortMSB (s, b)
    deflate_state *s;
    uInt b;
{
    put_byte(s, (Byte)(b >> 8));
  410810:	41 8d 4a 01          	lea    0x1(%r10),%ecx
                level_flags = 2;
            else
                level_flags = 3;
            header |= (level_flags << 6);
            if (s->strstart != 0) header |= PRESET_DICT;
            header += 31 - (header % 31);
  410814:	c1 ea 04             	shr    $0x4,%edx
  410817:	41 89 d7             	mov    %edx,%r15d
 */
local void putShortMSB (s, b)
    deflate_state *s;
    uInt b;
{
    put_byte(s, (Byte)(b >> 8));
  41081a:	89 4b 28             	mov    %ecx,0x28(%rbx)
                level_flags = 2;
            else
                level_flags = 3;
            header |= (level_flags << 6);
            if (s->strstart != 0) header |= PRESET_DICT;
            header += 31 - (header % 31);
  41081d:	41 c1 e7 05          	shl    $0x5,%r15d
  410821:	41 29 d7             	sub    %edx,%r15d
  410824:	41 83 c7 1f          	add    $0x1f,%r15d
 */
local void putShortMSB (s, b)
    deflate_state *s;
    uInt b;
{
    put_byte(s, (Byte)(b >> 8));
  410828:	44 89 fe             	mov    %r15d,%esi
  41082b:	c1 ee 08             	shr    $0x8,%esi
  41082e:	43 88 34 13          	mov    %sil,(%r11,%r10,1)
    put_byte(s, (Byte)(b & 0xff));
  410832:	44 8b 43 28          	mov    0x28(%rbx),%r8d
  410836:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
  41083a:	45 8d 48 01          	lea    0x1(%r8),%r9d
  41083e:	44 89 4b 28          	mov    %r9d,0x28(%rbx)
  410842:	46 88 3c 07          	mov    %r15b,(%rdi,%r8,1)

            s->status = BUSY_STATE;
            putShortMSB(s, header);

            /* Save the adler32 of the preset dictionary: */
            if (s->strstart != 0) {
  410846:	8b 83 9c 00 00 00    	mov    0x9c(%rbx),%eax
  41084c:	85 c0                	test   %eax,%eax
  41084e:	74 64                	je     4108b4 <deflate+0x354>
 */
local void putShortMSB (s, b)
    deflate_state *s;
    uInt b;
{
    put_byte(s, (Byte)(b >> 8));
  410850:	44 8b 5b 28          	mov    0x28(%rbx),%r11d
            s->status = BUSY_STATE;
            putShortMSB(s, header);

            /* Save the adler32 of the preset dictionary: */
            if (s->strstart != 0) {
                putShortMSB(s, (uInt)(strm->adler >> 16));
  410854:	49 8b 56 60          	mov    0x60(%r14),%rdx
 */
local void putShortMSB (s, b)
    deflate_state *s;
    uInt b;
{
    put_byte(s, (Byte)(b >> 8));
  410858:	4c 8b 7b 10          	mov    0x10(%rbx),%r15
            s->status = BUSY_STATE;
            putShortMSB(s, header);

            /* Save the adler32 of the preset dictionary: */
            if (s->strstart != 0) {
                putShortMSB(s, (uInt)(strm->adler >> 16));
  41085c:	48 c1 ea 10          	shr    $0x10,%rdx
 */
local void putShortMSB (s, b)
    deflate_state *s;
    uInt b;
{
    put_byte(s, (Byte)(b >> 8));
  410860:	45 8d 53 01          	lea    0x1(%r11),%r10d
  410864:	89 d1                	mov    %edx,%ecx
  410866:	c1 e9 08             	shr    $0x8,%ecx
  410869:	44 89 53 28          	mov    %r10d,0x28(%rbx)
  41086d:	43 88 0c 1f          	mov    %cl,(%r15,%r11,1)
    put_byte(s, (Byte)(b & 0xff));
  410871:	44 8b 43 28          	mov    0x28(%rbx),%r8d
  410875:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
  410879:	41 8d 70 01          	lea    0x1(%r8),%esi
  41087d:	89 73 28             	mov    %esi,0x28(%rbx)
  410880:	42 88 14 07          	mov    %dl,(%rdi,%r8,1)
            putShortMSB(s, header);

            /* Save the adler32 of the preset dictionary: */
            if (s->strstart != 0) {
                putShortMSB(s, (uInt)(strm->adler >> 16));
                putShortMSB(s, (uInt)(strm->adler & 0xffff));
  410884:	45 0f b7 4e 60       	movzwl 0x60(%r14),%r9d
 */
local void putShortMSB (s, b)
    deflate_state *s;
    uInt b;
{
    put_byte(s, (Byte)(b >> 8));
  410889:	8b 43 28             	mov    0x28(%rbx),%eax
  41088c:	48 8b 53 10          	mov    0x10(%rbx),%rdx
  410890:	44 8d 78 01          	lea    0x1(%rax),%r15d
  410894:	45 89 cb             	mov    %r9d,%r11d
  410897:	41 c1 eb 08          	shr    $0x8,%r11d
  41089b:	44 89 7b 28          	mov    %r15d,0x28(%rbx)
  41089f:	44 88 1c 02          	mov    %r11b,(%rdx,%rax,1)
    put_byte(s, (Byte)(b & 0xff));
  4108a3:	8b 4b 28             	mov    0x28(%rbx),%ecx
  4108a6:	4c 8b 53 10          	mov    0x10(%rbx),%r10
  4108aa:	8d 79 01             	lea    0x1(%rcx),%edi
  4108ad:	89 7b 28             	mov    %edi,0x28(%rbx)
  4108b0:	45 88 0c 0a          	mov    %r9b,(%r10,%rcx,1)
            /* Save the adler32 of the preset dictionary: */
            if (s->strstart != 0) {
                putShortMSB(s, (uInt)(strm->adler >> 16));
                putShortMSB(s, (uInt)(strm->adler & 0xffff));
            }
            strm->adler = adler32(0L, Z_NULL, 0);
  4108b4:	31 d2                	xor    %edx,%edx
  4108b6:	31 f6                	xor    %esi,%esi
  4108b8:	31 ff                	xor    %edi,%edi
  4108ba:	e8 71 fa 00 00       	callq  420330 <adler32>
  4108bf:	49 89 46 60          	mov    %rax,0x60(%r14)
  4108c3:	8b 43 08             	mov    0x8(%rbx),%eax
        }
    }
#ifdef GZIP
    if (s->status == EXTRA_STATE) {
  4108c6:	83 f8 45             	cmp    $0x45,%eax
  4108c9:	0f 85 18 fd ff ff    	jne    4105e7 <deflate+0x87>
  4108cf:	48 8b 43 30          	mov    0x30(%rbx),%rax
        if (s->gzhead->extra != NULL) {
  4108d3:	48 83 78 18 00       	cmpq   $0x0,0x18(%rax)
  4108d8:	0f 84 b2 06 00 00    	je     410f90 <deflate+0xa30>
            uInt beg = s->pending;  /* start of bytes to update crc */

            while (s->gzindex < (s->gzhead->extra_len & 0xffff)) {
  4108de:	8b 4b 38             	mov    0x38(%rbx),%ecx
  4108e1:	8b 70 20             	mov    0x20(%rax),%esi
        }
    }
#ifdef GZIP
    if (s->status == EXTRA_STATE) {
        if (s->gzhead->extra != NULL) {
            uInt beg = s->pending;  /* start of bytes to update crc */
  4108e4:	8b 53 28             	mov    0x28(%rbx),%edx

            while (s->gzindex < (s->gzhead->extra_len & 0xffff)) {
  4108e7:	0f b7 fe             	movzwl %si,%edi
  4108ea:	39 cf                	cmp    %ecx,%edi
  4108ec:	0f 86 d6 00 00 00    	jbe    4109c8 <deflate+0x468>
  4108f2:	41 89 d0             	mov    %edx,%r8d
  4108f5:	89 d7                	mov    %edx,%edi
  4108f7:	eb 3c                	jmp    410935 <deflate+0x3d5>
  4108f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
                    flush_pending(strm);
                    beg = s->pending;
                    if (s->pending == s->pending_buf_size)
                        break;
                }
                put_byte(s, s->gzhead->extra[s->gzindex]);
  410900:	83 c7 01             	add    $0x1,%edi
  410903:	4c 8b 4b 10          	mov    0x10(%rbx),%r9
  410907:	89 7b 28             	mov    %edi,0x28(%rbx)
  41090a:	48 8b 78 18          	mov    0x18(%rax),%rdi
  41090e:	44 0f b6 3c 0f       	movzbl (%rdi,%rcx,1),%r15d
  410913:	45 88 3c 31          	mov    %r15b,(%r9,%rsi,1)
#ifdef GZIP
    if (s->status == EXTRA_STATE) {
        if (s->gzhead->extra != NULL) {
            uInt beg = s->pending;  /* start of bytes to update crc */

            while (s->gzindex < (s->gzhead->extra_len & 0xffff)) {
  410917:	48 8b 43 30          	mov    0x30(%rbx),%rax
                    beg = s->pending;
                    if (s->pending == s->pending_buf_size)
                        break;
                }
                put_byte(s, s->gzhead->extra[s->gzindex]);
                s->gzindex++;
  41091b:	44 8b 5b 38          	mov    0x38(%rbx),%r11d
#ifdef GZIP
    if (s->status == EXTRA_STATE) {
        if (s->gzhead->extra != NULL) {
            uInt beg = s->pending;  /* start of bytes to update crc */

            while (s->gzindex < (s->gzhead->extra_len & 0xffff)) {
  41091f:	8b 70 20             	mov    0x20(%rax),%esi
                    beg = s->pending;
                    if (s->pending == s->pending_buf_size)
                        break;
                }
                put_byte(s, s->gzhead->extra[s->gzindex]);
                s->gzindex++;
  410922:	41 8d 4b 01          	lea    0x1(%r11),%ecx
#ifdef GZIP
    if (s->status == EXTRA_STATE) {
        if (s->gzhead->extra != NULL) {
            uInt beg = s->pending;  /* start of bytes to update crc */

            while (s->gzindex < (s->gzhead->extra_len & 0xffff)) {
  410926:	44 0f b7 d6          	movzwl %si,%r10d
                    beg = s->pending;
                    if (s->pending == s->pending_buf_size)
                        break;
                }
                put_byte(s, s->gzhead->extra[s->gzindex]);
                s->gzindex++;
  41092a:	89 4b 38             	mov    %ecx,0x38(%rbx)
#ifdef GZIP
    if (s->status == EXTRA_STATE) {
        if (s->gzhead->extra != NULL) {
            uInt beg = s->pending;  /* start of bytes to update crc */

            while (s->gzindex < (s->gzhead->extra_len & 0xffff)) {
  41092d:	41 39 ca             	cmp    %ecx,%r10d
  410930:	76 5e                	jbe    410990 <deflate+0x430>
  410932:	8b 7b 28             	mov    0x28(%rbx),%edi
                if (s->pending == s->pending_buf_size) {
  410935:	89 fe                	mov    %edi,%esi
  410937:	48 3b 73 18          	cmp    0x18(%rbx),%rsi
  41093b:	75 c3                	jne    410900 <deflate+0x3a0>
                    if (s->gzhead->hcrc && s->pending > beg)
  41093d:	39 fa                	cmp    %edi,%edx
  41093f:	73 0d                	jae    41094e <deflate+0x3ee>
  410941:	44 8b 78 44          	mov    0x44(%rax),%r15d
  410945:	45 85 ff             	test   %r15d,%r15d
  410948:	0f 85 22 05 00 00    	jne    410e70 <deflate+0x910>
 * (See also read_buf()).
 */
local void flush_pending(strm)
    z_streamp strm;
{
    unsigned len = strm->state->pending;
  41094e:	49 8b 76 38          	mov    0x38(%r14),%rsi

    if (len > strm->avail_out) len = strm->avail_out;
  410952:	45 8b 5e 20          	mov    0x20(%r14),%r11d
 * (See also read_buf()).
 */
local void flush_pending(strm)
    z_streamp strm;
{
    unsigned len = strm->state->pending;
  410956:	44 8b 7e 28          	mov    0x28(%rsi),%r15d
  41095a:	45 39 fb             	cmp    %r15d,%r11d
  41095d:	45 0f 46 fb          	cmovbe %r11d,%r15d

    if (len > strm->avail_out) len = strm->avail_out;
    if (len == 0) return;
  410961:	45 85 ff             	test   %r15d,%r15d
  410964:	0f 85 b6 02 00 00    	jne    410c20 <deflate+0x6c0>
                if (s->pending == s->pending_buf_size) {
                    if (s->gzhead->hcrc && s->pending > beg)
                        strm->adler = crc32(strm->adler, s->pending_buf + beg,
                                            s->pending - beg);
                    flush_pending(strm);
                    beg = s->pending;
  41096a:	8b 53 28             	mov    0x28(%rbx),%edx
                    if (s->pending == s->pending_buf_size)
  41096d:	89 d6                	mov    %edx,%esi
  41096f:	48 3b 73 18          	cmp    0x18(%rbx),%rsi
                if (s->pending == s->pending_buf_size) {
                    if (s->gzhead->hcrc && s->pending > beg)
                        strm->adler = crc32(strm->adler, s->pending_buf + beg,
                                            s->pending - beg);
                    flush_pending(strm);
                    beg = s->pending;
  410973:	41 89 d0             	mov    %edx,%r8d
                    if (s->pending == s->pending_buf_size)
  410976:	0f 84 f4 05 00 00    	je     410f70 <deflate+0xa10>
  41097c:	48 8b 43 30          	mov    0x30(%rbx),%rax
  410980:	8b 4b 38             	mov    0x38(%rbx),%ecx
  410983:	89 d7                	mov    %edx,%edi
  410985:	e9 76 ff ff ff       	jmpq   410900 <deflate+0x3a0>
  41098a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
                        break;
                }
                put_byte(s, s->gzhead->extra[s->gzindex]);
                s->gzindex++;
            }
            if (s->gzhead->hcrc && s->pending > beg)
  410990:	8b 50 44             	mov    0x44(%rax),%edx
  410993:	85 d2                	test   %edx,%edx
  410995:	8b 53 28             	mov    0x28(%rbx),%edx
  410998:	74 2e                	je     4109c8 <deflate+0x468>
  41099a:	44 39 c2             	cmp    %r8d,%edx
  41099d:	76 29                	jbe    4109c8 <deflate+0x468>
                strm->adler = crc32(strm->adler, s->pending_buf + beg,
  41099f:	4c 89 c6             	mov    %r8,%rsi
  4109a2:	48 03 73 10          	add    0x10(%rbx),%rsi
  4109a6:	49 8b 7e 60          	mov    0x60(%r14),%rdi
  4109aa:	44 29 c2             	sub    %r8d,%edx
  4109ad:	e8 9e 01 01 00       	callq  420b50 <crc32>
  4109b2:	49 89 46 60          	mov    %rax,0x60(%r14)
  4109b6:	48 8b 43 30          	mov    0x30(%rbx),%rax
  4109ba:	8b 53 28             	mov    0x28(%rbx),%edx
  4109bd:	8b 4b 38             	mov    0x38(%rbx),%ecx
  4109c0:	8b 70 20             	mov    0x20(%rax),%esi
  4109c3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
                                    s->pending - beg);
            if (s->gzindex == s->gzhead->extra_len) {
  4109c8:	39 f1                	cmp    %esi,%ecx
  4109ca:	0f 84 00 01 00 00    	je     410ad0 <deflate+0x570>
  4109d0:	8b 43 08             	mov    0x8(%rbx),%eax
            }
        }
        else
            s->status = NAME_STATE;
    }
    if (s->status == NAME_STATE) {
  4109d3:	83 f8 49             	cmp    $0x49,%eax
  4109d6:	0f 85 17 fc ff ff    	jne    4105f3 <deflate+0x93>
  4109dc:	0f 1f 40 00          	nopl   0x0(%rax)
  4109e0:	48 8b 43 30          	mov    0x30(%rbx),%rax
  4109e4:	e9 f5 00 00 00       	jmpq   410ade <deflate+0x57e>
  4109e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
               flush != Z_FINISH) {
        ERR_RETURN(strm, Z_BUF_ERROR);
    }

    /* User must not provide more input after the first FINISH: */
    if (s->status == FINISH_STATE && strm->avail_in != 0) {
  4109f0:	41 8b 4e 08          	mov    0x8(%r14),%ecx
  4109f4:	85 c9                	test   %ecx,%ecx
  4109f6:	0f 84 85 fc ff ff    	je     410681 <deflate+0x121>
  4109fc:	0f 1f 40 00          	nopl   0x0(%rax)
        ERR_RETURN(strm, Z_BUF_ERROR);
  410a00:	48 8b 35 71 88 02 00 	mov    0x28871(%rip),%rsi        # 439278 <z_errmsg+0x38>
  410a07:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
  410a0c:	49 89 76 30          	mov    %rsi,0x30(%r14)
    /* If avail_out is zero, the application will call deflate again
     * to flush the rest.
     */
    if (s->wrap > 0) s->wrap = -s->wrap; /* write the trailer only once! */
    return s->pending != 0 ? Z_OK : Z_STREAM_END;
}
  410a10:	48 83 c4 18          	add    $0x18,%rsp
  410a14:	5b                   	pop    %rbx
  410a15:	5d                   	pop    %rbp
  410a16:	41 5c                	pop    %r12
  410a18:	41 5d                	pop    %r13
  410a1a:	41 5e                	pop    %r14
  410a1c:	41 5f                	pop    %r15
  410a1e:	c3                   	retq   
  410a1f:	90                   	nop
        if (bstate == finish_started || bstate == finish_done) {
            s->status = FINISH_STATE;
        }
        if (bstate == need_more || bstate == finish_started) {
            if (strm->avail_out == 0) {
                s->last_flush = -1; /* avoid BUF_ERROR next call, see above */
  410a20:	c7 43 40 ff ff ff ff 	movl   $0xffffffff,0x40(%rbx)
  410a27:	e9 2c fc ff ff       	jmpq   410658 <deflate+0xf8>
  410a2c:	0f 1f 40 00          	nopl   0x0(%rax)
             * ensures that for a very small output buffer, we emit at most
             * one empty block.
             */
        }
        if (bstate == block_done) {
            if (flush == Z_PARTIAL_FLUSH) {
  410a30:	83 fd 01             	cmp    $0x1,%ebp
  410a33:	0f 84 ba 08 00 00    	je     4112f3 <deflate+0xd93>
                _tr_align(s);
            } else { /* FULL_FLUSH or SYNC_FLUSH */
                _tr_stored_block(s, (char*)0, 0L, 0);
  410a39:	31 c9                	xor    %ecx,%ecx
  410a3b:	31 d2                	xor    %edx,%edx
  410a3d:	31 f6                	xor    %esi,%esi
  410a3f:	48 89 df             	mov    %rbx,%rdi
  410a42:	e8 79 3a 00 00       	callq  4144c0 <_tr_stored_block>
                /* For a full flush, this empty block will be recognized
                 * as a special marker by inflate_sync().
                 */
                if (flush == Z_FULL_FLUSH) {
  410a47:	83 fd 03             	cmp    $0x3,%ebp
  410a4a:	0f 84 25 09 00 00    	je     411375 <deflate+0xe15>
 * (See also read_buf()).
 */
local void flush_pending(strm)
    z_streamp strm;
{
    unsigned len = strm->state->pending;
  410a50:	4d 8b 7e 38          	mov    0x38(%r14),%r15

    if (len > strm->avail_out) len = strm->avail_out;
  410a54:	41 8b 46 20          	mov    0x20(%r14),%eax
 * (See also read_buf()).
 */
local void flush_pending(strm)
    z_streamp strm;
{
    unsigned len = strm->state->pending;
  410a58:	41 8b 6f 28          	mov    0x28(%r15),%ebp
  410a5c:	39 e8                	cmp    %ebp,%eax
  410a5e:	0f 46 e8             	cmovbe %eax,%ebp

    if (len > strm->avail_out) len = strm->avail_out;
    if (len == 0) return;
  410a61:	85 ed                	test   %ebp,%ebp
  410a63:	0f 85 43 08 00 00    	jne    4112ac <deflate+0xd4c>
                if (flush == Z_FULL_FLUSH) {
                    CLEAR_HASH(s);             /* forget history */
                }
            }
            flush_pending(strm);
            if (strm->avail_out == 0) {
  410a69:	85 c0                	test   %eax,%eax
  410a6b:	0f 85 38 fc ff ff    	jne    4106a9 <deflate+0x149>
              s->last_flush = -1; /* avoid BUF_ERROR at next call, see above */
  410a71:	c7 43 40 ff ff ff ff 	movl   $0xffffffff,0x40(%rbx)
    /* If avail_out is zero, the application will call deflate again
     * to flush the rest.
     */
    if (s->wrap > 0) s->wrap = -s->wrap; /* write the trailer only once! */
    return s->pending != 0 ? Z_OK : Z_STREAM_END;
}
  410a78:	48 83 c4 18          	add    $0x18,%rsp
  410a7c:	5b                   	pop    %rbx
  410a7d:	5d                   	pop    %rbp
  410a7e:	41 5c                	pop    %r12
  410a80:	41 5d                	pop    %r13
  410a82:	41 5e                	pop    %r14
  410a84:	41 5f                	pop    %r15
  410a86:	c3                   	retq   
  410a87:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  410a8e:	00 00 

__fortify_function void *
__NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
	       size_t __len))
{
  return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
  410a90:	49 8b 7e 18          	mov    0x18(%r14),%rdi
  410a94:	49 8b 73 20          	mov    0x20(%r11),%rsi
    unsigned len = strm->state->pending;

    if (len > strm->avail_out) len = strm->avail_out;
    if (len == 0) return;

    zmemcpy(strm->next_out, strm->state->pending_out, len);
  410a98:	45 89 ef             	mov    %r13d,%r15d
  410a9b:	4c 89 fa             	mov    %r15,%rdx
  410a9e:	e8 4d 65 ff ff       	callq  406ff0 <memcpy@plt>
    strm->next_out  += len;
    strm->state->pending_out  += len;
  410aa3:	49 8b 7e 38          	mov    0x38(%r14),%rdi

    if (len > strm->avail_out) len = strm->avail_out;
    if (len == 0) return;

    zmemcpy(strm->next_out, strm->state->pending_out, len);
    strm->next_out  += len;
  410aa7:	4d 01 7e 18          	add    %r15,0x18(%r14)
    strm->state->pending_out  += len;
  410aab:	4c 01 7f 20          	add    %r15,0x20(%rdi)
    strm->total_out += len;
  410aaf:	4d 01 7e 28          	add    %r15,0x28(%r14)
    strm->avail_out  -= len;
  410ab3:	45 29 6e 20          	sub    %r13d,0x20(%r14)
    strm->state->pending -= len;
    if (strm->state->pending == 0) {
  410ab7:	44 29 6f 28          	sub    %r13d,0x28(%rdi)
  410abb:	75 08                	jne    410ac5 <deflate+0x565>
        strm->state->pending_out = strm->state->pending_buf;
  410abd:	4c 8b 57 10          	mov    0x10(%rdi),%r10
  410ac1:	4c 89 57 20          	mov    %r10,0x20(%rdi)
  410ac5:	41 8b 46 20          	mov    0x20(%r14),%eax
  410ac9:	e9 be fc ff ff       	jmpq   41078c <deflate+0x22c>
  410ace:	66 90                	xchg   %ax,%ax
            }
            if (s->gzhead->hcrc && s->pending > beg)
                strm->adler = crc32(strm->adler, s->pending_buf + beg,
                                    s->pending - beg);
            if (s->gzindex == s->gzhead->extra_len) {
                s->gzindex = 0;
  410ad0:	c7 43 38 00 00 00 00 	movl   $0x0,0x38(%rbx)
                s->status = NAME_STATE;
  410ad7:	c7 43 08 49 00 00 00 	movl   $0x49,0x8(%rbx)
        }
        else
            s->status = NAME_STATE;
    }
    if (s->status == NAME_STATE) {
        if (s->gzhead->name != NULL) {
  410ade:	48 83 78 28 00       	cmpq   $0x0,0x28(%rax)
  410ae3:	0f 84 b7 04 00 00    	je     410fa0 <deflate+0xa40>
            uInt beg = s->pending;  /* start of bytes to update crc */
  410ae9:	89 d6                	mov    %edx,%esi
  410aeb:	89 f2                	mov    %esi,%edx
  410aed:	eb 33                	jmp    410b22 <deflate+0x5c2>
  410aef:	90                   	nop
                    if (s->pending == s->pending_buf_size) {
                        val = 1;
                        break;
                    }
                }
                val = s->gzhead->name[s->gzindex++];
  410af0:	48 8b 78 28          	mov    0x28(%rax),%rdi
  410af4:	8b 43 38             	mov    0x38(%rbx),%eax
                put_byte(s, val);
  410af7:	83 c2 01             	add    $0x1,%edx
  410afa:	4c 8b 5b 10          	mov    0x10(%rbx),%r11
                    if (s->pending == s->pending_buf_size) {
                        val = 1;
                        break;
                    }
                }
                val = s->gzhead->name[s->gzindex++];
  410afe:	44 8d 40 01          	lea    0x1(%rax),%r8d
  410b02:	44 89 43 38          	mov    %r8d,0x38(%rbx)
  410b06:	44 0f b6 3c 07       	movzbl (%rdi,%rax,1),%r15d
                put_byte(s, val);
  410b0b:	89 53 28             	mov    %edx,0x28(%rbx)
            } while (val != 0);
  410b0e:	45 84 ff             	test   %r15b,%r15b
                        val = 1;
                        break;
                    }
                }
                val = s->gzhead->name[s->gzindex++];
                put_byte(s, val);
  410b11:	47 88 3c 0b          	mov    %r15b,(%r11,%r9,1)
            } while (val != 0);
  410b15:	0f 84 55 01 00 00    	je     410c70 <deflate+0x710>
  410b1b:	8b 53 28             	mov    0x28(%rbx),%edx
  410b1e:	48 8b 43 30          	mov    0x30(%rbx),%rax
        if (s->gzhead->name != NULL) {
            uInt beg = s->pending;  /* start of bytes to update crc */
            int val;

            do {
                if (s->pending == s->pending_buf_size) {
  410b22:	41 89 d1             	mov    %edx,%r9d
  410b25:	4c 3b 4b 18          	cmp    0x18(%rbx),%r9
  410b29:	75 c5                	jne    410af0 <deflate+0x590>
                    if (s->gzhead->hcrc && s->pending > beg)
  410b2b:	39 d6                	cmp    %edx,%esi
  410b2d:	8b 40 44             	mov    0x44(%rax),%eax
  410b30:	73 04                	jae    410b36 <deflate+0x5d6>
  410b32:	85 c0                	test   %eax,%eax
  410b34:	75 5a                	jne    410b90 <deflate+0x630>
 * (See also read_buf()).
 */
local void flush_pending(strm)
    z_streamp strm;
{
    unsigned len = strm->state->pending;
  410b36:	4d 8b 4e 38          	mov    0x38(%r14),%r9

    if (len > strm->avail_out) len = strm->avail_out;
  410b3a:	45 8b 5e 20          	mov    0x20(%r14),%r11d
 * (See also read_buf()).
 */
local void flush_pending(strm)
    z_streamp strm;
{
    unsigned len = strm->state->pending;
  410b3e:	45 8b 79 28          	mov    0x28(%r9),%r15d
  410b42:	45 39 fb             	cmp    %r15d,%r11d
  410b45:	45 0f 46 fb          	cmovbe %r11d,%r15d

    if (len > strm->avail_out) len = strm->avail_out;
    if (len == 0) return;
  410b49:	45 85 ff             	test   %r15d,%r15d
  410b4c:	75 72                	jne    410bc0 <deflate+0x660>
  410b4e:	8b 43 08             	mov    0x8(%rbx),%eax
  410b51:	e9 9d fa ff ff       	jmpq   4105f3 <deflate+0x93>
  410b56:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  410b5d:	00 00 00 
#endif
        {
            uInt header = (Z_DEFLATED + ((s->w_bits-8)<<4)) << 8;
            uInt level_flags;

            if (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2)
  410b60:	8b 93 b4 00 00 00    	mov    0xb4(%rbx),%edx
  410b66:	83 fa 01             	cmp    $0x1,%edx
  410b69:	0f 8e 6d fc ff ff    	jle    4107dc <deflate+0x27c>
                level_flags = 0;
            else if (s->level < 6)
  410b6f:	83 fa 05             	cmp    $0x5,%edx
  410b72:	b1 40                	mov    $0x40,%cl
  410b74:	0f 8e 62 fc ff ff    	jle    4107dc <deflate+0x27c>
                level_flags = 1;
            else if (s->level == 6)
  410b7a:	83 fa 06             	cmp    $0x6,%edx
  410b7d:	b1 c0                	mov    $0xc0,%cl
  410b7f:	be 80 00 00 00       	mov    $0x80,%esi
  410b84:	0f 44 ce             	cmove  %esi,%ecx
  410b87:	e9 50 fc ff ff       	jmpq   4107dc <deflate+0x27c>
  410b8c:	0f 1f 40 00          	nopl   0x0(%rax)
            int val;

            do {
                if (s->pending == s->pending_buf_size) {
                    if (s->gzhead->hcrc && s->pending > beg)
                        strm->adler = crc32(strm->adler, s->pending_buf + beg,
  410b90:	29 f2                	sub    %esi,%edx
  410b92:	48 03 73 10          	add    0x10(%rbx),%rsi
  410b96:	49 8b 7e 60          	mov    0x60(%r14),%rdi
  410b9a:	e8 b1 ff 00 00       	callq  420b50 <crc32>
 * (See also read_buf()).
 */
local void flush_pending(strm)
    z_streamp strm;
{
    unsigned len = strm->state->pending;
  410b9f:	4d 8b 4e 38          	mov    0x38(%r14),%r9

    if (len > strm->avail_out) len = strm->avail_out;
  410ba3:	45 8b 46 20          	mov    0x20(%r14),%r8d
            int val;

            do {
                if (s->pending == s->pending_buf_size) {
                    if (s->gzhead->hcrc && s->pending > beg)
                        strm->adler = crc32(strm->adler, s->pending_buf + beg,
  410ba7:	49 89 46 60          	mov    %rax,0x60(%r14)
 * (See also read_buf()).
 */
local void flush_pending(strm)
    z_streamp strm;
{
    unsigned len = strm->state->pending;
  410bab:	45 8b 79 28          	mov    0x28(%r9),%r15d
  410baf:	45 39 f8             	cmp    %r15d,%r8d
  410bb2:	45 0f 46 f8          	cmovbe %r8d,%r15d

    if (len > strm->avail_out) len = strm->avail_out;
    if (len == 0) return;
  410bb6:	45 85 ff             	test   %r15d,%r15d
  410bb9:	74 44                	je     410bff <deflate+0x69f>
  410bbb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  410bc0:	49 8b 7e 18          	mov    0x18(%r14),%rdi
  410bc4:	49 8b 71 20          	mov    0x20(%r9),%rsi

    zmemcpy(strm->next_out, strm->state->pending_out, len);
  410bc8:	45 89 fa             	mov    %r15d,%r10d
  410bcb:	4c 89 d2             	mov    %r10,%rdx
  410bce:	4c 89 54 24 08       	mov    %r10,0x8(%rsp)
  410bd3:	e8 18 64 ff ff       	callq  406ff0 <memcpy@plt>
    strm->next_out  += len;
    strm->state->pending_out  += len;
  410bd8:	49 8b 4e 38          	mov    0x38(%r14),%rcx

    if (len > strm->avail_out) len = strm->avail_out;
    if (len == 0) return;

    zmemcpy(strm->next_out, strm->state->pending_out, len);
    strm->next_out  += len;
  410bdc:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  410be1:	49 01 56 18          	add    %rdx,0x18(%r14)
    strm->state->pending_out  += len;
  410be5:	48 01 51 20          	add    %rdx,0x20(%rcx)
    strm->total_out += len;
  410be9:	49 01 56 28          	add    %rdx,0x28(%r14)
    strm->avail_out  -= len;
  410bed:	45 29 7e 20          	sub    %r15d,0x20(%r14)
    strm->state->pending -= len;
    if (strm->state->pending == 0) {
  410bf1:	44 29 79 28          	sub    %r15d,0x28(%rcx)
  410bf5:	75 08                	jne    410bff <deflate+0x69f>
        strm->state->pending_out = strm->state->pending_buf;
  410bf7:	48 8b 71 10          	mov    0x10(%rcx),%rsi
  410bfb:	48 89 71 20          	mov    %rsi,0x20(%rcx)
                if (s->pending == s->pending_buf_size) {
                    if (s->gzhead->hcrc && s->pending > beg)
                        strm->adler = crc32(strm->adler, s->pending_buf + beg,
                                            s->pending - beg);
                    flush_pending(strm);
                    beg = s->pending;
  410bff:	8b 73 28             	mov    0x28(%rbx),%esi
                    if (s->pending == s->pending_buf_size) {
  410c02:	41 89 f1             	mov    %esi,%r9d
  410c05:	4c 3b 4b 18          	cmp    0x18(%rbx),%r9
  410c09:	0f 84 51 03 00 00    	je     410f60 <deflate+0xa00>
  410c0f:	48 8b 43 30          	mov    0x30(%rbx),%rax
                if (s->pending == s->pending_buf_size) {
                    if (s->gzhead->hcrc && s->pending > beg)
                        strm->adler = crc32(strm->adler, s->pending_buf + beg,
                                            s->pending - beg);
                    flush_pending(strm);
                    beg = s->pending;
  410c13:	89 f2                	mov    %esi,%edx
  410c15:	e9 d6 fe ff ff       	jmpq   410af0 <deflate+0x590>
  410c1a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  410c20:	49 8b 7e 18          	mov    0x18(%r14),%rdi
  410c24:	48 8b 76 20          	mov    0x20(%rsi),%rsi
    unsigned len = strm->state->pending;

    if (len > strm->avail_out) len = strm->avail_out;
    if (len == 0) return;

    zmemcpy(strm->next_out, strm->state->pending_out, len);
  410c28:	44 89 f8             	mov    %r15d,%eax
  410c2b:	48 89 c2             	mov    %rax,%rdx
  410c2e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  410c33:	e8 b8 63 ff ff       	callq  406ff0 <memcpy@plt>
    strm->next_out  += len;
    strm->state->pending_out  += len;
  410c38:	4d 8b 56 38          	mov    0x38(%r14),%r10

    if (len > strm->avail_out) len = strm->avail_out;
    if (len == 0) return;

    zmemcpy(strm->next_out, strm->state->pending_out, len);
    strm->next_out  += len;
  410c3c:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  410c41:	49 01 56 18          	add    %rdx,0x18(%r14)
    strm->state->pending_out  += len;
  410c45:	49 01 52 20          	add    %rdx,0x20(%r10)
    strm->total_out += len;
  410c49:	49 01 56 28          	add    %rdx,0x28(%r14)
    strm->avail_out  -= len;
  410c4d:	45 29 7e 20          	sub    %r15d,0x20(%r14)
    strm->state->pending -= len;
    if (strm->state->pending == 0) {
  410c51:	45 29 7a 28          	sub    %r15d,0x28(%r10)
  410c55:	0f 85 0f fd ff ff    	jne    41096a <deflate+0x40a>
        strm->state->pending_out = strm->state->pending_buf;
  410c5b:	49 8b 4a 10          	mov    0x10(%r10),%rcx
  410c5f:	49 89 4a 20          	mov    %rcx,0x20(%r10)
  410c63:	e9 02 fd ff ff       	jmpq   41096a <deflate+0x40a>
  410c68:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  410c6f:	00 
                    }
                }
                val = s->gzhead->name[s->gzindex++];
                put_byte(s, val);
            } while (val != 0);
            if (s->gzhead->hcrc && s->pending > beg)
  410c70:	48 8b 43 30          	mov    0x30(%rbx),%rax
  410c74:	8b 53 28             	mov    0x28(%rbx),%edx
  410c77:	44 8b 50 44          	mov    0x44(%rax),%r10d
  410c7b:	45 85 d2             	test   %r10d,%r10d
  410c7e:	74 20                	je     410ca0 <deflate+0x740>
  410c80:	39 f2                	cmp    %esi,%edx
  410c82:	76 1c                	jbe    410ca0 <deflate+0x740>
                strm->adler = crc32(strm->adler, s->pending_buf + beg,
  410c84:	29 f2                	sub    %esi,%edx
  410c86:	48 03 73 10          	add    0x10(%rbx),%rsi
  410c8a:	49 8b 7e 60          	mov    0x60(%r14),%rdi
  410c8e:	e8 bd fe 00 00       	callq  420b50 <crc32>
  410c93:	8b 53 28             	mov    0x28(%rbx),%edx
  410c96:	49 89 46 60          	mov    %rax,0x60(%r14)
  410c9a:	48 8b 43 30          	mov    0x30(%rbx),%rax
  410c9e:	66 90                	xchg   %ax,%ax
                                    s->pending - beg);
            if (val == 0) {
                s->gzindex = 0;
  410ca0:	c7 43 38 00 00 00 00 	movl   $0x0,0x38(%rbx)
                s->status = COMMENT_STATE;
  410ca7:	c7 43 08 5b 00 00 00 	movl   $0x5b,0x8(%rbx)
            }
        }
        else
            s->status = COMMENT_STATE;
    }
    if (s->status == COMMENT_STATE) {
  410cae:	89 d6                	mov    %edx,%esi
        if (s->gzhead->comment != NULL) {
  410cb0:	48 83 78 38 00       	cmpq   $0x0,0x38(%rax)
  410cb5:	0f 84 c5 02 00 00    	je     410f80 <deflate+0xa20>
  410cbb:	89 f2                	mov    %esi,%edx
  410cbd:	eb 33                	jmp    410cf2 <deflate+0x792>
  410cbf:	90                   	nop
                    if (s->pending == s->pending_buf_size) {
                        val = 1;
                        break;
                    }
                }
                val = s->gzhead->comment[s->gzindex++];
  410cc0:	8b 4b 38             	mov    0x38(%rbx),%ecx
  410cc3:	48 8b 78 38          	mov    0x38(%rax),%rdi
                put_byte(s, val);
  410cc7:	83 c2 01             	add    $0x1,%edx
  410cca:	4c 8b 7b 10          	mov    0x10(%rbx),%r15
                    if (s->pending == s->pending_buf_size) {
                        val = 1;
                        break;
                    }
                }
                val = s->gzhead->comment[s->gzindex++];
  410cce:	44 8d 41 01          	lea    0x1(%rcx),%r8d
  410cd2:	44 89 43 38          	mov    %r8d,0x38(%rbx)
  410cd6:	44 0f b6 1c 0f       	movzbl (%rdi,%rcx,1),%r11d
                put_byte(s, val);
  410cdb:	89 53 28             	mov    %edx,0x28(%rbx)
            } while (val != 0);
  410cde:	45 84 db             	test   %r11b,%r11b
                        val = 1;
                        break;
                    }
                }
                val = s->gzhead->comment[s->gzindex++];
                put_byte(s, val);
  410ce1:	47 88 1c 0f          	mov    %r11b,(%r15,%r9,1)
            } while (val != 0);
  410ce5:	0f 84 d5 00 00 00    	je     410dc0 <deflate+0x860>
  410ceb:	8b 53 28             	mov    0x28(%rbx),%edx
  410cee:	48 8b 43 30          	mov    0x30(%rbx),%rax
        if (s->gzhead->comment != NULL) {
            uInt beg = s->pending;  /* start of bytes to update crc */
            int val;

            do {
                if (s->pending == s->pending_buf_size) {
  410cf2:	41 89 d1             	mov    %edx,%r9d
  410cf5:	4c 3b 4b 18          	cmp    0x18(%rbx),%r9
  410cf9:	75 c5                	jne    410cc0 <deflate+0x760>
                    if (s->gzhead->hcrc && s->pending > beg)
  410cfb:	39 d6                	cmp    %edx,%esi
  410cfd:	8b 78 44             	mov    0x44(%rax),%edi
  410d00:	73 04                	jae    410d06 <deflate+0x7a6>
  410d02:	85 ff                	test   %edi,%edi
  410d04:	75 2a                	jne    410d30 <deflate+0x7d0>
 * (See also read_buf()).
 */
local void flush_pending(strm)
    z_streamp strm;
{
    unsigned len = strm->state->pending;
  410d06:	49 8b 4e 38          	mov    0x38(%r14),%rcx

    if (len > strm->avail_out) len = strm->avail_out;
  410d0a:	45 8b 7e 20          	mov    0x20(%r14),%r15d
 * (See also read_buf()).
 */
local void flush_pending(strm)
    z_streamp strm;
{
    unsigned len = strm->state->pending;
  410d0e:	44 8b 59 28          	mov    0x28(%rcx),%r11d
  410d12:	45 39 df             	cmp    %r11d,%r15d
  410d15:	45 0f 47 fb          	cmova  %r11d,%r15d

    if (len > strm->avail_out) len = strm->avail_out;
    if (len == 0) return;
  410d19:	45 85 ff             	test   %r15d,%r15d
  410d1c:	75 42                	jne    410d60 <deflate+0x800>
                    }
                }
                val = s->gzhead->comment[s->gzindex++];
                put_byte(s, val);
            } while (val != 0);
            if (s->gzhead->hcrc && s->pending > beg)
  410d1e:	85 ff                	test   %edi,%edi
  410d20:	0f 84 97 01 00 00    	je     410ebd <deflate+0x95d>
  410d26:	8b 43 08             	mov    0x8(%rbx),%eax
  410d29:	e9 ce f8 ff ff       	jmpq   4105fc <deflate+0x9c>
  410d2e:	66 90                	xchg   %ax,%ax
            int val;

            do {
                if (s->pending == s->pending_buf_size) {
                    if (s->gzhead->hcrc && s->pending > beg)
                        strm->adler = crc32(strm->adler, s->pending_buf + beg,
  410d30:	29 f2                	sub    %esi,%edx
  410d32:	48 03 73 10          	add    0x10(%rbx),%rsi
  410d36:	49 8b 7e 60          	mov    0x60(%r14),%rdi
  410d3a:	e8 11 fe 00 00       	callq  420b50 <crc32>
 * (See also read_buf()).
 */
local void flush_pending(strm)
    z_streamp strm;
{
    unsigned len = strm->state->pending;
  410d3f:	49 8b 4e 38          	mov    0x38(%r14),%rcx

    if (len > strm->avail_out) len = strm->avail_out;
  410d43:	45 8b 7e 20          	mov    0x20(%r14),%r15d
            int val;

            do {
                if (s->pending == s->pending_buf_size) {
                    if (s->gzhead->hcrc && s->pending > beg)
                        strm->adler = crc32(strm->adler, s->pending_buf + beg,
  410d47:	49 89 46 60          	mov    %rax,0x60(%r14)
 * (See also read_buf()).
 */
local void flush_pending(strm)
    z_streamp strm;
{
    unsigned len = strm->state->pending;
  410d4b:	44 8b 41 28          	mov    0x28(%rcx),%r8d
  410d4f:	45 39 c7             	cmp    %r8d,%r15d
  410d52:	45 0f 47 f8          	cmova  %r8d,%r15d

    if (len > strm->avail_out) len = strm->avail_out;
    if (len == 0) return;
  410d56:	45 85 ff             	test   %r15d,%r15d
  410d59:	74 44                	je     410d9f <deflate+0x83f>
  410d5b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  410d60:	48 8b 71 20          	mov    0x20(%rcx),%rsi
  410d64:	49 8b 7e 18          	mov    0x18(%r14),%rdi

    zmemcpy(strm->next_out, strm->state->pending_out, len);
  410d68:	44 89 f8             	mov    %r15d,%eax
  410d6b:	48 89 c2             	mov    %rax,%rdx
  410d6e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  410d73:	e8 78 62 ff ff       	callq  406ff0 <memcpy@plt>
    strm->next_out  += len;
    strm->state->pending_out  += len;
  410d78:	49 8b 76 38          	mov    0x38(%r14),%rsi

    if (len > strm->avail_out) len = strm->avail_out;
    if (len == 0) return;

    zmemcpy(strm->next_out, strm->state->pending_out, len);
    strm->next_out  += len;
  410d7c:	4c 8b 54 24 08       	mov    0x8(%rsp),%r10
  410d81:	4d 01 56 18          	add    %r10,0x18(%r14)
    strm->state->pending_out  += len;
  410d85:	4c 01 56 20          	add    %r10,0x20(%rsi)
    strm->total_out += len;
  410d89:	4d 01 56 28          	add    %r10,0x28(%r14)
    strm->avail_out  -= len;
  410d8d:	45 29 7e 20          	sub    %r15d,0x20(%r14)
    strm->state->pending -= len;
    if (strm->state->pending == 0) {
  410d91:	44 29 7e 28          	sub    %r15d,0x28(%rsi)
  410d95:	75 08                	jne    410d9f <deflate+0x83f>
        strm->state->pending_out = strm->state->pending_buf;
  410d97:	48 8b 56 10          	mov    0x10(%rsi),%rdx
  410d9b:	48 89 56 20          	mov    %rdx,0x20(%rsi)
                if (s->pending == s->pending_buf_size) {
                    if (s->gzhead->hcrc && s->pending > beg)
                        strm->adler = crc32(strm->adler, s->pending_buf + beg,
                                            s->pending - beg);
                    flush_pending(strm);
                    beg = s->pending;
  410d9f:	8b 73 28             	mov    0x28(%rbx),%esi
  410da2:	48 8b 43 30          	mov    0x30(%rbx),%rax
                    if (s->pending == s->pending_buf_size) {
  410da6:	41 89 f1             	mov    %esi,%r9d
  410da9:	4c 3b 4b 18          	cmp    0x18(%rbx),%r9
  410dad:	0f 84 9d 01 00 00    	je     410f50 <deflate+0x9f0>
                if (s->pending == s->pending_buf_size) {
                    if (s->gzhead->hcrc && s->pending > beg)
                        strm->adler = crc32(strm->adler, s->pending_buf + beg,
                                            s->pending - beg);
                    flush_pending(strm);
                    beg = s->pending;
  410db3:	89 f2                	mov    %esi,%edx
  410db5:	e9 06 ff ff ff       	jmpq   410cc0 <deflate+0x760>
  410dba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
                    }
                }
                val = s->gzhead->comment[s->gzindex++];
                put_byte(s, val);
            } while (val != 0);
            if (s->gzhead->hcrc && s->pending > beg)
  410dc0:	48 8b 43 30          	mov    0x30(%rbx),%rax
  410dc4:	8b 53 28             	mov    0x28(%rbx),%edx
  410dc7:	44 8b 50 44          	mov    0x44(%rax),%r10d
  410dcb:	45 85 d2             	test   %r10d,%r10d
  410dce:	74 20                	je     410df0 <deflate+0x890>
  410dd0:	39 f2                	cmp    %esi,%edx
  410dd2:	76 1c                	jbe    410df0 <deflate+0x890>
                strm->adler = crc32(strm->adler, s->pending_buf + beg,
  410dd4:	29 f2                	sub    %esi,%edx
  410dd6:	48 03 73 10          	add    0x10(%rbx),%rsi
  410dda:	49 8b 7e 60          	mov    0x60(%r14),%rdi
  410dde:	e8 6d fd 00 00       	callq  420b50 <crc32>
  410de3:	8b 53 28             	mov    0x28(%rbx),%edx
  410de6:	49 89 46 60          	mov    %rax,0x60(%r14)
  410dea:	48 8b 43 30          	mov    0x30(%rbx),%rax
  410dee:	66 90                	xchg   %ax,%ax
                                    s->pending - beg);
            if (val == 0)
                s->status = HCRC_STATE;
  410df0:	c7 43 08 67 00 00 00 	movl   $0x67,0x8(%rbx)
        }
        else
            s->status = HCRC_STATE;
    }
    if (s->status == HCRC_STATE) {
        if (s->gzhead->hcrc) {
  410df7:	8b 70 44             	mov    0x44(%rax),%esi
  410dfa:	85 f6                	test   %esi,%esi
  410dfc:	0f 84 ce 00 00 00    	je     410ed0 <deflate+0x970>
            if (s->pending + 2 > s->pending_buf_size)
  410e02:	44 8d 4a 02          	lea    0x2(%rdx),%r9d
  410e06:	4c 3b 4b 18          	cmp    0x18(%rbx),%r9
  410e0a:	0f 87 8a 02 00 00    	ja     41109a <deflate+0xb3a>
                flush_pending(strm);
            if (s->pending + 2 <= s->pending_buf_size) {
                put_byte(s, (Byte)(strm->adler & 0xff));
  410e10:	4d 8b 4e 60          	mov    0x60(%r14),%r9
  410e14:	48 8b 43 10          	mov    0x10(%rbx),%rax
  410e18:	8d 72 01             	lea    0x1(%rdx),%esi
                put_byte(s, (Byte)((strm->adler >> 8) & 0xff));
                strm->adler = crc32(0L, Z_NULL, 0);
  410e1b:	31 ff                	xor    %edi,%edi
    if (s->status == HCRC_STATE) {
        if (s->gzhead->hcrc) {
            if (s->pending + 2 > s->pending_buf_size)
                flush_pending(strm);
            if (s->pending + 2 <= s->pending_buf_size) {
                put_byte(s, (Byte)(strm->adler & 0xff));
  410e1d:	89 73 28             	mov    %esi,0x28(%rbx)
                put_byte(s, (Byte)((strm->adler >> 8) & 0xff));
                strm->adler = crc32(0L, Z_NULL, 0);
  410e20:	31 f6                	xor    %esi,%esi
    if (s->status == HCRC_STATE) {
        if (s->gzhead->hcrc) {
            if (s->pending + 2 > s->pending_buf_size)
                flush_pending(strm);
            if (s->pending + 2 <= s->pending_buf_size) {
                put_byte(s, (Byte)(strm->adler & 0xff));
  410e22:	44 88 0c 10          	mov    %r9b,(%rax,%rdx,1)
                put_byte(s, (Byte)((strm->adler >> 8) & 0xff));
  410e26:	44 8b 7b 28          	mov    0x28(%rbx),%r15d
  410e2a:	49 8b 56 60          	mov    0x60(%r14),%rdx
  410e2e:	48 8b 4b 10          	mov    0x10(%rbx),%rcx
  410e32:	45 8d 47 01          	lea    0x1(%r15),%r8d
  410e36:	48 c1 ea 08          	shr    $0x8,%rdx
  410e3a:	44 89 43 28          	mov    %r8d,0x28(%rbx)
  410e3e:	42 88 14 39          	mov    %dl,(%rcx,%r15,1)
                strm->adler = crc32(0L, Z_NULL, 0);
  410e42:	31 d2                	xor    %edx,%edx
  410e44:	e8 07 fd 00 00       	callq  420b50 <crc32>
  410e49:	8b 53 28             	mov    0x28(%rbx),%edx
  410e4c:	49 89 46 60          	mov    %rax,0x60(%r14)
                s->status = BUSY_STATE;
  410e50:	c7 43 08 71 00 00 00 	movl   $0x71,0x8(%rbx)
  410e57:	e9 a9 f7 ff ff       	jmpq   410605 <deflate+0xa5>
  410e5c:	0f 1f 40 00          	nopl   0x0(%rax)
        block_state bstate;

        bstate = (*(configuration_table[s->level].func))(s, flush);

        if (bstate == finish_started || bstate == finish_done) {
            s->status = FINISH_STATE;
  410e60:	c7 43 08 9a 02 00 00 	movl   $0x29a,0x8(%rbx)
  410e67:	e9 d9 f7 ff ff       	jmpq   410645 <deflate+0xe5>
  410e6c:	0f 1f 40 00          	nopl   0x0(%rax)
            uInt beg = s->pending;  /* start of bytes to update crc */

            while (s->gzindex < (s->gzhead->extra_len & 0xffff)) {
                if (s->pending == s->pending_buf_size) {
                    if (s->gzhead->hcrc && s->pending > beg)
                        strm->adler = crc32(strm->adler, s->pending_buf + beg,
  410e70:	48 89 d6             	mov    %rdx,%rsi
  410e73:	48 03 73 10          	add    0x10(%rbx),%rsi
  410e77:	41 89 f9             	mov    %edi,%r9d
  410e7a:	49 8b 7e 60          	mov    0x60(%r14),%rdi
  410e7e:	41 29 d1             	sub    %edx,%r9d
  410e81:	44 89 ca             	mov    %r9d,%edx
  410e84:	e8 c7 fc 00 00       	callq  420b50 <crc32>
  410e89:	49 89 46 60          	mov    %rax,0x60(%r14)
  410e8d:	e9 bc fa ff ff       	jmpq   41094e <deflate+0x3ee>
  410e92:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        return Z_STREAM_ERROR;
    }
    s = strm->state;

    if (strm->next_out == Z_NULL ||
        (strm->next_in == Z_NULL && strm->avail_in != 0) ||
  410e98:	44 8b 5f 08          	mov    0x8(%rdi),%r11d
  410e9c:	45 85 db             	test   %r11d,%r11d
  410e9f:	0f 84 fd f6 ff ff    	je     4105a2 <deflate+0x42>
  410ea5:	0f 1f 00             	nopl   (%rax)
        (s->status == FINISH_STATE && flush != Z_FINISH)) {
        ERR_RETURN(strm, Z_STREAM_ERROR);
  410ea8:	4c 8b 05 b1 83 02 00 	mov    0x283b1(%rip),%r8        # 439260 <z_errmsg+0x20>
  410eaf:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  410eb4:	4c 89 47 30          	mov    %r8,0x30(%rdi)
  410eb8:	e9 9d f7 ff ff       	jmpq   41065a <deflate+0xfa>
                s->status = HCRC_STATE;
        }
        else
            s->status = HCRC_STATE;
    }
    if (s->status == HCRC_STATE) {
  410ebd:	83 7b 08 67          	cmpl   $0x67,0x8(%rbx)
  410ec1:	0f 85 3e f7 ff ff    	jne    410605 <deflate+0xa5>
  410ec7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  410ece:	00 00 
                strm->adler = crc32(0L, Z_NULL, 0);
                s->status = BUSY_STATE;
            }
        }
        else
            s->status = BUSY_STATE;
  410ed0:	c7 43 08 71 00 00 00 	movl   $0x71,0x8(%rbx)
  410ed7:	e9 29 f7 ff ff       	jmpq   410605 <deflate+0xa5>
  410edc:	0f 1f 40 00          	nopl   0x0(%rax)
  410ee0:	48 8b 43 30          	mov    0x30(%rbx),%rax
            }
        }
        else
            s->status = COMMENT_STATE;
    }
    if (s->status == COMMENT_STATE) {
  410ee4:	89 d6                	mov    %edx,%esi
  410ee6:	e9 c5 fd ff ff       	jmpq   410cb0 <deflate+0x750>
  410eeb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  410ef0:	48 8b 43 30          	mov    0x30(%rbx),%rax
  410ef4:	e9 fe fe ff ff       	jmpq   410df7 <deflate+0x897>
  410ef9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  410f00:	49 8b 7e 18          	mov    0x18(%r14),%rdi
  410f04:	49 8b 75 20          	mov    0x20(%r13),%rsi
    unsigned len = strm->state->pending;

    if (len > strm->avail_out) len = strm->avail_out;
    if (len == 0) return;

    zmemcpy(strm->next_out, strm->state->pending_out, len);
  410f08:	45 89 fc             	mov    %r15d,%r12d
  410f0b:	4c 89 e2             	mov    %r12,%rdx
  410f0e:	e8 dd 60 ff ff       	callq  406ff0 <memcpy@plt>
    strm->next_out  += len;
    strm->state->pending_out  += len;
  410f13:	4d 8b 56 38          	mov    0x38(%r14),%r10

    if (len > strm->avail_out) len = strm->avail_out;
    if (len == 0) return;

    zmemcpy(strm->next_out, strm->state->pending_out, len);
    strm->next_out  += len;
  410f17:	4d 01 66 18          	add    %r12,0x18(%r14)
    strm->state->pending_out  += len;
  410f1b:	4d 01 62 20          	add    %r12,0x20(%r10)
    strm->total_out += len;
  410f1f:	4d 01 66 28          	add    %r12,0x28(%r14)
    strm->avail_out  -= len;
  410f23:	45 29 7e 20          	sub    %r15d,0x20(%r14)
    strm->state->pending -= len;
    if (strm->state->pending == 0) {
  410f27:	45 29 7a 28          	sub    %r15d,0x28(%r10)
  410f2b:	0f 85 15 f8 ff ff    	jne    410746 <deflate+0x1e6>
        strm->state->pending_out = strm->state->pending_buf;
  410f31:	4d 8b 72 10          	mov    0x10(%r10),%r14
  410f35:	4d 89 72 20          	mov    %r14,0x20(%r10)
  410f39:	e9 08 f8 ff ff       	jmpq   410746 <deflate+0x1e6>
  410f3e:	66 90                	xchg   %ax,%ax
    int old_flush; /* value of flush param for previous deflate call */
    deflate_state *s;

    if (strm == Z_NULL || strm->state == Z_NULL ||
        flush > Z_FINISH || flush < 0) {
        return Z_STREAM_ERROR;
  410f40:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  410f45:	e9 10 f7 ff ff       	jmpq   41065a <deflate+0xfa>
  410f4a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  410f50:	8b 78 44             	mov    0x44(%rax),%edi
                if (s->pending == s->pending_buf_size) {
                    if (s->gzhead->hcrc && s->pending > beg)
                        strm->adler = crc32(strm->adler, s->pending_buf + beg,
                                            s->pending - beg);
                    flush_pending(strm);
                    beg = s->pending;
  410f53:	89 f2                	mov    %esi,%edx
  410f55:	e9 c4 fd ff ff       	jmpq   410d1e <deflate+0x7be>
  410f5a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
                if (s->pending == s->pending_buf_size) {
                    if (s->gzhead->hcrc && s->pending > beg)
                        strm->adler = crc32(strm->adler, s->pending_buf + beg,
                                            s->pending - beg);
                    flush_pending(strm);
                    beg = s->pending;
  410f60:	89 f2                	mov    %esi,%edx
  410f62:	e9 e7 fb ff ff       	jmpq   410b4e <deflate+0x5ee>
  410f67:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  410f6e:	00 00 
  410f70:	48 8b 43 30          	mov    0x30(%rbx),%rax
  410f74:	8b 4b 38             	mov    0x38(%rbx),%ecx
  410f77:	8b 70 20             	mov    0x20(%rax),%esi
  410f7a:	e9 49 fa ff ff       	jmpq   4109c8 <deflate+0x468>
  410f7f:	90                   	nop
                                    s->pending - beg);
            if (val == 0)
                s->status = HCRC_STATE;
        }
        else
            s->status = HCRC_STATE;
  410f80:	c7 43 08 67 00 00 00 	movl   $0x67,0x8(%rbx)
  410f87:	89 f2                	mov    %esi,%edx
  410f89:	e9 69 fe ff ff       	jmpq   410df7 <deflate+0x897>
  410f8e:	66 90                	xchg   %ax,%ax
                s->gzindex = 0;
                s->status = NAME_STATE;
            }
        }
        else
            s->status = NAME_STATE;
  410f90:	c7 43 08 49 00 00 00 	movl   $0x49,0x8(%rbx)
  410f97:	8b 53 28             	mov    0x28(%rbx),%edx
  410f9a:	e9 3f fb ff ff       	jmpq   410ade <deflate+0x57e>
  410f9f:	90                   	nop
                s->gzindex = 0;
                s->status = COMMENT_STATE;
            }
        }
        else
            s->status = COMMENT_STATE;
  410fa0:	c7 43 08 5b 00 00 00 	movl   $0x5b,0x8(%rbx)
  410fa7:	e9 02 fd ff ff       	jmpq   410cae <deflate+0x74e>
  410fac:	0f 1f 40 00          	nopl   0x0(%rax)
    if (s->wrap <= 0) return Z_STREAM_END;

    /* Write the trailer */
#ifdef GZIP
    if (s->wrap == 2) {
        put_byte(s, (Byte)(strm->adler & 0xff));
  410fb0:	44 8b 43 28          	mov    0x28(%rbx),%r8d
  410fb4:	4d 8b 5e 60          	mov    0x60(%r14),%r11
  410fb8:	48 8b 73 10          	mov    0x10(%rbx),%rsi
  410fbc:	41 8d 50 01          	lea    0x1(%r8),%edx
  410fc0:	89 53 28             	mov    %edx,0x28(%rbx)
  410fc3:	46 88 1c 06          	mov    %r11b,(%rsi,%r8,1)
        put_byte(s, (Byte)((strm->adler >> 8) & 0xff));
  410fc7:	8b 6b 28             	mov    0x28(%rbx),%ebp
  410fca:	49 8b 7e 60          	mov    0x60(%r14),%rdi
  410fce:	4c 8b 7b 10          	mov    0x10(%rbx),%r15
  410fd2:	48 c1 ef 08          	shr    $0x8,%rdi
  410fd6:	44 8d 6d 01          	lea    0x1(%rbp),%r13d
  410fda:	44 89 6b 28          	mov    %r13d,0x28(%rbx)
  410fde:	41 88 3c 2f          	mov    %dil,(%r15,%rbp,1)
        put_byte(s, (Byte)((strm->adler >> 16) & 0xff));
  410fe2:	44 8b 63 28          	mov    0x28(%rbx),%r12d
  410fe6:	49 8b 4e 60          	mov    0x60(%r14),%rcx
  410fea:	4c 8b 53 10          	mov    0x10(%rbx),%r10
  410fee:	48 c1 e9 10          	shr    $0x10,%rcx
  410ff2:	45 8d 4c 24 01       	lea    0x1(%r12),%r9d
  410ff7:	44 89 4b 28          	mov    %r9d,0x28(%rbx)
  410ffb:	43 88 0c 22          	mov    %cl,(%r10,%r12,1)
        put_byte(s, (Byte)((strm->adler >> 24) & 0xff));
  410fff:	8b 43 28             	mov    0x28(%rbx),%eax
  411002:	49 8b 56 60          	mov    0x60(%r14),%rdx
  411006:	48 8b 73 10          	mov    0x10(%rbx),%rsi
  41100a:	48 c1 ea 18          	shr    $0x18,%rdx
  41100e:	44 8d 40 01          	lea    0x1(%rax),%r8d
  411012:	44 89 43 28          	mov    %r8d,0x28(%rbx)
  411016:	88 14 06             	mov    %dl,(%rsi,%rax,1)
        put_byte(s, (Byte)(strm->total_in & 0xff));
  411019:	44 8b 7b 28          	mov    0x28(%rbx),%r15d
  41101d:	4d 8b 6e 10          	mov    0x10(%r14),%r13
  411021:	4c 8b 5b 10          	mov    0x10(%rbx),%r11
  411025:	41 8d 6f 01          	lea    0x1(%r15),%ebp
  411029:	89 6b 28             	mov    %ebp,0x28(%rbx)
  41102c:	47 88 2c 3b          	mov    %r13b,(%r11,%r15,1)
        put_byte(s, (Byte)((strm->total_in >> 8) & 0xff));
  411030:	44 8b 53 28          	mov    0x28(%rbx),%r10d
  411034:	4d 8b 4e 10          	mov    0x10(%r14),%r9
  411038:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
  41103c:	49 c1 e9 08          	shr    $0x8,%r9
  411040:	45 8d 62 01          	lea    0x1(%r10),%r12d
  411044:	44 89 63 28          	mov    %r12d,0x28(%rbx)
  411048:	46 88 0c 17          	mov    %r9b,(%rdi,%r10,1)
        put_byte(s, (Byte)((strm->total_in >> 16) & 0xff));
  41104c:	8b 73 28             	mov    0x28(%rbx),%esi
  41104f:	48 8b 4b 10          	mov    0x10(%rbx),%rcx
  411053:	8d 46 01             	lea    0x1(%rsi),%eax
  411056:	89 43 28             	mov    %eax,0x28(%rbx)
  411059:	4d 8b 46 10          	mov    0x10(%r14),%r8
  41105d:	49 c1 e8 10          	shr    $0x10,%r8
  411061:	44 88 04 31          	mov    %r8b,(%rcx,%rsi,1)
        put_byte(s, (Byte)((strm->total_in >> 24) & 0xff));
  411065:	44 8b 7b 28          	mov    0x28(%rbx),%r15d
  411069:	49 8b 6e 10          	mov    0x10(%r14),%rbp
  41106d:	4c 8b 5b 10          	mov    0x10(%rbx),%r11
  411071:	41 8d 57 01          	lea    0x1(%r15),%edx
  411075:	48 c1 ed 18          	shr    $0x18,%rbp
  411079:	89 53 28             	mov    %edx,0x28(%rbx)
  41107c:	43 88 2c 3b          	mov    %bpl,(%r11,%r15,1)
  411080:	e9 a5 f6 ff ff       	jmpq   41072a <deflate+0x1ca>
    if (strm->next_out == Z_NULL ||
        (strm->next_in == Z_NULL && strm->avail_in != 0) ||
        (s->status == FINISH_STATE && flush != Z_FINISH)) {
        ERR_RETURN(strm, Z_STREAM_ERROR);
    }
    if (strm->avail_out == 0) ERR_RETURN(strm, Z_BUF_ERROR);
  411085:	48 8b 05 ec 81 02 00 	mov    0x281ec(%rip),%rax        # 439278 <z_errmsg+0x38>
  41108c:	48 89 47 30          	mov    %rax,0x30(%rdi)
  411090:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
  411095:	e9 c0 f5 ff ff       	jmpq   41065a <deflate+0xfa>
 * (See also read_buf()).
 */
local void flush_pending(strm)
    z_streamp strm;
{
    unsigned len = strm->state->pending;
  41109a:	49 8b 4e 38          	mov    0x38(%r14),%rcx

    if (len > strm->avail_out) len = strm->avail_out;
  41109e:	41 8b 46 20          	mov    0x20(%r14),%eax
 * (See also read_buf()).
 */
local void flush_pending(strm)
    z_streamp strm;
{
    unsigned len = strm->state->pending;
  4110a2:	44 8b 79 28          	mov    0x28(%rcx),%r15d
  4110a6:	44 39 f8             	cmp    %r15d,%eax
  4110a9:	44 0f 46 f8          	cmovbe %eax,%r15d

    if (len > strm->avail_out) len = strm->avail_out;
    if (len == 0) return;
  4110ad:	45 85 ff             	test   %r15d,%r15d
  4110b0:	0f 85 4a 02 00 00    	jne    411300 <deflate+0xda0>
            s->status = BUSY_STATE;
    }
#endif

    /* Flush as much pending output as possible */
    if (s->pending != 0) {
  4110b6:	85 d2                	test   %edx,%edx
  4110b8:	0f 84 4f f5 ff ff    	je     41060d <deflate+0xad>
  4110be:	e9 c9 f6 ff ff       	jmpq   41078c <deflate+0x22c>

    /* Write the header */
    if (s->status == INIT_STATE) {
#ifdef GZIP
        if (s->wrap == 2) {
            strm->adler = crc32(0L, Z_NULL, 0);
  4110c3:	31 d2                	xor    %edx,%edx
  4110c5:	31 f6                	xor    %esi,%esi
  4110c7:	31 ff                	xor    %edi,%edi
  4110c9:	e8 82 fa 00 00       	callq  420b50 <crc32>
            put_byte(s, 31);
  4110ce:	8b 73 28             	mov    0x28(%rbx),%esi
  4110d1:	4c 8b 43 10          	mov    0x10(%rbx),%r8

    /* Write the header */
    if (s->status == INIT_STATE) {
#ifdef GZIP
        if (s->wrap == 2) {
            strm->adler = crc32(0L, Z_NULL, 0);
  4110d5:	49 89 46 60          	mov    %rax,0x60(%r14)
            put_byte(s, 31);
  4110d9:	44 8d 4e 01          	lea    0x1(%rsi),%r9d
  4110dd:	44 89 4b 28          	mov    %r9d,0x28(%rbx)
  4110e1:	41 c6 04 30 1f       	movb   $0x1f,(%r8,%rsi,1)
            put_byte(s, 139);
  4110e6:	8b 43 28             	mov    0x28(%rbx),%eax
  4110e9:	48 8b 53 10          	mov    0x10(%rbx),%rdx
  4110ed:	44 8d 78 01          	lea    0x1(%rax),%r15d
  4110f1:	44 89 7b 28          	mov    %r15d,0x28(%rbx)
  4110f5:	c6 04 02 8b          	movb   $0x8b,(%rdx,%rax,1)
            put_byte(s, 8);
  4110f9:	44 8b 53 28          	mov    0x28(%rbx),%r10d
  4110fd:	4c 8b 5b 10          	mov    0x10(%rbx),%r11
  411101:	41 8d 4a 01          	lea    0x1(%r10),%ecx
  411105:	89 4b 28             	mov    %ecx,0x28(%rbx)
  411108:	43 c6 04 13 08       	movb   $0x8,(%r11,%r10,1)
            if (s->gzhead == NULL) {
  41110d:	48 8b 7b 30          	mov    0x30(%rbx),%rdi
  411111:	48 85 ff             	test   %rdi,%rdi
  411114:	0f 84 8e 02 00 00    	je     4113a8 <deflate+0xe48>
                             4 : 0));
                put_byte(s, OS_CODE);
                s->status = BUSY_STATE;
            }
            else {
                put_byte(s, (s->gzhead->text ? 1 : 0) +
  41111a:	44 8b 0f             	mov    (%rdi),%r9d
  41111d:	44 8b 7b 28          	mov    0x28(%rbx),%r15d
  411121:	48 8b 73 10          	mov    0x10(%rbx),%rsi
  411125:	45 85 c9             	test   %r9d,%r9d
  411128:	0f 95 c2             	setne  %dl
  41112b:	83 7f 44 01          	cmpl   $0x1,0x44(%rdi)
  41112f:	45 8d 47 01          	lea    0x1(%r15),%r8d
  411133:	44 89 43 28          	mov    %r8d,0x28(%rbx)
  411137:	19 c0                	sbb    %eax,%eax
  411139:	f7 d0                	not    %eax
  41113b:	83 e0 02             	and    $0x2,%eax
  41113e:	48 83 7f 18 01       	cmpq   $0x1,0x18(%rdi)
  411143:	44 8d 1c 10          	lea    (%rax,%rdx,1),%r11d
  411147:	45 19 d2             	sbb    %r10d,%r10d
  41114a:	41 f7 d2             	not    %r10d
  41114d:	41 83 e2 04          	and    $0x4,%r10d
  411151:	48 83 7f 28 01       	cmpq   $0x1,0x28(%rdi)
  411156:	43 8d 0c 13          	lea    (%r11,%r10,1),%ecx
  41115a:	45 19 c0             	sbb    %r8d,%r8d
  41115d:	41 f7 d0             	not    %r8d
  411160:	41 83 e0 08          	and    $0x8,%r8d
  411164:	44 01 c1             	add    %r8d,%ecx
  411167:	48 83 7f 38 01       	cmpq   $0x1,0x38(%rdi)
  41116c:	19 ff                	sbb    %edi,%edi
  41116e:	f7 d7                	not    %edi
  411170:	83 e7 10             	and    $0x10,%edi
  411173:	01 cf                	add    %ecx,%edi
  411175:	42 88 3c 3e          	mov    %dil,(%rsi,%r15,1)
                            (s->gzhead->hcrc ? 2 : 0) +
                            (s->gzhead->extra == Z_NULL ? 0 : 4) +
                            (s->gzhead->name == Z_NULL ? 0 : 8) +
                            (s->gzhead->comment == Z_NULL ? 0 : 16)
                        );
                put_byte(s, (Byte)(s->gzhead->time & 0xff));
  411179:	44 8b 7b 28          	mov    0x28(%rbx),%r15d
  41117d:	48 8b 53 30          	mov    0x30(%rbx),%rdx
  411181:	48 8b 73 10          	mov    0x10(%rbx),%rsi
  411185:	48 8b 42 08          	mov    0x8(%rdx),%rax
  411189:	45 8d 4f 01          	lea    0x1(%r15),%r9d
  41118d:	44 89 4b 28          	mov    %r9d,0x28(%rbx)
  411191:	42 88 04 3e          	mov    %al,(%rsi,%r15,1)
                put_byte(s, (Byte)((s->gzhead->time >> 8) & 0xff));
  411195:	4c 8b 43 30          	mov    0x30(%rbx),%r8
  411199:	44 8b 53 28          	mov    0x28(%rbx),%r10d
  41119d:	4c 8b 5b 10          	mov    0x10(%rbx),%r11
  4111a1:	49 8b 78 08          	mov    0x8(%r8),%rdi
  4111a5:	41 8d 4a 01          	lea    0x1(%r10),%ecx
  4111a9:	48 c1 ef 08          	shr    $0x8,%rdi
  4111ad:	89 4b 28             	mov    %ecx,0x28(%rbx)
  4111b0:	43 88 3c 13          	mov    %dil,(%r11,%r10,1)
                put_byte(s, (Byte)((s->gzhead->time >> 16) & 0xff));
  4111b4:	48 8b 53 30          	mov    0x30(%rbx),%rdx
  4111b8:	44 8b 7b 28          	mov    0x28(%rbx),%r15d
  4111bc:	48 8b 73 10          	mov    0x10(%rbx),%rsi
  4111c0:	48 8b 42 08          	mov    0x8(%rdx),%rax
                put_byte(s, (Byte)((s->gzhead->time >> 24) & 0xff));
                put_byte(s, s->level == 9 ? 2 :
  4111c4:	ba 02 00 00 00       	mov    $0x2,%edx
                            (s->gzhead->name == Z_NULL ? 0 : 8) +
                            (s->gzhead->comment == Z_NULL ? 0 : 16)
                        );
                put_byte(s, (Byte)(s->gzhead->time & 0xff));
                put_byte(s, (Byte)((s->gzhead->time >> 8) & 0xff));
                put_byte(s, (Byte)((s->gzhead->time >> 16) & 0xff));
  4111c9:	45 8d 4f 01          	lea    0x1(%r15),%r9d
  4111cd:	48 c1 e8 10          	shr    $0x10,%rax
  4111d1:	44 89 4b 28          	mov    %r9d,0x28(%rbx)
  4111d5:	42 88 04 3e          	mov    %al,(%rsi,%r15,1)
                put_byte(s, (Byte)((s->gzhead->time >> 24) & 0xff));
  4111d9:	4c 8b 43 30          	mov    0x30(%rbx),%r8
  4111dd:	44 8b 53 28          	mov    0x28(%rbx),%r10d
  4111e1:	4c 8b 5b 10          	mov    0x10(%rbx),%r11
  4111e5:	49 8b 78 08          	mov    0x8(%r8),%rdi
  4111e9:	41 8d 4a 01          	lea    0x1(%r10),%ecx
  4111ed:	48 c1 ef 18          	shr    $0x18,%rdi
  4111f1:	89 4b 28             	mov    %ecx,0x28(%rbx)
  4111f4:	43 88 3c 13          	mov    %dil,(%r11,%r10,1)
                put_byte(s, s->level == 9 ? 2 :
  4111f8:	8b 73 28             	mov    0x28(%rbx),%esi
  4111fb:	44 8b 8b b4 00 00 00 	mov    0xb4(%rbx),%r9d
  411202:	44 8d 7e 01          	lea    0x1(%rsi),%r15d
  411206:	48 03 73 10          	add    0x10(%rbx),%rsi
  41120a:	41 83 f9 09          	cmp    $0x9,%r9d
  41120e:	44 89 7b 28          	mov    %r15d,0x28(%rbx)
  411212:	74 19                	je     41122d <deflate+0xccd>
  411214:	83 bb b8 00 00 00 01 	cmpl   $0x1,0xb8(%rbx)
  41121b:	0f 8f 7d 01 00 00    	jg     41139e <deflate+0xe3e>
  411221:	41 83 f9 01          	cmp    $0x1,%r9d
  411225:	0f 8e 73 01 00 00    	jle    41139e <deflate+0xe3e>
  41122b:	31 d2                	xor    %edx,%edx
  41122d:	88 16                	mov    %dl,(%rsi)
                            (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2 ?
                             4 : 0));
                put_byte(s, s->gzhead->os & 0xff);
  41122f:	8b 43 28             	mov    0x28(%rbx),%eax
  411232:	48 8b 4b 30          	mov    0x30(%rbx),%rcx
  411236:	4c 8b 5b 10          	mov    0x10(%rbx),%r11
  41123a:	44 8b 41 14          	mov    0x14(%rcx),%r8d
  41123e:	44 8d 50 01          	lea    0x1(%rax),%r10d
  411242:	44 89 53 28          	mov    %r10d,0x28(%rbx)
  411246:	45 88 04 03          	mov    %r8b,(%r11,%rax,1)
                if (s->gzhead->extra != NULL) {
  41124a:	48 8b 43 30          	mov    0x30(%rbx),%rax
  41124e:	48 83 78 18 00       	cmpq   $0x0,0x18(%rax)
  411253:	74 37                	je     41128c <deflate+0xd2c>
                    put_byte(s, s->gzhead->extra_len & 0xff);
  411255:	44 8b 7b 28          	mov    0x28(%rbx),%r15d
  411259:	44 8b 48 20          	mov    0x20(%rax),%r9d
  41125d:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
  411261:	41 8d 77 01          	lea    0x1(%r15),%esi
  411265:	89 73 28             	mov    %esi,0x28(%rbx)
  411268:	46 88 0c 3f          	mov    %r9b,(%rdi,%r15,1)
                    put_byte(s, (s->gzhead->extra_len >> 8) & 0xff);
  41126c:	4c 8b 53 30          	mov    0x30(%rbx),%r10
  411270:	8b 43 28             	mov    0x28(%rbx),%eax
  411273:	4c 8b 5b 10          	mov    0x10(%rbx),%r11
  411277:	41 8b 4a 20          	mov    0x20(%r10),%ecx
  41127b:	8d 50 01             	lea    0x1(%rax),%edx
  41127e:	c1 e9 08             	shr    $0x8,%ecx
  411281:	89 53 28             	mov    %edx,0x28(%rbx)
  411284:	41 88 0c 03          	mov    %cl,(%r11,%rax,1)
  411288:	48 8b 43 30          	mov    0x30(%rbx),%rax
                }
                if (s->gzhead->hcrc)
  41128c:	44 8b 40 44          	mov    0x44(%rax),%r8d
  411290:	45 85 c0             	test   %r8d,%r8d
  411293:	0f 85 bf 00 00 00    	jne    411358 <deflate+0xdf8>
                    strm->adler = crc32(strm->adler, s->pending_buf,
                                        s->pending);
                s->gzindex = 0;
  411299:	c7 43 38 00 00 00 00 	movl   $0x0,0x38(%rbx)
                s->status = EXTRA_STATE;
  4112a0:	c7 43 08 45 00 00 00 	movl   $0x45,0x8(%rbx)
  4112a7:	e9 27 f6 ff ff       	jmpq   4108d3 <deflate+0x373>
  4112ac:	49 8b 7e 18          	mov    0x18(%r14),%rdi
  4112b0:	49 8b 77 20          	mov    0x20(%r15),%rsi
    unsigned len = strm->state->pending;

    if (len > strm->avail_out) len = strm->avail_out;
    if (len == 0) return;

    zmemcpy(strm->next_out, strm->state->pending_out, len);
  4112b4:	41 89 ed             	mov    %ebp,%r13d
  4112b7:	4c 89 ea             	mov    %r13,%rdx
  4112ba:	e8 31 5d ff ff       	callq  406ff0 <memcpy@plt>
    strm->next_out  += len;
    strm->state->pending_out  += len;
  4112bf:	49 8b 7e 38          	mov    0x38(%r14),%rdi

    if (len > strm->avail_out) len = strm->avail_out;
    if (len == 0) return;

    zmemcpy(strm->next_out, strm->state->pending_out, len);
    strm->next_out  += len;
  4112c3:	4d 01 6e 18          	add    %r13,0x18(%r14)
    strm->state->pending_out  += len;
  4112c7:	4c 01 6f 20          	add    %r13,0x20(%rdi)
    strm->total_out += len;
  4112cb:	4d 01 6e 28          	add    %r13,0x28(%r14)
    strm->avail_out  -= len;
  4112cf:	41 29 6e 20          	sub    %ebp,0x20(%r14)
    strm->state->pending -= len;
    if (strm->state->pending == 0) {
  4112d3:	29 6f 28             	sub    %ebp,0x28(%rdi)
  4112d6:	75 08                	jne    4112e0 <deflate+0xd80>
        strm->state->pending_out = strm->state->pending_buf;
  4112d8:	4c 8b 57 10          	mov    0x10(%rdi),%r10
  4112dc:	4c 89 57 20          	mov    %r10,0x20(%rdi)
  4112e0:	41 8b 46 20          	mov    0x20(%r14),%eax
  4112e4:	e9 80 f7 ff ff       	jmpq   410a69 <deflate+0x509>
        }
    }
    Assert(strm->avail_out > 0, "bug2");

    if (flush != Z_FINISH) return Z_OK;
    if (s->wrap <= 0) return Z_STREAM_END;
  4112e9:	b8 01 00 00 00       	mov    $0x1,%eax
  4112ee:	e9 67 f3 ff ff       	jmpq   41065a <deflate+0xfa>
             * one empty block.
             */
        }
        if (bstate == block_done) {
            if (flush == Z_PARTIAL_FLUSH) {
                _tr_align(s);
  4112f3:	48 89 df             	mov    %rbx,%rdi
  4112f6:	e8 65 35 00 00       	callq  414860 <_tr_align>
  4112fb:	e9 50 f7 ff ff       	jmpq   410a50 <deflate+0x4f0>
  411300:	49 8b 7e 18          	mov    0x18(%r14),%rdi
  411304:	48 8b 71 20          	mov    0x20(%rcx),%rsi
    unsigned len = strm->state->pending;

    if (len > strm->avail_out) len = strm->avail_out;
    if (len == 0) return;

    zmemcpy(strm->next_out, strm->state->pending_out, len);
  411308:	45 89 f8             	mov    %r15d,%r8d
  41130b:	4c 89 c2             	mov    %r8,%rdx
  41130e:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  411313:	e8 d8 5c ff ff       	callq  406ff0 <memcpy@plt>
    strm->next_out  += len;
    strm->state->pending_out  += len;
  411318:	49 8b 7e 38          	mov    0x38(%r14),%rdi

    if (len > strm->avail_out) len = strm->avail_out;
    if (len == 0) return;

    zmemcpy(strm->next_out, strm->state->pending_out, len);
    strm->next_out  += len;
  41131c:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  411321:	49 01 56 18          	add    %rdx,0x18(%r14)
    strm->state->pending_out  += len;
  411325:	48 01 57 20          	add    %rdx,0x20(%rdi)
    strm->total_out += len;
  411329:	49 01 56 28          	add    %rdx,0x28(%r14)
    strm->avail_out  -= len;
  41132d:	45 29 7e 20          	sub    %r15d,0x20(%r14)
    strm->state->pending -= len;
    if (strm->state->pending == 0) {
  411331:	44 29 7f 28          	sub    %r15d,0x28(%rdi)
  411335:	75 08                	jne    41133f <deflate+0xddf>
        strm->state->pending_out = strm->state->pending_buf;
  411337:	4c 8b 5f 10          	mov    0x10(%rdi),%r11
  41133b:	4c 89 5f 20          	mov    %r11,0x20(%rdi)
    }
    if (s->status == HCRC_STATE) {
        if (s->gzhead->hcrc) {
            if (s->pending + 2 > s->pending_buf_size)
                flush_pending(strm);
            if (s->pending + 2 <= s->pending_buf_size) {
  41133f:	8b 53 28             	mov    0x28(%rbx),%edx
  411342:	44 8d 52 02          	lea    0x2(%rdx),%r10d
  411346:	4c 3b 53 18          	cmp    0x18(%rbx),%r10
  41134a:	0f 87 b5 f2 ff ff    	ja     410605 <deflate+0xa5>
  411350:	e9 bb fa ff ff       	jmpq   410e10 <deflate+0x8b0>
  411355:	0f 1f 00             	nopl   (%rax)
                if (s->gzhead->extra != NULL) {
                    put_byte(s, s->gzhead->extra_len & 0xff);
                    put_byte(s, (s->gzhead->extra_len >> 8) & 0xff);
                }
                if (s->gzhead->hcrc)
                    strm->adler = crc32(strm->adler, s->pending_buf,
  411358:	8b 53 28             	mov    0x28(%rbx),%edx
  41135b:	48 8b 73 10          	mov    0x10(%rbx),%rsi
  41135f:	49 8b 7e 60          	mov    0x60(%r14),%rdi
  411363:	e8 e8 f7 00 00       	callq  420b50 <crc32>
  411368:	49 89 46 60          	mov    %rax,0x60(%r14)
  41136c:	48 8b 43 30          	mov    0x30(%rbx),%rax
  411370:	e9 24 ff ff ff       	jmpq   411299 <deflate+0xd39>
                _tr_stored_block(s, (char*)0, 0L, 0);
                /* For a full flush, this empty block will be recognized
                 * as a special marker by inflate_sync().
                 */
                if (flush == Z_FULL_FLUSH) {
                    CLEAR_HASH(s);             /* forget history */
  411375:	8b 6b 74             	mov    0x74(%rbx),%ebp
  411378:	48 8b 7b 68          	mov    0x68(%rbx),%rdi
  41137c:	45 31 db             	xor    %r11d,%r11d
      && (!__builtin_constant_p (__ch) || __ch != 0))
    {
      __warn_memset_zero_len ();
      return __dest;
    }
  return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
  41137f:	31 f6                	xor    %esi,%esi
  411381:	83 ed 01             	sub    $0x1,%ebp
  411384:	48 8d 54 2d 00       	lea    0x0(%rbp,%rbp,1),%rdx
  411389:	66 44 89 1c 6f       	mov    %r11w,(%rdi,%rbp,2)
  41138e:	e8 ed 58 ff ff       	callq  406c80 <memset@plt>
  411393:	e9 b8 f6 ff ff       	jmpq   410a50 <deflate+0x4f0>
    int old_flush; /* value of flush param for previous deflate call */
    deflate_state *s;

    if (strm == Z_NULL || strm->state == Z_NULL ||
        flush > Z_FINISH || flush < 0) {
        return Z_STREAM_ERROR;
  411398:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    /* If avail_out is zero, the application will call deflate again
     * to flush the rest.
     */
    if (s->wrap > 0) s->wrap = -s->wrap; /* write the trailer only once! */
    return s->pending != 0 ? Z_OK : Z_STREAM_END;
}
  41139d:	c3                   	retq   
                        );
                put_byte(s, (Byte)(s->gzhead->time & 0xff));
                put_byte(s, (Byte)((s->gzhead->time >> 8) & 0xff));
                put_byte(s, (Byte)((s->gzhead->time >> 16) & 0xff));
                put_byte(s, (Byte)((s->gzhead->time >> 24) & 0xff));
                put_byte(s, s->level == 9 ? 2 :
  41139e:	ba 04 00 00 00       	mov    $0x4,%edx
  4113a3:	e9 85 fe ff ff       	jmpq   41122d <deflate+0xccd>
            strm->adler = crc32(0L, Z_NULL, 0);
            put_byte(s, 31);
            put_byte(s, 139);
            put_byte(s, 8);
            if (s->gzhead == NULL) {
                put_byte(s, 0);
  4113a8:	44 8b 4b 28          	mov    0x28(%rbx),%r9d
  4113ac:	48 8b 73 10          	mov    0x10(%rbx),%rsi
  4113b0:	41 8d 49 01          	lea    0x1(%r9),%ecx
  4113b4:	89 4b 28             	mov    %ecx,0x28(%rbx)
  4113b7:	42 c6 04 0e 00       	movb   $0x0,(%rsi,%r9,1)
                put_byte(s, 0);
  4113bc:	44 8b 43 28          	mov    0x28(%rbx),%r8d
  4113c0:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
  4113c4:	45 8d 78 01          	lea    0x1(%r8),%r15d
  4113c8:	44 89 7b 28          	mov    %r15d,0x28(%rbx)
  4113cc:	42 c6 04 07 00       	movb   $0x0,(%rdi,%r8,1)
                put_byte(s, 0);
  4113d1:	8b 43 28             	mov    0x28(%rbx),%eax
  4113d4:	4c 8b 5b 10          	mov    0x10(%rbx),%r11
  4113d8:	44 8d 50 01          	lea    0x1(%rax),%r10d
  4113dc:	44 89 53 28          	mov    %r10d,0x28(%rbx)
  4113e0:	41 c6 04 03 00       	movb   $0x0,(%r11,%rax,1)
                put_byte(s, 0);
                put_byte(s, 0);
                put_byte(s, s->level == 9 ? 2 :
  4113e5:	41 ba 02 00 00 00    	mov    $0x2,%r10d
            put_byte(s, 8);
            if (s->gzhead == NULL) {
                put_byte(s, 0);
                put_byte(s, 0);
                put_byte(s, 0);
                put_byte(s, 0);
  4113eb:	8b 73 28             	mov    0x28(%rbx),%esi
  4113ee:	48 8b 53 10          	mov    0x10(%rbx),%rdx
  4113f2:	44 8d 4e 01          	lea    0x1(%rsi),%r9d
  4113f6:	44 89 4b 28          	mov    %r9d,0x28(%rbx)
  4113fa:	c6 04 32 00          	movb   $0x0,(%rdx,%rsi,1)
                put_byte(s, 0);
  4113fe:	44 8b 43 28          	mov    0x28(%rbx),%r8d
  411402:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
  411406:	41 8d 48 01          	lea    0x1(%r8),%ecx
  41140a:	89 4b 28             	mov    %ecx,0x28(%rbx)
  41140d:	42 c6 04 07 00       	movb   $0x0,(%rdi,%r8,1)
                put_byte(s, s->level == 9 ? 2 :
  411412:	44 8b 7b 28          	mov    0x28(%rbx),%r15d
  411416:	8b 83 b4 00 00 00    	mov    0xb4(%rbx),%eax
  41141c:	45 8d 5f 01          	lea    0x1(%r15),%r11d
  411420:	4c 03 7b 10          	add    0x10(%rbx),%r15
  411424:	83 f8 09             	cmp    $0x9,%eax
  411427:	44 89 5b 28          	mov    %r11d,0x28(%rbx)
  41142b:	74 11                	je     41143e <deflate+0xede>
  41142d:	83 bb b8 00 00 00 01 	cmpl   $0x1,0xb8(%rbx)
  411434:	7f 32                	jg     411468 <deflate+0xf08>
  411436:	83 f8 01             	cmp    $0x1,%eax
  411439:	7e 2d                	jle    411468 <deflate+0xf08>
  41143b:	45 31 d2             	xor    %r10d,%r10d
  41143e:	45 88 17             	mov    %r10b,(%r15)
                            (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2 ?
                             4 : 0));
                put_byte(s, OS_CODE);
  411441:	8b 73 28             	mov    0x28(%rbx),%esi
                s->status = BUSY_STATE;
  411444:	b8 71 00 00 00       	mov    $0x71,%eax
                put_byte(s, 0);
                put_byte(s, 0);
                put_byte(s, s->level == 9 ? 2 :
                            (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2 ?
                             4 : 0));
                put_byte(s, OS_CODE);
  411449:	48 8b 53 10          	mov    0x10(%rbx),%rdx
  41144d:	44 8d 4e 01          	lea    0x1(%rsi),%r9d
  411451:	44 89 4b 28          	mov    %r9d,0x28(%rbx)
  411455:	c6 04 32 03          	movb   $0x3,(%rdx,%rsi,1)
                s->status = BUSY_STATE;
  411459:	c7 43 08 71 00 00 00 	movl   $0x71,0x8(%rbx)
  411460:	8b 53 28             	mov    0x28(%rbx),%edx
  411463:	e9 8b f1 ff ff       	jmpq   4105f3 <deflate+0x93>
                put_byte(s, 0);
                put_byte(s, 0);
                put_byte(s, 0);
                put_byte(s, 0);
                put_byte(s, 0);
                put_byte(s, s->level == 9 ? 2 :
  411468:	41 ba 04 00 00 00    	mov    $0x4,%r10d
  41146e:	eb ce                	jmp    41143e <deflate+0xede>

0000000000411470 <deflateParams>:
{
    deflate_state *s;
    compress_func func;
    int err = Z_OK;

    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  411470:	48 85 ff             	test   %rdi,%rdi
  411473:	0f 84 fe 00 00 00    	je     411577 <deflateParams+0x107>
/* ========================================================================= */
int ZEXPORT deflateParams(strm, level, strategy)
    z_streamp strm;
    int level;
    int strategy;
{
  411479:	41 54                	push   %r12
  41147b:	55                   	push   %rbp
  41147c:	53                   	push   %rbx
  41147d:	48 83 ec 10          	sub    $0x10,%rsp
    deflate_state *s;
    compress_func func;
    int err = Z_OK;

    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  411481:	48 8b 5f 38          	mov    0x38(%rdi),%rbx
  411485:	48 85 db             	test   %rbx,%rbx
  411488:	0f 84 e2 00 00 00    	je     411570 <deflateParams+0x100>
    s = strm->state;

#ifdef FASTEST
    if (level != 0) level = 1;
#else
    if (level == Z_DEFAULT_COMPRESSION) level = 6;
  41148e:	83 fe ff             	cmp    $0xffffffff,%esi
  411491:	89 f5                	mov    %esi,%ebp
  411493:	0f 84 a7 00 00 00    	je     411540 <deflateParams+0xd0>
#endif
    if (level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED) {
  411499:	83 fe 09             	cmp    $0x9,%esi
  41149c:	0f 87 ce 00 00 00    	ja     411570 <deflateParams+0x100>
  4114a2:	83 fa 04             	cmp    $0x4,%edx
  4114a5:	0f 87 c5 00 00 00    	ja     411570 <deflateParams+0x100>
        return Z_STREAM_ERROR;
    }
    func = configuration_table[s->level].func;
  4114ab:	48 63 83 b4 00 00 00 	movslq 0xb4(%rbx),%rax

    if (func != configuration_table[level].func && strm->total_in != 0) {
  4114b2:	4c 63 e5             	movslq %ebp,%r12
  4114b5:	4c 89 e6             	mov    %r12,%rsi
  4114b8:	48 c1 e6 04          	shl    $0x4,%rsi
    if (level == Z_DEFAULT_COMPRESSION) level = 6;
#endif
    if (level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED) {
        return Z_STREAM_ERROR;
    }
    func = configuration_table[s->level].func;
  4114bc:	48 89 c1             	mov    %rax,%rcx
  4114bf:	48 c1 e0 04          	shl    $0x4,%rax

    if (func != configuration_table[level].func && strm->total_in != 0) {
  4114c3:	4c 8b 80 08 86 43 00 	mov    0x438608(%rax),%r8
  4114ca:	4c 39 86 08 86 43 00 	cmp    %r8,0x438608(%rsi)
    int level;
    int strategy;
{
    deflate_state *s;
    compress_func func;
    int err = Z_OK;
  4114d1:	b8 00 00 00 00       	mov    $0x0,%eax
    if (level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED) {
        return Z_STREAM_ERROR;
    }
    func = configuration_table[s->level].func;

    if (func != configuration_table[level].func && strm->total_in != 0) {
  4114d6:	74 07                	je     4114df <deflateParams+0x6f>
  4114d8:	48 83 7f 10 00       	cmpq   $0x0,0x10(%rdi)
  4114dd:	75 71                	jne    411550 <deflateParams+0xe0>
        /* Flush the last buffer: */
        err = deflate(strm, Z_PARTIAL_FLUSH);
    }
    if (s->level != level) {
  4114df:	39 cd                	cmp    %ecx,%ebp
  4114e1:	74 49                	je     41152c <deflateParams+0xbc>
        s->level = level;
        s->max_lazy_match   = configuration_table[level].max_lazy;
  4114e3:	49 c1 e4 04          	shl    $0x4,%r12
    if (func != configuration_table[level].func && strm->total_in != 0) {
        /* Flush the last buffer: */
        err = deflate(strm, Z_PARTIAL_FLUSH);
    }
    if (s->level != level) {
        s->level = level;
  4114e7:	89 ab b4 00 00 00    	mov    %ebp,0xb4(%rbx)
        s->max_lazy_match   = configuration_table[level].max_lazy;
  4114ed:	41 0f b7 bc 24 02 86 	movzwl 0x438602(%r12),%edi
  4114f4:	43 00 
        s->good_match       = configuration_table[level].good_length;
  4114f6:	45 0f b7 8c 24 00 86 	movzwl 0x438600(%r12),%r9d
  4114fd:	43 00 
        s->nice_match       = configuration_table[level].nice_length;
  4114ff:	45 0f b7 94 24 04 86 	movzwl 0x438604(%r12),%r10d
  411506:	43 00 
        s->max_chain_length = configuration_table[level].max_chain;
  411508:	45 0f b7 9c 24 06 86 	movzwl 0x438606(%r12),%r11d
  41150f:	43 00 
        /* Flush the last buffer: */
        err = deflate(strm, Z_PARTIAL_FLUSH);
    }
    if (s->level != level) {
        s->level = level;
        s->max_lazy_match   = configuration_table[level].max_lazy;
  411511:	89 bb b0 00 00 00    	mov    %edi,0xb0(%rbx)
        s->good_match       = configuration_table[level].good_length;
  411517:	44 89 8b bc 00 00 00 	mov    %r9d,0xbc(%rbx)
        s->nice_match       = configuration_table[level].nice_length;
  41151e:	44 89 93 c0 00 00 00 	mov    %r10d,0xc0(%rbx)
        s->max_chain_length = configuration_table[level].max_chain;
  411525:	44 89 9b ac 00 00 00 	mov    %r11d,0xac(%rbx)
    }
    s->strategy = strategy;
  41152c:	89 93 b8 00 00 00    	mov    %edx,0xb8(%rbx)
    return err;
}
  411532:	48 83 c4 10          	add    $0x10,%rsp
  411536:	5b                   	pop    %rbx
  411537:	5d                   	pop    %rbp
  411538:	41 5c                	pop    %r12
  41153a:	c3                   	retq   
  41153b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    s = strm->state;

#ifdef FASTEST
    if (level != 0) level = 1;
#else
    if (level == Z_DEFAULT_COMPRESSION) level = 6;
  411540:	bd 06 00 00 00       	mov    $0x6,%ebp
  411545:	e9 58 ff ff ff       	jmpq   4114a2 <deflateParams+0x32>
  41154a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    }
    func = configuration_table[s->level].func;

    if (func != configuration_table[level].func && strm->total_in != 0) {
        /* Flush the last buffer: */
        err = deflate(strm, Z_PARTIAL_FLUSH);
  411550:	be 01 00 00 00       	mov    $0x1,%esi
  411555:	89 54 24 0c          	mov    %edx,0xc(%rsp)
  411559:	e8 02 f0 ff ff       	callq  410560 <deflate>
  41155e:	8b 8b b4 00 00 00    	mov    0xb4(%rbx),%ecx
  411564:	8b 54 24 0c          	mov    0xc(%rsp),%edx
  411568:	e9 72 ff ff ff       	jmpq   4114df <deflateParams+0x6f>
  41156d:	0f 1f 00             	nopl   (%rax)
{
    deflate_state *s;
    compress_func func;
    int err = Z_OK;

    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  411570:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  411575:	eb bb                	jmp    411532 <deflateParams+0xc2>
  411577:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
        s->nice_match       = configuration_table[level].nice_length;
        s->max_chain_length = configuration_table[level].max_chain;
    }
    s->strategy = strategy;
    return err;
}
  41157c:	c3                   	retq   
  41157d:	0f 1f 00             	nopl   (%rax)

0000000000411580 <deflateEnd>:
int ZEXPORT deflateEnd (strm)
    z_streamp strm;
{
    int status;

    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  411580:	48 85 ff             	test   %rdi,%rdi
  411583:	0f 84 c7 00 00 00    	je     411650 <deflateEnd+0xd0>
  411589:	48 8b 57 38          	mov    0x38(%rdi),%rdx
  41158d:	48 85 d2             	test   %rdx,%rdx
  411590:	0f 84 ba 00 00 00    	je     411650 <deflateEnd+0xd0>
}

/* ========================================================================= */
int ZEXPORT deflateEnd (strm)
    z_streamp strm;
{
  411596:	55                   	push   %rbp
  411597:	53                   	push   %rbx
  411598:	48 83 ec 08          	sub    $0x8,%rsp
    int status;

    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

    status = strm->state->status;
  41159c:	8b 6a 08             	mov    0x8(%rdx),%ebp
    if (status != INIT_STATE &&
  41159f:	83 fd 2a             	cmp    $0x2a,%ebp
  4115a2:	74 2c                	je     4115d0 <deflateEnd+0x50>
        status != EXTRA_STATE &&
  4115a4:	8d 45 bb             	lea    -0x45(%rbp),%eax
    int status;

    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;

    status = strm->state->status;
    if (status != INIT_STATE &&
  4115a7:	83 e0 fb             	and    $0xfffffffb,%eax
  4115aa:	74 24                	je     4115d0 <deflateEnd+0x50>
        status != EXTRA_STATE &&
        status != NAME_STATE &&
  4115ac:	83 fd 5b             	cmp    $0x5b,%ebp
  4115af:	74 1f                	je     4115d0 <deflateEnd+0x50>
        status != COMMENT_STATE &&
        status != HCRC_STATE &&
  4115b1:	83 fd 67             	cmp    $0x67,%ebp
  4115b4:	0f 95 c1             	setne  %cl
        status != BUSY_STATE &&
  4115b7:	83 fd 71             	cmp    $0x71,%ebp
  4115ba:	0f 95 c3             	setne  %bl
  4115bd:	84 d9                	test   %bl,%cl
  4115bf:	74 0f                	je     4115d0 <deflateEnd+0x50>
  4115c1:	81 fd 9a 02 00 00    	cmp    $0x29a,%ebp
int ZEXPORT deflateEnd (strm)
    z_streamp strm;
{
    int status;

    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  4115c7:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    if (status != INIT_STATE &&
        status != EXTRA_STATE &&
        status != NAME_STATE &&
        status != COMMENT_STATE &&
        status != HCRC_STATE &&
        status != BUSY_STATE &&
  4115cc:	75 74                	jne    411642 <deflateEnd+0xc2>
  4115ce:	66 90                	xchg   %ax,%ax
        status != FINISH_STATE) {
      return Z_STREAM_ERROR;
    }

    /* Deallocate in reverse order of allocations: */
    TRY_FREE(strm, strm->state->pending_buf);
  4115d0:	48 8b 72 10          	mov    0x10(%rdx),%rsi
  4115d4:	48 89 fb             	mov    %rdi,%rbx
  4115d7:	48 85 f6             	test   %rsi,%rsi
  4115da:	74 0b                	je     4115e7 <deflateEnd+0x67>
  4115dc:	48 8b 7f 50          	mov    0x50(%rdi),%rdi
  4115e0:	ff 53 48             	callq  *0x48(%rbx)
  4115e3:	48 8b 53 38          	mov    0x38(%rbx),%rdx
    TRY_FREE(strm, strm->state->head);
  4115e7:	48 8b 72 68          	mov    0x68(%rdx),%rsi
  4115eb:	48 85 f6             	test   %rsi,%rsi
  4115ee:	74 0b                	je     4115fb <deflateEnd+0x7b>
  4115f0:	48 8b 7b 50          	mov    0x50(%rbx),%rdi
  4115f4:	ff 53 48             	callq  *0x48(%rbx)
  4115f7:	48 8b 53 38          	mov    0x38(%rbx),%rdx
    TRY_FREE(strm, strm->state->prev);
  4115fb:	48 8b 72 60          	mov    0x60(%rdx),%rsi
  4115ff:	48 85 f6             	test   %rsi,%rsi
  411602:	74 0b                	je     41160f <deflateEnd+0x8f>
  411604:	48 8b 7b 50          	mov    0x50(%rbx),%rdi
  411608:	ff 53 48             	callq  *0x48(%rbx)
  41160b:	48 8b 53 38          	mov    0x38(%rbx),%rdx
    TRY_FREE(strm, strm->state->window);
  41160f:	48 8b 72 50          	mov    0x50(%rdx),%rsi
  411613:	48 85 f6             	test   %rsi,%rsi
  411616:	74 0b                	je     411623 <deflateEnd+0xa3>
  411618:	48 8b 7b 50          	mov    0x50(%rbx),%rdi
  41161c:	ff 53 48             	callq  *0x48(%rbx)
  41161f:	48 8b 53 38          	mov    0x38(%rbx),%rdx

    ZFREE(strm, strm->state);
  411623:	48 89 d6             	mov    %rdx,%rsi
  411626:	48 8b 7b 50          	mov    0x50(%rbx),%rdi
  41162a:	ff 53 48             	callq  *0x48(%rbx)
    strm->state = Z_NULL;

    return status == BUSY_STATE ? Z_DATA_ERROR : Z_OK;
  41162d:	31 f6                	xor    %esi,%esi
  41162f:	83 fd 71             	cmp    $0x71,%ebp
    TRY_FREE(strm, strm->state->head);
    TRY_FREE(strm, strm->state->prev);
    TRY_FREE(strm, strm->state->window);

    ZFREE(strm, strm->state);
    strm->state = Z_NULL;
  411632:	48 c7 43 38 00 00 00 	movq   $0x0,0x38(%rbx)
  411639:	00 

    return status == BUSY_STATE ? Z_DATA_ERROR : Z_OK;
  41163a:	40 0f 95 c6          	setne  %sil
  41163e:	8d 44 76 fd          	lea    -0x3(%rsi,%rsi,2),%eax
}
  411642:	48 83 c4 08          	add    $0x8,%rsp
  411646:	5b                   	pop    %rbx
  411647:	5d                   	pop    %rbp
  411648:	c3                   	retq   
  411649:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
int ZEXPORT deflateEnd (strm)
    z_streamp strm;
{
    int status;

    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  411650:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  411655:	c3                   	retq   
  411656:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41165d:	00 00 00 

0000000000411660 <deflateInit2_>:
    int  windowBits;
    int  memLevel;
    int  strategy;
    const char *version;
    int stream_size;
{
  411660:	41 57                	push   %r15
  411662:	41 56                	push   %r14
  411664:	41 55                	push   %r13
  411666:	41 54                	push   %r12
  411668:	41 89 cc             	mov    %ecx,%r12d
  41166b:	55                   	push   %rbp
  41166c:	53                   	push   %rbx
  41166d:	48 83 ec 18          	sub    $0x18,%rsp
  411671:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  411676:	8b 4c 24 58          	mov    0x58(%rsp),%ecx
    ushf *overlay;
    /* We overlay pending_buf and d_buf+l_buf. This works since the average
     * output size for (length,distance) codes is <= 24 bits.
     */

    if (version == Z_NULL || version[0] != my_version[0] ||
  41167a:	48 85 c0             	test   %rax,%rax
  41167d:	0f 84 7d 02 00 00    	je     411900 <deflateInit2_+0x2a0>
  411683:	80 38 31             	cmpb   $0x31,(%rax)
  411686:	0f 85 74 02 00 00    	jne    411900 <deflateInit2_+0x2a0>
  41168c:	83 f9 70             	cmp    $0x70,%ecx
  41168f:	0f 85 6b 02 00 00    	jne    411900 <deflateInit2_+0x2a0>
        stream_size != sizeof(z_stream)) {
        return Z_VERSION_ERROR;
    }
    if (strm == Z_NULL) return Z_STREAM_ERROR;
  411695:	48 85 ff             	test   %rdi,%rdi
  411698:	48 89 fd             	mov    %rdi,%rbp
  41169b:	0f 84 77 02 00 00    	je     411918 <deflateInit2_+0x2b8>

    strm->msg = Z_NULL;
    if (strm->zalloc == (alloc_func)0) {
  4116a1:	48 8b 5f 40          	mov    0x40(%rdi),%rbx
  4116a5:	45 89 c5             	mov    %r8d,%r13d
  4116a8:	45 89 cf             	mov    %r9d,%r15d
        stream_size != sizeof(z_stream)) {
        return Z_VERSION_ERROR;
    }
    if (strm == Z_NULL) return Z_STREAM_ERROR;

    strm->msg = Z_NULL;
  4116ab:	48 c7 47 30 00 00 00 	movq   $0x0,0x30(%rdi)
  4116b2:	00 
    if (strm->zalloc == (alloc_func)0) {
  4116b3:	48 85 db             	test   %rbx,%rbx
  4116b6:	0f 84 14 02 00 00    	je     4118d0 <deflateInit2_+0x270>
        strm->zalloc = zcalloc;
        strm->opaque = (voidpf)0;
    }
    if (strm->zfree == (free_func)0) strm->zfree = zcfree;
  4116bc:	48 83 7d 48 00       	cmpq   $0x0,0x48(%rbp)
  4116c1:	0f 84 29 02 00 00    	je     4118f0 <deflateInit2_+0x290>

#ifdef FASTEST
    if (level != 0) level = 1;
#else
    if (level == Z_DEFAULT_COMPRESSION) level = 6;
  4116c7:	83 fe ff             	cmp    $0xffffffff,%esi
  4116ca:	41 be 06 00 00 00    	mov    $0x6,%r14d
  4116d0:	44 0f 45 f6          	cmovne %esi,%r14d
#endif

    if (windowBits < 0) { /* suppress zlib wrapper */
  4116d4:	45 85 e4             	test   %r12d,%r12d
  4116d7:	0f 88 d3 01 00 00    	js     4118b0 <deflateInit2_+0x250>
        wrap = 0;
        windowBits = -windowBits;
    }
#ifdef GZIP
    else if (windowBits > 15) {
  4116dd:	41 83 fc 0f          	cmp    $0xf,%r12d
    int  strategy;
    const char *version;
    int stream_size;
{
    deflate_state *s;
    int wrap = 1;
  4116e1:	bf 01 00 00 00       	mov    $0x1,%edi
    if (windowBits < 0) { /* suppress zlib wrapper */
        wrap = 0;
        windowBits = -windowBits;
    }
#ifdef GZIP
    else if (windowBits > 15) {
  4116e6:	0f 8f b4 01 00 00    	jg     4118a0 <deflateInit2_+0x240>
        wrap = 2;       /* write gzip wrapper instead */
        windowBits -= 16;
    }
#endif
    if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method != Z_DEFLATED ||
  4116ec:	41 8d 75 ff          	lea    -0x1(%r13),%esi
  4116f0:	83 fe 08             	cmp    $0x8,%esi
  4116f3:	0f 87 1f 02 00 00    	ja     411918 <deflateInit2_+0x2b8>
  4116f9:	83 fa 08             	cmp    $0x8,%edx
  4116fc:	0f 85 16 02 00 00    	jne    411918 <deflateInit2_+0x2b8>
        windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
  411702:	41 8d 54 24 f8       	lea    -0x8(%r12),%edx
    else if (windowBits > 15) {
        wrap = 2;       /* write gzip wrapper instead */
        windowBits -= 16;
    }
#endif
    if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method != Z_DEFLATED ||
  411707:	83 fa 07             	cmp    $0x7,%edx
  41170a:	0f 87 08 02 00 00    	ja     411918 <deflateInit2_+0x2b8>
        windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
        strategy < 0 || strategy > Z_FIXED) {
  411710:	41 83 fe 09          	cmp    $0x9,%r14d
  411714:	0f 87 fe 01 00 00    	ja     411918 <deflateInit2_+0x2b8>
  41171a:	41 83 ff 04          	cmp    $0x4,%r15d
  41171e:	0f 87 f4 01 00 00    	ja     411918 <deflateInit2_+0x2b8>
        return Z_STREAM_ERROR;
    }
    if (windowBits == 8) windowBits = 9;  /* until 256-byte window bug fixed */
  411724:	41 83 fc 08          	cmp    $0x8,%r12d
  411728:	45 89 e0             	mov    %r12d,%r8d
  41172b:	0f 84 8f 01 00 00    	je     4118c0 <deflateInit2_+0x260>
  411731:	89 7c 24 08          	mov    %edi,0x8(%rsp)
  411735:	44 89 44 24 0c       	mov    %r8d,0xc(%rsp)
    s = (deflate_state *) ZALLOC(strm, 1, sizeof(deflate_state));
  41173a:	ba 28 17 00 00       	mov    $0x1728,%edx
  41173f:	48 8b 7d 50          	mov    0x50(%rbp),%rdi
  411743:	be 01 00 00 00       	mov    $0x1,%esi
  411748:	ff d3                	callq  *%rbx
    if (s == Z_NULL) return Z_MEM_ERROR;
  41174a:	48 85 c0             	test   %rax,%rax
        windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
        strategy < 0 || strategy > Z_FIXED) {
        return Z_STREAM_ERROR;
    }
    if (windowBits == 8) windowBits = 9;  /* until 256-byte window bug fixed */
    s = (deflate_state *) ZALLOC(strm, 1, sizeof(deflate_state));
  41174d:	48 89 c3             	mov    %rax,%rbx
    if (s == Z_NULL) return Z_MEM_ERROR;
  411750:	0f 84 f2 01 00 00    	je     411948 <deflateInit2_+0x2e8>
    s->strm = strm;

    s->wrap = wrap;
    s->gzhead = Z_NULL;
    s->w_bits = windowBits;
    s->w_size = 1 << s->w_bits;
  411756:	41 bb 01 00 00 00    	mov    $0x1,%r11d
  41175c:	44 89 e1             	mov    %r12d,%ecx
    s = (deflate_state *) ZALLOC(strm, 1, sizeof(deflate_state));
    if (s == Z_NULL) return Z_MEM_ERROR;
    strm->state = (struct internal_state FAR *)s;
    s->strm = strm;

    s->wrap = wrap;
  41175f:	44 8b 4c 24 08       	mov    0x8(%rsp),%r9d
    s->gzhead = Z_NULL;
    s->w_bits = windowBits;
    s->w_size = 1 << s->w_bits;
  411764:	44 89 de             	mov    %r11d,%esi
    strm->state = (struct internal_state FAR *)s;
    s->strm = strm;

    s->wrap = wrap;
    s->gzhead = Z_NULL;
    s->w_bits = windowBits;
  411767:	44 8b 54 24 0c       	mov    0xc(%rsp),%r10d
        return Z_STREAM_ERROR;
    }
    if (windowBits == 8) windowBits = 9;  /* until 256-byte window bug fixed */
    s = (deflate_state *) ZALLOC(strm, 1, sizeof(deflate_state));
    if (s == Z_NULL) return Z_MEM_ERROR;
    strm->state = (struct internal_state FAR *)s;
  41176c:	48 89 45 38          	mov    %rax,0x38(%rbp)
    s->strm = strm;

    s->wrap = wrap;
    s->gzhead = Z_NULL;
    s->w_bits = windowBits;
    s->w_size = 1 << s->w_bits;
  411770:	d3 e6                	shl    %cl,%esi
    s->w_mask = s->w_size - 1;

    s->hash_bits = memLevel + 7;
  411772:	41 8d 4d 07          	lea    0x7(%r13),%ecx
    }
    if (windowBits == 8) windowBits = 9;  /* until 256-byte window bug fixed */
    s = (deflate_state *) ZALLOC(strm, 1, sizeof(deflate_state));
    if (s == Z_NULL) return Z_MEM_ERROR;
    strm->state = (struct internal_state FAR *)s;
    s->strm = strm;
  411776:	48 89 28             	mov    %rbp,(%rax)

    s->wrap = wrap;
    s->gzhead = Z_NULL;
    s->w_bits = windowBits;
    s->w_size = 1 << s->w_bits;
    s->w_mask = s->w_size - 1;
  411779:	44 8d 66 ff          	lea    -0x1(%rsi),%r12d
    s = (deflate_state *) ZALLOC(strm, 1, sizeof(deflate_state));
    if (s == Z_NULL) return Z_MEM_ERROR;
    strm->state = (struct internal_state FAR *)s;
    s->strm = strm;

    s->wrap = wrap;
  41177d:	44 89 48 2c          	mov    %r9d,0x2c(%rax)
    s->gzhead = Z_NULL;
    s->w_bits = windowBits;
    s->w_size = 1 << s->w_bits;
  411781:	89 70 44             	mov    %esi,0x44(%rax)
    strm->state = (struct internal_state FAR *)s;
    s->strm = strm;

    s->wrap = wrap;
    s->gzhead = Z_NULL;
    s->w_bits = windowBits;
  411784:	44 89 50 48          	mov    %r10d,0x48(%rax)
    s->w_size = 1 << s->w_bits;
    s->w_mask = s->w_size - 1;

    s->hash_bits = memLevel + 7;
  411788:	89 48 78             	mov    %ecx,0x78(%rax)
    s->hash_size = 1 << s->hash_bits;
    s->hash_mask = s->hash_size - 1;
    s->hash_shift =  ((s->hash_bits+MIN_MATCH-1)/MIN_MATCH);
  41178b:	bf ab aa aa aa       	mov    $0xaaaaaaab,%edi
    if (s == Z_NULL) return Z_MEM_ERROR;
    strm->state = (struct internal_state FAR *)s;
    s->strm = strm;

    s->wrap = wrap;
    s->gzhead = Z_NULL;
  411790:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
  411797:	00 
    s->w_bits = windowBits;
    s->w_size = 1 << s->w_bits;
    s->w_mask = s->w_size - 1;
  411798:	44 89 60 4c          	mov    %r12d,0x4c(%rax)

    s->hash_bits = memLevel + 7;
    s->hash_size = 1 << s->hash_bits;
  41179c:	44 89 d8             	mov    %r11d,%eax
  41179f:	d3 e0                	shl    %cl,%eax
  4117a1:	44 89 5c 24 08       	mov    %r11d,0x8(%rsp)
  4117a6:	89 43 74             	mov    %eax,0x74(%rbx)
    s->hash_mask = s->hash_size - 1;
  4117a9:	83 e8 01             	sub    $0x1,%eax
  4117ac:	89 43 7c             	mov    %eax,0x7c(%rbx)
    s->hash_shift =  ((s->hash_bits+MIN_MATCH-1)/MIN_MATCH);
  4117af:	41 8d 45 09          	lea    0x9(%r13),%eax
  4117b3:	f7 e7                	mul    %edi

    s->window = (Bytef *) ZALLOC(strm, s->w_size, 2*sizeof(Byte));
  4117b5:	48 8b 7d 50          	mov    0x50(%rbp),%rdi
    s->w_mask = s->w_size - 1;

    s->hash_bits = memLevel + 7;
    s->hash_size = 1 << s->hash_bits;
    s->hash_mask = s->hash_size - 1;
    s->hash_shift =  ((s->hash_bits+MIN_MATCH-1)/MIN_MATCH);
  4117b9:	d1 ea                	shr    %edx
  4117bb:	89 93 80 00 00 00    	mov    %edx,0x80(%rbx)

    s->window = (Bytef *) ZALLOC(strm, s->w_size, 2*sizeof(Byte));
  4117c1:	ba 02 00 00 00       	mov    $0x2,%edx
  4117c6:	ff 55 40             	callq  *0x40(%rbp)
    s->prev   = (Posf *)  ZALLOC(strm, s->w_size, sizeof(Pos));
  4117c9:	8b 73 44             	mov    0x44(%rbx),%esi
  4117cc:	48 8b 7d 50          	mov    0x50(%rbp),%rdi
  4117d0:	ba 02 00 00 00       	mov    $0x2,%edx
    s->hash_bits = memLevel + 7;
    s->hash_size = 1 << s->hash_bits;
    s->hash_mask = s->hash_size - 1;
    s->hash_shift =  ((s->hash_bits+MIN_MATCH-1)/MIN_MATCH);

    s->window = (Bytef *) ZALLOC(strm, s->w_size, 2*sizeof(Byte));
  4117d5:	48 89 43 50          	mov    %rax,0x50(%rbx)
    s->prev   = (Posf *)  ZALLOC(strm, s->w_size, sizeof(Pos));
  4117d9:	ff 55 40             	callq  *0x40(%rbp)
    s->head   = (Posf *)  ZALLOC(strm, s->hash_size, sizeof(Pos));
  4117dc:	8b 73 74             	mov    0x74(%rbx),%esi
  4117df:	48 8b 7d 50          	mov    0x50(%rbp),%rdi
  4117e3:	ba 02 00 00 00       	mov    $0x2,%edx
    s->hash_size = 1 << s->hash_bits;
    s->hash_mask = s->hash_size - 1;
    s->hash_shift =  ((s->hash_bits+MIN_MATCH-1)/MIN_MATCH);

    s->window = (Bytef *) ZALLOC(strm, s->w_size, 2*sizeof(Byte));
    s->prev   = (Posf *)  ZALLOC(strm, s->w_size, sizeof(Pos));
  4117e8:	48 89 43 60          	mov    %rax,0x60(%rbx)
    s->head   = (Posf *)  ZALLOC(strm, s->hash_size, sizeof(Pos));
  4117ec:	ff 55 40             	callq  *0x40(%rbp)

    s->lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */
  4117ef:	41 8d 4d 06          	lea    0x6(%r13),%ecx
  4117f3:	44 8b 6c 24 08       	mov    0x8(%rsp),%r13d
    s->hash_mask = s->hash_size - 1;
    s->hash_shift =  ((s->hash_bits+MIN_MATCH-1)/MIN_MATCH);

    s->window = (Bytef *) ZALLOC(strm, s->w_size, 2*sizeof(Byte));
    s->prev   = (Posf *)  ZALLOC(strm, s->w_size, sizeof(Pos));
    s->head   = (Posf *)  ZALLOC(strm, s->hash_size, sizeof(Pos));
  4117f8:	48 89 43 68          	mov    %rax,0x68(%rbx)

    s->lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

    overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
  4117fc:	48 8b 7d 50          	mov    0x50(%rbp),%rdi
  411800:	ba 04 00 00 00       	mov    $0x4,%edx

    s->window = (Bytef *) ZALLOC(strm, s->w_size, 2*sizeof(Byte));
    s->prev   = (Posf *)  ZALLOC(strm, s->w_size, sizeof(Pos));
    s->head   = (Posf *)  ZALLOC(strm, s->hash_size, sizeof(Pos));

    s->lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */
  411805:	44 89 ee             	mov    %r13d,%esi
  411808:	d3 e6                	shl    %cl,%esi
  41180a:	89 b3 f8 16 00 00    	mov    %esi,0x16f8(%rbx)

    overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
  411810:	ff 55 40             	callq  *0x40(%rbp)
    s->pending_buf = (uchf *) overlay;
    s->pending_buf_size = (ulg)s->lit_bufsize * (sizeof(ush)+2L);
  411813:	44 8b 83 f8 16 00 00 	mov    0x16f8(%rbx),%r8d

    if (s->window == Z_NULL || s->prev == Z_NULL || s->head == Z_NULL ||
  41181a:	48 83 7b 50 00       	cmpq   $0x0,0x50(%rbx)
    s->head   = (Posf *)  ZALLOC(strm, s->hash_size, sizeof(Pos));

    s->lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

    overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
    s->pending_buf = (uchf *) overlay;
  41181f:	48 89 43 10          	mov    %rax,0x10(%rbx)
    s->pending_buf_size = (ulg)s->lit_bufsize * (sizeof(ush)+2L);
  411823:	4a 8d 34 85 00 00 00 	lea    0x0(,%r8,4),%rsi
  41182a:	00 
  41182b:	4d 89 c1             	mov    %r8,%r9
  41182e:	48 89 73 18          	mov    %rsi,0x18(%rbx)

    if (s->window == Z_NULL || s->prev == Z_NULL || s->head == Z_NULL ||
  411832:	0f 84 e8 00 00 00    	je     411920 <deflateInit2_+0x2c0>
  411838:	48 83 7b 60 00       	cmpq   $0x0,0x60(%rbx)
  41183d:	0f 84 dd 00 00 00    	je     411920 <deflateInit2_+0x2c0>
  411843:	48 85 c0             	test   %rax,%rax
  411846:	0f 84 d4 00 00 00    	je     411920 <deflateInit2_+0x2c0>
  41184c:	48 83 7b 68 00       	cmpq   $0x0,0x68(%rbx)
  411851:	0f 84 c9 00 00 00    	je     411920 <deflateInit2_+0x2c0>
        s->status = FINISH_STATE;
        strm->msg = (char*)ERR_MSG(Z_MEM_ERROR);
        deflateEnd (strm);
        return Z_MEM_ERROR;
    }
    s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
  411857:	41 d1 e9             	shr    %r9d
    s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
  41185a:	4f 8d 1c 40          	lea    (%r8,%r8,2),%r11

    s->level = level;
  41185e:	44 89 b3 b4 00 00 00 	mov    %r14d,0xb4(%rbx)
        s->status = FINISH_STATE;
        strm->msg = (char*)ERR_MSG(Z_MEM_ERROR);
        deflateEnd (strm);
        return Z_MEM_ERROR;
    }
    s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
  411865:	4e 8d 14 48          	lea    (%rax,%r9,2),%r10
    s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;

    s->level = level;
    s->strategy = strategy;
  411869:	44 89 bb b8 00 00 00 	mov    %r15d,0xb8(%rbx)
    s->method = (Byte)method;
  411870:	c6 43 3c 08          	movb   $0x8,0x3c(%rbx)
        strm->msg = (char*)ERR_MSG(Z_MEM_ERROR);
        deflateEnd (strm);
        return Z_MEM_ERROR;
    }
    s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
    s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
  411874:	4c 01 d8             	add    %r11,%rax

    s->level = level;
    s->strategy = strategy;
    s->method = (Byte)method;

    return deflateReset(strm);
  411877:	48 89 ef             	mov    %rbp,%rdi
        s->status = FINISH_STATE;
        strm->msg = (char*)ERR_MSG(Z_MEM_ERROR);
        deflateEnd (strm);
        return Z_MEM_ERROR;
    }
    s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
  41187a:	4c 89 93 00 17 00 00 	mov    %r10,0x1700(%rbx)
    s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
  411881:	48 89 83 f0 16 00 00 	mov    %rax,0x16f0(%rbx)
    s->level = level;
    s->strategy = strategy;
    s->method = (Byte)method;

    return deflateReset(strm);
}
  411888:	48 83 c4 18          	add    $0x18,%rsp
  41188c:	5b                   	pop    %rbx
  41188d:	5d                   	pop    %rbp
  41188e:	41 5c                	pop    %r12
  411890:	41 5d                	pop    %r13
  411892:	41 5e                	pop    %r14
  411894:	41 5f                	pop    %r15

    s->level = level;
    s->strategy = strategy;
    s->method = (Byte)method;

    return deflateReset(strm);
  411896:	e9 45 ea ff ff       	jmpq   4102e0 <deflateReset>
  41189b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        windowBits = -windowBits;
    }
#ifdef GZIP
    else if (windowBits > 15) {
        wrap = 2;       /* write gzip wrapper instead */
        windowBits -= 16;
  4118a0:	41 83 ec 10          	sub    $0x10,%r12d
        wrap = 0;
        windowBits = -windowBits;
    }
#ifdef GZIP
    else if (windowBits > 15) {
        wrap = 2;       /* write gzip wrapper instead */
  4118a4:	40 b7 02             	mov    $0x2,%dil
  4118a7:	e9 40 fe ff ff       	jmpq   4116ec <deflateInit2_+0x8c>
  4118ac:	0f 1f 40 00          	nopl   0x0(%rax)
    if (level == Z_DEFAULT_COMPRESSION) level = 6;
#endif

    if (windowBits < 0) { /* suppress zlib wrapper */
        wrap = 0;
        windowBits = -windowBits;
  4118b0:	41 f7 dc             	neg    %r12d
#else
    if (level == Z_DEFAULT_COMPRESSION) level = 6;
#endif

    if (windowBits < 0) { /* suppress zlib wrapper */
        wrap = 0;
  4118b3:	31 ff                	xor    %edi,%edi
  4118b5:	e9 32 fe ff ff       	jmpq   4116ec <deflateInit2_+0x8c>
  4118ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method != Z_DEFLATED ||
        windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
        strategy < 0 || strategy > Z_FIXED) {
        return Z_STREAM_ERROR;
    }
    if (windowBits == 8) windowBits = 9;  /* until 256-byte window bug fixed */
  4118c0:	41 b8 09 00 00 00    	mov    $0x9,%r8d
  4118c6:	41 b4 09             	mov    $0x9,%r12b
  4118c9:	e9 63 fe ff ff       	jmpq   411731 <deflateInit2_+0xd1>
  4118ce:	66 90                	xchg   %ax,%ax
    strm->msg = Z_NULL;
    if (strm->zalloc == (alloc_func)0) {
        strm->zalloc = zcalloc;
        strm->opaque = (voidpf)0;
    }
    if (strm->zfree == (free_func)0) strm->zfree = zcfree;
  4118d0:	48 83 7d 48 00       	cmpq   $0x0,0x48(%rbp)
    }
    if (strm == Z_NULL) return Z_STREAM_ERROR;

    strm->msg = Z_NULL;
    if (strm->zalloc == (alloc_func)0) {
        strm->zalloc = zcalloc;
  4118d5:	48 c7 47 40 10 62 41 	movq   $0x416210,0x40(%rdi)
  4118dc:	00 
        strm->opaque = (voidpf)0;
  4118dd:	bb 10 62 41 00       	mov    $0x416210,%ebx
  4118e2:	48 c7 47 50 00 00 00 	movq   $0x0,0x50(%rdi)
  4118e9:	00 
    }
    if (strm->zfree == (free_func)0) strm->zfree = zcfree;
  4118ea:	0f 85 d7 fd ff ff    	jne    4116c7 <deflateInit2_+0x67>
  4118f0:	48 c7 45 48 20 62 41 	movq   $0x416220,0x48(%rbp)
  4118f7:	00 
  4118f8:	e9 ca fd ff ff       	jmpq   4116c7 <deflateInit2_+0x67>
  4118fd:	0f 1f 00             	nopl   (%rax)
     * output size for (length,distance) codes is <= 24 bits.
     */

    if (version == Z_NULL || version[0] != my_version[0] ||
        stream_size != sizeof(z_stream)) {
        return Z_VERSION_ERROR;
  411900:	b8 fa ff ff ff       	mov    $0xfffffffa,%eax
    s->level = level;
    s->strategy = strategy;
    s->method = (Byte)method;

    return deflateReset(strm);
}
  411905:	48 83 c4 18          	add    $0x18,%rsp
  411909:	5b                   	pop    %rbx
  41190a:	5d                   	pop    %rbp
  41190b:	41 5c                	pop    %r12
  41190d:	41 5d                	pop    %r13
  41190f:	41 5e                	pop    %r14
  411911:	41 5f                	pop    %r15
  411913:	c3                   	retq   
  411914:	0f 1f 40 00          	nopl   0x0(%rax)

    if (version == Z_NULL || version[0] != my_version[0] ||
        stream_size != sizeof(z_stream)) {
        return Z_VERSION_ERROR;
    }
    if (strm == Z_NULL) return Z_STREAM_ERROR;
  411918:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  41191d:	eb e6                	jmp    411905 <deflateInit2_+0x2a5>
  41191f:	90                   	nop
    s->pending_buf_size = (ulg)s->lit_bufsize * (sizeof(ush)+2L);

    if (s->window == Z_NULL || s->prev == Z_NULL || s->head == Z_NULL ||
        s->pending_buf == Z_NULL) {
        s->status = FINISH_STATE;
        strm->msg = (char*)ERR_MSG(Z_MEM_ERROR);
  411920:	4c 8b 3d 49 79 02 00 	mov    0x27949(%rip),%r15        # 439270 <z_errmsg+0x30>
    s->pending_buf = (uchf *) overlay;
    s->pending_buf_size = (ulg)s->lit_bufsize * (sizeof(ush)+2L);

    if (s->window == Z_NULL || s->prev == Z_NULL || s->head == Z_NULL ||
        s->pending_buf == Z_NULL) {
        s->status = FINISH_STATE;
  411927:	c7 43 08 9a 02 00 00 	movl   $0x29a,0x8(%rbx)
        strm->msg = (char*)ERR_MSG(Z_MEM_ERROR);
        deflateEnd (strm);
  41192e:	48 89 ef             	mov    %rbp,%rdi
    s->pending_buf_size = (ulg)s->lit_bufsize * (sizeof(ush)+2L);

    if (s->window == Z_NULL || s->prev == Z_NULL || s->head == Z_NULL ||
        s->pending_buf == Z_NULL) {
        s->status = FINISH_STATE;
        strm->msg = (char*)ERR_MSG(Z_MEM_ERROR);
  411931:	4c 89 7d 30          	mov    %r15,0x30(%rbp)
        deflateEnd (strm);
  411935:	e8 46 fc ff ff       	callq  411580 <deflateEnd>
        return Z_MEM_ERROR;
  41193a:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  41193f:	eb c4                	jmp    411905 <deflateInit2_+0x2a5>
  411941:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        strategy < 0 || strategy > Z_FIXED) {
        return Z_STREAM_ERROR;
    }
    if (windowBits == 8) windowBits = 9;  /* until 256-byte window bug fixed */
    s = (deflate_state *) ZALLOC(strm, 1, sizeof(deflate_state));
    if (s == Z_NULL) return Z_MEM_ERROR;
  411948:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  41194d:	eb b6                	jmp    411905 <deflateInit2_+0x2a5>
  41194f:	90                   	nop

0000000000411950 <deflateInit_>:
    ushf *overlay;
    /* We overlay pending_buf and d_buf+l_buf. This works since the average
     * output size for (length,distance) codes is <= 24 bits.
     */

    if (version == Z_NULL || version[0] != my_version[0] ||
  411950:	48 85 d2             	test   %rdx,%rdx
  411953:	0f 84 d7 01 00 00    	je     411b30 <deflateInit_+0x1e0>
  411959:	80 3a 31             	cmpb   $0x31,(%rdx)
  41195c:	0f 85 ce 01 00 00    	jne    411b30 <deflateInit_+0x1e0>
  411962:	83 f9 70             	cmp    $0x70,%ecx
  411965:	0f 85 c5 01 00 00    	jne    411b30 <deflateInit_+0x1e0>
        stream_size != sizeof(z_stream)) {
        return Z_VERSION_ERROR;
    }
    if (strm == Z_NULL) return Z_STREAM_ERROR;
  41196b:	48 85 ff             	test   %rdi,%rdi
int ZEXPORT deflateInit_(strm, level, version, stream_size)
    z_streamp strm;
    int level;
    const char *version;
    int stream_size;
{
  41196e:	41 54                	push   %r12
  411970:	55                   	push   %rbp
  411971:	48 89 fd             	mov    %rdi,%rbp
  411974:	53                   	push   %rbx

    if (version == Z_NULL || version[0] != my_version[0] ||
        stream_size != sizeof(z_stream)) {
        return Z_VERSION_ERROR;
    }
    if (strm == Z_NULL) return Z_STREAM_ERROR;
  411975:	0f 84 c5 01 00 00    	je     411b40 <deflateInit_+0x1f0>

    strm->msg = Z_NULL;
    if (strm->zalloc == (alloc_func)0) {
  41197b:	48 8b 47 40          	mov    0x40(%rdi),%rax
  41197f:	41 89 f4             	mov    %esi,%r12d
        stream_size != sizeof(z_stream)) {
        return Z_VERSION_ERROR;
    }
    if (strm == Z_NULL) return Z_STREAM_ERROR;

    strm->msg = Z_NULL;
  411982:	48 c7 47 30 00 00 00 	movq   $0x0,0x30(%rdi)
  411989:	00 
    if (strm->zalloc == (alloc_func)0) {
  41198a:	48 85 c0             	test   %rax,%rax
  41198d:	0f 84 6d 01 00 00    	je     411b00 <deflateInit_+0x1b0>
        strm->zalloc = zcalloc;
        strm->opaque = (voidpf)0;
    }
    if (strm->zfree == (free_func)0) strm->zfree = zcfree;
  411993:	48 83 7d 48 00       	cmpq   $0x0,0x48(%rbp)
  411998:	0f 84 82 01 00 00    	je     411b20 <deflateInit_+0x1d0>

#ifdef FASTEST
    if (level != 0) level = 1;
#else
    if (level == Z_DEFAULT_COMPRESSION) level = 6;
  41199e:	41 83 fc ff          	cmp    $0xffffffff,%r12d
  4119a2:	0f 84 48 01 00 00    	je     411af0 <deflateInit_+0x1a0>
        wrap = 2;       /* write gzip wrapper instead */
        windowBits -= 16;
    }
#endif
    if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method != Z_DEFLATED ||
        windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
  4119a8:	41 83 fc 09          	cmp    $0x9,%r12d
  4119ac:	0f 87 8e 01 00 00    	ja     411b40 <deflateInit_+0x1f0>
        strategy < 0 || strategy > Z_FIXED) {
        return Z_STREAM_ERROR;
    }
    if (windowBits == 8) windowBits = 9;  /* until 256-byte window bug fixed */
    s = (deflate_state *) ZALLOC(strm, 1, sizeof(deflate_state));
  4119b2:	48 8b 7d 50          	mov    0x50(%rbp),%rdi
  4119b6:	ba 28 17 00 00       	mov    $0x1728,%edx
  4119bb:	be 01 00 00 00       	mov    $0x1,%esi
  4119c0:	ff d0                	callq  *%rax
    if (s == Z_NULL) return Z_MEM_ERROR;
  4119c2:	48 85 c0             	test   %rax,%rax
        windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
        strategy < 0 || strategy > Z_FIXED) {
        return Z_STREAM_ERROR;
    }
    if (windowBits == 8) windowBits = 9;  /* until 256-byte window bug fixed */
    s = (deflate_state *) ZALLOC(strm, 1, sizeof(deflate_state));
  4119c5:	48 89 c3             	mov    %rax,%rbx
    if (s == Z_NULL) return Z_MEM_ERROR;
  4119c8:	0f 84 aa 01 00 00    	je     411b78 <deflateInit_+0x228>
    strm->state = (struct internal_state FAR *)s;
  4119ce:	48 89 45 38          	mov    %rax,0x38(%rbp)
    s->hash_bits = memLevel + 7;
    s->hash_size = 1 << s->hash_bits;
    s->hash_mask = s->hash_size - 1;
    s->hash_shift =  ((s->hash_bits+MIN_MATCH-1)/MIN_MATCH);

    s->window = (Bytef *) ZALLOC(strm, s->w_size, 2*sizeof(Byte));
  4119d2:	48 8b 7d 50          	mov    0x50(%rbp),%rdi
  4119d6:	ba 02 00 00 00       	mov    $0x2,%edx
  4119db:	be 00 80 00 00       	mov    $0x8000,%esi
    }
    if (windowBits == 8) windowBits = 9;  /* until 256-byte window bug fixed */
    s = (deflate_state *) ZALLOC(strm, 1, sizeof(deflate_state));
    if (s == Z_NULL) return Z_MEM_ERROR;
    strm->state = (struct internal_state FAR *)s;
    s->strm = strm;
  4119e0:	48 89 28             	mov    %rbp,(%rax)

    s->wrap = wrap;
  4119e3:	c7 40 2c 01 00 00 00 	movl   $0x1,0x2c(%rax)
    s->gzhead = Z_NULL;
  4119ea:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
  4119f1:	00 
    s->w_bits = windowBits;
  4119f2:	c7 40 48 0f 00 00 00 	movl   $0xf,0x48(%rax)
    s->w_size = 1 << s->w_bits;
  4119f9:	c7 40 44 00 80 00 00 	movl   $0x8000,0x44(%rax)
    s->w_mask = s->w_size - 1;
  411a00:	c7 40 4c ff 7f 00 00 	movl   $0x7fff,0x4c(%rax)

    s->hash_bits = memLevel + 7;
  411a07:	c7 40 78 0f 00 00 00 	movl   $0xf,0x78(%rax)
    s->hash_size = 1 << s->hash_bits;
  411a0e:	c7 40 74 00 80 00 00 	movl   $0x8000,0x74(%rax)
    s->hash_mask = s->hash_size - 1;
  411a15:	c7 40 7c ff 7f 00 00 	movl   $0x7fff,0x7c(%rax)
    s->hash_shift =  ((s->hash_bits+MIN_MATCH-1)/MIN_MATCH);
  411a1c:	c7 80 80 00 00 00 05 	movl   $0x5,0x80(%rax)
  411a23:	00 00 00 

    s->window = (Bytef *) ZALLOC(strm, s->w_size, 2*sizeof(Byte));
  411a26:	ff 55 40             	callq  *0x40(%rbp)
    s->prev   = (Posf *)  ZALLOC(strm, s->w_size, sizeof(Pos));
  411a29:	8b 73 44             	mov    0x44(%rbx),%esi
  411a2c:	48 8b 7d 50          	mov    0x50(%rbp),%rdi
  411a30:	ba 02 00 00 00       	mov    $0x2,%edx
    s->hash_bits = memLevel + 7;
    s->hash_size = 1 << s->hash_bits;
    s->hash_mask = s->hash_size - 1;
    s->hash_shift =  ((s->hash_bits+MIN_MATCH-1)/MIN_MATCH);

    s->window = (Bytef *) ZALLOC(strm, s->w_size, 2*sizeof(Byte));
  411a35:	48 89 43 50          	mov    %rax,0x50(%rbx)
    s->prev   = (Posf *)  ZALLOC(strm, s->w_size, sizeof(Pos));
  411a39:	ff 55 40             	callq  *0x40(%rbp)
    s->head   = (Posf *)  ZALLOC(strm, s->hash_size, sizeof(Pos));
  411a3c:	8b 73 74             	mov    0x74(%rbx),%esi
  411a3f:	48 8b 7d 50          	mov    0x50(%rbp),%rdi
  411a43:	ba 02 00 00 00       	mov    $0x2,%edx
    s->hash_size = 1 << s->hash_bits;
    s->hash_mask = s->hash_size - 1;
    s->hash_shift =  ((s->hash_bits+MIN_MATCH-1)/MIN_MATCH);

    s->window = (Bytef *) ZALLOC(strm, s->w_size, 2*sizeof(Byte));
    s->prev   = (Posf *)  ZALLOC(strm, s->w_size, sizeof(Pos));
  411a48:	48 89 43 60          	mov    %rax,0x60(%rbx)
    s->head   = (Posf *)  ZALLOC(strm, s->hash_size, sizeof(Pos));
  411a4c:	ff 55 40             	callq  *0x40(%rbp)

    s->lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

    overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
  411a4f:	ba 04 00 00 00       	mov    $0x4,%edx
  411a54:	be 00 40 00 00       	mov    $0x4000,%esi
    s->hash_mask = s->hash_size - 1;
    s->hash_shift =  ((s->hash_bits+MIN_MATCH-1)/MIN_MATCH);

    s->window = (Bytef *) ZALLOC(strm, s->w_size, 2*sizeof(Byte));
    s->prev   = (Posf *)  ZALLOC(strm, s->w_size, sizeof(Pos));
    s->head   = (Posf *)  ZALLOC(strm, s->hash_size, sizeof(Pos));
  411a59:	48 89 43 68          	mov    %rax,0x68(%rbx)

    s->lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */
  411a5d:	c7 83 f8 16 00 00 00 	movl   $0x4000,0x16f8(%rbx)
  411a64:	40 00 00 

    overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
  411a67:	48 8b 7d 50          	mov    0x50(%rbp),%rdi
  411a6b:	ff 55 40             	callq  *0x40(%rbp)
    s->pending_buf = (uchf *) overlay;
    s->pending_buf_size = (ulg)s->lit_bufsize * (sizeof(ush)+2L);
  411a6e:	8b 8b f8 16 00 00    	mov    0x16f8(%rbx),%ecx

    if (s->window == Z_NULL || s->prev == Z_NULL || s->head == Z_NULL ||
  411a74:	48 83 7b 50 00       	cmpq   $0x0,0x50(%rbx)
    s->head   = (Posf *)  ZALLOC(strm, s->hash_size, sizeof(Pos));

    s->lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

    overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
    s->pending_buf = (uchf *) overlay;
  411a79:	48 89 43 10          	mov    %rax,0x10(%rbx)
    s->pending_buf_size = (ulg)s->lit_bufsize * (sizeof(ush)+2L);
  411a7d:	48 8d 34 8d 00 00 00 	lea    0x0(,%rcx,4),%rsi
  411a84:	00 
  411a85:	48 89 ca             	mov    %rcx,%rdx
  411a88:	48 89 73 18          	mov    %rsi,0x18(%rbx)

    if (s->window == Z_NULL || s->prev == Z_NULL || s->head == Z_NULL ||
  411a8c:	0f 84 be 00 00 00    	je     411b50 <deflateInit_+0x200>
  411a92:	48 83 7b 60 00       	cmpq   $0x0,0x60(%rbx)
  411a97:	0f 84 b3 00 00 00    	je     411b50 <deflateInit_+0x200>
  411a9d:	48 85 c0             	test   %rax,%rax
  411aa0:	0f 84 aa 00 00 00    	je     411b50 <deflateInit_+0x200>
  411aa6:	48 83 7b 68 00       	cmpq   $0x0,0x68(%rbx)
  411aab:	0f 84 9f 00 00 00    	je     411b50 <deflateInit_+0x200>
        s->status = FINISH_STATE;
        strm->msg = (char*)ERR_MSG(Z_MEM_ERROR);
        deflateEnd (strm);
        return Z_MEM_ERROR;
    }
    s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
  411ab1:	d1 ea                	shr    %edx
    s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
  411ab3:	4c 8d 04 49          	lea    (%rcx,%rcx,2),%r8

    s->level = level;
  411ab7:	44 89 a3 b4 00 00 00 	mov    %r12d,0xb4(%rbx)
        s->status = FINISH_STATE;
        strm->msg = (char*)ERR_MSG(Z_MEM_ERROR);
        deflateEnd (strm);
        return Z_MEM_ERROR;
    }
    s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
  411abe:	48 8d 3c 50          	lea    (%rax,%rdx,2),%rdi
    s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;

    s->level = level;
    s->strategy = strategy;
  411ac2:	c7 83 b8 00 00 00 00 	movl   $0x0,0xb8(%rbx)
  411ac9:	00 00 00 
    s->method = (Byte)method;
  411acc:	c6 43 3c 08          	movb   $0x8,0x3c(%rbx)
        strm->msg = (char*)ERR_MSG(Z_MEM_ERROR);
        deflateEnd (strm);
        return Z_MEM_ERROR;
    }
    s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
    s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
  411ad0:	4c 01 c0             	add    %r8,%rax
        s->status = FINISH_STATE;
        strm->msg = (char*)ERR_MSG(Z_MEM_ERROR);
        deflateEnd (strm);
        return Z_MEM_ERROR;
    }
    s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
  411ad3:	48 89 bb 00 17 00 00 	mov    %rdi,0x1700(%rbx)
    s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
  411ada:	48 89 83 f0 16 00 00 	mov    %rax,0x16f0(%rbx)

    s->level = level;
    s->strategy = strategy;
    s->method = (Byte)method;

    return deflateReset(strm);
  411ae1:	48 89 ef             	mov    %rbp,%rdi
    int stream_size;
{
    return deflateInit2_(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL,
                         Z_DEFAULT_STRATEGY, version, stream_size);
    /* To do: ignore strm->next_in if we use it as window */
}
  411ae4:	5b                   	pop    %rbx
  411ae5:	5d                   	pop    %rbp
  411ae6:	41 5c                	pop    %r12

    s->level = level;
    s->strategy = strategy;
    s->method = (Byte)method;

    return deflateReset(strm);
  411ae8:	e9 f3 e7 ff ff       	jmpq   4102e0 <deflateReset>
  411aed:	0f 1f 00             	nopl   (%rax)
    if (strm->zfree == (free_func)0) strm->zfree = zcfree;

#ifdef FASTEST
    if (level != 0) level = 1;
#else
    if (level == Z_DEFAULT_COMPRESSION) level = 6;
  411af0:	41 bc 06 00 00 00    	mov    $0x6,%r12d
  411af6:	e9 b7 fe ff ff       	jmpq   4119b2 <deflateInit_+0x62>
  411afb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    strm->msg = Z_NULL;
    if (strm->zalloc == (alloc_func)0) {
        strm->zalloc = zcalloc;
        strm->opaque = (voidpf)0;
    }
    if (strm->zfree == (free_func)0) strm->zfree = zcfree;
  411b00:	48 83 7d 48 00       	cmpq   $0x0,0x48(%rbp)
    }
    if (strm == Z_NULL) return Z_STREAM_ERROR;

    strm->msg = Z_NULL;
    if (strm->zalloc == (alloc_func)0) {
        strm->zalloc = zcalloc;
  411b05:	48 c7 47 40 10 62 41 	movq   $0x416210,0x40(%rdi)
  411b0c:	00 
        strm->opaque = (voidpf)0;
  411b0d:	b8 10 62 41 00       	mov    $0x416210,%eax
  411b12:	48 c7 47 50 00 00 00 	movq   $0x0,0x50(%rdi)
  411b19:	00 
    }
    if (strm->zfree == (free_func)0) strm->zfree = zcfree;
  411b1a:	0f 85 7e fe ff ff    	jne    41199e <deflateInit_+0x4e>
  411b20:	48 c7 45 48 20 62 41 	movq   $0x416220,0x48(%rbp)
  411b27:	00 
  411b28:	e9 71 fe ff ff       	jmpq   41199e <deflateInit_+0x4e>
  411b2d:	0f 1f 00             	nopl   (%rax)
     * output size for (length,distance) codes is <= 24 bits.
     */

    if (version == Z_NULL || version[0] != my_version[0] ||
        stream_size != sizeof(z_stream)) {
        return Z_VERSION_ERROR;
  411b30:	b8 fa ff ff ff       	mov    $0xfffffffa,%eax
  411b35:	c3                   	retq   
  411b36:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  411b3d:	00 00 00 
    }
    if (strm == Z_NULL) return Z_STREAM_ERROR;
  411b40:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    int stream_size;
{
    return deflateInit2_(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL,
                         Z_DEFAULT_STRATEGY, version, stream_size);
    /* To do: ignore strm->next_in if we use it as window */
}
  411b45:	5b                   	pop    %rbx
  411b46:	5d                   	pop    %rbp
  411b47:	41 5c                	pop    %r12
  411b49:	c3                   	retq   
  411b4a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    s->pending_buf_size = (ulg)s->lit_bufsize * (sizeof(ush)+2L);

    if (s->window == Z_NULL || s->prev == Z_NULL || s->head == Z_NULL ||
        s->pending_buf == Z_NULL) {
        s->status = FINISH_STATE;
        strm->msg = (char*)ERR_MSG(Z_MEM_ERROR);
  411b50:	4c 8b 0d 19 77 02 00 	mov    0x27719(%rip),%r9        # 439270 <z_errmsg+0x30>
    s->pending_buf = (uchf *) overlay;
    s->pending_buf_size = (ulg)s->lit_bufsize * (sizeof(ush)+2L);

    if (s->window == Z_NULL || s->prev == Z_NULL || s->head == Z_NULL ||
        s->pending_buf == Z_NULL) {
        s->status = FINISH_STATE;
  411b57:	c7 43 08 9a 02 00 00 	movl   $0x29a,0x8(%rbx)
        strm->msg = (char*)ERR_MSG(Z_MEM_ERROR);
        deflateEnd (strm);
  411b5e:	48 89 ef             	mov    %rbp,%rdi
    s->pending_buf_size = (ulg)s->lit_bufsize * (sizeof(ush)+2L);

    if (s->window == Z_NULL || s->prev == Z_NULL || s->head == Z_NULL ||
        s->pending_buf == Z_NULL) {
        s->status = FINISH_STATE;
        strm->msg = (char*)ERR_MSG(Z_MEM_ERROR);
  411b61:	4c 89 4d 30          	mov    %r9,0x30(%rbp)
        deflateEnd (strm);
  411b65:	e8 16 fa ff ff       	callq  411580 <deflateEnd>
        return Z_MEM_ERROR;
  411b6a:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  411b6f:	eb d4                	jmp    411b45 <deflateInit_+0x1f5>
  411b71:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        strategy < 0 || strategy > Z_FIXED) {
        return Z_STREAM_ERROR;
    }
    if (windowBits == 8) windowBits = 9;  /* until 256-byte window bug fixed */
    s = (deflate_state *) ZALLOC(strm, 1, sizeof(deflate_state));
    if (s == Z_NULL) return Z_MEM_ERROR;
  411b78:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  411b7d:	eb c6                	jmp    411b45 <deflateInit_+0x1f5>
  411b7f:	90                   	nop

0000000000411b80 <deflateCopy>:
    deflate_state *ds;
    deflate_state *ss;
    ushf *overlay;


    if (source == Z_NULL || dest == Z_NULL || source->state == Z_NULL) {
  411b80:	48 85 f6             	test   %rsi,%rsi
  411b83:	0f 84 2f 02 00 00    	je     411db8 <deflateCopy+0x238>
  411b89:	48 85 ff             	test   %rdi,%rdi
  411b8c:	0f 84 26 02 00 00    	je     411db8 <deflateCopy+0x238>
 * doesn't have enough memory anyway to duplicate compression states).
 */
int ZEXPORT deflateCopy (dest, source)
    z_streamp dest;
    z_streamp source;
{
  411b92:	41 55                	push   %r13
  411b94:	41 54                	push   %r12
  411b96:	55                   	push   %rbp
  411b97:	53                   	push   %rbx
  411b98:	48 83 ec 08          	sub    $0x8,%rsp
    deflate_state *ds;
    deflate_state *ss;
    ushf *overlay;


    if (source == Z_NULL || dest == Z_NULL || source->state == Z_NULL) {
  411b9c:	4c 8b 66 38          	mov    0x38(%rsi),%r12
  411ba0:	4d 85 e4             	test   %r12,%r12
  411ba3:	0f 84 27 02 00 00    	je     411dd0 <deflateCopy+0x250>

__fortify_function void *
__NTH (memcpy (void *__restrict __dest, const void *__restrict __src,
	       size_t __len))
{
  return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
  411ba9:	48 8b 06             	mov    (%rsi),%rax
  411bac:	48 89 fd             	mov    %rdi,%rbp
  411baf:	48 89 07             	mov    %rax,(%rdi)
  411bb2:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  411bb6:	48 89 57 08          	mov    %rdx,0x8(%rdi)
  411bba:	48 8b 4e 10          	mov    0x10(%rsi),%rcx
  411bbe:	48 89 4f 10          	mov    %rcx,0x10(%rdi)
  411bc2:	48 8b 5e 18          	mov    0x18(%rsi),%rbx
  411bc6:	48 89 5f 18          	mov    %rbx,0x18(%rdi)
  411bca:	48 8b 7e 20          	mov    0x20(%rsi),%rdi
  411bce:	48 89 7d 20          	mov    %rdi,0x20(%rbp)
  411bd2:	4c 8b 46 28          	mov    0x28(%rsi),%r8
  411bd6:	4c 89 45 28          	mov    %r8,0x28(%rbp)
  411bda:	4c 8b 4e 30          	mov    0x30(%rsi),%r9
  411bde:	4c 89 4d 30          	mov    %r9,0x30(%rbp)
  411be2:	4c 8b 56 38          	mov    0x38(%rsi),%r10
  411be6:	4c 89 55 38          	mov    %r10,0x38(%rbp)
  411bea:	4c 8b 6e 40          	mov    0x40(%rsi),%r13
  411bee:	4c 89 6d 40          	mov    %r13,0x40(%rbp)
  411bf2:	4c 8b 5e 48          	mov    0x48(%rsi),%r11
  411bf6:	4c 89 5d 48          	mov    %r11,0x48(%rbp)
  411bfa:	48 8b 7e 50          	mov    0x50(%rsi),%rdi
  411bfe:	48 89 7d 50          	mov    %rdi,0x50(%rbp)
  411c02:	48 8b 46 58          	mov    0x58(%rsi),%rax
  411c06:	48 89 45 58          	mov    %rax,0x58(%rbp)
  411c0a:	48 8b 56 60          	mov    0x60(%rsi),%rdx
  411c0e:	48 89 55 60          	mov    %rdx,0x60(%rbp)
  411c12:	48 8b 76 68          	mov    0x68(%rsi),%rsi

    ss = source->state;

    zmemcpy(dest, source, sizeof(z_stream));

    ds = (deflate_state *) ZALLOC(dest, 1, sizeof(deflate_state));
  411c16:	ba 28 17 00 00       	mov    $0x1728,%edx
  411c1b:	48 89 75 68          	mov    %rsi,0x68(%rbp)
  411c1f:	be 01 00 00 00       	mov    $0x1,%esi
  411c24:	41 ff d5             	callq  *%r13
    if (ds == Z_NULL) return Z_MEM_ERROR;
  411c27:	48 85 c0             	test   %rax,%rax

    ss = source->state;

    zmemcpy(dest, source, sizeof(z_stream));

    ds = (deflate_state *) ZALLOC(dest, 1, sizeof(deflate_state));
  411c2a:	48 89 c3             	mov    %rax,%rbx
    if (ds == Z_NULL) return Z_MEM_ERROR;
  411c2d:	0f 84 ad 01 00 00    	je     411de0 <deflateCopy+0x260>
    dest->state = (struct internal_state FAR *) ds;
  411c33:	48 89 45 38          	mov    %rax,0x38(%rbp)
  411c37:	49 8b 0c 24          	mov    (%r12),%rcx
  411c3b:	4c 8d 40 08          	lea    0x8(%rax),%r8
  411c3f:	4c 89 e6             	mov    %r12,%rsi
    zmemcpy(ds, ss, sizeof(deflate_state));
    ds->strm = dest;

    ds->window = (Bytef *) ZALLOC(dest, ds->w_size, 2*sizeof(Byte));
  411c42:	ba 02 00 00 00       	mov    $0x2,%edx
  411c47:	49 83 e0 f8          	and    $0xfffffffffffffff8,%r8
  411c4b:	48 89 08             	mov    %rcx,(%rax)
  411c4e:	48 89 c1             	mov    %rax,%rcx
  411c51:	49 8b bc 24 20 17 00 	mov    0x1720(%r12),%rdi
  411c58:	00 
  411c59:	4c 29 c1             	sub    %r8,%rcx
  411c5c:	48 29 ce             	sub    %rcx,%rsi
  411c5f:	81 c1 28 17 00 00    	add    $0x1728,%ecx
  411c65:	48 89 b8 20 17 00 00 	mov    %rdi,0x1720(%rax)
  411c6c:	c1 e9 03             	shr    $0x3,%ecx
  411c6f:	4c 89 c7             	mov    %r8,%rdi
  411c72:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)

    ds = (deflate_state *) ZALLOC(dest, 1, sizeof(deflate_state));
    if (ds == Z_NULL) return Z_MEM_ERROR;
    dest->state = (struct internal_state FAR *) ds;
    zmemcpy(ds, ss, sizeof(deflate_state));
    ds->strm = dest;
  411c75:	48 89 28             	mov    %rbp,(%rax)

    ds->window = (Bytef *) ZALLOC(dest, ds->w_size, 2*sizeof(Byte));
  411c78:	8b 70 44             	mov    0x44(%rax),%esi
  411c7b:	48 8b 7d 50          	mov    0x50(%rbp),%rdi
  411c7f:	ff 55 40             	callq  *0x40(%rbp)
    ds->prev   = (Posf *)  ZALLOC(dest, ds->w_size, sizeof(Pos));
  411c82:	8b 73 44             	mov    0x44(%rbx),%esi
  411c85:	48 8b 7d 50          	mov    0x50(%rbp),%rdi
  411c89:	ba 02 00 00 00       	mov    $0x2,%edx
    if (ds == Z_NULL) return Z_MEM_ERROR;
    dest->state = (struct internal_state FAR *) ds;
    zmemcpy(ds, ss, sizeof(deflate_state));
    ds->strm = dest;

    ds->window = (Bytef *) ZALLOC(dest, ds->w_size, 2*sizeof(Byte));
  411c8e:	48 89 43 50          	mov    %rax,0x50(%rbx)
    ds->prev   = (Posf *)  ZALLOC(dest, ds->w_size, sizeof(Pos));
  411c92:	ff 55 40             	callq  *0x40(%rbp)
    ds->head   = (Posf *)  ZALLOC(dest, ds->hash_size, sizeof(Pos));
  411c95:	8b 73 74             	mov    0x74(%rbx),%esi
  411c98:	48 8b 7d 50          	mov    0x50(%rbp),%rdi
  411c9c:	ba 02 00 00 00       	mov    $0x2,%edx
    dest->state = (struct internal_state FAR *) ds;
    zmemcpy(ds, ss, sizeof(deflate_state));
    ds->strm = dest;

    ds->window = (Bytef *) ZALLOC(dest, ds->w_size, 2*sizeof(Byte));
    ds->prev   = (Posf *)  ZALLOC(dest, ds->w_size, sizeof(Pos));
  411ca1:	48 89 43 60          	mov    %rax,0x60(%rbx)
    ds->head   = (Posf *)  ZALLOC(dest, ds->hash_size, sizeof(Pos));
  411ca5:	ff 55 40             	callq  *0x40(%rbp)
    overlay = (ushf *) ZALLOC(dest, ds->lit_bufsize, sizeof(ush)+2);
  411ca8:	48 8b 7d 50          	mov    0x50(%rbp),%rdi
    zmemcpy(ds, ss, sizeof(deflate_state));
    ds->strm = dest;

    ds->window = (Bytef *) ZALLOC(dest, ds->w_size, 2*sizeof(Byte));
    ds->prev   = (Posf *)  ZALLOC(dest, ds->w_size, sizeof(Pos));
    ds->head   = (Posf *)  ZALLOC(dest, ds->hash_size, sizeof(Pos));
  411cac:	48 89 43 68          	mov    %rax,0x68(%rbx)
    overlay = (ushf *) ZALLOC(dest, ds->lit_bufsize, sizeof(ush)+2);
  411cb0:	ba 04 00 00 00       	mov    $0x4,%edx
  411cb5:	8b b3 f8 16 00 00    	mov    0x16f8(%rbx),%esi
  411cbb:	ff 55 40             	callq  *0x40(%rbp)
    ds->pending_buf = (uchf *) overlay;

    if (ds->window == Z_NULL || ds->prev == Z_NULL || ds->head == Z_NULL ||
  411cbe:	48 8b 7b 50          	mov    0x50(%rbx),%rdi
    ds->strm = dest;

    ds->window = (Bytef *) ZALLOC(dest, ds->w_size, 2*sizeof(Byte));
    ds->prev   = (Posf *)  ZALLOC(dest, ds->w_size, sizeof(Pos));
    ds->head   = (Posf *)  ZALLOC(dest, ds->hash_size, sizeof(Pos));
    overlay = (ushf *) ZALLOC(dest, ds->lit_bufsize, sizeof(ush)+2);
  411cc2:	49 89 c5             	mov    %rax,%r13
    ds->pending_buf = (uchf *) overlay;
  411cc5:	48 89 43 10          	mov    %rax,0x10(%rbx)

    if (ds->window == Z_NULL || ds->prev == Z_NULL || ds->head == Z_NULL ||
  411cc9:	48 85 ff             	test   %rdi,%rdi
  411ccc:	0f 84 ee 00 00 00    	je     411dc0 <deflateCopy+0x240>
  411cd2:	48 83 7b 60 00       	cmpq   $0x0,0x60(%rbx)
  411cd7:	0f 84 e3 00 00 00    	je     411dc0 <deflateCopy+0x240>
  411cdd:	48 85 c0             	test   %rax,%rax
  411ce0:	0f 84 da 00 00 00    	je     411dc0 <deflateCopy+0x240>
  411ce6:	48 83 7b 68 00       	cmpq   $0x0,0x68(%rbx)
  411ceb:	0f 84 cf 00 00 00    	je     411dc0 <deflateCopy+0x240>
        ds->pending_buf == Z_NULL) {
        deflateEnd (dest);
        return Z_MEM_ERROR;
    }
    /* following zmemcpy do not work for 16-bit MSDOS */
    zmemcpy(ds->window, ss->window, ds->w_size * 2 * sizeof(Byte));
  411cf1:	8b 6b 44             	mov    0x44(%rbx),%ebp
  411cf4:	49 8b 74 24 50       	mov    0x50(%r12),%rsi
  411cf9:	8d 54 2d 00          	lea    0x0(%rbp,%rbp,1),%edx
  411cfd:	e8 ee 52 ff ff       	callq  406ff0 <memcpy@plt>
    zmemcpy(ds->prev, ss->prev, ds->w_size * sizeof(Pos));
  411d02:	8b 53 44             	mov    0x44(%rbx),%edx
  411d05:	49 8b 74 24 60       	mov    0x60(%r12),%rsi
  411d0a:	48 8b 7b 60          	mov    0x60(%rbx),%rdi
  411d0e:	48 01 d2             	add    %rdx,%rdx
  411d11:	e8 da 52 ff ff       	callq  406ff0 <memcpy@plt>
    zmemcpy(ds->head, ss->head, ds->hash_size * sizeof(Pos));
  411d16:	8b 53 74             	mov    0x74(%rbx),%edx
  411d19:	49 8b 74 24 68       	mov    0x68(%r12),%rsi
  411d1e:	48 8b 7b 68          	mov    0x68(%rbx),%rdi
  411d22:	48 01 d2             	add    %rdx,%rdx
  411d25:	e8 c6 52 ff ff       	callq  406ff0 <memcpy@plt>
    zmemcpy(ds->pending_buf, ss->pending_buf, (uInt)ds->pending_buf_size);
  411d2a:	8b 53 18             	mov    0x18(%rbx),%edx
  411d2d:	49 8b 74 24 10       	mov    0x10(%r12),%rsi
  411d32:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
  411d36:	e8 b5 52 ff ff       	callq  406ff0 <memcpy@plt>

    ds->pending_out = ds->pending_buf + (ss->pending_out - ss->pending_buf);
  411d3b:	4c 8b 4b 10          	mov    0x10(%rbx),%r9
    ds->d_buf = overlay + ds->lit_bufsize/sizeof(ush);
    ds->l_buf = ds->pending_buf + (1+sizeof(ush))*ds->lit_bufsize;

    ds->l_desc.dyn_tree = ds->dyn_ltree;
  411d3f:	48 8d 8b c4 00 00 00 	lea    0xc4(%rbx),%rcx
    ds->d_desc.dyn_tree = ds->dyn_dtree;
  411d46:	48 8d b3 b8 09 00 00 	lea    0x9b8(%rbx),%rsi
    ds->bl_desc.dyn_tree = ds->bl_tree;
  411d4d:	48 8d bb ac 0a 00 00 	lea    0xaac(%rbx),%rdi
    zmemcpy(ds->window, ss->window, ds->w_size * 2 * sizeof(Byte));
    zmemcpy(ds->prev, ss->prev, ds->w_size * sizeof(Pos));
    zmemcpy(ds->head, ss->head, ds->hash_size * sizeof(Pos));
    zmemcpy(ds->pending_buf, ss->pending_buf, (uInt)ds->pending_buf_size);

    ds->pending_out = ds->pending_buf + (ss->pending_out - ss->pending_buf);
  411d54:	4d 89 ca             	mov    %r9,%r10
  411d57:	4d 03 54 24 20       	add    0x20(%r12),%r10
  411d5c:	4d 2b 54 24 10       	sub    0x10(%r12),%r10
    ds->d_buf = overlay + ds->lit_bufsize/sizeof(ush);
  411d61:	44 8b a3 f8 16 00 00 	mov    0x16f8(%rbx),%r12d
    ds->l_buf = ds->pending_buf + (1+sizeof(ush))*ds->lit_bufsize;

    ds->l_desc.dyn_tree = ds->dyn_ltree;
  411d68:	48 89 8b 48 0b 00 00 	mov    %rcx,0xb48(%rbx)
    ds->d_desc.dyn_tree = ds->dyn_dtree;
  411d6f:	48 89 b3 60 0b 00 00 	mov    %rsi,0xb60(%rbx)
    ds->bl_desc.dyn_tree = ds->bl_tree;
  411d76:	48 89 bb 78 0b 00 00 	mov    %rdi,0xb78(%rbx)
    zmemcpy(ds->prev, ss->prev, ds->w_size * sizeof(Pos));
    zmemcpy(ds->head, ss->head, ds->hash_size * sizeof(Pos));
    zmemcpy(ds->pending_buf, ss->pending_buf, (uInt)ds->pending_buf_size);

    ds->pending_out = ds->pending_buf + (ss->pending_out - ss->pending_buf);
    ds->d_buf = overlay + ds->lit_bufsize/sizeof(ush);
  411d7d:	45 89 e3             	mov    %r12d,%r11d
    ds->l_buf = ds->pending_buf + (1+sizeof(ush))*ds->lit_bufsize;
  411d80:	44 89 e2             	mov    %r12d,%edx
    zmemcpy(ds->prev, ss->prev, ds->w_size * sizeof(Pos));
    zmemcpy(ds->head, ss->head, ds->hash_size * sizeof(Pos));
    zmemcpy(ds->pending_buf, ss->pending_buf, (uInt)ds->pending_buf_size);

    ds->pending_out = ds->pending_buf + (ss->pending_out - ss->pending_buf);
    ds->d_buf = overlay + ds->lit_bufsize/sizeof(ush);
  411d83:	41 d1 eb             	shr    %r11d
    ds->l_buf = ds->pending_buf + (1+sizeof(ush))*ds->lit_bufsize;
  411d86:	4c 8d 04 52          	lea    (%rdx,%rdx,2),%r8
    zmemcpy(ds->window, ss->window, ds->w_size * 2 * sizeof(Byte));
    zmemcpy(ds->prev, ss->prev, ds->w_size * sizeof(Pos));
    zmemcpy(ds->head, ss->head, ds->hash_size * sizeof(Pos));
    zmemcpy(ds->pending_buf, ss->pending_buf, (uInt)ds->pending_buf_size);

    ds->pending_out = ds->pending_buf + (ss->pending_out - ss->pending_buf);
  411d8a:	4c 89 53 20          	mov    %r10,0x20(%rbx)
    ds->d_buf = overlay + ds->lit_bufsize/sizeof(ush);
  411d8e:	4b 8d 44 5d 00       	lea    0x0(%r13,%r11,2),%rax
    ds->l_buf = ds->pending_buf + (1+sizeof(ush))*ds->lit_bufsize;
  411d93:	4d 01 c8             	add    %r9,%r8
    zmemcpy(ds->prev, ss->prev, ds->w_size * sizeof(Pos));
    zmemcpy(ds->head, ss->head, ds->hash_size * sizeof(Pos));
    zmemcpy(ds->pending_buf, ss->pending_buf, (uInt)ds->pending_buf_size);

    ds->pending_out = ds->pending_buf + (ss->pending_out - ss->pending_buf);
    ds->d_buf = overlay + ds->lit_bufsize/sizeof(ush);
  411d96:	48 89 83 00 17 00 00 	mov    %rax,0x1700(%rbx)
    ds->l_buf = ds->pending_buf + (1+sizeof(ush))*ds->lit_bufsize;
  411d9d:	4c 89 83 f0 16 00 00 	mov    %r8,0x16f0(%rbx)

    ds->l_desc.dyn_tree = ds->dyn_ltree;
    ds->d_desc.dyn_tree = ds->dyn_dtree;
    ds->bl_desc.dyn_tree = ds->bl_tree;

    return Z_OK;
  411da4:	31 c0                	xor    %eax,%eax
#endif /* MAXSEG_64K */
}
  411da6:	48 83 c4 08          	add    $0x8,%rsp
  411daa:	5b                   	pop    %rbx
  411dab:	5d                   	pop    %rbp
  411dac:	41 5c                	pop    %r12
  411dae:	41 5d                	pop    %r13
  411db0:	c3                   	retq   
  411db1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    deflate_state *ss;
    ushf *overlay;


    if (source == Z_NULL || dest == Z_NULL || source->state == Z_NULL) {
        return Z_STREAM_ERROR;
  411db8:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    ds->d_desc.dyn_tree = ds->dyn_dtree;
    ds->bl_desc.dyn_tree = ds->bl_tree;

    return Z_OK;
#endif /* MAXSEG_64K */
}
  411dbd:	c3                   	retq   
  411dbe:	66 90                	xchg   %ax,%ax
    overlay = (ushf *) ZALLOC(dest, ds->lit_bufsize, sizeof(ush)+2);
    ds->pending_buf = (uchf *) overlay;

    if (ds->window == Z_NULL || ds->prev == Z_NULL || ds->head == Z_NULL ||
        ds->pending_buf == Z_NULL) {
        deflateEnd (dest);
  411dc0:	48 89 ef             	mov    %rbp,%rdi
  411dc3:	e8 b8 f7 ff ff       	callq  411580 <deflateEnd>
        return Z_MEM_ERROR;
  411dc8:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  411dcd:	eb d7                	jmp    411da6 <deflateCopy+0x226>
  411dcf:	90                   	nop
    deflate_state *ss;
    ushf *overlay;


    if (source == Z_NULL || dest == Z_NULL || source->state == Z_NULL) {
        return Z_STREAM_ERROR;
  411dd0:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  411dd5:	eb cf                	jmp    411da6 <deflateCopy+0x226>
  411dd7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  411dde:	00 00 
    ss = source->state;

    zmemcpy(dest, source, sizeof(z_stream));

    ds = (deflate_state *) ZALLOC(dest, 1, sizeof(deflate_state));
    if (ds == Z_NULL) return Z_MEM_ERROR;
  411de0:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  411de5:	eb bf                	jmp    411da6 <deflateCopy+0x226>
  411de7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  411dee:	00 00 

0000000000411df0 <send_tree>:
    int max_code;       /* and its largest code of non zero frequency */
{
    int n;                     /* iterates over all tree elements */
    int prevlen = -1;          /* last emitted length */
    int curlen;                /* length of current code */
    int nextlen = tree[0].Len; /* length of next code */
  411df0:	44 0f b7 5e 02       	movzwl 0x2(%rsi),%r11d
    int count = 0;             /* repeat count of the current code */
    int max_count = 7;         /* max repeat count */
    int min_count = 4;         /* min repeat count */

    /* tree[max_code+1].Len = -1; */  /* guard already set */
    if (nextlen == 0) max_count = 138, min_count = 3;
  411df5:	41 83 fb 01          	cmp    $0x1,%r11d
  411df9:	19 c9                	sbb    %ecx,%ecx
  411dfb:	44 8d 41 04          	lea    0x4(%rcx),%r8d
  411dff:	81 e1 83 00 00 00    	and    $0x83,%ecx
  411e05:	83 c1 07             	add    $0x7,%ecx

    for (n = 0; n <= max_code; n++) {
  411e08:	85 d2                	test   %edx,%edx
  411e0a:	0f 88 81 02 00 00    	js     412091 <send_tree+0x2a1>
  411e10:	48 63 d2             	movslq %edx,%rdx
 */
local void send_tree (s, tree, max_code)
    deflate_state *s;
    ct_data *tree; /* the tree to be scanned */
    int max_code;       /* and its largest code of non zero frequency */
{
  411e13:	41 57                	push   %r15
  411e15:	41 56                	push   %r14
  411e17:	4c 8d 74 96 0a       	lea    0xa(%rsi,%rdx,4),%r14
  411e1c:	41 55                	push   %r13
  411e1e:	41 54                	push   %r12
  411e20:	55                   	push   %rbp
  411e21:	53                   	push   %rbx
  411e22:	48 8d 5e 06          	lea    0x6(%rsi),%rbx
    int min_count = 4;         /* min repeat count */

    /* tree[max_code+1].Len = -1; */  /* guard already set */
    if (nextlen == 0) max_count = 138, min_count = 3;

    for (n = 0; n <= max_code; n++) {
  411e26:	31 c0                	xor    %eax,%eax
  411e28:	41 bc ff ff ff ff    	mov    $0xffffffff,%r12d

        } else if (count <= 10) {
            send_code(s, REPZ_3_10, s->bl_tree); send_bits(s, count-3, 3);

        } else {
            send_code(s, REPZ_11_138, s->bl_tree); send_bits(s, count-11, 7);
  411e2e:	41 b9 10 00 00 00    	mov    $0x10,%r9d
  411e34:	0f 1f 40 00          	nopl   0x0(%rax)

    /* tree[max_code+1].Len = -1; */  /* guard already set */
    if (nextlen == 0) max_count = 138, min_count = 3;

    for (n = 0; n <= max_code; n++) {
        curlen = nextlen; nextlen = tree[n+1].Len;
  411e38:	44 0f b7 13          	movzwl (%rbx),%r10d
        if (++count < max_count && curlen == nextlen) {
  411e3c:	8d 70 01             	lea    0x1(%rax),%esi
  411e3f:	45 39 d3             	cmp    %r10d,%r11d
  411e42:	40 0f 94 c5          	sete   %bpl
  411e46:	75 08                	jne    411e50 <send_tree+0x60>
  411e48:	39 f1                	cmp    %esi,%ecx
  411e4a:	0f 8f 40 04 00 00    	jg     412290 <send_tree+0x4a0>
            continue;
        } else if (count < min_count) {
  411e50:	44 39 c6             	cmp    %r8d,%esi
  411e53:	0f 8d 97 02 00 00    	jge    4120f0 <send_tree+0x300>
  411e59:	49 63 d3             	movslq %r11d,%rdx
  411e5c:	8b 8f 24 17 00 00    	mov    0x1724(%rdi),%ecx
            do { send_code(s, curlen, s->bl_tree); } while (--count != 0);
  411e62:	45 89 cd             	mov    %r9d,%r13d
  411e65:	48 8d 04 97          	lea    (%rdi,%rdx,4),%rax
  411e69:	8d 56 ff             	lea    -0x1(%rsi),%edx
  411e6c:	44 0f b7 bf 20 17 00 	movzwl 0x1720(%rdi),%r15d
  411e73:	00 
  411e74:	44 0f b7 80 ae 0a 00 	movzwl 0xaae(%rax),%r8d
  411e7b:	00 
  411e7c:	83 e2 01             	and    $0x1,%edx
  411e7f:	45 29 c5             	sub    %r8d,%r13d
  411e82:	41 39 cd             	cmp    %ecx,%r13d
  411e85:	0f 8d 15 04 00 00    	jge    4122a0 <send_tree+0x4b0>
  411e8b:	44 0f b7 a0 ac 0a 00 	movzwl 0xaac(%rax),%r12d
  411e92:	00 
  411e93:	45 89 e5             	mov    %r12d,%r13d
  411e96:	41 d3 e5             	shl    %cl,%r13d
  411e99:	8b 4f 28             	mov    0x28(%rdi),%ecx
  411e9c:	45 09 fd             	or     %r15d,%r13d
  411e9f:	66 44 89 af 20 17 00 	mov    %r13w,0x1720(%rdi)
  411ea6:	00 
  411ea7:	44 8d 79 01          	lea    0x1(%rcx),%r15d
  411eab:	44 89 7f 28          	mov    %r15d,0x28(%rdi)
  411eaf:	4c 8b 7f 10          	mov    0x10(%rdi),%r15
  411eb3:	45 88 2c 0f          	mov    %r13b,(%r15,%rcx,1)
  411eb7:	8b 4f 28             	mov    0x28(%rdi),%ecx
  411eba:	4c 8b 6f 10          	mov    0x10(%rdi),%r13
  411ebe:	44 8d 79 01          	lea    0x1(%rcx),%r15d
  411ec2:	44 89 7f 28          	mov    %r15d,0x28(%rdi)
  411ec6:	44 0f b6 bf 21 17 00 	movzbl 0x1721(%rdi),%r15d
  411ecd:	00 
  411ece:	45 88 7c 0d 00       	mov    %r15b,0x0(%r13,%rcx,1)
  411ed3:	44 8b bf 24 17 00 00 	mov    0x1724(%rdi),%r15d
  411eda:	44 89 c9             	mov    %r9d,%ecx
  411edd:	44 29 f9             	sub    %r15d,%ecx
  411ee0:	41 d3 fc             	sar    %cl,%r12d
  411ee3:	43 8d 4c 38 f0       	lea    -0x10(%r8,%r15,1),%ecx
  411ee8:	45 89 e5             	mov    %r12d,%r13d
  411eeb:	66 44 89 a7 20 17 00 	mov    %r12w,0x1720(%rdi)
  411ef2:	00 
  411ef3:	89 8f 24 17 00 00    	mov    %ecx,0x1724(%rdi)
  411ef9:	83 ee 01             	sub    $0x1,%esi
  411efc:	0f 84 5e 01 00 00    	je     412060 <send_tree+0x270>
  411f02:	85 d2                	test   %edx,%edx
  411f04:	74 43                	je     411f49 <send_tree+0x159>
  411f06:	44 0f b7 80 ae 0a 00 	movzwl 0xaae(%rax),%r8d
  411f0d:	00 
  411f0e:	44 89 ca             	mov    %r9d,%edx
  411f11:	44 29 c2             	sub    %r8d,%edx
  411f14:	39 ca                	cmp    %ecx,%edx
  411f16:	0f b7 90 ac 0a 00 00 	movzwl 0xaac(%rax),%edx
  411f1d:	0f 8c b5 04 00 00    	jl     4123d8 <send_tree+0x5e8>
  411f23:	d3 e2                	shl    %cl,%edx
  411f25:	44 01 c1             	add    %r8d,%ecx
  411f28:	41 09 d5             	or     %edx,%r13d
  411f2b:	89 8f 24 17 00 00    	mov    %ecx,0x1724(%rdi)
  411f31:	66 44 89 af 20 17 00 	mov    %r13w,0x1720(%rdi)
  411f38:	00 
  411f39:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  411f40:	83 ee 01             	sub    $0x1,%esi
  411f43:	0f 84 17 01 00 00    	je     412060 <send_tree+0x270>
  411f49:	0f b7 90 ae 0a 00 00 	movzwl 0xaae(%rax),%edx
  411f50:	45 89 cf             	mov    %r9d,%r15d
  411f53:	44 0f b7 80 ac 0a 00 	movzwl 0xaac(%rax),%r8d
  411f5a:	00 
  411f5b:	41 29 d7             	sub    %edx,%r15d
  411f5e:	41 39 cf             	cmp    %ecx,%r15d
  411f61:	0f 8d 59 01 00 00    	jge    4120c0 <send_tree+0x2d0>
  411f67:	45 89 c4             	mov    %r8d,%r12d
  411f6a:	41 d3 e4             	shl    %cl,%r12d
  411f6d:	8b 4f 28             	mov    0x28(%rdi),%ecx
  411f70:	45 09 e5             	or     %r12d,%r13d
  411f73:	4c 8b 67 10          	mov    0x10(%rdi),%r12
  411f77:	66 44 89 af 20 17 00 	mov    %r13w,0x1720(%rdi)
  411f7e:	00 
  411f7f:	44 8d 79 01          	lea    0x1(%rcx),%r15d
  411f83:	44 89 7f 28          	mov    %r15d,0x28(%rdi)
  411f87:	45 88 2c 0c          	mov    %r13b,(%r12,%rcx,1)
  411f8b:	8b 4f 28             	mov    0x28(%rdi),%ecx
  411f8e:	44 0f b6 bf 21 17 00 	movzbl 0x1721(%rdi),%r15d
  411f95:	00 
  411f96:	4c 8b 67 10          	mov    0x10(%rdi),%r12
  411f9a:	44 8d 69 01          	lea    0x1(%rcx),%r13d
  411f9e:	44 89 6f 28          	mov    %r13d,0x28(%rdi)
  411fa2:	45 88 3c 0c          	mov    %r15b,(%r12,%rcx,1)
  411fa6:	44 89 c9             	mov    %r9d,%ecx
  411fa9:	44 8b a7 24 17 00 00 	mov    0x1724(%rdi),%r12d
  411fb0:	44 29 e1             	sub    %r12d,%ecx
  411fb3:	41 d3 f8             	sar    %cl,%r8d
  411fb6:	41 8d 4c 14 f0       	lea    -0x10(%r12,%rdx,1),%ecx
  411fbb:	45 89 c5             	mov    %r8d,%r13d
  411fbe:	66 44 89 87 20 17 00 	mov    %r8w,0x1720(%rdi)
  411fc5:	00 
  411fc6:	89 8f 24 17 00 00    	mov    %ecx,0x1724(%rdi)
  411fcc:	0f b7 90 ae 0a 00 00 	movzwl 0xaae(%rax),%edx
  411fd3:	45 89 c8             	mov    %r9d,%r8d
  411fd6:	83 ee 01             	sub    $0x1,%esi
  411fd9:	41 29 d0             	sub    %edx,%r8d
  411fdc:	41 39 c8             	cmp    %ecx,%r8d
  411fdf:	0f 8d b3 00 00 00    	jge    412098 <send_tree+0x2a8>
  411fe5:	44 0f b7 80 ac 0a 00 	movzwl 0xaac(%rax),%r8d
  411fec:	00 
  411fed:	45 89 c4             	mov    %r8d,%r12d
  411ff0:	41 d3 e4             	shl    %cl,%r12d
  411ff3:	8b 4f 28             	mov    0x28(%rdi),%ecx
  411ff6:	45 09 e5             	or     %r12d,%r13d
  411ff9:	4c 8b 67 10          	mov    0x10(%rdi),%r12
  411ffd:	66 44 89 af 20 17 00 	mov    %r13w,0x1720(%rdi)
  412004:	00 
  412005:	44 8d 79 01          	lea    0x1(%rcx),%r15d
  412009:	44 89 7f 28          	mov    %r15d,0x28(%rdi)
  41200d:	45 88 2c 0c          	mov    %r13b,(%r12,%rcx,1)
  412011:	8b 4f 28             	mov    0x28(%rdi),%ecx
  412014:	44 0f b6 bf 21 17 00 	movzbl 0x1721(%rdi),%r15d
  41201b:	00 
  41201c:	4c 8b 67 10          	mov    0x10(%rdi),%r12
  412020:	44 8d 69 01          	lea    0x1(%rcx),%r13d
  412024:	44 89 6f 28          	mov    %r13d,0x28(%rdi)
  412028:	45 88 3c 0c          	mov    %r15b,(%r12,%rcx,1)
  41202c:	44 89 c9             	mov    %r9d,%ecx
  41202f:	44 8b a7 24 17 00 00 	mov    0x1724(%rdi),%r12d
  412036:	44 29 e1             	sub    %r12d,%ecx
  412039:	41 d3 f8             	sar    %cl,%r8d
  41203c:	42 8d 4c 22 f0       	lea    -0x10(%rdx,%r12,1),%ecx
  412041:	83 ee 01             	sub    $0x1,%esi
  412044:	45 89 c5             	mov    %r8d,%r13d
  412047:	66 44 89 87 20 17 00 	mov    %r8w,0x1720(%rdi)
  41204e:	00 
  41204f:	89 8f 24 17 00 00    	mov    %ecx,0x1724(%rdi)
  412055:	0f 85 ee fe ff ff    	jne    411f49 <send_tree+0x159>
  41205b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

        } else {
            send_code(s, REPZ_11_138, s->bl_tree); send_bits(s, count-11, 7);
        }
        count = 0; prevlen = curlen;
        if (nextlen == 0) {
  412060:	45 85 d2             	test   %r10d,%r10d
  412063:	45 89 dc             	mov    %r11d,%r12d
  412066:	74 78                	je     4120e0 <send_tree+0x2f0>
            max_count = 138, min_count = 3;
        } else if (curlen == nextlen) {
  412068:	c1 e5 1f             	shl    $0x1f,%ebp
  41206b:	31 c0                	xor    %eax,%eax
  41206d:	c1 fd 1f             	sar    $0x1f,%ebp
  412070:	44 8d 45 04          	lea    0x4(%rbp),%r8d
  412074:	8d 4d 07             	lea    0x7(%rbp),%ecx
  412077:	48 83 c3 04          	add    $0x4,%rbx

    /* tree[max_code+1].Len = -1; */  /* guard already set */
    if (nextlen == 0) max_count = 138, min_count = 3;

    for (n = 0; n <= max_code; n++) {
        curlen = nextlen; nextlen = tree[n+1].Len;
  41207b:	45 89 d3             	mov    %r10d,%r11d
    int min_count = 4;         /* min repeat count */

    /* tree[max_code+1].Len = -1; */  /* guard already set */
    if (nextlen == 0) max_count = 138, min_count = 3;

    for (n = 0; n <= max_code; n++) {
  41207e:	4c 39 f3             	cmp    %r14,%rbx
  412081:	0f 85 b1 fd ff ff    	jne    411e38 <send_tree+0x48>
            max_count = 6, min_count = 3;
        } else {
            max_count = 7, min_count = 4;
        }
    }
}
  412087:	5b                   	pop    %rbx
  412088:	5d                   	pop    %rbp
  412089:	41 5c                	pop    %r12
  41208b:	41 5d                	pop    %r13
  41208d:	41 5e                	pop    %r14
  41208f:	41 5f                	pop    %r15
  412091:	f3 c3                	repz retq 
  412093:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    for (n = 0; n <= max_code; n++) {
        curlen = nextlen; nextlen = tree[n+1].Len;
        if (++count < max_count && curlen == nextlen) {
            continue;
        } else if (count < min_count) {
            do { send_code(s, curlen, s->bl_tree); } while (--count != 0);
  412098:	44 0f b7 b8 ac 0a 00 	movzwl 0xaac(%rax),%r15d
  41209f:	00 
  4120a0:	41 d3 e7             	shl    %cl,%r15d
  4120a3:	01 d1                	add    %edx,%ecx
  4120a5:	45 09 fd             	or     %r15d,%r13d
  4120a8:	89 8f 24 17 00 00    	mov    %ecx,0x1724(%rdi)
  4120ae:	66 44 89 af 20 17 00 	mov    %r13w,0x1720(%rdi)
  4120b5:	00 
  4120b6:	e9 85 fe ff ff       	jmpq   411f40 <send_tree+0x150>
  4120bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4120c0:	41 d3 e0             	shl    %cl,%r8d
  4120c3:	01 d1                	add    %edx,%ecx
  4120c5:	45 09 c5             	or     %r8d,%r13d
  4120c8:	89 8f 24 17 00 00    	mov    %ecx,0x1724(%rdi)
  4120ce:	66 44 89 af 20 17 00 	mov    %r13w,0x1720(%rdi)
  4120d5:	00 
  4120d6:	e9 f1 fe ff ff       	jmpq   411fcc <send_tree+0x1dc>
  4120db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        } else {
            send_code(s, REPZ_11_138, s->bl_tree); send_bits(s, count-11, 7);
        }
        count = 0; prevlen = curlen;
        if (nextlen == 0) {
            max_count = 138, min_count = 3;
  4120e0:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  4120e6:	b9 8a 00 00 00       	mov    $0x8a,%ecx
            send_code(s, REPZ_3_10, s->bl_tree); send_bits(s, count-3, 3);

        } else {
            send_code(s, REPZ_11_138, s->bl_tree); send_bits(s, count-11, 7);
        }
        count = 0; prevlen = curlen;
  4120eb:	31 c0                	xor    %eax,%eax
  4120ed:	eb 88                	jmp    412077 <send_tree+0x287>
  4120ef:	90                   	nop
        if (++count < max_count && curlen == nextlen) {
            continue;
        } else if (count < min_count) {
            do { send_code(s, curlen, s->bl_tree); } while (--count != 0);

        } else if (curlen != 0) {
  4120f0:	45 85 db             	test   %r11d,%r11d
  4120f3:	0f 84 cf 01 00 00    	je     4122c8 <send_tree+0x4d8>
            if (curlen != prevlen) {
  4120f9:	45 39 dc             	cmp    %r11d,%r12d
  4120fc:	0f 84 ae 04 00 00    	je     4125b0 <send_tree+0x7c0>
  412102:	4d 63 eb             	movslq %r11d,%r13
                send_code(s, curlen, s->bl_tree); count--;
  412105:	8b 8f 24 17 00 00    	mov    0x1724(%rdi),%ecx
  41210b:	45 89 c8             	mov    %r9d,%r8d
  41210e:	4e 8d 3c af          	lea    (%rdi,%r13,4),%r15
  412112:	41 0f b7 97 ae 0a 00 	movzwl 0xaae(%r15),%edx
  412119:	00 
  41211a:	41 0f b7 b7 ac 0a 00 	movzwl 0xaac(%r15),%esi
  412121:	00 
  412122:	41 29 d0             	sub    %edx,%r8d
  412125:	44 39 c1             	cmp    %r8d,%ecx
  412128:	0f 8e 5a 04 00 00    	jle    412588 <send_tree+0x798>
  41212e:	41 89 f7             	mov    %esi,%r15d
  412131:	4c 8b 67 10          	mov    0x10(%rdi),%r12
  412135:	41 d3 e7             	shl    %cl,%r15d
  412138:	8b 4f 28             	mov    0x28(%rdi),%ecx
  41213b:	66 44 0b bf 20 17 00 	or     0x1720(%rdi),%r15w
  412142:	00 
  412143:	44 8d 41 01          	lea    0x1(%rcx),%r8d
  412147:	66 44 89 bf 20 17 00 	mov    %r15w,0x1720(%rdi)
  41214e:	00 
  41214f:	44 89 47 28          	mov    %r8d,0x28(%rdi)
  412153:	45 88 3c 0c          	mov    %r15b,(%r12,%rcx,1)
  412157:	44 8b 7f 28          	mov    0x28(%rdi),%r15d
  41215b:	0f b6 8f 21 17 00 00 	movzbl 0x1721(%rdi),%ecx
  412162:	4c 8b 6f 10          	mov    0x10(%rdi),%r13
  412166:	45 8d 67 01          	lea    0x1(%r15),%r12d
  41216a:	44 89 67 28          	mov    %r12d,0x28(%rdi)
  41216e:	43 88 4c 3d 00       	mov    %cl,0x0(%r13,%r15,1)
  412173:	44 89 c9             	mov    %r9d,%ecx
  412176:	44 8b 87 24 17 00 00 	mov    0x1724(%rdi),%r8d
  41217d:	44 29 c1             	sub    %r8d,%ecx
  412180:	d3 fe                	sar    %cl,%esi
  412182:	42 8d 4c 02 f0       	lea    -0x10(%rdx,%r8,1),%ecx
  412187:	41 89 f5             	mov    %esi,%r13d
  41218a:	66 89 b7 20 17 00 00 	mov    %si,0x1720(%rdi)
  412191:	89 8f 24 17 00 00    	mov    %ecx,0x1724(%rdi)
            }
            Assert(count >= 3 && count <= 6, " 3_6?");
            send_code(s, REP_3_6, s->bl_tree); send_bits(s, count-3, 2);
  412197:	44 0f b7 bf ee 0a 00 	movzwl 0xaee(%rdi),%r15d
  41219e:	00 
  41219f:	44 89 ca             	mov    %r9d,%edx
  4121a2:	44 29 fa             	sub    %r15d,%edx
  4121a5:	39 ca                	cmp    %ecx,%edx
  4121a7:	0f 8d 93 02 00 00    	jge    412440 <send_tree+0x650>
  4121ad:	44 0f b7 a7 ec 0a 00 	movzwl 0xaec(%rdi),%r12d
  4121b4:	00 
  4121b5:	4c 8b 47 10          	mov    0x10(%rdi),%r8
  4121b9:	44 89 e2             	mov    %r12d,%edx
  4121bc:	d3 e2                	shl    %cl,%edx
  4121be:	8b 4f 28             	mov    0x28(%rdi),%ecx
  4121c1:	44 09 ea             	or     %r13d,%edx
  4121c4:	66 89 97 20 17 00 00 	mov    %dx,0x1720(%rdi)
  4121cb:	44 8d 69 01          	lea    0x1(%rcx),%r13d
  4121cf:	44 89 6f 28          	mov    %r13d,0x28(%rdi)
  4121d3:	41 88 14 08          	mov    %dl,(%r8,%rcx,1)
  4121d7:	8b 57 28             	mov    0x28(%rdi),%edx
  4121da:	0f b6 8f 21 17 00 00 	movzbl 0x1721(%rdi),%ecx
  4121e1:	48 8b 77 10          	mov    0x10(%rdi),%rsi
  4121e5:	44 8d 42 01          	lea    0x1(%rdx),%r8d
  4121e9:	44 89 47 28          	mov    %r8d,0x28(%rdi)
  4121ed:	88 0c 16             	mov    %cl,(%rsi,%rdx,1)
  4121f0:	44 89 c9             	mov    %r9d,%ecx
  4121f3:	44 8b af 24 17 00 00 	mov    0x1724(%rdi),%r13d
  4121fa:	44 29 e9             	sub    %r13d,%ecx
  4121fd:	41 d3 fc             	sar    %cl,%r12d
  412200:	43 8d 4c 2f f0       	lea    -0x10(%r15,%r13,1),%ecx
  412205:	44 89 e6             	mov    %r12d,%esi
  412208:	66 44 89 a7 20 17 00 	mov    %r12w,0x1720(%rdi)
  41220f:	00 
  412210:	83 f9 0e             	cmp    $0xe,%ecx
  412213:	89 8f 24 17 00 00    	mov    %ecx,0x1724(%rdi)
  412219:	0f 8e 46 02 00 00    	jle    412465 <send_tree+0x675>
  41221f:	44 8d 78 fd          	lea    -0x3(%rax),%r15d
  412223:	4c 8b 67 10          	mov    0x10(%rdi),%r12
  412227:	44 89 f8             	mov    %r15d,%eax
  41222a:	45 0f b7 ff          	movzwl %r15w,%r15d
  41222e:	d3 e0                	shl    %cl,%eax
  412230:	09 f0                	or     %esi,%eax
  412232:	8b 77 28             	mov    0x28(%rdi),%esi
  412235:	66 89 87 20 17 00 00 	mov    %ax,0x1720(%rdi)
  41223c:	8d 56 01             	lea    0x1(%rsi),%edx
  41223f:	89 57 28             	mov    %edx,0x28(%rdi)
  412242:	41 88 04 34          	mov    %al,(%r12,%rsi,1)
  412246:	44 8b 6f 28          	mov    0x28(%rdi),%r13d
  41224a:	0f b6 87 21 17 00 00 	movzbl 0x1721(%rdi),%eax
  412251:	4c 8b 47 10          	mov    0x10(%rdi),%r8
  412255:	41 8d 4d 01          	lea    0x1(%r13),%ecx
  412259:	89 4f 28             	mov    %ecx,0x28(%rdi)
  41225c:	43 88 04 28          	mov    %al,(%r8,%r13,1)
  412260:	44 89 c9             	mov    %r9d,%ecx
  412263:	44 8b a7 24 17 00 00 	mov    0x1724(%rdi),%r12d
  41226a:	44 29 e1             	sub    %r12d,%ecx
  41226d:	41 83 ec 0e          	sub    $0xe,%r12d
  412271:	41 d3 ff             	sar    %cl,%r15d
  412274:	44 89 a7 24 17 00 00 	mov    %r12d,0x1724(%rdi)
  41227b:	66 44 89 bf 20 17 00 	mov    %r15w,0x1720(%rdi)
  412282:	00 
  412283:	e9 d8 fd ff ff       	jmpq   412060 <send_tree+0x270>
  412288:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41228f:	00 
  412290:	89 f0                	mov    %esi,%eax
  412292:	e9 e0 fd ff ff       	jmpq   412077 <send_tree+0x287>
  412297:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41229e:	00 00 
    for (n = 0; n <= max_code; n++) {
        curlen = nextlen; nextlen = tree[n+1].Len;
        if (++count < max_count && curlen == nextlen) {
            continue;
        } else if (count < min_count) {
            do { send_code(s, curlen, s->bl_tree); } while (--count != 0);
  4122a0:	44 0f b7 a8 ac 0a 00 	movzwl 0xaac(%rax),%r13d
  4122a7:	00 
  4122a8:	41 d3 e5             	shl    %cl,%r13d
  4122ab:	44 01 c1             	add    %r8d,%ecx
  4122ae:	45 09 fd             	or     %r15d,%r13d
  4122b1:	89 8f 24 17 00 00    	mov    %ecx,0x1724(%rdi)
  4122b7:	66 44 89 af 20 17 00 	mov    %r13w,0x1720(%rdi)
  4122be:	00 
  4122bf:	e9 35 fc ff ff       	jmpq   411ef9 <send_tree+0x109>
  4122c4:	0f 1f 40 00          	nopl   0x0(%rax)
                send_code(s, curlen, s->bl_tree); count--;
            }
            Assert(count >= 3 && count <= 6, " 3_6?");
            send_code(s, REP_3_6, s->bl_tree); send_bits(s, count-3, 2);

        } else if (count <= 10) {
  4122c8:	83 fe 0a             	cmp    $0xa,%esi
  4122cb:	0f 8f b7 01 00 00    	jg     412488 <send_tree+0x698>
            send_code(s, REPZ_3_10, s->bl_tree); send_bits(s, count-3, 3);
  4122d1:	44 0f b7 bf f2 0a 00 	movzwl 0xaf2(%rdi),%r15d
  4122d8:	00 
  4122d9:	8b 8f 24 17 00 00    	mov    0x1724(%rdi),%ecx
  4122df:	45 89 cd             	mov    %r9d,%r13d
  4122e2:	0f b7 97 f0 0a 00 00 	movzwl 0xaf0(%rdi),%edx
  4122e9:	45 29 fd             	sub    %r15d,%r13d
  4122ec:	44 39 e9             	cmp    %r13d,%ecx
  4122ef:	0f 8e f3 02 00 00    	jle    4125e8 <send_tree+0x7f8>
  4122f5:	44 8b 67 28          	mov    0x28(%rdi),%r12d
  4122f9:	41 89 d0             	mov    %edx,%r8d
  4122fc:	48 8b 77 10          	mov    0x10(%rdi),%rsi
  412300:	41 d3 e0             	shl    %cl,%r8d
  412303:	66 44 0b 87 20 17 00 	or     0x1720(%rdi),%r8w
  41230a:	00 
  41230b:	41 8d 4c 24 01       	lea    0x1(%r12),%ecx
  412310:	66 44 89 87 20 17 00 	mov    %r8w,0x1720(%rdi)
  412317:	00 
  412318:	89 4f 28             	mov    %ecx,0x28(%rdi)
  41231b:	46 88 04 26          	mov    %r8b,(%rsi,%r12,1)
  41231f:	44 89 c9             	mov    %r9d,%ecx
  412322:	44 8b 47 28          	mov    0x28(%rdi),%r8d
  412326:	44 0f b6 a7 21 17 00 	movzbl 0x1721(%rdi),%r12d
  41232d:	00 
  41232e:	4c 8b 6f 10          	mov    0x10(%rdi),%r13
  412332:	41 8d 70 01          	lea    0x1(%r8),%esi
  412336:	89 77 28             	mov    %esi,0x28(%rdi)
  412339:	47 88 64 05 00       	mov    %r12b,0x0(%r13,%r8,1)
  41233e:	44 8b af 24 17 00 00 	mov    0x1724(%rdi),%r13d
  412345:	44 29 e9             	sub    %r13d,%ecx
  412348:	d3 fa                	sar    %cl,%edx
  41234a:	43 8d 4c 2f f0       	lea    -0x10(%r15,%r13,1),%ecx
  41234f:	41 89 d0             	mov    %edx,%r8d
  412352:	66 44 89 87 20 17 00 	mov    %r8w,0x1720(%rdi)
  412359:	00 
  41235a:	89 8f 24 17 00 00    	mov    %ecx,0x1724(%rdi)
  412360:	83 e8 02             	sub    $0x2,%eax
  412363:	83 f9 0d             	cmp    $0xd,%ecx
  412366:	0f 8e 5c 02 00 00    	jle    4125c8 <send_tree+0x7d8>
  41236c:	44 8b 6f 28          	mov    0x28(%rdi),%r13d
  412370:	4c 8b 67 10          	mov    0x10(%rdi),%r12
  412374:	41 89 c7             	mov    %eax,%r15d
  412377:	41 d3 e7             	shl    %cl,%r15d
  41237a:	0f b7 c0             	movzwl %ax,%eax
  41237d:	44 09 fa             	or     %r15d,%edx
  412380:	66 89 97 20 17 00 00 	mov    %dx,0x1720(%rdi)
  412387:	41 8d 4d 01          	lea    0x1(%r13),%ecx
  41238b:	89 4f 28             	mov    %ecx,0x28(%rdi)
  41238e:	43 88 14 2c          	mov    %dl,(%r12,%r13,1)
  412392:	44 89 c9             	mov    %r9d,%ecx
  412395:	8b 57 28             	mov    0x28(%rdi),%edx
  412398:	0f b6 b7 21 17 00 00 	movzbl 0x1721(%rdi),%esi
  41239f:	4c 8b 47 10          	mov    0x10(%rdi),%r8
  4123a3:	44 8d 7a 01          	lea    0x1(%rdx),%r15d
  4123a7:	44 89 7f 28          	mov    %r15d,0x28(%rdi)
  4123ab:	41 88 34 10          	mov    %sil,(%r8,%rdx,1)
  4123af:	44 8b a7 24 17 00 00 	mov    0x1724(%rdi),%r12d
  4123b6:	44 29 e1             	sub    %r12d,%ecx
  4123b9:	41 83 ec 0d          	sub    $0xd,%r12d
  4123bd:	d3 f8                	sar    %cl,%eax
  4123bf:	44 89 a7 24 17 00 00 	mov    %r12d,0x1724(%rdi)
  4123c6:	66 89 87 20 17 00 00 	mov    %ax,0x1720(%rdi)
  4123cd:	e9 8e fc ff ff       	jmpq   412060 <send_tree+0x270>
  4123d2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    for (n = 0; n <= max_code; n++) {
        curlen = nextlen; nextlen = tree[n+1].Len;
        if (++count < max_count && curlen == nextlen) {
            continue;
        } else if (count < min_count) {
            do { send_code(s, curlen, s->bl_tree); } while (--count != 0);
  4123d8:	41 89 d4             	mov    %edx,%r12d
  4123db:	41 d3 e4             	shl    %cl,%r12d
  4123de:	8b 4f 28             	mov    0x28(%rdi),%ecx
  4123e1:	45 09 e5             	or     %r12d,%r13d
  4123e4:	4c 8b 67 10          	mov    0x10(%rdi),%r12
  4123e8:	66 44 89 af 20 17 00 	mov    %r13w,0x1720(%rdi)
  4123ef:	00 
  4123f0:	44 8d 79 01          	lea    0x1(%rcx),%r15d
  4123f4:	44 89 7f 28          	mov    %r15d,0x28(%rdi)
  4123f8:	45 88 2c 0c          	mov    %r13b,(%r12,%rcx,1)
  4123fc:	8b 4f 28             	mov    0x28(%rdi),%ecx
  4123ff:	44 0f b6 bf 21 17 00 	movzbl 0x1721(%rdi),%r15d
  412406:	00 
  412407:	4c 8b 67 10          	mov    0x10(%rdi),%r12
  41240b:	44 8d 69 01          	lea    0x1(%rcx),%r13d
  41240f:	44 89 6f 28          	mov    %r13d,0x28(%rdi)
  412413:	45 88 3c 0c          	mov    %r15b,(%r12,%rcx,1)
  412417:	44 89 c9             	mov    %r9d,%ecx
  41241a:	44 8b a7 24 17 00 00 	mov    0x1724(%rdi),%r12d
  412421:	44 29 e1             	sub    %r12d,%ecx
  412424:	d3 fa                	sar    %cl,%edx
  412426:	43 8d 4c 20 f0       	lea    -0x10(%r8,%r12,1),%ecx
  41242b:	41 89 d5             	mov    %edx,%r13d
  41242e:	66 89 97 20 17 00 00 	mov    %dx,0x1720(%rdi)
  412435:	89 8f 24 17 00 00    	mov    %ecx,0x1724(%rdi)
  41243b:	e9 00 fb ff ff       	jmpq   411f40 <send_tree+0x150>
        } else if (curlen != 0) {
            if (curlen != prevlen) {
                send_code(s, curlen, s->bl_tree); count--;
            }
            Assert(count >= 3 && count <= 6, " 3_6?");
            send_code(s, REP_3_6, s->bl_tree); send_bits(s, count-3, 2);
  412440:	0f b7 b7 ec 0a 00 00 	movzwl 0xaec(%rdi),%esi
  412447:	d3 e6                	shl    %cl,%esi
  412449:	44 01 f9             	add    %r15d,%ecx
  41244c:	44 09 ee             	or     %r13d,%esi
  41244f:	83 f9 0e             	cmp    $0xe,%ecx
  412452:	89 8f 24 17 00 00    	mov    %ecx,0x1724(%rdi)
  412458:	66 89 b7 20 17 00 00 	mov    %si,0x1720(%rdi)
  41245f:	0f 8f ba fd ff ff    	jg     41221f <send_tree+0x42f>
  412465:	83 e8 03             	sub    $0x3,%eax
  412468:	d3 e0                	shl    %cl,%eax
  41246a:	83 c1 02             	add    $0x2,%ecx
  41246d:	09 f0                	or     %esi,%eax
  41246f:	89 8f 24 17 00 00    	mov    %ecx,0x1724(%rdi)
  412475:	66 89 87 20 17 00 00 	mov    %ax,0x1720(%rdi)
  41247c:	e9 df fb ff ff       	jmpq   412060 <send_tree+0x270>
  412481:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

        } else if (count <= 10) {
            send_code(s, REPZ_3_10, s->bl_tree); send_bits(s, count-3, 3);

        } else {
            send_code(s, REPZ_11_138, s->bl_tree); send_bits(s, count-11, 7);
  412488:	44 0f b7 bf f6 0a 00 	movzwl 0xaf6(%rdi),%r15d
  41248f:	00 
  412490:	8b 8f 24 17 00 00    	mov    0x1724(%rdi),%ecx
  412496:	45 89 c8             	mov    %r9d,%r8d
  412499:	0f b7 97 f4 0a 00 00 	movzwl 0xaf4(%rdi),%edx
  4124a0:	45 29 f8             	sub    %r15d,%r8d
  4124a3:	44 39 c1             	cmp    %r8d,%ecx
  4124a6:	0f 8e 84 01 00 00    	jle    412630 <send_tree+0x840>
  4124ac:	89 d6                	mov    %edx,%esi
  4124ae:	4c 8b 67 10          	mov    0x10(%rdi),%r12
  4124b2:	d3 e6                	shl    %cl,%esi
  4124b4:	8b 4f 28             	mov    0x28(%rdi),%ecx
  4124b7:	66 0b b7 20 17 00 00 	or     0x1720(%rdi),%si
  4124be:	44 8d 69 01          	lea    0x1(%rcx),%r13d
  4124c2:	66 89 b7 20 17 00 00 	mov    %si,0x1720(%rdi)
  4124c9:	44 89 6f 28          	mov    %r13d,0x28(%rdi)
  4124cd:	41 88 34 0c          	mov    %sil,(%r12,%rcx,1)
  4124d1:	8b 77 28             	mov    0x28(%rdi),%esi
  4124d4:	0f b6 8f 21 17 00 00 	movzbl 0x1721(%rdi),%ecx
  4124db:	4c 8b 47 10          	mov    0x10(%rdi),%r8
  4124df:	44 8d 66 01          	lea    0x1(%rsi),%r12d
  4124e3:	44 89 67 28          	mov    %r12d,0x28(%rdi)
  4124e7:	41 88 0c 30          	mov    %cl,(%r8,%rsi,1)
  4124eb:	44 89 c9             	mov    %r9d,%ecx
  4124ee:	44 8b af 24 17 00 00 	mov    0x1724(%rdi),%r13d
  4124f5:	44 29 e9             	sub    %r13d,%ecx
  4124f8:	d3 fa                	sar    %cl,%edx
  4124fa:	43 8d 4c 2f f0       	lea    -0x10(%r15,%r13,1),%ecx
  4124ff:	41 89 d0             	mov    %edx,%r8d
  412502:	66 44 89 87 20 17 00 	mov    %r8w,0x1720(%rdi)
  412509:	00 
  41250a:	89 8f 24 17 00 00    	mov    %ecx,0x1724(%rdi)
  412510:	83 e8 0a             	sub    $0xa,%eax
  412513:	83 f9 09             	cmp    $0x9,%ecx
  412516:	0f 8e f4 00 00 00    	jle    412610 <send_tree+0x820>
  41251c:	44 8b 6f 28          	mov    0x28(%rdi),%r13d
  412520:	4c 8b 67 10          	mov    0x10(%rdi),%r12
  412524:	41 89 c7             	mov    %eax,%r15d
  412527:	41 d3 e7             	shl    %cl,%r15d
  41252a:	0f b7 c0             	movzwl %ax,%eax
  41252d:	44 09 fa             	or     %r15d,%edx
  412530:	66 89 97 20 17 00 00 	mov    %dx,0x1720(%rdi)
  412537:	41 8d 4d 01          	lea    0x1(%r13),%ecx
  41253b:	89 4f 28             	mov    %ecx,0x28(%rdi)
  41253e:	43 88 14 2c          	mov    %dl,(%r12,%r13,1)
  412542:	44 89 c9             	mov    %r9d,%ecx
  412545:	8b 57 28             	mov    0x28(%rdi),%edx
  412548:	0f b6 b7 21 17 00 00 	movzbl 0x1721(%rdi),%esi
  41254f:	4c 8b 47 10          	mov    0x10(%rdi),%r8
  412553:	44 8d 7a 01          	lea    0x1(%rdx),%r15d
  412557:	44 89 7f 28          	mov    %r15d,0x28(%rdi)
  41255b:	41 88 34 10          	mov    %sil,(%r8,%rdx,1)
  41255f:	44 8b a7 24 17 00 00 	mov    0x1724(%rdi),%r12d
  412566:	44 29 e1             	sub    %r12d,%ecx
  412569:	41 83 ec 09          	sub    $0x9,%r12d
  41256d:	d3 f8                	sar    %cl,%eax
  41256f:	44 89 a7 24 17 00 00 	mov    %r12d,0x1724(%rdi)
  412576:	66 89 87 20 17 00 00 	mov    %ax,0x1720(%rdi)
  41257d:	e9 de fa ff ff       	jmpq   412060 <send_tree+0x270>
  412582:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        } else if (count < min_count) {
            do { send_code(s, curlen, s->bl_tree); } while (--count != 0);

        } else if (curlen != 0) {
            if (curlen != prevlen) {
                send_code(s, curlen, s->bl_tree); count--;
  412588:	d3 e6                	shl    %cl,%esi
  41258a:	01 d1                	add    %edx,%ecx
  41258c:	41 89 f5             	mov    %esi,%r13d
  41258f:	66 44 0b af 20 17 00 	or     0x1720(%rdi),%r13w
  412596:	00 
  412597:	89 8f 24 17 00 00    	mov    %ecx,0x1724(%rdi)
  41259d:	66 44 89 af 20 17 00 	mov    %r13w,0x1720(%rdi)
  4125a4:	00 
  4125a5:	e9 ed fb ff ff       	jmpq   412197 <send_tree+0x3a7>
  4125aa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  4125b0:	8b 8f 24 17 00 00    	mov    0x1724(%rdi),%ecx
  4125b6:	44 0f b7 af 20 17 00 	movzwl 0x1720(%rdi),%r13d
  4125bd:	00 
            continue;
        } else if (count < min_count) {
            do { send_code(s, curlen, s->bl_tree); } while (--count != 0);

        } else if (curlen != 0) {
            if (curlen != prevlen) {
  4125be:	89 f0                	mov    %esi,%eax
  4125c0:	e9 d2 fb ff ff       	jmpq   412197 <send_tree+0x3a7>
  4125c5:	0f 1f 00             	nopl   (%rax)
            }
            Assert(count >= 3 && count <= 6, " 3_6?");
            send_code(s, REP_3_6, s->bl_tree); send_bits(s, count-3, 2);

        } else if (count <= 10) {
            send_code(s, REPZ_3_10, s->bl_tree); send_bits(s, count-3, 3);
  4125c8:	d3 e0                	shl    %cl,%eax
  4125ca:	83 c1 03             	add    $0x3,%ecx
  4125cd:	09 c2                	or     %eax,%edx
  4125cf:	89 8f 24 17 00 00    	mov    %ecx,0x1724(%rdi)
  4125d5:	66 89 97 20 17 00 00 	mov    %dx,0x1720(%rdi)
  4125dc:	e9 7f fa ff ff       	jmpq   412060 <send_tree+0x270>
  4125e1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  4125e8:	d3 e2                	shl    %cl,%edx
  4125ea:	66 0b 97 20 17 00 00 	or     0x1720(%rdi),%dx
  4125f1:	44 01 f9             	add    %r15d,%ecx
  4125f4:	89 8f 24 17 00 00    	mov    %ecx,0x1724(%rdi)
  4125fa:	66 89 97 20 17 00 00 	mov    %dx,0x1720(%rdi)
  412601:	e9 5a fd ff ff       	jmpq   412360 <send_tree+0x570>
  412606:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41260d:	00 00 00 

        } else {
            send_code(s, REPZ_11_138, s->bl_tree); send_bits(s, count-11, 7);
  412610:	d3 e0                	shl    %cl,%eax
  412612:	83 c1 07             	add    $0x7,%ecx
  412615:	09 c2                	or     %eax,%edx
  412617:	89 8f 24 17 00 00    	mov    %ecx,0x1724(%rdi)
  41261d:	66 89 97 20 17 00 00 	mov    %dx,0x1720(%rdi)
  412624:	e9 37 fa ff ff       	jmpq   412060 <send_tree+0x270>
  412629:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  412630:	d3 e2                	shl    %cl,%edx
  412632:	66 0b 97 20 17 00 00 	or     0x1720(%rdi),%dx
  412639:	44 01 f9             	add    %r15d,%ecx
  41263c:	89 8f 24 17 00 00    	mov    %ecx,0x1724(%rdi)
  412642:	66 89 97 20 17 00 00 	mov    %dx,0x1720(%rdi)
  412649:	e9 c2 fe ff ff       	jmpq   412510 <send_tree+0x720>
  41264e:	66 90                	xchg   %ax,%ax

0000000000412650 <compress_block>:
    int lc;             /* match length or unmatched char (if dist == 0) */
    unsigned lx = 0;    /* running index in l_buf */
    unsigned code;      /* the code to send */
    int extra;          /* number of extra bits to send */

    if (s->last_lit != 0) do {
  412650:	8b 87 fc 16 00 00    	mov    0x16fc(%rdi),%eax
 */
local void compress_block(s, ltree, dtree)
    deflate_state *s;
    ct_data *ltree; /* literal tree */
    ct_data *dtree; /* distance tree */
{
  412656:	41 56                	push   %r14
  412658:	8b 8f 24 17 00 00    	mov    0x1724(%rdi),%ecx
  41265e:	41 55                	push   %r13
  412660:	44 0f b7 8f 20 17 00 	movzwl 0x1720(%rdi),%r9d
  412667:	00 
  412668:	41 54                	push   %r12
    int lc;             /* match length or unmatched char (if dist == 0) */
    unsigned lx = 0;    /* running index in l_buf */
    unsigned code;      /* the code to send */
    int extra;          /* number of extra bits to send */

    if (s->last_lit != 0) do {
  41266a:	85 c0                	test   %eax,%eax
 */
local void compress_block(s, ltree, dtree)
    deflate_state *s;
    ct_data *ltree; /* literal tree */
    ct_data *dtree; /* distance tree */
{
  41266c:	55                   	push   %rbp
  41266d:	53                   	push   %rbx
    int lc;             /* match length or unmatched char (if dist == 0) */
    unsigned lx = 0;    /* running index in l_buf */
    unsigned code;      /* the code to send */
    int extra;          /* number of extra bits to send */

    if (s->last_lit != 0) do {
  41266e:	0f 84 1c 03 00 00    	je     412990 <compress_block+0x340>
  412674:	45 31 d2             	xor    %r10d,%r10d
            send_code(s, lc, ltree); /* send a literal byte */
            Tracecv(isgraph(lc), (stderr," '%c' ", lc));
        } else {
            /* Here, lc is the match length - MIN_MATCH */
            code = _length_code[lc];
            send_code(s, code+LITERALS+1, ltree); /* send the length code */
  412677:	41 bb 10 00 00 00    	mov    $0x10,%r11d
  41267d:	e9 8f 00 00 00       	jmpq   412711 <compress_block+0xc1>
  412682:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

    if (s->last_lit != 0) do {
        dist = s->d_buf[lx];
        lc = s->l_buf[lx++];
        if (dist == 0) {
            send_code(s, lc, ltree); /* send a literal byte */
  412688:	4e 8d 2c 86          	lea    (%rsi,%r8,4),%r13
  41268c:	44 89 db             	mov    %r11d,%ebx
  41268f:	45 0f b7 75 02       	movzwl 0x2(%r13),%r14d
  412694:	45 0f b7 45 00       	movzwl 0x0(%r13),%r8d
  412699:	44 29 f3             	sub    %r14d,%ebx
  41269c:	39 cb                	cmp    %ecx,%ebx
  41269e:	0f 8d 5c 03 00 00    	jge    412a00 <compress_block+0x3b0>
  4126a4:	44 89 c5             	mov    %r8d,%ebp
  4126a7:	48 8b 47 10          	mov    0x10(%rdi),%rax
  4126ab:	d3 e5                	shl    %cl,%ebp
  4126ad:	8b 4f 28             	mov    0x28(%rdi),%ecx
  4126b0:	41 09 e9             	or     %ebp,%r9d
  4126b3:	66 44 89 8f 20 17 00 	mov    %r9w,0x1720(%rdi)
  4126ba:	00 
  4126bb:	44 8d 69 01          	lea    0x1(%rcx),%r13d
  4126bf:	44 89 6f 28          	mov    %r13d,0x28(%rdi)
  4126c3:	44 88 0c 08          	mov    %r9b,(%rax,%rcx,1)
  4126c7:	44 89 d9             	mov    %r11d,%ecx
  4126ca:	8b 6f 28             	mov    0x28(%rdi),%ebp
  4126cd:	44 0f b6 a7 21 17 00 	movzbl 0x1721(%rdi),%r12d
  4126d4:	00 
  4126d5:	4c 8b 4f 10          	mov    0x10(%rdi),%r9
  4126d9:	8d 5d 01             	lea    0x1(%rbp),%ebx
  4126dc:	89 5f 28             	mov    %ebx,0x28(%rdi)
  4126df:	45 88 24 29          	mov    %r12b,(%r9,%rbp,1)
  4126e3:	8b 87 24 17 00 00    	mov    0x1724(%rdi),%eax
  4126e9:	29 c1                	sub    %eax,%ecx
  4126eb:	41 d3 f8             	sar    %cl,%r8d
  4126ee:	41 8d 4c 06 f0       	lea    -0x10(%r14,%rax,1),%ecx
  4126f3:	45 89 c1             	mov    %r8d,%r9d
  4126f6:	66 44 89 87 20 17 00 	mov    %r8w,0x1720(%rdi)
  4126fd:	00 
  4126fe:	89 8f 24 17 00 00    	mov    %ecx,0x1724(%rdi)

        /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
        Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
               "pendingBuf overflow");

    } while (lx < s->last_lit);
  412704:	44 3b 97 fc 16 00 00 	cmp    0x16fc(%rdi),%r10d
  41270b:	0f 83 7f 02 00 00    	jae    412990 <compress_block+0x340>
    unsigned lx = 0;    /* running index in l_buf */
    unsigned code;      /* the code to send */
    int extra;          /* number of extra bits to send */

    if (s->last_lit != 0) do {
        dist = s->d_buf[lx];
  412711:	48 8b 9f 00 17 00 00 	mov    0x1700(%rdi),%rbx
  412718:	45 89 d0             	mov    %r10d,%r8d
        lc = s->l_buf[lx++];
  41271b:	48 8b af f0 16 00 00 	mov    0x16f0(%rdi),%rbp
  412722:	41 83 c2 01          	add    $0x1,%r10d
    unsigned lx = 0;    /* running index in l_buf */
    unsigned code;      /* the code to send */
    int extra;          /* number of extra bits to send */

    if (s->last_lit != 0) do {
        dist = s->d_buf[lx];
  412726:	42 0f b7 04 43       	movzwl (%rbx,%r8,2),%eax
        lc = s->l_buf[lx++];
  41272b:	46 0f b6 44 05 00    	movzbl 0x0(%rbp,%r8,1),%r8d
        if (dist == 0) {
  412731:	85 c0                	test   %eax,%eax
  412733:	0f 84 4f ff ff ff    	je     412688 <compress_block+0x38>
            send_code(s, lc, ltree); /* send a literal byte */
            Tracecv(isgraph(lc), (stderr," '%c' ", lc));
        } else {
            /* Here, lc is the match length - MIN_MATCH */
            code = _length_code[lc];
  412739:	4d 63 e0             	movslq %r8d,%r12
  41273c:	41 0f b6 9c 24 00 88 	movzbl 0x438800(%r12),%ebx
  412743:	43 00 
            send_code(s, code+LITERALS+1, ltree); /* send the length code */
  412745:	44 8d ab 01 01 00 00 	lea    0x101(%rbx),%r13d
  41274c:	4e 8d 34 ae          	lea    (%rsi,%r13,4),%r14
  412750:	45 89 dd             	mov    %r11d,%r13d
  412753:	41 0f b7 6e 02       	movzwl 0x2(%r14),%ebp
  412758:	45 0f b7 26          	movzwl (%r14),%r12d
  41275c:	41 29 ed             	sub    %ebp,%r13d
  41275f:	41 39 cd             	cmp    %ecx,%r13d
  412762:	0f 8d 78 02 00 00    	jge    4129e0 <compress_block+0x390>
  412768:	45 89 e6             	mov    %r12d,%r14d
  41276b:	4c 8b 6f 10          	mov    0x10(%rdi),%r13
  41276f:	41 d3 e6             	shl    %cl,%r14d
  412772:	8b 4f 28             	mov    0x28(%rdi),%ecx
  412775:	45 09 f1             	or     %r14d,%r9d
  412778:	66 44 89 8f 20 17 00 	mov    %r9w,0x1720(%rdi)
  41277f:	00 
  412780:	44 8d 71 01          	lea    0x1(%rcx),%r14d
  412784:	44 89 77 28          	mov    %r14d,0x28(%rdi)
  412788:	45 88 4c 0d 00       	mov    %r9b,0x0(%r13,%rcx,1)
  41278d:	8b 4f 28             	mov    0x28(%rdi),%ecx
  412790:	44 0f b6 b7 21 17 00 	movzbl 0x1721(%rdi),%r14d
  412797:	00 
  412798:	4c 8b 4f 10          	mov    0x10(%rdi),%r9
  41279c:	44 8d 69 01          	lea    0x1(%rcx),%r13d
  4127a0:	44 89 6f 28          	mov    %r13d,0x28(%rdi)
  4127a4:	45 88 34 09          	mov    %r14b,(%r9,%rcx,1)
  4127a8:	44 89 d9             	mov    %r11d,%ecx
  4127ab:	44 8b af 24 17 00 00 	mov    0x1724(%rdi),%r13d
  4127b2:	44 29 e9             	sub    %r13d,%ecx
  4127b5:	41 d3 fc             	sar    %cl,%r12d
  4127b8:	42 8d 4c 2d f0       	lea    -0x10(%rbp,%r13,1),%ecx
  4127bd:	45 89 e1             	mov    %r12d,%r9d
  4127c0:	66 44 89 a7 20 17 00 	mov    %r12w,0x1720(%rdi)
  4127c7:	00 
  4127c8:	89 8f 24 17 00 00    	mov    %ecx,0x1724(%rdi)
            extra = extra_lbits[code];
  4127ce:	8b 2c 9d 40 91 43 00 	mov    0x439140(,%rbx,4),%ebp
            if (extra != 0) {
  4127d5:	85 ed                	test   %ebp,%ebp
  4127d7:	74 7c                	je     412855 <compress_block+0x205>
                lc -= base_length[code];
  4127d9:	44 2b 04 9d 80 87 43 	sub    0x438780(,%rbx,4),%r8d
  4127e0:	00 
                send_bits(s, lc, extra);       /* send the extra length bits */
  4127e1:	44 89 db             	mov    %r11d,%ebx
  4127e4:	29 eb                	sub    %ebp,%ebx
  4127e6:	39 cb                	cmp    %ecx,%ebx
  4127e8:	0f 8d 72 02 00 00    	jge    412a60 <compress_block+0x410>
  4127ee:	45 89 c4             	mov    %r8d,%r12d
  4127f1:	4c 8b 6f 10          	mov    0x10(%rdi),%r13
  4127f5:	45 0f b7 c0          	movzwl %r8w,%r8d
  4127f9:	41 d3 e4             	shl    %cl,%r12d
  4127fc:	8b 4f 28             	mov    0x28(%rdi),%ecx
  4127ff:	45 09 e1             	or     %r12d,%r9d
  412802:	66 44 89 8f 20 17 00 	mov    %r9w,0x1720(%rdi)
  412809:	00 
  41280a:	8d 59 01             	lea    0x1(%rcx),%ebx
  41280d:	89 5f 28             	mov    %ebx,0x28(%rdi)
  412810:	45 88 4c 0d 00       	mov    %r9b,0x0(%r13,%rcx,1)
  412815:	44 89 d9             	mov    %r11d,%ecx
  412818:	44 8b 67 28          	mov    0x28(%rdi),%r12d
  41281c:	44 0f b6 af 21 17 00 	movzbl 0x1721(%rdi),%r13d
  412823:	00 
  412824:	4c 8b 4f 10          	mov    0x10(%rdi),%r9
  412828:	45 8d 74 24 01       	lea    0x1(%r12),%r14d
  41282d:	44 89 77 28          	mov    %r14d,0x28(%rdi)
  412831:	47 88 2c 21          	mov    %r13b,(%r9,%r12,1)
  412835:	8b 9f 24 17 00 00    	mov    0x1724(%rdi),%ebx
  41283b:	29 d9                	sub    %ebx,%ecx
  41283d:	41 d3 f8             	sar    %cl,%r8d
  412840:	8d 4c 1d f0          	lea    -0x10(%rbp,%rbx,1),%ecx
  412844:	45 89 c1             	mov    %r8d,%r9d
  412847:	66 44 89 87 20 17 00 	mov    %r8w,0x1720(%rdi)
  41284e:	00 
  41284f:	89 8f 24 17 00 00    	mov    %ecx,0x1724(%rdi)
            }
            dist--; /* dist is now the match distance - 1 */
  412855:	83 e8 01             	sub    $0x1,%eax
            code = d_code(dist);
  412858:	3d ff 00 00 00       	cmp    $0xff,%eax
  41285d:	0f 87 dd 01 00 00    	ja     412a40 <compress_block+0x3f0>
  412863:	41 89 c4             	mov    %eax,%r12d
  412866:	45 0f b6 84 24 00 89 	movzbl 0x438900(%r12),%r8d
  41286d:	43 00 
            Assert (code < D_CODES, "bad d_code");

            send_code(s, code, dtree);       /* send the distance code */
  41286f:	4e 8d 34 82          	lea    (%rdx,%r8,4),%r14
  412873:	45 89 dd             	mov    %r11d,%r13d
  412876:	41 0f b7 5e 02       	movzwl 0x2(%r14),%ebx
  41287b:	41 0f b7 2e          	movzwl (%r14),%ebp
  41287f:	41 29 dd             	sub    %ebx,%r13d
  412882:	41 39 cd             	cmp    %ecx,%r13d
  412885:	0f 8d 95 01 00 00    	jge    412a20 <compress_block+0x3d0>
  41288b:	41 89 ec             	mov    %ebp,%r12d
  41288e:	4c 8b 77 10          	mov    0x10(%rdi),%r14
  412892:	41 d3 e4             	shl    %cl,%r12d
  412895:	45 09 e1             	or     %r12d,%r9d
  412898:	44 8b 67 28          	mov    0x28(%rdi),%r12d
  41289c:	66 44 89 8f 20 17 00 	mov    %r9w,0x1720(%rdi)
  4128a3:	00 
  4128a4:	45 8d 6c 24 01       	lea    0x1(%r12),%r13d
  4128a9:	44 89 6f 28          	mov    %r13d,0x28(%rdi)
  4128ad:	47 88 0c 26          	mov    %r9b,(%r14,%r12,1)
  4128b1:	8b 4f 28             	mov    0x28(%rdi),%ecx
  4128b4:	44 0f b6 a7 21 17 00 	movzbl 0x1721(%rdi),%r12d
  4128bb:	00 
  4128bc:	4c 8b 4f 10          	mov    0x10(%rdi),%r9
  4128c0:	44 8d 71 01          	lea    0x1(%rcx),%r14d
  4128c4:	44 89 77 28          	mov    %r14d,0x28(%rdi)
  4128c8:	45 88 24 09          	mov    %r12b,(%r9,%rcx,1)
  4128cc:	44 89 d9             	mov    %r11d,%ecx
  4128cf:	44 8b af 24 17 00 00 	mov    0x1724(%rdi),%r13d
  4128d6:	44 29 e9             	sub    %r13d,%ecx
  4128d9:	d3 fd                	sar    %cl,%ebp
  4128db:	42 8d 4c 2b f0       	lea    -0x10(%rbx,%r13,1),%ecx
  4128e0:	41 89 e9             	mov    %ebp,%r9d
  4128e3:	66 89 af 20 17 00 00 	mov    %bp,0x1720(%rdi)
  4128ea:	89 8f 24 17 00 00    	mov    %ecx,0x1724(%rdi)
            extra = extra_dbits[code];
  4128f0:	42 8b 1c 85 c0 90 43 	mov    0x4390c0(,%r8,4),%ebx
  4128f7:	00 
            if (extra != 0) {
  4128f8:	85 db                	test   %ebx,%ebx
  4128fa:	0f 84 04 fe ff ff    	je     412704 <compress_block+0xb4>
                dist -= base_dist[code];
  412900:	42 2b 04 85 00 87 43 	sub    0x438700(,%r8,4),%eax
  412907:	00 
                send_bits(s, dist, extra);   /* send the extra distance bits */
  412908:	45 89 d8             	mov    %r11d,%r8d
  41290b:	41 29 d8             	sub    %ebx,%r8d
  41290e:	41 39 c8             	cmp    %ecx,%r8d
  412911:	0f 8d 69 01 00 00    	jge    412a80 <compress_block+0x430>
  412917:	44 8b 6f 28          	mov    0x28(%rdi),%r13d
  41291b:	4c 8b 67 10          	mov    0x10(%rdi),%r12
  41291f:	89 c5                	mov    %eax,%ebp
  412921:	d3 e5                	shl    %cl,%ebp
  412923:	0f b7 c0             	movzwl %ax,%eax
  412926:	41 09 e9             	or     %ebp,%r9d
  412929:	66 44 89 8f 20 17 00 	mov    %r9w,0x1720(%rdi)
  412930:	00 
  412931:	41 8d 4d 01          	lea    0x1(%r13),%ecx
  412935:	89 4f 28             	mov    %ecx,0x28(%rdi)
  412938:	47 88 0c 2c          	mov    %r9b,(%r12,%r13,1)
  41293c:	44 89 d9             	mov    %r11d,%ecx
  41293f:	8b 6f 28             	mov    0x28(%rdi),%ebp
  412942:	44 0f b6 b7 21 17 00 	movzbl 0x1721(%rdi),%r14d
  412949:	00 
  41294a:	4c 8b 47 10          	mov    0x10(%rdi),%r8
  41294e:	44 8d 4d 01          	lea    0x1(%rbp),%r9d
  412952:	44 89 4f 28          	mov    %r9d,0x28(%rdi)
  412956:	45 88 34 28          	mov    %r14b,(%r8,%rbp,1)
  41295a:	44 8b a7 24 17 00 00 	mov    0x1724(%rdi),%r12d
  412961:	44 29 e1             	sub    %r12d,%ecx
  412964:	d3 f8                	sar    %cl,%eax

        /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
        Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
               "pendingBuf overflow");

    } while (lx < s->last_lit);
  412966:	44 3b 97 fc 16 00 00 	cmp    0x16fc(%rdi),%r10d

            send_code(s, code, dtree);       /* send the distance code */
            extra = extra_dbits[code];
            if (extra != 0) {
                dist -= base_dist[code];
                send_bits(s, dist, extra);   /* send the extra distance bits */
  41296d:	42 8d 4c 23 f0       	lea    -0x10(%rbx,%r12,1),%ecx
  412972:	41 89 c1             	mov    %eax,%r9d
  412975:	66 89 87 20 17 00 00 	mov    %ax,0x1720(%rdi)
  41297c:	89 8f 24 17 00 00    	mov    %ecx,0x1724(%rdi)

        /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
        Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
               "pendingBuf overflow");

    } while (lx < s->last_lit);
  412982:	0f 82 89 fd ff ff    	jb     412711 <compress_block+0xc1>
  412988:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41298f:	00 

    send_code(s, END_BLOCK, ltree);
  412990:	0f b7 96 02 04 00 00 	movzwl 0x402(%rsi),%edx
  412997:	41 be 10 00 00 00    	mov    $0x10,%r14d
  41299d:	45 89 f2             	mov    %r14d,%r10d
  4129a0:	41 29 d2             	sub    %edx,%r10d
  4129a3:	41 39 ca             	cmp    %ecx,%r10d
  4129a6:	0f 8c f4 00 00 00    	jl     412aa0 <compress_block+0x450>
  4129ac:	44 0f b7 9e 00 04 00 	movzwl 0x400(%rsi),%r11d
  4129b3:	00 
  4129b4:	41 d3 e3             	shl    %cl,%r11d
  4129b7:	01 d1                	add    %edx,%ecx
  4129b9:	45 09 d9             	or     %r11d,%r9d
  4129bc:	89 8f 24 17 00 00    	mov    %ecx,0x1724(%rdi)
  4129c2:	66 44 89 8f 20 17 00 	mov    %r9w,0x1720(%rdi)
  4129c9:	00 
    s->last_eob_len = ltree[END_BLOCK].Len;
  4129ca:	0f b7 b6 02 04 00 00 	movzwl 0x402(%rsi),%esi
}
  4129d1:	5b                   	pop    %rbx
  4129d2:	5d                   	pop    %rbp
  4129d3:	41 5c                	pop    %r12
               "pendingBuf overflow");

    } while (lx < s->last_lit);

    send_code(s, END_BLOCK, ltree);
    s->last_eob_len = ltree[END_BLOCK].Len;
  4129d5:	89 b7 1c 17 00 00    	mov    %esi,0x171c(%rdi)
}
  4129db:	41 5d                	pop    %r13
  4129dd:	41 5e                	pop    %r14
  4129df:	c3                   	retq   
            send_code(s, lc, ltree); /* send a literal byte */
            Tracecv(isgraph(lc), (stderr," '%c' ", lc));
        } else {
            /* Here, lc is the match length - MIN_MATCH */
            code = _length_code[lc];
            send_code(s, code+LITERALS+1, ltree); /* send the length code */
  4129e0:	41 d3 e4             	shl    %cl,%r12d
  4129e3:	01 e9                	add    %ebp,%ecx
  4129e5:	45 09 e1             	or     %r12d,%r9d
  4129e8:	89 8f 24 17 00 00    	mov    %ecx,0x1724(%rdi)
  4129ee:	66 44 89 8f 20 17 00 	mov    %r9w,0x1720(%rdi)
  4129f5:	00 
  4129f6:	e9 d3 fd ff ff       	jmpq   4127ce <compress_block+0x17e>
  4129fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

    if (s->last_lit != 0) do {
        dist = s->d_buf[lx];
        lc = s->l_buf[lx++];
        if (dist == 0) {
            send_code(s, lc, ltree); /* send a literal byte */
  412a00:	41 d3 e0             	shl    %cl,%r8d
  412a03:	44 01 f1             	add    %r14d,%ecx
  412a06:	45 09 c1             	or     %r8d,%r9d
  412a09:	89 8f 24 17 00 00    	mov    %ecx,0x1724(%rdi)
  412a0f:	66 44 89 8f 20 17 00 	mov    %r9w,0x1720(%rdi)
  412a16:	00 
  412a17:	e9 e8 fc ff ff       	jmpq   412704 <compress_block+0xb4>
  412a1c:	0f 1f 40 00          	nopl   0x0(%rax)
            }
            dist--; /* dist is now the match distance - 1 */
            code = d_code(dist);
            Assert (code < D_CODES, "bad d_code");

            send_code(s, code, dtree);       /* send the distance code */
  412a20:	d3 e5                	shl    %cl,%ebp
  412a22:	01 d9                	add    %ebx,%ecx
  412a24:	41 09 e9             	or     %ebp,%r9d
  412a27:	89 8f 24 17 00 00    	mov    %ecx,0x1724(%rdi)
  412a2d:	66 44 89 8f 20 17 00 	mov    %r9w,0x1720(%rdi)
  412a34:	00 
  412a35:	e9 b6 fe ff ff       	jmpq   4128f0 <compress_block+0x2a0>
  412a3a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            if (extra != 0) {
                lc -= base_length[code];
                send_bits(s, lc, extra);       /* send the extra length bits */
            }
            dist--; /* dist is now the match distance - 1 */
            code = d_code(dist);
  412a40:	89 c5                	mov    %eax,%ebp
  412a42:	c1 ed 07             	shr    $0x7,%ebp
  412a45:	81 c5 00 01 00 00    	add    $0x100,%ebp
  412a4b:	44 0f b6 85 00 89 43 	movzbl 0x438900(%rbp),%r8d
  412a52:	00 
  412a53:	e9 17 fe ff ff       	jmpq   41286f <compress_block+0x21f>
  412a58:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  412a5f:	00 
            code = _length_code[lc];
            send_code(s, code+LITERALS+1, ltree); /* send the length code */
            extra = extra_lbits[code];
            if (extra != 0) {
                lc -= base_length[code];
                send_bits(s, lc, extra);       /* send the extra length bits */
  412a60:	41 d3 e0             	shl    %cl,%r8d
  412a63:	01 e9                	add    %ebp,%ecx
  412a65:	45 09 c1             	or     %r8d,%r9d
  412a68:	89 8f 24 17 00 00    	mov    %ecx,0x1724(%rdi)
  412a6e:	66 44 89 8f 20 17 00 	mov    %r9w,0x1720(%rdi)
  412a75:	00 
  412a76:	e9 da fd ff ff       	jmpq   412855 <compress_block+0x205>
  412a7b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

            send_code(s, code, dtree);       /* send the distance code */
            extra = extra_dbits[code];
            if (extra != 0) {
                dist -= base_dist[code];
                send_bits(s, dist, extra);   /* send the extra distance bits */
  412a80:	d3 e0                	shl    %cl,%eax
  412a82:	01 d9                	add    %ebx,%ecx
  412a84:	41 09 c1             	or     %eax,%r9d
  412a87:	89 8f 24 17 00 00    	mov    %ecx,0x1724(%rdi)
  412a8d:	66 44 89 8f 20 17 00 	mov    %r9w,0x1720(%rdi)
  412a94:	00 
  412a95:	e9 6a fc ff ff       	jmpq   412704 <compress_block+0xb4>
  412a9a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
               "pendingBuf overflow");

    } while (lx < s->last_lit);

    send_code(s, END_BLOCK, ltree);
  412aa0:	44 0f b7 86 00 04 00 	movzwl 0x400(%rsi),%r8d
  412aa7:	00 
  412aa8:	44 8b 67 28          	mov    0x28(%rdi),%r12d
  412aac:	48 8b 5f 10          	mov    0x10(%rdi),%rbx
  412ab0:	45 89 c5             	mov    %r8d,%r13d
  412ab3:	41 8d 44 24 01       	lea    0x1(%r12),%eax
  412ab8:	41 d3 e5             	shl    %cl,%r13d
  412abb:	45 09 e9             	or     %r13d,%r9d
  412abe:	89 47 28             	mov    %eax,0x28(%rdi)
  412ac1:	66 44 89 8f 20 17 00 	mov    %r9w,0x1720(%rdi)
  412ac8:	00 
  412ac9:	46 88 0c 23          	mov    %r9b,(%rbx,%r12,1)
  412acd:	8b 4f 28             	mov    0x28(%rdi),%ecx
  412ad0:	44 0f b6 9f 21 17 00 	movzbl 0x1721(%rdi),%r11d
  412ad7:	00 
  412ad8:	4c 8b 4f 10          	mov    0x10(%rdi),%r9
  412adc:	44 8d 51 01          	lea    0x1(%rcx),%r10d
  412ae0:	44 89 57 28          	mov    %r10d,0x28(%rdi)
  412ae4:	45 88 1c 09          	mov    %r11b,(%r9,%rcx,1)
  412ae8:	44 8b af 24 17 00 00 	mov    0x1724(%rdi),%r13d
  412aef:	45 29 ee             	sub    %r13d,%r14d
  412af2:	42 8d 54 2a f0       	lea    -0x10(%rdx,%r13,1),%edx
  412af7:	44 89 f1             	mov    %r14d,%ecx
  412afa:	41 d3 f8             	sar    %cl,%r8d
  412afd:	89 97 24 17 00 00    	mov    %edx,0x1724(%rdi)
  412b03:	66 44 89 87 20 17 00 	mov    %r8w,0x1720(%rdi)
  412b0a:	00 
  412b0b:	e9 ba fe ff ff       	jmpq   4129ca <compress_block+0x37a>

0000000000412b10 <build_tree>:
 *     also updated if stree is not null. The field max_code is set.
 */
local void build_tree(s, desc)
    deflate_state *s;
    tree_desc *desc; /* the tree descriptor */
{
  412b10:	41 57                	push   %r15
  412b12:	41 56                	push   %r14
  412b14:	41 55                	push   %r13
  412b16:	41 54                	push   %r12
  412b18:	55                   	push   %rbp
  412b19:	53                   	push   %rbx
  412b1a:	48 83 ec 68          	sub    $0x68,%rsp
    ct_data *tree         = desc->dyn_tree;
    const ct_data *stree  = desc->stat_desc->static_tree;
  412b1e:	48 8b 56 10          	mov    0x10(%rsi),%rdx
 */
local void build_tree(s, desc)
    deflate_state *s;
    tree_desc *desc; /* the tree descriptor */
{
    ct_data *tree         = desc->dyn_tree;
  412b22:	4c 8b 3e             	mov    (%rsi),%r15
 *     also updated if stree is not null. The field max_code is set.
 */
local void build_tree(s, desc)
    deflate_state *s;
    tree_desc *desc; /* the tree descriptor */
{
  412b25:	64 48 8b 1c 25 28 00 	mov    %fs:0x28,%rbx
  412b2c:	00 00 
  412b2e:	48 89 5c 24 58       	mov    %rbx,0x58(%rsp)
  412b33:	31 db                	xor    %ebx,%ebx
  412b35:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
    ct_data *tree         = desc->dyn_tree;
    const ct_data *stree  = desc->stat_desc->static_tree;
    int elems             = desc->stat_desc->elems;
  412b3a:	8b 5a 14             	mov    0x14(%rdx),%ebx
local void build_tree(s, desc)
    deflate_state *s;
    tree_desc *desc; /* the tree descriptor */
{
    ct_data *tree         = desc->dyn_tree;
    const ct_data *stree  = desc->stat_desc->static_tree;
  412b3d:	48 8b 0a             	mov    (%rdx),%rcx

    /* Construct the initial heap, with least frequent element in
     * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
     * heap[0] is not used.
     */
    s->heap_len = 0, s->heap_max = HEAP_SIZE;
  412b40:	c7 87 a4 14 00 00 00 	movl   $0x0,0x14a4(%rdi)
  412b47:	00 00 00 
  412b4a:	c7 87 a8 14 00 00 3d 	movl   $0x23d,0x14a8(%rdi)
  412b51:	02 00 00 

    for (n = 0; n < elems; n++) {
  412b54:	85 db                	test   %ebx,%ebx
    deflate_state *s;
    tree_desc *desc; /* the tree descriptor */
{
    ct_data *tree         = desc->dyn_tree;
    const ct_data *stree  = desc->stat_desc->static_tree;
    int elems             = desc->stat_desc->elems;
  412b56:	89 5c 24 14          	mov    %ebx,0x14(%rsp)
     * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
     * heap[0] is not used.
     */
    s->heap_len = 0, s->heap_max = HEAP_SIZE;

    for (n = 0; n < elems; n++) {
  412b5a:	0f 8e c9 13 00 00    	jle    413f29 <build_tree+0x1419>
  412b60:	8d 73 ff             	lea    -0x1(%rbx),%esi
  412b63:	c7 44 24 24 ff ff ff 	movl   $0xffffffff,0x24(%rsp)
  412b6a:	ff 
  412b6b:	83 e6 07             	and    $0x7,%esi
        if (tree[n].Freq != 0) {
  412b6e:	66 41 83 3f 00       	cmpw   $0x0,(%r15)
  412b73:	0f 84 38 12 00 00    	je     413db1 <build_tree+0x12a1>
            s->heap[++(s->heap_len)] = max_code = n;
  412b79:	c7 87 a4 14 00 00 01 	movl   $0x1,0x14a4(%rdi)
  412b80:	00 00 00 
  412b83:	c7 87 b4 0b 00 00 00 	movl   $0x0,0xbb4(%rdi)
  412b8a:	00 00 00 
            s->depth[n] = 0;
  412b8d:	c6 87 ac 14 00 00 00 	movb   $0x0,0x14ac(%rdi)
  412b94:	c7 44 24 24 00 00 00 	movl   $0x0,0x24(%rsp)
  412b9b:	00 
     * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
     * heap[0] is not used.
     */
    s->heap_len = 0, s->heap_max = HEAP_SIZE;

    for (n = 0; n < elems; n++) {
  412b9c:	83 7c 24 14 01       	cmpl   $0x1,0x14(%rsp)
  412ba1:	b8 01 00 00 00       	mov    $0x1,%eax
  412ba6:	0f 8e 7a 03 00 00    	jle    412f26 <build_tree+0x416>
  412bac:	85 f6                	test   %esi,%esi
  412bae:	0f 84 dc 00 00 00    	je     412c90 <build_tree+0x180>
  412bb4:	83 fe 01             	cmp    $0x1,%esi
  412bb7:	0f 84 b0 00 00 00    	je     412c6d <build_tree+0x15d>
  412bbd:	83 fe 02             	cmp    $0x2,%esi
  412bc0:	0f 84 8f 00 00 00    	je     412c55 <build_tree+0x145>
  412bc6:	83 fe 03             	cmp    $0x3,%esi
  412bc9:	74 71                	je     412c3c <build_tree+0x12c>
  412bcb:	83 fe 04             	cmp    $0x4,%esi
  412bce:	74 54                	je     412c24 <build_tree+0x114>
  412bd0:	83 fe 05             	cmp    $0x5,%esi
  412bd3:	74 37                	je     412c0c <build_tree+0xfc>
  412bd5:	83 fe 06             	cmp    $0x6,%esi
  412bd8:	74 19                	je     412bf3 <build_tree+0xe3>
        if (tree[n].Freq != 0) {
  412bda:	66 41 83 3c 87 00    	cmpw   $0x0,(%r15,%rax,4)
  412be0:	0f 85 d8 11 00 00    	jne    413dbe <build_tree+0x12ae>
            s->heap[++(s->heap_len)] = max_code = n;
            s->depth[n] = 0;
        } else {
            tree[n].Len = 0;
  412be6:	45 31 d2             	xor    %r10d,%r10d
  412be9:	66 45 89 54 87 02    	mov    %r10w,0x2(%r15,%rax,4)
  412bef:	48 83 c0 01          	add    $0x1,%rax
     * heap[0] is not used.
     */
    s->heap_len = 0, s->heap_max = HEAP_SIZE;

    for (n = 0; n < elems; n++) {
        if (tree[n].Freq != 0) {
  412bf3:	66 41 83 3c 87 00    	cmpw   $0x0,(%r15,%rax,4)
  412bf9:	0f 85 7b 12 00 00    	jne    413e7a <build_tree+0x136a>
            s->heap[++(s->heap_len)] = max_code = n;
            s->depth[n] = 0;
        } else {
            tree[n].Len = 0;
  412bff:	45 31 e4             	xor    %r12d,%r12d
  412c02:	66 45 89 64 87 02    	mov    %r12w,0x2(%r15,%rax,4)
  412c08:	48 83 c0 01          	add    $0x1,%rax
     * heap[0] is not used.
     */
    s->heap_len = 0, s->heap_max = HEAP_SIZE;

    for (n = 0; n < elems; n++) {
        if (tree[n].Freq != 0) {
  412c0c:	66 41 83 3c 87 00    	cmpw   $0x0,(%r15,%rax,4)
  412c12:	0f 85 35 12 00 00    	jne    413e4d <build_tree+0x133d>
            s->heap[++(s->heap_len)] = max_code = n;
            s->depth[n] = 0;
        } else {
            tree[n].Len = 0;
  412c18:	31 db                	xor    %ebx,%ebx
  412c1a:	66 41 89 5c 87 02    	mov    %bx,0x2(%r15,%rax,4)
  412c20:	48 83 c0 01          	add    $0x1,%rax
     * heap[0] is not used.
     */
    s->heap_len = 0, s->heap_max = HEAP_SIZE;

    for (n = 0; n < elems; n++) {
        if (tree[n].Freq != 0) {
  412c24:	66 41 83 3c 87 00    	cmpw   $0x0,(%r15,%rax,4)
  412c2a:	0f 85 ef 11 00 00    	jne    413e1f <build_tree+0x130f>
            s->heap[++(s->heap_len)] = max_code = n;
            s->depth[n] = 0;
        } else {
            tree[n].Len = 0;
  412c30:	31 ed                	xor    %ebp,%ebp
  412c32:	66 41 89 6c 87 02    	mov    %bp,0x2(%r15,%rax,4)
  412c38:	48 83 c0 01          	add    $0x1,%rax
     * heap[0] is not used.
     */
    s->heap_len = 0, s->heap_max = HEAP_SIZE;

    for (n = 0; n < elems; n++) {
        if (tree[n].Freq != 0) {
  412c3c:	66 41 83 3c 87 00    	cmpw   $0x0,(%r15,%rax,4)
  412c42:	0f 85 ab 11 00 00    	jne    413df3 <build_tree+0x12e3>
            s->heap[++(s->heap_len)] = max_code = n;
            s->depth[n] = 0;
        } else {
            tree[n].Len = 0;
  412c48:	45 31 ed             	xor    %r13d,%r13d
  412c4b:	66 45 89 6c 87 02    	mov    %r13w,0x2(%r15,%rax,4)
  412c51:	48 83 c0 01          	add    $0x1,%rax
     * heap[0] is not used.
     */
    s->heap_len = 0, s->heap_max = HEAP_SIZE;

    for (n = 0; n < elems; n++) {
        if (tree[n].Freq != 0) {
  412c55:	66 41 83 3c 87 00    	cmpw   $0x0,(%r15,%rax,4)
  412c5b:	0f 85 ed 10 00 00    	jne    413d4e <build_tree+0x123e>
            s->heap[++(s->heap_len)] = max_code = n;
            s->depth[n] = 0;
        } else {
            tree[n].Len = 0;
  412c61:	31 f6                	xor    %esi,%esi
  412c63:	66 41 89 74 87 02    	mov    %si,0x2(%r15,%rax,4)
  412c69:	48 83 c0 01          	add    $0x1,%rax
     * heap[0] is not used.
     */
    s->heap_len = 0, s->heap_max = HEAP_SIZE;

    for (n = 0; n < elems; n++) {
        if (tree[n].Freq != 0) {
  412c6d:	66 41 83 3c 87 00    	cmpw   $0x0,(%r15,%rax,4)
  412c73:	0f 85 0a 11 00 00    	jne    413d83 <build_tree+0x1273>
            s->heap[++(s->heap_len)] = max_code = n;
            s->depth[n] = 0;
        } else {
            tree[n].Len = 0;
  412c79:	45 31 c0             	xor    %r8d,%r8d
  412c7c:	66 45 89 44 87 02    	mov    %r8w,0x2(%r15,%rax,4)
  412c82:	48 83 c0 01          	add    $0x1,%rax
     * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
     * heap[0] is not used.
     */
    s->heap_len = 0, s->heap_max = HEAP_SIZE;

    for (n = 0; n < elems; n++) {
  412c86:	39 44 24 14          	cmp    %eax,0x14(%rsp)
  412c8a:	0f 8e 96 02 00 00    	jle    412f26 <build_tree+0x416>
  412c90:	44 8b 54 24 24       	mov    0x24(%rsp),%r10d
  412c95:	e9 fc 00 00 00       	jmpq   412d96 <build_tree+0x286>
        if (tree[n].Freq != 0) {
            s->heap[++(s->heap_len)] = max_code = n;
  412c9a:	8b 97 a4 14 00 00    	mov    0x14a4(%rdi),%edx
  412ca0:	41 89 c2             	mov    %eax,%r10d
  412ca3:	8d 5a 01             	lea    0x1(%rdx),%ebx
  412ca6:	48 63 f3             	movslq %ebx,%rsi
  412ca9:	89 9f a4 14 00 00    	mov    %ebx,0x14a4(%rdi)
  412caf:	89 84 b7 b0 0b 00 00 	mov    %eax,0xbb0(%rdi,%rsi,4)
            s->depth[n] = 0;
  412cb6:	c6 84 07 ac 14 00 00 	movb   $0x0,0x14ac(%rdi,%rax,1)
  412cbd:	00 
  412cbe:	48 83 c0 01          	add    $0x1,%rax
     * heap[0] is not used.
     */
    s->heap_len = 0, s->heap_max = HEAP_SIZE;

    for (n = 0; n < elems; n++) {
        if (tree[n].Freq != 0) {
  412cc2:	66 41 83 3c 87 00    	cmpw   $0x0,(%r15,%rax,4)
  412cc8:	0f 84 ed 00 00 00    	je     412dbb <build_tree+0x2ab>
            s->heap[++(s->heap_len)] = max_code = n;
  412cce:	44 8b 97 a4 14 00 00 	mov    0x14a4(%rdi),%r10d
  412cd5:	4c 8d 48 01          	lea    0x1(%rax),%r9
  412cd9:	41 8d 6a 01          	lea    0x1(%r10),%ebp
  412cdd:	41 89 c2             	mov    %eax,%r10d
  412ce0:	4c 63 c5             	movslq %ebp,%r8
  412ce3:	89 af a4 14 00 00    	mov    %ebp,0x14a4(%rdi)
  412ce9:	42 89 84 87 b0 0b 00 	mov    %eax,0xbb0(%rdi,%r8,4)
  412cf0:	00 
            s->depth[n] = 0;
  412cf1:	c6 84 07 ac 14 00 00 	movb   $0x0,0x14ac(%rdi,%rax,1)
  412cf8:	00 
     * heap[0] is not used.
     */
    s->heap_len = 0, s->heap_max = HEAP_SIZE;

    for (n = 0; n < elems; n++) {
        if (tree[n].Freq != 0) {
  412cf9:	66 43 83 3c 8f 00    	cmpw   $0x0,(%r15,%r9,4)
  412cff:	0f 85 cf 00 00 00    	jne    412dd4 <build_tree+0x2c4>
  412d05:	48 8d 70 02          	lea    0x2(%rax),%rsi
            s->heap[++(s->heap_len)] = max_code = n;
            s->depth[n] = 0;
        } else {
            tree[n].Len = 0;
  412d09:	45 31 e4             	xor    %r12d,%r12d
  412d0c:	66 47 89 64 8f 02    	mov    %r12w,0x2(%r15,%r9,4)
     * heap[0] is not used.
     */
    s->heap_len = 0, s->heap_max = HEAP_SIZE;

    for (n = 0; n < elems; n++) {
        if (tree[n].Freq != 0) {
  412d12:	66 41 83 3c b7 00    	cmpw   $0x0,(%r15,%rsi,4)
  412d18:	0f 85 ef 00 00 00    	jne    412e0d <build_tree+0x2fd>
  412d1e:	4c 8d 40 03          	lea    0x3(%rax),%r8
            s->heap[++(s->heap_len)] = max_code = n;
            s->depth[n] = 0;
        } else {
            tree[n].Len = 0;
  412d22:	31 db                	xor    %ebx,%ebx
  412d24:	66 41 89 5c b7 02    	mov    %bx,0x2(%r15,%rsi,4)
     * heap[0] is not used.
     */
    s->heap_len = 0, s->heap_max = HEAP_SIZE;

    for (n = 0; n < elems; n++) {
        if (tree[n].Freq != 0) {
  412d2a:	66 43 83 3c 87 00    	cmpw   $0x0,(%r15,%r8,4)
  412d30:	0f 85 0e 01 00 00    	jne    412e44 <build_tree+0x334>
  412d36:	48 8d 70 04          	lea    0x4(%rax),%rsi
            s->heap[++(s->heap_len)] = max_code = n;
            s->depth[n] = 0;
        } else {
            tree[n].Len = 0;
  412d3a:	45 31 c9             	xor    %r9d,%r9d
  412d3d:	66 47 89 4c 87 02    	mov    %r9w,0x2(%r15,%r8,4)
     * heap[0] is not used.
     */
    s->heap_len = 0, s->heap_max = HEAP_SIZE;

    for (n = 0; n < elems; n++) {
        if (tree[n].Freq != 0) {
  412d43:	66 41 83 3c b7 00    	cmpw   $0x0,(%r15,%rsi,4)
  412d49:	0f 85 2f 01 00 00    	jne    412e7e <build_tree+0x36e>
  412d4f:	48 8d 68 05          	lea    0x5(%rax),%rbp
            s->heap[++(s->heap_len)] = max_code = n;
            s->depth[n] = 0;
        } else {
            tree[n].Len = 0;
  412d53:	31 db                	xor    %ebx,%ebx
  412d55:	66 41 89 5c b7 02    	mov    %bx,0x2(%r15,%rsi,4)
     * heap[0] is not used.
     */
    s->heap_len = 0, s->heap_max = HEAP_SIZE;

    for (n = 0; n < elems; n++) {
        if (tree[n].Freq != 0) {
  412d5b:	66 41 83 3c af 00    	cmpw   $0x0,(%r15,%rbp,4)
  412d61:	0f 85 4e 01 00 00    	jne    412eb5 <build_tree+0x3a5>
  412d67:	4c 8d 70 06          	lea    0x6(%rax),%r14
            s->heap[++(s->heap_len)] = max_code = n;
            s->depth[n] = 0;
        } else {
            tree[n].Len = 0;
  412d6b:	45 31 c0             	xor    %r8d,%r8d
  412d6e:	66 45 89 44 af 02    	mov    %r8w,0x2(%r15,%rbp,4)
     * heap[0] is not used.
     */
    s->heap_len = 0, s->heap_max = HEAP_SIZE;

    for (n = 0; n < elems; n++) {
        if (tree[n].Freq != 0) {
  412d74:	66 43 83 3c b7 00    	cmpw   $0x0,(%r15,%r14,4)
  412d7a:	0f 85 6d 01 00 00    	jne    412eed <build_tree+0x3dd>
            s->heap[++(s->heap_len)] = max_code = n;
            s->depth[n] = 0;
        } else {
            tree[n].Len = 0;
  412d80:	31 f6                	xor    %esi,%esi
  412d82:	48 83 c0 07          	add    $0x7,%rax
     * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
     * heap[0] is not used.
     */
    s->heap_len = 0, s->heap_max = HEAP_SIZE;

    for (n = 0; n < elems; n++) {
  412d86:	39 44 24 14          	cmp    %eax,0x14(%rsp)
        if (tree[n].Freq != 0) {
            s->heap[++(s->heap_len)] = max_code = n;
            s->depth[n] = 0;
        } else {
            tree[n].Len = 0;
  412d8a:	66 43 89 74 b7 02    	mov    %si,0x2(%r15,%r14,4)
     * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
     * heap[0] is not used.
     */
    s->heap_len = 0, s->heap_max = HEAP_SIZE;

    for (n = 0; n < elems; n++) {
  412d90:	0f 8e 8b 01 00 00    	jle    412f21 <build_tree+0x411>
        if (tree[n].Freq != 0) {
  412d96:	66 41 83 3c 87 00    	cmpw   $0x0,(%r15,%rax,4)
  412d9c:	0f 85 f8 fe ff ff    	jne    412c9a <build_tree+0x18a>
            s->heap[++(s->heap_len)] = max_code = n;
            s->depth[n] = 0;
        } else {
            tree[n].Len = 0;
  412da2:	45 31 f6             	xor    %r14d,%r14d
  412da5:	66 45 89 74 87 02    	mov    %r14w,0x2(%r15,%rax,4)
  412dab:	48 83 c0 01          	add    $0x1,%rax
     * heap[0] is not used.
     */
    s->heap_len = 0, s->heap_max = HEAP_SIZE;

    for (n = 0; n < elems; n++) {
        if (tree[n].Freq != 0) {
  412daf:	66 41 83 3c 87 00    	cmpw   $0x0,(%r15,%rax,4)
  412db5:	0f 85 13 ff ff ff    	jne    412cce <build_tree+0x1be>
  412dbb:	4c 8d 48 01          	lea    0x1(%rax),%r9
            s->heap[++(s->heap_len)] = max_code = n;
            s->depth[n] = 0;
        } else {
            tree[n].Len = 0;
  412dbf:	45 31 db             	xor    %r11d,%r11d
  412dc2:	66 45 89 5c 87 02    	mov    %r11w,0x2(%r15,%rax,4)
     * heap[0] is not used.
     */
    s->heap_len = 0, s->heap_max = HEAP_SIZE;

    for (n = 0; n < elems; n++) {
        if (tree[n].Freq != 0) {
  412dc8:	66 43 83 3c 8f 00    	cmpw   $0x0,(%r15,%r9,4)
  412dce:	0f 84 31 ff ff ff    	je     412d05 <build_tree+0x1f5>
            s->heap[++(s->heap_len)] = max_code = n;
  412dd4:	44 8b af a4 14 00 00 	mov    0x14a4(%rdi),%r13d
  412ddb:	48 8d 70 02          	lea    0x2(%rax),%rsi
  412ddf:	45 89 ca             	mov    %r9d,%r10d
  412de2:	45 8d 75 01          	lea    0x1(%r13),%r14d
  412de6:	49 63 d6             	movslq %r14d,%rdx
  412de9:	44 89 b7 a4 14 00 00 	mov    %r14d,0x14a4(%rdi)
  412df0:	44 89 8c 97 b0 0b 00 	mov    %r9d,0xbb0(%rdi,%rdx,4)
  412df7:	00 
            s->depth[n] = 0;
  412df8:	42 c6 84 0f ac 14 00 	movb   $0x0,0x14ac(%rdi,%r9,1)
  412dff:	00 00 
     * heap[0] is not used.
     */
    s->heap_len = 0, s->heap_max = HEAP_SIZE;

    for (n = 0; n < elems; n++) {
        if (tree[n].Freq != 0) {
  412e01:	66 41 83 3c b7 00    	cmpw   $0x0,(%r15,%rsi,4)
  412e07:	0f 84 11 ff ff ff    	je     412d1e <build_tree+0x20e>
            s->heap[++(s->heap_len)] = max_code = n;
  412e0d:	44 8b 9f a4 14 00 00 	mov    0x14a4(%rdi),%r11d
  412e14:	4c 8d 40 03          	lea    0x3(%rax),%r8
  412e18:	45 8d 53 01          	lea    0x1(%r11),%r10d
  412e1c:	49 63 ea             	movslq %r10d,%rbp
  412e1f:	44 89 97 a4 14 00 00 	mov    %r10d,0x14a4(%rdi)
  412e26:	41 89 f2             	mov    %esi,%r10d
  412e29:	89 b4 af b0 0b 00 00 	mov    %esi,0xbb0(%rdi,%rbp,4)
            s->depth[n] = 0;
  412e30:	c6 84 37 ac 14 00 00 	movb   $0x0,0x14ac(%rdi,%rsi,1)
  412e37:	00 
     * heap[0] is not used.
     */
    s->heap_len = 0, s->heap_max = HEAP_SIZE;

    for (n = 0; n < elems; n++) {
        if (tree[n].Freq != 0) {
  412e38:	66 43 83 3c 87 00    	cmpw   $0x0,(%r15,%r8,4)
  412e3e:	0f 84 f2 fe ff ff    	je     412d36 <build_tree+0x226>
            s->heap[++(s->heap_len)] = max_code = n;
  412e44:	44 8b a7 a4 14 00 00 	mov    0x14a4(%rdi),%r12d
  412e4b:	48 8d 70 04          	lea    0x4(%rax),%rsi
  412e4f:	45 89 c2             	mov    %r8d,%r10d
  412e52:	45 8d 6c 24 01       	lea    0x1(%r12),%r13d
  412e57:	4d 63 f5             	movslq %r13d,%r14
  412e5a:	44 89 af a4 14 00 00 	mov    %r13d,0x14a4(%rdi)
  412e61:	46 89 84 b7 b0 0b 00 	mov    %r8d,0xbb0(%rdi,%r14,4)
  412e68:	00 
            s->depth[n] = 0;
  412e69:	42 c6 84 07 ac 14 00 	movb   $0x0,0x14ac(%rdi,%r8,1)
  412e70:	00 00 
     * heap[0] is not used.
     */
    s->heap_len = 0, s->heap_max = HEAP_SIZE;

    for (n = 0; n < elems; n++) {
        if (tree[n].Freq != 0) {
  412e72:	66 41 83 3c b7 00    	cmpw   $0x0,(%r15,%rsi,4)
  412e78:	0f 84 d1 fe ff ff    	je     412d4f <build_tree+0x23f>
            s->heap[++(s->heap_len)] = max_code = n;
  412e7e:	8b 97 a4 14 00 00    	mov    0x14a4(%rdi),%edx
  412e84:	48 8d 68 05          	lea    0x5(%rax),%rbp
  412e88:	44 8d 5a 01          	lea    0x1(%rdx),%r11d
  412e8c:	4d 63 d3             	movslq %r11d,%r10
  412e8f:	44 89 9f a4 14 00 00 	mov    %r11d,0x14a4(%rdi)
  412e96:	42 89 b4 97 b0 0b 00 	mov    %esi,0xbb0(%rdi,%r10,4)
  412e9d:	00 
            s->depth[n] = 0;
  412e9e:	c6 84 37 ac 14 00 00 	movb   $0x0,0x14ac(%rdi,%rsi,1)
  412ea5:	00 
  412ea6:	41 89 f2             	mov    %esi,%r10d
     * heap[0] is not used.
     */
    s->heap_len = 0, s->heap_max = HEAP_SIZE;

    for (n = 0; n < elems; n++) {
        if (tree[n].Freq != 0) {
  412ea9:	66 41 83 3c af 00    	cmpw   $0x0,(%r15,%rbp,4)
  412eaf:	0f 84 b2 fe ff ff    	je     412d67 <build_tree+0x257>
            s->heap[++(s->heap_len)] = max_code = n;
  412eb5:	44 8b 8f a4 14 00 00 	mov    0x14a4(%rdi),%r9d
  412ebc:	4c 8d 70 06          	lea    0x6(%rax),%r14
  412ec0:	41 89 ea             	mov    %ebp,%r10d
  412ec3:	45 8d 61 01          	lea    0x1(%r9),%r12d
  412ec7:	4d 63 ec             	movslq %r12d,%r13
  412eca:	44 89 a7 a4 14 00 00 	mov    %r12d,0x14a4(%rdi)
  412ed1:	42 89 ac af b0 0b 00 	mov    %ebp,0xbb0(%rdi,%r13,4)
  412ed8:	00 
            s->depth[n] = 0;
  412ed9:	c6 84 2f ac 14 00 00 	movb   $0x0,0x14ac(%rdi,%rbp,1)
  412ee0:	00 
     * heap[0] is not used.
     */
    s->heap_len = 0, s->heap_max = HEAP_SIZE;

    for (n = 0; n < elems; n++) {
        if (tree[n].Freq != 0) {
  412ee1:	66 43 83 3c b7 00    	cmpw   $0x0,(%r15,%r14,4)
  412ee7:	0f 84 93 fe ff ff    	je     412d80 <build_tree+0x270>
            s->heap[++(s->heap_len)] = max_code = n;
  412eed:	8b 9f a4 14 00 00    	mov    0x14a4(%rdi),%ebx
  412ef3:	48 83 c0 07          	add    $0x7,%rax
     * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
     * heap[0] is not used.
     */
    s->heap_len = 0, s->heap_max = HEAP_SIZE;

    for (n = 0; n < elems; n++) {
  412ef7:	39 44 24 14          	cmp    %eax,0x14(%rsp)
  412efb:	45 89 f2             	mov    %r14d,%r10d
        if (tree[n].Freq != 0) {
            s->heap[++(s->heap_len)] = max_code = n;
  412efe:	8d 53 01             	lea    0x1(%rbx),%edx
  412f01:	4c 63 da             	movslq %edx,%r11
  412f04:	89 97 a4 14 00 00    	mov    %edx,0x14a4(%rdi)
  412f0a:	46 89 b4 9f b0 0b 00 	mov    %r14d,0xbb0(%rdi,%r11,4)
  412f11:	00 
            s->depth[n] = 0;
  412f12:	42 c6 84 37 ac 14 00 	movb   $0x0,0x14ac(%rdi,%r14,1)
  412f19:	00 00 
     * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
     * heap[0] is not used.
     */
    s->heap_len = 0, s->heap_max = HEAP_SIZE;

    for (n = 0; n < elems; n++) {
  412f1b:	0f 8f 75 fe ff ff    	jg     412d96 <build_tree+0x286>
  412f21:	44 89 54 24 24       	mov    %r10d,0x24(%rsp)
  412f26:	44 8b 8f a4 14 00 00 	mov    0x14a4(%rdi),%r9d
  412f2d:	48 85 c9             	test   %rcx,%rcx
  412f30:	8b 6c 24 24          	mov    0x24(%rsp),%ebp
  412f34:	75 44                	jne    412f7a <build_tree+0x46a>
  412f36:	e9 83 0f 00 00       	jmpq   413ebe <build_tree+0x13ae>
  412f3b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
     * and that at least one bit should be sent even if there is only one
     * possible code. So to avoid special checks later on we force at least
     * two codes of non zero frequency.
     */
    while (s->heap_len < 2) {
        node = s->heap[++(s->heap_len)] = (max_code < 2 ? ++max_code : 0);
  412f40:	4d 63 c9             	movslq %r9d,%r9
        tree[node].Freq = 1;
  412f43:	41 bc 01 00 00 00    	mov    $0x1,%r12d
     * and that at least one bit should be sent even if there is only one
     * possible code. So to avoid special checks later on we force at least
     * two codes of non zero frequency.
     */
    while (s->heap_len < 2) {
        node = s->heap[++(s->heap_len)] = (max_code < 2 ? ++max_code : 0);
  412f49:	42 89 84 8f b0 0b 00 	mov    %eax,0xbb0(%rdi,%r9,4)
  412f50:	00 
        tree[node].Freq = 1;
  412f51:	66 47 89 24 07       	mov    %r12w,(%r15,%r8,1)
        s->depth[node] = 0;
  412f56:	c6 84 07 ac 14 00 00 	movb   $0x0,0x14ac(%rdi,%rax,1)
  412f5d:	00 
        s->opt_len--; if (stree) s->static_len -= stree[node].Len;
  412f5e:	48 83 af 08 17 00 00 	subq   $0x1,0x1708(%rdi)
  412f65:	01 
  412f66:	46 0f b7 6c 01 02    	movzwl 0x2(%rcx,%r8,1),%r13d
  412f6c:	44 8b 8f a4 14 00 00 	mov    0x14a4(%rdi),%r9d
  412f73:	4c 29 af 10 17 00 00 	sub    %r13,0x1710(%rdi)
    /* The pkzip format requires that at least one distance code exists,
     * and that at least one bit should be sent even if there is only one
     * possible code. So to avoid special checks later on we force at least
     * two codes of non zero frequency.
     */
    while (s->heap_len < 2) {
  412f7a:	41 83 f9 01          	cmp    $0x1,%r9d
  412f7e:	7f 24                	jg     412fa4 <build_tree+0x494>
        node = s->heap[++(s->heap_len)] = (max_code < 2 ? ++max_code : 0);
  412f80:	41 83 c1 01          	add    $0x1,%r9d
  412f84:	45 31 c0             	xor    %r8d,%r8d
  412f87:	31 c0                	xor    %eax,%eax
  412f89:	83 fd 01             	cmp    $0x1,%ebp
  412f8c:	44 89 8f a4 14 00 00 	mov    %r9d,0x14a4(%rdi)
  412f93:	7f ab                	jg     412f40 <build_tree+0x430>
  412f95:	83 c5 01             	add    $0x1,%ebp
  412f98:	4c 63 c5             	movslq %ebp,%r8
  412f9b:	48 63 c5             	movslq %ebp,%rax
  412f9e:	49 c1 e0 02          	shl    $0x2,%r8
  412fa2:	eb 9c                	jmp    412f40 <build_tree+0x430>
  412fa4:	89 6c 24 24          	mov    %ebp,0x24(%rsp)
  412fa8:	89 ee                	mov    %ebp,%esi
        tree[node].Freq = 1;
        s->depth[node] = 0;
        s->opt_len--; if (stree) s->static_len -= stree[node].Len;
        /* node is 0 or 1 so it does not have extra bits */
    }
    desc->max_code = max_code;
  412faa:	48 8b 5c 24 28       	mov    0x28(%rsp),%rbx

    /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
     * establish sub-heaps of increasing lengths:
     */
    for (n = s->heap_len/2; n >= 1; n--) pqdownheap(s, tree, n);
  412faf:	45 89 ce             	mov    %r9d,%r14d
  412fb2:	41 d1 fe             	sar    %r14d
        tree[node].Freq = 1;
        s->depth[node] = 0;
        s->opt_len--; if (stree) s->static_len -= stree[node].Len;
        /* node is 0 or 1 so it does not have extra bits */
    }
    desc->max_code = max_code;
  412fb5:	89 73 08             	mov    %esi,0x8(%rbx)
local void pqdownheap(s, tree, k)
    deflate_state *s;
    ct_data *tree;  /* the tree to restore */
    int k;               /* node to move down */
{
    int v = s->heap[k];
  412fb8:	49 63 d6             	movslq %r14d,%rdx
    int j = k << 1;  /* left son of k */
  412fbb:	43 8d 04 36          	lea    (%r14,%r14,1),%eax
local void pqdownheap(s, tree, k)
    deflate_state *s;
    ct_data *tree;  /* the tree to restore */
    int k;               /* node to move down */
{
    int v = s->heap[k];
  412fbf:	44 8b 9c 97 b0 0b 00 	mov    0xbb0(%rdi,%rdx,4),%r11d
  412fc6:	00 
    int j = k << 1;  /* left son of k */
    while (j <= s->heap_len) {
  412fc7:	44 39 c8             	cmp    %r9d,%eax
local void pqdownheap(s, tree, k)
    deflate_state *s;
    ct_data *tree;  /* the tree to restore */
    int k;               /* node to move down */
{
    int v = s->heap[k];
  412fca:	44 89 5c 24 08       	mov    %r11d,0x8(%rsp)
    int j = k << 1;  /* left son of k */
    while (j <= s->heap_len) {
  412fcf:	0f 8f e1 0e 00 00    	jg     413eb6 <build_tree+0x13a6>
  412fd5:	4d 63 eb             	movslq %r11d,%r13
  412fd8:	49 63 d6             	movslq %r14d,%rdx
  412fdb:	4b 8d 2c af          	lea    (%r15,%r13,4),%rbp
  412fdf:	eb 3e                	jmp    41301f <build_tree+0x50f>
  412fe1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  412fe8:	48 63 c8             	movslq %eax,%rcx
        /* Set j to the smallest of the two sons: */
        if (j < s->heap_len &&
  412feb:	89 c6                	mov    %eax,%esi
  412fed:	4c 63 84 8f b0 0b 00 	movslq 0xbb0(%rdi,%rcx,4),%r8
  412ff4:	00 
  412ff5:	4c 89 c1             	mov    %r8,%rcx
  412ff8:	47 0f b7 04 87       	movzwl (%r15,%r8,4),%r8d
            smaller(tree, s->heap[j+1], s->heap[j], s->depth)) {
            j++;
        }
        /* Exit if v is smaller than both sons */
        if (smaller(tree, v, s->heap[j], s->depth)) break;
  412ffd:	66 44 39 45 00       	cmp    %r8w,0x0(%rbp)
  413002:	72 60                	jb     413064 <build_tree+0x554>
  413004:	0f 84 de 02 00 00    	je     4132e8 <build_tree+0x7d8>

        /* Exchange v with the smallest son */
        s->heap[k] = s->heap[j];  k = j;

        /* And continue down the tree, setting j to the left son of k */
        j <<= 1;
  41300a:	8d 04 36             	lea    (%rsi,%rsi,1),%eax
        }
        /* Exit if v is smaller than both sons */
        if (smaller(tree, v, s->heap[j], s->depth)) break;

        /* Exchange v with the smallest son */
        s->heap[k] = s->heap[j];  k = j;
  41300d:	48 63 d2             	movslq %edx,%rdx
  413010:	89 8c 97 b0 0b 00 00 	mov    %ecx,0xbb0(%rdi,%rdx,4)
    ct_data *tree;  /* the tree to restore */
    int k;               /* node to move down */
{
    int v = s->heap[k];
    int j = k << 1;  /* left son of k */
    while (j <= s->heap_len) {
  413017:	48 63 d6             	movslq %esi,%rdx
  41301a:	44 39 c8             	cmp    %r9d,%eax
  41301d:	7f 45                	jg     413064 <build_tree+0x554>
        /* Set j to the smallest of the two sons: */
        if (j < s->heap_len &&
  41301f:	44 39 c8             	cmp    %r9d,%eax
  413022:	7d c4                	jge    412fe8 <build_tree+0x4d8>
  413024:	4c 63 e0             	movslq %eax,%r12
            smaller(tree, s->heap[j+1], s->heap[j], s->depth)) {
  413027:	8d 70 01             	lea    0x1(%rax),%esi
  41302a:	4e 8d 1c a7          	lea    (%rdi,%r12,4),%r11
  41302e:	49 63 9b b4 0b 00 00 	movslq 0xbb4(%r11),%rbx
  413035:	4d 63 a3 b0 0b 00 00 	movslq 0xbb0(%r11),%r12
  41303c:	45 0f b7 04 9f       	movzwl (%r15,%rbx,4),%r8d
  413041:	47 0f b7 1c a7       	movzwl (%r15,%r12,4),%r11d
  413046:	48 89 d9             	mov    %rbx,%rcx
{
    int v = s->heap[k];
    int j = k << 1;  /* left son of k */
    while (j <= s->heap_len) {
        /* Set j to the smallest of the two sons: */
        if (j < s->heap_len &&
  413049:	66 45 39 d8          	cmp    %r11w,%r8w
  41304d:	72 ae                	jb     412ffd <build_tree+0x4ed>
            smaller(tree, s->heap[j+1], s->heap[j], s->depth)) {
  41304f:	0f 84 56 03 00 00    	je     4133ab <build_tree+0x89b>
  413055:	45 89 d8             	mov    %r11d,%r8d
            j++;
        }
        /* Exit if v is smaller than both sons */
        if (smaller(tree, v, s->heap[j], s->depth)) break;
  413058:	66 44 39 45 00       	cmp    %r8w,0x0(%rbp)
    int v = s->heap[k];
    int j = k << 1;  /* left son of k */
    while (j <= s->heap_len) {
        /* Set j to the smallest of the two sons: */
        if (j < s->heap_len &&
            smaller(tree, s->heap[j+1], s->heap[j], s->depth)) {
  41305d:	44 89 e1             	mov    %r12d,%ecx
  413060:	89 c6                	mov    %eax,%esi
            j++;
        }
        /* Exit if v is smaller than both sons */
        if (smaller(tree, v, s->heap[j], s->depth)) break;
  413062:	73 a0                	jae    413004 <build_tree+0x4f4>
        s->heap[k] = s->heap[j];  k = j;

        /* And continue down the tree, setting j to the left son of k */
        j <<= 1;
    }
    s->heap[k] = v;
  413064:	44 8b 6c 24 08       	mov    0x8(%rsp),%r13d
    desc->max_code = max_code;

    /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
     * establish sub-heaps of increasing lengths:
     */
    for (n = s->heap_len/2; n >= 1; n--) pqdownheap(s, tree, n);
  413069:	41 83 ee 01          	sub    $0x1,%r14d
        s->heap[k] = s->heap[j];  k = j;

        /* And continue down the tree, setting j to the left son of k */
        j <<= 1;
    }
    s->heap[k] = v;
  41306d:	44 89 ac 97 b0 0b 00 	mov    %r13d,0xbb0(%rdi,%rdx,4)
  413074:	00 
    desc->max_code = max_code;

    /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
     * establish sub-heaps of increasing lengths:
     */
    for (n = s->heap_len/2; n >= 1; n--) pqdownheap(s, tree, n);
  413075:	0f 85 3d ff ff ff    	jne    412fb8 <build_tree+0x4a8>
  41307b:	4c 63 4c 24 14       	movslq 0x14(%rsp),%r9
  413080:	4c 63 97 a4 14 00 00 	movslq 0x14a4(%rdi),%r10
  413087:	4a 8d 2c 8d 00 00 00 	lea    0x0(,%r9,4),%rbp
  41308e:	00 
  41308f:	45 89 cd             	mov    %r9d,%r13d
  413092:	4c 89 4c 24 18       	mov    %r9,0x18(%rsp)
  413097:	48 89 6c 24 08       	mov    %rbp,0x8(%rsp)
  41309c:	0f 1f 40 00          	nopl   0x0(%rax)
    /* Construct the Huffman tree by repeatedly combining the least two
     * frequent nodes.
     */
    node = elems;              /* next internal node of the tree */
    do {
        pqremove(s, tree, n);  /* n = node of least frequency */
  4130a0:	45 8d 4a ff          	lea    -0x1(%r10),%r9d
  4130a4:	44 8b 9f b4 0b 00 00 	mov    0xbb4(%rdi),%r11d
  4130ab:	46 8b 94 97 b0 0b 00 	mov    0xbb0(%rdi,%r10,4),%r10d
  4130b2:	00 
    ct_data *tree;  /* the tree to restore */
    int k;               /* node to move down */
{
    int v = s->heap[k];
    int j = k << 1;  /* left son of k */
    while (j <= s->heap_len) {
  4130b3:	41 83 f9 01          	cmp    $0x1,%r9d
    /* Construct the Huffman tree by repeatedly combining the least two
     * frequent nodes.
     */
    node = elems;              /* next internal node of the tree */
    do {
        pqremove(s, tree, n);  /* n = node of least frequency */
  4130b7:	44 89 8f a4 14 00 00 	mov    %r9d,0x14a4(%rdi)
  4130be:	44 89 5c 24 14       	mov    %r11d,0x14(%rsp)
  4130c3:	44 89 54 24 20       	mov    %r10d,0x20(%rsp)
  4130c8:	44 89 97 b4 0b 00 00 	mov    %r10d,0xbb4(%rdi)
    ct_data *tree;  /* the tree to restore */
    int k;               /* node to move down */
{
    int v = s->heap[k];
    int j = k << 1;  /* left son of k */
    while (j <= s->heap_len) {
  4130cf:	0f 8e 49 0c 00 00    	jle    413d1e <build_tree+0x120e>
  4130d5:	4d 63 f2             	movslq %r10d,%r14
  4130d8:	ba 01 00 00 00       	mov    $0x1,%edx
  4130dd:	b8 02 00 00 00       	mov    $0x2,%eax
  4130e2:	4f 8d 24 b7          	lea    (%r15,%r14,4),%r12
  4130e6:	eb 3c                	jmp    413124 <build_tree+0x614>
  4130e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4130ef:	00 
  4130f0:	4c 63 c0             	movslq %eax,%r8
  4130f3:	4a 63 b4 87 b0 0b 00 	movslq 0xbb0(%rdi,%r8,4),%rsi
  4130fa:	00 
  4130fb:	48 89 f1             	mov    %rsi,%rcx
  4130fe:	45 0f b7 04 b7       	movzwl (%r15,%rsi,4),%r8d
        /* Set j to the smallest of the two sons: */
        if (j < s->heap_len &&
  413103:	89 c6                	mov    %eax,%esi
            smaller(tree, s->heap[j+1], s->heap[j], s->depth)) {
            j++;
        }
        /* Exit if v is smaller than both sons */
        if (smaller(tree, v, s->heap[j], s->depth)) break;
  413105:	66 45 39 04 24       	cmp    %r8w,(%r12)
  41310a:	72 64                	jb     413170 <build_tree+0x660>
  41310c:	0f 84 fe 01 00 00    	je     413310 <build_tree+0x800>

        /* Exchange v with the smallest son */
        s->heap[k] = s->heap[j];  k = j;

        /* And continue down the tree, setting j to the left son of k */
        j <<= 1;
  413112:	8d 04 36             	lea    (%rsi,%rsi,1),%eax
        }
        /* Exit if v is smaller than both sons */
        if (smaller(tree, v, s->heap[j], s->depth)) break;

        /* Exchange v with the smallest son */
        s->heap[k] = s->heap[j];  k = j;
  413115:	89 8c 97 b0 0b 00 00 	mov    %ecx,0xbb0(%rdi,%rdx,4)
    ct_data *tree;  /* the tree to restore */
    int k;               /* node to move down */
{
    int v = s->heap[k];
    int j = k << 1;  /* left son of k */
    while (j <= s->heap_len) {
  41311c:	48 63 d6             	movslq %esi,%rdx
  41311f:	41 39 c1             	cmp    %eax,%r9d
  413122:	7c 4c                	jl     413170 <build_tree+0x660>
        /* Set j to the smallest of the two sons: */
        if (j < s->heap_len &&
  413124:	41 39 c1             	cmp    %eax,%r9d
  413127:	7e c7                	jle    4130f0 <build_tree+0x5e0>
  413129:	48 63 c8             	movslq %eax,%rcx
            smaller(tree, s->heap[j+1], s->heap[j], s->depth)) {
  41312c:	8d 70 01             	lea    0x1(%rax),%esi
  41312f:	48 8d 2c 8f          	lea    (%rdi,%rcx,4),%rbp
  413133:	48 63 9d b4 0b 00 00 	movslq 0xbb4(%rbp),%rbx
  41313a:	48 63 ad b0 0b 00 00 	movslq 0xbb0(%rbp),%rbp
  413141:	45 0f b7 04 9f       	movzwl (%r15,%rbx,4),%r8d
  413146:	45 0f b7 1c af       	movzwl (%r15,%rbp,4),%r11d
  41314b:	48 89 d9             	mov    %rbx,%rcx
{
    int v = s->heap[k];
    int j = k << 1;  /* left son of k */
    while (j <= s->heap_len) {
        /* Set j to the smallest of the two sons: */
        if (j < s->heap_len &&
  41314e:	66 45 39 d8          	cmp    %r11w,%r8w
  413152:	72 b1                	jb     413105 <build_tree+0x5f5>
            smaller(tree, s->heap[j+1], s->heap[j], s->depth)) {
  413154:	0f 84 16 02 00 00    	je     413370 <build_tree+0x860>
  41315a:	45 89 d8             	mov    %r11d,%r8d
            j++;
        }
        /* Exit if v is smaller than both sons */
        if (smaller(tree, v, s->heap[j], s->depth)) break;
  41315d:	66 45 39 04 24       	cmp    %r8w,(%r12)
    int v = s->heap[k];
    int j = k << 1;  /* left son of k */
    while (j <= s->heap_len) {
        /* Set j to the smallest of the two sons: */
        if (j < s->heap_len &&
            smaller(tree, s->heap[j+1], s->heap[j], s->depth)) {
  413162:	89 e9                	mov    %ebp,%ecx
  413164:	89 c6                	mov    %eax,%esi
            j++;
        }
        /* Exit if v is smaller than both sons */
        if (smaller(tree, v, s->heap[j], s->depth)) break;
  413166:	73 a4                	jae    41310c <build_tree+0x5fc>
  413168:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41316f:	00 
        s->heap[k] = s->heap[j];  k = j;

        /* And continue down the tree, setting j to the left son of k */
        j <<= 1;
    }
    s->heap[k] = v;
  413170:	44 8b 4c 24 20       	mov    0x20(%rsp),%r9d
    node = elems;              /* next internal node of the tree */
    do {
        pqremove(s, tree, n);  /* n = node of least frequency */
        m = s->heap[SMALLEST]; /* m = node of next least frequency */

        s->heap[--(s->heap_max)] = n; /* keep the nodes sorted by frequency */
  413175:	4c 63 a7 a8 14 00 00 	movslq 0x14a8(%rdi),%r12
  41317c:	44 8b 5c 24 14       	mov    0x14(%rsp),%r11d
        s->heap[k] = s->heap[j];  k = j;

        /* And continue down the tree, setting j to the left son of k */
        j <<= 1;
    }
    s->heap[k] = v;
  413181:	44 89 8c 97 b0 0b 00 	mov    %r9d,0xbb0(%rdi,%rdx,4)
  413188:	00 
     * frequent nodes.
     */
    node = elems;              /* next internal node of the tree */
    do {
        pqremove(s, tree, n);  /* n = node of least frequency */
        m = s->heap[SMALLEST]; /* m = node of next least frequency */
  413189:	4c 63 b7 b4 0b 00 00 	movslq 0xbb4(%rdi),%r14

        s->heap[--(s->heap_max)] = n; /* keep the nodes sorted by frequency */
        s->heap[--(s->heap_max)] = m;

        /* Create a new node father of n and m */
        tree[node].Freq = tree[n].Freq + tree[m].Freq;
  413190:	49 63 eb             	movslq %r11d,%rbp
  413193:	4e 8d 14 a7          	lea    (%rdi,%r12,4),%r10
    node = elems;              /* next internal node of the tree */
    do {
        pqremove(s, tree, n);  /* n = node of least frequency */
        m = s->heap[SMALLEST]; /* m = node of next least frequency */

        s->heap[--(s->heap_max)] = n; /* keep the nodes sorted by frequency */
  413197:	4c 89 e2             	mov    %r12,%rdx
        s->heap[--(s->heap_max)] = m;

        /* Create a new node father of n and m */
        tree[node].Freq = tree[n].Freq + tree[m].Freq;
  41319a:	49 8d 34 af          	lea    (%r15,%rbp,4),%rsi
    do {
        pqremove(s, tree, n);  /* n = node of least frequency */
        m = s->heap[SMALLEST]; /* m = node of next least frequency */

        s->heap[--(s->heap_max)] = n; /* keep the nodes sorted by frequency */
        s->heap[--(s->heap_max)] = m;
  41319e:	83 ea 02             	sub    $0x2,%edx

        /* Create a new node father of n and m */
        tree[node].Freq = tree[n].Freq + tree[m].Freq;
  4131a1:	4c 8b 64 24 08       	mov    0x8(%rsp),%r12
    node = elems;              /* next internal node of the tree */
    do {
        pqremove(s, tree, n);  /* n = node of least frequency */
        m = s->heap[SMALLEST]; /* m = node of next least frequency */

        s->heap[--(s->heap_max)] = n; /* keep the nodes sorted by frequency */
  4131a6:	45 89 9a ac 0b 00 00 	mov    %r11d,0xbac(%r10)
        s->heap[--(s->heap_max)] = m;
  4131ad:	89 97 a8 14 00 00    	mov    %edx,0x14a8(%rdi)

        /* Create a new node father of n and m */
        tree[node].Freq = tree[n].Freq + tree[m].Freq;
  4131b3:	4f 8d 04 b7          	lea    (%r15,%r14,4),%r8
    do {
        pqremove(s, tree, n);  /* n = node of least frequency */
        m = s->heap[SMALLEST]; /* m = node of next least frequency */

        s->heap[--(s->heap_max)] = n; /* keep the nodes sorted by frequency */
        s->heap[--(s->heap_max)] = m;
  4131b7:	45 89 b2 a8 0b 00 00 	mov    %r14d,0xba8(%r10)

        /* Create a new node father of n and m */
        tree[node].Freq = tree[n].Freq + tree[m].Freq;
  4131be:	0f b7 0e             	movzwl (%rsi),%ecx
        s->depth[node] = (uch)((s->depth[n] >= s->depth[m] ?
  4131c1:	4c 8b 5c 24 18       	mov    0x18(%rsp),%r11

        s->heap[--(s->heap_max)] = n; /* keep the nodes sorted by frequency */
        s->heap[--(s->heap_max)] = m;

        /* Create a new node father of n and m */
        tree[node].Freq = tree[n].Freq + tree[m].Freq;
  4131c6:	66 41 03 08          	add    (%r8),%cx
  4131ca:	66 43 89 0c 27       	mov    %cx,(%r15,%r12,1)
        s->depth[node] = (uch)((s->depth[n] >= s->depth[m] ?
  4131cf:	44 0f b6 94 2f ac 14 	movzbl 0x14ac(%rdi,%rbp,1),%r10d
  4131d6:	00 00 
  4131d8:	46 0f b6 b4 37 ac 14 	movzbl 0x14ac(%rdi,%r14,1),%r14d
  4131df:	00 00 
  4131e1:	45 8d 4a 01          	lea    0x1(%r10),%r9d
  4131e5:	41 8d 46 01          	lea    0x1(%r14),%eax
  4131e9:	45 38 f2             	cmp    %r14b,%r10b
            fprintf(stderr,"\nnode %d(%d), sons %d(%d) %d(%d)",
                    node, tree[node].Freq, n, tree[n].Freq, m, tree[m].Freq);
        }
#endif
        /* and insert the new node in the heap */
        s->heap[SMALLEST] = node++;
  4131ec:	45 8d 75 01          	lea    0x1(%r13),%r14d
        s->heap[--(s->heap_max)] = n; /* keep the nodes sorted by frequency */
        s->heap[--(s->heap_max)] = m;

        /* Create a new node father of n and m */
        tree[node].Freq = tree[n].Freq + tree[m].Freq;
        s->depth[node] = (uch)((s->depth[n] >= s->depth[m] ?
  4131f0:	41 0f 43 c1          	cmovae %r9d,%eax
  4131f4:	42 88 84 1f ac 14 00 	mov    %al,0x14ac(%rdi,%r11,1)
  4131fb:	00 
                                s->depth[n] : s->depth[m]) + 1);
        tree[n].Dad = tree[m].Dad = (ush)node;
  4131fc:	66 45 89 68 02       	mov    %r13w,0x2(%r8)
  413201:	66 44 89 6e 02       	mov    %r13w,0x2(%rsi)
    ct_data *tree;  /* the tree to restore */
    int k;               /* node to move down */
{
    int v = s->heap[k];
    int j = k << 1;  /* left son of k */
    while (j <= s->heap_len) {
  413206:	4c 63 97 a4 14 00 00 	movslq 0x14a4(%rdi),%r10
            fprintf(stderr,"\nnode %d(%d), sons %d(%d) %d(%d)",
                    node, tree[node].Freq, n, tree[n].Freq, m, tree[m].Freq);
        }
#endif
        /* and insert the new node in the heap */
        s->heap[SMALLEST] = node++;
  41320d:	44 89 af b4 0b 00 00 	mov    %r13d,0xbb4(%rdi)
    ct_data *tree;  /* the tree to restore */
    int k;               /* node to move down */
{
    int v = s->heap[k];
    int j = k << 1;  /* left son of k */
    while (j <= s->heap_len) {
  413214:	41 83 fa 01          	cmp    $0x1,%r10d
  413218:	0f 8e a9 01 00 00    	jle    4133c7 <build_tree+0x8b7>
  41321e:	44 89 6c 24 14       	mov    %r13d,0x14(%rsp)
        if (j < s->heap_len &&
            smaller(tree, s->heap[j+1], s->heap[j], s->depth)) {
            j++;
        }
        /* Exit if v is smaller than both sons */
        if (smaller(tree, v, s->heap[j], s->depth)) break;
  413223:	47 0f b7 24 27       	movzwl (%r15,%r12,1),%r12d
  413228:	ba 01 00 00 00       	mov    $0x1,%edx
  41322d:	b8 02 00 00 00       	mov    $0x2,%eax
  413232:	4d 89 dd             	mov    %r11,%r13
  413235:	eb 40                	jmp    413277 <build_tree+0x767>
  413237:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41323e:	00 00 
  413240:	4c 63 c8             	movslq %eax,%r9
  413243:	4a 63 b4 8f b0 0b 00 	movslq 0xbb0(%rdi,%r9,4),%rsi
  41324a:	00 
  41324b:	48 89 f1             	mov    %rsi,%rcx
  41324e:	45 0f b7 04 b7       	movzwl (%r15,%rsi,4),%r8d
{
    int v = s->heap[k];
    int j = k << 1;  /* left son of k */
    while (j <= s->heap_len) {
        /* Set j to the smallest of the two sons: */
        if (j < s->heap_len &&
  413253:	89 c6                	mov    %eax,%esi
            smaller(tree, s->heap[j+1], s->heap[j], s->depth)) {
            j++;
        }
        /* Exit if v is smaller than both sons */
        if (smaller(tree, v, s->heap[j], s->depth)) break;
  413255:	66 45 39 c4          	cmp    %r8w,%r12w
  413259:	72 65                	jb     4132c0 <build_tree+0x7b0>
  41325b:	0f 84 cf 00 00 00    	je     413330 <build_tree+0x820>

        /* Exchange v with the smallest son */
        s->heap[k] = s->heap[j];  k = j;

        /* And continue down the tree, setting j to the left son of k */
        j <<= 1;
  413261:	8d 04 36             	lea    (%rsi,%rsi,1),%eax
        }
        /* Exit if v is smaller than both sons */
        if (smaller(tree, v, s->heap[j], s->depth)) break;

        /* Exchange v with the smallest son */
        s->heap[k] = s->heap[j];  k = j;
  413264:	89 8c 97 b0 0b 00 00 	mov    %ecx,0xbb0(%rdi,%rdx,4)
    ct_data *tree;  /* the tree to restore */
    int k;               /* node to move down */
{
    int v = s->heap[k];
    int j = k << 1;  /* left son of k */
    while (j <= s->heap_len) {
  41326b:	41 39 c2             	cmp    %eax,%r10d
  41326e:	0f 8c e8 00 00 00    	jl     41335c <build_tree+0x84c>
  413274:	48 63 d6             	movslq %esi,%rdx
        /* Set j to the smallest of the two sons: */
        if (j < s->heap_len &&
  413277:	41 39 c2             	cmp    %eax,%r10d
  41327a:	7e c4                	jle    413240 <build_tree+0x730>
  41327c:	48 63 c8             	movslq %eax,%rcx
            smaller(tree, s->heap[j+1], s->heap[j], s->depth)) {
  41327f:	8d 70 01             	lea    0x1(%rax),%esi
  413282:	4c 8d 1c 8f          	lea    (%rdi,%rcx,4),%r11
  413286:	49 63 ab b4 0b 00 00 	movslq 0xbb4(%r11),%rbp
  41328d:	49 63 9b b0 0b 00 00 	movslq 0xbb0(%r11),%rbx
  413294:	45 0f b7 04 af       	movzwl (%r15,%rbp,4),%r8d
  413299:	45 0f b7 1c 9f       	movzwl (%r15,%rbx,4),%r11d
  41329e:	48 89 e9             	mov    %rbp,%rcx
{
    int v = s->heap[k];
    int j = k << 1;  /* left son of k */
    while (j <= s->heap_len) {
        /* Set j to the smallest of the two sons: */
        if (j < s->heap_len &&
  4132a1:	66 45 39 d8          	cmp    %r11w,%r8w
  4132a5:	72 ae                	jb     413255 <build_tree+0x745>
            smaller(tree, s->heap[j+1], s->heap[j], s->depth)) {
  4132a7:	0f 84 e3 00 00 00    	je     413390 <build_tree+0x880>
  4132ad:	45 89 d8             	mov    %r11d,%r8d
  4132b0:	89 d9                	mov    %ebx,%ecx
  4132b2:	89 c6                	mov    %eax,%esi
            j++;
        }
        /* Exit if v is smaller than both sons */
        if (smaller(tree, v, s->heap[j], s->depth)) break;
  4132b4:	66 45 39 c4          	cmp    %r8w,%r12w
  4132b8:	73 a1                	jae    41325b <build_tree+0x74b>
  4132ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  4132c0:	44 8b 4c 24 14       	mov    0x14(%rsp),%r9d
            fprintf(stderr,"\nnode %d(%d), sons %d(%d) %d(%d)",
                    node, tree[node].Freq, n, tree[n].Freq, m, tree[m].Freq);
        }
#endif
        /* and insert the new node in the heap */
        s->heap[SMALLEST] = node++;
  4132c5:	4d 63 de             	movslq %r14d,%r11
        s->heap[k] = s->heap[j];  k = j;

        /* And continue down the tree, setting j to the left son of k */
        j <<= 1;
    }
    s->heap[k] = v;
  4132c8:	44 89 8c 97 b0 0b 00 	mov    %r9d,0xbb0(%rdi,%rdx,4)
  4132cf:	00 
  4132d0:	48 83 44 24 08 04    	addq   $0x4,0x8(%rsp)
            fprintf(stderr,"\nnode %d(%d), sons %d(%d) %d(%d)",
                    node, tree[node].Freq, n, tree[n].Freq, m, tree[m].Freq);
        }
#endif
        /* and insert the new node in the heap */
        s->heap[SMALLEST] = node++;
  4132d6:	4d 89 dd             	mov    %r11,%r13
  4132d9:	4c 89 5c 24 18       	mov    %r11,0x18(%rsp)
  4132de:	e9 bd fd ff ff       	jmpq   4130a0 <build_tree+0x590>
  4132e3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        if (j < s->heap_len &&
            smaller(tree, s->heap[j+1], s->heap[j], s->depth)) {
            j++;
        }
        /* Exit if v is smaller than both sons */
        if (smaller(tree, v, s->heap[j], s->depth)) break;
  4132e8:	48 63 c1             	movslq %ecx,%rax
  4132eb:	44 0f b6 a4 07 ac 14 	movzbl 0x14ac(%rdi,%rax,1),%r12d
  4132f2:	00 00 
  4132f4:	46 38 a4 2f ac 14 00 	cmp    %r12b,0x14ac(%rdi,%r13,1)
  4132fb:	00 
  4132fc:	0f 87 08 fd ff ff    	ja     41300a <build_tree+0x4fa>
  413302:	e9 5d fd ff ff       	jmpq   413064 <build_tree+0x554>
  413307:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41330e:	00 00 
  413310:	48 63 c1             	movslq %ecx,%rax
  413313:	0f b6 ac 07 ac 14 00 	movzbl 0x14ac(%rdi,%rax,1),%ebp
  41331a:	00 
  41331b:	42 38 ac 37 ac 14 00 	cmp    %bpl,0x14ac(%rdi,%r14,1)
  413322:	00 
  413323:	0f 87 e9 fd ff ff    	ja     413112 <build_tree+0x602>
  413329:	e9 42 fe ff ff       	jmpq   413170 <build_tree+0x660>
  41332e:	66 90                	xchg   %ax,%ax
  413330:	48 63 c1             	movslq %ecx,%rax
  413333:	0f b6 9c 07 ac 14 00 	movzbl 0x14ac(%rdi,%rax,1),%ebx
  41333a:	00 
  41333b:	42 38 9c 2f ac 14 00 	cmp    %bl,0x14ac(%rdi,%r13,1)
  413342:	00 
  413343:	0f 86 77 ff ff ff    	jbe    4132c0 <build_tree+0x7b0>

        /* Exchange v with the smallest son */
        s->heap[k] = s->heap[j];  k = j;

        /* And continue down the tree, setting j to the left son of k */
        j <<= 1;
  413349:	8d 04 36             	lea    (%rsi,%rsi,1),%eax
        }
        /* Exit if v is smaller than both sons */
        if (smaller(tree, v, s->heap[j], s->depth)) break;

        /* Exchange v with the smallest son */
        s->heap[k] = s->heap[j];  k = j;
  41334c:	89 8c 97 b0 0b 00 00 	mov    %ecx,0xbb0(%rdi,%rdx,4)
    ct_data *tree;  /* the tree to restore */
    int k;               /* node to move down */
{
    int v = s->heap[k];
    int j = k << 1;  /* left son of k */
    while (j <= s->heap_len) {
  413353:	41 39 c2             	cmp    %eax,%r10d
  413356:	0f 8d 18 ff ff ff    	jge    413274 <build_tree+0x764>
  41335c:	44 8b 4c 24 14       	mov    0x14(%rsp),%r9d
  413361:	48 63 d6             	movslq %esi,%rdx
  413364:	e9 5c ff ff ff       	jmpq   4132c5 <build_tree+0x7b5>
  413369:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        /* Set j to the smallest of the two sons: */
        if (j < s->heap_len &&
            smaller(tree, s->heap[j+1], s->heap[j], s->depth)) {
  413370:	0f b6 9c 1f ac 14 00 	movzbl 0x14ac(%rdi,%rbx,1),%ebx
  413377:	00 
  413378:	3a 9c 2f ac 14 00 00 	cmp    0x14ac(%rdi,%rbp,1),%bl
  41337f:	0f 47 cd             	cmova  %ebp,%ecx
  413382:	0f 47 f0             	cmova  %eax,%esi
  413385:	e9 7b fd ff ff       	jmpq   413105 <build_tree+0x5f5>
  41338a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  413390:	0f b6 ac 2f ac 14 00 	movzbl 0x14ac(%rdi,%rbp,1),%ebp
  413397:	00 
  413398:	40 3a ac 1f ac 14 00 	cmp    0x14ac(%rdi,%rbx,1),%bpl
  41339f:	00 
  4133a0:	0f 47 cb             	cmova  %ebx,%ecx
  4133a3:	0f 47 f0             	cmova  %eax,%esi
  4133a6:	e9 aa fe ff ff       	jmpq   413255 <build_tree+0x745>
  4133ab:	0f b6 9c 1f ac 14 00 	movzbl 0x14ac(%rdi,%rbx,1),%ebx
  4133b2:	00 
  4133b3:	42 3a 9c 27 ac 14 00 	cmp    0x14ac(%rdi,%r12,1),%bl
  4133ba:	00 
  4133bb:	41 0f 47 cc          	cmova  %r12d,%ecx
  4133bf:	0f 47 f0             	cmova  %eax,%esi
  4133c2:	e9 36 fc ff ff       	jmpq   412ffd <build_tree+0x4ed>
 */
local void gen_bitlen(s, desc)
    deflate_state *s;
    tree_desc *desc;    /* the tree descriptor */
{
    ct_data *tree        = desc->dyn_tree;
  4133c7:	48 8b 6c 24 28       	mov    0x28(%rsp),%rbp
        s->heap[SMALLEST] = node++;
        pqdownheap(s, tree, SMALLEST);

    } while (s->heap_len >= 2);

    s->heap[--(s->heap_max)] = s->heap[SMALLEST];
  4133cc:	8b 87 a8 14 00 00    	mov    0x14a8(%rdi),%eax
    for (bits = 0; bits <= MAX_BITS; bits++) s->bl_count[bits] = 0;

    /* In a first pass, compute the optimal bit lengths (which may
     * overflow in the case of the bit length tree).
     */
    tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */
  4133d2:	45 31 e4             	xor    %r12d,%r12d
  4133d5:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
    deflate_state *s;
    tree_desc *desc;    /* the tree descriptor */
{
    ct_data *tree        = desc->dyn_tree;
    int max_code         = desc->max_code;
    const ct_data *stree = desc->stat_desc->static_tree;
  4133da:	48 8b 75 10          	mov    0x10(%rbp),%rsi
 */
local void gen_bitlen(s, desc)
    deflate_state *s;
    tree_desc *desc;    /* the tree descriptor */
{
    ct_data *tree        = desc->dyn_tree;
  4133de:	48 8b 4d 00          	mov    0x0(%rbp),%rcx
        s->heap[SMALLEST] = node++;
        pqdownheap(s, tree, SMALLEST);

    } while (s->heap_len >= 2);

    s->heap[--(s->heap_max)] = s->heap[SMALLEST];
  4133e2:	83 e8 01             	sub    $0x1,%eax
  4133e5:	89 87 a8 14 00 00    	mov    %eax,0x14a8(%rdi)
  4133eb:	48 98                	cltq   
local void gen_bitlen(s, desc)
    deflate_state *s;
    tree_desc *desc;    /* the tree descriptor */
{
    ct_data *tree        = desc->dyn_tree;
    int max_code         = desc->max_code;
  4133ed:	8b 55 08             	mov    0x8(%rbp),%edx
        s->heap[SMALLEST] = node++;
        pqdownheap(s, tree, SMALLEST);

    } while (s->heap_len >= 2);

    s->heap[--(s->heap_max)] = s->heap[SMALLEST];
  4133f0:	44 89 ac 87 b0 0b 00 	mov    %r13d,0xbb0(%rdi,%rax,4)
  4133f7:	00 
    deflate_state *s;
    tree_desc *desc;    /* the tree descriptor */
{
    ct_data *tree        = desc->dyn_tree;
    int max_code         = desc->max_code;
    const ct_data *stree = desc->stat_desc->static_tree;
  4133f8:	4c 8b 1e             	mov    (%rsi),%r11
    const intf *extra    = desc->stat_desc->extra_bits;
  4133fb:	48 8b 5e 08          	mov    0x8(%rsi),%rbx
    int base             = desc->stat_desc->extra_base;
  4133ff:	44 8b 56 10          	mov    0x10(%rsi),%r10d
    int max_length       = desc->stat_desc->max_length;
  413403:	8b 46 18             	mov    0x18(%rsi),%eax
  413406:	48 c7 87 90 0b 00 00 	movq   $0x0,0xb90(%rdi)
  41340d:	00 00 00 00 
  413411:	48 c7 87 98 0b 00 00 	movq   $0x0,0xb98(%rdi)
  413418:	00 00 00 00 
  41341c:	48 c7 87 a0 0b 00 00 	movq   $0x0,0xba0(%rdi)
  413423:	00 00 00 00 
  413427:	48 c7 87 a8 0b 00 00 	movq   $0x0,0xba8(%rdi)
  41342e:	00 00 00 00 
    for (bits = 0; bits <= MAX_BITS; bits++) s->bl_count[bits] = 0;

    /* In a first pass, compute the optimal bit lengths (which may
     * overflow in the case of the bit length tree).
     */
    tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */
  413432:	66 46 89 64 01 02    	mov    %r12w,0x2(%rcx,%r8,1)

    for (h = s->heap_max+1; h < HEAP_SIZE; h++) {
  413438:	44 8b b7 a8 14 00 00 	mov    0x14a8(%rdi),%r14d
  41343f:	45 8d 4e 01          	lea    0x1(%r14),%r9d
  413443:	41 81 f9 3c 02 00 00 	cmp    $0x23c,%r9d
  41344a:	0f 8f 4d 06 00 00    	jg     413a9d <build_tree+0xf8d>
  413450:	31 ed                	xor    %ebp,%ebp
  413452:	4d 85 db             	test   %r11,%r11
  413455:	0f 84 52 04 00 00    	je     4138ad <build_tree+0xd9d>
        n = s->heap[h];
  41345b:	49 63 f1             	movslq %r9d,%rsi
  41345e:	45 89 cd             	mov    %r9d,%r13d
  413461:	4c 63 b4 b7 b0 0b 00 	movslq 0xbb0(%rdi,%rsi,4),%r14
  413468:	00 
  413469:	41 83 e5 01          	and    $0x1,%r13d
  41346d:	44 89 6c 24 08       	mov    %r13d,0x8(%rsp)
  413472:	4d 89 f0             	mov    %r14,%r8
        bits = tree[tree[n].Dad].Len + 1;
  413475:	49 c1 e6 02          	shl    $0x2,%r14
  413479:	4e 8d 2c 31          	lea    (%rcx,%r14,1),%r13
  41347d:	45 0f b7 65 02       	movzwl 0x2(%r13),%r12d
  413482:	42 0f b7 74 a1 02    	movzwl 0x2(%rcx,%r12,4),%esi
  413488:	83 c6 01             	add    $0x1,%esi
        if (bits > max_length) bits = max_length, overflow++;
  41348b:	39 f0                	cmp    %esi,%eax
  41348d:	7d 07                	jge    413496 <build_tree+0x986>
  41348f:	bd 01 00 00 00       	mov    $0x1,%ebp
  413494:	89 c6                	mov    %eax,%esi
        tree[n].Len = (ush)bits;
        /* We overwrite tree[n].Dad which is no longer needed */

        if (n > max_code) continue; /* not a leaf node */
  413496:	44 39 c2             	cmp    %r8d,%edx

    for (h = s->heap_max+1; h < HEAP_SIZE; h++) {
        n = s->heap[h];
        bits = tree[tree[n].Dad].Len + 1;
        if (bits > max_length) bits = max_length, overflow++;
        tree[n].Len = (ush)bits;
  413499:	66 41 89 75 02       	mov    %si,0x2(%r13)
        /* We overwrite tree[n].Dad which is no longer needed */

        if (n > max_code) continue; /* not a leaf node */
  41349e:	7c 46                	jl     4134e6 <build_tree+0x9d6>
  4134a0:	4c 63 e6             	movslq %esi,%r12

        s->bl_count[bits]++;
  4134a3:	66 42 83 84 67 90 0b 	addw   $0x1,0xb90(%rdi,%r12,2)
  4134aa:	00 00 01 
        xbits = 0;
  4134ad:	45 31 e4             	xor    %r12d,%r12d
        if (n >= base) xbits = extra[n-base];
  4134b0:	45 39 c2             	cmp    %r8d,%r10d
  4134b3:	0f 8e ee 09 00 00    	jle    413ea7 <build_tree+0x1397>
        f = tree[n].Freq;
        s->opt_len += (ulg)f * (bits + xbits);
  4134b9:	45 0f b7 6d 00       	movzwl 0x0(%r13),%r13d
  4134be:	44 01 e6             	add    %r12d,%esi
  4134c1:	48 63 f6             	movslq %esi,%rsi
  4134c4:	49 0f af f5          	imul   %r13,%rsi
  4134c8:	48 01 b7 08 17 00 00 	add    %rsi,0x1708(%rdi)
        if (stree) s->static_len += (ulg)f * (stree[n].Len + xbits);
  4134cf:	47 0f b7 74 33 02    	movzwl 0x2(%r11,%r14,1),%r14d
  4134d5:	45 01 e6             	add    %r12d,%r14d
  4134d8:	4d 63 c6             	movslq %r14d,%r8
  4134db:	4d 0f af c5          	imul   %r13,%r8
  4134df:	4c 01 87 10 17 00 00 	add    %r8,0x1710(%rdi)
    /* In a first pass, compute the optimal bit lengths (which may
     * overflow in the case of the bit length tree).
     */
    tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */

    for (h = s->heap_max+1; h < HEAP_SIZE; h++) {
  4134e6:	41 83 c1 01          	add    $0x1,%r9d
  4134ea:	41 81 f9 3d 02 00 00 	cmp    $0x23d,%r9d
  4134f1:	0f 84 c7 01 00 00    	je     4136be <build_tree+0xbae>
  4134f7:	44 8b 64 24 08       	mov    0x8(%rsp),%r12d
  4134fc:	45 85 e4             	test   %r12d,%r12d
  4134ff:	0f 84 9c 00 00 00    	je     4135a1 <build_tree+0xa91>
        n = s->heap[h];
  413505:	4d 63 e9             	movslq %r9d,%r13
  413508:	4e 63 a4 af b0 0b 00 	movslq 0xbb0(%rdi,%r13,4),%r12
  41350f:	00 
  413510:	4d 89 e0             	mov    %r12,%r8
        bits = tree[tree[n].Dad].Len + 1;
  413513:	49 c1 e4 02          	shl    $0x2,%r12
  413517:	4e 8d 34 21          	lea    (%rcx,%r12,1),%r14
  41351b:	41 0f b7 76 02       	movzwl 0x2(%r14),%esi
  413520:	0f b7 74 b1 02       	movzwl 0x2(%rcx,%rsi,4),%esi
  413525:	83 c6 01             	add    $0x1,%esi
        if (bits > max_length) bits = max_length, overflow++;
  413528:	39 f0                	cmp    %esi,%eax
  41352a:	7d 05                	jge    413531 <build_tree+0xa21>
  41352c:	83 c5 01             	add    $0x1,%ebp
  41352f:	89 c6                	mov    %eax,%esi
        tree[n].Len = (ush)bits;
        /* We overwrite tree[n].Dad which is no longer needed */

        if (n > max_code) continue; /* not a leaf node */
  413531:	44 39 c2             	cmp    %r8d,%edx

    for (h = s->heap_max+1; h < HEAP_SIZE; h++) {
        n = s->heap[h];
        bits = tree[tree[n].Dad].Len + 1;
        if (bits > max_length) bits = max_length, overflow++;
        tree[n].Len = (ush)bits;
  413534:	66 41 89 76 02       	mov    %si,0x2(%r14)
        /* We overwrite tree[n].Dad which is no longer needed */

        if (n > max_code) continue; /* not a leaf node */
  413539:	7c 55                	jl     413590 <build_tree+0xa80>
  41353b:	4c 63 ee             	movslq %esi,%r13

        s->bl_count[bits]++;
  41353e:	66 42 83 84 6f 90 0b 	addw   $0x1,0xb90(%rdi,%r13,2)
  413545:	00 00 01 
        xbits = 0;
  413548:	45 31 ed             	xor    %r13d,%r13d
        if (n >= base) xbits = extra[n-base];
  41354b:	45 39 c2             	cmp    %r8d,%r10d
  41354e:	7f 0a                	jg     41355a <build_tree+0xa4a>
  413550:	45 29 d0             	sub    %r10d,%r8d
  413553:	4d 63 c0             	movslq %r8d,%r8
  413556:	46 8b 2c 83          	mov    (%rbx,%r8,4),%r13d
        f = tree[n].Freq;
        s->opt_len += (ulg)f * (bits + xbits);
  41355a:	45 0f b7 36          	movzwl (%r14),%r14d
  41355e:	44 01 ee             	add    %r13d,%esi
  413561:	48 63 f6             	movslq %esi,%rsi
  413564:	49 0f af f6          	imul   %r14,%rsi
  413568:	48 01 b7 08 17 00 00 	add    %rsi,0x1708(%rdi)
        if (stree) s->static_len += (ulg)f * (stree[n].Len + xbits);
  41356f:	47 0f b7 64 23 02    	movzwl 0x2(%r11,%r12,1),%r12d
  413575:	45 01 ec             	add    %r13d,%r12d
  413578:	4d 63 c4             	movslq %r12d,%r8
  41357b:	4d 0f af c6          	imul   %r14,%r8
  41357f:	4c 01 87 10 17 00 00 	add    %r8,0x1710(%rdi)
  413586:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41358d:	00 00 00 
    /* In a first pass, compute the optimal bit lengths (which may
     * overflow in the case of the bit length tree).
     */
    tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */

    for (h = s->heap_max+1; h < HEAP_SIZE; h++) {
  413590:	41 83 c1 01          	add    $0x1,%r9d
  413594:	41 81 f9 3d 02 00 00 	cmp    $0x23d,%r9d
  41359b:	0f 84 1d 01 00 00    	je     4136be <build_tree+0xbae>
        n = s->heap[h];
  4135a1:	4d 63 e9             	movslq %r9d,%r13
  4135a4:	4e 63 84 af b0 0b 00 	movslq 0xbb0(%rdi,%r13,4),%r8
  4135ab:	00 
  4135ac:	4d 89 c4             	mov    %r8,%r12
        bits = tree[tree[n].Dad].Len + 1;
  4135af:	49 c1 e0 02          	shl    $0x2,%r8
  4135b3:	4e 8d 34 01          	lea    (%rcx,%r8,1),%r14
  4135b7:	41 0f b7 76 02       	movzwl 0x2(%r14),%esi
  4135bc:	0f b7 74 b1 02       	movzwl 0x2(%rcx,%rsi,4),%esi
  4135c1:	83 c6 01             	add    $0x1,%esi
        if (bits > max_length) bits = max_length, overflow++;
  4135c4:	39 f0                	cmp    %esi,%eax
  4135c6:	7d 05                	jge    4135cd <build_tree+0xabd>
  4135c8:	83 c5 01             	add    $0x1,%ebp
  4135cb:	89 c6                	mov    %eax,%esi
        tree[n].Len = (ush)bits;
        /* We overwrite tree[n].Dad which is no longer needed */

        if (n > max_code) continue; /* not a leaf node */
  4135cd:	44 39 e2             	cmp    %r12d,%edx

    for (h = s->heap_max+1; h < HEAP_SIZE; h++) {
        n = s->heap[h];
        bits = tree[tree[n].Dad].Len + 1;
        if (bits > max_length) bits = max_length, overflow++;
        tree[n].Len = (ush)bits;
  4135d0:	66 41 89 76 02       	mov    %si,0x2(%r14)
        /* We overwrite tree[n].Dad which is no longer needed */

        if (n > max_code) continue; /* not a leaf node */
  4135d5:	7c 4b                	jl     413622 <build_tree+0xb12>
  4135d7:	4c 63 ee             	movslq %esi,%r13

        s->bl_count[bits]++;
  4135da:	66 42 83 84 6f 90 0b 	addw   $0x1,0xb90(%rdi,%r13,2)
  4135e1:	00 00 01 
        xbits = 0;
  4135e4:	45 31 ed             	xor    %r13d,%r13d
        if (n >= base) xbits = extra[n-base];
  4135e7:	45 39 e2             	cmp    %r12d,%r10d
  4135ea:	7f 0a                	jg     4135f6 <build_tree+0xae6>
  4135ec:	45 29 d4             	sub    %r10d,%r12d
  4135ef:	4d 63 e4             	movslq %r12d,%r12
  4135f2:	46 8b 2c a3          	mov    (%rbx,%r12,4),%r13d
        f = tree[n].Freq;
        s->opt_len += (ulg)f * (bits + xbits);
  4135f6:	45 0f b7 36          	movzwl (%r14),%r14d
  4135fa:	44 01 ee             	add    %r13d,%esi
  4135fd:	48 63 f6             	movslq %esi,%rsi
  413600:	49 0f af f6          	imul   %r14,%rsi
  413604:	48 01 b7 08 17 00 00 	add    %rsi,0x1708(%rdi)
        if (stree) s->static_len += (ulg)f * (stree[n].Len + xbits);
  41360b:	47 0f b7 44 03 02    	movzwl 0x2(%r11,%r8,1),%r8d
  413611:	45 01 e8             	add    %r13d,%r8d
  413614:	4d 63 e0             	movslq %r8d,%r12
  413617:	4d 0f af e6          	imul   %r14,%r12
  41361b:	4c 01 a7 10 17 00 00 	add    %r12,0x1710(%rdi)
    /* In a first pass, compute the optimal bit lengths (which may
     * overflow in the case of the bit length tree).
     */
    tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */

    for (h = s->heap_max+1; h < HEAP_SIZE; h++) {
  413622:	41 83 c1 01          	add    $0x1,%r9d
        n = s->heap[h];
  413626:	4d 63 e9             	movslq %r9d,%r13
  413629:	4e 63 a4 af b0 0b 00 	movslq 0xbb0(%rdi,%r13,4),%r12
  413630:	00 
  413631:	4d 89 e0             	mov    %r12,%r8
        bits = tree[tree[n].Dad].Len + 1;
  413634:	49 c1 e4 02          	shl    $0x2,%r12
  413638:	4e 8d 2c 21          	lea    (%rcx,%r12,1),%r13
  41363c:	45 0f b7 75 02       	movzwl 0x2(%r13),%r14d
  413641:	42 0f b7 74 b1 02    	movzwl 0x2(%rcx,%r14,4),%esi
  413647:	83 c6 01             	add    $0x1,%esi
        if (bits > max_length) bits = max_length, overflow++;
  41364a:	39 f0                	cmp    %esi,%eax
  41364c:	7d 05                	jge    413653 <build_tree+0xb43>
  41364e:	83 c5 01             	add    $0x1,%ebp
  413651:	89 c6                	mov    %eax,%esi
        tree[n].Len = (ush)bits;
        /* We overwrite tree[n].Dad which is no longer needed */

        if (n > max_code) continue; /* not a leaf node */
  413653:	44 39 c2             	cmp    %r8d,%edx

    for (h = s->heap_max+1; h < HEAP_SIZE; h++) {
        n = s->heap[h];
        bits = tree[tree[n].Dad].Len + 1;
        if (bits > max_length) bits = max_length, overflow++;
        tree[n].Len = (ush)bits;
  413656:	66 41 89 75 02       	mov    %si,0x2(%r13)
        /* We overwrite tree[n].Dad which is no longer needed */

        if (n > max_code) continue; /* not a leaf node */
  41365b:	0f 8c 2f ff ff ff    	jl     413590 <build_tree+0xa80>
  413661:	4c 63 f6             	movslq %esi,%r14

        s->bl_count[bits]++;
  413664:	66 42 83 84 77 90 0b 	addw   $0x1,0xb90(%rdi,%r14,2)
  41366b:	00 00 01 
        xbits = 0;
  41366e:	45 31 f6             	xor    %r14d,%r14d
        if (n >= base) xbits = extra[n-base];
  413671:	45 39 c2             	cmp    %r8d,%r10d
  413674:	7f 0a                	jg     413680 <build_tree+0xb70>
  413676:	45 29 d0             	sub    %r10d,%r8d
  413679:	4d 63 c0             	movslq %r8d,%r8
  41367c:	46 8b 34 83          	mov    (%rbx,%r8,4),%r14d
        f = tree[n].Freq;
        s->opt_len += (ulg)f * (bits + xbits);
  413680:	45 0f b7 6d 00       	movzwl 0x0(%r13),%r13d
  413685:	44 01 f6             	add    %r14d,%esi
    /* In a first pass, compute the optimal bit lengths (which may
     * overflow in the case of the bit length tree).
     */
    tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */

    for (h = s->heap_max+1; h < HEAP_SIZE; h++) {
  413688:	41 83 c1 01          	add    $0x1,%r9d

        s->bl_count[bits]++;
        xbits = 0;
        if (n >= base) xbits = extra[n-base];
        f = tree[n].Freq;
        s->opt_len += (ulg)f * (bits + xbits);
  41368c:	48 63 f6             	movslq %esi,%rsi
  41368f:	49 0f af f5          	imul   %r13,%rsi
  413693:	48 01 b7 08 17 00 00 	add    %rsi,0x1708(%rdi)
        if (stree) s->static_len += (ulg)f * (stree[n].Len + xbits);
  41369a:	47 0f b7 64 23 02    	movzwl 0x2(%r11,%r12,1),%r12d
  4136a0:	45 01 f4             	add    %r14d,%r12d
  4136a3:	4d 63 c4             	movslq %r12d,%r8
  4136a6:	4d 0f af c5          	imul   %r13,%r8
  4136aa:	4c 01 87 10 17 00 00 	add    %r8,0x1710(%rdi)
    /* In a first pass, compute the optimal bit lengths (which may
     * overflow in the case of the bit length tree).
     */
    tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */

    for (h = s->heap_max+1; h < HEAP_SIZE; h++) {
  4136b1:	41 81 f9 3d 02 00 00 	cmp    $0x23d,%r9d
  4136b8:	0f 85 e3 fe ff ff    	jne    4135a1 <build_tree+0xa91>
        if (n >= base) xbits = extra[n-base];
        f = tree[n].Freq;
        s->opt_len += (ulg)f * (bits + xbits);
        if (stree) s->static_len += (ulg)f * (stree[n].Len + xbits);
    }
    if (overflow == 0) return;
  4136be:	85 ed                	test   %ebp,%ebp
  4136c0:	0f 84 d7 03 00 00    	je     413a9d <build_tree+0xf8d>
  4136c6:	4c 63 c8             	movslq %eax,%r9
  4136c9:	44 8d 58 ff          	lea    -0x1(%rax),%r11d
  4136cd:	4e 8d 04 4f          	lea    (%rdi,%r9,2),%r8
    /* This happens for example on obj2 and pic of the Calgary corpus */

    /* Find the first bit length which could increase: */
    do {
        bits = max_length-1;
        while (s->bl_count[bits] == 0) bits--;
  4136d1:	41 0f b7 b0 8e 0b 00 	movzwl 0xb8e(%r8),%esi
  4136d8:	00 
  4136d9:	4c 89 cb             	mov    %r9,%rbx
  4136dc:	66 85 f6             	test   %si,%si
  4136df:	0f 85 96 06 00 00    	jne    413d7b <build_tree+0x126b>
  4136e5:	41 0f b7 b0 8c 0b 00 	movzwl 0xb8c(%r8),%esi
  4136ec:	00 
  4136ed:	44 8d 50 fe          	lea    -0x2(%rax),%r10d
  4136f1:	66 85 f6             	test   %si,%si
  4136f4:	0f 85 01 01 00 00    	jne    4137fb <build_tree+0xceb>
  4136fa:	41 0f b7 b0 8a 0b 00 	movzwl 0xb8a(%r8),%esi
  413701:	00 
  413702:	44 8d 50 fd          	lea    -0x3(%rax),%r10d
  413706:	66 85 f6             	test   %si,%si
  413709:	0f 85 ec 00 00 00    	jne    4137fb <build_tree+0xceb>
  41370f:	41 0f b7 b0 88 0b 00 	movzwl 0xb88(%r8),%esi
  413716:	00 
  413717:	44 8d 50 fc          	lea    -0x4(%rax),%r10d
  41371b:	66 85 f6             	test   %si,%si
  41371e:	0f 85 d7 00 00 00    	jne    4137fb <build_tree+0xceb>
  413724:	41 0f b7 b0 86 0b 00 	movzwl 0xb86(%r8),%esi
  41372b:	00 
  41372c:	44 8d 50 fb          	lea    -0x5(%rax),%r10d
  413730:	66 85 f6             	test   %si,%si
  413733:	0f 85 c2 00 00 00    	jne    4137fb <build_tree+0xceb>
  413739:	41 0f b7 b0 84 0b 00 	movzwl 0xb84(%r8),%esi
  413740:	00 
  413741:	44 8d 50 fa          	lea    -0x6(%rax),%r10d
  413745:	66 85 f6             	test   %si,%si
  413748:	0f 85 ad 00 00 00    	jne    4137fb <build_tree+0xceb>
  41374e:	41 0f b7 b0 82 0b 00 	movzwl 0xb82(%r8),%esi
  413755:	00 
  413756:	44 8d 50 f9          	lea    -0x7(%rax),%r10d
  41375a:	66 85 f6             	test   %si,%si
  41375d:	0f 85 98 00 00 00    	jne    4137fb <build_tree+0xceb>
  413763:	41 0f b7 b0 80 0b 00 	movzwl 0xb80(%r8),%esi
  41376a:	00 
  41376b:	44 8d 50 f8          	lea    -0x8(%rax),%r10d
  41376f:	66 85 f6             	test   %si,%si
  413772:	0f 85 83 00 00 00    	jne    4137fb <build_tree+0xceb>
  413778:	41 0f b7 b0 7e 0b 00 	movzwl 0xb7e(%r8),%esi
  41377f:	00 
  413780:	44 8d 50 f7          	lea    -0x9(%rax),%r10d
  413784:	66 85 f6             	test   %si,%si
  413787:	75 72                	jne    4137fb <build_tree+0xceb>
  413789:	41 0f b7 b0 7c 0b 00 	movzwl 0xb7c(%r8),%esi
  413790:	00 
  413791:	44 8d 50 f6          	lea    -0xa(%rax),%r10d
  413795:	66 85 f6             	test   %si,%si
  413798:	75 61                	jne    4137fb <build_tree+0xceb>
  41379a:	41 0f b7 b0 7a 0b 00 	movzwl 0xb7a(%r8),%esi
  4137a1:	00 
  4137a2:	44 8d 50 f5          	lea    -0xb(%rax),%r10d
  4137a6:	66 85 f6             	test   %si,%si
  4137a9:	75 50                	jne    4137fb <build_tree+0xceb>
  4137ab:	41 0f b7 b0 78 0b 00 	movzwl 0xb78(%r8),%esi
  4137b2:	00 
  4137b3:	44 8d 50 f4          	lea    -0xc(%rax),%r10d
  4137b7:	66 85 f6             	test   %si,%si
  4137ba:	75 3f                	jne    4137fb <build_tree+0xceb>
  4137bc:	41 0f b7 b0 76 0b 00 	movzwl 0xb76(%r8),%esi
  4137c3:	00 
  4137c4:	44 8d 50 f3          	lea    -0xd(%rax),%r10d
  4137c8:	66 85 f6             	test   %si,%si
  4137cb:	75 2e                	jne    4137fb <build_tree+0xceb>
  4137cd:	41 0f b7 b0 74 0b 00 	movzwl 0xb74(%r8),%esi
  4137d4:	00 
  4137d5:	44 8d 50 f2          	lea    -0xe(%rax),%r10d
  4137d9:	66 85 f6             	test   %si,%si
  4137dc:	75 1d                	jne    4137fb <build_tree+0xceb>
  4137de:	41 0f b7 b0 72 0b 00 	movzwl 0xb72(%r8),%esi
  4137e5:	00 
  4137e6:	44 8d 50 f1          	lea    -0xf(%rax),%r10d
  4137ea:	66 85 f6             	test   %si,%si
  4137ed:	75 0c                	jne    4137fb <build_tree+0xceb>
  4137ef:	41 0f b7 b0 70 0b 00 	movzwl 0xb70(%r8),%esi
  4137f6:	00 
  4137f7:	44 8d 50 f0          	lea    -0x10(%rax),%r10d
  4137fb:	4d 63 f2             	movslq %r10d,%r14
        s->bl_count[bits]--;      /* move one leaf down the tree */
  4137fe:	83 ee 01             	sub    $0x1,%esi
        s->bl_count[bits+1] += 2; /* move one overflow item as its brother */
        s->bl_count[max_length]--;
        /* The brother of the overflow item also moves one step up,
         * but this does not affect bl_count[max_length]
         */
        overflow -= 2;
  413801:	83 ed 02             	sub    $0x2,%ebp
  413804:	4e 8d 2c 77          	lea    (%rdi,%r14,2),%r13
    /* Find the first bit length which could increase: */
    do {
        bits = max_length-1;
        while (s->bl_count[bits] == 0) bits--;
        s->bl_count[bits]--;      /* move one leaf down the tree */
        s->bl_count[bits+1] += 2; /* move one overflow item as its brother */
  413808:	66 41 83 85 92 0b 00 	addw   $0x2,0xb92(%r13)
  41380f:	00 02 

    /* Find the first bit length which could increase: */
    do {
        bits = max_length-1;
        while (s->bl_count[bits] == 0) bits--;
        s->bl_count[bits]--;      /* move one leaf down the tree */
  413811:	66 41 89 b5 90 0b 00 	mov    %si,0xb90(%r13)
  413818:	00 
        s->bl_count[bits+1] += 2; /* move one overflow item as its brother */
        s->bl_count[max_length]--;
  413819:	66 41 83 a8 90 0b 00 	subw   $0x1,0xb90(%r8)
  413820:	00 01 
        /* The brother of the overflow item also moves one step up,
         * but this does not affect bl_count[max_length]
         */
        overflow -= 2;
    } while (overflow > 0);
  413822:	85 ed                	test   %ebp,%ebp
  413824:	0f 8f a7 fe ff ff    	jg     4136d1 <build_tree+0xbc1>
    /* Now recompute all bit lengths, scanning in increasing frequency.
     * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
     * lengths instead of fixing only the wrong ones. This idea is taken
     * from 'ar' written by Haruhiko Okumura.)
     */
    for (bits = max_length; bits != 0; bits--) {
  41382a:	85 c0                	test   %eax,%eax
  41382c:	0f 84 6b 02 00 00    	je     413a9d <build_tree+0xf8d>
  413832:	31 ed                	xor    %ebp,%ebp
  413834:	41 b8 3d 02 00 00    	mov    $0x23d,%r8d
        n = s->bl_count[bits];
  41383a:	46 0f b7 8c 4f 90 0b 	movzwl 0xb90(%rdi,%r9,2),%r9d
  413841:	00 00 
        while (n != 0) {
  413843:	45 85 c9             	test   %r9d,%r9d
  413846:	74 4c                	je     413894 <build_tree+0xd84>
  413848:	49 89 da             	mov    %rbx,%r10
  41384b:	49 29 ea             	sub    %rbp,%r10
  41384e:	66 90                	xchg   %ax,%ax
            m = s->heap[--h];
  413850:	41 83 e8 01          	sub    $0x1,%r8d
  413854:	4d 63 e0             	movslq %r8d,%r12
  413857:	4a 63 b4 a7 b0 0b 00 	movslq 0xbb0(%rdi,%r12,4),%rsi
  41385e:	00 
            if (m > max_code) continue;
  41385f:	39 f2                	cmp    %esi,%edx
  413861:	7c ed                	jl     413850 <build_tree+0xd40>
            if ((unsigned) tree[m].Len != (unsigned) bits) {
  413863:	4c 8d 34 b1          	lea    (%rcx,%rsi,4),%r14
  413867:	45 0f b7 6e 02       	movzwl 0x2(%r14),%r13d
  41386c:	41 39 c5             	cmp    %eax,%r13d
  41386f:	4d 89 ec             	mov    %r13,%r12
  413872:	74 1a                	je     41388e <build_tree+0xd7e>
                Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
                s->opt_len += ((long)bits - (long)tree[m].Len)
                              *(long)tree[m].Freq;
  413874:	41 0f b7 36          	movzwl (%r14),%esi
        while (n != 0) {
            m = s->heap[--h];
            if (m > max_code) continue;
            if ((unsigned) tree[m].Len != (unsigned) bits) {
                Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
                s->opt_len += ((long)bits - (long)tree[m].Len)
  413878:	4d 89 d5             	mov    %r10,%r13
  41387b:	4d 29 e5             	sub    %r12,%r13
                              *(long)tree[m].Freq;
  41387e:	49 0f af f5          	imul   %r13,%rsi
        while (n != 0) {
            m = s->heap[--h];
            if (m > max_code) continue;
            if ((unsigned) tree[m].Len != (unsigned) bits) {
                Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
                s->opt_len += ((long)bits - (long)tree[m].Len)
  413882:	48 01 b7 08 17 00 00 	add    %rsi,0x1708(%rdi)
                              *(long)tree[m].Freq;
                tree[m].Len = (ush)bits;
  413889:	66 41 89 46 02       	mov    %ax,0x2(%r14)
     * lengths instead of fixing only the wrong ones. This idea is taken
     * from 'ar' written by Haruhiko Okumura.)
     */
    for (bits = max_length; bits != 0; bits--) {
        n = s->bl_count[bits];
        while (n != 0) {
  41388e:	41 83 e9 01          	sub    $0x1,%r9d
  413892:	75 bc                	jne    413850 <build_tree+0xd40>
  413894:	48 83 c5 01          	add    $0x1,%rbp
    /* Now recompute all bit lengths, scanning in increasing frequency.
     * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
     * lengths instead of fixing only the wrong ones. This idea is taken
     * from 'ar' written by Haruhiko Okumura.)
     */
    for (bits = max_length; bits != 0; bits--) {
  413898:	45 85 db             	test   %r11d,%r11d
  41389b:	44 89 d8             	mov    %r11d,%eax
  41389e:	0f 84 f9 01 00 00    	je     413a9d <build_tree+0xf8d>
  4138a4:	41 83 eb 01          	sub    $0x1,%r11d
  4138a8:	4c 63 c8             	movslq %eax,%r9
  4138ab:	eb 8d                	jmp    41383a <build_tree+0xd2a>
     * overflow in the case of the bit length tree).
     */
    tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */

    for (h = s->heap_max+1; h < HEAP_SIZE; h++) {
        n = s->heap[h];
  4138ad:	4d 63 d9             	movslq %r9d,%r11
  4138b0:	45 89 ce             	mov    %r9d,%r14d
  4138b3:	4e 63 ac 9f b0 0b 00 	movslq 0xbb0(%rdi,%r11,4),%r13
  4138ba:	00 
  4138bb:	41 83 e6 01          	and    $0x1,%r14d
        bits = tree[tree[n].Dad].Len + 1;
  4138bf:	4e 8d 24 a9          	lea    (%rcx,%r13,4),%r12
     * overflow in the case of the bit length tree).
     */
    tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */

    for (h = s->heap_max+1; h < HEAP_SIZE; h++) {
        n = s->heap[h];
  4138c3:	4c 89 ee             	mov    %r13,%rsi
        bits = tree[tree[n].Dad].Len + 1;
  4138c6:	45 0f b7 44 24 02    	movzwl 0x2(%r12),%r8d
  4138cc:	46 0f b7 5c 81 02    	movzwl 0x2(%rcx,%r8,4),%r11d
  4138d2:	41 83 c3 01          	add    $0x1,%r11d
        if (bits > max_length) bits = max_length, overflow++;
  4138d6:	41 39 c3             	cmp    %eax,%r11d
  4138d9:	7e 08                	jle    4138e3 <build_tree+0xdd3>
  4138db:	bd 01 00 00 00       	mov    $0x1,%ebp
  4138e0:	41 89 c3             	mov    %eax,%r11d
        tree[n].Len = (ush)bits;
        /* We overwrite tree[n].Dad which is no longer needed */

        if (n > max_code) continue; /* not a leaf node */
  4138e3:	39 d6                	cmp    %edx,%esi

    for (h = s->heap_max+1; h < HEAP_SIZE; h++) {
        n = s->heap[h];
        bits = tree[tree[n].Dad].Len + 1;
        if (bits > max_length) bits = max_length, overflow++;
        tree[n].Len = (ush)bits;
  4138e5:	66 45 89 5c 24 02    	mov    %r11w,0x2(%r12)
        /* We overwrite tree[n].Dad which is no longer needed */

        if (n > max_code) continue; /* not a leaf node */
  4138eb:	7f 36                	jg     413923 <build_tree+0xe13>
  4138ed:	4d 63 eb             	movslq %r11d,%r13

        s->bl_count[bits]++;
  4138f0:	66 42 83 84 6f 90 0b 	addw   $0x1,0xb90(%rdi,%r13,2)
  4138f7:	00 00 01 
        xbits = 0;
        if (n >= base) xbits = extra[n-base];
  4138fa:	44 39 d6             	cmp    %r10d,%esi
  4138fd:	0f 8c 25 04 00 00    	jl     413d28 <build_tree+0x1218>
  413903:	44 29 d6             	sub    %r10d,%esi
  413906:	4c 63 c6             	movslq %esi,%r8
  413909:	42 8b 34 83          	mov    (%rbx,%r8,4),%esi
        f = tree[n].Freq;
        s->opt_len += (ulg)f * (bits + xbits);
  41390d:	45 0f b7 24 24       	movzwl (%r12),%r12d
  413912:	44 01 de             	add    %r11d,%esi
  413915:	4c 63 de             	movslq %esi,%r11
  413918:	4d 0f af dc          	imul   %r12,%r11
  41391c:	4c 01 9f 08 17 00 00 	add    %r11,0x1708(%rdi)
    /* In a first pass, compute the optimal bit lengths (which may
     * overflow in the case of the bit length tree).
     */
    tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */

    for (h = s->heap_max+1; h < HEAP_SIZE; h++) {
  413923:	41 83 c1 01          	add    $0x1,%r9d
  413927:	41 81 f9 3d 02 00 00 	cmp    $0x23d,%r9d
  41392e:	0f 84 8a fd ff ff    	je     4136be <build_tree+0xbae>
  413934:	45 85 f6             	test   %r14d,%r14d
  413937:	74 7c                	je     4139b5 <build_tree+0xea5>
        n = s->heap[h];
  413939:	4d 63 f1             	movslq %r9d,%r14
  41393c:	4e 63 ac b7 b0 0b 00 	movslq 0xbb0(%rdi,%r14,4),%r13
  413943:	00 
        bits = tree[tree[n].Dad].Len + 1;
  413944:	4e 8d 1c a9          	lea    (%rcx,%r13,4),%r11
     * overflow in the case of the bit length tree).
     */
    tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */

    for (h = s->heap_max+1; h < HEAP_SIZE; h++) {
        n = s->heap[h];
  413948:	4d 89 e8             	mov    %r13,%r8
        bits = tree[tree[n].Dad].Len + 1;
  41394b:	41 0f b7 73 02       	movzwl 0x2(%r11),%esi
  413950:	44 0f b7 74 b1 02    	movzwl 0x2(%rcx,%rsi,4),%r14d
  413956:	41 83 c6 01          	add    $0x1,%r14d
        if (bits > max_length) bits = max_length, overflow++;
  41395a:	41 39 c6             	cmp    %eax,%r14d
  41395d:	7e 06                	jle    413965 <build_tree+0xe55>
  41395f:	83 c5 01             	add    $0x1,%ebp
  413962:	41 89 c6             	mov    %eax,%r14d
        tree[n].Len = (ush)bits;
        /* We overwrite tree[n].Dad which is no longer needed */

        if (n > max_code) continue; /* not a leaf node */
  413965:	41 39 d0             	cmp    %edx,%r8d

    for (h = s->heap_max+1; h < HEAP_SIZE; h++) {
        n = s->heap[h];
        bits = tree[tree[n].Dad].Len + 1;
        if (bits > max_length) bits = max_length, overflow++;
        tree[n].Len = (ush)bits;
  413968:	66 45 89 73 02       	mov    %r14w,0x2(%r11)
        /* We overwrite tree[n].Dad which is no longer needed */

        if (n > max_code) continue; /* not a leaf node */
  41396d:	7f 35                	jg     4139a4 <build_tree+0xe94>
  41396f:	4d 63 e6             	movslq %r14d,%r12

        s->bl_count[bits]++;
  413972:	66 42 83 84 67 90 0b 	addw   $0x1,0xb90(%rdi,%r12,2)
  413979:	00 00 01 
        xbits = 0;
        if (n >= base) xbits = extra[n-base];
  41397c:	45 39 d0             	cmp    %r10d,%r8d
  41397f:	0f 8c aa 03 00 00    	jl     413d2f <build_tree+0x121f>
  413985:	45 29 d0             	sub    %r10d,%r8d
  413988:	4d 63 c0             	movslq %r8d,%r8
  41398b:	46 8b 2c 83          	mov    (%rbx,%r8,4),%r13d
        f = tree[n].Freq;
        s->opt_len += (ulg)f * (bits + xbits);
  41398f:	45 0f b7 1b          	movzwl (%r11),%r11d
  413993:	45 01 ee             	add    %r13d,%r14d
  413996:	49 63 f6             	movslq %r14d,%rsi
  413999:	49 0f af f3          	imul   %r11,%rsi
  41399d:	48 01 b7 08 17 00 00 	add    %rsi,0x1708(%rdi)
    /* In a first pass, compute the optimal bit lengths (which may
     * overflow in the case of the bit length tree).
     */
    tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */

    for (h = s->heap_max+1; h < HEAP_SIZE; h++) {
  4139a4:	41 83 c1 01          	add    $0x1,%r9d
  4139a8:	41 81 f9 3d 02 00 00 	cmp    $0x23d,%r9d
  4139af:	0f 84 09 fd ff ff    	je     4136be <build_tree+0xbae>
        n = s->heap[h];
  4139b5:	4d 63 f1             	movslq %r9d,%r14
  4139b8:	4e 63 a4 b7 b0 0b 00 	movslq 0xbb0(%rdi,%r14,4),%r12
  4139bf:	00 
        bits = tree[tree[n].Dad].Len + 1;
  4139c0:	4e 8d 1c a1          	lea    (%rcx,%r12,4),%r11
     * overflow in the case of the bit length tree).
     */
    tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */

    for (h = s->heap_max+1; h < HEAP_SIZE; h++) {
        n = s->heap[h];
  4139c4:	4d 89 e5             	mov    %r12,%r13
        bits = tree[tree[n].Dad].Len + 1;
  4139c7:	45 0f b7 43 02       	movzwl 0x2(%r11),%r8d
  4139cc:	42 0f b7 74 81 02    	movzwl 0x2(%rcx,%r8,4),%esi
  4139d2:	83 c6 01             	add    $0x1,%esi
        if (bits > max_length) bits = max_length, overflow++;
  4139d5:	39 c6                	cmp    %eax,%esi
  4139d7:	7e 05                	jle    4139de <build_tree+0xece>
  4139d9:	83 c5 01             	add    $0x1,%ebp
  4139dc:	89 c6                	mov    %eax,%esi
        tree[n].Len = (ush)bits;
        /* We overwrite tree[n].Dad which is no longer needed */

        if (n > max_code) continue; /* not a leaf node */
  4139de:	41 39 d5             	cmp    %edx,%r13d

    for (h = s->heap_max+1; h < HEAP_SIZE; h++) {
        n = s->heap[h];
        bits = tree[tree[n].Dad].Len + 1;
        if (bits > max_length) bits = max_length, overflow++;
        tree[n].Len = (ush)bits;
  4139e1:	66 41 89 73 02       	mov    %si,0x2(%r11)
        /* We overwrite tree[n].Dad which is no longer needed */

        if (n > max_code) continue; /* not a leaf node */
  4139e6:	7f 2e                	jg     413a16 <build_tree+0xf06>
  4139e8:	4c 63 f6             	movslq %esi,%r14

        s->bl_count[bits]++;
  4139eb:	66 42 83 84 77 90 0b 	addw   $0x1,0xb90(%rdi,%r14,2)
  4139f2:	00 00 01 
        xbits = 0;
        if (n >= base) xbits = extra[n-base];
  4139f5:	45 39 d5             	cmp    %r10d,%r13d
  4139f8:	0f 8d 39 03 00 00    	jge    413d37 <build_tree+0x1227>
        /* We overwrite tree[n].Dad which is no longer needed */

        if (n > max_code) continue; /* not a leaf node */

        s->bl_count[bits]++;
        xbits = 0;
  4139fe:	45 31 ed             	xor    %r13d,%r13d
        if (n >= base) xbits = extra[n-base];
        f = tree[n].Freq;
        s->opt_len += (ulg)f * (bits + xbits);
  413a01:	45 0f b7 1b          	movzwl (%r11),%r11d
  413a05:	44 01 ee             	add    %r13d,%esi
  413a08:	48 63 f6             	movslq %esi,%rsi
  413a0b:	49 0f af f3          	imul   %r11,%rsi
  413a0f:	48 01 b7 08 17 00 00 	add    %rsi,0x1708(%rdi)
    /* In a first pass, compute the optimal bit lengths (which may
     * overflow in the case of the bit length tree).
     */
    tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */

    for (h = s->heap_max+1; h < HEAP_SIZE; h++) {
  413a16:	45 8d 41 01          	lea    0x1(%r9),%r8d
        n = s->heap[h];
  413a1a:	4d 63 c8             	movslq %r8d,%r9
  413a1d:	4e 63 b4 8f b0 0b 00 	movslq 0xbb0(%rdi,%r9,4),%r14
  413a24:	00 
        bits = tree[tree[n].Dad].Len + 1;
  413a25:	4e 8d 0c b1          	lea    (%rcx,%r14,4),%r9
     * overflow in the case of the bit length tree).
     */
    tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */

    for (h = s->heap_max+1; h < HEAP_SIZE; h++) {
        n = s->heap[h];
  413a29:	4d 89 f5             	mov    %r14,%r13
        bits = tree[tree[n].Dad].Len + 1;
  413a2c:	45 0f b7 61 02       	movzwl 0x2(%r9),%r12d
  413a31:	46 0f b7 5c a1 02    	movzwl 0x2(%rcx,%r12,4),%r11d
  413a37:	41 83 c3 01          	add    $0x1,%r11d
        if (bits > max_length) bits = max_length, overflow++;
  413a3b:	41 39 c3             	cmp    %eax,%r11d
  413a3e:	7e 06                	jle    413a46 <build_tree+0xf36>
  413a40:	83 c5 01             	add    $0x1,%ebp
  413a43:	41 89 c3             	mov    %eax,%r11d
        tree[n].Len = (ush)bits;
        /* We overwrite tree[n].Dad which is no longer needed */

        if (n > max_code) continue; /* not a leaf node */
  413a46:	41 39 d5             	cmp    %edx,%r13d

    for (h = s->heap_max+1; h < HEAP_SIZE; h++) {
        n = s->heap[h];
        bits = tree[tree[n].Dad].Len + 1;
        if (bits > max_length) bits = max_length, overflow++;
        tree[n].Len = (ush)bits;
  413a49:	66 45 89 59 02       	mov    %r11w,0x2(%r9)
        /* We overwrite tree[n].Dad which is no longer needed */

        if (n > max_code) continue; /* not a leaf node */
  413a4e:	7f 34                	jg     413a84 <build_tree+0xf74>
  413a50:	49 63 f3             	movslq %r11d,%rsi

        s->bl_count[bits]++;
  413a53:	66 83 84 77 90 0b 00 	addw   $0x1,0xb90(%rdi,%rsi,2)
  413a5a:	00 01 
        xbits = 0;
        if (n >= base) xbits = extra[n-base];
  413a5c:	45 39 d5             	cmp    %r10d,%r13d
  413a5f:	0f 8c e1 02 00 00    	jl     413d46 <build_tree+0x1236>
  413a65:	45 29 d5             	sub    %r10d,%r13d
  413a68:	4d 63 ed             	movslq %r13d,%r13
  413a6b:	46 8b 34 ab          	mov    (%rbx,%r13,4),%r14d
        f = tree[n].Freq;
        s->opt_len += (ulg)f * (bits + xbits);
  413a6f:	45 0f b7 09          	movzwl (%r9),%r9d
  413a73:	45 01 de             	add    %r11d,%r14d
  413a76:	4d 63 e6             	movslq %r14d,%r12
  413a79:	4d 0f af e1          	imul   %r9,%r12
  413a7d:	4c 01 a7 08 17 00 00 	add    %r12,0x1708(%rdi)
    /* In a first pass, compute the optimal bit lengths (which may
     * overflow in the case of the bit length tree).
     */
    tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */

    for (h = s->heap_max+1; h < HEAP_SIZE; h++) {
  413a84:	45 8d 48 01          	lea    0x1(%r8),%r9d
  413a88:	41 81 f9 3d 02 00 00 	cmp    $0x23d,%r9d
  413a8f:	0f 85 20 ff ff ff    	jne    4139b5 <build_tree+0xea5>
        if (n >= base) xbits = extra[n-base];
        f = tree[n].Freq;
        s->opt_len += (ulg)f * (bits + xbits);
        if (stree) s->static_len += (ulg)f * (stree[n].Len + xbits);
    }
    if (overflow == 0) return;
  413a95:	85 ed                	test   %ebp,%ebp
  413a97:	0f 85 29 fc ff ff    	jne    4136c6 <build_tree+0xbb6>

    /* The distribution counts are first used to generate the code values
     * without bit reversal.
     */
    for (bits = 1; bits <= MAX_BITS; bits++) {
        next_code[bits] = code = (code + bl_count[bits-1]) << 1;
  413a9d:	0f b7 8f 90 0b 00 00 	movzwl 0xb90(%rdi),%ecx
  413aa4:	01 c9                	add    %ecx,%ecx
  413aa6:	66 89 4c 24 32       	mov    %cx,0x32(%rsp)
  413aab:	66 03 8f 92 0b 00 00 	add    0xb92(%rdi),%cx
  413ab2:	01 c9                	add    %ecx,%ecx
  413ab4:	66 89 4c 24 34       	mov    %cx,0x34(%rsp)
  413ab9:	66 03 8f 94 0b 00 00 	add    0xb94(%rdi),%cx
  413ac0:	01 c9                	add    %ecx,%ecx
  413ac2:	66 89 4c 24 36       	mov    %cx,0x36(%rsp)
  413ac7:	66 03 8f 96 0b 00 00 	add    0xb96(%rdi),%cx
  413ace:	01 c9                	add    %ecx,%ecx
  413ad0:	66 89 4c 24 38       	mov    %cx,0x38(%rsp)
  413ad5:	66 03 8f 98 0b 00 00 	add    0xb98(%rdi),%cx
  413adc:	01 c9                	add    %ecx,%ecx
  413ade:	66 89 4c 24 3a       	mov    %cx,0x3a(%rsp)
  413ae3:	66 03 8f 9a 0b 00 00 	add    0xb9a(%rdi),%cx
  413aea:	01 c9                	add    %ecx,%ecx
  413aec:	66 89 4c 24 3c       	mov    %cx,0x3c(%rsp)
  413af1:	66 03 8f 9c 0b 00 00 	add    0xb9c(%rdi),%cx
  413af8:	01 c9                	add    %ecx,%ecx
  413afa:	66 89 4c 24 3e       	mov    %cx,0x3e(%rsp)
  413aff:	66 03 8f 9e 0b 00 00 	add    0xb9e(%rdi),%cx
  413b06:	01 c9                	add    %ecx,%ecx
  413b08:	66 89 4c 24 40       	mov    %cx,0x40(%rsp)
  413b0d:	66 03 8f a0 0b 00 00 	add    0xba0(%rdi),%cx
  413b14:	01 c9                	add    %ecx,%ecx
  413b16:	66 89 4c 24 42       	mov    %cx,0x42(%rsp)
  413b1b:	66 03 8f a2 0b 00 00 	add    0xba2(%rdi),%cx
  413b22:	01 c9                	add    %ecx,%ecx
  413b24:	66 89 4c 24 44       	mov    %cx,0x44(%rsp)
  413b29:	66 03 8f a4 0b 00 00 	add    0xba4(%rdi),%cx
  413b30:	01 c9                	add    %ecx,%ecx
  413b32:	66 89 4c 24 46       	mov    %cx,0x46(%rsp)
  413b37:	66 03 8f a6 0b 00 00 	add    0xba6(%rdi),%cx
  413b3e:	01 c9                	add    %ecx,%ecx
  413b40:	66 89 4c 24 48       	mov    %cx,0x48(%rsp)
  413b45:	66 03 8f a8 0b 00 00 	add    0xba8(%rdi),%cx
  413b4c:	01 c9                	add    %ecx,%ecx
  413b4e:	66 89 4c 24 4a       	mov    %cx,0x4a(%rsp)
  413b53:	66 03 8f aa 0b 00 00 	add    0xbaa(%rdi),%cx
  413b5a:	01 c9                	add    %ecx,%ecx
  413b5c:	66 89 4c 24 4c       	mov    %cx,0x4c(%rsp)
  413b61:	66 03 8f ac 0b 00 00 	add    0xbac(%rdi),%cx
  413b68:	01 c9                	add    %ecx,%ecx
     */
    Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
            "inconsistent bit counts");
    Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

    for (n = 0;  n <= max_code; n++) {
  413b6a:	83 7c 24 24 ff       	cmpl   $0xffffffff,0x24(%rsp)

    /* The distribution counts are first used to generate the code values
     * without bit reversal.
     */
    for (bits = 1; bits <= MAX_BITS; bits++) {
        next_code[bits] = code = (code + bl_count[bits-1]) << 1;
  413b6f:	66 89 4c 24 4e       	mov    %cx,0x4e(%rsp)
     */
    Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
            "inconsistent bit counts");
    Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

    for (n = 0;  n <= max_code; n++) {
  413b74:	0f 84 81 01 00 00    	je     413cfb <build_tree+0x11eb>
  413b7a:	48 63 7c 24 24       	movslq 0x24(%rsp),%rdi
  413b7f:	49 8d 77 02          	lea    0x2(%r15),%rsi
  413b83:	4d 8d 44 bf 06       	lea    0x6(%r15,%rdi,4),%r8
        int len = tree[n].Len;
  413b88:	44 0f b7 3e          	movzwl (%rsi),%r15d
        if (len == 0) continue;
  413b8c:	45 85 ff             	test   %r15d,%r15d
  413b8f:	0f 84 59 01 00 00    	je     413cee <build_tree+0x11de>
        /* Now reverse the bits */
        tree[n].Code = bi_reverse(next_code[len]++, len);
  413b95:	49 63 c7             	movslq %r15d,%rax
  413b98:	45 8d 57 ff          	lea    -0x1(%r15),%r10d
  413b9c:	44 0f b7 5c 44 30    	movzwl 0x30(%rsp,%rax,2),%r11d
  413ba2:	44 89 d3             	mov    %r10d,%ebx
  413ba5:	83 e3 07             	and    $0x7,%ebx
  413ba8:	41 8d 53 01          	lea    0x1(%r11),%edx
    int len;       /* its bit length */
{
    register unsigned res = 0;
    do {
        res |= code & 1;
        code >>= 1, res <<= 1;
  413bac:	44 89 dd             	mov    %r11d,%ebp
  413baf:	d1 ed                	shr    %ebp

    for (n = 0;  n <= max_code; n++) {
        int len = tree[n].Len;
        if (len == 0) continue;
        /* Now reverse the bits */
        tree[n].Code = bi_reverse(next_code[len]++, len);
  413bb1:	66 89 54 44 30       	mov    %dx,0x30(%rsp,%rax,2)
    unsigned code; /* the value to invert */
    int len;       /* its bit length */
{
    register unsigned res = 0;
    do {
        res |= code & 1;
  413bb6:	44 89 d8             	mov    %r11d,%eax
  413bb9:	83 e0 01             	and    $0x1,%eax
        code >>= 1, res <<= 1;
  413bbc:	01 c0                	add    %eax,%eax
    } while (--len > 0);
  413bbe:	45 85 d2             	test   %r10d,%r10d
  413bc1:	0f 84 21 01 00 00    	je     413ce8 <build_tree+0x11d8>
  413bc7:	85 db                	test   %ebx,%ebx
  413bc9:	0f 84 9b 00 00 00    	je     413c6a <build_tree+0x115a>
  413bcf:	83 fb 01             	cmp    $0x1,%ebx
  413bd2:	0f 84 81 00 00 00    	je     413c59 <build_tree+0x1149>
  413bd8:	83 fb 02             	cmp    $0x2,%ebx
  413bdb:	74 6d                	je     413c4a <build_tree+0x113a>
  413bdd:	83 fb 03             	cmp    $0x3,%ebx
  413be0:	74 56                	je     413c38 <build_tree+0x1128>
  413be2:	83 fb 04             	cmp    $0x4,%ebx
  413be5:	74 3f                	je     413c26 <build_tree+0x1116>
  413be7:	83 fb 05             	cmp    $0x5,%ebx
  413bea:	74 28                	je     413c14 <build_tree+0x1104>
  413bec:	83 fb 06             	cmp    $0x6,%ebx
  413bef:	74 11                	je     413c02 <build_tree+0x10f2>
    unsigned code; /* the value to invert */
    int len;       /* its bit length */
{
    register unsigned res = 0;
    do {
        res |= code & 1;
  413bf1:	83 e5 01             	and    $0x1,%ebp
        code >>= 1, res <<= 1;
    } while (--len > 0);
  413bf4:	45 8d 57 fe          	lea    -0x2(%r15),%r10d
    unsigned code; /* the value to invert */
    int len;       /* its bit length */
{
    register unsigned res = 0;
    do {
        res |= code & 1;
  413bf8:	09 e8                	or     %ebp,%eax
        code >>= 1, res <<= 1;
  413bfa:	44 89 dd             	mov    %r11d,%ebp
  413bfd:	c1 ed 02             	shr    $0x2,%ebp
  413c00:	01 c0                	add    %eax,%eax
    unsigned code; /* the value to invert */
    int len;       /* its bit length */
{
    register unsigned res = 0;
    do {
        res |= code & 1;
  413c02:	41 89 ee             	mov    %ebp,%r14d
        code >>= 1, res <<= 1;
    } while (--len > 0);
  413c05:	41 83 ea 01          	sub    $0x1,%r10d
    int len;       /* its bit length */
{
    register unsigned res = 0;
    do {
        res |= code & 1;
        code >>= 1, res <<= 1;
  413c09:	d1 ed                	shr    %ebp
    unsigned code; /* the value to invert */
    int len;       /* its bit length */
{
    register unsigned res = 0;
    do {
        res |= code & 1;
  413c0b:	41 83 e6 01          	and    $0x1,%r14d
  413c0f:	44 09 f0             	or     %r14d,%eax
        code >>= 1, res <<= 1;
  413c12:	01 c0                	add    %eax,%eax
    unsigned code; /* the value to invert */
    int len;       /* its bit length */
{
    register unsigned res = 0;
    do {
        res |= code & 1;
  413c14:	41 89 ec             	mov    %ebp,%r12d
        code >>= 1, res <<= 1;
    } while (--len > 0);
  413c17:	41 83 ea 01          	sub    $0x1,%r10d
    int len;       /* its bit length */
{
    register unsigned res = 0;
    do {
        res |= code & 1;
        code >>= 1, res <<= 1;
  413c1b:	d1 ed                	shr    %ebp
    unsigned code; /* the value to invert */
    int len;       /* its bit length */
{
    register unsigned res = 0;
    do {
        res |= code & 1;
  413c1d:	41 83 e4 01          	and    $0x1,%r12d
  413c21:	44 09 e0             	or     %r12d,%eax
        code >>= 1, res <<= 1;
  413c24:	01 c0                	add    %eax,%eax
    unsigned code; /* the value to invert */
    int len;       /* its bit length */
{
    register unsigned res = 0;
    do {
        res |= code & 1;
  413c26:	41 89 ed             	mov    %ebp,%r13d
        code >>= 1, res <<= 1;
    } while (--len > 0);
  413c29:	41 83 ea 01          	sub    $0x1,%r10d
    int len;       /* its bit length */
{
    register unsigned res = 0;
    do {
        res |= code & 1;
        code >>= 1, res <<= 1;
  413c2d:	d1 ed                	shr    %ebp
    unsigned code; /* the value to invert */
    int len;       /* its bit length */
{
    register unsigned res = 0;
    do {
        res |= code & 1;
  413c2f:	41 83 e5 01          	and    $0x1,%r13d
  413c33:	44 09 e8             	or     %r13d,%eax
        code >>= 1, res <<= 1;
  413c36:	01 c0                	add    %eax,%eax
    unsigned code; /* the value to invert */
    int len;       /* its bit length */
{
    register unsigned res = 0;
    do {
        res |= code & 1;
  413c38:	41 89 e9             	mov    %ebp,%r9d
        code >>= 1, res <<= 1;
    } while (--len > 0);
  413c3b:	41 83 ea 01          	sub    $0x1,%r10d
    int len;       /* its bit length */
{
    register unsigned res = 0;
    do {
        res |= code & 1;
        code >>= 1, res <<= 1;
  413c3f:	d1 ed                	shr    %ebp
    unsigned code; /* the value to invert */
    int len;       /* its bit length */
{
    register unsigned res = 0;
    do {
        res |= code & 1;
  413c41:	41 83 e1 01          	and    $0x1,%r9d
  413c45:	44 09 c8             	or     %r9d,%eax
        code >>= 1, res <<= 1;
  413c48:	01 c0                	add    %eax,%eax
    unsigned code; /* the value to invert */
    int len;       /* its bit length */
{
    register unsigned res = 0;
    do {
        res |= code & 1;
  413c4a:	89 e9                	mov    %ebp,%ecx
        code >>= 1, res <<= 1;
    } while (--len > 0);
  413c4c:	41 83 ea 01          	sub    $0x1,%r10d
    int len;       /* its bit length */
{
    register unsigned res = 0;
    do {
        res |= code & 1;
        code >>= 1, res <<= 1;
  413c50:	d1 ed                	shr    %ebp
    unsigned code; /* the value to invert */
    int len;       /* its bit length */
{
    register unsigned res = 0;
    do {
        res |= code & 1;
  413c52:	83 e1 01             	and    $0x1,%ecx
  413c55:	09 c8                	or     %ecx,%eax
        code >>= 1, res <<= 1;
  413c57:	01 c0                	add    %eax,%eax
    unsigned code; /* the value to invert */
    int len;       /* its bit length */
{
    register unsigned res = 0;
    do {
        res |= code & 1;
  413c59:	89 ef                	mov    %ebp,%edi
        code >>= 1, res <<= 1;
  413c5b:	d1 ed                	shr    %ebp
    unsigned code; /* the value to invert */
    int len;       /* its bit length */
{
    register unsigned res = 0;
    do {
        res |= code & 1;
  413c5d:	83 e7 01             	and    $0x1,%edi
  413c60:	09 f8                	or     %edi,%eax
        code >>= 1, res <<= 1;
  413c62:	01 c0                	add    %eax,%eax
    } while (--len > 0);
  413c64:	41 83 ea 01          	sub    $0x1,%r10d
  413c68:	74 7e                	je     413ce8 <build_tree+0x11d8>
    unsigned code; /* the value to invert */
    int len;       /* its bit length */
{
    register unsigned res = 0;
    do {
        res |= code & 1;
  413c6a:	41 89 ef             	mov    %ebp,%r15d
        code >>= 1, res <<= 1;
  413c6d:	41 89 eb             	mov    %ebp,%r11d
  413c70:	89 ea                	mov    %ebp,%edx
    unsigned code; /* the value to invert */
    int len;       /* its bit length */
{
    register unsigned res = 0;
    do {
        res |= code & 1;
  413c72:	41 83 e7 01          	and    $0x1,%r15d
        code >>= 1, res <<= 1;
  413c76:	41 c1 eb 02          	shr    $0x2,%r11d
  413c7a:	c1 ea 03             	shr    $0x3,%edx
    unsigned code; /* the value to invert */
    int len;       /* its bit length */
{
    register unsigned res = 0;
    do {
        res |= code & 1;
  413c7d:	41 09 c7             	or     %eax,%r15d
        code >>= 1, res <<= 1;
  413c80:	89 e8                	mov    %ebp,%eax
    unsigned code; /* the value to invert */
    int len;       /* its bit length */
{
    register unsigned res = 0;
    do {
        res |= code & 1;
  413c82:	41 83 e3 01          	and    $0x1,%r11d
        code >>= 1, res <<= 1;
  413c86:	d1 e8                	shr    %eax
  413c88:	45 01 ff             	add    %r15d,%r15d
    unsigned code; /* the value to invert */
    int len;       /* its bit length */
{
    register unsigned res = 0;
    do {
        res |= code & 1;
  413c8b:	83 e2 01             	and    $0x1,%edx
  413c8e:	83 e0 01             	and    $0x1,%eax
        code >>= 1, res <<= 1;
  413c91:	89 eb                	mov    %ebp,%ebx
  413c93:	41 89 ee             	mov    %ebp,%r14d
    unsigned code; /* the value to invert */
    int len;       /* its bit length */
{
    register unsigned res = 0;
    do {
        res |= code & 1;
  413c96:	41 09 c7             	or     %eax,%r15d
        code >>= 1, res <<= 1;
  413c99:	c1 eb 04             	shr    $0x4,%ebx
  413c9c:	41 c1 ee 05          	shr    $0x5,%r14d
  413ca0:	45 01 ff             	add    %r15d,%r15d
    unsigned code; /* the value to invert */
    int len;       /* its bit length */
{
    register unsigned res = 0;
    do {
        res |= code & 1;
  413ca3:	83 e3 01             	and    $0x1,%ebx
  413ca6:	41 83 e6 01          	and    $0x1,%r14d
  413caa:	45 09 df             	or     %r11d,%r15d
        code >>= 1, res <<= 1;
  413cad:	89 e8                	mov    %ebp,%eax
  413caf:	41 89 ec             	mov    %ebp,%r12d
  413cb2:	45 01 ff             	add    %r15d,%r15d
  413cb5:	c1 e8 06             	shr    $0x6,%eax
  413cb8:	41 c1 ec 07          	shr    $0x7,%r12d
    unsigned code; /* the value to invert */
    int len;       /* its bit length */
{
    register unsigned res = 0;
    do {
        res |= code & 1;
  413cbc:	41 09 d7             	or     %edx,%r15d
  413cbf:	83 e0 01             	and    $0x1,%eax
  413cc2:	41 83 e4 01          	and    $0x1,%r12d
        code >>= 1, res <<= 1;
  413cc6:	45 01 ff             	add    %r15d,%r15d
  413cc9:	c1 ed 08             	shr    $0x8,%ebp
    unsigned code; /* the value to invert */
    int len;       /* its bit length */
{
    register unsigned res = 0;
    do {
        res |= code & 1;
  413ccc:	41 09 df             	or     %ebx,%r15d
        code >>= 1, res <<= 1;
  413ccf:	45 01 ff             	add    %r15d,%r15d
    unsigned code; /* the value to invert */
    int len;       /* its bit length */
{
    register unsigned res = 0;
    do {
        res |= code & 1;
  413cd2:	45 09 f7             	or     %r14d,%r15d
        code >>= 1, res <<= 1;
  413cd5:	45 01 ff             	add    %r15d,%r15d
    unsigned code; /* the value to invert */
    int len;       /* its bit length */
{
    register unsigned res = 0;
    do {
        res |= code & 1;
  413cd8:	44 09 f8             	or     %r15d,%eax
        code >>= 1, res <<= 1;
  413cdb:	01 c0                	add    %eax,%eax
    unsigned code; /* the value to invert */
    int len;       /* its bit length */
{
    register unsigned res = 0;
    do {
        res |= code & 1;
  413cdd:	44 09 e0             	or     %r12d,%eax
        code >>= 1, res <<= 1;
  413ce0:	01 c0                	add    %eax,%eax
    } while (--len > 0);
  413ce2:	41 83 ea 08          	sub    $0x8,%r10d
  413ce6:	75 82                	jne    413c6a <build_tree+0x115a>
    return res >> 1;
  413ce8:	d1 e8                	shr    %eax

    for (n = 0;  n <= max_code; n++) {
        int len = tree[n].Len;
        if (len == 0) continue;
        /* Now reverse the bits */
        tree[n].Code = bi_reverse(next_code[len]++, len);
  413cea:	66 89 46 fe          	mov    %ax,-0x2(%rsi)
  413cee:	48 83 c6 04          	add    $0x4,%rsi
     */
    Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
            "inconsistent bit counts");
    Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

    for (n = 0;  n <= max_code; n++) {
  413cf2:	4c 39 c6             	cmp    %r8,%rsi
  413cf5:	0f 85 8d fe ff ff    	jne    413b88 <build_tree+0x1078>
     */
    gen_bitlen(s, (tree_desc *)desc);

    /* The field len is now set, we can generate the bit codes */
    gen_codes ((ct_data *)tree, max_code, s->bl_count);
}
  413cfb:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  413d00:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  413d07:	00 00 
  413d09:	0f 85 2a 02 00 00    	jne    413f39 <build_tree+0x1429>
  413d0f:	48 83 c4 68          	add    $0x68,%rsp
  413d13:	5b                   	pop    %rbx
  413d14:	5d                   	pop    %rbp
  413d15:	41 5c                	pop    %r12
  413d17:	41 5d                	pop    %r13
  413d19:	41 5e                	pop    %r14
  413d1b:	41 5f                	pop    %r15
  413d1d:	c3                   	retq   
    ct_data *tree;  /* the tree to restore */
    int k;               /* node to move down */
{
    int v = s->heap[k];
    int j = k << 1;  /* left son of k */
    while (j <= s->heap_len) {
  413d1e:	ba 01 00 00 00       	mov    $0x1,%edx
  413d23:	e9 48 f4 ff ff       	jmpq   413170 <build_tree+0x660>
        /* We overwrite tree[n].Dad which is no longer needed */

        if (n > max_code) continue; /* not a leaf node */

        s->bl_count[bits]++;
        xbits = 0;
  413d28:	31 f6                	xor    %esi,%esi
  413d2a:	e9 de fb ff ff       	jmpq   41390d <build_tree+0xdfd>
  413d2f:	45 31 ed             	xor    %r13d,%r13d
  413d32:	e9 58 fc ff ff       	jmpq   41398f <build_tree+0xe7f>
        if (n >= base) xbits = extra[n-base];
  413d37:	45 29 d5             	sub    %r10d,%r13d
  413d3a:	4d 63 e5             	movslq %r13d,%r12
  413d3d:	46 8b 2c a3          	mov    (%rbx,%r12,4),%r13d
  413d41:	e9 bb fc ff ff       	jmpq   413a01 <build_tree+0xef1>
        /* We overwrite tree[n].Dad which is no longer needed */

        if (n > max_code) continue; /* not a leaf node */

        s->bl_count[bits]++;
        xbits = 0;
  413d46:	45 31 f6             	xor    %r14d,%r14d
  413d49:	e9 21 fd ff ff       	jmpq   413a6f <build_tree+0xf5f>
     */
    s->heap_len = 0, s->heap_max = HEAP_SIZE;

    for (n = 0; n < elems; n++) {
        if (tree[n].Freq != 0) {
            s->heap[++(s->heap_len)] = max_code = n;
  413d4e:	44 8b 9f a4 14 00 00 	mov    0x14a4(%rdi),%r11d
  413d55:	89 44 24 24          	mov    %eax,0x24(%rsp)
  413d59:	45 8d 53 01          	lea    0x1(%r11),%r10d
  413d5d:	49 63 ea             	movslq %r10d,%rbp
  413d60:	44 89 97 a4 14 00 00 	mov    %r10d,0x14a4(%rdi)
  413d67:	89 84 af b0 0b 00 00 	mov    %eax,0xbb0(%rdi,%rbp,4)
            s->depth[n] = 0;
  413d6e:	c6 84 07 ac 14 00 00 	movb   $0x0,0x14ac(%rdi,%rax,1)
  413d75:	00 
  413d76:	e9 ee ee ff ff       	jmpq   412c69 <build_tree+0x159>
    Trace((stderr,"\nbit length overflow\n"));
    /* This happens for example on obj2 and pic of the Calgary corpus */

    /* Find the first bit length which could increase: */
    do {
        bits = max_length-1;
  413d7b:	45 89 da             	mov    %r11d,%r10d
  413d7e:	e9 78 fa ff ff       	jmpq   4137fb <build_tree+0xceb>
     */
    s->heap_len = 0, s->heap_max = HEAP_SIZE;

    for (n = 0; n < elems; n++) {
        if (tree[n].Freq != 0) {
            s->heap[++(s->heap_len)] = max_code = n;
  413d83:	44 8b 8f a4 14 00 00 	mov    0x14a4(%rdi),%r9d
  413d8a:	89 44 24 24          	mov    %eax,0x24(%rsp)
  413d8e:	45 8d 61 01          	lea    0x1(%r9),%r12d
  413d92:	4d 63 ec             	movslq %r12d,%r13
  413d95:	44 89 a7 a4 14 00 00 	mov    %r12d,0x14a4(%rdi)
  413d9c:	42 89 84 af b0 0b 00 	mov    %eax,0xbb0(%rdi,%r13,4)
  413da3:	00 
            s->depth[n] = 0;
  413da4:	c6 84 07 ac 14 00 00 	movb   $0x0,0x14ac(%rdi,%rax,1)
  413dab:	00 
  413dac:	e9 d1 ee ff ff       	jmpq   412c82 <build_tree+0x172>
        } else {
            tree[n].Len = 0;
  413db1:	45 31 db             	xor    %r11d,%r11d
  413db4:	66 45 89 5f 02       	mov    %r11w,0x2(%r15)
  413db9:	e9 de ed ff ff       	jmpq   412b9c <build_tree+0x8c>
     */
    s->heap_len = 0, s->heap_max = HEAP_SIZE;

    for (n = 0; n < elems; n++) {
        if (tree[n].Freq != 0) {
            s->heap[++(s->heap_len)] = max_code = n;
  413dbe:	8b af a4 14 00 00    	mov    0x14a4(%rdi),%ebp
  413dc4:	c7 44 24 24 01 00 00 	movl   $0x1,0x24(%rsp)
  413dcb:	00 
  413dcc:	44 8d 45 01          	lea    0x1(%rbp),%r8d
  413dd0:	4d 63 c8             	movslq %r8d,%r9
  413dd3:	44 89 87 a4 14 00 00 	mov    %r8d,0x14a4(%rdi)
  413dda:	42 c7 84 8f b0 0b 00 	movl   $0x1,0xbb0(%rdi,%r9,4)
  413de1:	00 01 00 00 00 
            s->depth[n] = 0;
  413de6:	c6 84 07 ac 14 00 00 	movb   $0x0,0x14ac(%rdi,%rax,1)
  413ded:	00 
  413dee:	e9 fc ed ff ff       	jmpq   412bef <build_tree+0xdf>
     */
    s->heap_len = 0, s->heap_max = HEAP_SIZE;

    for (n = 0; n < elems; n++) {
        if (tree[n].Freq != 0) {
            s->heap[++(s->heap_len)] = max_code = n;
  413df3:	44 8b b7 a4 14 00 00 	mov    0x14a4(%rdi),%r14d
  413dfa:	89 44 24 24          	mov    %eax,0x24(%rsp)
  413dfe:	41 8d 56 01          	lea    0x1(%r14),%edx
  413e02:	48 63 da             	movslq %edx,%rbx
  413e05:	89 97 a4 14 00 00    	mov    %edx,0x14a4(%rdi)
  413e0b:	89 84 9f b0 0b 00 00 	mov    %eax,0xbb0(%rdi,%rbx,4)
            s->depth[n] = 0;
  413e12:	c6 84 07 ac 14 00 00 	movb   $0x0,0x14ac(%rdi,%rax,1)
  413e19:	00 
  413e1a:	e9 32 ee ff ff       	jmpq   412c51 <build_tree+0x141>
     */
    s->heap_len = 0, s->heap_max = HEAP_SIZE;

    for (n = 0; n < elems; n++) {
        if (tree[n].Freq != 0) {
            s->heap[++(s->heap_len)] = max_code = n;
  413e1f:	44 8b 87 a4 14 00 00 	mov    0x14a4(%rdi),%r8d
  413e26:	89 44 24 24          	mov    %eax,0x24(%rsp)
  413e2a:	45 8d 48 01          	lea    0x1(%r8),%r9d
  413e2e:	4d 63 e1             	movslq %r9d,%r12
  413e31:	44 89 8f a4 14 00 00 	mov    %r9d,0x14a4(%rdi)
  413e38:	42 89 84 a7 b0 0b 00 	mov    %eax,0xbb0(%rdi,%r12,4)
  413e3f:	00 
            s->depth[n] = 0;
  413e40:	c6 84 07 ac 14 00 00 	movb   $0x0,0x14ac(%rdi,%rax,1)
  413e47:	00 
  413e48:	e9 eb ed ff ff       	jmpq   412c38 <build_tree+0x128>
     */
    s->heap_len = 0, s->heap_max = HEAP_SIZE;

    for (n = 0; n < elems; n++) {
        if (tree[n].Freq != 0) {
            s->heap[++(s->heap_len)] = max_code = n;
  413e4d:	8b b7 a4 14 00 00    	mov    0x14a4(%rdi),%esi
  413e53:	89 44 24 24          	mov    %eax,0x24(%rsp)
  413e57:	44 8d 5e 01          	lea    0x1(%rsi),%r11d
  413e5b:	4d 63 d3             	movslq %r11d,%r10
  413e5e:	44 89 9f a4 14 00 00 	mov    %r11d,0x14a4(%rdi)
  413e65:	42 89 84 97 b0 0b 00 	mov    %eax,0xbb0(%rdi,%r10,4)
  413e6c:	00 
            s->depth[n] = 0;
  413e6d:	c6 84 07 ac 14 00 00 	movb   $0x0,0x14ac(%rdi,%rax,1)
  413e74:	00 
  413e75:	e9 a6 ed ff ff       	jmpq   412c20 <build_tree+0x110>
     */
    s->heap_len = 0, s->heap_max = HEAP_SIZE;

    for (n = 0; n < elems; n++) {
        if (tree[n].Freq != 0) {
            s->heap[++(s->heap_len)] = max_code = n;
  413e7a:	44 8b af a4 14 00 00 	mov    0x14a4(%rdi),%r13d
  413e81:	89 44 24 24          	mov    %eax,0x24(%rsp)
  413e85:	45 8d 75 01          	lea    0x1(%r13),%r14d
  413e89:	49 63 d6             	movslq %r14d,%rdx
  413e8c:	44 89 b7 a4 14 00 00 	mov    %r14d,0x14a4(%rdi)
  413e93:	89 84 97 b0 0b 00 00 	mov    %eax,0xbb0(%rdi,%rdx,4)
            s->depth[n] = 0;
  413e9a:	c6 84 07 ac 14 00 00 	movb   $0x0,0x14ac(%rdi,%rax,1)
  413ea1:	00 
  413ea2:	e9 61 ed ff ff       	jmpq   412c08 <build_tree+0xf8>

        if (n > max_code) continue; /* not a leaf node */

        s->bl_count[bits]++;
        xbits = 0;
        if (n >= base) xbits = extra[n-base];
  413ea7:	45 29 d0             	sub    %r10d,%r8d
  413eaa:	4d 63 c0             	movslq %r8d,%r8
  413ead:	46 8b 24 83          	mov    (%rbx,%r8,4),%r12d
  413eb1:	e9 03 f6 ff ff       	jmpq   4134b9 <build_tree+0x9a9>
    ct_data *tree;  /* the tree to restore */
    int k;               /* node to move down */
{
    int v = s->heap[k];
    int j = k << 1;  /* left son of k */
    while (j <= s->heap_len) {
  413eb6:	49 63 d6             	movslq %r14d,%rdx
  413eb9:	e9 a6 f1 ff ff       	jmpq   413064 <build_tree+0x554>
  413ebe:	44 8b 74 24 24       	mov    0x24(%rsp),%r14d
  413ec3:	eb 2b                	jmp    413ef0 <build_tree+0x13e0>
     * and that at least one bit should be sent even if there is only one
     * possible code. So to avoid special checks later on we force at least
     * two codes of non zero frequency.
     */
    while (s->heap_len < 2) {
        node = s->heap[++(s->heap_len)] = (max_code < 2 ? ++max_code : 0);
  413ec5:	49 63 f1             	movslq %r9d,%rsi
        tree[node].Freq = 1;
  413ec8:	bd 01 00 00 00       	mov    $0x1,%ebp
     * and that at least one bit should be sent even if there is only one
     * possible code. So to avoid special checks later on we force at least
     * two codes of non zero frequency.
     */
    while (s->heap_len < 2) {
        node = s->heap[++(s->heap_len)] = (max_code < 2 ? ++max_code : 0);
  413ecd:	89 8c b7 b0 0b 00 00 	mov    %ecx,0xbb0(%rdi,%rsi,4)
        tree[node].Freq = 1;
  413ed4:	66 43 89 2c 07       	mov    %bp,(%r15,%r8,1)
        s->depth[node] = 0;
  413ed9:	c6 84 0f ac 14 00 00 	movb   $0x0,0x14ac(%rdi,%rcx,1)
  413ee0:	00 
        s->opt_len--; if (stree) s->static_len -= stree[node].Len;
  413ee1:	48 83 af 08 17 00 00 	subq   $0x1,0x1708(%rdi)
  413ee8:	01 
  413ee9:	44 8b 8f a4 14 00 00 	mov    0x14a4(%rdi),%r9d
    /* The pkzip format requires that at least one distance code exists,
     * and that at least one bit should be sent even if there is only one
     * possible code. So to avoid special checks later on we force at least
     * two codes of non zero frequency.
     */
    while (s->heap_len < 2) {
  413ef0:	41 83 f9 01          	cmp    $0x1,%r9d
  413ef4:	7f 26                	jg     413f1c <build_tree+0x140c>
        node = s->heap[++(s->heap_len)] = (max_code < 2 ? ++max_code : 0);
  413ef6:	41 83 c1 01          	add    $0x1,%r9d
  413efa:	45 31 c0             	xor    %r8d,%r8d
  413efd:	31 c9                	xor    %ecx,%ecx
  413eff:	41 83 fe 01          	cmp    $0x1,%r14d
  413f03:	44 89 8f a4 14 00 00 	mov    %r9d,0x14a4(%rdi)
  413f0a:	7f b9                	jg     413ec5 <build_tree+0x13b5>
  413f0c:	41 83 c6 01          	add    $0x1,%r14d
  413f10:	4d 63 c6             	movslq %r14d,%r8
  413f13:	49 63 ce             	movslq %r14d,%rcx
  413f16:	49 c1 e0 02          	shl    $0x2,%r8
  413f1a:	eb a9                	jmp    413ec5 <build_tree+0x13b5>
  413f1c:	44 89 74 24 24       	mov    %r14d,0x24(%rsp)
  413f21:	44 89 f6             	mov    %r14d,%esi
  413f24:	e9 81 f0 ff ff       	jmpq   412faa <build_tree+0x49a>
     * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
     * heap[0] is not used.
     */
    s->heap_len = 0, s->heap_max = HEAP_SIZE;

    for (n = 0; n < elems; n++) {
  413f29:	45 31 c9             	xor    %r9d,%r9d
{
    ct_data *tree         = desc->dyn_tree;
    const ct_data *stree  = desc->stat_desc->static_tree;
    int elems             = desc->stat_desc->elems;
    int n, m;          /* iterate over heap elements */
    int max_code = -1; /* largest code with non zero frequency */
  413f2c:	c7 44 24 24 ff ff ff 	movl   $0xffffffff,0x24(%rsp)
  413f33:	ff 
  413f34:	e9 f4 ef ff ff       	jmpq   412f2d <build_tree+0x41d>
     */
    gen_bitlen(s, (tree_desc *)desc);

    /* The field len is now set, we can generate the bit codes */
    gen_codes ((ct_data *)tree, max_code, s->bl_count);
}
  413f39:	e8 82 2f ff ff       	callq  406ec0 <__stack_chk_fail@plt>
  413f3e:	66 90                	xchg   %ax,%ax

0000000000413f40 <_tr_init>:
void _tr_init(s)
    deflate_state *s;
{
    tr_static_init();

    s->l_desc.dyn_tree = s->dyn_ltree;
  413f40:	48 8d 87 c4 00 00 00 	lea    0xc4(%rdi),%rax
    s->d_desc.stat_desc = &static_d_desc;

    s->bl_desc.dyn_tree = s->bl_tree;
    s->bl_desc.stat_desc = &static_bl_desc;

    s->bi_buf = 0;
  413f47:	31 f6                	xor    %esi,%esi
    deflate_state *s;
{
    int n; /* iterates over tree elements */

    /* Initialize the trees. */
    for (n = 0; n < L_CODES;  n++) s->dyn_ltree[n].Freq = 0;
  413f49:	45 31 c0             	xor    %r8d,%r8d
  413f4c:	45 31 c9             	xor    %r9d,%r9d
  413f4f:	45 31 d2             	xor    %r10d,%r10d
  413f52:	45 31 db             	xor    %r11d,%r11d
void _tr_init(s)
    deflate_state *s;
{
    tr_static_init();

    s->l_desc.dyn_tree = s->dyn_ltree;
  413f55:	48 89 87 48 0b 00 00 	mov    %rax,0xb48(%rdi)
    deflate_state *s;
{
    int n; /* iterates over tree elements */

    /* Initialize the trees. */
    for (n = 0; n < L_CODES;  n++) s->dyn_ltree[n].Freq = 0;
  413f5c:	31 c0                	xor    %eax,%eax
    tr_static_init();

    s->l_desc.dyn_tree = s->dyn_ltree;
    s->l_desc.stat_desc = &static_l_desc;

    s->d_desc.dyn_tree = s->dyn_dtree;
  413f5e:	48 8d 97 b8 09 00 00 	lea    0x9b8(%rdi),%rdx
    s->d_desc.stat_desc = &static_d_desc;

    s->bl_desc.dyn_tree = s->bl_tree;
  413f65:	48 8d 8f ac 0a 00 00 	lea    0xaac(%rdi),%rcx
    s->bl_desc.stat_desc = &static_bl_desc;

    s->bi_buf = 0;
  413f6c:	66 89 b7 20 17 00 00 	mov    %si,0x1720(%rdi)
    deflate_state *s;
{
    int n; /* iterates over tree elements */

    /* Initialize the trees. */
    for (n = 0; n < L_CODES;  n++) s->dyn_ltree[n].Freq = 0;
  413f73:	66 44 89 87 c4 00 00 	mov    %r8w,0xc4(%rdi)
  413f7a:	00 
  413f7b:	31 f6                	xor    %esi,%esi
  413f7d:	45 31 c0             	xor    %r8d,%r8d
  413f80:	66 44 89 8f c8 00 00 	mov    %r9w,0xc8(%rdi)
  413f87:	00 
  413f88:	66 44 89 97 cc 00 00 	mov    %r10w,0xcc(%rdi)
  413f8f:	00 
  413f90:	45 31 c9             	xor    %r9d,%r9d
  413f93:	45 31 d2             	xor    %r10d,%r10d
  413f96:	66 44 89 9f d0 00 00 	mov    %r11w,0xd0(%rdi)
  413f9d:	00 
  413f9e:	66 89 87 d4 00 00 00 	mov    %ax,0xd4(%rdi)
  413fa5:	45 31 db             	xor    %r11d,%r11d
  413fa8:	31 c0                	xor    %eax,%eax
  413faa:	66 89 b7 d8 00 00 00 	mov    %si,0xd8(%rdi)
  413fb1:	66 44 89 87 dc 00 00 	mov    %r8w,0xdc(%rdi)
  413fb8:	00 
  413fb9:	66 44 89 8f e0 00 00 	mov    %r9w,0xe0(%rdi)
  413fc0:	00 
  413fc1:	45 31 c0             	xor    %r8d,%r8d
  413fc4:	66 44 89 97 e4 00 00 	mov    %r10w,0xe4(%rdi)
  413fcb:	00 
  413fcc:	66 44 89 9f e8 00 00 	mov    %r11w,0xe8(%rdi)
  413fd3:	00 
  413fd4:	66 89 87 ec 00 00 00 	mov    %ax,0xec(%rdi)
  413fdb:	31 f6                	xor    %esi,%esi
  413fdd:	45 31 c9             	xor    %r9d,%r9d
  413fe0:	45 31 d2             	xor    %r10d,%r10d
  413fe3:	45 31 db             	xor    %r11d,%r11d
  413fe6:	48 8d 47 40          	lea    0x40(%rdi),%rax
  413fea:	66 44 89 87 f4 00 00 	mov    %r8w,0xf4(%rdi)
  413ff1:	00 
    deflate_state *s;
{
    tr_static_init();

    s->l_desc.dyn_tree = s->dyn_ltree;
    s->l_desc.stat_desc = &static_l_desc;
  413ff2:	48 c7 87 58 0b 00 00 	movq   $0x658260,0xb58(%rdi)
  413ff9:	60 82 65 00 

    s->d_desc.dyn_tree = s->dyn_dtree;
  413ffd:	48 89 97 60 0b 00 00 	mov    %rdx,0xb60(%rdi)
    s->d_desc.stat_desc = &static_d_desc;
  414004:	48 c7 87 70 0b 00 00 	movq   $0x658240,0xb70(%rdi)
  41400b:	40 82 65 00 
  41400f:	41 b8 10 00 00 00    	mov    $0x10,%r8d

    s->bl_desc.dyn_tree = s->bl_tree;
  414015:	48 89 8f 78 0b 00 00 	mov    %rcx,0xb78(%rdi)
    s->bl_desc.stat_desc = &static_bl_desc;
  41401c:	48 c7 87 88 0b 00 00 	movq   $0x658220,0xb88(%rdi)
  414023:	20 82 65 00 
  414027:	0f 18 8f 64 01 00 00 	prefetcht0 0x164(%rdi)

    s->bi_buf = 0;
    s->bi_valid = 0;
  41402e:	c7 87 24 17 00 00 00 	movl   $0x0,0x1724(%rdi)
  414035:	00 00 00 
    s->last_eob_len = 8; /* enough lookahead for inflate */
  414038:	c7 87 1c 17 00 00 08 	movl   $0x8,0x171c(%rdi)
  41403f:	00 00 00 
    deflate_state *s;
{
    int n; /* iterates over tree elements */

    /* Initialize the trees. */
    for (n = 0; n < L_CODES;  n++) s->dyn_ltree[n].Freq = 0;
  414042:	66 89 b7 f0 00 00 00 	mov    %si,0xf0(%rdi)
  414049:	66 44 89 8f f8 00 00 	mov    %r9w,0xf8(%rdi)
  414050:	00 
  414051:	66 44 89 97 fc 00 00 	mov    %r10w,0xfc(%rdi)
  414058:	00 
  414059:	66 44 89 9f 00 01 00 	mov    %r11w,0x100(%rdi)
  414060:	00 
  414061:	31 f6                	xor    %esi,%esi
  414063:	45 31 c9             	xor    %r9d,%r9d
  414066:	45 31 d2             	xor    %r10d,%r10d
  414069:	45 31 db             	xor    %r11d,%r11d
  41406c:	66 89 b0 c4 00 00 00 	mov    %si,0xc4(%rax)
  414073:	66 44 89 88 c8 00 00 	mov    %r9w,0xc8(%rax)
  41407a:	00 
  41407b:	66 44 89 90 cc 00 00 	mov    %r10w,0xcc(%rax)
  414082:	00 
  414083:	66 44 89 98 d0 00 00 	mov    %r11w,0xd0(%rax)
  41408a:	00 
  41408b:	31 f6                	xor    %esi,%esi
  41408d:	45 31 c9             	xor    %r9d,%r9d
  414090:	45 31 d2             	xor    %r10d,%r10d
  414093:	45 31 db             	xor    %r11d,%r11d
  414096:	66 89 b0 d4 00 00 00 	mov    %si,0xd4(%rax)
  41409d:	66 44 89 88 d8 00 00 	mov    %r9w,0xd8(%rax)
  4140a4:	00 
  4140a5:	31 f6                	xor    %esi,%esi
  4140a7:	66 44 89 90 dc 00 00 	mov    %r10w,0xdc(%rax)
  4140ae:	00 
  4140af:	66 44 89 98 e0 00 00 	mov    %r11w,0xe0(%rax)
  4140b6:	00 
  4140b7:	45 31 c9             	xor    %r9d,%r9d
  4140ba:	45 31 d2             	xor    %r10d,%r10d
  4140bd:	45 31 db             	xor    %r11d,%r11d
  4140c0:	66 89 b0 e4 00 00 00 	mov    %si,0xe4(%rax)
  4140c7:	66 44 89 88 e8 00 00 	mov    %r9w,0xe8(%rax)
  4140ce:	00 
  4140cf:	66 44 89 90 ec 00 00 	mov    %r10w,0xec(%rax)
  4140d6:	00 
  4140d7:	31 f6                	xor    %esi,%esi
  4140d9:	66 44 89 98 f0 00 00 	mov    %r11w,0xf0(%rax)
  4140e0:	00 
  4140e1:	45 31 c9             	xor    %r9d,%r9d
  4140e4:	45 31 d2             	xor    %r10d,%r10d
  4140e7:	45 31 db             	xor    %r11d,%r11d
  4140ea:	66 89 b0 f4 00 00 00 	mov    %si,0xf4(%rax)
  4140f1:	66 44 89 88 f8 00 00 	mov    %r9w,0xf8(%rax)
  4140f8:	00 
  4140f9:	66 44 89 90 fc 00 00 	mov    %r10w,0xfc(%rax)
  414100:	00 
  414101:	66 44 89 98 00 01 00 	mov    %r11w,0x100(%rax)
  414108:	00 
  414109:	31 f6                	xor    %esi,%esi
  41410b:	45 31 c9             	xor    %r9d,%r9d
  41410e:	45 31 d2             	xor    %r10d,%r10d
  414111:	45 31 db             	xor    %r11d,%r11d
  414114:	66 89 b0 04 01 00 00 	mov    %si,0x104(%rax)
  41411b:	66 44 89 88 08 01 00 	mov    %r9w,0x108(%rax)
  414122:	00 
  414123:	31 f6                	xor    %esi,%esi
  414125:	66 44 89 90 0c 01 00 	mov    %r10w,0x10c(%rax)
  41412c:	00 
  41412d:	66 44 89 98 10 01 00 	mov    %r11w,0x110(%rax)
  414134:	00 
  414135:	45 31 c9             	xor    %r9d,%r9d
  414138:	45 31 d2             	xor    %r10d,%r10d
  41413b:	45 31 db             	xor    %r11d,%r11d
  41413e:	66 89 b0 14 01 00 00 	mov    %si,0x114(%rax)
  414145:	66 44 89 88 18 01 00 	mov    %r9w,0x118(%rax)
  41414c:	00 
  41414d:	66 44 89 90 1c 01 00 	mov    %r10w,0x11c(%rax)
  414154:	00 
  414155:	31 f6                	xor    %esi,%esi
  414157:	66 44 89 98 20 01 00 	mov    %r11w,0x120(%rax)
  41415e:	00 
  41415f:	45 31 c9             	xor    %r9d,%r9d
  414162:	45 31 d2             	xor    %r10d,%r10d
  414165:	45 31 db             	xor    %r11d,%r11d
  414168:	66 89 b0 24 01 00 00 	mov    %si,0x124(%rax)
  41416f:	66 44 89 88 28 01 00 	mov    %r9w,0x128(%rax)
  414176:	00 
  414177:	66 44 89 90 2c 01 00 	mov    %r10w,0x12c(%rax)
  41417e:	00 
  41417f:	66 44 89 98 30 01 00 	mov    %r11w,0x130(%rax)
  414186:	00 
  414187:	31 f6                	xor    %esi,%esi
  414189:	45 31 d2             	xor    %r10d,%r10d
  41418c:	45 31 db             	xor    %r11d,%r11d
  41418f:	45 31 c9             	xor    %r9d,%r9d
  414192:	66 89 b0 34 01 00 00 	mov    %si,0x134(%rax)
  414199:	66 44 89 88 38 01 00 	mov    %r9w,0x138(%rax)
  4141a0:	00 
  4141a1:	31 f6                	xor    %esi,%esi
  4141a3:	66 44 89 90 3c 01 00 	mov    %r10w,0x13c(%rax)
  4141aa:	00 
  4141ab:	45 31 c9             	xor    %r9d,%r9d
  4141ae:	0f 18 88 64 01 00 00 	prefetcht0 0x164(%rax)
  4141b5:	45 31 d2             	xor    %r10d,%r10d
  4141b8:	0f 18 88 a4 01 00 00 	prefetcht0 0x1a4(%rax)
  4141bf:	66 44 89 98 40 01 00 	mov    %r11w,0x140(%rax)
  4141c6:	00 
  4141c7:	45 31 db             	xor    %r11d,%r11d
  4141ca:	66 89 b0 44 01 00 00 	mov    %si,0x144(%rax)
  4141d1:	66 44 89 88 48 01 00 	mov    %r9w,0x148(%rax)
  4141d8:	00 
  4141d9:	66 44 89 90 4c 01 00 	mov    %r10w,0x14c(%rax)
  4141e0:	00 
  4141e1:	66 44 89 98 50 01 00 	mov    %r11w,0x150(%rax)
  4141e8:	00 
  4141e9:	31 f6                	xor    %esi,%esi
  4141eb:	45 31 c9             	xor    %r9d,%r9d
  4141ee:	45 31 d2             	xor    %r10d,%r10d
  4141f1:	45 31 db             	xor    %r11d,%r11d
  4141f4:	66 89 b0 54 01 00 00 	mov    %si,0x154(%rax)
  4141fb:	66 44 89 88 58 01 00 	mov    %r9w,0x158(%rax)
  414202:	00 
  414203:	31 f6                	xor    %esi,%esi
  414205:	66 44 89 90 5c 01 00 	mov    %r10w,0x15c(%rax)
  41420c:	00 
  41420d:	66 44 89 98 60 01 00 	mov    %r11w,0x160(%rax)
  414214:	00 
  414215:	45 31 c9             	xor    %r9d,%r9d
  414218:	45 31 d2             	xor    %r10d,%r10d
  41421b:	45 31 db             	xor    %r11d,%r11d
  41421e:	66 89 b0 64 01 00 00 	mov    %si,0x164(%rax)
  414225:	66 44 89 88 68 01 00 	mov    %r9w,0x168(%rax)
  41422c:	00 
  41422d:	66 44 89 90 6c 01 00 	mov    %r10w,0x16c(%rax)
  414234:	00 
  414235:	31 f6                	xor    %esi,%esi
  414237:	66 44 89 98 70 01 00 	mov    %r11w,0x170(%rax)
  41423e:	00 
  41423f:	45 31 c9             	xor    %r9d,%r9d
  414242:	45 31 d2             	xor    %r10d,%r10d
  414245:	45 31 db             	xor    %r11d,%r11d
  414248:	66 89 b0 74 01 00 00 	mov    %si,0x174(%rax)
  41424f:	66 44 89 88 78 01 00 	mov    %r9w,0x178(%rax)
  414256:	00 
  414257:	66 44 89 90 7c 01 00 	mov    %r10w,0x17c(%rax)
  41425e:	00 
  41425f:	66 44 89 98 80 01 00 	mov    %r11w,0x180(%rax)
  414266:	00 
  414267:	31 f6                	xor    %esi,%esi
  414269:	45 31 c9             	xor    %r9d,%r9d
  41426c:	45 31 d2             	xor    %r10d,%r10d
  41426f:	45 31 db             	xor    %r11d,%r11d
  414272:	66 89 b0 84 01 00 00 	mov    %si,0x184(%rax)
  414279:	66 44 89 88 88 01 00 	mov    %r9w,0x188(%rax)
  414280:	00 
  414281:	31 f6                	xor    %esi,%esi
  414283:	66 44 89 90 8c 01 00 	mov    %r10w,0x18c(%rax)
  41428a:	00 
  41428b:	66 44 89 98 90 01 00 	mov    %r11w,0x190(%rax)
  414292:	00 
  414293:	45 31 c9             	xor    %r9d,%r9d
  414296:	45 31 d2             	xor    %r10d,%r10d
  414299:	45 31 db             	xor    %r11d,%r11d
  41429c:	66 89 b0 94 01 00 00 	mov    %si,0x194(%rax)
  4142a3:	66 44 89 88 98 01 00 	mov    %r9w,0x198(%rax)
  4142aa:	00 
  4142ab:	66 44 89 90 9c 01 00 	mov    %r10w,0x19c(%rax)
  4142b2:	00 
  4142b3:	31 f6                	xor    %esi,%esi
  4142b5:	66 44 89 98 a0 01 00 	mov    %r11w,0x1a0(%rax)
  4142bc:	00 
  4142bd:	45 31 c9             	xor    %r9d,%r9d
  4142c0:	45 31 d2             	xor    %r10d,%r10d
  4142c3:	45 31 db             	xor    %r11d,%r11d
  4142c6:	66 89 b0 a4 01 00 00 	mov    %si,0x1a4(%rax)
  4142cd:	66 44 89 88 a8 01 00 	mov    %r9w,0x1a8(%rax)
  4142d4:	00 
  4142d5:	66 44 89 90 ac 01 00 	mov    %r10w,0x1ac(%rax)
  4142dc:	00 
  4142dd:	66 44 89 98 b0 01 00 	mov    %r11w,0x1b0(%rax)
  4142e4:	00 
  4142e5:	31 f6                	xor    %esi,%esi
  4142e7:	45 31 c9             	xor    %r9d,%r9d
  4142ea:	45 31 d2             	xor    %r10d,%r10d
  4142ed:	45 31 db             	xor    %r11d,%r11d
  4142f0:	41 83 c0 40          	add    $0x40,%r8d
  4142f4:	66 89 b0 b4 01 00 00 	mov    %si,0x1b4(%rax)
  4142fb:	66 44 89 88 b8 01 00 	mov    %r9w,0x1b8(%rax)
  414302:	00 
  414303:	66 44 89 90 bc 01 00 	mov    %r10w,0x1bc(%rax)
  41430a:	00 
  41430b:	0f 18 88 e4 01 00 00 	prefetcht0 0x1e4(%rax)
  414312:	0f 18 88 24 02 00 00 	prefetcht0 0x224(%rax)
  414319:	66 44 89 98 c0 01 00 	mov    %r11w,0x1c0(%rax)
  414320:	00 
  414321:	48 05 00 01 00 00    	add    $0x100,%rax
  414327:	41 81 f8 10 01 00 00 	cmp    $0x110,%r8d
  41432e:	0f 85 2d fd ff ff    	jne    414061 <_tr_init+0x121>
  414334:	31 c0                	xor    %eax,%eax
  414336:	45 31 c0             	xor    %r8d,%r8d
  414339:	31 f6                	xor    %esi,%esi
  41433b:	66 89 87 08 05 00 00 	mov    %ax,0x508(%rdi)
  414342:	31 c0                	xor    %eax,%eax
  414344:	45 31 c9             	xor    %r9d,%r9d
  414347:	45 31 d2             	xor    %r10d,%r10d
  41434a:	45 31 db             	xor    %r11d,%r11d
  41434d:	66 44 89 87 04 05 00 	mov    %r8w,0x504(%rdi)
  414354:	00 
  414355:	66 89 87 20 05 00 00 	mov    %ax,0x520(%rdi)
  41435c:	45 31 c0             	xor    %r8d,%r8d
  41435f:	31 c0                	xor    %eax,%eax
  414361:	66 89 b7 0c 05 00 00 	mov    %si,0x50c(%rdi)
  414368:	66 44 89 8f 10 05 00 	mov    %r9w,0x510(%rdi)
  41436f:	00 
  414370:	31 f6                	xor    %esi,%esi
  414372:	66 44 89 97 14 05 00 	mov    %r10w,0x514(%rdi)
  414379:	00 
  41437a:	66 44 89 9f 18 05 00 	mov    %r11w,0x518(%rdi)
  414381:	00 
  414382:	45 31 c9             	xor    %r9d,%r9d
  414385:	66 44 89 87 1c 05 00 	mov    %r8w,0x51c(%rdi)
  41438c:	00 
  41438d:	45 31 d2             	xor    %r10d,%r10d
  414390:	45 31 db             	xor    %r11d,%r11d
  414393:	45 31 c0             	xor    %r8d,%r8d
  414396:	66 89 87 38 05 00 00 	mov    %ax,0x538(%rdi)
  41439d:	48 89 d0             	mov    %rdx,%rax
  4143a0:	48 8d 97 30 0a 00 00 	lea    0xa30(%rdi),%rdx
  4143a7:	66 89 b7 24 05 00 00 	mov    %si,0x524(%rdi)
  4143ae:	66 44 89 8f 28 05 00 	mov    %r9w,0x528(%rdi)
  4143b5:	00 
  4143b6:	66 44 89 97 2c 05 00 	mov    %r10w,0x52c(%rdi)
  4143bd:	00 
  4143be:	66 44 89 9f 30 05 00 	mov    %r11w,0x530(%rdi)
  4143c5:	00 
  4143c6:	66 44 89 87 34 05 00 	mov    %r8w,0x534(%rdi)
  4143cd:	00 
    for (n = 0; n < D_CODES;  n++) s->dyn_dtree[n].Freq = 0;
  4143ce:	31 f6                	xor    %esi,%esi
  4143d0:	45 31 c9             	xor    %r9d,%r9d
  4143d3:	45 31 d2             	xor    %r10d,%r10d
  4143d6:	45 31 db             	xor    %r11d,%r11d
  4143d9:	45 31 c0             	xor    %r8d,%r8d
  4143dc:	66 89 30             	mov    %si,(%rax)
  4143df:	66 44 89 48 04       	mov    %r9w,0x4(%rax)
  4143e4:	66 44 89 50 08       	mov    %r10w,0x8(%rax)
  4143e9:	31 f6                	xor    %esi,%esi
  4143eb:	66 44 89 58 0c       	mov    %r11w,0xc(%rax)
  4143f0:	66 44 89 40 10       	mov    %r8w,0x10(%rax)
  4143f5:	45 31 c9             	xor    %r9d,%r9d
  4143f8:	45 31 d2             	xor    %r10d,%r10d
  4143fb:	45 31 db             	xor    %r11d,%r11d
  4143fe:	45 31 c0             	xor    %r8d,%r8d
  414401:	66 89 70 14          	mov    %si,0x14(%rax)
  414405:	66 44 89 48 18       	mov    %r9w,0x18(%rax)
  41440a:	48 83 c0 28          	add    $0x28,%rax
  41440e:	66 44 89 50 f4       	mov    %r10w,-0xc(%rax)
  414413:	66 44 89 58 f8       	mov    %r11w,-0x8(%rax)
  414418:	66 44 89 40 fc       	mov    %r8w,-0x4(%rax)
  41441d:	48 39 d0             	cmp    %rdx,%rax
  414420:	75 ac                	jne    4143ce <_tr_init+0x48e>
    for (n = 0; n < BL_CODES; n++) s->bl_tree[n].Freq = 0;
  414422:	31 c0                	xor    %eax,%eax
  414424:	48 8d 97 f8 0a 00 00 	lea    0xaf8(%rdi),%rdx
  41442b:	66 89 01             	mov    %ax,(%rcx)
  41442e:	48 8d 41 04          	lea    0x4(%rcx),%rax
  414432:	31 c9                	xor    %ecx,%ecx
  414434:	31 f6                	xor    %esi,%esi
  414436:	45 31 c9             	xor    %r9d,%r9d
  414439:	66 89 08             	mov    %cx,(%rax)
  41443c:	66 89 70 04          	mov    %si,0x4(%rax)
  414440:	45 31 d2             	xor    %r10d,%r10d
  414443:	66 44 89 48 08       	mov    %r9w,0x8(%rax)
  414448:	45 31 db             	xor    %r11d,%r11d
  41444b:	45 31 c0             	xor    %r8d,%r8d
  41444e:	31 c9                	xor    %ecx,%ecx
  414450:	31 f6                	xor    %esi,%esi
  414452:	45 31 c9             	xor    %r9d,%r9d
  414455:	66 44 89 50 0c       	mov    %r10w,0xc(%rax)
  41445a:	66 44 89 58 10       	mov    %r11w,0x10(%rax)
  41445f:	48 83 c0 24          	add    $0x24,%rax
  414463:	66 44 89 40 f0       	mov    %r8w,-0x10(%rax)
  414468:	66 89 48 f4          	mov    %cx,-0xc(%rax)
  41446c:	66 89 70 f8          	mov    %si,-0x8(%rax)
  414470:	66 44 89 48 fc       	mov    %r9w,-0x4(%rax)
  414475:	48 39 d0             	cmp    %rdx,%rax
  414478:	75 b8                	jne    414432 <_tr_init+0x4f2>

    s->dyn_ltree[END_BLOCK].Freq = 1;
  41447a:	ba 01 00 00 00       	mov    $0x1,%edx
    s->opt_len = s->static_len = 0L;
  41447f:	48 c7 87 10 17 00 00 	movq   $0x0,0x1710(%rdi)
  414486:	00 00 00 00 
  41448a:	48 c7 87 08 17 00 00 	movq   $0x0,0x1708(%rdi)
  414491:	00 00 00 00 
    /* Initialize the trees. */
    for (n = 0; n < L_CODES;  n++) s->dyn_ltree[n].Freq = 0;
    for (n = 0; n < D_CODES;  n++) s->dyn_dtree[n].Freq = 0;
    for (n = 0; n < BL_CODES; n++) s->bl_tree[n].Freq = 0;

    s->dyn_ltree[END_BLOCK].Freq = 1;
  414495:	66 89 97 c4 04 00 00 	mov    %dx,0x4c4(%rdi)
    s->opt_len = s->static_len = 0L;
    s->last_lit = s->matches = 0;
  41449c:	c7 87 18 17 00 00 00 	movl   $0x0,0x1718(%rdi)
  4144a3:	00 00 00 
  4144a6:	c7 87 fc 16 00 00 00 	movl   $0x0,0x16fc(%rdi)
  4144ad:	00 00 00 
  4144b0:	c3                   	retq   
  4144b1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  4144b8:	0f 1f 84 00 00 00 00 
  4144bf:	00 

00000000004144c0 <_tr_stored_block>:
void _tr_stored_block(s, buf, stored_len, eof)
    deflate_state *s;
    charf *buf;       /* input block */
    ulg stored_len;   /* length of input block */
    int eof;          /* true if this is the last block for a file */
{
  4144c0:	41 89 c8             	mov    %ecx,%r8d
    send_bits(s, (STORED_BLOCK<<1)+eof, 3);  /* send block type */
  4144c3:	8b 8f 24 17 00 00    	mov    0x1724(%rdi),%ecx
  4144c9:	83 f9 0d             	cmp    $0xd,%ecx
  4144cc:	0f 8f fe 02 00 00    	jg     4147d0 <_tr_stored_block+0x310>
  4144d2:	41 d3 e0             	shl    %cl,%r8d
  4144d5:	66 44 0b 87 20 17 00 	or     0x1720(%rdi),%r8w
  4144dc:	00 
  4144dd:	8d 41 03             	lea    0x3(%rcx),%eax
  4144e0:	89 87 24 17 00 00    	mov    %eax,0x1724(%rdi)
  4144e6:	66 44 89 87 20 17 00 	mov    %r8w,0x1720(%rdi)
  4144ed:	00 
 * Flush the bit buffer and align the output on a byte boundary
 */
local void bi_windup(s)
    deflate_state *s;
{
    if (s->bi_valid > 8) {
  4144ee:	83 f8 08             	cmp    $0x8,%eax
  4144f1:	0f 8f a1 02 00 00    	jg     414798 <_tr_stored_block+0x2d8>
        put_short(s, s->bi_buf);
    } else if (s->bi_valid > 0) {
  4144f7:	85 c0                	test   %eax,%eax
  4144f9:	7e 13                	jle    41450e <_tr_stored_block+0x4e>
        put_byte(s, (Byte)s->bi_buf);
  4144fb:	8b 47 28             	mov    0x28(%rdi),%eax
  4144fe:	4c 8b 5f 10          	mov    0x10(%rdi),%r11
  414502:	44 8d 48 01          	lea    0x1(%rax),%r9d
  414506:	44 89 4f 28          	mov    %r9d,0x28(%rdi)
  41450a:	45 88 04 03          	mov    %r8b,(%r11,%rax,1)
{
    bi_windup(s);        /* align on byte boundary */
    s->last_eob_len = 8; /* enough lookahead for inflate */

    if (header) {
        put_short(s, (ush)len);
  41450e:	44 8b 4f 28          	mov    0x28(%rdi),%r9d
  414512:	4c 8b 5f 10          	mov    0x10(%rdi),%r11
    if (s->bi_valid > 8) {
        put_short(s, s->bi_buf);
    } else if (s->bi_valid > 0) {
        put_byte(s, (Byte)s->bi_buf);
    }
    s->bi_buf = 0;
  414516:	45 31 d2             	xor    %r10d,%r10d
  414519:	66 44 89 97 20 17 00 	mov    %r10w,0x1720(%rdi)
  414520:	00 
    s->bi_valid = 0;
  414521:	c7 87 24 17 00 00 00 	movl   $0x0,0x1724(%rdi)
  414528:	00 00 00 
    charf    *buf;    /* the input data */
    unsigned len;     /* its length */
    int      header;  /* true if block header must be written */
{
    bi_windup(s);        /* align on byte boundary */
    s->last_eob_len = 8; /* enough lookahead for inflate */
  41452b:	c7 87 1c 17 00 00 08 	movl   $0x8,0x171c(%rdi)
  414532:	00 00 00 

    if (header) {
        put_short(s, (ush)len);
  414535:	41 8d 41 01          	lea    0x1(%r9),%eax
  414539:	89 47 28             	mov    %eax,0x28(%rdi)
  41453c:	43 88 14 0b          	mov    %dl,(%r11,%r9,1)
  414540:	41 89 d3             	mov    %edx,%r11d
  414543:	44 8b 57 28          	mov    0x28(%rdi),%r10d
  414547:	48 8b 4f 10          	mov    0x10(%rdi),%rcx
  41454b:	66 41 c1 eb 08       	shr    $0x8,%r11w
  414550:	45 8d 42 01          	lea    0x1(%r10),%r8d
  414554:	44 89 47 28          	mov    %r8d,0x28(%rdi)
  414558:	46 88 1c 11          	mov    %r11b,(%rcx,%r10,1)
        put_short(s, (ush)~len);
  41455c:	41 89 d2             	mov    %edx,%r10d
  41455f:	8b 47 28             	mov    0x28(%rdi),%eax
  414562:	4c 8b 4f 10          	mov    0x10(%rdi),%r9
  414566:	41 f7 d2             	not    %r10d
  414569:	8d 48 01             	lea    0x1(%rax),%ecx
  41456c:	89 4f 28             	mov    %ecx,0x28(%rdi)
  41456f:	45 88 14 01          	mov    %r10b,(%r9,%rax,1)
  414573:	89 d0                	mov    %edx,%eax
  414575:	44 8b 5f 28          	mov    0x28(%rdi),%r11d
  414579:	4c 8b 47 10          	mov    0x10(%rdi),%r8
  41457d:	f7 d0                	not    %eax
  41457f:	8d 4a ff             	lea    -0x1(%rdx),%ecx
  414582:	66 c1 e8 08          	shr    $0x8,%ax
#endif
    }
#ifdef DEBUG
    s->bits_sent += (ulg)len<<3;
#endif
    while (len--) {
  414586:	85 d2                	test   %edx,%edx
    bi_windup(s);        /* align on byte boundary */
    s->last_eob_len = 8; /* enough lookahead for inflate */

    if (header) {
        put_short(s, (ush)len);
        put_short(s, (ush)~len);
  414588:	45 8d 4b 01          	lea    0x1(%r11),%r9d
  41458c:	44 89 4f 28          	mov    %r9d,0x28(%rdi)
  414590:	43 88 04 18          	mov    %al,(%r8,%r11,1)
  414594:	4c 8d 5c 0e 01       	lea    0x1(%rsi,%rcx,1),%r11
#endif
    }
#ifdef DEBUG
    s->bits_sent += (ulg)len<<3;
#endif
    while (len--) {
  414599:	0f 84 f4 01 00 00    	je     414793 <_tr_stored_block+0x2d3>
        put_byte(s, *buf++);
  41459f:	44 8b 47 28          	mov    0x28(%rdi),%r8d
  4145a3:	48 89 f2             	mov    %rsi,%rdx
  4145a6:	4c 8b 4f 10          	mov    0x10(%rdi),%r9
  4145aa:	48 f7 d2             	not    %rdx
  4145ad:	4c 01 da             	add    %r11,%rdx
  4145b0:	83 e2 07             	and    $0x7,%edx
  4145b3:	45 8d 50 01          	lea    0x1(%r8),%r10d
  4145b7:	44 89 57 28          	mov    %r10d,0x28(%rdi)
  4145bb:	4c 8d 56 01          	lea    0x1(%rsi),%r10
  4145bf:	41 0f b6 4a ff       	movzbl -0x1(%r10),%ecx
#endif
    }
#ifdef DEBUG
    s->bits_sent += (ulg)len<<3;
#endif
    while (len--) {
  4145c4:	4d 39 da             	cmp    %r11,%r10
        put_byte(s, *buf++);
  4145c7:	43 88 0c 01          	mov    %cl,(%r9,%r8,1)
#endif
    }
#ifdef DEBUG
    s->bits_sent += (ulg)len<<3;
#endif
    while (len--) {
  4145cb:	0f 84 7f 02 00 00    	je     414850 <_tr_stored_block+0x390>
  4145d1:	48 85 d2             	test   %rdx,%rdx
  4145d4:	0f 84 f2 00 00 00    	je     4146cc <_tr_stored_block+0x20c>
  4145da:	48 83 fa 01          	cmp    $0x1,%rdx
  4145de:	0f 84 c6 00 00 00    	je     4146aa <_tr_stored_block+0x1ea>
  4145e4:	48 83 fa 02          	cmp    $0x2,%rdx
  4145e8:	0f 84 a0 00 00 00    	je     41468e <_tr_stored_block+0x1ce>
  4145ee:	48 83 fa 03          	cmp    $0x3,%rdx
  4145f2:	74 7e                	je     414672 <_tr_stored_block+0x1b2>
  4145f4:	48 83 fa 04          	cmp    $0x4,%rdx
  4145f8:	74 5c                	je     414656 <_tr_stored_block+0x196>
  4145fa:	48 83 fa 05          	cmp    $0x5,%rdx
  4145fe:	74 3c                	je     41463c <_tr_stored_block+0x17c>
  414600:	48 83 fa 06          	cmp    $0x6,%rdx
  414604:	74 19                	je     41461f <_tr_stored_block+0x15f>
        put_byte(s, *buf++);
  414606:	8b 57 28             	mov    0x28(%rdi),%edx
  414609:	4c 8d 56 02          	lea    0x2(%rsi),%r10
  41460d:	4c 8b 4f 10          	mov    0x10(%rdi),%r9
  414611:	8d 42 01             	lea    0x1(%rdx),%eax
  414614:	89 47 28             	mov    %eax,0x28(%rdi)
  414617:	0f b6 76 01          	movzbl 0x1(%rsi),%esi
  41461b:	41 88 34 11          	mov    %sil,(%r9,%rdx,1)
  41461f:	44 8b 4f 28          	mov    0x28(%rdi),%r9d
  414623:	48 8b 4f 10          	mov    0x10(%rdi),%rcx
  414627:	49 83 c2 01          	add    $0x1,%r10
  41462b:	45 8d 41 01          	lea    0x1(%r9),%r8d
  41462f:	44 89 47 28          	mov    %r8d,0x28(%rdi)
  414633:	41 0f b6 52 ff       	movzbl -0x1(%r10),%edx
  414638:	42 88 14 09          	mov    %dl,(%rcx,%r9,1)
  41463c:	8b 77 28             	mov    0x28(%rdi),%esi
  41463f:	48 8b 47 10          	mov    0x10(%rdi),%rax
  414643:	49 83 c2 01          	add    $0x1,%r10
  414647:	8d 4e 01             	lea    0x1(%rsi),%ecx
  41464a:	89 4f 28             	mov    %ecx,0x28(%rdi)
  41464d:	45 0f b6 4a ff       	movzbl -0x1(%r10),%r9d
  414652:	44 88 0c 30          	mov    %r9b,(%rax,%rsi,1)
  414656:	8b 57 28             	mov    0x28(%rdi),%edx
  414659:	48 8b 47 10          	mov    0x10(%rdi),%rax
  41465d:	49 83 c2 01          	add    $0x1,%r10
  414661:	44 8d 42 01          	lea    0x1(%rdx),%r8d
  414665:	44 89 47 28          	mov    %r8d,0x28(%rdi)
  414669:	41 0f b6 72 ff       	movzbl -0x1(%r10),%esi
  41466e:	40 88 34 10          	mov    %sil,(%rax,%rdx,1)
  414672:	44 8b 4f 28          	mov    0x28(%rdi),%r9d
  414676:	48 8b 4f 10          	mov    0x10(%rdi),%rcx
  41467a:	49 83 c2 01          	add    $0x1,%r10
  41467e:	41 8d 41 01          	lea    0x1(%r9),%eax
  414682:	89 47 28             	mov    %eax,0x28(%rdi)
  414685:	41 0f b6 52 ff       	movzbl -0x1(%r10),%edx
  41468a:	42 88 14 09          	mov    %dl,(%rcx,%r9,1)
  41468e:	8b 4f 28             	mov    0x28(%rdi),%ecx
  414691:	48 8b 77 10          	mov    0x10(%rdi),%rsi
  414695:	49 83 c2 01          	add    $0x1,%r10
  414699:	44 8d 41 01          	lea    0x1(%rcx),%r8d
  41469d:	44 89 47 28          	mov    %r8d,0x28(%rdi)
  4146a1:	45 0f b6 4a ff       	movzbl -0x1(%r10),%r9d
  4146a6:	44 88 0c 0e          	mov    %r9b,(%rsi,%rcx,1)
  4146aa:	8b 57 28             	mov    0x28(%rdi),%edx
  4146ad:	49 83 c2 01          	add    $0x1,%r10
  4146b1:	48 8b 47 10          	mov    0x10(%rdi),%rax
#endif
    }
#ifdef DEBUG
    s->bits_sent += (ulg)len<<3;
#endif
    while (len--) {
  4146b5:	4d 39 da             	cmp    %r11,%r10
        put_byte(s, *buf++);
  4146b8:	8d 72 01             	lea    0x1(%rdx),%esi
  4146bb:	89 77 28             	mov    %esi,0x28(%rdi)
  4146be:	41 0f b6 4a ff       	movzbl -0x1(%r10),%ecx
  4146c3:	88 0c 10             	mov    %cl,(%rax,%rdx,1)
#endif
    }
#ifdef DEBUG
    s->bits_sent += (ulg)len<<3;
#endif
    while (len--) {
  4146c6:	0f 84 7c 01 00 00    	je     414848 <_tr_stored_block+0x388>
        put_byte(s, *buf++);
  4146cc:	8b 47 28             	mov    0x28(%rdi),%eax
  4146cf:	4c 8b 4f 10          	mov    0x10(%rdi),%r9
  4146d3:	49 83 c2 08          	add    $0x8,%r10
  4146d7:	44 8d 40 01          	lea    0x1(%rax),%r8d
  4146db:	44 89 47 28          	mov    %r8d,0x28(%rdi)
  4146df:	41 0f b6 52 f8       	movzbl -0x8(%r10),%edx
  4146e4:	41 88 14 01          	mov    %dl,(%r9,%rax,1)
  4146e8:	8b 4f 28             	mov    0x28(%rdi),%ecx
  4146eb:	48 8b 77 10          	mov    0x10(%rdi),%rsi
  4146ef:	44 8d 49 01          	lea    0x1(%rcx),%r9d
  4146f3:	44 89 4f 28          	mov    %r9d,0x28(%rdi)
  4146f7:	41 0f b6 42 f9       	movzbl -0x7(%r10),%eax
  4146fc:	88 04 0e             	mov    %al,(%rsi,%rcx,1)
  4146ff:	8b 57 28             	mov    0x28(%rdi),%edx
  414702:	48 8b 77 10          	mov    0x10(%rdi),%rsi
  414706:	44 8d 42 01          	lea    0x1(%rdx),%r8d
  41470a:	44 89 47 28          	mov    %r8d,0x28(%rdi)
  41470e:	41 0f b6 4a fa       	movzbl -0x6(%r10),%ecx
  414713:	88 0c 16             	mov    %cl,(%rsi,%rdx,1)
  414716:	8b 47 28             	mov    0x28(%rdi),%eax
  414719:	4c 8b 4f 10          	mov    0x10(%rdi),%r9
  41471d:	8d 70 01             	lea    0x1(%rax),%esi
  414720:	89 77 28             	mov    %esi,0x28(%rdi)
  414723:	41 0f b6 52 fb       	movzbl -0x5(%r10),%edx
  414728:	41 88 14 01          	mov    %dl,(%r9,%rax,1)
  41472c:	44 8b 4f 28          	mov    0x28(%rdi),%r9d
  414730:	48 8b 4f 10          	mov    0x10(%rdi),%rcx
  414734:	45 8d 41 01          	lea    0x1(%r9),%r8d
  414738:	44 89 47 28          	mov    %r8d,0x28(%rdi)
  41473c:	41 0f b6 42 fc       	movzbl -0x4(%r10),%eax
  414741:	42 88 04 09          	mov    %al,(%rcx,%r9,1)
  414745:	8b 57 28             	mov    0x28(%rdi),%edx
  414748:	48 8b 77 10          	mov    0x10(%rdi),%rsi
  41474c:	8d 4a 01             	lea    0x1(%rdx),%ecx
  41474f:	89 4f 28             	mov    %ecx,0x28(%rdi)
  414752:	45 0f b6 4a fd       	movzbl -0x3(%r10),%r9d
  414757:	44 88 0c 16          	mov    %r9b,(%rsi,%rdx,1)
  41475b:	8b 77 28             	mov    0x28(%rdi),%esi
  41475e:	48 8b 47 10          	mov    0x10(%rdi),%rax
  414762:	44 8d 46 01          	lea    0x1(%rsi),%r8d
  414766:	44 89 47 28          	mov    %r8d,0x28(%rdi)
  41476a:	41 0f b6 52 fe       	movzbl -0x2(%r10),%edx
#endif
    }
#ifdef DEBUG
    s->bits_sent += (ulg)len<<3;
#endif
    while (len--) {
  41476f:	4d 39 da             	cmp    %r11,%r10
        put_byte(s, *buf++);
  414772:	88 14 30             	mov    %dl,(%rax,%rsi,1)
  414775:	44 8b 4f 28          	mov    0x28(%rdi),%r9d
  414779:	48 8b 4f 10          	mov    0x10(%rdi),%rcx
  41477d:	41 8d 41 01          	lea    0x1(%r9),%eax
  414781:	89 47 28             	mov    %eax,0x28(%rdi)
  414784:	41 0f b6 72 ff       	movzbl -0x1(%r10),%esi
  414789:	42 88 34 09          	mov    %sil,(%rcx,%r9,1)
#endif
    }
#ifdef DEBUG
    s->bits_sent += (ulg)len<<3;
#endif
    while (len--) {
  41478d:	0f 85 39 ff ff ff    	jne    4146cc <_tr_stored_block+0x20c>
  414793:	f3 c3                	repz retq 
  414795:	0f 1f 00             	nopl   (%rax)
 */
local void bi_windup(s)
    deflate_state *s;
{
    if (s->bi_valid > 8) {
        put_short(s, s->bi_buf);
  414798:	44 8b 57 28          	mov    0x28(%rdi),%r10d
  41479c:	48 8b 4f 10          	mov    0x10(%rdi),%rcx
  4147a0:	45 8d 5a 01          	lea    0x1(%r10),%r11d
  4147a4:	44 89 5f 28          	mov    %r11d,0x28(%rdi)
  4147a8:	46 88 04 11          	mov    %r8b,(%rcx,%r10,1)
  4147ac:	8b 47 28             	mov    0x28(%rdi),%eax
  4147af:	0f b6 8f 21 17 00 00 	movzbl 0x1721(%rdi),%ecx
  4147b6:	4c 8b 4f 10          	mov    0x10(%rdi),%r9
  4147ba:	44 8d 40 01          	lea    0x1(%rax),%r8d
  4147be:	44 89 47 28          	mov    %r8d,0x28(%rdi)
  4147c2:	41 88 0c 01          	mov    %cl,(%r9,%rax,1)
  4147c6:	e9 43 fd ff ff       	jmpq   41450e <_tr_stored_block+0x4e>
  4147cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    deflate_state *s;
    charf *buf;       /* input block */
    ulg stored_len;   /* length of input block */
    int eof;          /* true if this is the last block for a file */
{
    send_bits(s, (STORED_BLOCK<<1)+eof, 3);  /* send block type */
  4147d0:	8b 47 28             	mov    0x28(%rdi),%eax
  4147d3:	45 89 c1             	mov    %r8d,%r9d
  4147d6:	45 0f b7 c0          	movzwl %r8w,%r8d
  4147da:	41 d3 e1             	shl    %cl,%r9d
  4147dd:	48 8b 4f 10          	mov    0x10(%rdi),%rcx
  4147e1:	45 89 cb             	mov    %r9d,%r11d
  4147e4:	66 44 0b 9f 20 17 00 	or     0x1720(%rdi),%r11w
  4147eb:	00 
  4147ec:	44 8d 50 01          	lea    0x1(%rax),%r10d
  4147f0:	66 44 89 9f 20 17 00 	mov    %r11w,0x1720(%rdi)
  4147f7:	00 
  4147f8:	44 89 57 28          	mov    %r10d,0x28(%rdi)
  4147fc:	44 88 1c 01          	mov    %r11b,(%rcx,%rax,1)
  414800:	8b 4f 28             	mov    0x28(%rdi),%ecx
  414803:	0f b6 87 21 17 00 00 	movzbl 0x1721(%rdi),%eax
  41480a:	4c 8b 5f 10          	mov    0x10(%rdi),%r11
  41480e:	44 8d 49 01          	lea    0x1(%rcx),%r9d
  414812:	44 89 4f 28          	mov    %r9d,0x28(%rdi)
  414816:	41 88 04 0b          	mov    %al,(%r11,%rcx,1)
  41481a:	b9 10 00 00 00       	mov    $0x10,%ecx
  41481f:	8b 87 24 17 00 00    	mov    0x1724(%rdi),%eax
  414825:	29 c1                	sub    %eax,%ecx
  414827:	83 e8 0d             	sub    $0xd,%eax
  41482a:	41 d3 f8             	sar    %cl,%r8d
  41482d:	89 87 24 17 00 00    	mov    %eax,0x1724(%rdi)
  414833:	45 89 c2             	mov    %r8d,%r10d
  414836:	66 44 89 97 20 17 00 	mov    %r10w,0x1720(%rdi)
  41483d:	00 
  41483e:	e9 ab fc ff ff       	jmpq   4144ee <_tr_stored_block+0x2e>
  414843:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  414848:	f3 c3                	repz retq 
  41484a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  414850:	f3 c3                	repz retq 
  414852:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  414859:	1f 84 00 00 00 00 00 

0000000000414860 <_tr_align>:
 * on one bit only.
 */
void _tr_align(s)
    deflate_state *s;
{
    send_bits(s, STATIC_TREES<<1, 3);
  414860:	8b 8f 24 17 00 00    	mov    0x1724(%rdi),%ecx
  414866:	83 f9 0d             	cmp    $0xd,%ecx
  414869:	0f 8e c9 01 00 00    	jle    414a38 <_tr_align+0x1d8>
  41486f:	8b 47 28             	mov    0x28(%rdi),%eax
  414872:	be 02 00 00 00       	mov    $0x2,%esi
  414877:	4c 8b 57 10          	mov    0x10(%rdi),%r10
  41487b:	41 89 f1             	mov    %esi,%r9d
  41487e:	41 d3 e1             	shl    %cl,%r9d
  414881:	66 44 0b 8f 20 17 00 	or     0x1720(%rdi),%r9w
  414888:	00 
  414889:	44 8d 40 01          	lea    0x1(%rax),%r8d
  41488d:	66 44 89 8f 20 17 00 	mov    %r9w,0x1720(%rdi)
  414894:	00 
  414895:	44 89 47 28          	mov    %r8d,0x28(%rdi)
  414899:	45 88 0c 02          	mov    %r9b,(%r10,%rax,1)
  41489d:	8b 57 28             	mov    0x28(%rdi),%edx
  4148a0:	44 0f b6 8f 21 17 00 	movzbl 0x1721(%rdi),%r9d
  4148a7:	00 
  4148a8:	4c 8b 5f 10          	mov    0x10(%rdi),%r11
  4148ac:	8d 4a 01             	lea    0x1(%rdx),%ecx
  4148af:	89 4f 28             	mov    %ecx,0x28(%rdi)
  4148b2:	45 88 0c 13          	mov    %r9b,(%r11,%rdx,1)
  4148b6:	b9 10 00 00 00       	mov    $0x10,%ecx
  4148bb:	44 8b 97 24 17 00 00 	mov    0x1724(%rdi),%r10d
  4148c2:	44 29 d1             	sub    %r10d,%ecx
  4148c5:	d3 fe                	sar    %cl,%esi
  4148c7:	41 8d 4a f3          	lea    -0xd(%r10),%ecx
  4148cb:	89 f2                	mov    %esi,%edx
  4148cd:	66 89 b7 20 17 00 00 	mov    %si,0x1720(%rdi)
    send_code(s, END_BLOCK, static_ltree);
  4148d4:	83 f9 09             	cmp    $0x9,%ecx
 * on one bit only.
 */
void _tr_align(s)
    deflate_state *s;
{
    send_bits(s, STATIC_TREES<<1, 3);
  4148d7:	89 8f 24 17 00 00    	mov    %ecx,0x1724(%rdi)
    send_code(s, END_BLOCK, static_ltree);
  4148dd:	0f 8e 7c 01 00 00    	jle    414a5f <_tr_align+0x1ff>
  4148e3:	8b 47 28             	mov    0x28(%rdi),%eax
  4148e6:	4c 8b 47 10          	mov    0x10(%rdi),%r8
  4148ea:	31 f6                	xor    %esi,%esi
  4148ec:	44 8d 58 01          	lea    0x1(%rax),%r11d
  4148f0:	44 89 5f 28          	mov    %r11d,0x28(%rdi)
  4148f4:	41 88 14 00          	mov    %dl,(%r8,%rax,1)
  4148f8:	44 8b 4f 28          	mov    0x28(%rdi),%r9d
  4148fc:	0f b6 8f 21 17 00 00 	movzbl 0x1721(%rdi),%ecx
  414903:	48 8b 57 10          	mov    0x10(%rdi),%rdx
  414907:	45 8d 51 01          	lea    0x1(%r9),%r10d
  41490b:	44 89 57 28          	mov    %r10d,0x28(%rdi)
  41490f:	42 88 0c 0a          	mov    %cl,(%rdx,%r9,1)
  414913:	31 d2                	xor    %edx,%edx
  414915:	44 8b 87 24 17 00 00 	mov    0x1724(%rdi),%r8d
  41491c:	66 89 b7 20 17 00 00 	mov    %si,0x1720(%rdi)
  414923:	41 8d 48 f7          	lea    -0x9(%r8),%ecx
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
local void bi_flush(s)
    deflate_state *s;
{
    if (s->bi_valid == 16) {
  414927:	83 f9 10             	cmp    $0x10,%ecx
 */
void _tr_align(s)
    deflate_state *s;
{
    send_bits(s, STATIC_TREES<<1, 3);
    send_code(s, END_BLOCK, static_ltree);
  41492a:	89 8f 24 17 00 00    	mov    %ecx,0x1724(%rdi)
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
local void bi_flush(s)
    deflate_state *s;
{
    if (s->bi_valid == 16) {
  414930:	0f 84 3b 01 00 00    	je     414a71 <_tr_align+0x211>
        put_short(s, s->bi_buf);
        s->bi_buf = 0;
        s->bi_valid = 0;
    } else if (s->bi_valid >= 8) {
  414936:	83 f9 07             	cmp    $0x7,%ecx
  414939:	0f 8e 91 01 00 00    	jle    414ad0 <_tr_align+0x270>
        put_byte(s, (Byte)s->bi_buf);
  41493f:	44 8b 4f 28          	mov    0x28(%rdi),%r9d
  414943:	4c 8b 5f 10          	mov    0x10(%rdi),%r11
  414947:	45 8d 51 01          	lea    0x1(%r9),%r10d
  41494b:	44 89 57 28          	mov    %r10d,0x28(%rdi)
  41494f:	43 88 14 0b          	mov    %dl,(%r11,%r9,1)
        s->bi_buf >>= 8;
        s->bi_valid -= 8;
  414953:	8b 8f 24 17 00 00    	mov    0x1724(%rdi),%ecx
    /* Of the 10 bits for the empty block, we have already sent
     * (10 - bi_valid) bits. The lookahead for the last real code (before
     * the EOB of the previous block) was thus at least one plus the length
     * of the EOB plus what we have just sent of the empty static block.
     */
    if (1 + s->last_eob_len + 10 - s->bi_valid < 9) {
  414959:	8b b7 1c 17 00 00    	mov    0x171c(%rdi),%esi
        put_short(s, s->bi_buf);
        s->bi_buf = 0;
        s->bi_valid = 0;
    } else if (s->bi_valid >= 8) {
        put_byte(s, (Byte)s->bi_buf);
        s->bi_buf >>= 8;
  41495f:	0f b6 97 21 17 00 00 	movzbl 0x1721(%rdi),%edx
        s->bi_valid -= 8;
  414966:	8d 49 f8             	lea    -0x8(%rcx),%ecx
    /* Of the 10 bits for the empty block, we have already sent
     * (10 - bi_valid) bits. The lookahead for the last real code (before
     * the EOB of the previous block) was thus at least one plus the length
     * of the EOB plus what we have just sent of the empty static block.
     */
    if (1 + s->last_eob_len + 10 - s->bi_valid < 9) {
  414969:	83 c6 0b             	add    $0xb,%esi
  41496c:	29 ce                	sub    %ecx,%esi
        put_short(s, s->bi_buf);
        s->bi_buf = 0;
        s->bi_valid = 0;
    } else if (s->bi_valid >= 8) {
        put_byte(s, (Byte)s->bi_buf);
        s->bi_buf >>= 8;
  41496e:	66 89 97 20 17 00 00 	mov    %dx,0x1720(%rdi)
        s->bi_valid -= 8;
  414975:	89 8f 24 17 00 00    	mov    %ecx,0x1724(%rdi)
    /* Of the 10 bits for the empty block, we have already sent
     * (10 - bi_valid) bits. The lookahead for the last real code (before
     * the EOB of the previous block) was thus at least one plus the length
     * of the EOB plus what we have just sent of the empty static block.
     */
    if (1 + s->last_eob_len + 10 - s->bi_valid < 9) {
  41497b:	83 fe 08             	cmp    $0x8,%esi
  41497e:	0f 8f a6 00 00 00    	jg     414a2a <_tr_align+0x1ca>
        send_bits(s, STATIC_TREES<<1, 3);
  414984:	83 f9 0d             	cmp    $0xd,%ecx
  414987:	0f 8f c3 01 00 00    	jg     414b50 <_tr_align+0x2f0>
  41498d:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  414993:	41 d3 e0             	shl    %cl,%r8d
  414996:	83 c1 03             	add    $0x3,%ecx
  414999:	44 09 c2             	or     %r8d,%edx
  41499c:	66 89 97 20 17 00 00 	mov    %dx,0x1720(%rdi)
  4149a3:	89 8f 24 17 00 00    	mov    %ecx,0x1724(%rdi)
        send_code(s, END_BLOCK, static_ltree);
  4149a9:	83 f9 09             	cmp    $0x9,%ecx
  4149ac:	0f 8e 3e 01 00 00    	jle    414af0 <_tr_align+0x290>
  4149b2:	44 8b 47 28          	mov    0x28(%rdi),%r8d
  4149b6:	4c 8b 57 10          	mov    0x10(%rdi),%r10
  4149ba:	45 31 db             	xor    %r11d,%r11d
  4149bd:	41 8d 70 01          	lea    0x1(%r8),%esi
  4149c1:	89 77 28             	mov    %esi,0x28(%rdi)
  4149c4:	43 88 14 02          	mov    %dl,(%r10,%r8,1)
  4149c8:	8b 47 28             	mov    0x28(%rdi),%eax
  4149cb:	0f b6 8f 21 17 00 00 	movzbl 0x1721(%rdi),%ecx
  4149d2:	48 8b 57 10          	mov    0x10(%rdi),%rdx
  4149d6:	44 8d 48 01          	lea    0x1(%rax),%r9d
  4149da:	44 89 4f 28          	mov    %r9d,0x28(%rdi)
  4149de:	88 0c 02             	mov    %cl,(%rdx,%rax,1)
  4149e1:	31 d2                	xor    %edx,%edx
  4149e3:	44 8b 97 24 17 00 00 	mov    0x1724(%rdi),%r10d
  4149ea:	66 44 89 9f 20 17 00 	mov    %r11w,0x1720(%rdi)
  4149f1:	00 
  4149f2:	41 8d 4a f7          	lea    -0x9(%r10),%ecx
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
local void bi_flush(s)
    deflate_state *s;
{
    if (s->bi_valid == 16) {
  4149f6:	83 f9 10             	cmp    $0x10,%ecx
     * the EOB of the previous block) was thus at least one plus the length
     * of the EOB plus what we have just sent of the empty static block.
     */
    if (1 + s->last_eob_len + 10 - s->bi_valid < 9) {
        send_bits(s, STATIC_TREES<<1, 3);
        send_code(s, END_BLOCK, static_ltree);
  4149f9:	89 8f 24 17 00 00    	mov    %ecx,0x1724(%rdi)
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
local void bi_flush(s)
    deflate_state *s;
{
    if (s->bi_valid == 16) {
  4149ff:	0f 84 fd 00 00 00    	je     414b02 <_tr_align+0x2a2>
        put_short(s, s->bi_buf);
        s->bi_buf = 0;
        s->bi_valid = 0;
    } else if (s->bi_valid >= 8) {
  414a05:	83 f9 07             	cmp    $0x7,%ecx
  414a08:	7e 20                	jle    414a2a <_tr_align+0x1ca>
        put_byte(s, (Byte)s->bi_buf);
  414a0a:	8b 47 28             	mov    0x28(%rdi),%eax
  414a0d:	4c 8b 47 10          	mov    0x10(%rdi),%r8
  414a11:	8d 70 01             	lea    0x1(%rax),%esi
  414a14:	89 77 28             	mov    %esi,0x28(%rdi)
  414a17:	41 88 14 00          	mov    %dl,(%r8,%rax,1)
        s->bi_buf >>= 8;
  414a1b:	66 c1 af 20 17 00 00 	shrw   $0x8,0x1720(%rdi)
  414a22:	08 
        s->bi_valid -= 8;
  414a23:	83 af 24 17 00 00 08 	subl   $0x8,0x1724(%rdi)
#ifdef DEBUG
        s->compressed_len += 10L;
#endif
        bi_flush(s);
    }
    s->last_eob_len = 7;
  414a2a:	c7 87 1c 17 00 00 07 	movl   $0x7,0x171c(%rdi)
  414a31:	00 00 00 
  414a34:	c3                   	retq   
  414a35:	0f 1f 00             	nopl   (%rax)
 * on one bit only.
 */
void _tr_align(s)
    deflate_state *s;
{
    send_bits(s, STATIC_TREES<<1, 3);
  414a38:	ba 02 00 00 00       	mov    $0x2,%edx
  414a3d:	d3 e2                	shl    %cl,%edx
  414a3f:	66 0b 97 20 17 00 00 	or     0x1720(%rdi),%dx
  414a46:	83 c1 03             	add    $0x3,%ecx
    send_code(s, END_BLOCK, static_ltree);
  414a49:	83 f9 09             	cmp    $0x9,%ecx
 * on one bit only.
 */
void _tr_align(s)
    deflate_state *s;
{
    send_bits(s, STATIC_TREES<<1, 3);
  414a4c:	89 8f 24 17 00 00    	mov    %ecx,0x1724(%rdi)
  414a52:	66 89 97 20 17 00 00 	mov    %dx,0x1720(%rdi)
    send_code(s, END_BLOCK, static_ltree);
  414a59:	0f 8f 84 fe ff ff    	jg     4148e3 <_tr_align+0x83>
  414a5f:	83 c1 07             	add    $0x7,%ecx
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
local void bi_flush(s)
    deflate_state *s;
{
    if (s->bi_valid == 16) {
  414a62:	83 f9 10             	cmp    $0x10,%ecx
 */
void _tr_align(s)
    deflate_state *s;
{
    send_bits(s, STATIC_TREES<<1, 3);
    send_code(s, END_BLOCK, static_ltree);
  414a65:	89 8f 24 17 00 00    	mov    %ecx,0x1724(%rdi)
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
local void bi_flush(s)
    deflate_state *s;
{
    if (s->bi_valid == 16) {
  414a6b:	0f 85 c5 fe ff ff    	jne    414936 <_tr_align+0xd6>
        put_short(s, s->bi_buf);
  414a71:	44 8b 47 28          	mov    0x28(%rdi),%r8d
  414a75:	4c 8b 57 10          	mov    0x10(%rdi),%r10
        s->bi_buf = 0;
  414a79:	45 31 db             	xor    %r11d,%r11d
 */
local void bi_flush(s)
    deflate_state *s;
{
    if (s->bi_valid == 16) {
        put_short(s, s->bi_buf);
  414a7c:	41 8d 70 01          	lea    0x1(%r8),%esi
  414a80:	89 77 28             	mov    %esi,0x28(%rdi)
  414a83:	43 88 14 02          	mov    %dl,(%r10,%r8,1)
  414a87:	8b 47 28             	mov    0x28(%rdi),%eax
  414a8a:	0f b6 8f 21 17 00 00 	movzbl 0x1721(%rdi),%ecx
  414a91:	48 8b 57 10          	mov    0x10(%rdi),%rdx
  414a95:	44 8d 48 01          	lea    0x1(%rax),%r9d
  414a99:	44 89 4f 28          	mov    %r9d,0x28(%rdi)
  414a9d:	88 0c 02             	mov    %cl,(%rdx,%rax,1)
    /* Of the 10 bits for the empty block, we have already sent
     * (10 - bi_valid) bits. The lookahead for the last real code (before
     * the EOB of the previous block) was thus at least one plus the length
     * of the EOB plus what we have just sent of the empty static block.
     */
    if (1 + s->last_eob_len + 10 - s->bi_valid < 9) {
  414aa0:	b9 03 00 00 00       	mov    $0x3,%ecx
  414aa5:	83 bf 1c 17 00 00 fe 	cmpl   $0xfffffffe,0x171c(%rdi)
local void bi_flush(s)
    deflate_state *s;
{
    if (s->bi_valid == 16) {
        put_short(s, s->bi_buf);
        s->bi_buf = 0;
  414aac:	66 44 89 9f 20 17 00 	mov    %r11w,0x1720(%rdi)
  414ab3:	00 
    /* Of the 10 bits for the empty block, we have already sent
     * (10 - bi_valid) bits. The lookahead for the last real code (before
     * the EOB of the previous block) was thus at least one plus the length
     * of the EOB plus what we have just sent of the empty static block.
     */
    if (1 + s->last_eob_len + 10 - s->bi_valid < 9) {
  414ab4:	ba 02 00 00 00       	mov    $0x2,%edx
    deflate_state *s;
{
    if (s->bi_valid == 16) {
        put_short(s, s->bi_buf);
        s->bi_buf = 0;
        s->bi_valid = 0;
  414ab9:	c7 87 24 17 00 00 00 	movl   $0x0,0x1724(%rdi)
  414ac0:	00 00 00 
    /* Of the 10 bits for the empty block, we have already sent
     * (10 - bi_valid) bits. The lookahead for the last real code (before
     * the EOB of the previous block) was thus at least one plus the length
     * of the EOB plus what we have just sent of the empty static block.
     */
    if (1 + s->last_eob_len + 10 - s->bi_valid < 9) {
  414ac3:	0f 8c d3 fe ff ff    	jl     41499c <_tr_align+0x13c>
  414ac9:	e9 5c ff ff ff       	jmpq   414a2a <_tr_align+0x1ca>
  414ace:	66 90                	xchg   %ax,%ax
  414ad0:	8b 87 1c 17 00 00    	mov    0x171c(%rdi),%eax
  414ad6:	83 c0 0b             	add    $0xb,%eax
  414ad9:	29 c8                	sub    %ecx,%eax
  414adb:	83 f8 08             	cmp    $0x8,%eax
  414ade:	0f 8e a9 fe ff ff    	jle    41498d <_tr_align+0x12d>
#ifdef DEBUG
        s->compressed_len += 10L;
#endif
        bi_flush(s);
    }
    s->last_eob_len = 7;
  414ae4:	c7 87 1c 17 00 00 07 	movl   $0x7,0x171c(%rdi)
  414aeb:	00 00 00 
  414aee:	c3                   	retq   
  414aef:	90                   	nop
     * the EOB of the previous block) was thus at least one plus the length
     * of the EOB plus what we have just sent of the empty static block.
     */
    if (1 + s->last_eob_len + 10 - s->bi_valid < 9) {
        send_bits(s, STATIC_TREES<<1, 3);
        send_code(s, END_BLOCK, static_ltree);
  414af0:	83 c1 07             	add    $0x7,%ecx
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
local void bi_flush(s)
    deflate_state *s;
{
    if (s->bi_valid == 16) {
  414af3:	83 f9 10             	cmp    $0x10,%ecx
     * the EOB of the previous block) was thus at least one plus the length
     * of the EOB plus what we have just sent of the empty static block.
     */
    if (1 + s->last_eob_len + 10 - s->bi_valid < 9) {
        send_bits(s, STATIC_TREES<<1, 3);
        send_code(s, END_BLOCK, static_ltree);
  414af6:	89 8f 24 17 00 00    	mov    %ecx,0x1724(%rdi)
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
local void bi_flush(s)
    deflate_state *s;
{
    if (s->bi_valid == 16) {
  414afc:	0f 85 03 ff ff ff    	jne    414a05 <_tr_align+0x1a5>
        put_short(s, s->bi_buf);
  414b02:	8b 4f 28             	mov    0x28(%rdi),%ecx
  414b05:	4c 8b 4f 10          	mov    0x10(%rdi),%r9
        s->bi_buf = 0;
  414b09:	31 f6                	xor    %esi,%esi
 */
local void bi_flush(s)
    deflate_state *s;
{
    if (s->bi_valid == 16) {
        put_short(s, s->bi_buf);
  414b0b:	44 8d 59 01          	lea    0x1(%rcx),%r11d
  414b0f:	44 89 5f 28          	mov    %r11d,0x28(%rdi)
  414b13:	41 88 14 09          	mov    %dl,(%r9,%rcx,1)
  414b17:	44 8b 57 28          	mov    0x28(%rdi),%r10d
  414b1b:	0f b6 87 21 17 00 00 	movzbl 0x1721(%rdi),%eax
  414b22:	48 8b 57 10          	mov    0x10(%rdi),%rdx
  414b26:	45 8d 42 01          	lea    0x1(%r10),%r8d
  414b2a:	44 89 47 28          	mov    %r8d,0x28(%rdi)
  414b2e:	42 88 04 12          	mov    %al,(%rdx,%r10,1)
        s->bi_buf = 0;
  414b32:	66 89 b7 20 17 00 00 	mov    %si,0x1720(%rdi)
        s->bi_valid = 0;
  414b39:	c7 87 24 17 00 00 00 	movl   $0x0,0x1724(%rdi)
  414b40:	00 00 00 
#ifdef DEBUG
        s->compressed_len += 10L;
#endif
        bi_flush(s);
    }
    s->last_eob_len = 7;
  414b43:	c7 87 1c 17 00 00 07 	movl   $0x7,0x171c(%rdi)
  414b4a:	00 00 00 
  414b4d:	c3                   	retq   
  414b4e:	66 90                	xchg   %ax,%ax
     * (10 - bi_valid) bits. The lookahead for the last real code (before
     * the EOB of the previous block) was thus at least one plus the length
     * of the EOB plus what we have just sent of the empty static block.
     */
    if (1 + s->last_eob_len + 10 - s->bi_valid < 9) {
        send_bits(s, STATIC_TREES<<1, 3);
  414b50:	44 8b 57 28          	mov    0x28(%rdi),%r10d
  414b54:	41 bb 02 00 00 00    	mov    $0x2,%r11d
  414b5a:	4c 8b 4f 10          	mov    0x10(%rdi),%r9
  414b5e:	44 89 d8             	mov    %r11d,%eax
  414b61:	d3 e0                	shl    %cl,%eax
  414b63:	09 c2                	or     %eax,%edx
  414b65:	41 8d 4a 01          	lea    0x1(%r10),%ecx
  414b69:	66 89 97 20 17 00 00 	mov    %dx,0x1720(%rdi)
  414b70:	89 4f 28             	mov    %ecx,0x28(%rdi)
  414b73:	43 88 14 11          	mov    %dl,(%r9,%r10,1)
  414b77:	b9 10 00 00 00       	mov    $0x10,%ecx
  414b7c:	8b 77 28             	mov    0x28(%rdi),%esi
  414b7f:	0f b6 87 21 17 00 00 	movzbl 0x1721(%rdi),%eax
  414b86:	48 8b 57 10          	mov    0x10(%rdi),%rdx
  414b8a:	44 8d 46 01          	lea    0x1(%rsi),%r8d
  414b8e:	44 89 47 28          	mov    %r8d,0x28(%rdi)
  414b92:	88 04 32             	mov    %al,(%rdx,%rsi,1)
  414b95:	44 8b 8f 24 17 00 00 	mov    0x1724(%rdi),%r9d
  414b9c:	44 29 c9             	sub    %r9d,%ecx
  414b9f:	41 d3 fb             	sar    %cl,%r11d
  414ba2:	41 8d 49 f3          	lea    -0xd(%r9),%ecx
  414ba6:	44 89 da             	mov    %r11d,%edx
  414ba9:	66 44 89 9f 20 17 00 	mov    %r11w,0x1720(%rdi)
  414bb0:	00 
  414bb1:	89 8f 24 17 00 00    	mov    %ecx,0x1724(%rdi)
  414bb7:	e9 ed fd ff ff       	jmpq   4149a9 <_tr_align+0x149>
  414bbc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000414bc0 <_tr_flush_block>:
void _tr_flush_block(s, buf, stored_len, eof)
    deflate_state *s;
    charf *buf;       /* input block, or NULL if too old */
    ulg stored_len;   /* length of input block */
    int eof;          /* true if this is the last block for a file */
{
  414bc0:	41 57                	push   %r15
  414bc2:	41 56                	push   %r14
  414bc4:	49 89 d7             	mov    %rdx,%r15
  414bc7:	41 55                	push   %r13
  414bc9:	41 54                	push   %r12
  414bcb:	49 89 f5             	mov    %rsi,%r13
  414bce:	55                   	push   %rbp
  414bcf:	53                   	push   %rbx
  414bd0:	41 89 cc             	mov    %ecx,%r12d
  414bd3:	48 89 fb             	mov    %rdi,%rbx
  414bd6:	48 83 ec 18          	sub    $0x18,%rsp
    ulg opt_lenb, static_lenb; /* opt_len and static_len in bytes */
    int max_blindex = 0;  /* index of last bit length code of non zero freq */

    /* Build the Huffman trees unless a stored block is forced */
    if (s->level > 0) {
  414bda:	44 8b 8f b4 00 00 00 	mov    0xb4(%rdi),%r9d
  414be1:	45 85 c9             	test   %r9d,%r9d
  414be4:	0f 8e 86 11 00 00    	jle    415d70 <_tr_flush_block+0x11b0>

        /* Check if the file is binary or text */
        if (stored_len > 0 && s->strm->data_type == Z_UNKNOWN)
  414bea:	48 85 d2             	test   %rdx,%rdx
  414bed:	0f 85 25 0a 00 00    	jne    415618 <_tr_flush_block+0xa58>
            set_data_type(s);

        /* Construct the literal and distance trees */
        build_tree(s, (tree_desc *)(&(s->l_desc)));
  414bf3:	48 8d b3 48 0b 00 00 	lea    0xb48(%rbx),%rsi
  414bfa:	48 89 df             	mov    %rbx,%rdi
    deflate_state *s;
{
    int max_blindex;  /* index of last bit length code of non zero freq */

    /* Determine the bit length frequencies for literal and distance trees */
    scan_tree(s, (ct_data *)s->dyn_ltree, s->l_desc.max_code);
  414bfd:	4c 8d b3 c4 00 00 00 	lea    0xc4(%rbx),%r14
        /* Check if the file is binary or text */
        if (stored_len > 0 && s->strm->data_type == Z_UNKNOWN)
            set_data_type(s);

        /* Construct the literal and distance trees */
        build_tree(s, (tree_desc *)(&(s->l_desc)));
  414c04:	e8 07 df ff ff       	callq  412b10 <build_tree>
        Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
                s->static_len));

        build_tree(s, (tree_desc *)(&(s->d_desc)));
  414c09:	48 8d b3 60 0b 00 00 	lea    0xb60(%rbx),%rsi
  414c10:	48 89 df             	mov    %rbx,%rdi
  414c13:	e8 f8 de ff ff       	callq  412b10 <build_tree>
    int max_code;    /* and its largest code of non zero frequency */
{
    int n;                     /* iterates over all tree elements */
    int prevlen = -1;          /* last emitted length */
    int curlen;                /* length of current code */
    int nextlen = tree[0].Len; /* length of next code */
  414c18:	0f b7 8b c6 00 00 00 	movzwl 0xc6(%rbx),%ecx
    deflate_state *s;
{
    int max_blindex;  /* index of last bit length code of non zero freq */

    /* Determine the bit length frequencies for literal and distance trees */
    scan_tree(s, (ct_data *)s->dyn_ltree, s->l_desc.max_code);
  414c1f:	4c 63 9b 50 0b 00 00 	movslq 0xb50(%rbx),%r11
    int count = 0;             /* repeat count of the current code */
    int max_count = 7;         /* max repeat count */
    int min_count = 4;         /* min repeat count */

    if (nextlen == 0) max_count = 138, min_count = 3;
    tree[max_code+1].Len = (ush)0xffff; /* guard */
  414c26:	41 b8 ff ff ff ff    	mov    $0xffffffff,%r8d
    int nextlen = tree[0].Len; /* length of next code */
    int count = 0;             /* repeat count of the current code */
    int max_count = 7;         /* max repeat count */
    int min_count = 4;         /* min repeat count */

    if (nextlen == 0) max_count = 138, min_count = 3;
  414c2c:	83 f9 01             	cmp    $0x1,%ecx
    tree[max_code+1].Len = (ush)0xffff; /* guard */
  414c2f:	66 47 89 44 9e 06    	mov    %r8w,0x6(%r14,%r11,4)
    int nextlen = tree[0].Len; /* length of next code */
    int count = 0;             /* repeat count of the current code */
    int max_count = 7;         /* max repeat count */
    int min_count = 4;         /* min repeat count */

    if (nextlen == 0) max_count = 138, min_count = 3;
  414c35:	19 c0                	sbb    %eax,%eax
  414c37:	44 8d 48 04          	lea    0x4(%rax),%r9d
  414c3b:	25 83 00 00 00       	and    $0x83,%eax
  414c40:	83 c0 07             	add    $0x7,%eax
    tree[max_code+1].Len = (ush)0xffff; /* guard */

    for (n = 0; n <= max_code; n++) {
  414c43:	45 85 db             	test   %r11d,%r11d
  414c46:	0f 88 94 01 00 00    	js     414de0 <_tr_flush_block+0x220>
  414c4c:	4c 8d 93 ca 00 00 00 	lea    0xca(%rbx),%r10
  414c53:	4f 8d 44 9e 0a       	lea    0xa(%r14,%r11,4),%r8
        curlen = nextlen; nextlen = tree[n+1].Len;
  414c58:	41 0f b7 32          	movzwl (%r10),%esi
    int min_count = 4;         /* min repeat count */

    if (nextlen == 0) max_count = 138, min_count = 3;
    tree[max_code+1].Len = (ush)0xffff; /* guard */

    for (n = 0; n <= max_code; n++) {
  414c5c:	bf ff ff ff ff       	mov    $0xffffffff,%edi
        curlen = nextlen; nextlen = tree[n+1].Len;
        if (++count < max_count && curlen == nextlen) {
  414c61:	bd 01 00 00 00       	mov    $0x1,%ebp
  414c66:	4c 89 c2             	mov    %r8,%rdx
  414c69:	4c 29 d2             	sub    %r10,%rdx
  414c6c:	48 83 ea 04          	sub    $0x4,%rdx
  414c70:	48 c1 ea 02          	shr    $0x2,%rdx
  414c74:	83 e2 01             	and    $0x1,%edx
  414c77:	39 ce                	cmp    %ecx,%esi
  414c79:	41 0f 94 c3          	sete   %r11b
  414c7d:	75 04                	jne    414c83 <_tr_flush_block+0xc3>
  414c7f:	39 c5                	cmp    %eax,%ebp
  414c81:	7c 2d                	jl     414cb0 <_tr_flush_block+0xf0>
            continue;
        } else if (count < min_count) {
  414c83:	44 39 cd             	cmp    %r9d,%ebp
  414c86:	0f 8d a4 0a 00 00    	jge    415730 <_tr_flush_block+0xb70>
  414c8c:	4c 63 c9             	movslq %ecx,%r9
            s->bl_tree[curlen].Freq += count;
  414c8f:	66 42 83 84 8b ac 0a 	addw   $0x1,0xaac(%rbx,%r9,4)
  414c96:	00 00 01 
            s->bl_tree[REPZ_3_10].Freq++;
        } else {
            s->bl_tree[REPZ_11_138].Freq++;
        }
        count = 0; prevlen = curlen;
        if (nextlen == 0) {
  414c99:	85 f6                	test   %esi,%esi
  414c9b:	89 cf                	mov    %ecx,%edi
  414c9d:	0f 85 bd 0a 00 00    	jne    415760 <_tr_flush_block+0xba0>
            max_count = 138, min_count = 3;
  414ca3:	41 b9 03 00 00 00    	mov    $0x3,%r9d
  414ca9:	b8 8a 00 00 00       	mov    $0x8a,%eax
        } else if (count <= 10) {
            s->bl_tree[REPZ_3_10].Freq++;
        } else {
            s->bl_tree[REPZ_11_138].Freq++;
        }
        count = 0; prevlen = curlen;
  414cae:	31 ed                	xor    %ebp,%ebp
  414cb0:	49 83 c2 04          	add    $0x4,%r10

    if (nextlen == 0) max_count = 138, min_count = 3;
    tree[max_code+1].Len = (ush)0xffff; /* guard */

    for (n = 0; n <= max_code; n++) {
        curlen = nextlen; nextlen = tree[n+1].Len;
  414cb4:	89 f1                	mov    %esi,%ecx
    int min_count = 4;         /* min repeat count */

    if (nextlen == 0) max_count = 138, min_count = 3;
    tree[max_code+1].Len = (ush)0xffff; /* guard */

    for (n = 0; n <= max_code; n++) {
  414cb6:	4d 39 c2             	cmp    %r8,%r10
  414cb9:	0f 84 21 01 00 00    	je     414de0 <_tr_flush_block+0x220>
  414cbf:	48 85 d2             	test   %rdx,%rdx
  414cc2:	0f 84 c0 00 00 00    	je     414d88 <_tr_flush_block+0x1c8>
        curlen = nextlen; nextlen = tree[n+1].Len;
  414cc8:	41 0f b7 0a          	movzwl (%r10),%ecx
        if (++count < max_count && curlen == nextlen) {
  414ccc:	83 c5 01             	add    $0x1,%ebp
  414ccf:	39 f1                	cmp    %esi,%ecx
  414cd1:	0f 94 c2             	sete   %dl
  414cd4:	75 04                	jne    414cda <_tr_flush_block+0x11a>
  414cd6:	39 c5                	cmp    %eax,%ebp
  414cd8:	7c 2c                	jl     414d06 <_tr_flush_block+0x146>
            continue;
        } else if (count < min_count) {
  414cda:	44 39 cd             	cmp    %r9d,%ebp
  414cdd:	0f 8d 0d 11 00 00    	jge    415df0 <_tr_flush_block+0x1230>
  414ce3:	4c 63 de             	movslq %esi,%r11
            s->bl_tree[curlen].Freq += count;
  414ce6:	66 42 01 ac 9b ac 0a 	add    %bp,0xaac(%rbx,%r11,4)
  414ced:	00 00 
            s->bl_tree[REPZ_3_10].Freq++;
        } else {
            s->bl_tree[REPZ_11_138].Freq++;
        }
        count = 0; prevlen = curlen;
        if (nextlen == 0) {
  414cef:	85 c9                	test   %ecx,%ecx
  414cf1:	89 f7                	mov    %esi,%edi
  414cf3:	0f 85 d7 10 00 00    	jne    415dd0 <_tr_flush_block+0x1210>
            max_count = 138, min_count = 3;
  414cf9:	41 b9 03 00 00 00    	mov    $0x3,%r9d
  414cff:	b8 8a 00 00 00       	mov    $0x8a,%eax
        } else if (count <= 10) {
            s->bl_tree[REPZ_3_10].Freq++;
        } else {
            s->bl_tree[REPZ_11_138].Freq++;
        }
        count = 0; prevlen = curlen;
  414d04:	31 ed                	xor    %ebp,%ebp
  414d06:	49 83 c2 04          	add    $0x4,%r10
    int min_count = 4;         /* min repeat count */

    if (nextlen == 0) max_count = 138, min_count = 3;
    tree[max_code+1].Len = (ush)0xffff; /* guard */

    for (n = 0; n <= max_code; n++) {
  414d0a:	4d 39 c2             	cmp    %r8,%r10
  414d0d:	75 79                	jne    414d88 <_tr_flush_block+0x1c8>
  414d0f:	e9 cc 00 00 00       	jmpq   414de0 <_tr_flush_block+0x220>
  414d14:	0f 1f 40 00          	nopl   0x0(%rax)
  414d18:	48 63 c1             	movslq %ecx,%rax
        curlen = nextlen; nextlen = tree[n+1].Len;
        if (++count < max_count && curlen == nextlen) {
            continue;
        } else if (count < min_count) {
            s->bl_tree[curlen].Freq += count;
  414d1b:	66 01 ac 83 ac 0a 00 	add    %bp,0xaac(%rbx,%rax,4)
  414d22:	00 
            s->bl_tree[REPZ_3_10].Freq++;
        } else {
            s->bl_tree[REPZ_11_138].Freq++;
        }
        count = 0; prevlen = curlen;
        if (nextlen == 0) {
  414d23:	85 d2                	test   %edx,%edx
  414d25:	89 cf                	mov    %ecx,%edi
  414d27:	0f 84 a1 00 00 00    	je     414dce <_tr_flush_block+0x20e>
            max_count = 138, min_count = 3;
        } else if (curlen == nextlen) {
  414d2d:	c1 e6 1f             	shl    $0x1f,%esi
  414d30:	31 ed                	xor    %ebp,%ebp
  414d32:	c1 fe 1f             	sar    $0x1f,%esi
  414d35:	44 8d 4e 04          	lea    0x4(%rsi),%r9d
  414d39:	8d 46 07             	lea    0x7(%rsi),%eax

    if (nextlen == 0) max_count = 138, min_count = 3;
    tree[max_code+1].Len = (ush)0xffff; /* guard */

    for (n = 0; n <= max_code; n++) {
        curlen = nextlen; nextlen = tree[n+1].Len;
  414d3c:	41 0f b7 4a 04       	movzwl 0x4(%r10),%ecx
        if (++count < max_count && curlen == nextlen) {
  414d41:	83 c5 01             	add    $0x1,%ebp
  414d44:	4d 8d 5a 04          	lea    0x4(%r10),%r11
  414d48:	39 d1                	cmp    %edx,%ecx
  414d4a:	41 0f 94 c2          	sete   %r10b
  414d4e:	75 04                	jne    414d54 <_tr_flush_block+0x194>
  414d50:	39 c5                	cmp    %eax,%ebp
  414d52:	7c 2b                	jl     414d7f <_tr_flush_block+0x1bf>
            continue;
        } else if (count < min_count) {
  414d54:	44 39 cd             	cmp    %r9d,%ebp
  414d57:	0f 8d 93 0a 00 00    	jge    4157f0 <_tr_flush_block+0xc30>
  414d5d:	48 63 fa             	movslq %edx,%rdi
            s->bl_tree[curlen].Freq += count;
  414d60:	66 01 ac bb ac 0a 00 	add    %bp,0xaac(%rbx,%rdi,4)
  414d67:	00 
            s->bl_tree[REPZ_3_10].Freq++;
        } else {
            s->bl_tree[REPZ_11_138].Freq++;
        }
        count = 0; prevlen = curlen;
        if (nextlen == 0) {
  414d68:	85 c9                	test   %ecx,%ecx
  414d6a:	89 d7                	mov    %edx,%edi
  414d6c:	0f 85 5e 0a 00 00    	jne    4157d0 <_tr_flush_block+0xc10>
            max_count = 138, min_count = 3;
  414d72:	41 b9 03 00 00 00    	mov    $0x3,%r9d
  414d78:	b8 8a 00 00 00       	mov    $0x8a,%eax
        } else if (count <= 10) {
            s->bl_tree[REPZ_3_10].Freq++;
        } else {
            s->bl_tree[REPZ_11_138].Freq++;
        }
        count = 0; prevlen = curlen;
  414d7d:	31 ed                	xor    %ebp,%ebp
  414d7f:	4d 8d 53 04          	lea    0x4(%r11),%r10
    int min_count = 4;         /* min repeat count */

    if (nextlen == 0) max_count = 138, min_count = 3;
    tree[max_code+1].Len = (ush)0xffff; /* guard */

    for (n = 0; n <= max_code; n++) {
  414d83:	4d 39 c2             	cmp    %r8,%r10
  414d86:	74 58                	je     414de0 <_tr_flush_block+0x220>
        curlen = nextlen; nextlen = tree[n+1].Len;
  414d88:	41 0f b7 12          	movzwl (%r10),%edx
        if (++count < max_count && curlen == nextlen) {
  414d8c:	83 c5 01             	add    $0x1,%ebp
  414d8f:	39 ca                	cmp    %ecx,%edx
  414d91:	40 0f 94 c6          	sete   %sil
  414d95:	75 04                	jne    414d9b <_tr_flush_block+0x1db>
  414d97:	39 c5                	cmp    %eax,%ebp
  414d99:	7c a1                	jl     414d3c <_tr_flush_block+0x17c>
            continue;
        } else if (count < min_count) {
  414d9b:	44 39 cd             	cmp    %r9d,%ebp
  414d9e:	0f 8c 74 ff ff ff    	jl     414d18 <_tr_flush_block+0x158>
            s->bl_tree[curlen].Freq += count;
        } else if (curlen != 0) {
  414da4:	85 c9                	test   %ecx,%ecx
  414da6:	0f 84 04 0b 00 00    	je     4158b0 <_tr_flush_block+0xcf0>
            if (curlen != prevlen) s->bl_tree[curlen].Freq++;
  414dac:	39 f9                	cmp    %edi,%ecx
  414dae:	74 0c                	je     414dbc <_tr_flush_block+0x1fc>
  414db0:	48 63 e9             	movslq %ecx,%rbp
  414db3:	66 83 84 ab ac 0a 00 	addw   $0x1,0xaac(%rbx,%rbp,4)
  414dba:	00 01 
            s->bl_tree[REP_3_6].Freq++;
  414dbc:	66 83 83 ec 0a 00 00 	addw   $0x1,0xaec(%rbx)
  414dc3:	01 
            s->bl_tree[REPZ_3_10].Freq++;
        } else {
            s->bl_tree[REPZ_11_138].Freq++;
        }
        count = 0; prevlen = curlen;
        if (nextlen == 0) {
  414dc4:	85 d2                	test   %edx,%edx
  414dc6:	89 cf                	mov    %ecx,%edi
  414dc8:	0f 85 5f ff ff ff    	jne    414d2d <_tr_flush_block+0x16d>
            max_count = 138, min_count = 3;
  414dce:	41 b9 03 00 00 00    	mov    $0x3,%r9d
  414dd4:	b8 8a 00 00 00       	mov    $0x8a,%eax
        } else if (count <= 10) {
            s->bl_tree[REPZ_3_10].Freq++;
        } else {
            s->bl_tree[REPZ_11_138].Freq++;
        }
        count = 0; prevlen = curlen;
  414dd9:	31 ed                	xor    %ebp,%ebp
  414ddb:	e9 5c ff ff ff       	jmpq   414d3c <_tr_flush_block+0x17c>
    int max_code;    /* and its largest code of non zero frequency */
{
    int n;                     /* iterates over all tree elements */
    int prevlen = -1;          /* last emitted length */
    int curlen;                /* length of current code */
    int nextlen = tree[0].Len; /* length of next code */
  414de0:	0f b7 8b ba 09 00 00 	movzwl 0x9ba(%rbx),%ecx
{
    int max_blindex;  /* index of last bit length code of non zero freq */

    /* Determine the bit length frequencies for literal and distance trees */
    scan_tree(s, (ct_data *)s->dyn_ltree, s->l_desc.max_code);
    scan_tree(s, (ct_data *)s->dyn_dtree, s->d_desc.max_code);
  414de7:	48 63 b3 68 0b 00 00 	movslq 0xb68(%rbx),%rsi
  414dee:	48 8d ab b8 09 00 00 	lea    0x9b8(%rbx),%rbp
    int count = 0;             /* repeat count of the current code */
    int max_count = 7;         /* max repeat count */
    int min_count = 4;         /* min repeat count */

    if (nextlen == 0) max_count = 138, min_count = 3;
    tree[max_code+1].Len = (ush)0xffff; /* guard */
  414df5:	ba ff ff ff ff       	mov    $0xffffffff,%edx
    int prevlen = -1;          /* last emitted length */
    int curlen;                /* length of current code */
    int nextlen = tree[0].Len; /* length of next code */
    int count = 0;             /* repeat count of the current code */
    int max_count = 7;         /* max repeat count */
    int min_count = 4;         /* min repeat count */
  414dfa:	83 f9 01             	cmp    $0x1,%ecx

    if (nextlen == 0) max_count = 138, min_count = 3;
    tree[max_code+1].Len = (ush)0xffff; /* guard */
  414dfd:	66 89 54 b5 06       	mov    %dx,0x6(%rbp,%rsi,4)
    int prevlen = -1;          /* last emitted length */
    int curlen;                /* length of current code */
    int nextlen = tree[0].Len; /* length of next code */
    int count = 0;             /* repeat count of the current code */
    int max_count = 7;         /* max repeat count */
    int min_count = 4;         /* min repeat count */
  414e02:	19 c0                	sbb    %eax,%eax
  414e04:	44 8d 50 04          	lea    0x4(%rax),%r10d
  414e08:	25 83 00 00 00       	and    $0x83,%eax
  414e0d:	83 c0 07             	add    $0x7,%eax

    if (nextlen == 0) max_count = 138, min_count = 3;
    tree[max_code+1].Len = (ush)0xffff; /* guard */

    for (n = 0; n <= max_code; n++) {
  414e10:	85 f6                	test   %esi,%esi
  414e12:	0f 88 a0 01 00 00    	js     414fb8 <_tr_flush_block+0x3f8>
  414e18:	4c 8d 83 be 09 00 00 	lea    0x9be(%rbx),%r8
  414e1f:	4c 8d 5c b5 0a       	lea    0xa(%rbp,%rsi,4),%r11
        curlen = nextlen; nextlen = tree[n+1].Len;
  414e24:	45 0f b7 08          	movzwl (%r8),%r9d
    int min_count = 4;         /* min repeat count */

    if (nextlen == 0) max_count = 138, min_count = 3;
    tree[max_code+1].Len = (ush)0xffff; /* guard */

    for (n = 0; n <= max_code; n++) {
  414e28:	ba ff ff ff ff       	mov    $0xffffffff,%edx
        curlen = nextlen; nextlen = tree[n+1].Len;
        if (++count < max_count && curlen == nextlen) {
  414e2d:	bf 01 00 00 00       	mov    $0x1,%edi
  414e32:	4c 89 de             	mov    %r11,%rsi
  414e35:	4c 29 c6             	sub    %r8,%rsi
  414e38:	48 83 ee 04          	sub    $0x4,%rsi
  414e3c:	48 c1 ee 02          	shr    $0x2,%rsi
  414e40:	83 e6 01             	and    $0x1,%esi
  414e43:	41 39 c9             	cmp    %ecx,%r9d
  414e46:	0f 94 04 24          	sete   (%rsp)
  414e4a:	75 04                	jne    414e50 <_tr_flush_block+0x290>
  414e4c:	39 c7                	cmp    %eax,%edi
  414e4e:	7c 2e                	jl     414e7e <_tr_flush_block+0x2be>
            continue;
        } else if (count < min_count) {
  414e50:	44 39 d7             	cmp    %r10d,%edi
  414e53:	0f 8d 27 09 00 00    	jge    415780 <_tr_flush_block+0xbc0>
  414e59:	4c 63 d1             	movslq %ecx,%r10
            s->bl_tree[curlen].Freq += count;
  414e5c:	66 42 83 84 93 ac 0a 	addw   $0x1,0xaac(%rbx,%r10,4)
  414e63:	00 00 01 
            s->bl_tree[REPZ_3_10].Freq++;
        } else {
            s->bl_tree[REPZ_11_138].Freq++;
        }
        count = 0; prevlen = curlen;
        if (nextlen == 0) {
  414e66:	45 85 c9             	test   %r9d,%r9d
  414e69:	89 ca                	mov    %ecx,%edx
  414e6b:	0f 85 3f 09 00 00    	jne    4157b0 <_tr_flush_block+0xbf0>
            max_count = 138, min_count = 3;
  414e71:	41 ba 03 00 00 00    	mov    $0x3,%r10d
  414e77:	b8 8a 00 00 00       	mov    $0x8a,%eax
        } else if (count <= 10) {
            s->bl_tree[REPZ_3_10].Freq++;
        } else {
            s->bl_tree[REPZ_11_138].Freq++;
        }
        count = 0; prevlen = curlen;
  414e7c:	31 ff                	xor    %edi,%edi
  414e7e:	49 83 c0 04          	add    $0x4,%r8

    if (nextlen == 0) max_count = 138, min_count = 3;
    tree[max_code+1].Len = (ush)0xffff; /* guard */

    for (n = 0; n <= max_code; n++) {
        curlen = nextlen; nextlen = tree[n+1].Len;
  414e82:	44 89 c9             	mov    %r9d,%ecx
    int min_count = 4;         /* min repeat count */

    if (nextlen == 0) max_count = 138, min_count = 3;
    tree[max_code+1].Len = (ush)0xffff; /* guard */

    for (n = 0; n <= max_code; n++) {
  414e85:	4d 39 d8             	cmp    %r11,%r8
  414e88:	0f 84 2a 01 00 00    	je     414fb8 <_tr_flush_block+0x3f8>
  414e8e:	48 85 f6             	test   %rsi,%rsi
  414e91:	0f 84 c5 00 00 00    	je     414f5c <_tr_flush_block+0x39c>
        curlen = nextlen; nextlen = tree[n+1].Len;
  414e97:	41 0f b7 08          	movzwl (%r8),%ecx
        if (++count < max_count && curlen == nextlen) {
  414e9b:	83 c7 01             	add    $0x1,%edi
  414e9e:	44 39 c9             	cmp    %r9d,%ecx
  414ea1:	40 0f 94 c6          	sete   %sil
  414ea5:	75 04                	jne    414eab <_tr_flush_block+0x2eb>
  414ea7:	39 c7                	cmp    %eax,%edi
  414ea9:	7c 2c                	jl     414ed7 <_tr_flush_block+0x317>
            continue;
        } else if (count < min_count) {
  414eab:	44 39 d7             	cmp    %r10d,%edi
  414eae:	0f 8d 7c 0f 00 00    	jge    415e30 <_tr_flush_block+0x1270>
  414eb4:	49 63 c1             	movslq %r9d,%rax
            s->bl_tree[curlen].Freq += count;
  414eb7:	66 01 bc 83 ac 0a 00 	add    %di,0xaac(%rbx,%rax,4)
  414ebe:	00 
            s->bl_tree[REPZ_3_10].Freq++;
        } else {
            s->bl_tree[REPZ_11_138].Freq++;
        }
        count = 0; prevlen = curlen;
        if (nextlen == 0) {
  414ebf:	85 c9                	test   %ecx,%ecx
  414ec1:	44 89 ca             	mov    %r9d,%edx
  414ec4:	0f 85 4e 0f 00 00    	jne    415e18 <_tr_flush_block+0x1258>
            max_count = 138, min_count = 3;
  414eca:	41 ba 03 00 00 00    	mov    $0x3,%r10d
  414ed0:	b8 8a 00 00 00       	mov    $0x8a,%eax
        } else if (count <= 10) {
            s->bl_tree[REPZ_3_10].Freq++;
        } else {
            s->bl_tree[REPZ_11_138].Freq++;
        }
        count = 0; prevlen = curlen;
  414ed5:	31 ff                	xor    %edi,%edi
  414ed7:	49 83 c0 04          	add    $0x4,%r8
    int min_count = 4;         /* min repeat count */

    if (nextlen == 0) max_count = 138, min_count = 3;
    tree[max_code+1].Len = (ush)0xffff; /* guard */

    for (n = 0; n <= max_code; n++) {
  414edb:	4d 39 d8             	cmp    %r11,%r8
  414ede:	75 7c                	jne    414f5c <_tr_flush_block+0x39c>
  414ee0:	e9 d3 00 00 00       	jmpq   414fb8 <_tr_flush_block+0x3f8>
  414ee5:	0f 1f 00             	nopl   (%rax)
  414ee8:	4c 63 d1             	movslq %ecx,%r10
        curlen = nextlen; nextlen = tree[n+1].Len;
        if (++count < max_count && curlen == nextlen) {
            continue;
        } else if (count < min_count) {
            s->bl_tree[curlen].Freq += count;
  414eeb:	66 42 01 bc 93 ac 0a 	add    %di,0xaac(%rbx,%r10,4)
  414ef2:	00 00 
            s->bl_tree[REPZ_3_10].Freq++;
        } else {
            s->bl_tree[REPZ_11_138].Freq++;
        }
        count = 0; prevlen = curlen;
        if (nextlen == 0) {
  414ef4:	85 f6                	test   %esi,%esi
  414ef6:	89 ca                	mov    %ecx,%edx
  414ef8:	0f 84 a4 00 00 00    	je     414fa2 <_tr_flush_block+0x3e2>
            max_count = 138, min_count = 3;
        } else if (curlen == nextlen) {
  414efe:	41 c1 e1 1f          	shl    $0x1f,%r9d
  414f02:	31 ff                	xor    %edi,%edi
  414f04:	41 c1 f9 1f          	sar    $0x1f,%r9d
  414f08:	45 8d 51 04          	lea    0x4(%r9),%r10d
  414f0c:	41 8d 41 07          	lea    0x7(%r9),%eax

    if (nextlen == 0) max_count = 138, min_count = 3;
    tree[max_code+1].Len = (ush)0xffff; /* guard */

    for (n = 0; n <= max_code; n++) {
        curlen = nextlen; nextlen = tree[n+1].Len;
  414f10:	41 0f b7 48 04       	movzwl 0x4(%r8),%ecx
        if (++count < max_count && curlen == nextlen) {
  414f15:	83 c7 01             	add    $0x1,%edi
  414f18:	4d 8d 48 04          	lea    0x4(%r8),%r9
  414f1c:	39 f1                	cmp    %esi,%ecx
  414f1e:	41 0f 94 c0          	sete   %r8b
  414f22:	75 04                	jne    414f28 <_tr_flush_block+0x368>
  414f24:	39 c7                	cmp    %eax,%edi
  414f26:	7c 2b                	jl     414f53 <_tr_flush_block+0x393>
            continue;
        } else if (count < min_count) {
  414f28:	44 39 d7             	cmp    %r10d,%edi
  414f2b:	0f 8d ff 08 00 00    	jge    415830 <_tr_flush_block+0xc70>
  414f31:	48 63 c6             	movslq %esi,%rax
            s->bl_tree[curlen].Freq += count;
  414f34:	66 01 bc 83 ac 0a 00 	add    %di,0xaac(%rbx,%rax,4)
  414f3b:	00 
            s->bl_tree[REPZ_3_10].Freq++;
        } else {
            s->bl_tree[REPZ_11_138].Freq++;
        }
        count = 0; prevlen = curlen;
        if (nextlen == 0) {
  414f3c:	85 c9                	test   %ecx,%ecx
  414f3e:	89 f2                	mov    %esi,%edx
  414f40:	0f 85 ca 08 00 00    	jne    415810 <_tr_flush_block+0xc50>
            max_count = 138, min_count = 3;
  414f46:	41 ba 03 00 00 00    	mov    $0x3,%r10d
  414f4c:	b8 8a 00 00 00       	mov    $0x8a,%eax
        } else if (count <= 10) {
            s->bl_tree[REPZ_3_10].Freq++;
        } else {
            s->bl_tree[REPZ_11_138].Freq++;
        }
        count = 0; prevlen = curlen;
  414f51:	31 ff                	xor    %edi,%edi
  414f53:	4d 8d 41 04          	lea    0x4(%r9),%r8
    int min_count = 4;         /* min repeat count */

    if (nextlen == 0) max_count = 138, min_count = 3;
    tree[max_code+1].Len = (ush)0xffff; /* guard */

    for (n = 0; n <= max_code; n++) {
  414f57:	4d 39 d8             	cmp    %r11,%r8
  414f5a:	74 5c                	je     414fb8 <_tr_flush_block+0x3f8>
        curlen = nextlen; nextlen = tree[n+1].Len;
  414f5c:	41 0f b7 30          	movzwl (%r8),%esi
        if (++count < max_count && curlen == nextlen) {
  414f60:	83 c7 01             	add    $0x1,%edi
  414f63:	39 ce                	cmp    %ecx,%esi
  414f65:	41 0f 94 c1          	sete   %r9b
  414f69:	75 04                	jne    414f6f <_tr_flush_block+0x3af>
  414f6b:	39 c7                	cmp    %eax,%edi
  414f6d:	7c a1                	jl     414f10 <_tr_flush_block+0x350>
            continue;
        } else if (count < min_count) {
  414f6f:	44 39 d7             	cmp    %r10d,%edi
  414f72:	0f 8c 70 ff ff ff    	jl     414ee8 <_tr_flush_block+0x328>
            s->bl_tree[curlen].Freq += count;
        } else if (curlen != 0) {
  414f78:	85 c9                	test   %ecx,%ecx
  414f7a:	0f 84 d0 08 00 00    	je     415850 <_tr_flush_block+0xc90>
            if (curlen != prevlen) s->bl_tree[curlen].Freq++;
  414f80:	39 d1                	cmp    %edx,%ecx
  414f82:	74 0c                	je     414f90 <_tr_flush_block+0x3d0>
  414f84:	48 63 f9             	movslq %ecx,%rdi
  414f87:	66 83 84 bb ac 0a 00 	addw   $0x1,0xaac(%rbx,%rdi,4)
  414f8e:	00 01 
            s->bl_tree[REP_3_6].Freq++;
  414f90:	66 83 83 ec 0a 00 00 	addw   $0x1,0xaec(%rbx)
  414f97:	01 
            s->bl_tree[REPZ_3_10].Freq++;
        } else {
            s->bl_tree[REPZ_11_138].Freq++;
        }
        count = 0; prevlen = curlen;
        if (nextlen == 0) {
  414f98:	85 f6                	test   %esi,%esi
  414f9a:	89 ca                	mov    %ecx,%edx
  414f9c:	0f 85 5c ff ff ff    	jne    414efe <_tr_flush_block+0x33e>
            max_count = 138, min_count = 3;
  414fa2:	41 ba 03 00 00 00    	mov    $0x3,%r10d
  414fa8:	b8 8a 00 00 00       	mov    $0x8a,%eax
        } else if (count <= 10) {
            s->bl_tree[REPZ_3_10].Freq++;
        } else {
            s->bl_tree[REPZ_11_138].Freq++;
        }
        count = 0; prevlen = curlen;
  414fad:	31 ff                	xor    %edi,%edi
  414faf:	e9 5c ff ff ff       	jmpq   414f10 <_tr_flush_block+0x350>
  414fb4:	0f 1f 40 00          	nopl   0x0(%rax)
    /* Determine the bit length frequencies for literal and distance trees */
    scan_tree(s, (ct_data *)s->dyn_ltree, s->l_desc.max_code);
    scan_tree(s, (ct_data *)s->dyn_dtree, s->d_desc.max_code);

    /* Build the bit length tree: */
    build_tree(s, (tree_desc *)(&(s->bl_desc)));
  414fb8:	48 8d b3 78 0b 00 00 	lea    0xb78(%rbx),%rsi
  414fbf:	48 89 df             	mov    %rbx,%rdi
  414fc2:	e8 49 db ff ff       	callq  412b10 <build_tree>
    /* Determine the number of bit length codes to send. The pkzip format
     * requires that at least 4 bit length codes be sent. (appnote.txt says
     * 3 but the actual value used is 4.)
     */
    for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {
        if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;
  414fc7:	66 83 bb ea 0a 00 00 	cmpw   $0x0,0xaea(%rbx)
  414fce:	00 
  414fcf:	0f 85 02 11 00 00    	jne    4160d7 <_tr_flush_block+0x1517>
  414fd5:	66 83 bb b2 0a 00 00 	cmpw   $0x0,0xab2(%rbx)
  414fdc:	00 
  414fdd:	0f 85 ed 10 00 00    	jne    4160d0 <_tr_flush_block+0x1510>
  414fe3:	66 83 bb e6 0a 00 00 	cmpw   $0x0,0xae6(%rbx)
  414fea:	00 
  414feb:	0f 85 d8 10 00 00    	jne    4160c9 <_tr_flush_block+0x1509>
  414ff1:	66 83 bb b6 0a 00 00 	cmpw   $0x0,0xab6(%rbx)
  414ff8:	00 
  414ff9:	0f 85 c3 10 00 00    	jne    4160c2 <_tr_flush_block+0x1502>
  414fff:	66 83 bb e2 0a 00 00 	cmpw   $0x0,0xae2(%rbx)
  415006:	00 
  415007:	0f 85 ae 10 00 00    	jne    4160bb <_tr_flush_block+0x14fb>
  41500d:	66 83 bb ba 0a 00 00 	cmpw   $0x0,0xaba(%rbx)
  415014:	00 
  415015:	0f 85 ca 10 00 00    	jne    4160e5 <_tr_flush_block+0x1525>
  41501b:	66 83 bb de 0a 00 00 	cmpw   $0x0,0xade(%rbx)
  415022:	00 
  415023:	0f 85 b5 10 00 00    	jne    4160de <_tr_flush_block+0x151e>
  415029:	66 83 bb be 0a 00 00 	cmpw   $0x0,0xabe(%rbx)
  415030:	00 
  415031:	0f 85 c3 10 00 00    	jne    4160fa <_tr_flush_block+0x153a>
  415037:	66 83 bb da 0a 00 00 	cmpw   $0x0,0xada(%rbx)
  41503e:	00 
  41503f:	0f 85 60 10 00 00    	jne    4160a5 <_tr_flush_block+0x14e5>
  415045:	66 83 bb c2 0a 00 00 	cmpw   $0x0,0xac2(%rbx)
  41504c:	00 
  41504d:	0f 85 99 10 00 00    	jne    4160ec <_tr_flush_block+0x152c>
  415053:	66 83 bb d6 0a 00 00 	cmpw   $0x0,0xad6(%rbx)
  41505a:	00 
  41505b:	0f 85 92 10 00 00    	jne    4160f3 <_tr_flush_block+0x1533>
  415061:	66 83 bb c6 0a 00 00 	cmpw   $0x0,0xac6(%rbx)
  415068:	00 
  415069:	0f 85 99 10 00 00    	jne    416108 <_tr_flush_block+0x1548>
  41506f:	66 83 bb d2 0a 00 00 	cmpw   $0x0,0xad2(%rbx)
  415076:	00 
  415077:	0f 85 92 10 00 00    	jne    41610f <_tr_flush_block+0x154f>
  41507d:	66 83 bb ca 0a 00 00 	cmpw   $0x0,0xaca(%rbx)
  415084:	00 
  415085:	0f 85 8b 10 00 00    	jne    416116 <_tr_flush_block+0x1556>
  41508b:	66 83 bb ce 0a 00 00 	cmpw   $0x0,0xace(%rbx)
  415092:	00 
  415093:	0f 85 84 10 00 00    	jne    41611d <_tr_flush_block+0x155d>
  415099:	66 83 bb ae 0a 00 00 	cmpw   $0x0,0xaae(%rbx)
  4150a0:	00 
  4150a1:	0f 85 5a 10 00 00    	jne    416101 <_tr_flush_block+0x1541>
  4150a7:	b8 17 00 00 00       	mov    $0x17,%eax
  4150ac:	be 02 00 00 00       	mov    $0x2,%esi
    }
    /* Update opt_len to include the bit length tree and counts */
    s->opt_len += 3*(max_blindex+1) + 5+5+4;
  4150b1:	48 03 83 08 17 00 00 	add    0x1708(%rbx),%rax
         */
        max_blindex = build_bl_tree(s);

        /* Determine the best encoding. Compute the block lengths in bytes. */
        opt_lenb = (s->opt_len+3+7)>>3;
        static_lenb = (s->static_len+3+7)>>3;
  4150b8:	4c 8b 9b 10 17 00 00 	mov    0x1710(%rbx),%r11
    }

#ifdef FORCE_STORED
    if (buf != (char*)0) { /* force stored block */
#else
    if (stored_len+4 <= opt_lenb && buf != (char*)0) {
  4150bf:	4d 8d 57 04          	lea    0x4(%r15),%r10
         */
        max_blindex = build_bl_tree(s);

        /* Determine the best encoding. Compute the block lengths in bytes. */
        opt_lenb = (s->opt_len+3+7)>>3;
        static_lenb = (s->static_len+3+7)>>3;
  4150c3:	49 8d 7b 0a          	lea    0xa(%r11),%rdi
     */
    for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {
        if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;
    }
    /* Update opt_len to include the bit length tree and counts */
    s->opt_len += 3*(max_blindex+1) + 5+5+4;
  4150c7:	48 89 83 08 17 00 00 	mov    %rax,0x1708(%rbx)
         * in bl_order of the last bit length code to send.
         */
        max_blindex = build_bl_tree(s);

        /* Determine the best encoding. Compute the block lengths in bytes. */
        opt_lenb = (s->opt_len+3+7)>>3;
  4150ce:	48 83 c0 0a          	add    $0xa,%rax
  4150d2:	48 c1 e8 03          	shr    $0x3,%rax
        static_lenb = (s->static_len+3+7)>>3;
  4150d6:	48 c1 ef 03          	shr    $0x3,%rdi
  4150da:	48 39 f8             	cmp    %rdi,%rax
  4150dd:	48 0f 47 c7          	cmova  %rdi,%rax
    }

#ifdef FORCE_STORED
    if (buf != (char*)0) { /* force stored block */
#else
    if (stored_len+4 <= opt_lenb && buf != (char*)0) {
  4150e1:	49 39 c2             	cmp    %rax,%r10
  4150e4:	0f 87 e6 07 00 00    	ja     4158d0 <_tr_flush_block+0xd10>
  4150ea:	4d 85 ed             	test   %r13,%r13
  4150ed:	0f 84 dd 07 00 00    	je     4158d0 <_tr_flush_block+0xd10>
         * Otherwise we can't have processed more than WSIZE input bytes since
         * the last block flush, because compression would have been
         * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
         * transform a block into a stored block.
         */
        _tr_stored_block(s, buf, stored_len, eof);
  4150f3:	44 89 e1             	mov    %r12d,%ecx
  4150f6:	4c 89 fa             	mov    %r15,%rdx
  4150f9:	4c 89 ee             	mov    %r13,%rsi
  4150fc:	48 89 df             	mov    %rbx,%rdi
  4150ff:	e8 bc f3 ff ff       	callq  4144c0 <_tr_stored_block>
    deflate_state *s;
{
    int n; /* iterates over tree elements */

    /* Initialize the trees. */
    for (n = 0; n < L_CODES;  n++) s->dyn_ltree[n].Freq = 0;
  415104:	31 c0                	xor    %eax,%eax
  415106:	31 f6                	xor    %esi,%esi
  415108:	45 31 c0             	xor    %r8d,%r8d
  41510b:	31 d2                	xor    %edx,%edx
  41510d:	66 89 83 cc 00 00 00 	mov    %ax,0xcc(%rbx)
  415114:	31 c0                	xor    %eax,%eax
  415116:	31 c9                	xor    %ecx,%ecx
  415118:	66 89 b3 c4 00 00 00 	mov    %si,0xc4(%rbx)
  41511f:	66 44 89 83 c8 00 00 	mov    %r8w,0xc8(%rbx)
  415126:	00 
  415127:	66 89 93 d0 00 00 00 	mov    %dx,0xd0(%rbx)
  41512e:	31 ff                	xor    %edi,%edi
  415130:	45 31 ff             	xor    %r15d,%r15d
  415133:	45 31 c9             	xor    %r9d,%r9d
  415136:	45 31 d2             	xor    %r10d,%r10d
  415139:	45 31 db             	xor    %r11d,%r11d
  41513c:	45 31 f6             	xor    %r14d,%r14d
  41513f:	45 31 ed             	xor    %r13d,%r13d
  415142:	31 f6                	xor    %esi,%esi
  415144:	45 31 c0             	xor    %r8d,%r8d
  415147:	66 89 83 fc 00 00 00 	mov    %ax,0xfc(%rbx)
  41514e:	31 d2                	xor    %edx,%edx
  415150:	48 8d 43 40          	lea    0x40(%rbx),%rax
  415154:	66 89 8b f0 00 00 00 	mov    %cx,0xf0(%rbx)
  41515b:	66 89 bb d4 00 00 00 	mov    %di,0xd4(%rbx)
  415162:	66 44 89 bb d8 00 00 	mov    %r15w,0xd8(%rbx)
  415169:	00 
  41516a:	66 44 89 8b dc 00 00 	mov    %r9w,0xdc(%rbx)
  415171:	00 
  415172:	b9 10 00 00 00       	mov    $0x10,%ecx
  415177:	66 44 89 93 e0 00 00 	mov    %r10w,0xe0(%rbx)
  41517e:	00 
  41517f:	66 44 89 9b e4 00 00 	mov    %r11w,0xe4(%rbx)
  415186:	00 
  415187:	0f 18 8b 64 01 00 00 	prefetcht0 0x164(%rbx)
  41518e:	66 44 89 b3 e8 00 00 	mov    %r14w,0xe8(%rbx)
  415195:	00 
  415196:	66 44 89 ab ec 00 00 	mov    %r13w,0xec(%rbx)
  41519d:	00 
  41519e:	66 89 b3 f4 00 00 00 	mov    %si,0xf4(%rbx)
  4151a5:	66 44 89 83 f8 00 00 	mov    %r8w,0xf8(%rbx)
  4151ac:	00 
  4151ad:	66 89 93 00 01 00 00 	mov    %dx,0x100(%rbx)
  4151b4:	31 ff                	xor    %edi,%edi
  4151b6:	45 31 ff             	xor    %r15d,%r15d
  4151b9:	45 31 c9             	xor    %r9d,%r9d
  4151bc:	45 31 d2             	xor    %r10d,%r10d
  4151bf:	66 89 b8 c4 00 00 00 	mov    %di,0xc4(%rax)
  4151c6:	66 44 89 b8 c8 00 00 	mov    %r15w,0xc8(%rax)
  4151cd:	00 
  4151ce:	66 44 89 88 cc 00 00 	mov    %r9w,0xcc(%rax)
  4151d5:	00 
  4151d6:	66 44 89 90 d0 00 00 	mov    %r10w,0xd0(%rax)
  4151dd:	00 
  4151de:	45 31 db             	xor    %r11d,%r11d
  4151e1:	45 31 f6             	xor    %r14d,%r14d
  4151e4:	45 31 ed             	xor    %r13d,%r13d
  4151e7:	31 f6                	xor    %esi,%esi
  4151e9:	45 31 c0             	xor    %r8d,%r8d
  4151ec:	31 d2                	xor    %edx,%edx
  4151ee:	31 ff                	xor    %edi,%edi
  4151f0:	45 31 ff             	xor    %r15d,%r15d
  4151f3:	45 31 c9             	xor    %r9d,%r9d
  4151f6:	45 31 d2             	xor    %r10d,%r10d
  4151f9:	66 44 89 98 d4 00 00 	mov    %r11w,0xd4(%rax)
  415200:	00 
  415201:	66 44 89 b0 d8 00 00 	mov    %r14w,0xd8(%rax)
  415208:	00 
  415209:	45 31 db             	xor    %r11d,%r11d
  41520c:	66 44 89 a8 dc 00 00 	mov    %r13w,0xdc(%rax)
  415213:	00 
  415214:	66 89 b0 e0 00 00 00 	mov    %si,0xe0(%rax)
  41521b:	45 31 f6             	xor    %r14d,%r14d
  41521e:	66 44 89 80 e4 00 00 	mov    %r8w,0xe4(%rax)
  415225:	00 
  415226:	66 89 90 e8 00 00 00 	mov    %dx,0xe8(%rax)
  41522d:	45 31 ed             	xor    %r13d,%r13d
  415230:	66 89 b8 ec 00 00 00 	mov    %di,0xec(%rax)
  415237:	66 44 89 b8 f0 00 00 	mov    %r15w,0xf0(%rax)
  41523e:	00 
  41523f:	31 f6                	xor    %esi,%esi
  415241:	66 44 89 88 f4 00 00 	mov    %r9w,0xf4(%rax)
  415248:	00 
  415249:	66 44 89 90 f8 00 00 	mov    %r10w,0xf8(%rax)
  415250:	00 
  415251:	45 31 c0             	xor    %r8d,%r8d
  415254:	31 d2                	xor    %edx,%edx
  415256:	31 ff                	xor    %edi,%edi
  415258:	45 31 ff             	xor    %r15d,%r15d
  41525b:	45 31 c9             	xor    %r9d,%r9d
  41525e:	45 31 d2             	xor    %r10d,%r10d
  415261:	66 44 89 98 fc 00 00 	mov    %r11w,0xfc(%rax)
  415268:	00 
  415269:	66 44 89 b0 00 01 00 	mov    %r14w,0x100(%rax)
  415270:	00 
  415271:	66 44 89 a8 04 01 00 	mov    %r13w,0x104(%rax)
  415278:	00 
  415279:	45 31 db             	xor    %r11d,%r11d
  41527c:	66 89 b0 08 01 00 00 	mov    %si,0x108(%rax)
  415283:	66 44 89 80 0c 01 00 	mov    %r8w,0x10c(%rax)
  41528a:	00 
  41528b:	45 31 f6             	xor    %r14d,%r14d
  41528e:	66 89 90 10 01 00 00 	mov    %dx,0x110(%rax)
  415295:	66 89 b8 14 01 00 00 	mov    %di,0x114(%rax)
  41529c:	45 31 ed             	xor    %r13d,%r13d
  41529f:	66 44 89 b8 18 01 00 	mov    %r15w,0x118(%rax)
  4152a6:	00 
  4152a7:	66 44 89 88 1c 01 00 	mov    %r9w,0x11c(%rax)
  4152ae:	00 
  4152af:	31 f6                	xor    %esi,%esi
  4152b1:	66 44 89 90 20 01 00 	mov    %r10w,0x120(%rax)
  4152b8:	00 
  4152b9:	45 31 c0             	xor    %r8d,%r8d
  4152bc:	31 d2                	xor    %edx,%edx
  4152be:	31 ff                	xor    %edi,%edi
  4152c0:	45 31 ff             	xor    %r15d,%r15d
  4152c3:	45 31 c9             	xor    %r9d,%r9d
  4152c6:	45 31 d2             	xor    %r10d,%r10d
  4152c9:	66 44 89 98 24 01 00 	mov    %r11w,0x124(%rax)
  4152d0:	00 
  4152d1:	66 44 89 b0 28 01 00 	mov    %r14w,0x128(%rax)
  4152d8:	00 
  4152d9:	66 44 89 a8 2c 01 00 	mov    %r13w,0x12c(%rax)
  4152e0:	00 
  4152e1:	66 89 b0 30 01 00 00 	mov    %si,0x130(%rax)
  4152e8:	45 31 db             	xor    %r11d,%r11d
  4152eb:	66 44 89 80 34 01 00 	mov    %r8w,0x134(%rax)
  4152f2:	00 
  4152f3:	66 89 90 38 01 00 00 	mov    %dx,0x138(%rax)
  4152fa:	45 31 f6             	xor    %r14d,%r14d
  4152fd:	66 89 b8 3c 01 00 00 	mov    %di,0x13c(%rax)
  415304:	45 31 ed             	xor    %r13d,%r13d
  415307:	31 f6                	xor    %esi,%esi
  415309:	45 31 c0             	xor    %r8d,%r8d
  41530c:	31 d2                	xor    %edx,%edx
  41530e:	31 ff                	xor    %edi,%edi
  415310:	0f 18 88 64 01 00 00 	prefetcht0 0x164(%rax)
  415317:	0f 18 88 a4 01 00 00 	prefetcht0 0x1a4(%rax)
  41531e:	66 44 89 b8 40 01 00 	mov    %r15w,0x140(%rax)
  415325:	00 
  415326:	66 44 89 88 44 01 00 	mov    %r9w,0x144(%rax)
  41532d:	00 
  41532e:	66 44 89 90 48 01 00 	mov    %r10w,0x148(%rax)
  415335:	00 
  415336:	45 31 ff             	xor    %r15d,%r15d
  415339:	45 31 c9             	xor    %r9d,%r9d
  41533c:	45 31 d2             	xor    %r10d,%r10d
  41533f:	66 44 89 98 4c 01 00 	mov    %r11w,0x14c(%rax)
  415346:	00 
  415347:	66 44 89 b0 50 01 00 	mov    %r14w,0x150(%rax)
  41534e:	00 
  41534f:	66 44 89 a8 54 01 00 	mov    %r13w,0x154(%rax)
  415356:	00 
  415357:	45 31 db             	xor    %r11d,%r11d
  41535a:	66 89 b0 58 01 00 00 	mov    %si,0x158(%rax)
  415361:	66 44 89 80 5c 01 00 	mov    %r8w,0x15c(%rax)
  415368:	00 
  415369:	45 31 f6             	xor    %r14d,%r14d
  41536c:	66 89 90 60 01 00 00 	mov    %dx,0x160(%rax)
  415373:	66 89 b8 64 01 00 00 	mov    %di,0x164(%rax)
  41537a:	45 31 ed             	xor    %r13d,%r13d
  41537d:	66 44 89 b8 68 01 00 	mov    %r15w,0x168(%rax)
  415384:	00 
  415385:	66 44 89 88 6c 01 00 	mov    %r9w,0x16c(%rax)
  41538c:	00 
  41538d:	31 f6                	xor    %esi,%esi
  41538f:	66 44 89 90 70 01 00 	mov    %r10w,0x170(%rax)
  415396:	00 
  415397:	45 31 c0             	xor    %r8d,%r8d
  41539a:	31 d2                	xor    %edx,%edx
  41539c:	31 ff                	xor    %edi,%edi
  41539e:	45 31 ff             	xor    %r15d,%r15d
  4153a1:	45 31 c9             	xor    %r9d,%r9d
  4153a4:	45 31 d2             	xor    %r10d,%r10d
  4153a7:	66 44 89 98 74 01 00 	mov    %r11w,0x174(%rax)
  4153ae:	00 
  4153af:	66 44 89 b0 78 01 00 	mov    %r14w,0x178(%rax)
  4153b6:	00 
  4153b7:	66 44 89 a8 7c 01 00 	mov    %r13w,0x17c(%rax)
  4153be:	00 
  4153bf:	66 89 b0 80 01 00 00 	mov    %si,0x180(%rax)
  4153c6:	45 31 db             	xor    %r11d,%r11d
  4153c9:	66 44 89 80 84 01 00 	mov    %r8w,0x184(%rax)
  4153d0:	00 
  4153d1:	66 89 90 88 01 00 00 	mov    %dx,0x188(%rax)
  4153d8:	45 31 f6             	xor    %r14d,%r14d
  4153db:	66 89 b8 8c 01 00 00 	mov    %di,0x18c(%rax)
  4153e2:	66 44 89 b8 90 01 00 	mov    %r15w,0x190(%rax)
  4153e9:	00 
  4153ea:	45 31 ed             	xor    %r13d,%r13d
  4153ed:	66 44 89 88 94 01 00 	mov    %r9w,0x194(%rax)
  4153f4:	00 
  4153f5:	66 44 89 90 98 01 00 	mov    %r10w,0x198(%rax)
  4153fc:	00 
  4153fd:	31 f6                	xor    %esi,%esi
  4153ff:	45 31 c0             	xor    %r8d,%r8d
  415402:	31 d2                	xor    %edx,%edx
  415404:	31 ff                	xor    %edi,%edi
  415406:	45 31 ff             	xor    %r15d,%r15d
  415409:	45 31 c9             	xor    %r9d,%r9d
  41540c:	45 31 d2             	xor    %r10d,%r10d
  41540f:	83 c1 40             	add    $0x40,%ecx
  415412:	66 44 89 98 9c 01 00 	mov    %r11w,0x19c(%rax)
  415419:	00 
  41541a:	66 44 89 b0 a0 01 00 	mov    %r14w,0x1a0(%rax)
  415421:	00 
  415422:	66 44 89 a8 a4 01 00 	mov    %r13w,0x1a4(%rax)
  415429:	00 
  41542a:	66 89 b0 a8 01 00 00 	mov    %si,0x1a8(%rax)
  415431:	0f 18 88 e4 01 00 00 	prefetcht0 0x1e4(%rax)
  415438:	66 44 89 80 ac 01 00 	mov    %r8w,0x1ac(%rax)
  41543f:	00 
  415440:	66 89 90 b0 01 00 00 	mov    %dx,0x1b0(%rax)
  415447:	0f 18 88 24 02 00 00 	prefetcht0 0x224(%rax)
  41544e:	66 89 b8 b4 01 00 00 	mov    %di,0x1b4(%rax)
  415455:	66 44 89 b8 b8 01 00 	mov    %r15w,0x1b8(%rax)
  41545c:	00 
  41545d:	48 05 00 01 00 00    	add    $0x100,%rax
  415463:	66 44 89 88 bc 00 00 	mov    %r9w,0xbc(%rax)
  41546a:	00 
  41546b:	66 44 89 90 c0 00 00 	mov    %r10w,0xc0(%rax)
  415472:	00 
  415473:	81 f9 10 01 00 00    	cmp    $0x110,%ecx
  415479:	0f 85 35 fd ff ff    	jne    4151b4 <_tr_flush_block+0x5f4>
  41547f:	31 c9                	xor    %ecx,%ecx
  415481:	31 c0                	xor    %eax,%eax
  415483:	45 31 f6             	xor    %r14d,%r14d
  415486:	66 89 8b 04 05 00 00 	mov    %cx,0x504(%rbx)
  41548d:	66 89 83 08 05 00 00 	mov    %ax,0x508(%rbx)
  415494:	45 31 db             	xor    %r11d,%r11d
  415497:	66 44 89 b3 10 05 00 	mov    %r14w,0x510(%rbx)
  41549e:	00 
  41549f:	45 31 ed             	xor    %r13d,%r13d
  4154a2:	31 f6                	xor    %esi,%esi
  4154a4:	45 31 c0             	xor    %r8d,%r8d
  4154a7:	31 d2                	xor    %edx,%edx
  4154a9:	31 ff                	xor    %edi,%edi
  4154ab:	45 31 ff             	xor    %r15d,%r15d
  4154ae:	45 31 c9             	xor    %r9d,%r9d
  4154b1:	45 31 d2             	xor    %r10d,%r10d
  4154b4:	31 c9                	xor    %ecx,%ecx
  4154b6:	31 c0                	xor    %eax,%eax
  4154b8:	4c 8d b3 30 0a 00 00 	lea    0xa30(%rbx),%r14
  4154bf:	66 44 89 9b 0c 05 00 	mov    %r11w,0x50c(%rbx)
  4154c6:	00 
  4154c7:	66 44 89 ab 14 05 00 	mov    %r13w,0x514(%rbx)
  4154ce:	00 
  4154cf:	66 89 b3 18 05 00 00 	mov    %si,0x518(%rbx)
  4154d6:	66 44 89 83 1c 05 00 	mov    %r8w,0x51c(%rbx)
  4154dd:	00 
  4154de:	66 89 93 20 05 00 00 	mov    %dx,0x520(%rbx)
  4154e5:	66 89 bb 24 05 00 00 	mov    %di,0x524(%rbx)
  4154ec:	66 44 89 bb 28 05 00 	mov    %r15w,0x528(%rbx)
  4154f3:	00 
  4154f4:	66 44 89 8b 2c 05 00 	mov    %r9w,0x52c(%rbx)
  4154fb:	00 
  4154fc:	66 44 89 93 30 05 00 	mov    %r10w,0x530(%rbx)
  415503:	00 
  415504:	66 89 8b 34 05 00 00 	mov    %cx,0x534(%rbx)
  41550b:	66 89 83 38 05 00 00 	mov    %ax,0x538(%rbx)
    for (n = 0; n < D_CODES;  n++) s->dyn_dtree[n].Freq = 0;
  415512:	45 31 db             	xor    %r11d,%r11d
  415515:	45 31 ed             	xor    %r13d,%r13d
  415518:	31 f6                	xor    %esi,%esi
  41551a:	45 31 c0             	xor    %r8d,%r8d
  41551d:	31 d2                	xor    %edx,%edx
  41551f:	31 ff                	xor    %edi,%edi
  415521:	45 31 ff             	xor    %r15d,%r15d
  415524:	45 31 c9             	xor    %r9d,%r9d
  415527:	45 31 d2             	xor    %r10d,%r10d
  41552a:	31 c9                	xor    %ecx,%ecx
  41552c:	66 44 89 5d 00       	mov    %r11w,0x0(%rbp)
  415531:	66 44 89 6d 04       	mov    %r13w,0x4(%rbp)
  415536:	66 89 75 08          	mov    %si,0x8(%rbp)
  41553a:	66 44 89 45 0c       	mov    %r8w,0xc(%rbp)
  41553f:	48 83 c5 28          	add    $0x28,%rbp
  415543:	66 89 55 e8          	mov    %dx,-0x18(%rbp)
  415547:	66 89 7d ec          	mov    %di,-0x14(%rbp)
  41554b:	66 44 89 7d f0       	mov    %r15w,-0x10(%rbp)
  415550:	66 44 89 4d f4       	mov    %r9w,-0xc(%rbp)
  415555:	66 44 89 55 f8       	mov    %r10w,-0x8(%rbp)
  41555a:	66 89 4d fc          	mov    %cx,-0x4(%rbp)
  41555e:	4c 39 f5             	cmp    %r14,%rbp
  415561:	75 af                	jne    415512 <_tr_flush_block+0x952>
    for (n = 0; n < BL_CODES; n++) s->bl_tree[n].Freq = 0;
  415563:	31 ed                	xor    %ebp,%ebp
  415565:	48 8d 93 f8 0a 00 00 	lea    0xaf8(%rbx),%rdx
  41556c:	48 8d 83 b0 0a 00 00 	lea    0xab0(%rbx),%rax
  415573:	66 89 ab ac 0a 00 00 	mov    %bp,0xaac(%rbx)
  41557a:	45 31 f6             	xor    %r14d,%r14d
  41557d:	45 31 db             	xor    %r11d,%r11d
  415580:	45 31 ed             	xor    %r13d,%r13d
  415583:	31 f6                	xor    %esi,%esi
  415585:	45 31 c0             	xor    %r8d,%r8d
  415588:	31 ff                	xor    %edi,%edi
  41558a:	45 31 ff             	xor    %r15d,%r15d
  41558d:	45 31 c9             	xor    %r9d,%r9d
  415590:	45 31 d2             	xor    %r10d,%r10d
  415593:	66 44 89 30          	mov    %r14w,(%rax)
  415597:	66 44 89 58 04       	mov    %r11w,0x4(%rax)
  41559c:	48 83 c0 24          	add    $0x24,%rax
  4155a0:	66 44 89 68 e4       	mov    %r13w,-0x1c(%rax)
  4155a5:	66 89 70 e8          	mov    %si,-0x18(%rax)
  4155a9:	66 44 89 40 ec       	mov    %r8w,-0x14(%rax)
  4155ae:	66 89 78 f0          	mov    %di,-0x10(%rax)
  4155b2:	66 44 89 78 f4       	mov    %r15w,-0xc(%rax)
  4155b7:	66 44 89 48 f8       	mov    %r9w,-0x8(%rax)
  4155bc:	66 44 89 50 fc       	mov    %r10w,-0x4(%rax)
  4155c1:	48 39 d0             	cmp    %rdx,%rax
  4155c4:	75 b4                	jne    41557a <_tr_flush_block+0x9ba>

    s->dyn_ltree[END_BLOCK].Freq = 1;
  4155c6:	b9 01 00 00 00       	mov    $0x1,%ecx
    /* The above check is made mod 2^32, for files larger than 512 MB
     * and uLong implemented on 32 bits.
     */
    init_block(s);

    if (eof) {
  4155cb:	45 85 e4             	test   %r12d,%r12d
    for (n = 0; n < L_CODES;  n++) s->dyn_ltree[n].Freq = 0;
    for (n = 0; n < D_CODES;  n++) s->dyn_dtree[n].Freq = 0;
    for (n = 0; n < BL_CODES; n++) s->bl_tree[n].Freq = 0;

    s->dyn_ltree[END_BLOCK].Freq = 1;
    s->opt_len = s->static_len = 0L;
  4155ce:	48 c7 83 10 17 00 00 	movq   $0x0,0x1710(%rbx)
  4155d5:	00 00 00 00 
    /* Initialize the trees. */
    for (n = 0; n < L_CODES;  n++) s->dyn_ltree[n].Freq = 0;
    for (n = 0; n < D_CODES;  n++) s->dyn_dtree[n].Freq = 0;
    for (n = 0; n < BL_CODES; n++) s->bl_tree[n].Freq = 0;

    s->dyn_ltree[END_BLOCK].Freq = 1;
  4155d9:	66 89 8b c4 04 00 00 	mov    %cx,0x4c4(%rbx)
    s->opt_len = s->static_len = 0L;
  4155e0:	48 c7 83 08 17 00 00 	movq   $0x0,0x1708(%rbx)
  4155e7:	00 00 00 00 
    s->last_lit = s->matches = 0;
  4155eb:	c7 83 18 17 00 00 00 	movl   $0x0,0x1718(%rbx)
  4155f2:	00 00 00 
  4155f5:	c7 83 fc 16 00 00 00 	movl   $0x0,0x16fc(%rbx)
  4155fc:	00 00 00 
    /* The above check is made mod 2^32, for files larger than 512 MB
     * and uLong implemented on 32 bits.
     */
    init_block(s);

    if (eof) {
  4155ff:	0f 85 d3 06 00 00    	jne    415cd8 <_tr_flush_block+0x1118>
        s->compressed_len += 7;  /* align on byte boundary */
#endif
    }
    Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
           s->compressed_len-7*eof));
}
  415605:	48 83 c4 18          	add    $0x18,%rsp
  415609:	5b                   	pop    %rbx
  41560a:	5d                   	pop    %rbp
  41560b:	41 5c                	pop    %r12
  41560d:	41 5d                	pop    %r13
  41560f:	41 5e                	pop    %r14
  415611:	41 5f                	pop    %r15
  415613:	c3                   	retq   
  415614:	0f 1f 40 00          	nopl   0x0(%rax)

    /* Build the Huffman trees unless a stored block is forced */
    if (s->level > 0) {

        /* Check if the file is binary or text */
        if (stored_len > 0 && s->strm->data_type == Z_UNKNOWN)
  415618:	48 8b 37             	mov    (%rdi),%rsi
  41561b:	83 7e 58 02          	cmpl   $0x2,0x58(%rsi)
  41561f:	0f 85 ce f5 ff ff    	jne    414bf3 <_tr_flush_block+0x33>
    deflate_state *s;
{
    int n;

    for (n = 0; n < 9; n++)
        if (s->dyn_ltree[n].Freq != 0)
  415625:	66 83 bf c4 00 00 00 	cmpw   $0x0,0xc4(%rdi)
  41562c:	00 
  41562d:	0f 85 f1 0a 00 00    	jne    416124 <_tr_flush_block+0x1564>
  415633:	66 83 bf c8 00 00 00 	cmpw   $0x0,0xc8(%rdi)
  41563a:	00 
  41563b:	0f 85 e3 0a 00 00    	jne    416124 <_tr_flush_block+0x1564>
  415641:	66 83 bf cc 00 00 00 	cmpw   $0x0,0xcc(%rdi)
  415648:	00 
  415649:	0f 85 d5 0a 00 00    	jne    416124 <_tr_flush_block+0x1564>
  41564f:	66 83 bf d0 00 00 00 	cmpw   $0x0,0xd0(%rdi)
  415656:	00 
  415657:	0f 85 c7 0a 00 00    	jne    416124 <_tr_flush_block+0x1564>
  41565d:	66 83 bf d4 00 00 00 	cmpw   $0x0,0xd4(%rdi)
  415664:	00 
  415665:	0f 85 b9 0a 00 00    	jne    416124 <_tr_flush_block+0x1564>
  41566b:	66 83 bf d8 00 00 00 	cmpw   $0x0,0xd8(%rdi)
  415672:	00 
  415673:	0f 85 ab 0a 00 00    	jne    416124 <_tr_flush_block+0x1564>
  415679:	66 83 bf dc 00 00 00 	cmpw   $0x0,0xdc(%rdi)
  415680:	00 
  415681:	0f 85 9d 0a 00 00    	jne    416124 <_tr_flush_block+0x1564>
  415687:	66 83 bf e0 00 00 00 	cmpw   $0x0,0xe0(%rdi)
  41568e:	00 
  41568f:	0f 85 8f 0a 00 00    	jne    416124 <_tr_flush_block+0x1564>
  415695:	66 83 bf e4 00 00 00 	cmpw   $0x0,0xe4(%rdi)
  41569c:	00 
  41569d:	0f 85 81 0a 00 00    	jne    416124 <_tr_flush_block+0x1564>
  4156a3:	48 8d bf fc 00 00 00 	lea    0xfc(%rdi),%rdi
  4156aa:	b9 0e 00 00 00       	mov    $0xe,%ecx
            break;
    if (n == 9)
        for (n = 14; n < 32; n++)
            if (s->dyn_ltree[n].Freq != 0)
  4156af:	66 83 3f 00          	cmpw   $0x0,(%rdi)
  4156b3:	0f 85 6b 0a 00 00    	jne    416124 <_tr_flush_block+0x1564>
  4156b9:	66 83 7f 04 00       	cmpw   $0x0,0x4(%rdi)
  4156be:	0f 85 60 0a 00 00    	jne    416124 <_tr_flush_block+0x1564>
  4156c4:	66 83 7f 08 00       	cmpw   $0x0,0x8(%rdi)
  4156c9:	0f 85 55 0a 00 00    	jne    416124 <_tr_flush_block+0x1564>
  4156cf:	66 83 7f 0c 00       	cmpw   $0x0,0xc(%rdi)
  4156d4:	0f 85 4a 0a 00 00    	jne    416124 <_tr_flush_block+0x1564>
  4156da:	66 83 7f 10 00       	cmpw   $0x0,0x10(%rdi)
  4156df:	0f 85 3f 0a 00 00    	jne    416124 <_tr_flush_block+0x1564>
  4156e5:	66 83 7f 14 00       	cmpw   $0x0,0x14(%rdi)
  4156ea:	0f 85 34 0a 00 00    	jne    416124 <_tr_flush_block+0x1564>
  4156f0:	66 83 7f 18 00       	cmpw   $0x0,0x18(%rdi)
  4156f5:	0f 85 29 0a 00 00    	jne    416124 <_tr_flush_block+0x1564>
  4156fb:	66 83 7f 1c 00       	cmpw   $0x0,0x1c(%rdi)
  415700:	0f 85 1e 0a 00 00    	jne    416124 <_tr_flush_block+0x1564>
  415706:	66 83 7f 20 00       	cmpw   $0x0,0x20(%rdi)
  41570b:	0f 85 13 0a 00 00    	jne    416124 <_tr_flush_block+0x1564>

    for (n = 0; n < 9; n++)
        if (s->dyn_ltree[n].Freq != 0)
            break;
    if (n == 9)
        for (n = 14; n < 32; n++)
  415711:	83 c1 09             	add    $0x9,%ecx
  415714:	48 83 c7 24          	add    $0x24,%rdi
  415718:	83 f9 20             	cmp    $0x20,%ecx
  41571b:	75 92                	jne    4156af <_tr_flush_block+0xaef>
  41571d:	bd 01 00 00 00       	mov    $0x1,%ebp
  415722:	e9 ff 09 00 00       	jmpq   416126 <_tr_flush_block+0x1566>
  415727:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41572e:	00 00 
        curlen = nextlen; nextlen = tree[n+1].Len;
        if (++count < max_count && curlen == nextlen) {
            continue;
        } else if (count < min_count) {
            s->bl_tree[curlen].Freq += count;
        } else if (curlen != 0) {
  415730:	85 c9                	test   %ecx,%ecx
  415732:	0f 84 b8 07 00 00    	je     415ef0 <_tr_flush_block+0x1330>
  415738:	48 63 c1             	movslq %ecx,%rax
            s->bl_tree[REPZ_3_10].Freq++;
        } else {
            s->bl_tree[REPZ_11_138].Freq++;
        }
        count = 0; prevlen = curlen;
        if (nextlen == 0) {
  41573b:	89 cf                	mov    %ecx,%edi
        if (++count < max_count && curlen == nextlen) {
            continue;
        } else if (count < min_count) {
            s->bl_tree[curlen].Freq += count;
        } else if (curlen != 0) {
            if (curlen != prevlen) s->bl_tree[curlen].Freq++;
  41573d:	66 83 84 83 ac 0a 00 	addw   $0x1,0xaac(%rbx,%rax,4)
  415744:	00 01 
            s->bl_tree[REP_3_6].Freq++;
  415746:	66 83 83 ec 0a 00 00 	addw   $0x1,0xaec(%rbx)
  41574d:	01 
            s->bl_tree[REPZ_3_10].Freq++;
        } else {
            s->bl_tree[REPZ_11_138].Freq++;
        }
        count = 0; prevlen = curlen;
        if (nextlen == 0) {
  41574e:	85 f6                	test   %esi,%esi
  415750:	0f 84 4d f5 ff ff    	je     414ca3 <_tr_flush_block+0xe3>
  415756:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41575d:	00 00 00 
            max_count = 138, min_count = 3;
        } else if (curlen == nextlen) {
  415760:	44 89 d8             	mov    %r11d,%eax
  415763:	31 ed                	xor    %ebp,%ebp
  415765:	c1 e0 1f             	shl    $0x1f,%eax
  415768:	c1 f8 1f             	sar    $0x1f,%eax
  41576b:	44 8d 48 04          	lea    0x4(%rax),%r9d
  41576f:	83 c0 07             	add    $0x7,%eax
  415772:	e9 39 f5 ff ff       	jmpq   414cb0 <_tr_flush_block+0xf0>
  415777:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41577e:	00 00 
        curlen = nextlen; nextlen = tree[n+1].Len;
        if (++count < max_count && curlen == nextlen) {
            continue;
        } else if (count < min_count) {
            s->bl_tree[curlen].Freq += count;
        } else if (curlen != 0) {
  415780:	85 c9                	test   %ecx,%ecx
  415782:	0f 84 58 07 00 00    	je     415ee0 <_tr_flush_block+0x1320>
  415788:	48 63 c1             	movslq %ecx,%rax
            s->bl_tree[REPZ_3_10].Freq++;
        } else {
            s->bl_tree[REPZ_11_138].Freq++;
        }
        count = 0; prevlen = curlen;
        if (nextlen == 0) {
  41578b:	89 ca                	mov    %ecx,%edx
        if (++count < max_count && curlen == nextlen) {
            continue;
        } else if (count < min_count) {
            s->bl_tree[curlen].Freq += count;
        } else if (curlen != 0) {
            if (curlen != prevlen) s->bl_tree[curlen].Freq++;
  41578d:	66 83 84 83 ac 0a 00 	addw   $0x1,0xaac(%rbx,%rax,4)
  415794:	00 01 
            s->bl_tree[REP_3_6].Freq++;
  415796:	66 83 83 ec 0a 00 00 	addw   $0x1,0xaec(%rbx)
  41579d:	01 
            s->bl_tree[REPZ_3_10].Freq++;
        } else {
            s->bl_tree[REPZ_11_138].Freq++;
        }
        count = 0; prevlen = curlen;
        if (nextlen == 0) {
  41579e:	45 85 c9             	test   %r9d,%r9d
  4157a1:	0f 84 ca f6 ff ff    	je     414e71 <_tr_flush_block+0x2b1>
  4157a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4157ae:	00 00 
            max_count = 138, min_count = 3;
        } else if (curlen == nextlen) {
  4157b0:	8b 04 24             	mov    (%rsp),%eax
  4157b3:	31 ff                	xor    %edi,%edi
  4157b5:	c1 e0 1f             	shl    $0x1f,%eax
  4157b8:	c1 f8 1f             	sar    $0x1f,%eax
  4157bb:	44 8d 50 04          	lea    0x4(%rax),%r10d
  4157bf:	83 c0 07             	add    $0x7,%eax
  4157c2:	e9 b7 f6 ff ff       	jmpq   414e7e <_tr_flush_block+0x2be>
  4157c7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4157ce:	00 00 
  4157d0:	41 c1 e2 1f          	shl    $0x1f,%r10d
  4157d4:	31 ed                	xor    %ebp,%ebp
  4157d6:	41 c1 fa 1f          	sar    $0x1f,%r10d
  4157da:	45 8d 4a 04          	lea    0x4(%r10),%r9d
  4157de:	41 8d 42 07          	lea    0x7(%r10),%eax
  4157e2:	e9 98 f5 ff ff       	jmpq   414d7f <_tr_flush_block+0x1bf>
  4157e7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4157ee:	00 00 
        curlen = nextlen; nextlen = tree[n+1].Len;
        if (++count < max_count && curlen == nextlen) {
            continue;
        } else if (count < min_count) {
            s->bl_tree[curlen].Freq += count;
        } else if (curlen != 0) {
  4157f0:	85 d2                	test   %edx,%edx
  4157f2:	75 7c                	jne    415870 <_tr_flush_block+0xcb0>
            if (curlen != prevlen) s->bl_tree[curlen].Freq++;
            s->bl_tree[REP_3_6].Freq++;
        } else if (count <= 10) {
  4157f4:	83 fd 0a             	cmp    $0xa,%ebp
  4157f7:	0f 8e 33 05 00 00    	jle    415d30 <_tr_flush_block+0x1170>
            s->bl_tree[REPZ_3_10].Freq++;
        } else {
            s->bl_tree[REPZ_11_138].Freq++;
  4157fd:	66 83 83 f4 0a 00 00 	addw   $0x1,0xaf4(%rbx)
  415804:	01 
  415805:	e9 5e f5 ff ff       	jmpq   414d68 <_tr_flush_block+0x1a8>
  41580a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        }
        count = 0; prevlen = curlen;
        if (nextlen == 0) {
            max_count = 138, min_count = 3;
        } else if (curlen == nextlen) {
  415810:	41 c1 e0 1f          	shl    $0x1f,%r8d
  415814:	31 ff                	xor    %edi,%edi
  415816:	41 c1 f8 1f          	sar    $0x1f,%r8d
  41581a:	45 8d 50 04          	lea    0x4(%r8),%r10d
  41581e:	41 8d 40 07          	lea    0x7(%r8),%eax
  415822:	e9 2c f7 ff ff       	jmpq   414f53 <_tr_flush_block+0x393>
  415827:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41582e:	00 00 
        curlen = nextlen; nextlen = tree[n+1].Len;
        if (++count < max_count && curlen == nextlen) {
            continue;
        } else if (count < min_count) {
            s->bl_tree[curlen].Freq += count;
        } else if (curlen != 0) {
  415830:	85 f6                	test   %esi,%esi
  415832:	75 5c                	jne    415890 <_tr_flush_block+0xcd0>
            if (curlen != prevlen) s->bl_tree[curlen].Freq++;
            s->bl_tree[REP_3_6].Freq++;
        } else if (count <= 10) {
  415834:	83 ff 0a             	cmp    $0xa,%edi
  415837:	0f 8e 23 05 00 00    	jle    415d60 <_tr_flush_block+0x11a0>
            s->bl_tree[REPZ_3_10].Freq++;
        } else {
            s->bl_tree[REPZ_11_138].Freq++;
  41583d:	66 83 83 f4 0a 00 00 	addw   $0x1,0xaf4(%rbx)
  415844:	01 
  415845:	e9 f2 f6 ff ff       	jmpq   414f3c <_tr_flush_block+0x37c>
  41584a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        } else if (count < min_count) {
            s->bl_tree[curlen].Freq += count;
        } else if (curlen != 0) {
            if (curlen != prevlen) s->bl_tree[curlen].Freq++;
            s->bl_tree[REP_3_6].Freq++;
        } else if (count <= 10) {
  415850:	83 ff 0a             	cmp    $0xa,%edi
  415853:	0f 8f e7 04 00 00    	jg     415d40 <_tr_flush_block+0x1180>
            s->bl_tree[REPZ_3_10].Freq++;
  415859:	66 83 83 f0 0a 00 00 	addw   $0x1,0xaf0(%rbx)
  415860:	01 
  415861:	e9 8e f6 ff ff       	jmpq   414ef4 <_tr_flush_block+0x334>
  415866:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41586d:	00 00 00 
        if (++count < max_count && curlen == nextlen) {
            continue;
        } else if (count < min_count) {
            s->bl_tree[curlen].Freq += count;
        } else if (curlen != 0) {
            if (curlen != prevlen) s->bl_tree[curlen].Freq++;
  415870:	39 fa                	cmp    %edi,%edx
  415872:	74 0d                	je     415881 <_tr_flush_block+0xcc1>
  415874:	4c 63 ca             	movslq %edx,%r9
  415877:	66 42 83 84 8b ac 0a 	addw   $0x1,0xaac(%rbx,%r9,4)
  41587e:	00 00 01 
            s->bl_tree[REP_3_6].Freq++;
  415881:	66 83 83 ec 0a 00 00 	addw   $0x1,0xaec(%rbx)
  415888:	01 
  415889:	e9 da f4 ff ff       	jmpq   414d68 <_tr_flush_block+0x1a8>
  41588e:	66 90                	xchg   %ax,%ax
        if (++count < max_count && curlen == nextlen) {
            continue;
        } else if (count < min_count) {
            s->bl_tree[curlen].Freq += count;
        } else if (curlen != 0) {
            if (curlen != prevlen) s->bl_tree[curlen].Freq++;
  415890:	39 d6                	cmp    %edx,%esi
  415892:	74 0c                	je     4158a0 <_tr_flush_block+0xce0>
  415894:	48 63 d6             	movslq %esi,%rdx
  415897:	66 83 84 93 ac 0a 00 	addw   $0x1,0xaac(%rbx,%rdx,4)
  41589e:	00 01 
            s->bl_tree[REP_3_6].Freq++;
  4158a0:	66 83 83 ec 0a 00 00 	addw   $0x1,0xaec(%rbx)
  4158a7:	01 
  4158a8:	e9 8f f6 ff ff       	jmpq   414f3c <_tr_flush_block+0x37c>
  4158ad:	0f 1f 00             	nopl   (%rax)
        } else if (count <= 10) {
  4158b0:	83 fd 0a             	cmp    $0xa,%ebp
  4158b3:	0f 8f 97 04 00 00    	jg     415d50 <_tr_flush_block+0x1190>
            s->bl_tree[REPZ_3_10].Freq++;
  4158b9:	66 83 83 f0 0a 00 00 	addw   $0x1,0xaf0(%rbx)
  4158c0:	01 
  4158c1:	e9 5d f4 ff ff       	jmpq   414d23 <_tr_flush_block+0x163>
  4158c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4158cd:	00 00 00 
        _tr_stored_block(s, buf, stored_len, eof);

#ifdef FORCE_STATIC
    } else if (static_lenb >= 0) { /* force static trees */
#else
    } else if (s->strategy == Z_FIXED || static_lenb == opt_lenb) {
  4158d0:	48 39 c7             	cmp    %rax,%rdi
  4158d3:	0f 84 b7 04 00 00    	je     415d90 <_tr_flush_block+0x11d0>
  4158d9:	83 bb b8 00 00 00 04 	cmpl   $0x4,0xb8(%rbx)
  4158e0:	0f 84 aa 04 00 00    	je     415d90 <_tr_flush_block+0x11d0>
        compress_block(s, (ct_data *)static_ltree, (ct_data *)static_dtree);
#ifdef DEBUG
        s->compressed_len += 3 + s->static_len;
#endif
    } else {
        send_bits(s, (DYN_TREES<<1)+eof, 3);
  4158e6:	8b 8b 24 17 00 00    	mov    0x1724(%rbx),%ecx
  4158ec:	83 f9 0d             	cmp    $0xd,%ecx
  4158ef:	0f 8f 6b 05 00 00    	jg     415e60 <_tr_flush_block+0x12a0>
  4158f5:	45 8d 6c 24 04       	lea    0x4(%r12),%r13d
  4158fa:	41 d3 e5             	shl    %cl,%r13d
  4158fd:	83 c1 03             	add    $0x3,%ecx
  415900:	45 89 ef             	mov    %r13d,%r15d
  415903:	66 44 0b bb 20 17 00 	or     0x1720(%rbx),%r15w
  41590a:	00 
  41590b:	89 8b 24 17 00 00    	mov    %ecx,0x1724(%rbx)
  415911:	66 44 89 bb 20 17 00 	mov    %r15w,0x1720(%rbx)
  415918:	00 

    Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
    Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
            "too many codes");
    Tracev((stderr, "\nbl counts: "));
    send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */
  415919:	83 f9 0b             	cmp    $0xb,%ecx
#ifdef DEBUG
        s->compressed_len += 3 + s->static_len;
#endif
    } else {
        send_bits(s, (DYN_TREES<<1)+eof, 3);
        send_all_trees(s, s->l_desc.max_code+1, s->d_desc.max_code+1,
  41591c:	44 8b ab 68 0b 00 00 	mov    0xb68(%rbx),%r13d
  415923:	8b 93 50 0b 00 00    	mov    0xb50(%rbx),%edx

    Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
    Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
            "too many codes");
    Tracev((stderr, "\nbl counts: "));
    send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */
  415929:	0f 8e f1 06 00 00    	jle    416020 <_tr_flush_block+0x1460>
  41592f:	44 8b 5b 28          	mov    0x28(%rbx),%r11d
  415933:	44 8d 82 00 ff ff ff 	lea    -0x100(%rdx),%r8d
  41593a:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
  41593e:	45 89 c2             	mov    %r8d,%r10d
  415941:	45 0f b7 c0          	movzwl %r8w,%r8d
  415945:	41 d3 e2             	shl    %cl,%r10d
  415948:	45 8d 4b 01          	lea    0x1(%r11),%r9d
  41594c:	45 09 d7             	or     %r10d,%r15d
  41594f:	66 44 89 bb 20 17 00 	mov    %r15w,0x1720(%rbx)
  415956:	00 
  415957:	44 89 4b 28          	mov    %r9d,0x28(%rbx)
  41595b:	46 88 3c 1f          	mov    %r15b,(%rdi,%r11,1)
  41595f:	8b 4b 28             	mov    0x28(%rbx),%ecx
  415962:	44 0f b6 93 21 17 00 	movzbl 0x1721(%rbx),%r10d
  415969:	00 
  41596a:	4c 8b 7b 10          	mov    0x10(%rbx),%r15
  41596e:	8d 41 01             	lea    0x1(%rcx),%eax
  415971:	89 43 28             	mov    %eax,0x28(%rbx)
  415974:	45 88 14 0f          	mov    %r10b,(%r15,%rcx,1)
  415978:	b9 10 00 00 00       	mov    $0x10,%ecx
  41597d:	8b bb 24 17 00 00    	mov    0x1724(%rbx),%edi
  415983:	29 f9                	sub    %edi,%ecx
  415985:	41 d3 f8             	sar    %cl,%r8d
  415988:	8d 4f f5             	lea    -0xb(%rdi),%ecx
  41598b:	45 89 c7             	mov    %r8d,%r15d
  41598e:	66 44 89 83 20 17 00 	mov    %r8w,0x1720(%rbx)
  415995:	00 
  415996:	89 8b 24 17 00 00    	mov    %ecx,0x1724(%rbx)
    send_bits(s, dcodes-1,   5);
  41599c:	45 89 e9             	mov    %r13d,%r9d
  41599f:	41 d3 e1             	shl    %cl,%r9d
  4159a2:	45 09 cf             	or     %r9d,%r15d
  4159a5:	83 f9 0b             	cmp    $0xb,%ecx
  4159a8:	66 44 89 bb 20 17 00 	mov    %r15w,0x1720(%rbx)
  4159af:	00 
  4159b0:	0f 8e 5a 06 00 00    	jle    416010 <_tr_flush_block+0x1450>
  4159b6:	8b 43 28             	mov    0x28(%rbx),%eax
  4159b9:	4c 8b 53 10          	mov    0x10(%rbx),%r10
  4159bd:	8d 78 01             	lea    0x1(%rax),%edi
  4159c0:	89 7b 28             	mov    %edi,0x28(%rbx)
  4159c3:	45 88 3c 02          	mov    %r15b,(%r10,%rax,1)
  4159c7:	45 0f b7 d5          	movzwl %r13w,%r10d
  4159cb:	44 8b 43 28          	mov    0x28(%rbx),%r8d
  4159cf:	44 0f b6 9b 21 17 00 	movzbl 0x1721(%rbx),%r11d
  4159d6:	00 
  4159d7:	4c 8b 7b 10          	mov    0x10(%rbx),%r15
  4159db:	41 8d 48 01          	lea    0x1(%r8),%ecx
  4159df:	89 4b 28             	mov    %ecx,0x28(%rbx)
  4159e2:	47 88 1c 07          	mov    %r11b,(%r15,%r8,1)
  4159e6:	b9 10 00 00 00       	mov    $0x10,%ecx
  4159eb:	44 8b 8b 24 17 00 00 	mov    0x1724(%rbx),%r9d
  4159f2:	44 29 c9             	sub    %r9d,%ecx
  4159f5:	41 d3 fa             	sar    %cl,%r10d
  4159f8:	41 8d 49 f5          	lea    -0xb(%r9),%ecx
  4159fc:	45 89 d7             	mov    %r10d,%r15d
  4159ff:	66 44 89 93 20 17 00 	mov    %r10w,0x1720(%rbx)
  415a06:	00 
  415a07:	89 8b 24 17 00 00    	mov    %ecx,0x1724(%rbx)
    send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */
  415a0d:	83 f9 0c             	cmp    $0xc,%ecx
  415a10:	0f 8e da 05 00 00    	jle    415ff0 <_tr_flush_block+0x1430>
  415a16:	44 8b 53 28          	mov    0x28(%rbx),%r10d
  415a1a:	44 8d 46 fd          	lea    -0x3(%rsi),%r8d
  415a1e:	4c 8b 5b 10          	mov    0x10(%rbx),%r11
  415a22:	44 89 c7             	mov    %r8d,%edi
  415a25:	45 0f b7 c0          	movzwl %r8w,%r8d
  415a29:	d3 e7                	shl    %cl,%edi
  415a2b:	45 8d 4a 01          	lea    0x1(%r10),%r9d
  415a2f:	41 09 ff             	or     %edi,%r15d
  415a32:	66 44 89 bb 20 17 00 	mov    %r15w,0x1720(%rbx)
  415a39:	00 
  415a3a:	44 89 4b 28          	mov    %r9d,0x28(%rbx)
  415a3e:	47 88 3c 13          	mov    %r15b,(%r11,%r10,1)
  415a42:	41 ba 10 00 00 00    	mov    $0x10,%r10d
  415a48:	8b 4b 28             	mov    0x28(%rbx),%ecx
  415a4b:	0f b6 bb 21 17 00 00 	movzbl 0x1721(%rbx),%edi
  415a52:	4c 8b 7b 10          	mov    0x10(%rbx),%r15
  415a56:	8d 41 01             	lea    0x1(%rcx),%eax
  415a59:	89 43 28             	mov    %eax,0x28(%rbx)
  415a5c:	41 88 3c 0f          	mov    %dil,(%r15,%rcx,1)
  415a60:	44 8b 9b 24 17 00 00 	mov    0x1724(%rbx),%r11d
  415a67:	45 29 da             	sub    %r11d,%r10d
  415a6a:	44 89 d1             	mov    %r10d,%ecx
  415a6d:	41 d3 f8             	sar    %cl,%r8d
  415a70:	41 8d 4b f4          	lea    -0xc(%r11),%ecx
  415a74:	44 89 c0             	mov    %r8d,%eax
  415a77:	66 44 89 83 20 17 00 	mov    %r8w,0x1720(%rbx)
  415a7e:	00 
  415a7f:	89 8b 24 17 00 00    	mov    %ecx,0x1724(%rbx)
  415a85:	41 89 f1             	mov    %esi,%r9d
    for (rank = 0; rank < blcodes; rank++) {
        Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
        send_bits(s, s->bl_tree[bl_order[rank]].Len, 3);
  415a88:	bf 10 00 00 00       	mov    $0x10,%edi
  415a8d:	41 83 e1 01          	and    $0x1,%r9d
  415a91:	83 f9 0d             	cmp    $0xd,%ecx
  415a94:	0f 8e 26 05 00 00    	jle    415fc0 <_tr_flush_block+0x1400>
  415a9a:	44 0f b6 05 5e 35 02 	movzbl 0x2355e(%rip),%r8d        # 439000 <bl_order>
  415aa1:	00 
  415aa2:	4c 8b 7b 10          	mov    0x10(%rbx),%r15
  415aa6:	46 0f b7 84 83 ae 0a 	movzwl 0xaae(%rbx,%r8,4),%r8d
  415aad:	00 00 
  415aaf:	45 89 c2             	mov    %r8d,%r10d
  415ab2:	41 d3 e2             	shl    %cl,%r10d
  415ab5:	44 09 d0             	or     %r10d,%eax
  415ab8:	44 8b 53 28          	mov    0x28(%rbx),%r10d
  415abc:	66 89 83 20 17 00 00 	mov    %ax,0x1720(%rbx)
  415ac3:	45 8d 5a 01          	lea    0x1(%r10),%r11d
  415ac7:	44 89 5b 28          	mov    %r11d,0x28(%rbx)
  415acb:	43 88 04 17          	mov    %al,(%r15,%r10,1)
  415acf:	8b 43 28             	mov    0x28(%rbx),%eax
  415ad2:	44 0f b6 93 21 17 00 	movzbl 0x1721(%rbx),%r10d
  415ad9:	00 
  415ada:	48 8b 4b 10          	mov    0x10(%rbx),%rcx
  415ade:	44 8d 78 01          	lea    0x1(%rax),%r15d
  415ae2:	44 89 7b 28          	mov    %r15d,0x28(%rbx)
  415ae6:	44 88 14 01          	mov    %r10b,(%rcx,%rax,1)
  415aea:	89 f9                	mov    %edi,%ecx
  415aec:	44 8b 9b 24 17 00 00 	mov    0x1724(%rbx),%r11d
  415af3:	44 29 d9             	sub    %r11d,%ecx
  415af6:	41 d3 f8             	sar    %cl,%r8d
  415af9:	41 8d 4b f3          	lea    -0xd(%r11),%ecx
  415afd:	44 89 c0             	mov    %r8d,%eax
  415b00:	66 44 89 83 20 17 00 	mov    %r8w,0x1720(%rbx)
  415b07:	00 
  415b08:	89 8b 24 17 00 00    	mov    %ecx,0x1724(%rbx)
            "too many codes");
    Tracev((stderr, "\nbl counts: "));
    send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */
    send_bits(s, dcodes-1,   5);
    send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */
    for (rank = 0; rank < blcodes; rank++) {
  415b0e:	83 fe 01             	cmp    $0x1,%esi
  415b11:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  415b17:	0f 8c 8c 01 00 00    	jl     415ca9 <_tr_flush_block+0x10e9>
  415b1d:	45 85 c9             	test   %r9d,%r9d
  415b20:	0f 84 16 01 00 00    	je     415c3c <_tr_flush_block+0x107c>
        Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
        send_bits(s, s->bl_tree[bl_order[rank]].Len, 3);
  415b26:	45 0f b6 88 00 90 43 	movzbl 0x439000(%r8),%r9d
  415b2d:	00 
  415b2e:	83 f9 0d             	cmp    $0xd,%ecx
  415b31:	46 0f b7 8c 8b ae 0a 	movzwl 0xaae(%rbx,%r9,4),%r9d
  415b38:	00 00 
  415b3a:	0f 8e 4a 01 00 00    	jle    415c8a <_tr_flush_block+0x10ca>
  415b40:	45 89 cf             	mov    %r9d,%r15d
  415b43:	41 d3 e7             	shl    %cl,%r15d
  415b46:	45 89 fb             	mov    %r15d,%r11d
  415b49:	e9 8a 00 00 00       	jmpq   415bd8 <_tr_flush_block+0x1018>
  415b4e:	66 90                	xchg   %ax,%ax
  415b50:	45 89 cf             	mov    %r9d,%r15d
  415b53:	49 83 c0 01          	add    $0x1,%r8
  415b57:	41 d3 e7             	shl    %cl,%r15d
  415b5a:	8b 4b 28             	mov    0x28(%rbx),%ecx
  415b5d:	44 09 f8             	or     %r15d,%eax
  415b60:	4c 8b 7b 10          	mov    0x10(%rbx),%r15
  415b64:	66 89 83 20 17 00 00 	mov    %ax,0x1720(%rbx)
  415b6b:	44 8d 59 01          	lea    0x1(%rcx),%r11d
  415b6f:	44 89 5b 28          	mov    %r11d,0x28(%rbx)
  415b73:	41 88 04 0f          	mov    %al,(%r15,%rcx,1)
  415b77:	8b 43 28             	mov    0x28(%rbx),%eax
  415b7a:	0f b6 8b 21 17 00 00 	movzbl 0x1721(%rbx),%ecx
  415b81:	4c 8b 7b 10          	mov    0x10(%rbx),%r15
  415b85:	44 8d 50 01          	lea    0x1(%rax),%r10d
  415b89:	44 89 53 28          	mov    %r10d,0x28(%rbx)
  415b8d:	41 88 0c 07          	mov    %cl,(%r15,%rax,1)
  415b91:	89 f9                	mov    %edi,%ecx
  415b93:	44 8b 9b 24 17 00 00 	mov    0x1724(%rbx),%r11d
  415b9a:	44 29 d9             	sub    %r11d,%ecx
  415b9d:	41 d3 f9             	sar    %cl,%r9d
  415ba0:	41 8d 4b f3          	lea    -0xd(%r11),%ecx
  415ba4:	44 89 c8             	mov    %r9d,%eax
  415ba7:	66 44 89 8b 20 17 00 	mov    %r9w,0x1720(%rbx)
  415bae:	00 
  415baf:	83 f9 0d             	cmp    $0xd,%ecx
  415bb2:	89 8b 24 17 00 00    	mov    %ecx,0x1724(%rbx)
  415bb8:	0f 8e bb 00 00 00    	jle    415c79 <_tr_flush_block+0x10b9>
  415bbe:	45 0f b6 b8 00 90 43 	movzbl 0x439000(%r8),%r15d
  415bc5:	00 
  415bc6:	46 0f b7 8c bb ae 0a 	movzwl 0xaae(%rbx,%r15,4),%r9d
  415bcd:	00 00 
  415bcf:	45 89 ca             	mov    %r9d,%r10d
  415bd2:	41 d3 e2             	shl    %cl,%r10d
  415bd5:	45 89 d3             	mov    %r10d,%r11d
  415bd8:	8b 4b 28             	mov    0x28(%rbx),%ecx
  415bdb:	4c 8b 53 10          	mov    0x10(%rbx),%r10
  415bdf:	44 09 d8             	or     %r11d,%eax
  415be2:	66 89 83 20 17 00 00 	mov    %ax,0x1720(%rbx)
  415be9:	49 83 c0 01          	add    $0x1,%r8
  415bed:	44 8d 59 01          	lea    0x1(%rcx),%r11d
  415bf1:	44 89 5b 28          	mov    %r11d,0x28(%rbx)
  415bf5:	41 88 04 0a          	mov    %al,(%r10,%rcx,1)
  415bf9:	8b 43 28             	mov    0x28(%rbx),%eax
  415bfc:	0f b6 8b 21 17 00 00 	movzbl 0x1721(%rbx),%ecx
  415c03:	4c 8b 7b 10          	mov    0x10(%rbx),%r15
  415c07:	44 8d 50 01          	lea    0x1(%rax),%r10d
  415c0b:	44 89 53 28          	mov    %r10d,0x28(%rbx)
  415c0f:	41 88 0c 07          	mov    %cl,(%r15,%rax,1)
  415c13:	89 f9                	mov    %edi,%ecx
  415c15:	44 8b 9b 24 17 00 00 	mov    0x1724(%rbx),%r11d
  415c1c:	44 29 d9             	sub    %r11d,%ecx
  415c1f:	41 d3 f9             	sar    %cl,%r9d
  415c22:	41 8d 4b f3          	lea    -0xd(%r11),%ecx
            "too many codes");
    Tracev((stderr, "\nbl counts: "));
    send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */
    send_bits(s, dcodes-1,   5);
    send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */
    for (rank = 0; rank < blcodes; rank++) {
  415c26:	44 39 c6             	cmp    %r8d,%esi
        Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
        send_bits(s, s->bl_tree[bl_order[rank]].Len, 3);
  415c29:	44 89 c8             	mov    %r9d,%eax
  415c2c:	66 44 89 8b 20 17 00 	mov    %r9w,0x1720(%rbx)
  415c33:	00 
  415c34:	89 8b 24 17 00 00    	mov    %ecx,0x1724(%rbx)
            "too many codes");
    Tracev((stderr, "\nbl counts: "));
    send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */
    send_bits(s, dcodes-1,   5);
    send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */
    for (rank = 0; rank < blcodes; rank++) {
  415c3a:	7c 6d                	jl     415ca9 <_tr_flush_block+0x10e9>
        Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
        send_bits(s, s->bl_tree[bl_order[rank]].Len, 3);
  415c3c:	45 0f b6 88 00 90 43 	movzbl 0x439000(%r8),%r9d
  415c43:	00 
  415c44:	83 f9 0d             	cmp    $0xd,%ecx
  415c47:	46 0f b7 8c 8b ae 0a 	movzwl 0xaae(%rbx,%r9,4),%r9d
  415c4e:	00 00 
  415c50:	0f 8f fa fe ff ff    	jg     415b50 <_tr_flush_block+0xf90>
  415c56:	41 d3 e1             	shl    %cl,%r9d
  415c59:	83 c1 03             	add    $0x3,%ecx
  415c5c:	49 83 c0 01          	add    $0x1,%r8
  415c60:	44 09 c8             	or     %r9d,%eax
  415c63:	83 f9 0d             	cmp    $0xd,%ecx
  415c66:	89 8b 24 17 00 00    	mov    %ecx,0x1724(%rbx)
  415c6c:	66 89 83 20 17 00 00 	mov    %ax,0x1720(%rbx)
  415c73:	0f 8f 45 ff ff ff    	jg     415bbe <_tr_flush_block+0xffe>
  415c79:	45 0f b6 88 00 90 43 	movzbl 0x439000(%r8),%r9d
  415c80:	00 
  415c81:	46 0f b7 8c 8b ae 0a 	movzwl 0xaae(%rbx,%r9,4),%r9d
  415c88:	00 00 
  415c8a:	41 d3 e1             	shl    %cl,%r9d
  415c8d:	49 83 c0 01          	add    $0x1,%r8
  415c91:	83 c1 03             	add    $0x3,%ecx
  415c94:	44 09 c8             	or     %r9d,%eax
            "too many codes");
    Tracev((stderr, "\nbl counts: "));
    send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */
    send_bits(s, dcodes-1,   5);
    send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */
    for (rank = 0; rank < blcodes; rank++) {
  415c97:	44 39 c6             	cmp    %r8d,%esi
        Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
        send_bits(s, s->bl_tree[bl_order[rank]].Len, 3);
  415c9a:	89 8b 24 17 00 00    	mov    %ecx,0x1724(%rbx)
  415ca0:	66 89 83 20 17 00 00 	mov    %ax,0x1720(%rbx)
            "too many codes");
    Tracev((stderr, "\nbl counts: "));
    send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */
    send_bits(s, dcodes-1,   5);
    send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */
    for (rank = 0; rank < blcodes; rank++) {
  415ca7:	7d 93                	jge    415c3c <_tr_flush_block+0x107c>
        Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
        send_bits(s, s->bl_tree[bl_order[rank]].Len, 3);
    }
    Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

    send_tree(s, (ct_data *)s->dyn_ltree, lcodes-1); /* literal tree */
  415ca9:	4c 89 f6             	mov    %r14,%rsi
  415cac:	48 89 df             	mov    %rbx,%rdi
  415caf:	e8 3c c1 ff ff       	callq  411df0 <send_tree>
    Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

    send_tree(s, (ct_data *)s->dyn_dtree, dcodes-1); /* distance tree */
  415cb4:	44 89 ea             	mov    %r13d,%edx
  415cb7:	48 89 ee             	mov    %rbp,%rsi
  415cba:	48 89 df             	mov    %rbx,%rdi
  415cbd:	e8 2e c1 ff ff       	callq  411df0 <send_tree>
#endif
    } else {
        send_bits(s, (DYN_TREES<<1)+eof, 3);
        send_all_trees(s, s->l_desc.max_code+1, s->d_desc.max_code+1,
                       max_blindex+1);
        compress_block(s, (ct_data *)s->dyn_ltree, (ct_data *)s->dyn_dtree);
  415cc2:	48 89 ea             	mov    %rbp,%rdx
  415cc5:	4c 89 f6             	mov    %r14,%rsi
  415cc8:	48 89 df             	mov    %rbx,%rdi
  415ccb:	e8 80 c9 ff ff       	callq  412650 <compress_block>
  415cd0:	e9 2f f4 ff ff       	jmpq   415104 <_tr_flush_block+0x544>
  415cd5:	0f 1f 00             	nopl   (%rax)
 * Flush the bit buffer and align the output on a byte boundary
 */
local void bi_windup(s)
    deflate_state *s;
{
    if (s->bi_valid > 8) {
  415cd8:	44 8b a3 24 17 00 00 	mov    0x1724(%rbx),%r12d
  415cdf:	41 83 fc 08          	cmp    $0x8,%r12d
  415ce3:	0f 8f 5f 03 00 00    	jg     416048 <_tr_flush_block+0x1488>
        put_short(s, s->bi_buf);
    } else if (s->bi_valid > 0) {
  415ce9:	45 85 e4             	test   %r12d,%r12d
  415cec:	7e 19                	jle    415d07 <_tr_flush_block+0x1147>
        put_byte(s, (Byte)s->bi_buf);
  415cee:	8b 6b 28             	mov    0x28(%rbx),%ebp
  415cf1:	44 0f b7 b3 20 17 00 	movzwl 0x1720(%rbx),%r14d
  415cf8:	00 
  415cf9:	48 8b 53 10          	mov    0x10(%rbx),%rdx
  415cfd:	8d 45 01             	lea    0x1(%rbp),%eax
  415d00:	89 43 28             	mov    %eax,0x28(%rbx)
  415d03:	44 88 34 2a          	mov    %r14b,(%rdx,%rbp,1)
    }
    s->bi_buf = 0;
  415d07:	31 c9                	xor    %ecx,%ecx
    s->bi_valid = 0;
  415d09:	c7 83 24 17 00 00 00 	movl   $0x0,0x1724(%rbx)
  415d10:	00 00 00 
    if (s->bi_valid > 8) {
        put_short(s, s->bi_buf);
    } else if (s->bi_valid > 0) {
        put_byte(s, (Byte)s->bi_buf);
    }
    s->bi_buf = 0;
  415d13:	66 89 8b 20 17 00 00 	mov    %cx,0x1720(%rbx)
        s->compressed_len += 7;  /* align on byte boundary */
#endif
    }
    Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
           s->compressed_len-7*eof));
}
  415d1a:	48 83 c4 18          	add    $0x18,%rsp
  415d1e:	5b                   	pop    %rbx
  415d1f:	5d                   	pop    %rbp
  415d20:	41 5c                	pop    %r12
  415d22:	41 5d                	pop    %r13
  415d24:	41 5e                	pop    %r14
  415d26:	41 5f                	pop    %r15
  415d28:	c3                   	retq   
  415d29:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            s->bl_tree[curlen].Freq += count;
        } else if (curlen != 0) {
            if (curlen != prevlen) s->bl_tree[curlen].Freq++;
            s->bl_tree[REP_3_6].Freq++;
        } else if (count <= 10) {
            s->bl_tree[REPZ_3_10].Freq++;
  415d30:	66 83 83 f0 0a 00 00 	addw   $0x1,0xaf0(%rbx)
  415d37:	01 
  415d38:	e9 2b f0 ff ff       	jmpq   414d68 <_tr_flush_block+0x1a8>
  415d3d:	0f 1f 00             	nopl   (%rax)
        } else {
            s->bl_tree[REPZ_11_138].Freq++;
  415d40:	66 83 83 f4 0a 00 00 	addw   $0x1,0xaf4(%rbx)
  415d47:	01 
  415d48:	e9 a7 f1 ff ff       	jmpq   414ef4 <_tr_flush_block+0x334>
  415d4d:	0f 1f 00             	nopl   (%rax)
  415d50:	66 83 83 f4 0a 00 00 	addw   $0x1,0xaf4(%rbx)
  415d57:	01 
  415d58:	e9 c6 ef ff ff       	jmpq   414d23 <_tr_flush_block+0x163>
  415d5d:	0f 1f 00             	nopl   (%rax)
            s->bl_tree[curlen].Freq += count;
        } else if (curlen != 0) {
            if (curlen != prevlen) s->bl_tree[curlen].Freq++;
            s->bl_tree[REP_3_6].Freq++;
        } else if (count <= 10) {
            s->bl_tree[REPZ_3_10].Freq++;
  415d60:	66 83 83 f0 0a 00 00 	addw   $0x1,0xaf0(%rbx)
  415d67:	01 
  415d68:	e9 cf f1 ff ff       	jmpq   414f3c <_tr_flush_block+0x37c>
  415d6d:	0f 1f 00             	nopl   (%rax)

        if (static_lenb <= opt_lenb) opt_lenb = static_lenb;

    } else {
        Assert(buf != (char*)0, "lost buf");
        opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
  415d70:	48 8d 52 05          	lea    0x5(%rdx),%rdx
    }

#ifdef FORCE_STORED
    if (buf != (char*)0) { /* force stored block */
#else
    if (stored_len+4 <= opt_lenb && buf != (char*)0) {
  415d74:	49 8d 47 04          	lea    0x4(%r15),%rax
  415d78:	48 8d af b8 09 00 00 	lea    0x9b8(%rdi),%rbp
  415d7f:	48 39 c2             	cmp    %rax,%rdx
  415d82:	72 0c                	jb     415d90 <_tr_flush_block+0x11d0>
  415d84:	48 85 f6             	test   %rsi,%rsi
  415d87:	0f 85 66 f3 ff ff    	jne    4150f3 <_tr_flush_block+0x533>
  415d8d:	0f 1f 00             	nopl   (%rax)
#ifdef FORCE_STATIC
    } else if (static_lenb >= 0) { /* force static trees */
#else
    } else if (s->strategy == Z_FIXED || static_lenb == opt_lenb) {
#endif
        send_bits(s, (STATIC_TREES<<1)+eof, 3);
  415d90:	8b 8b 24 17 00 00    	mov    0x1724(%rbx),%ecx
  415d96:	83 f9 0d             	cmp    $0xd,%ecx
  415d99:	0f 8f 61 01 00 00    	jg     415f00 <_tr_flush_block+0x1340>
  415d9f:	45 8d 74 24 02       	lea    0x2(%r12),%r14d
  415da4:	41 d3 e6             	shl    %cl,%r14d
  415da7:	66 44 09 b3 20 17 00 	or     %r14w,0x1720(%rbx)
  415dae:	00 
  415daf:	83 c1 03             	add    $0x3,%ecx
  415db2:	89 8b 24 17 00 00    	mov    %ecx,0x1724(%rbx)
        compress_block(s, (ct_data *)static_ltree, (ct_data *)static_dtree);
  415db8:	ba 00 8b 43 00       	mov    $0x438b00,%edx
  415dbd:	be 80 8b 43 00       	mov    $0x438b80,%esi
  415dc2:	48 89 df             	mov    %rbx,%rdi
  415dc5:	e8 86 c8 ff ff       	callq  412650 <compress_block>
  415dca:	e9 35 f3 ff ff       	jmpq   415104 <_tr_flush_block+0x544>
  415dcf:	90                   	nop
            s->bl_tree[REPZ_11_138].Freq++;
        }
        count = 0; prevlen = curlen;
        if (nextlen == 0) {
            max_count = 138, min_count = 3;
        } else if (curlen == nextlen) {
  415dd0:	89 d0                	mov    %edx,%eax
  415dd2:	31 ed                	xor    %ebp,%ebp
  415dd4:	c1 e0 1f             	shl    $0x1f,%eax
  415dd7:	c1 f8 1f             	sar    $0x1f,%eax
  415dda:	44 8d 48 04          	lea    0x4(%rax),%r9d
  415dde:	83 c0 07             	add    $0x7,%eax
  415de1:	e9 20 ef ff ff       	jmpq   414d06 <_tr_flush_block+0x146>
  415de6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  415ded:	00 00 00 
        curlen = nextlen; nextlen = tree[n+1].Len;
        if (++count < max_count && curlen == nextlen) {
            continue;
        } else if (count < min_count) {
            s->bl_tree[curlen].Freq += count;
        } else if (curlen != 0) {
  415df0:	85 f6                	test   %esi,%esi
  415df2:	0f 84 88 01 00 00    	je     415f80 <_tr_flush_block+0x13c0>
            if (curlen != prevlen) s->bl_tree[curlen].Freq++;
  415df8:	39 fe                	cmp    %edi,%esi
  415dfa:	74 0c                	je     415e08 <_tr_flush_block+0x1248>
  415dfc:	48 63 fe             	movslq %esi,%rdi
  415dff:	66 83 84 bb ac 0a 00 	addw   $0x1,0xaac(%rbx,%rdi,4)
  415e06:	00 01 
            s->bl_tree[REP_3_6].Freq++;
  415e08:	66 83 83 ec 0a 00 00 	addw   $0x1,0xaec(%rbx)
  415e0f:	01 
  415e10:	e9 da ee ff ff       	jmpq   414cef <_tr_flush_block+0x12f>
  415e15:	0f 1f 00             	nopl   (%rax)
            s->bl_tree[REPZ_11_138].Freq++;
        }
        count = 0; prevlen = curlen;
        if (nextlen == 0) {
            max_count = 138, min_count = 3;
        } else if (curlen == nextlen) {
  415e18:	89 f0                	mov    %esi,%eax
  415e1a:	31 ff                	xor    %edi,%edi
  415e1c:	c1 e0 1f             	shl    $0x1f,%eax
  415e1f:	c1 f8 1f             	sar    $0x1f,%eax
  415e22:	44 8d 50 04          	lea    0x4(%rax),%r10d
  415e26:	83 c0 07             	add    $0x7,%eax
  415e29:	e9 a9 f0 ff ff       	jmpq   414ed7 <_tr_flush_block+0x317>
  415e2e:	66 90                	xchg   %ax,%ax
        curlen = nextlen; nextlen = tree[n+1].Len;
        if (++count < max_count && curlen == nextlen) {
            continue;
        } else if (count < min_count) {
            s->bl_tree[curlen].Freq += count;
        } else if (curlen != 0) {
  415e30:	45 85 c9             	test   %r9d,%r9d
  415e33:	0f 84 67 01 00 00    	je     415fa0 <_tr_flush_block+0x13e0>
            if (curlen != prevlen) s->bl_tree[curlen].Freq++;
  415e39:	41 39 d1             	cmp    %edx,%r9d
  415e3c:	74 0c                	je     415e4a <_tr_flush_block+0x128a>
  415e3e:	49 63 d1             	movslq %r9d,%rdx
  415e41:	66 83 84 93 ac 0a 00 	addw   $0x1,0xaac(%rbx,%rdx,4)
  415e48:	00 01 
            s->bl_tree[REP_3_6].Freq++;
  415e4a:	66 83 83 ec 0a 00 00 	addw   $0x1,0xaec(%rbx)
  415e51:	01 
  415e52:	e9 68 f0 ff ff       	jmpq   414ebf <_tr_flush_block+0x2ff>
  415e57:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  415e5e:	00 00 
        compress_block(s, (ct_data *)static_ltree, (ct_data *)static_dtree);
#ifdef DEBUG
        s->compressed_len += 3 + s->static_len;
#endif
    } else {
        send_bits(s, (DYN_TREES<<1)+eof, 3);
  415e60:	45 8d 4c 24 04       	lea    0x4(%r12),%r9d
  415e65:	8b 43 28             	mov    0x28(%rbx),%eax
  415e68:	4c 8b 5b 10          	mov    0x10(%rbx),%r11
  415e6c:	44 89 ca             	mov    %r9d,%edx
  415e6f:	45 0f b7 c9          	movzwl %r9w,%r9d
  415e73:	d3 e2                	shl    %cl,%edx
  415e75:	89 d1                	mov    %edx,%ecx
  415e77:	66 0b 8b 20 17 00 00 	or     0x1720(%rbx),%cx
  415e7e:	44 8d 40 01          	lea    0x1(%rax),%r8d
  415e82:	44 89 43 28          	mov    %r8d,0x28(%rbx)
  415e86:	66 89 8b 20 17 00 00 	mov    %cx,0x1720(%rbx)
  415e8d:	41 88 0c 03          	mov    %cl,(%r11,%rax,1)
  415e91:	b9 10 00 00 00       	mov    $0x10,%ecx
  415e96:	44 8b 6b 28          	mov    0x28(%rbx),%r13d
  415e9a:	44 0f b6 bb 21 17 00 	movzbl 0x1721(%rbx),%r15d
  415ea1:	00 
  415ea2:	4c 8b 53 10          	mov    0x10(%rbx),%r10
  415ea6:	41 8d 7d 01          	lea    0x1(%r13),%edi
  415eaa:	89 7b 28             	mov    %edi,0x28(%rbx)
  415ead:	47 88 3c 2a          	mov    %r15b,(%r10,%r13,1)
  415eb1:	44 8b 9b 24 17 00 00 	mov    0x1724(%rbx),%r11d
  415eb8:	44 29 d9             	sub    %r11d,%ecx
  415ebb:	41 d3 f9             	sar    %cl,%r9d
  415ebe:	41 8d 4b f3          	lea    -0xd(%r11),%ecx
  415ec2:	45 89 cf             	mov    %r9d,%r15d
  415ec5:	66 44 89 8b 20 17 00 	mov    %r9w,0x1720(%rbx)
  415ecc:	00 
  415ecd:	89 8b 24 17 00 00    	mov    %ecx,0x1724(%rbx)
  415ed3:	e9 41 fa ff ff       	jmpq   415919 <_tr_flush_block+0xd59>
  415ed8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  415edf:	00 
            s->bl_tree[curlen].Freq += count;
        } else if (curlen != 0) {
            if (curlen != prevlen) s->bl_tree[curlen].Freq++;
            s->bl_tree[REP_3_6].Freq++;
        } else if (count <= 10) {
            s->bl_tree[REPZ_3_10].Freq++;
  415ee0:	66 83 83 f0 0a 00 00 	addw   $0x1,0xaf0(%rbx)
  415ee7:	01 
  415ee8:	e9 79 ef ff ff       	jmpq   414e66 <_tr_flush_block+0x2a6>
  415eed:	0f 1f 00             	nopl   (%rax)
  415ef0:	66 83 83 f0 0a 00 00 	addw   $0x1,0xaf0(%rbx)
  415ef7:	01 
  415ef8:	e9 9c ed ff ff       	jmpq   414c99 <_tr_flush_block+0xd9>
  415efd:	0f 1f 00             	nopl   (%rax)
#ifdef FORCE_STATIC
    } else if (static_lenb >= 0) { /* force static trees */
#else
    } else if (s->strategy == Z_FIXED || static_lenb == opt_lenb) {
#endif
        send_bits(s, (STATIC_TREES<<1)+eof, 3);
  415f00:	45 8d 6c 24 02       	lea    0x2(%r12),%r13d
  415f05:	8b 53 28             	mov    0x28(%rbx),%edx
  415f08:	48 8b 43 10          	mov    0x10(%rbx),%rax
  415f0c:	44 89 ee             	mov    %r13d,%esi
  415f0f:	45 0f b7 ed          	movzwl %r13w,%r13d
  415f13:	d3 e6                	shl    %cl,%esi
  415f15:	b9 10 00 00 00       	mov    $0x10,%ecx
  415f1a:	41 89 f0             	mov    %esi,%r8d
  415f1d:	66 44 0b 83 20 17 00 	or     0x1720(%rbx),%r8w
  415f24:	00 
  415f25:	8d 7a 01             	lea    0x1(%rdx),%edi
  415f28:	89 7b 28             	mov    %edi,0x28(%rbx)
  415f2b:	66 44 89 83 20 17 00 	mov    %r8w,0x1720(%rbx)
  415f32:	00 
  415f33:	44 88 04 10          	mov    %r8b,(%rax,%rdx,1)
  415f37:	44 8b 4b 28          	mov    0x28(%rbx),%r9d
  415f3b:	44 0f b6 9b 21 17 00 	movzbl 0x1721(%rbx),%r11d
  415f42:	00 
  415f43:	4c 8b 7b 10          	mov    0x10(%rbx),%r15
  415f47:	45 8d 51 01          	lea    0x1(%r9),%r10d
  415f4b:	44 89 53 28          	mov    %r10d,0x28(%rbx)
  415f4f:	47 88 1c 0f          	mov    %r11b,(%r15,%r9,1)
  415f53:	44 8b b3 24 17 00 00 	mov    0x1724(%rbx),%r14d
  415f5a:	44 29 f1             	sub    %r14d,%ecx
  415f5d:	41 83 ee 0d          	sub    $0xd,%r14d
  415f61:	41 d3 fd             	sar    %cl,%r13d
  415f64:	44 89 b3 24 17 00 00 	mov    %r14d,0x1724(%rbx)
  415f6b:	66 44 89 ab 20 17 00 	mov    %r13w,0x1720(%rbx)
  415f72:	00 
  415f73:	e9 40 fe ff ff       	jmpq   415db8 <_tr_flush_block+0x11f8>
  415f78:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  415f7f:	00 
        } else if (count < min_count) {
            s->bl_tree[curlen].Freq += count;
        } else if (curlen != 0) {
            if (curlen != prevlen) s->bl_tree[curlen].Freq++;
            s->bl_tree[REP_3_6].Freq++;
        } else if (count <= 10) {
  415f80:	83 fd 0a             	cmp    $0xa,%ebp
  415f83:	0f 8e ff 00 00 00    	jle    416088 <_tr_flush_block+0x14c8>
            s->bl_tree[REPZ_3_10].Freq++;
        } else {
            s->bl_tree[REPZ_11_138].Freq++;
  415f89:	66 83 83 f4 0a 00 00 	addw   $0x1,0xaf4(%rbx)
  415f90:	01 
  415f91:	e9 59 ed ff ff       	jmpq   414cef <_tr_flush_block+0x12f>
  415f96:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  415f9d:	00 00 00 
        } else if (count < min_count) {
            s->bl_tree[curlen].Freq += count;
        } else if (curlen != 0) {
            if (curlen != prevlen) s->bl_tree[curlen].Freq++;
            s->bl_tree[REP_3_6].Freq++;
        } else if (count <= 10) {
  415fa0:	83 ff 0a             	cmp    $0xa,%edi
  415fa3:	0f 8e ef 00 00 00    	jle    416098 <_tr_flush_block+0x14d8>
            s->bl_tree[REPZ_3_10].Freq++;
        } else {
            s->bl_tree[REPZ_11_138].Freq++;
  415fa9:	66 83 83 f4 0a 00 00 	addw   $0x1,0xaf4(%rbx)
  415fb0:	01 
  415fb1:	e9 09 ef ff ff       	jmpq   414ebf <_tr_flush_block+0x2ff>
  415fb6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  415fbd:	00 00 00 
    send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */
    send_bits(s, dcodes-1,   5);
    send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */
    for (rank = 0; rank < blcodes; rank++) {
        Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
        send_bits(s, s->bl_tree[bl_order[rank]].Len, 3);
  415fc0:	44 0f b6 3d 38 30 02 	movzbl 0x23038(%rip),%r15d        # 439000 <bl_order>
  415fc7:	00 
  415fc8:	46 0f b7 9c bb ae 0a 	movzwl 0xaae(%rbx,%r15,4),%r11d
  415fcf:	00 00 
  415fd1:	41 d3 e3             	shl    %cl,%r11d
  415fd4:	83 c1 03             	add    $0x3,%ecx
  415fd7:	44 09 d8             	or     %r11d,%eax
  415fda:	89 8b 24 17 00 00    	mov    %ecx,0x1724(%rbx)
  415fe0:	66 89 83 20 17 00 00 	mov    %ax,0x1720(%rbx)
  415fe7:	e9 22 fb ff ff       	jmpq   415b0e <_tr_flush_block+0xf4e>
  415fec:	0f 1f 40 00          	nopl   0x0(%rax)
    Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
            "too many codes");
    Tracev((stderr, "\nbl counts: "));
    send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */
    send_bits(s, dcodes-1,   5);
    send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */
  415ff0:	8d 46 fd             	lea    -0x3(%rsi),%eax
  415ff3:	d3 e0                	shl    %cl,%eax
  415ff5:	83 c1 04             	add    $0x4,%ecx
  415ff8:	44 09 f8             	or     %r15d,%eax
  415ffb:	89 8b 24 17 00 00    	mov    %ecx,0x1724(%rbx)
  416001:	66 89 83 20 17 00 00 	mov    %ax,0x1720(%rbx)
  416008:	e9 78 fa ff ff       	jmpq   415a85 <_tr_flush_block+0xec5>
  41600d:	0f 1f 00             	nopl   (%rax)
    Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
    Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
            "too many codes");
    Tracev((stderr, "\nbl counts: "));
    send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */
    send_bits(s, dcodes-1,   5);
  416010:	83 c1 05             	add    $0x5,%ecx
  416013:	89 8b 24 17 00 00    	mov    %ecx,0x1724(%rbx)
  416019:	e9 ef f9 ff ff       	jmpq   415a0d <_tr_flush_block+0xe4d>
  41601e:	66 90                	xchg   %ax,%ax

    Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
    Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
            "too many codes");
    Tracev((stderr, "\nbl counts: "));
    send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */
  416020:	8d 82 00 ff ff ff    	lea    -0x100(%rdx),%eax
  416026:	d3 e0                	shl    %cl,%eax
  416028:	83 c1 05             	add    $0x5,%ecx
  41602b:	41 09 c7             	or     %eax,%r15d
  41602e:	89 8b 24 17 00 00    	mov    %ecx,0x1724(%rbx)
  416034:	66 44 89 bb 20 17 00 	mov    %r15w,0x1720(%rbx)
  41603b:	00 
  41603c:	e9 5b f9 ff ff       	jmpq   41599c <_tr_flush_block+0xddc>
  416041:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
 */
local void bi_windup(s)
    deflate_state *s;
{
    if (s->bi_valid > 8) {
        put_short(s, s->bi_buf);
  416048:	44 8b 6b 28          	mov    0x28(%rbx),%r13d
  41604c:	44 0f b7 83 20 17 00 	movzwl 0x1720(%rbx),%r8d
  416053:	00 
  416054:	4c 8b 5b 10          	mov    0x10(%rbx),%r11
  416058:	41 8d 75 01          	lea    0x1(%r13),%esi
  41605c:	89 73 28             	mov    %esi,0x28(%rbx)
  41605f:	47 88 04 2b          	mov    %r8b,(%r11,%r13,1)
  416063:	44 8b 7b 28          	mov    0x28(%rbx),%r15d
  416067:	44 0f b6 93 21 17 00 	movzbl 0x1721(%rbx),%r10d
  41606e:	00 
  41606f:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
  416073:	45 8d 4f 01          	lea    0x1(%r15),%r9d
  416077:	44 89 4b 28          	mov    %r9d,0x28(%rbx)
  41607b:	46 88 14 3f          	mov    %r10b,(%rdi,%r15,1)
  41607f:	e9 83 fc ff ff       	jmpq   415d07 <_tr_flush_block+0x1147>
  416084:	0f 1f 40 00          	nopl   0x0(%rax)
            s->bl_tree[curlen].Freq += count;
        } else if (curlen != 0) {
            if (curlen != prevlen) s->bl_tree[curlen].Freq++;
            s->bl_tree[REP_3_6].Freq++;
        } else if (count <= 10) {
            s->bl_tree[REPZ_3_10].Freq++;
  416088:	66 83 83 f0 0a 00 00 	addw   $0x1,0xaf0(%rbx)
  41608f:	01 
  416090:	e9 5a ec ff ff       	jmpq   414cef <_tr_flush_block+0x12f>
  416095:	0f 1f 00             	nopl   (%rax)
  416098:	66 83 83 f0 0a 00 00 	addw   $0x1,0xaf0(%rbx)
  41609f:	01 
  4160a0:	e9 1a ee ff ff       	jmpq   414ebf <_tr_flush_block+0x2ff>

    /* Determine the number of bit length codes to send. The pkzip format
     * requires that at least 4 bit length codes be sent. (appnote.txt says
     * 3 but the actual value used is 4.)
     */
    for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {
  4160a5:	be 0a 00 00 00       	mov    $0xa,%esi
  4160aa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  4160b0:	8d 44 76 11          	lea    0x11(%rsi,%rsi,2),%eax
  4160b4:	48 98                	cltq   
  4160b6:	e9 f6 ef ff ff       	jmpq   4150b1 <_tr_flush_block+0x4f1>
  4160bb:	be 0e 00 00 00       	mov    $0xe,%esi
  4160c0:	eb ee                	jmp    4160b0 <_tr_flush_block+0x14f0>
  4160c2:	be 0f 00 00 00       	mov    $0xf,%esi
  4160c7:	eb e7                	jmp    4160b0 <_tr_flush_block+0x14f0>
  4160c9:	be 10 00 00 00       	mov    $0x10,%esi
  4160ce:	eb e0                	jmp    4160b0 <_tr_flush_block+0x14f0>
  4160d0:	be 11 00 00 00       	mov    $0x11,%esi
  4160d5:	eb d9                	jmp    4160b0 <_tr_flush_block+0x14f0>
  4160d7:	be 12 00 00 00       	mov    $0x12,%esi
  4160dc:	eb d2                	jmp    4160b0 <_tr_flush_block+0x14f0>
  4160de:	be 0c 00 00 00       	mov    $0xc,%esi
  4160e3:	eb cb                	jmp    4160b0 <_tr_flush_block+0x14f0>
  4160e5:	be 0d 00 00 00       	mov    $0xd,%esi
  4160ea:	eb c4                	jmp    4160b0 <_tr_flush_block+0x14f0>
  4160ec:	be 09 00 00 00       	mov    $0x9,%esi
  4160f1:	eb bd                	jmp    4160b0 <_tr_flush_block+0x14f0>
  4160f3:	be 08 00 00 00       	mov    $0x8,%esi
  4160f8:	eb b6                	jmp    4160b0 <_tr_flush_block+0x14f0>
  4160fa:	be 0b 00 00 00       	mov    $0xb,%esi
  4160ff:	eb af                	jmp    4160b0 <_tr_flush_block+0x14f0>
  416101:	be 03 00 00 00       	mov    $0x3,%esi
  416106:	eb a8                	jmp    4160b0 <_tr_flush_block+0x14f0>
  416108:	be 07 00 00 00       	mov    $0x7,%esi
  41610d:	eb a1                	jmp    4160b0 <_tr_flush_block+0x14f0>
  41610f:	be 06 00 00 00       	mov    $0x6,%esi
  416114:	eb 9a                	jmp    4160b0 <_tr_flush_block+0x14f0>
  416116:	be 05 00 00 00       	mov    $0x5,%esi
  41611b:	eb 93                	jmp    4160b0 <_tr_flush_block+0x14f0>
  41611d:	be 04 00 00 00       	mov    $0x4,%esi
  416122:	eb 8c                	jmp    4160b0 <_tr_flush_block+0x14f0>
    for (n = 0; n < 9; n++)
        if (s->dyn_ltree[n].Freq != 0)
            break;
    if (n == 9)
        for (n = 14; n < 32; n++)
            if (s->dyn_ltree[n].Freq != 0)
  416124:	31 ed                	xor    %ebp,%ebp
                break;
    s->strm->data_type = (n == 32) ? Z_TEXT : Z_BINARY;
  416126:	89 6e 58             	mov    %ebp,0x58(%rsi)
  416129:	e9 c5 ea ff ff       	jmpq   414bf3 <_tr_flush_block+0x33>
  41612e:	66 90                	xchg   %ax,%ax

0000000000416130 <_tr_tally>:
int _tr_tally (s, dist, lc)
    deflate_state *s;
    unsigned dist;  /* distance of matched string */
    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
{
    s->d_buf[s->last_lit] = (ush)dist;
  416130:	8b 8f fc 16 00 00    	mov    0x16fc(%rdi),%ecx
  416136:	4c 8b 87 00 17 00 00 	mov    0x1700(%rdi),%r8
    s->l_buf[s->last_lit++] = (uch)lc;
  41613d:	4c 8b 8f f0 16 00 00 	mov    0x16f0(%rdi),%r9
int _tr_tally (s, dist, lc)
    deflate_state *s;
    unsigned dist;  /* distance of matched string */
    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
{
    s->d_buf[s->last_lit] = (ush)dist;
  416144:	48 89 c8             	mov    %rcx,%rax
  416147:	66 41 89 34 48       	mov    %si,(%r8,%rcx,2)
    s->l_buf[s->last_lit++] = (uch)lc;
  41614c:	83 c0 01             	add    $0x1,%eax
    if (dist == 0) {
  41614f:	85 f6                	test   %esi,%esi
    deflate_state *s;
    unsigned dist;  /* distance of matched string */
    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
{
    s->d_buf[s->last_lit] = (ush)dist;
    s->l_buf[s->last_lit++] = (uch)lc;
  416151:	89 87 fc 16 00 00    	mov    %eax,0x16fc(%rdi)
  416157:	41 88 14 09          	mov    %dl,(%r9,%rcx,1)
    if (dist == 0) {
  41615b:	74 63                	je     4161c0 <_tr_tally+0x90>
        dist--;             /* dist = match distance - 1 */
        Assert((ush)dist < (ush)MAX_DIST(s) &&
               (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
               (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

        s->dyn_ltree[_length_code[lc]+LITERALS+1].Freq++;
  41615d:	89 d2                	mov    %edx,%edx
    s->l_buf[s->last_lit++] = (uch)lc;
    if (dist == 0) {
        /* lc is the unmatched char */
        s->dyn_ltree[lc].Freq++;
    } else {
        s->matches++;
  41615f:	83 87 18 17 00 00 01 	addl   $0x1,0x1718(%rdi)
        /* Here, lc is the match length - MIN_MATCH */
        dist--;             /* dist = match distance - 1 */
  416166:	83 ee 01             	sub    $0x1,%esi
  416169:	44 0f b6 92 00 88 43 	movzbl 0x438800(%rdx),%r10d
  416170:	00 
        Assert((ush)dist < (ush)MAX_DIST(s) &&
               (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
               (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

        s->dyn_ltree[_length_code[lc]+LITERALS+1].Freq++;
  416171:	66 42 83 84 97 c8 04 	addw   $0x1,0x4c8(%rdi,%r10,4)
  416178:	00 00 01 
        s->dyn_dtree[d_code(dist)].Freq++;
  41617b:	81 fe ff 00 00 00    	cmp    $0xff,%esi
  416181:	77 2d                	ja     4161b0 <_tr_tally+0x80>
  416183:	0f b6 b6 00 89 43 00 	movzbl 0x438900(%rsi),%esi
  41618a:	66 83 84 b7 b8 09 00 	addw   $0x1,0x9b8(%rdi,%rsi,4)
  416191:	00 01 
               s->last_lit, in_length, out_length,
               100L - out_length*100L/in_length));
        if (s->matches < s->last_lit/2 && out_length < in_length/2) return 1;
    }
#endif
    return (s->last_lit == s->lit_bufsize-1);
  416193:	8b 8f f8 16 00 00    	mov    0x16f8(%rdi),%ecx
  416199:	83 e9 01             	sub    $0x1,%ecx
  41619c:	39 8f fc 16 00 00    	cmp    %ecx,0x16fc(%rdi)
  4161a2:	40 0f 94 c7          	sete   %dil
  4161a6:	40 0f b6 c7          	movzbl %dil,%eax
    /* We avoid equality with lit_bufsize because of wraparound at 64K
     * on 16 bit machines and because stored blocks are restricted to
     * 64K-1 bytes.
     */
}
  4161aa:	c3                   	retq   
  4161ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        Assert((ush)dist < (ush)MAX_DIST(s) &&
               (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
               (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

        s->dyn_ltree[_length_code[lc]+LITERALS+1].Freq++;
        s->dyn_dtree[d_code(dist)].Freq++;
  4161b0:	c1 ee 07             	shr    $0x7,%esi
  4161b3:	81 c6 00 01 00 00    	add    $0x100,%esi
  4161b9:	eb c8                	jmp    416183 <_tr_tally+0x53>
  4161bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4161c0:	41 89 d3             	mov    %edx,%r11d
{
    s->d_buf[s->last_lit] = (ush)dist;
    s->l_buf[s->last_lit++] = (uch)lc;
    if (dist == 0) {
        /* lc is the unmatched char */
        s->dyn_ltree[lc].Freq++;
  4161c3:	66 42 83 84 9f c4 00 	addw   $0x1,0xc4(%rdi,%r11,4)
  4161ca:	00 00 01 
  4161cd:	eb c4                	jmp    416193 <_tr_tally+0x63>
  4161cf:	90                   	nop

00000000004161d0 <zlibVersion>:


const char * ZEXPORT zlibVersion()
{
    return ZLIB_VERSION;
}
  4161d0:	b8 ce 85 43 00       	mov    $0x4385ce,%eax
  4161d5:	c3                   	retq   
  4161d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4161dd:	00 00 00 

00000000004161e0 <zlibCompileFlags>:
        flags += 1L << 26;
#    endif
#  endif
#endif
    return flags;
}
  4161e0:	b8 a9 00 00 00       	mov    $0xa9,%eax
  4161e5:	c3                   	retq   
  4161e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4161ed:	00 00 00 

00000000004161f0 <zError>:
 * uncompress()
 */
const char * ZEXPORT zError(err)
    int err;
{
    return ERR_MSG(err);
  4161f0:	b8 02 00 00 00       	mov    $0x2,%eax
  4161f5:	29 f8                	sub    %edi,%eax
  4161f7:	48 98                	cltq   
  4161f9:	48 8b 04 c5 40 92 43 	mov    0x439240(,%rax,8),%rax
  416200:	00 
}
  416201:	c3                   	retq   
  416202:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  416209:	1f 84 00 00 00 00 00 

0000000000416210 <zcalloc>:
    voidpf opaque;
    unsigned items;
    unsigned size;
{
    if (opaque) items += size - size; /* make compiler happy */
    return sizeof(uInt) > 2 ? (voidpf)malloc(items * size) :
  416210:	89 f7                	mov    %esi,%edi
  416212:	0f af fa             	imul   %edx,%edi
  416215:	e9 36 0b ff ff       	jmpq   406d50 <malloc@plt>
  41621a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000416220 <zcfree>:

void  zcfree (opaque, ptr)
    voidpf opaque;
    voidpf ptr;
{
    free(ptr);
  416220:	48 89 f7             	mov    %rsi,%rdi
  416223:	e9 78 0b ff ff       	jmpq   406da0 <free@plt>
  416228:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41622f:	00 

0000000000416230 <inflateReset>:
int ZEXPORT inflateReset(strm)
z_streamp strm;
{
    struct inflate_state FAR *state;

    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  416230:	48 85 ff             	test   %rdi,%rdi
  416233:	0f 84 97 00 00 00    	je     4162d0 <inflateReset+0xa0>
  416239:	48 8b 47 38          	mov    0x38(%rdi),%rax
  41623d:	48 85 c0             	test   %rax,%rax
  416240:	0f 84 8a 00 00 00    	je     4162d0 <inflateReset+0xa0>
    state->wsize = 0;
    state->whave = 0;
    state->write = 0;
    state->hold = 0;
    state->bits = 0;
    state->lencode = state->distcode = state->next = state->codes;
  416246:	48 8d 90 50 05 00 00 	lea    0x550(%rax),%rdx
{
    struct inflate_state FAR *state;

    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
    state = (struct inflate_state FAR *)strm->state;
    strm->total_in = strm->total_out = state->total = 0;
  41624d:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
  416254:	00 
  416255:	48 c7 47 28 00 00 00 	movq   $0x0,0x28(%rdi)
  41625c:	00 
  41625d:	48 c7 47 10 00 00 00 	movq   $0x0,0x10(%rdi)
  416264:	00 
    strm->msg = Z_NULL;
  416265:	48 c7 47 30 00 00 00 	movq   $0x0,0x30(%rdi)
  41626c:	00 
    strm->adler = 1;        /* to support ill-conceived Java test suite */
  41626d:	48 c7 47 60 01 00 00 	movq   $0x1,0x60(%rdi)
  416274:	00 
    state->mode = HEAD;
  416275:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
    state->last = 0;
  41627b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%rax)
    state->havedict = 0;
  416282:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    state->dmax = 32768U;
  416289:	c7 40 14 00 80 00 00 	movl   $0x8000,0x14(%rax)
    state->head = Z_NULL;
  416290:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
  416297:	00 
    state->wsize = 0;
  416298:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%rax)
    state->whave = 0;
  41629f:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%rax)
    state->write = 0;
  4162a6:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%rax)
    state->hold = 0;
  4162ad:	48 c7 40 48 00 00 00 	movq   $0x0,0x48(%rax)
  4162b4:	00 
    state->bits = 0;
  4162b5:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%rax)
    state->lencode = state->distcode = state->next = state->codes;
  4162bc:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
  4162c3:	48 89 50 68          	mov    %rdx,0x68(%rax)
  4162c7:	48 89 50 60          	mov    %rdx,0x60(%rax)
    Tracev((stderr, "inflate: reset\n"));
    return Z_OK;
  4162cb:	31 c0                	xor    %eax,%eax
  4162cd:	c3                   	retq   
  4162ce:	66 90                	xchg   %ax,%ax
int ZEXPORT inflateReset(strm)
z_streamp strm;
{
    struct inflate_state FAR *state;

    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  4162d0:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    state->hold = 0;
    state->bits = 0;
    state->lencode = state->distcode = state->next = state->codes;
    Tracev((stderr, "inflate: reset\n"));
    return Z_OK;
}
  4162d5:	c3                   	retq   
  4162d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4162dd:	00 00 00 

00000000004162e0 <inflatePrime>:
int bits;
int value;
{
    struct inflate_state FAR *state;

    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  4162e0:	48 85 ff             	test   %rdi,%rdi
  4162e3:	74 43                	je     416328 <inflatePrime+0x48>
    state = (struct inflate_state FAR *)strm->state;
    if (bits > 16 || state->bits + bits > 32) return Z_STREAM_ERROR;
  4162e5:	83 fe 10             	cmp    $0x10,%esi
int bits;
int value;
{
    struct inflate_state FAR *state;

    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  4162e8:	48 8b 47 38          	mov    0x38(%rdi),%rax
    state = (struct inflate_state FAR *)strm->state;
    if (bits > 16 || state->bits + bits > 32) return Z_STREAM_ERROR;
  4162ec:	7f 3a                	jg     416328 <inflatePrime+0x48>
  4162ee:	48 85 c0             	test   %rax,%rax
  4162f1:	74 35                	je     416328 <inflatePrime+0x48>
  4162f3:	44 8b 48 50          	mov    0x50(%rax),%r9d
  4162f7:	46 8d 04 0e          	lea    (%rsi,%r9,1),%r8d
  4162fb:	41 83 f8 20          	cmp    $0x20,%r8d
  4162ff:	77 27                	ja     416328 <inflatePrime+0x48>
    value &= (1L << bits) - 1;
  416301:	89 f1                	mov    %esi,%ecx
  416303:	bf 01 00 00 00       	mov    $0x1,%edi
    state->hold += value << state->bits;
    state->bits += bits;
  416308:	44 89 40 50          	mov    %r8d,0x50(%rax)
    struct inflate_state FAR *state;

    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
    state = (struct inflate_state FAR *)strm->state;
    if (bits > 16 || state->bits + bits > 32) return Z_STREAM_ERROR;
    value &= (1L << bits) - 1;
  41630c:	48 d3 e7             	shl    %cl,%rdi
    state->hold += value << state->bits;
  41630f:	44 89 c9             	mov    %r9d,%ecx
    struct inflate_state FAR *state;

    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
    state = (struct inflate_state FAR *)strm->state;
    if (bits > 16 || state->bits + bits > 32) return Z_STREAM_ERROR;
    value &= (1L << bits) - 1;
  416312:	83 ef 01             	sub    $0x1,%edi
  416315:	21 fa                	and    %edi,%edx
    state->hold += value << state->bits;
  416317:	d3 e2                	shl    %cl,%edx
  416319:	48 63 d2             	movslq %edx,%rdx
  41631c:	48 01 50 48          	add    %rdx,0x48(%rax)
    state->bits += bits;
    return Z_OK;
  416320:	31 c0                	xor    %eax,%eax
  416322:	c3                   	retq   
  416323:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
int bits;
int value;
{
    struct inflate_state FAR *state;

    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  416328:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    if (bits > 16 || state->bits + bits > 32) return Z_STREAM_ERROR;
    value &= (1L << bits) - 1;
    state->hold += value << state->bits;
    state->bits += bits;
    return Z_OK;
}
  41632d:	c3                   	retq   
  41632e:	66 90                	xchg   %ax,%ax

0000000000416330 <inflateInit2_>:
const char *version;
int stream_size;
{
    struct inflate_state FAR *state;

    if (version == Z_NULL || version[0] != ZLIB_VERSION[0] ||
  416330:	48 85 d2             	test   %rdx,%rdx
  416333:	0f 84 77 01 00 00    	je     4164b0 <inflateInit2_+0x180>
  416339:	80 3a 31             	cmpb   $0x31,(%rdx)
  41633c:	0f 85 6e 01 00 00    	jne    4164b0 <inflateInit2_+0x180>
  416342:	83 f9 70             	cmp    $0x70,%ecx
  416345:	0f 85 65 01 00 00    	jne    4164b0 <inflateInit2_+0x180>
        stream_size != (int)(sizeof(z_stream)))
        return Z_VERSION_ERROR;
    if (strm == Z_NULL) return Z_STREAM_ERROR;
  41634b:	48 85 ff             	test   %rdi,%rdi
  41634e:	48 89 f8             	mov    %rdi,%rax
  416351:	0f 84 89 01 00 00    	je     4164e0 <inflateInit2_+0x1b0>
int ZEXPORT inflateInit2_(strm, windowBits, version, stream_size)
z_streamp strm;
int windowBits;
const char *version;
int stream_size;
{
  416357:	55                   	push   %rbp
  416358:	53                   	push   %rbx
  416359:	48 83 ec 08          	sub    $0x8,%rsp
    if (version == Z_NULL || version[0] != ZLIB_VERSION[0] ||
        stream_size != (int)(sizeof(z_stream)))
        return Z_VERSION_ERROR;
    if (strm == Z_NULL) return Z_STREAM_ERROR;
    strm->msg = Z_NULL;                 /* in case we return an error */
    if (strm->zalloc == (alloc_func)0) {
  41635d:	48 8b 4f 40          	mov    0x40(%rdi),%rcx

    if (version == Z_NULL || version[0] != ZLIB_VERSION[0] ||
        stream_size != (int)(sizeof(z_stream)))
        return Z_VERSION_ERROR;
    if (strm == Z_NULL) return Z_STREAM_ERROR;
    strm->msg = Z_NULL;                 /* in case we return an error */
  416361:	48 c7 47 30 00 00 00 	movq   $0x0,0x30(%rdi)
  416368:	00 
    if (strm->zalloc == (alloc_func)0) {
  416369:	48 85 c9             	test   %rcx,%rcx
  41636c:	0f 84 1e 01 00 00    	je     416490 <inflateInit2_+0x160>
  416372:	48 8b 7f 50          	mov    0x50(%rdi),%rdi
        strm->zalloc = zcalloc;
        strm->opaque = (voidpf)0;
    }
    if (strm->zfree == (free_func)0) strm->zfree = zcfree;
  416376:	48 83 78 48 00       	cmpq   $0x0,0x48(%rax)
  41637b:	0f 84 ff 00 00 00    	je     416480 <inflateInit2_+0x150>
  416381:	89 f5                	mov    %esi,%ebp
  416383:	48 89 c3             	mov    %rax,%rbx
    state = (struct inflate_state FAR *)
  416386:	ba 50 25 00 00       	mov    $0x2550,%edx
  41638b:	be 01 00 00 00       	mov    $0x1,%esi
  416390:	ff d1                	callq  *%rcx
            ZALLOC(strm, 1, sizeof(struct inflate_state));
    if (state == Z_NULL) return Z_MEM_ERROR;
  416392:	48 85 c0             	test   %rax,%rax
  416395:	0f 84 3e 01 00 00    	je     4164d9 <inflateInit2_+0x1a9>
    Tracev((stderr, "inflate: allocated\n"));
    strm->state = (struct internal_state FAR *)state;
    if (windowBits < 0) {
  41639b:	85 ed                	test   %ebp,%ebp
    if (strm->zfree == (free_func)0) strm->zfree = zcfree;
    state = (struct inflate_state FAR *)
            ZALLOC(strm, 1, sizeof(struct inflate_state));
    if (state == Z_NULL) return Z_MEM_ERROR;
    Tracev((stderr, "inflate: allocated\n"));
    strm->state = (struct internal_state FAR *)state;
  41639d:	48 89 43 38          	mov    %rax,0x38(%rbx)
    if (windowBits < 0) {
  4163a1:	0f 88 c9 00 00 00    	js     416470 <inflateInit2_+0x140>
        state->wrap = 0;
        windowBits = -windowBits;
    }
    else {
        state->wrap = (windowBits >> 4) + 1;
  4163a7:	89 ea                	mov    %ebp,%edx
#ifdef GUNZIP
        if (windowBits < 48) windowBits &= 15;
  4163a9:	89 ee                	mov    %ebp,%esi
    if (windowBits < 0) {
        state->wrap = 0;
        windowBits = -windowBits;
    }
    else {
        state->wrap = (windowBits >> 4) + 1;
  4163ab:	c1 fa 04             	sar    $0x4,%edx
#ifdef GUNZIP
        if (windowBits < 48) windowBits &= 15;
  4163ae:	83 e6 0f             	and    $0xf,%esi
    if (windowBits < 0) {
        state->wrap = 0;
        windowBits = -windowBits;
    }
    else {
        state->wrap = (windowBits >> 4) + 1;
  4163b1:	83 c2 01             	add    $0x1,%edx
#ifdef GUNZIP
        if (windowBits < 48) windowBits &= 15;
  4163b4:	83 fd 2f             	cmp    $0x2f,%ebp
    if (windowBits < 0) {
        state->wrap = 0;
        windowBits = -windowBits;
    }
    else {
        state->wrap = (windowBits >> 4) + 1;
  4163b7:	89 50 08             	mov    %edx,0x8(%rax)
#ifdef GUNZIP
        if (windowBits < 48) windowBits &= 15;
  4163ba:	0f 4e ee             	cmovle %esi,%ebp
#endif
    }
    if (windowBits < 8 || windowBits > 15) {
  4163bd:	8d 7d f8             	lea    -0x8(%rbp),%edi
  4163c0:	83 ff 07             	cmp    $0x7,%edi
  4163c3:	0f 87 f7 00 00 00    	ja     4164c0 <inflateInit2_+0x190>
    state->wsize = 0;
    state->whave = 0;
    state->write = 0;
    state->hold = 0;
    state->bits = 0;
    state->lencode = state->distcode = state->next = state->codes;
  4163c9:	4c 8d 80 50 05 00 00 	lea    0x550(%rax),%r8
    if (windowBits < 8 || windowBits > 15) {
        ZFREE(strm, state);
        strm->state = Z_NULL;
        return Z_STREAM_ERROR;
    }
    state->wbits = (unsigned)windowBits;
  4163d0:	89 68 30             	mov    %ebp,0x30(%rax)
    state->window = Z_NULL;
  4163d3:	48 c7 40 40 00 00 00 	movq   $0x0,0x40(%rax)
  4163da:	00 
{
    struct inflate_state FAR *state;

    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
    state = (struct inflate_state FAR *)strm->state;
    strm->total_in = strm->total_out = state->total = 0;
  4163db:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
  4163e2:	00 
  4163e3:	48 c7 43 28 00 00 00 	movq   $0x0,0x28(%rbx)
  4163ea:	00 
  4163eb:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
  4163f2:	00 
    strm->msg = Z_NULL;
  4163f3:	48 c7 43 30 00 00 00 	movq   $0x0,0x30(%rbx)
  4163fa:	00 
    strm->adler = 1;        /* to support ill-conceived Java test suite */
  4163fb:	48 c7 43 60 01 00 00 	movq   $0x1,0x60(%rbx)
  416402:	00 
    state->mode = HEAD;
  416403:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
    state->last = 0;
  416409:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%rax)
    state->havedict = 0;
  416410:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    state->dmax = 32768U;
  416417:	c7 40 14 00 80 00 00 	movl   $0x8000,0x14(%rax)
    state->head = Z_NULL;
  41641e:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
  416425:	00 
    state->wsize = 0;
  416426:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%rax)
    state->whave = 0;
  41642d:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%rax)
    state->write = 0;
  416434:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%rax)
    state->hold = 0;
  41643b:	48 c7 40 48 00 00 00 	movq   $0x0,0x48(%rax)
  416442:	00 
    state->bits = 0;
  416443:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%rax)
    state->lencode = state->distcode = state->next = state->codes;
  41644a:	4c 89 80 88 00 00 00 	mov    %r8,0x88(%rax)
  416451:	4c 89 40 68          	mov    %r8,0x68(%rax)
  416455:	4c 89 40 60          	mov    %r8,0x60(%rax)
    Tracev((stderr, "inflate: reset\n"));
    return Z_OK;
  416459:	31 c0                	xor    %eax,%eax
  41645b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        return Z_STREAM_ERROR;
    }
    state->wbits = (unsigned)windowBits;
    state->window = Z_NULL;
    return inflateReset(strm);
}
  416460:	48 83 c4 08          	add    $0x8,%rsp
  416464:	5b                   	pop    %rbx
  416465:	5d                   	pop    %rbp
  416466:	c3                   	retq   
  416467:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41646e:	00 00 
            ZALLOC(strm, 1, sizeof(struct inflate_state));
    if (state == Z_NULL) return Z_MEM_ERROR;
    Tracev((stderr, "inflate: allocated\n"));
    strm->state = (struct internal_state FAR *)state;
    if (windowBits < 0) {
        state->wrap = 0;
  416470:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
        windowBits = -windowBits;
  416477:	f7 dd                	neg    %ebp
  416479:	e9 3f ff ff ff       	jmpq   4163bd <inflateInit2_+0x8d>
  41647e:	66 90                	xchg   %ax,%ax
    strm->msg = Z_NULL;                 /* in case we return an error */
    if (strm->zalloc == (alloc_func)0) {
        strm->zalloc = zcalloc;
        strm->opaque = (voidpf)0;
    }
    if (strm->zfree == (free_func)0) strm->zfree = zcfree;
  416480:	48 c7 40 48 20 62 41 	movq   $0x416220,0x48(%rax)
  416487:	00 
  416488:	e9 f4 fe ff ff       	jmpq   416381 <inflateInit2_+0x51>
  41648d:	0f 1f 00             	nopl   (%rax)
        stream_size != (int)(sizeof(z_stream)))
        return Z_VERSION_ERROR;
    if (strm == Z_NULL) return Z_STREAM_ERROR;
    strm->msg = Z_NULL;                 /* in case we return an error */
    if (strm->zalloc == (alloc_func)0) {
        strm->zalloc = zcalloc;
  416490:	48 c7 47 40 10 62 41 	movq   $0x416210,0x40(%rdi)
  416497:	00 
        strm->opaque = (voidpf)0;
  416498:	48 c7 47 50 00 00 00 	movq   $0x0,0x50(%rdi)
  41649f:	00 
  4164a0:	b9 10 62 41 00       	mov    $0x416210,%ecx
  4164a5:	31 ff                	xor    %edi,%edi
  4164a7:	e9 ca fe ff ff       	jmpq   416376 <inflateInit2_+0x46>
  4164ac:	0f 1f 40 00          	nopl   0x0(%rax)
{
    struct inflate_state FAR *state;

    if (version == Z_NULL || version[0] != ZLIB_VERSION[0] ||
        stream_size != (int)(sizeof(z_stream)))
        return Z_VERSION_ERROR;
  4164b0:	b8 fa ff ff ff       	mov    $0xfffffffa,%eax
  4164b5:	c3                   	retq   
  4164b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4164bd:	00 00 00 
#ifdef GUNZIP
        if (windowBits < 48) windowBits &= 15;
#endif
    }
    if (windowBits < 8 || windowBits > 15) {
        ZFREE(strm, state);
  4164c0:	48 89 c6             	mov    %rax,%rsi
  4164c3:	48 8b 7b 50          	mov    0x50(%rbx),%rdi
  4164c7:	ff 53 48             	callq  *0x48(%rbx)
        strm->state = Z_NULL;
  4164ca:	48 c7 43 38 00 00 00 	movq   $0x0,0x38(%rbx)
  4164d1:	00 
        return Z_STREAM_ERROR;
  4164d2:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  4164d7:	eb 87                	jmp    416460 <inflateInit2_+0x130>
        strm->opaque = (voidpf)0;
    }
    if (strm->zfree == (free_func)0) strm->zfree = zcfree;
    state = (struct inflate_state FAR *)
            ZALLOC(strm, 1, sizeof(struct inflate_state));
    if (state == Z_NULL) return Z_MEM_ERROR;
  4164d9:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  4164de:	eb 80                	jmp    416460 <inflateInit2_+0x130>
    struct inflate_state FAR *state;

    if (version == Z_NULL || version[0] != ZLIB_VERSION[0] ||
        stream_size != (int)(sizeof(z_stream)))
        return Z_VERSION_ERROR;
    if (strm == Z_NULL) return Z_STREAM_ERROR;
  4164e0:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
        return Z_STREAM_ERROR;
    }
    state->wbits = (unsigned)windowBits;
    state->window = Z_NULL;
    return inflateReset(strm);
}
  4164e5:	c3                   	retq   
  4164e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4164ed:	00 00 00 

00000000004164f0 <inflateInit_>:
const char *version;
int stream_size;
{
    struct inflate_state FAR *state;

    if (version == Z_NULL || version[0] != ZLIB_VERSION[0] ||
  4164f0:	48 85 f6             	test   %rsi,%rsi
  4164f3:	0f 84 3f 01 00 00    	je     416638 <inflateInit_+0x148>
  4164f9:	80 3e 31             	cmpb   $0x31,(%rsi)
  4164fc:	0f 85 36 01 00 00    	jne    416638 <inflateInit_+0x148>
  416502:	83 fa 70             	cmp    $0x70,%edx
  416505:	0f 85 2d 01 00 00    	jne    416638 <inflateInit_+0x148>
        stream_size != (int)(sizeof(z_stream)))
        return Z_VERSION_ERROR;
    if (strm == Z_NULL) return Z_STREAM_ERROR;
  41650b:	48 85 ff             	test   %rdi,%rdi
  41650e:	48 89 f8             	mov    %rdi,%rax
  416511:	0f 84 27 01 00 00    	je     41663e <inflateInit_+0x14e>

int ZEXPORT inflateInit_(strm, version, stream_size)
z_streamp strm;
const char *version;
int stream_size;
{
  416517:	53                   	push   %rbx
    if (version == Z_NULL || version[0] != ZLIB_VERSION[0] ||
        stream_size != (int)(sizeof(z_stream)))
        return Z_VERSION_ERROR;
    if (strm == Z_NULL) return Z_STREAM_ERROR;
    strm->msg = Z_NULL;                 /* in case we return an error */
    if (strm->zalloc == (alloc_func)0) {
  416518:	48 8b 4f 40          	mov    0x40(%rdi),%rcx

    if (version == Z_NULL || version[0] != ZLIB_VERSION[0] ||
        stream_size != (int)(sizeof(z_stream)))
        return Z_VERSION_ERROR;
    if (strm == Z_NULL) return Z_STREAM_ERROR;
    strm->msg = Z_NULL;                 /* in case we return an error */
  41651c:	48 c7 47 30 00 00 00 	movq   $0x0,0x30(%rdi)
  416523:	00 
    if (strm->zalloc == (alloc_func)0) {
  416524:	48 85 c9             	test   %rcx,%rcx
  416527:	0f 84 d3 00 00 00    	je     416600 <inflateInit_+0x110>
        strm->zalloc = zcalloc;
        strm->opaque = (voidpf)0;
    }
    if (strm->zfree == (free_func)0) strm->zfree = zcfree;
  41652d:	48 83 78 48 00       	cmpq   $0x0,0x48(%rax)
  416532:	48 8b 7f 50          	mov    0x50(%rdi),%rdi
  416536:	0f 84 ec 00 00 00    	je     416628 <inflateInit_+0x138>
  41653c:	48 89 c3             	mov    %rax,%rbx
    state = (struct inflate_state FAR *)
  41653f:	ba 50 25 00 00       	mov    $0x2550,%edx
  416544:	be 01 00 00 00       	mov    $0x1,%esi
  416549:	ff d1                	callq  *%rcx
            ZALLOC(strm, 1, sizeof(struct inflate_state));
    if (state == Z_NULL) return Z_MEM_ERROR;
  41654b:	48 85 c0             	test   %rax,%rax
  41654e:	0f 84 f0 00 00 00    	je     416644 <inflateInit_+0x154>
    state->wsize = 0;
    state->whave = 0;
    state->write = 0;
    state->hold = 0;
    state->bits = 0;
    state->lencode = state->distcode = state->next = state->codes;
  416554:	48 8d 90 50 05 00 00 	lea    0x550(%rax),%rdx
    if (strm->zfree == (free_func)0) strm->zfree = zcfree;
    state = (struct inflate_state FAR *)
            ZALLOC(strm, 1, sizeof(struct inflate_state));
    if (state == Z_NULL) return Z_MEM_ERROR;
    Tracev((stderr, "inflate: allocated\n"));
    strm->state = (struct internal_state FAR *)state;
  41655b:	48 89 43 38          	mov    %rax,0x38(%rbx)
    if (windowBits < 0) {
        state->wrap = 0;
        windowBits = -windowBits;
    }
    else {
        state->wrap = (windowBits >> 4) + 1;
  41655f:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%rax)
    if (windowBits < 8 || windowBits > 15) {
        ZFREE(strm, state);
        strm->state = Z_NULL;
        return Z_STREAM_ERROR;
    }
    state->wbits = (unsigned)windowBits;
  416566:	c7 40 30 0f 00 00 00 	movl   $0xf,0x30(%rax)
    state->window = Z_NULL;
  41656d:	48 c7 40 40 00 00 00 	movq   $0x0,0x40(%rax)
  416574:	00 
{
    struct inflate_state FAR *state;

    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
    state = (struct inflate_state FAR *)strm->state;
    strm->total_in = strm->total_out = state->total = 0;
  416575:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
  41657c:	00 
  41657d:	48 c7 43 28 00 00 00 	movq   $0x0,0x28(%rbx)
  416584:	00 
  416585:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
  41658c:	00 
    strm->msg = Z_NULL;
  41658d:	48 c7 43 30 00 00 00 	movq   $0x0,0x30(%rbx)
  416594:	00 
    strm->adler = 1;        /* to support ill-conceived Java test suite */
  416595:	48 c7 43 60 01 00 00 	movq   $0x1,0x60(%rbx)
  41659c:	00 
    state->mode = HEAD;
  41659d:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
    state->last = 0;
  4165a3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%rax)
    state->havedict = 0;
  4165aa:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    state->dmax = 32768U;
  4165b1:	c7 40 14 00 80 00 00 	movl   $0x8000,0x14(%rax)
    state->head = Z_NULL;
  4165b8:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
  4165bf:	00 
    state->wsize = 0;
  4165c0:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%rax)
    state->whave = 0;
  4165c7:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%rax)
    state->write = 0;
  4165ce:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%rax)
    state->hold = 0;
  4165d5:	48 c7 40 48 00 00 00 	movq   $0x0,0x48(%rax)
  4165dc:	00 
    state->bits = 0;
  4165dd:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%rax)
    state->lencode = state->distcode = state->next = state->codes;
  4165e4:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
  4165eb:	48 89 50 68          	mov    %rdx,0x68(%rax)
  4165ef:	48 89 50 60          	mov    %rdx,0x60(%rax)
    Tracev((stderr, "inflate: reset\n"));
    return Z_OK;
  4165f3:	31 c0                	xor    %eax,%eax
z_streamp strm;
const char *version;
int stream_size;
{
    return inflateInit2_(strm, DEF_WBITS, version, stream_size);
}
  4165f5:	5b                   	pop    %rbx
  4165f6:	c3                   	retq   
  4165f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4165fe:	00 00 
        stream_size != (int)(sizeof(z_stream)))
        return Z_VERSION_ERROR;
    if (strm == Z_NULL) return Z_STREAM_ERROR;
    strm->msg = Z_NULL;                 /* in case we return an error */
    if (strm->zalloc == (alloc_func)0) {
        strm->zalloc = zcalloc;
  416600:	48 c7 47 40 10 62 41 	movq   $0x416210,0x40(%rdi)
  416607:	00 
        strm->opaque = (voidpf)0;
  416608:	48 c7 47 50 00 00 00 	movq   $0x0,0x50(%rdi)
  41660f:	00 
  416610:	31 ff                	xor    %edi,%edi
    }
    if (strm->zfree == (free_func)0) strm->zfree = zcfree;
  416612:	48 83 78 48 00       	cmpq   $0x0,0x48(%rax)
        return Z_VERSION_ERROR;
    if (strm == Z_NULL) return Z_STREAM_ERROR;
    strm->msg = Z_NULL;                 /* in case we return an error */
    if (strm->zalloc == (alloc_func)0) {
        strm->zalloc = zcalloc;
        strm->opaque = (voidpf)0;
  416617:	b9 10 62 41 00       	mov    $0x416210,%ecx
    }
    if (strm->zfree == (free_func)0) strm->zfree = zcfree;
  41661c:	0f 85 1a ff ff ff    	jne    41653c <inflateInit_+0x4c>
  416622:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  416628:	48 c7 40 48 20 62 41 	movq   $0x416220,0x48(%rax)
  41662f:	00 
  416630:	e9 07 ff ff ff       	jmpq   41653c <inflateInit_+0x4c>
  416635:	0f 1f 00             	nopl   (%rax)
{
    struct inflate_state FAR *state;

    if (version == Z_NULL || version[0] != ZLIB_VERSION[0] ||
        stream_size != (int)(sizeof(z_stream)))
        return Z_VERSION_ERROR;
  416638:	b8 fa ff ff ff       	mov    $0xfffffffa,%eax
  41663d:	c3                   	retq   
    if (strm == Z_NULL) return Z_STREAM_ERROR;
  41663e:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
z_streamp strm;
const char *version;
int stream_size;
{
    return inflateInit2_(strm, DEF_WBITS, version, stream_size);
}
  416643:	c3                   	retq   
        strm->opaque = (voidpf)0;
    }
    if (strm->zfree == (free_func)0) strm->zfree = zcfree;
    state = (struct inflate_state FAR *)
            ZALLOC(strm, 1, sizeof(struct inflate_state));
    if (state == Z_NULL) return Z_MEM_ERROR;
  416644:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
z_streamp strm;
const char *version;
int stream_size;
{
    return inflateInit2_(strm, DEF_WBITS, version, stream_size);
}
  416649:	5b                   	pop    %rbx
  41664a:	c3                   	retq   
  41664b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000416650 <inflate>:
 */

int ZEXPORT inflate(strm, flush)
z_streamp strm;
int flush;
{
  416650:	41 57                	push   %r15
  416652:	41 56                	push   %r14
  416654:	49 89 fe             	mov    %rdi,%r14
  416657:	41 55                	push   %r13
  416659:	41 54                	push   %r12
  41665b:	55                   	push   %rbp
  41665c:	53                   	push   %rbx
  41665d:	48 83 ec 78          	sub    $0x78,%rsp
  416661:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  416668:	00 00 
  41666a:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
  41666f:	31 c0                	xor    %eax,%eax
    unsigned char hbuf[4];      /* buffer for gzip header crc calculation */
#endif
    static const unsigned short order[19] = /* permutation of code lengths */
        {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};

    if (strm == Z_NULL || strm->state == Z_NULL || strm->next_out == Z_NULL ||
  416671:	48 85 ff             	test   %rdi,%rdi
 */

int ZEXPORT inflate(strm, flush)
z_streamp strm;
int flush;
{
  416674:	89 74 24 2c          	mov    %esi,0x2c(%rsp)
    unsigned char hbuf[4];      /* buffer for gzip header crc calculation */
#endif
    static const unsigned short order[19] = /* permutation of code lengths */
        {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};

    if (strm == Z_NULL || strm->state == Z_NULL || strm->next_out == Z_NULL ||
  416678:	0f 84 02 2d 00 00    	je     419380 <inflate+0x2d30>
  41667e:	48 8b 5f 38          	mov    0x38(%rdi),%rbx
  416682:	48 85 db             	test   %rbx,%rbx
  416685:	0f 84 f5 2c 00 00    	je     419380 <inflate+0x2d30>
  41668b:	48 8b 47 18          	mov    0x18(%rdi),%rax
  41668f:	48 85 c0             	test   %rax,%rax
  416692:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  416697:	0f 84 e3 2c 00 00    	je     419380 <inflate+0x2d30>
        (strm->next_in == Z_NULL && strm->avail_in != 0))
  41669d:	4c 8b 3f             	mov    (%rdi),%r15
    unsigned char hbuf[4];      /* buffer for gzip header crc calculation */
#endif
    static const unsigned short order[19] = /* permutation of code lengths */
        {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};

    if (strm == Z_NULL || strm->state == Z_NULL || strm->next_out == Z_NULL ||
  4166a0:	4d 85 ff             	test   %r15,%r15
  4166a3:	0f 84 87 2c 00 00    	je     419330 <inflate+0x2ce0>
  4166a9:	8b 57 08             	mov    0x8(%rdi),%edx
  4166ac:	89 54 24 14          	mov    %edx,0x14(%rsp)
        (strm->next_in == Z_NULL && strm->avail_in != 0))
        return Z_STREAM_ERROR;

    state = (struct inflate_state FAR *)strm->state;
    if (state->mode == TYPE) state->mode = TYPEDO;      /* skip check */
  4166b0:	44 8b 23             	mov    (%rbx),%r12d
  4166b3:	41 83 fc 0b          	cmp    $0xb,%r12d
  4166b7:	0f 84 33 02 00 00    	je     4168f0 <inflate+0x2a0>
    LOAD();
  4166bd:	41 8b 7e 20          	mov    0x20(%r14),%edi
  4166c1:	4c 8b 5b 48          	mov    0x48(%rbx),%r11

            /* handle error breaks in while */
            if (state->mode == BAD) break;

            /* build code tables */
            state->next = state->codes;
  4166c5:	48 8d b3 50 05 00 00 	lea    0x550(%rbx),%rsi
        (strm->next_in == Z_NULL && strm->avail_in != 0))
        return Z_STREAM_ERROR;

    state = (struct inflate_state FAR *)strm->state;
    if (state->mode == TYPE) state->mode = TYPEDO;      /* skip check */
    LOAD();
  4166cc:	44 8b 6c 24 14       	mov    0x14(%rsp),%r13d
  4166d1:	44 8b 53 50          	mov    0x50(%rbx),%r10d
            /* build code tables */
            state->next = state->codes;
            state->lencode = (code const FAR *)(state->next);
            state->lenbits = 9;
            ret = inflate_table(LENS, state->lens, state->nlen, &(state->next),
                                &(state->lenbits), state->work);
  4166d5:	48 8d ab 10 03 00 00 	lea    0x310(%rbx),%rbp

            /* build code tables */
            state->next = state->codes;
            state->lencode = (code const FAR *)(state->next);
            state->lenbits = 9;
            ret = inflate_table(LENS, state->lens, state->nlen, &(state->next),
  4166dc:	4c 8d 83 88 00 00 00 	lea    0x88(%rbx),%r8
            if (state->flags & 0x0400) {
                NEEDBITS(16);
                state->length = (unsigned)(hold);
                if (state->head != Z_NULL)
                    state->head->extra_len = (unsigned)hold;
                if (state->flags & 0x0200) CRC2(state->check, hold);
  4166e3:	4c 89 74 24 20       	mov    %r14,0x20(%rsp)
    state = (struct inflate_state FAR *)strm->state;
    if (state->mode == TYPE) state->mode = TYPEDO;      /* skip check */
    LOAD();
    in = have;
    out = left;
    ret = Z_OK;
  4166e8:	c7 44 24 28 00 00 00 	movl   $0x0,0x28(%rsp)
  4166ef:	00 
        (strm->next_in == Z_NULL && strm->avail_in != 0))
        return Z_STREAM_ERROR;

    state = (struct inflate_state FAR *)strm->state;
    if (state->mode == TYPE) state->mode = TYPEDO;      /* skip check */
    LOAD();
  4166f0:	89 7c 24 10          	mov    %edi,0x10(%rsp)
    in = have;
    out = left;
  4166f4:	89 7c 24 18          	mov    %edi,0x18(%rsp)
            if (state->flags & 0x0400) {
                NEEDBITS(16);
                state->length = (unsigned)(hold);
                if (state->head != Z_NULL)
                    state->head->extra_len = (unsigned)hold;
                if (state->flags & 0x0200) CRC2(state->check, hold);
  4166f8:	45 89 ee             	mov    %r13d,%r14d

            /* handle error breaks in while */
            if (state->mode == BAD) break;

            /* build code tables */
            state->next = state->codes;
  4166fb:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
            if (state->flags & 0x0400) {
                NEEDBITS(16);
                state->length = (unsigned)(hold);
                if (state->head != Z_NULL)
                    state->head->extra_len = (unsigned)hold;
                if (state->flags & 0x0200) CRC2(state->check, hold);
  416700:	4d 89 dd             	mov    %r11,%r13
            /* build code tables */
            state->next = state->codes;
            state->lencode = (code const FAR *)(state->next);
            state->lenbits = 9;
            ret = inflate_table(LENS, state->lens, state->nlen, &(state->next),
                                &(state->lenbits), state->work);
  416703:	48 89 6c 24 30       	mov    %rbp,0x30(%rsp)
            if (state->flags & 0x0400) {
                NEEDBITS(16);
                state->length = (unsigned)(hold);
                if (state->head != Z_NULL)
                    state->head->extra_len = (unsigned)hold;
                if (state->flags & 0x0200) CRC2(state->check, hold);
  416708:	49 89 db             	mov    %rbx,%r11

            /* build code tables */
            state->next = state->codes;
            state->lencode = (code const FAR *)(state->next);
            state->lenbits = 9;
            ret = inflate_table(LENS, state->lens, state->nlen, &(state->next),
  41670b:	4c 89 44 24 38       	mov    %r8,0x38(%rsp)
            if (state->flags & 0x0400) {
                NEEDBITS(16);
                state->length = (unsigned)(hold);
                if (state->head != Z_NULL)
                    state->head->extra_len = (unsigned)hold;
                if (state->flags & 0x0200) CRC2(state->check, hold);
  416710:	44 89 d3             	mov    %r10d,%ebx
    LOAD();
    in = have;
    out = left;
    ret = Z_OK;
    for (;;)
        switch (state->mode) {
  416713:	41 83 fc 1c          	cmp    $0x1c,%r12d
  416717:	0f 87 63 2c 00 00    	ja     419380 <inflate+0x2d30>
  41671d:	45 89 e1             	mov    %r12d,%r9d
  416720:	42 ff 24 cd 40 94 43 	jmpq   *0x439440(,%r9,8)
  416727:	00 
  416728:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41672f:	00 
            strm->adler = state->check = crc32(0L, Z_NULL, 0);
            state->mode = TYPE;
            break;
#endif
        case DICTID:
            NEEDBITS(32);
  416730:	83 fb 1f             	cmp    $0x1f,%ebx
  416733:	0f 87 97 00 00 00    	ja     4167d0 <inflate+0x180>
  416739:	45 85 f6             	test   %r14d,%r14d
  41673c:	0f 84 49 49 00 00    	je     41b08b <inflate+0x4a3b>
  416742:	45 0f b6 0f          	movzbl (%r15),%r9d
  416746:	89 d9                	mov    %ebx,%ecx
  416748:	41 8d 76 ff          	lea    -0x1(%r14),%esi
  41674c:	49 8d 47 01          	lea    0x1(%r15),%rax
  416750:	49 d3 e1             	shl    %cl,%r9
  416753:	8d 4b 08             	lea    0x8(%rbx),%ecx
  416756:	4d 01 cd             	add    %r9,%r13
  416759:	83 f9 1f             	cmp    $0x1f,%ecx
  41675c:	0f 87 e6 3d 00 00    	ja     41a548 <inflate+0x3ef8>
  416762:	85 f6                	test   %esi,%esi
  416764:	0f 84 63 42 00 00    	je     41a9cd <inflate+0x437d>
  41676a:	41 0f b6 57 01       	movzbl 0x1(%r15),%edx
  41676f:	41 8d 76 fe          	lea    -0x2(%r14),%esi
  416773:	49 8d 47 02          	lea    0x2(%r15),%rax
  416777:	48 d3 e2             	shl    %cl,%rdx
  41677a:	8d 4b 10             	lea    0x10(%rbx),%ecx
  41677d:	49 01 d5             	add    %rdx,%r13
  416780:	83 f9 1f             	cmp    $0x1f,%ecx
  416783:	0f 87 bf 3d 00 00    	ja     41a548 <inflate+0x3ef8>
  416789:	85 f6                	test   %esi,%esi
  41678b:	0f 84 3c 42 00 00    	je     41a9cd <inflate+0x437d>
  416791:	45 0f b6 47 02       	movzbl 0x2(%r15),%r8d
  416796:	83 c3 18             	add    $0x18,%ebx
  416799:	41 8d 76 fd          	lea    -0x3(%r14),%esi
  41679d:	49 8d 47 03          	lea    0x3(%r15),%rax
  4167a1:	49 d3 e0             	shl    %cl,%r8
  4167a4:	4d 01 c5             	add    %r8,%r13
  4167a7:	83 fb 1f             	cmp    $0x1f,%ebx
  4167aa:	0f 87 98 3d 00 00    	ja     41a548 <inflate+0x3ef8>
  4167b0:	85 f6                	test   %esi,%esi
  4167b2:	0f 84 26 49 00 00    	je     41b0de <inflate+0x4a8e>
  4167b8:	41 0f b6 7f 03       	movzbl 0x3(%r15),%edi
  4167bd:	89 d9                	mov    %ebx,%ecx
  4167bf:	49 8d 47 04          	lea    0x4(%r15),%rax
  4167c3:	41 83 ee 04          	sub    $0x4,%r14d
  4167c7:	48 d3 e7             	shl    %cl,%rdi
  4167ca:	49 01 fd             	add    %rdi,%r13
  4167cd:	49 89 c7             	mov    %rax,%r15
            strm->adler = state->check = REVERSE(hold);
  4167d0:	4c 89 eb             	mov    %r13,%rbx
  4167d3:	4d 89 ea             	mov    %r13,%r10
  4167d6:	4d 89 ec             	mov    %r13,%r12
  4167d9:	48 c1 eb 08          	shr    $0x8,%rbx
  4167dd:	49 c1 ea 18          	shr    $0x18,%r10
  4167e1:	41 81 e4 00 ff 00 00 	and    $0xff00,%r12d
  4167e8:	81 e3 00 ff 00 00    	and    $0xff00,%ebx
  4167ee:	41 0f b6 ea          	movzbl %r10b,%ebp
  4167f2:	49 c1 e5 18          	shl    $0x18,%r13
  4167f6:	48 01 eb             	add    %rbp,%rbx
  4167f9:	49 c1 e4 08          	shl    $0x8,%r12
  4167fd:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
  416802:	4c 01 e3             	add    %r12,%rbx
  416805:	45 89 e9             	mov    %r13d,%r9d
            INITBITS();
  416808:	45 31 ed             	xor    %r13d,%r13d
            state->mode = TYPE;
            break;
#endif
        case DICTID:
            NEEDBITS(32);
            strm->adler = state->check = REVERSE(hold);
  41680b:	49 01 d9             	add    %rbx,%r9
            INITBITS();
  41680e:	31 db                	xor    %ebx,%ebx
            state->mode = TYPE;
            break;
#endif
        case DICTID:
            NEEDBITS(32);
            strm->adler = state->check = REVERSE(hold);
  416810:	4d 89 4b 18          	mov    %r9,0x18(%r11)
  416814:	4c 89 4a 60          	mov    %r9,0x60(%rdx)
            INITBITS();
            state->mode = DICT;
  416818:	41 c7 03 0a 00 00 00 	movl   $0xa,(%r11)
        case DICT:
            if (state->havedict == 0) {
  41681f:	41 8b 73 0c          	mov    0xc(%r11),%esi
  416823:	85 f6                	test   %esi,%esi
  416825:	0f 84 a9 4a 00 00    	je     41b2d4 <inflate+0x4c84>
                RESTORE();
                return Z_NEED_DICT;
            }
            strm->adler = state->check = adler32(0L, Z_NULL, 0);
  41682b:	31 d2                	xor    %edx,%edx
  41682d:	31 f6                	xor    %esi,%esi
  41682f:	31 ff                	xor    %edi,%edi
  416831:	4c 89 5c 24 48       	mov    %r11,0x48(%rsp)
  416836:	e8 f5 9a 00 00       	callq  420330 <adler32>
  41683b:	4c 8b 5c 24 48       	mov    0x48(%rsp),%r11
  416840:	4c 8b 44 24 20       	mov    0x20(%rsp),%r8
  416845:	49 89 43 18          	mov    %rax,0x18(%r11)
  416849:	49 89 40 60          	mov    %rax,0x60(%r8)
            state->mode = TYPE;
  41684d:	41 c7 03 0b 00 00 00 	movl   $0xb,(%r11)
        case TYPE:
            if (flush == Z_BLOCK) goto inf_leave;
  416854:	83 7c 24 2c 05       	cmpl   $0x5,0x2c(%rsp)
  416859:	0f 84 62 2f 00 00    	je     4197c1 <inflate+0x3171>
        case TYPEDO:
            if (state->last) {
  41685f:	41 8b 43 04          	mov    0x4(%r11),%eax
  416863:	85 c0                	test   %eax,%eax
  416865:	0f 85 95 00 00 00    	jne    416900 <inflate+0x2b0>
                BYTEBITS();
                state->mode = CHECK;
                break;
            }
            NEEDBITS(3);
  41686b:	83 fb 02             	cmp    $0x2,%ebx
  41686e:	0f 87 87 41 00 00    	ja     41a9fb <inflate+0x43ab>
  416874:	45 85 f6             	test   %r14d,%r14d
  416877:	0f 84 86 41 00 00    	je     41aa03 <inflate+0x43b3>
  41687d:	49 8d 7f 01          	lea    0x1(%r15),%rdi
  416881:	45 0f b6 3f          	movzbl (%r15),%r15d
  416885:	89 d9                	mov    %ebx,%ecx
  416887:	41 83 ee 01          	sub    $0x1,%r14d
  41688b:	83 c3 08             	add    $0x8,%ebx
  41688e:	49 d3 e7             	shl    %cl,%r15
  416891:	4d 01 fd             	add    %r15,%r13
            state->last = BITS(1);
            DROPBITS(1);
  416894:	4c 89 ed             	mov    %r13,%rbp
                BYTEBITS();
                state->mode = CHECK;
                break;
            }
            NEEDBITS(3);
            state->last = BITS(1);
  416897:	45 89 ea             	mov    %r13d,%r10d
            DROPBITS(1);
  41689a:	48 d1 ed             	shr    %rbp
                BYTEBITS();
                state->mode = CHECK;
                break;
            }
            NEEDBITS(3);
            state->last = BITS(1);
  41689d:	41 83 e2 01          	and    $0x1,%r10d
            DROPBITS(1);
            switch (BITS(2)) {
  4168a1:	41 89 ec             	mov    %ebp,%r12d
                BYTEBITS();
                state->mode = CHECK;
                break;
            }
            NEEDBITS(3);
            state->last = BITS(1);
  4168a4:	45 89 53 04          	mov    %r10d,0x4(%r11)
            DROPBITS(1);
            switch (BITS(2)) {
  4168a8:	41 83 e4 03          	and    $0x3,%r12d
  4168ac:	41 83 fc 02          	cmp    $0x2,%r12d
  4168b0:	0f 84 84 2e 00 00    	je     41973a <inflate+0x30ea>
  4168b6:	41 83 fc 03          	cmp    $0x3,%r12d
  4168ba:	0f 84 ab 3b 00 00    	je     41a46b <inflate+0x3e1b>
  4168c0:	41 83 fc 01          	cmp    $0x1,%r12d
  4168c4:	0f 84 6f 3b 00 00    	je     41a439 <inflate+0x3de9>
            case 0:                             /* stored block */
                Tracev((stderr, "inflate:     stored block%s\n",
                        state->last ? " (last)" : ""));
                state->mode = STORED;
  4168ca:	41 c7 03 0d 00 00 00 	movl   $0xd,(%r11)
                break;
  4168d1:	41 bc 0d 00 00 00    	mov    $0xd,%r12d
                break;
            case 3:
                strm->msg = (char *)"invalid block type";
                state->mode = BAD;
            }
            DROPBITS(2);
  4168d7:	48 c1 ed 02          	shr    $0x2,%rbp
  4168db:	83 eb 03             	sub    $0x3,%ebx
            break;
  4168de:	49 89 ff             	mov    %rdi,%r15
                break;
            case 3:
                strm->msg = (char *)"invalid block type";
                state->mode = BAD;
            }
            DROPBITS(2);
  4168e1:	49 89 ed             	mov    %rbp,%r13
            break;
  4168e4:	e9 2a fe ff ff       	jmpq   416713 <inflate+0xc3>
  4168e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    if (strm == Z_NULL || strm->state == Z_NULL || strm->next_out == Z_NULL ||
        (strm->next_in == Z_NULL && strm->avail_in != 0))
        return Z_STREAM_ERROR;

    state = (struct inflate_state FAR *)strm->state;
    if (state->mode == TYPE) state->mode = TYPEDO;      /* skip check */
  4168f0:	c7 03 0c 00 00 00    	movl   $0xc,(%rbx)
  4168f6:	41 b4 0c             	mov    $0xc,%r12b
  4168f9:	e9 bf fd ff ff       	jmpq   4166bd <inflate+0x6d>
  4168fe:	66 90                	xchg   %ax,%ax
            state->mode = TYPE;
        case TYPE:
            if (flush == Z_BLOCK) goto inf_leave;
        case TYPEDO:
            if (state->last) {
                BYTEBITS();
  416900:	89 d9                	mov    %ebx,%ecx
                state->mode = CHECK;
  416902:	41 c7 03 18 00 00 00 	movl   $0x18,(%r11)
            state->mode = TYPE;
        case TYPE:
            if (flush == Z_BLOCK) goto inf_leave;
        case TYPEDO:
            if (state->last) {
                BYTEBITS();
  416909:	83 e3 f8             	and    $0xfffffff8,%ebx
  41690c:	83 e1 07             	and    $0x7,%ecx
                state->mode = CHECK;
                break;
  41690f:	41 bc 18 00 00 00    	mov    $0x18,%r12d
            state->mode = TYPE;
        case TYPE:
            if (flush == Z_BLOCK) goto inf_leave;
        case TYPEDO:
            if (state->last) {
                BYTEBITS();
  416915:	49 d3 ed             	shr    %cl,%r13
                state->mode = CHECK;
                break;
  416918:	e9 00 fe ff ff       	jmpq   41671d <inflate+0xcd>
  41691d:	0f 1f 00             	nopl   (%rax)
            }
            if (state->flags & 0x0200) CRC2(state->check, hold);
            INITBITS();
            state->mode = EXLEN;
        case EXLEN:
            if (state->flags & 0x0400) {
  416920:	41 8b 53 10          	mov    0x10(%r11),%edx
  416924:	f6 c6 04             	test   $0x4,%dh
  416927:	89 d0                	mov    %edx,%eax
  416929:	0f 84 92 2c 00 00    	je     4195c1 <inflate+0x2f71>
                NEEDBITS(16);
  41692f:	83 fb 0f             	cmp    $0xf,%ebx
  416932:	0f 87 b8 2e 00 00    	ja     4197f0 <inflate+0x31a0>
  416938:	45 85 f6             	test   %r14d,%r14d
  41693b:	0f 84 cb 47 00 00    	je     41b10c <inflate+0x4abc>
  416941:	bd 0f 00 00 00       	mov    $0xf,%ebp
  416946:	29 dd                	sub    %ebx,%ebp
  416948:	c1 ed 03             	shr    $0x3,%ebp
  41694b:	83 e5 07             	and    $0x7,%ebp
  41694e:	0f 84 08 01 00 00    	je     416a5c <inflate+0x40c>
  416954:	49 83 c7 01          	add    $0x1,%r15
  416958:	41 0f b6 7f ff       	movzbl -0x1(%r15),%edi
  41695d:	89 d9                	mov    %ebx,%ecx
  41695f:	83 c3 08             	add    $0x8,%ebx
  416962:	41 83 ee 01          	sub    $0x1,%r14d
  416966:	48 d3 e7             	shl    %cl,%rdi
  416969:	49 01 fd             	add    %rdi,%r13
  41696c:	83 fb 0f             	cmp    $0xf,%ebx
  41696f:	0f 87 7b 2e 00 00    	ja     4197f0 <inflate+0x31a0>
  416975:	45 85 f6             	test   %r14d,%r14d
  416978:	0f 84 65 48 00 00    	je     41b1e3 <inflate+0x4b93>
  41697e:	83 fd 01             	cmp    $0x1,%ebp
  416981:	0f 84 d5 00 00 00    	je     416a5c <inflate+0x40c>
  416987:	83 fd 02             	cmp    $0x2,%ebp
  41698a:	0f 84 ae 00 00 00    	je     416a3e <inflate+0x3ee>
  416990:	83 fd 03             	cmp    $0x3,%ebp
  416993:	0f 84 87 00 00 00    	je     416a20 <inflate+0x3d0>
  416999:	83 fd 04             	cmp    $0x4,%ebp
  41699c:	74 64                	je     416a02 <inflate+0x3b2>
  41699e:	83 fd 05             	cmp    $0x5,%ebp
  4169a1:	74 41                	je     4169e4 <inflate+0x394>
  4169a3:	83 fd 06             	cmp    $0x6,%ebp
  4169a6:	74 1e                	je     4169c6 <inflate+0x376>
  4169a8:	49 83 c7 01          	add    $0x1,%r15
  4169ac:	41 0f b6 47 ff       	movzbl -0x1(%r15),%eax
  4169b1:	89 d9                	mov    %ebx,%ecx
  4169b3:	83 c3 08             	add    $0x8,%ebx
  4169b6:	48 d3 e0             	shl    %cl,%rax
  4169b9:	49 01 c5             	add    %rax,%r13
  4169bc:	41 83 ee 01          	sub    $0x1,%r14d
  4169c0:	0f 84 cc 48 00 00    	je     41b292 <inflate+0x4c42>
  4169c6:	49 83 c7 01          	add    $0x1,%r15
  4169ca:	45 0f b6 57 ff       	movzbl -0x1(%r15),%r10d
  4169cf:	89 d9                	mov    %ebx,%ecx
  4169d1:	83 c3 08             	add    $0x8,%ebx
  4169d4:	49 d3 e2             	shl    %cl,%r10
  4169d7:	4d 01 d5             	add    %r10,%r13
  4169da:	41 83 ee 01          	sub    $0x1,%r14d
  4169de:	0f 84 6c 48 00 00    	je     41b250 <inflate+0x4c00>
  4169e4:	49 83 c7 01          	add    $0x1,%r15
  4169e8:	45 0f b6 67 ff       	movzbl -0x1(%r15),%r12d
  4169ed:	89 d9                	mov    %ebx,%ecx
  4169ef:	83 c3 08             	add    $0x8,%ebx
  4169f2:	49 d3 e4             	shl    %cl,%r12
  4169f5:	4d 01 e5             	add    %r12,%r13
  4169f8:	41 83 ee 01          	sub    $0x1,%r14d
  4169fc:	0f 84 62 49 00 00    	je     41b364 <inflate+0x4d14>
  416a02:	49 83 c7 01          	add    $0x1,%r15
  416a06:	45 0f b6 4f ff       	movzbl -0x1(%r15),%r9d
  416a0b:	89 d9                	mov    %ebx,%ecx
  416a0d:	83 c3 08             	add    $0x8,%ebx
  416a10:	49 d3 e1             	shl    %cl,%r9
  416a13:	4d 01 cd             	add    %r9,%r13
  416a16:	41 83 ee 01          	sub    $0x1,%r14d
  416a1a:	0f 84 9e 48 00 00    	je     41b2be <inflate+0x4c6e>
  416a20:	49 83 c7 01          	add    $0x1,%r15
  416a24:	41 0f b6 77 ff       	movzbl -0x1(%r15),%esi
  416a29:	89 d9                	mov    %ebx,%ecx
  416a2b:	83 c3 08             	add    $0x8,%ebx
  416a2e:	48 d3 e6             	shl    %cl,%rsi
  416a31:	49 01 f5             	add    %rsi,%r13
  416a34:	41 83 ee 01          	sub    $0x1,%r14d
  416a38:	0f 84 72 49 00 00    	je     41b3b0 <inflate+0x4d60>
  416a3e:	49 83 c7 01          	add    $0x1,%r15
  416a42:	45 0f b6 47 ff       	movzbl -0x1(%r15),%r8d
  416a47:	89 d9                	mov    %ebx,%ecx
  416a49:	83 c3 08             	add    $0x8,%ebx
  416a4c:	49 d3 e0             	shl    %cl,%r8
  416a4f:	4d 01 c5             	add    %r8,%r13
  416a52:	41 83 ee 01          	sub    $0x1,%r14d
  416a56:	0f 84 c4 2d 00 00    	je     419820 <inflate+0x31d0>
  416a5c:	89 d9                	mov    %ebx,%ecx
  416a5e:	49 8d 6f 01          	lea    0x1(%r15),%rbp
  416a62:	0f b6 7d ff          	movzbl -0x1(%rbp),%edi
  416a66:	8d 41 08             	lea    0x8(%rcx),%eax
  416a69:	41 8d 5e ff          	lea    -0x1(%r14),%ebx
  416a6d:	49 89 ef             	mov    %rbp,%r15
  416a70:	41 89 de             	mov    %ebx,%r14d
  416a73:	48 d3 e7             	shl    %cl,%rdi
  416a76:	89 c1                	mov    %eax,%ecx
  416a78:	49 01 fd             	add    %rdi,%r13
  416a7b:	83 f8 0f             	cmp    $0xf,%eax
  416a7e:	0f 87 6c 2d 00 00    	ja     4197f0 <inflate+0x31a0>
  416a84:	45 85 f6             	test   %r14d,%r14d
  416a87:	0f 84 4f 45 00 00    	je     41afdc <inflate+0x498c>
  416a8d:	49 83 c7 01          	add    $0x1,%r15
  416a91:	45 0f b6 57 ff       	movzbl -0x1(%r15),%r10d
  416a96:	49 d3 e2             	shl    %cl,%r10
  416a99:	83 c1 08             	add    $0x8,%ecx
  416a9c:	4d 01 d5             	add    %r10,%r13
  416a9f:	41 83 ee 01          	sub    $0x1,%r14d
  416aa3:	0f 84 bb 46 00 00    	je     41b164 <inflate+0x4b14>
  416aa9:	4c 8d 7d 02          	lea    0x2(%rbp),%r15
  416aad:	45 0f b6 77 ff       	movzbl -0x1(%r15),%r14d
  416ab2:	41 89 d9             	mov    %ebx,%r9d
  416ab5:	49 d3 e6             	shl    %cl,%r14
  416ab8:	8d 48 10             	lea    0x10(%rax),%ecx
  416abb:	4d 01 f5             	add    %r14,%r13
  416abe:	41 83 e9 02          	sub    $0x2,%r9d
  416ac2:	0f 84 5a 46 00 00    	je     41b122 <inflate+0x4ad2>
  416ac8:	4c 8d 7d 03          	lea    0x3(%rbp),%r15
  416acc:	45 0f b6 67 ff       	movzbl -0x1(%r15),%r12d
  416ad1:	89 de                	mov    %ebx,%esi
  416ad3:	49 d3 e4             	shl    %cl,%r12
  416ad6:	8d 48 18             	lea    0x18(%rax),%ecx
  416ad9:	4d 01 e5             	add    %r12,%r13
  416adc:	83 ee 03             	sub    $0x3,%esi
  416adf:	0f 84 c1 46 00 00    	je     41b1a6 <inflate+0x4b56>
  416ae5:	4c 8d 7d 04          	lea    0x4(%rbp),%r15
  416ae9:	45 0f b6 47 ff       	movzbl -0x1(%r15),%r8d
  416aee:	89 df                	mov    %ebx,%edi
  416af0:	49 d3 e0             	shl    %cl,%r8
  416af3:	8d 48 20             	lea    0x20(%rax),%ecx
  416af6:	4d 01 c5             	add    %r8,%r13
  416af9:	83 ef 04             	sub    $0x4,%edi
  416afc:	0f 84 f7 46 00 00    	je     41b1f9 <inflate+0x4ba9>
  416b02:	4c 8d 7d 05          	lea    0x5(%rbp),%r15
  416b06:	45 0f b6 57 ff       	movzbl -0x1(%r15),%r10d
  416b0b:	41 89 de             	mov    %ebx,%r14d
  416b0e:	49 d3 e2             	shl    %cl,%r10
  416b11:	8d 48 28             	lea    0x28(%rax),%ecx
  416b14:	4d 01 d5             	add    %r10,%r13
  416b17:	41 83 ee 05          	sub    $0x5,%r14d
  416b1b:	0f 84 ed 46 00 00    	je     41b20e <inflate+0x4bbe>
  416b21:	4c 8d 7d 06          	lea    0x6(%rbp),%r15
  416b25:	45 0f b6 4f ff       	movzbl -0x1(%r15),%r9d
  416b2a:	41 89 dc             	mov    %ebx,%r12d
  416b2d:	49 d3 e1             	shl    %cl,%r9
  416b30:	8d 48 30             	lea    0x30(%rax),%ecx
  416b33:	4d 01 cd             	add    %r9,%r13
  416b36:	41 83 ec 06          	sub    $0x6,%r12d
  416b3a:	0f 84 26 47 00 00    	je     41b266 <inflate+0x4c16>
  416b40:	4c 8d 7d 07          	lea    0x7(%rbp),%r15
  416b44:	41 0f b6 6f ff       	movzbl -0x1(%r15),%ebp
  416b49:	48 d3 e5             	shl    %cl,%rbp
  416b4c:	8d 48 38             	lea    0x38(%rax),%ecx
  416b4f:	49 01 ed             	add    %rbp,%r13
  416b52:	83 eb 07             	sub    $0x7,%ebx
  416b55:	41 89 de             	mov    %ebx,%r14d
  416b58:	0f 85 00 ff ff ff    	jne    416a5e <inflate+0x40e>
  416b5e:	4c 89 db             	mov    %r11,%rbx
  416b61:	44 89 f6             	mov    %r14d,%esi
  416b64:	41 89 ca             	mov    %ecx,%r10d
  416b67:	4d 89 eb             	mov    %r13,%r11
  416b6a:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  416b6f:	e9 2c 0a 00 00       	jmpq   4175a0 <inflate+0xf50>
  416b74:	89 fb                	mov    %edi,%ebx
            state->extra = (unsigned)(this.op) & 15;
            state->mode = LENEXT;
        case LENEXT:
            if (state->extra) {
                NEEDBITS(state->extra);
                state->length += BITS(state->extra);
  416b76:	89 f1                	mov    %esi,%ecx
  416b78:	41 bc 01 00 00 00    	mov    $0x1,%r12d
                DROPBITS(state->extra);
  416b7e:	29 f3                	sub    %esi,%ebx
            state->extra = (unsigned)(this.op) & 15;
            state->mode = LENEXT;
        case LENEXT:
            if (state->extra) {
                NEEDBITS(state->extra);
                state->length += BITS(state->extra);
  416b80:	41 d3 e4             	shl    %cl,%r12d
  416b83:	41 83 ec 01          	sub    $0x1,%r12d
  416b87:	45 21 ec             	and    %r13d,%r12d
  416b8a:	45 01 63 54          	add    %r12d,0x54(%r11)
                DROPBITS(state->extra);
  416b8e:	49 d3 ed             	shr    %cl,%r13
            }
            Tracevv((stderr, "inflate:         length %u\n", state->length));
            state->mode = DIST;
  416b91:	41 c7 03 14 00 00 00 	movl   $0x14,(%r11)
        case DIST:
            for (;;) {
                this = state->distcode[BITS(state->distbits)];
  416b98:	41 8b 4b 74          	mov    0x74(%r11),%ecx
  416b9c:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  416ba2:	4d 8b 4b 68          	mov    0x68(%r11),%r9
  416ba6:	45 89 ec             	mov    %r13d,%r12d
  416ba9:	41 d3 e0             	shl    %cl,%r8d
  416bac:	41 83 e8 01          	sub    $0x1,%r8d
  416bb0:	44 89 c6             	mov    %r8d,%esi
  416bb3:	44 21 ee             	and    %r13d,%esi
  416bb6:	4d 8d 14 b1          	lea    (%r9,%rsi,4),%r10
  416bba:	41 0f b6 52 01       	movzbl 0x1(%r10),%edx
  416bbf:	41 0f b6 3a          	movzbl (%r10),%edi
  416bc3:	45 0f b7 52 02       	movzwl 0x2(%r10),%r10d
                if ((unsigned)(this.bits) <= bits) break;
  416bc8:	0f b6 c2             	movzbl %dl,%eax
  416bcb:	39 c3                	cmp    %eax,%ebx
  416bcd:	89 c6                	mov    %eax,%esi
  416bcf:	0f 83 12 28 00 00    	jae    4193e7 <inflate+0x2d97>
                PULLBYTE();
  416bd5:	45 85 f6             	test   %r14d,%r14d
  416bd8:	0f 84 07 3e 00 00    	je     41a9e5 <inflate+0x4395>
  416bde:	49 83 c7 01          	add    $0x1,%r15
  416be2:	41 0f b6 57 ff       	movzbl -0x1(%r15),%edx
  416be7:	89 d9                	mov    %ebx,%ecx
            }
            Tracevv((stderr, "inflate:         length %u\n", state->length));
            state->mode = DIST;
        case DIST:
            for (;;) {
                this = state->distcode[BITS(state->distbits)];
  416be9:	44 89 c0             	mov    %r8d,%eax
  416bec:	41 83 ee 01          	sub    $0x1,%r14d
                if ((unsigned)(this.bits) <= bits) break;
                PULLBYTE();
  416bf0:	83 c3 08             	add    $0x8,%ebx
  416bf3:	44 89 f5             	mov    %r14d,%ebp
  416bf6:	83 e5 03             	and    $0x3,%ebp
  416bf9:	48 d3 e2             	shl    %cl,%rdx
  416bfc:	49 01 d5             	add    %rdx,%r13
            }
            Tracevv((stderr, "inflate:         length %u\n", state->length));
            state->mode = DIST;
        case DIST:
            for (;;) {
                this = state->distcode[BITS(state->distbits)];
  416bff:	44 21 e8             	and    %r13d,%eax
  416c02:	45 89 ec             	mov    %r13d,%r12d
  416c05:	49 8d 34 81          	lea    (%r9,%rax,4),%rsi
  416c09:	0f b6 56 01          	movzbl 0x1(%rsi),%edx
  416c0d:	0f b6 3e             	movzbl (%rsi),%edi
  416c10:	44 0f b7 56 02       	movzwl 0x2(%rsi),%r10d
                if ((unsigned)(this.bits) <= bits) break;
  416c15:	0f b6 c2             	movzbl %dl,%eax
  416c18:	39 d8                	cmp    %ebx,%eax
  416c1a:	89 c6                	mov    %eax,%esi
  416c1c:	0f 86 c5 27 00 00    	jbe    4193e7 <inflate+0x2d97>
                PULLBYTE();
  416c22:	45 85 f6             	test   %r14d,%r14d
  416c25:	0f 84 9f 40 00 00    	je     41acca <inflate+0x467a>
  416c2b:	85 ed                	test   %ebp,%ebp
  416c2d:	0f 84 d4 00 00 00    	je     416d07 <inflate+0x6b7>
  416c33:	83 fd 01             	cmp    $0x1,%ebp
  416c36:	0f 84 82 00 00 00    	je     416cbe <inflate+0x66e>
  416c3c:	83 fd 02             	cmp    $0x2,%ebp
  416c3f:	74 3f                	je     416c80 <inflate+0x630>
  416c41:	49 83 c7 01          	add    $0x1,%r15
  416c45:	41 0f b6 7f ff       	movzbl -0x1(%r15),%edi
  416c4a:	89 d9                	mov    %ebx,%ecx
            }
            Tracevv((stderr, "inflate:         length %u\n", state->length));
            state->mode = DIST;
        case DIST:
            for (;;) {
                this = state->distcode[BITS(state->distbits)];
  416c4c:	45 89 c2             	mov    %r8d,%r10d
                if ((unsigned)(this.bits) <= bits) break;
                PULLBYTE();
  416c4f:	83 c3 08             	add    $0x8,%ebx
  416c52:	41 83 ee 01          	sub    $0x1,%r14d
  416c56:	48 d3 e7             	shl    %cl,%rdi
  416c59:	49 01 fd             	add    %rdi,%r13
            }
            Tracevv((stderr, "inflate:         length %u\n", state->length));
            state->mode = DIST;
        case DIST:
            for (;;) {
                this = state->distcode[BITS(state->distbits)];
  416c5c:	45 21 ea             	and    %r13d,%r10d
  416c5f:	45 89 ec             	mov    %r13d,%r12d
  416c62:	4b 8d 2c 91          	lea    (%r9,%r10,4),%rbp
  416c66:	0f b6 55 01          	movzbl 0x1(%rbp),%edx
  416c6a:	0f b6 7d 00          	movzbl 0x0(%rbp),%edi
  416c6e:	44 0f b7 55 02       	movzwl 0x2(%rbp),%r10d
                if ((unsigned)(this.bits) <= bits) break;
  416c73:	0f b6 c2             	movzbl %dl,%eax
  416c76:	39 d8                	cmp    %ebx,%eax
  416c78:	89 c6                	mov    %eax,%esi
  416c7a:	0f 86 67 27 00 00    	jbe    4193e7 <inflate+0x2d97>
                PULLBYTE();
  416c80:	49 83 c7 01          	add    $0x1,%r15
  416c84:	45 0f b6 67 ff       	movzbl -0x1(%r15),%r12d
  416c89:	89 d9                	mov    %ebx,%ecx
            }
            Tracevv((stderr, "inflate:         length %u\n", state->length));
            state->mode = DIST;
        case DIST:
            for (;;) {
                this = state->distcode[BITS(state->distbits)];
  416c8b:	44 89 c2             	mov    %r8d,%edx
                if ((unsigned)(this.bits) <= bits) break;
                PULLBYTE();
  416c8e:	83 c3 08             	add    $0x8,%ebx
  416c91:	41 83 ee 01          	sub    $0x1,%r14d
  416c95:	49 d3 e4             	shl    %cl,%r12
  416c98:	4d 01 e5             	add    %r12,%r13
            }
            Tracevv((stderr, "inflate:         length %u\n", state->length));
            state->mode = DIST;
        case DIST:
            for (;;) {
                this = state->distcode[BITS(state->distbits)];
  416c9b:	44 21 ea             	and    %r13d,%edx
  416c9e:	45 89 ec             	mov    %r13d,%r12d
  416ca1:	49 8d 04 91          	lea    (%r9,%rdx,4),%rax
  416ca5:	0f b6 50 01          	movzbl 0x1(%rax),%edx
  416ca9:	0f b6 38             	movzbl (%rax),%edi
  416cac:	44 0f b7 50 02       	movzwl 0x2(%rax),%r10d
                if ((unsigned)(this.bits) <= bits) break;
  416cb1:	0f b6 c2             	movzbl %dl,%eax
  416cb4:	39 d8                	cmp    %ebx,%eax
  416cb6:	89 c6                	mov    %eax,%esi
  416cb8:	0f 86 29 27 00 00    	jbe    4193e7 <inflate+0x2d97>
                PULLBYTE();
  416cbe:	49 83 c7 01          	add    $0x1,%r15
  416cc2:	41 0f b6 77 ff       	movzbl -0x1(%r15),%esi
  416cc7:	89 d9                	mov    %ebx,%ecx
            }
            Tracevv((stderr, "inflate:         length %u\n", state->length));
            state->mode = DIST;
        case DIST:
            for (;;) {
                this = state->distcode[BITS(state->distbits)];
  416cc9:	44 89 c7             	mov    %r8d,%edi
                if ((unsigned)(this.bits) <= bits) break;
                PULLBYTE();
  416ccc:	83 c3 08             	add    $0x8,%ebx
  416ccf:	41 83 ee 01          	sub    $0x1,%r14d
  416cd3:	48 d3 e6             	shl    %cl,%rsi
  416cd6:	49 01 f5             	add    %rsi,%r13
            }
            Tracevv((stderr, "inflate:         length %u\n", state->length));
            state->mode = DIST;
        case DIST:
            for (;;) {
                this = state->distcode[BITS(state->distbits)];
  416cd9:	44 21 ef             	and    %r13d,%edi
  416cdc:	45 89 ec             	mov    %r13d,%r12d
  416cdf:	4d 8d 14 b9          	lea    (%r9,%rdi,4),%r10
  416ce3:	41 0f b6 52 01       	movzbl 0x1(%r10),%edx
  416ce8:	41 0f b6 3a          	movzbl (%r10),%edi
  416cec:	45 0f b7 52 02       	movzwl 0x2(%r10),%r10d
                if ((unsigned)(this.bits) <= bits) break;
  416cf1:	0f b6 c2             	movzbl %dl,%eax
  416cf4:	39 d8                	cmp    %ebx,%eax
  416cf6:	89 c6                	mov    %eax,%esi
  416cf8:	0f 86 e9 26 00 00    	jbe    4193e7 <inflate+0x2d97>
                PULLBYTE();
  416cfe:	45 85 f6             	test   %r14d,%r14d
  416d01:	0f 84 27 41 00 00    	je     41ae2e <inflate+0x47de>
  416d07:	89 d9                	mov    %ebx,%ecx
  416d09:	4c 89 5c 24 48       	mov    %r11,0x48(%rsp)
  416d0e:	4d 8d 5f 01          	lea    0x1(%r15),%r11
  416d12:	41 0f b6 5b ff       	movzbl -0x1(%r11),%ebx
            }
            Tracevv((stderr, "inflate:         length %u\n", state->length));
            state->mode = DIST;
        case DIST:
            for (;;) {
                this = state->distcode[BITS(state->distbits)];
  416d17:	44 89 c2             	mov    %r8d,%edx
                if ((unsigned)(this.bits) <= bits) break;
                PULLBYTE();
  416d1a:	41 8d 6e ff          	lea    -0x1(%r14),%ebp
  416d1e:	4d 89 df             	mov    %r11,%r15
  416d21:	41 89 ee             	mov    %ebp,%r14d
  416d24:	48 d3 e3             	shl    %cl,%rbx
  416d27:	49 01 dd             	add    %rbx,%r13
  416d2a:	8d 59 08             	lea    0x8(%rcx),%ebx
            }
            Tracevv((stderr, "inflate:         length %u\n", state->length));
            state->mode = DIST;
        case DIST:
            for (;;) {
                this = state->distcode[BITS(state->distbits)];
  416d2d:	44 21 ea             	and    %r13d,%edx
  416d30:	45 89 ec             	mov    %r13d,%r12d
  416d33:	49 8d 04 91          	lea    (%r9,%rdx,4),%rax
                if ((unsigned)(this.bits) <= bits) break;
                PULLBYTE();
  416d37:	89 d9                	mov    %ebx,%ecx
            }
            Tracevv((stderr, "inflate:         length %u\n", state->length));
            state->mode = DIST;
        case DIST:
            for (;;) {
                this = state->distcode[BITS(state->distbits)];
  416d39:	0f b6 50 01          	movzbl 0x1(%rax),%edx
  416d3d:	0f b6 38             	movzbl (%rax),%edi
  416d40:	44 0f b7 50 02       	movzwl 0x2(%rax),%r10d
                if ((unsigned)(this.bits) <= bits) break;
  416d45:	0f b6 c2             	movzbl %dl,%eax
  416d48:	39 d8                	cmp    %ebx,%eax
  416d4a:	89 c6                	mov    %eax,%esi
  416d4c:	0f 86 90 26 00 00    	jbe    4193e2 <inflate+0x2d92>
                PULLBYTE();
  416d52:	49 83 c7 01          	add    $0x1,%r15
  416d56:	45 0f b6 67 ff       	movzbl -0x1(%r15),%r12d
            }
            Tracevv((stderr, "inflate:         length %u\n", state->length));
            state->mode = DIST;
        case DIST:
            for (;;) {
                this = state->distcode[BITS(state->distbits)];
  416d5b:	44 89 c6             	mov    %r8d,%esi
                if ((unsigned)(this.bits) <= bits) break;
                PULLBYTE();
  416d5e:	41 83 ee 01          	sub    $0x1,%r14d
  416d62:	49 d3 e4             	shl    %cl,%r12
  416d65:	83 c1 08             	add    $0x8,%ecx
  416d68:	4d 01 e5             	add    %r12,%r13
            }
            Tracevv((stderr, "inflate:         length %u\n", state->length));
            state->mode = DIST;
        case DIST:
            for (;;) {
                this = state->distcode[BITS(state->distbits)];
  416d6b:	44 21 ee             	and    %r13d,%esi
  416d6e:	45 89 ec             	mov    %r13d,%r12d
  416d71:	4d 8d 14 b1          	lea    (%r9,%rsi,4),%r10
  416d75:	41 0f b6 52 01       	movzbl 0x1(%r10),%edx
  416d7a:	41 0f b6 3a          	movzbl (%r10),%edi
  416d7e:	45 0f b7 52 02       	movzwl 0x2(%r10),%r10d
                if ((unsigned)(this.bits) <= bits) break;
  416d83:	0f b6 c2             	movzbl %dl,%eax
  416d86:	39 c8                	cmp    %ecx,%eax
  416d88:	89 c6                	mov    %eax,%esi
  416d8a:	0f 86 50 26 00 00    	jbe    4193e0 <inflate+0x2d90>
                PULLBYTE();
  416d90:	4d 8d 7b 02          	lea    0x2(%r11),%r15
  416d94:	41 0f b6 7f ff       	movzbl -0x1(%r15),%edi
            }
            Tracevv((stderr, "inflate:         length %u\n", state->length));
            state->mode = DIST;
        case DIST:
            for (;;) {
                this = state->distcode[BITS(state->distbits)];
  416d99:	44 89 c2             	mov    %r8d,%edx
                if ((unsigned)(this.bits) <= bits) break;
                PULLBYTE();
  416d9c:	44 8d 75 fe          	lea    -0x2(%rbp),%r14d
  416da0:	48 d3 e7             	shl    %cl,%rdi
  416da3:	8d 4b 10             	lea    0x10(%rbx),%ecx
  416da6:	49 01 fd             	add    %rdi,%r13
            }
            Tracevv((stderr, "inflate:         length %u\n", state->length));
            state->mode = DIST;
        case DIST:
            for (;;) {
                this = state->distcode[BITS(state->distbits)];
  416da9:	44 21 ea             	and    %r13d,%edx
  416dac:	45 89 ec             	mov    %r13d,%r12d
  416daf:	49 8d 04 91          	lea    (%r9,%rdx,4),%rax
  416db3:	0f b6 50 01          	movzbl 0x1(%rax),%edx
  416db7:	0f b6 38             	movzbl (%rax),%edi
  416dba:	44 0f b7 50 02       	movzwl 0x2(%rax),%r10d
                if ((unsigned)(this.bits) <= bits) break;
  416dbf:	0f b6 c2             	movzbl %dl,%eax
  416dc2:	39 c8                	cmp    %ecx,%eax
  416dc4:	89 c6                	mov    %eax,%esi
  416dc6:	0f 86 14 26 00 00    	jbe    4193e0 <inflate+0x2d90>
                PULLBYTE();
  416dcc:	4d 8d 7b 03          	lea    0x3(%r11),%r15
  416dd0:	44 8d 75 fd          	lea    -0x3(%rbp),%r14d
            }
            Tracevv((stderr, "inflate:         length %u\n", state->length));
            state->mode = DIST;
        case DIST:
            for (;;) {
                this = state->distcode[BITS(state->distbits)];
  416dd4:	45 89 c3             	mov    %r8d,%r11d
                if ((unsigned)(this.bits) <= bits) break;
                PULLBYTE();
  416dd7:	41 0f b6 6f ff       	movzbl -0x1(%r15),%ebp
  416ddc:	48 d3 e5             	shl    %cl,%rbp
  416ddf:	8d 4b 18             	lea    0x18(%rbx),%ecx
  416de2:	49 01 ed             	add    %rbp,%r13
            }
            Tracevv((stderr, "inflate:         length %u\n", state->length));
            state->mode = DIST;
        case DIST:
            for (;;) {
                this = state->distcode[BITS(state->distbits)];
  416de5:	45 21 eb             	and    %r13d,%r11d
  416de8:	45 89 ec             	mov    %r13d,%r12d
  416deb:	4b 8d 1c 99          	lea    (%r9,%r11,4),%rbx
  416def:	0f b6 53 01          	movzbl 0x1(%rbx),%edx
  416df3:	0f b6 3b             	movzbl (%rbx),%edi
  416df6:	44 0f b7 53 02       	movzwl 0x2(%rbx),%r10d
                if ((unsigned)(this.bits) <= bits) break;
  416dfb:	0f b6 c2             	movzbl %dl,%eax
  416dfe:	39 c8                	cmp    %ecx,%eax
  416e00:	89 c6                	mov    %eax,%esi
  416e02:	0f 86 d8 25 00 00    	jbe    4193e0 <inflate+0x2d90>
                PULLBYTE();
  416e08:	45 85 f6             	test   %r14d,%r14d
  416e0b:	0f 85 fd fe ff ff    	jne    416d0e <inflate+0x6be>
  416e11:	44 89 f6             	mov    %r14d,%esi
  416e14:	4d 89 eb             	mov    %r13,%r11
  416e17:	41 89 ca             	mov    %ecx,%r10d
  416e1a:	48 8b 5c 24 48       	mov    0x48(%rsp),%rbx
  416e1f:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  416e24:	e9 77 07 00 00       	jmpq   4175a0 <inflate+0xf50>
  416e29:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
                strm->msg = (char *)"invalid distance too far back";
                state->mode = BAD;
                break;
            }
            Tracevv((stderr, "inflate:         distance %u\n", state->offset));
            state->mode = MATCH;
  416e30:	41 c7 03 16 00 00 00 	movl   $0x16,(%r11)
        case MATCH:
            if (left == 0) goto inf_leave;
  416e37:	8b 54 24 10          	mov    0x10(%rsp),%edx
  416e3b:	85 d2                	test   %edx,%edx
  416e3d:	0f 84 ca 44 00 00    	je     41b30d <inflate+0x4cbd>
            copy = out - left;
  416e43:	8b 74 24 18          	mov    0x18(%rsp),%esi
            if (state->offset > copy) {         /* copy from window */
  416e47:	45 8b 4b 58          	mov    0x58(%r11),%r9d
            }
            Tracevv((stderr, "inflate:         distance %u\n", state->offset));
            state->mode = MATCH;
        case MATCH:
            if (left == 0) goto inf_leave;
            copy = out - left;
  416e4b:	29 d6                	sub    %edx,%esi
            if (state->offset > copy) {         /* copy from window */
  416e4d:	44 39 ce             	cmp    %r9d,%esi
  416e50:	0f 82 b2 27 00 00    	jb     419608 <inflate+0x2fb8>
                else
                    from = state->window + (state->write - copy);
                if (copy > state->length) copy = state->length;
            }
            else {                              /* copy from output */
                from = put - state->offset;
  416e56:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  416e5b:	4c 29 c8             	sub    %r9,%rax
                copy = state->length;
  416e5e:	45 8b 4b 54          	mov    0x54(%r11),%r9d
  416e62:	45 89 cc             	mov    %r9d,%r12d
  416e65:	8b 6c 24 10          	mov    0x10(%rsp),%ebp
  416e69:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  416e6e:	4c 8d 40 10          	lea    0x10(%rax),%r8
  416e72:	41 39 e9             	cmp    %ebp,%r9d
  416e75:	48 8d 57 10          	lea    0x10(%rdi),%rdx
  416e79:	44 0f 47 cd          	cmova  %ebp,%r9d
            }
            if (copy > left) copy = left;
            left -= copy;
  416e7d:	44 29 cd             	sub    %r9d,%ebp
            state->length -= copy;
  416e80:	45 29 cc             	sub    %r9d,%r12d
  416e83:	4c 39 c7             	cmp    %r8,%rdi
  416e86:	0f 93 c1             	setae  %cl
  416e89:	48 39 d0             	cmp    %rdx,%rax
            else {                              /* copy from output */
                from = put - state->offset;
                copy = state->length;
            }
            if (copy > left) copy = left;
            left -= copy;
  416e8c:	89 6c 24 10          	mov    %ebp,0x10(%rsp)
  416e90:	41 0f 93 c2          	setae  %r10b
            state->length -= copy;
  416e94:	45 89 63 54          	mov    %r12d,0x54(%r11)
  416e98:	44 08 d1             	or     %r10b,%cl
  416e9b:	0f 84 36 33 00 00    	je     41a1d7 <inflate+0x3b87>
  416ea1:	41 83 f9 16          	cmp    $0x16,%r9d
  416ea5:	0f 86 2c 33 00 00    	jbe    41a1d7 <inflate+0x3b87>
  416eab:	49 89 c2             	mov    %rax,%r10
  416eae:	49 f7 da             	neg    %r10
  416eb1:	41 83 e2 0f          	and    $0xf,%r10d
  416eb5:	45 39 ca             	cmp    %r9d,%r10d
  416eb8:	45 0f 47 d1          	cmova  %r9d,%r10d
  416ebc:	45 85 d2             	test   %r10d,%r10d
  416ebf:	0f 84 5b 2d 00 00    	je     419c20 <inflate+0x35d0>
            do {
                *put++ = *from++;
  416ec5:	0f b6 30             	movzbl (%rax),%esi
            } while (--copy);
  416ec8:	45 8d 41 ff          	lea    -0x1(%r9),%r8d
  416ecc:	41 83 fa 01          	cmp    $0x1,%r10d
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  416ed0:	48 8d 57 01          	lea    0x1(%rdi),%rdx
  416ed4:	48 8d 48 01          	lea    0x1(%rax),%rcx
  416ed8:	40 88 37             	mov    %sil,(%rdi)
            } while (--copy);
  416edb:	44 89 c6             	mov    %r8d,%esi
  416ede:	0f 84 8b 01 00 00    	je     41706f <inflate+0xa1f>
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  416ee4:	44 0f b6 60 01       	movzbl 0x1(%rax),%r12d
  416ee9:	41 83 fa 02          	cmp    $0x2,%r10d
  416eed:	48 8d 57 02          	lea    0x2(%rdi),%rdx
  416ef1:	48 8d 48 02          	lea    0x2(%rax),%rcx
            } while (--copy);
  416ef5:	41 8d 71 fe          	lea    -0x2(%r9),%esi
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  416ef9:	44 88 67 01          	mov    %r12b,0x1(%rdi)
  416efd:	0f 84 6c 01 00 00    	je     41706f <inflate+0xa1f>
  416f03:	0f b6 68 02          	movzbl 0x2(%rax),%ebp
  416f07:	41 83 fa 03          	cmp    $0x3,%r10d
  416f0b:	48 8d 57 03          	lea    0x3(%rdi),%rdx
  416f0f:	48 8d 48 03          	lea    0x3(%rax),%rcx
            } while (--copy);
  416f13:	41 8d 71 fd          	lea    -0x3(%r9),%esi
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  416f17:	40 88 6f 02          	mov    %bpl,0x2(%rdi)
  416f1b:	0f 84 4e 01 00 00    	je     41706f <inflate+0xa1f>
  416f21:	0f b6 70 03          	movzbl 0x3(%rax),%esi
  416f25:	41 83 fa 04          	cmp    $0x4,%r10d
  416f29:	48 8d 57 04          	lea    0x4(%rdi),%rdx
  416f2d:	48 8d 48 04          	lea    0x4(%rax),%rcx
  416f31:	40 88 77 03          	mov    %sil,0x3(%rdi)
            } while (--copy);
  416f35:	41 8d 71 fc          	lea    -0x4(%r9),%esi
  416f39:	0f 84 30 01 00 00    	je     41706f <inflate+0xa1f>
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  416f3f:	44 0f b6 60 04       	movzbl 0x4(%rax),%r12d
  416f44:	41 83 fa 05          	cmp    $0x5,%r10d
  416f48:	48 8d 57 05          	lea    0x5(%rdi),%rdx
  416f4c:	48 8d 48 05          	lea    0x5(%rax),%rcx
            } while (--copy);
  416f50:	41 8d 71 fb          	lea    -0x5(%r9),%esi
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  416f54:	44 88 67 04          	mov    %r12b,0x4(%rdi)
  416f58:	0f 84 11 01 00 00    	je     41706f <inflate+0xa1f>
  416f5e:	0f b6 68 05          	movzbl 0x5(%rax),%ebp
  416f62:	41 83 fa 06          	cmp    $0x6,%r10d
  416f66:	48 8d 57 06          	lea    0x6(%rdi),%rdx
  416f6a:	48 8d 48 06          	lea    0x6(%rax),%rcx
            } while (--copy);
  416f6e:	41 8d 71 fa          	lea    -0x6(%r9),%esi
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  416f72:	40 88 6f 05          	mov    %bpl,0x5(%rdi)
  416f76:	0f 84 f3 00 00 00    	je     41706f <inflate+0xa1f>
  416f7c:	0f b6 70 06          	movzbl 0x6(%rax),%esi
  416f80:	41 83 fa 07          	cmp    $0x7,%r10d
  416f84:	48 8d 57 07          	lea    0x7(%rdi),%rdx
  416f88:	48 8d 48 07          	lea    0x7(%rax),%rcx
  416f8c:	40 88 77 06          	mov    %sil,0x6(%rdi)
            } while (--copy);
  416f90:	41 8d 71 f9          	lea    -0x7(%r9),%esi
  416f94:	0f 84 d5 00 00 00    	je     41706f <inflate+0xa1f>
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  416f9a:	44 0f b6 60 07       	movzbl 0x7(%rax),%r12d
  416f9f:	41 83 fa 08          	cmp    $0x8,%r10d
  416fa3:	48 8d 57 08          	lea    0x8(%rdi),%rdx
  416fa7:	48 8d 48 08          	lea    0x8(%rax),%rcx
            } while (--copy);
  416fab:	41 8d 71 f8          	lea    -0x8(%r9),%esi
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  416faf:	44 88 67 07          	mov    %r12b,0x7(%rdi)
  416fb3:	0f 84 b6 00 00 00    	je     41706f <inflate+0xa1f>
  416fb9:	0f b6 68 08          	movzbl 0x8(%rax),%ebp
  416fbd:	41 83 fa 09          	cmp    $0x9,%r10d
  416fc1:	48 8d 57 09          	lea    0x9(%rdi),%rdx
  416fc5:	48 8d 48 09          	lea    0x9(%rax),%rcx
            } while (--copy);
  416fc9:	41 8d 71 f7          	lea    -0x9(%r9),%esi
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  416fcd:	40 88 6f 08          	mov    %bpl,0x8(%rdi)
  416fd1:	0f 84 98 00 00 00    	je     41706f <inflate+0xa1f>
  416fd7:	0f b6 70 09          	movzbl 0x9(%rax),%esi
  416fdb:	41 83 fa 0a          	cmp    $0xa,%r10d
  416fdf:	48 8d 57 0a          	lea    0xa(%rdi),%rdx
  416fe3:	48 8d 48 0a          	lea    0xa(%rax),%rcx
  416fe7:	40 88 77 09          	mov    %sil,0x9(%rdi)
            } while (--copy);
  416feb:	41 8d 71 f6          	lea    -0xa(%r9),%esi
  416fef:	74 7e                	je     41706f <inflate+0xa1f>
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  416ff1:	44 0f b6 60 0a       	movzbl 0xa(%rax),%r12d
  416ff6:	41 83 fa 0b          	cmp    $0xb,%r10d
  416ffa:	48 8d 57 0b          	lea    0xb(%rdi),%rdx
  416ffe:	48 8d 48 0b          	lea    0xb(%rax),%rcx
            } while (--copy);
  417002:	41 8d 71 f5          	lea    -0xb(%r9),%esi
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  417006:	44 88 67 0a          	mov    %r12b,0xa(%rdi)
  41700a:	74 63                	je     41706f <inflate+0xa1f>
  41700c:	0f b6 68 0b          	movzbl 0xb(%rax),%ebp
  417010:	41 83 fa 0c          	cmp    $0xc,%r10d
  417014:	48 8d 57 0c          	lea    0xc(%rdi),%rdx
  417018:	48 8d 48 0c          	lea    0xc(%rax),%rcx
            } while (--copy);
  41701c:	41 8d 71 f4          	lea    -0xc(%r9),%esi
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  417020:	40 88 6f 0b          	mov    %bpl,0xb(%rdi)
  417024:	74 49                	je     41706f <inflate+0xa1f>
  417026:	0f b6 70 0c          	movzbl 0xc(%rax),%esi
  41702a:	41 83 fa 0d          	cmp    $0xd,%r10d
  41702e:	48 8d 57 0d          	lea    0xd(%rdi),%rdx
  417032:	48 8d 48 0d          	lea    0xd(%rax),%rcx
  417036:	40 88 77 0c          	mov    %sil,0xc(%rdi)
            } while (--copy);
  41703a:	41 8d 71 f3          	lea    -0xd(%r9),%esi
  41703e:	74 2f                	je     41706f <inflate+0xa1f>
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  417040:	44 0f b6 60 0d       	movzbl 0xd(%rax),%r12d
  417045:	41 83 fa 0f          	cmp    $0xf,%r10d
  417049:	48 8d 57 0e          	lea    0xe(%rdi),%rdx
  41704d:	48 8d 48 0e          	lea    0xe(%rax),%rcx
            } while (--copy);
  417051:	41 8d 71 f2          	lea    -0xe(%r9),%esi
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  417055:	44 88 67 0d          	mov    %r12b,0xd(%rdi)
  417059:	75 14                	jne    41706f <inflate+0xa1f>
  41705b:	0f b6 68 0e          	movzbl 0xe(%rax),%ebp
  41705f:	48 8d 57 0f          	lea    0xf(%rdi),%rdx
  417063:	48 8d 48 0f          	lea    0xf(%rax),%rcx
            } while (--copy);
  417067:	41 8d 71 f1          	lea    -0xf(%r9),%esi
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  41706b:	40 88 6f 0e          	mov    %bpl,0xe(%rdi)
  41706f:	45 29 d1             	sub    %r10d,%r9d
  417072:	44 89 d7             	mov    %r10d,%edi
  417075:	44 89 4c 24 48       	mov    %r9d,0x48(%rsp)
  41707a:	41 83 e9 10          	sub    $0x10,%r9d
  41707e:	41 c1 e9 04          	shr    $0x4,%r9d
  417082:	45 8d 61 01          	lea    0x1(%r9),%r12d
  417086:	44 89 e5             	mov    %r12d,%ebp
  417089:	c1 e5 04             	shl    $0x4,%ebp
  41708c:	89 6c 24 50          	mov    %ebp,0x50(%rsp)
  417090:	44 89 c5             	mov    %r8d,%ebp
  417093:	44 29 d5             	sub    %r10d,%ebp
  417096:	83 fd 0e             	cmp    $0xe,%ebp
  417099:	0f 86 b9 03 00 00    	jbe    417458 <inflate+0xe08>
  41709f:	41 83 e9 04          	sub    $0x4,%r9d
  4170a3:	48 01 f8             	add    %rdi,%rax
  4170a6:	48 03 7c 24 08       	add    0x8(%rsp),%rdi
  4170ab:	41 83 f9 fa          	cmp    $0xfffffffa,%r9d
  4170af:	0f 87 45 3d 00 00    	ja     41adfa <inflate+0x47aa>
  4170b5:	66 0f 6f 00          	movdqa (%rax),%xmm0
  4170b9:	0f 18 88 d0 01 00 00 	prefetcht0 0x1d0(%rax)
  4170c0:	41 c1 e9 02          	shr    $0x2,%r9d
  4170c4:	46 8d 14 8d 04 00 00 	lea    0x4(,%r9,4),%r10d
  4170cb:	00 
  4170cc:	41 83 e1 03          	and    $0x3,%r9d
  4170d0:	48 83 c0 40          	add    $0x40,%rax
  4170d4:	0f 11 07             	movups %xmm0,(%rdi)
  4170d7:	44 89 cd             	mov    %r9d,%ebp
  4170da:	41 b9 04 00 00 00    	mov    $0x4,%r9d
  4170e0:	48 83 c7 40          	add    $0x40,%rdi
  4170e4:	66 0f 6f 48 d0       	movdqa -0x30(%rax),%xmm1
  4170e9:	0f 11 4f d0          	movups %xmm1,-0x30(%rdi)
  4170ed:	66 0f 6f 50 e0       	movdqa -0x20(%rax),%xmm2
  4170f2:	0f 11 57 e0          	movups %xmm2,-0x20(%rdi)
  4170f6:	66 0f 6f 58 f0       	movdqa -0x10(%rax),%xmm3
  4170fb:	0f 11 5f f0          	movups %xmm3,-0x10(%rdi)
  4170ff:	45 39 d1             	cmp    %r10d,%r9d
  417102:	0f 84 e0 01 00 00    	je     4172e8 <inflate+0xc98>
  417108:	85 ed                	test   %ebp,%ebp
  41710a:	0f 84 c9 00 00 00    	je     4171d9 <inflate+0xb89>
  417110:	83 fd 01             	cmp    $0x1,%ebp
  417113:	74 7c                	je     417191 <inflate+0xb41>
  417115:	83 fd 02             	cmp    $0x2,%ebp
  417118:	74 38                	je     417152 <inflate+0xb02>
  41711a:	66 0f 6f 20          	movdqa (%rax),%xmm4
  41711e:	0f 18 88 d0 01 00 00 	prefetcht0 0x1d0(%rax)
  417125:	48 83 c7 40          	add    $0x40,%rdi
  417129:	48 83 c0 40          	add    $0x40,%rax
  41712d:	41 b9 08 00 00 00    	mov    $0x8,%r9d
  417133:	0f 11 67 c0          	movups %xmm4,-0x40(%rdi)
  417137:	66 0f 6f 68 d0       	movdqa -0x30(%rax),%xmm5
  41713c:	0f 11 6f d0          	movups %xmm5,-0x30(%rdi)
  417140:	66 0f 6f 70 e0       	movdqa -0x20(%rax),%xmm6
  417145:	0f 11 77 e0          	movups %xmm6,-0x20(%rdi)
  417149:	66 0f 6f 78 f0       	movdqa -0x10(%rax),%xmm7
  41714e:	0f 11 7f f0          	movups %xmm7,-0x10(%rdi)
  417152:	0f 18 88 d0 01 00 00 	prefetcht0 0x1d0(%rax)
  417159:	48 83 c7 40          	add    $0x40,%rdi
  41715d:	48 83 c0 40          	add    $0x40,%rax
  417161:	41 83 c1 04          	add    $0x4,%r9d
  417165:	66 44 0f 6f 40 c0    	movdqa -0x40(%rax),%xmm8
  41716b:	44 0f 11 47 c0       	movups %xmm8,-0x40(%rdi)
  417170:	66 44 0f 6f 48 d0    	movdqa -0x30(%rax),%xmm9
  417176:	44 0f 11 4f d0       	movups %xmm9,-0x30(%rdi)
  41717b:	66 44 0f 6f 50 e0    	movdqa -0x20(%rax),%xmm10
  417181:	44 0f 11 57 e0       	movups %xmm10,-0x20(%rdi)
  417186:	66 44 0f 6f 58 f0    	movdqa -0x10(%rax),%xmm11
  41718c:	44 0f 11 5f f0       	movups %xmm11,-0x10(%rdi)
  417191:	0f 18 88 d0 01 00 00 	prefetcht0 0x1d0(%rax)
  417198:	41 83 c1 04          	add    $0x4,%r9d
  41719c:	48 83 c0 40          	add    $0x40,%rax
  4171a0:	48 83 c7 40          	add    $0x40,%rdi
  4171a4:	66 44 0f 6f 60 c0    	movdqa -0x40(%rax),%xmm12
  4171aa:	44 0f 11 67 c0       	movups %xmm12,-0x40(%rdi)
  4171af:	66 44 0f 6f 68 d0    	movdqa -0x30(%rax),%xmm13
  4171b5:	44 0f 11 6f d0       	movups %xmm13,-0x30(%rdi)
  4171ba:	66 44 0f 6f 70 e0    	movdqa -0x20(%rax),%xmm14
  4171c0:	44 0f 11 77 e0       	movups %xmm14,-0x20(%rdi)
  4171c5:	66 44 0f 6f 78 f0    	movdqa -0x10(%rax),%xmm15
  4171cb:	44 0f 11 7f f0       	movups %xmm15,-0x10(%rdi)
  4171d0:	45 39 d1             	cmp    %r10d,%r9d
  4171d3:	0f 84 0f 01 00 00    	je     4172e8 <inflate+0xc98>
  4171d9:	4c 89 7c 24 58       	mov    %r15,0x58(%rsp)
  4171de:	66 0f 6f 00          	movdqa (%rax),%xmm0
  4171e2:	0f 18 88 d0 01 00 00 	prefetcht0 0x1d0(%rax)
  4171e9:	0f 18 88 10 02 00 00 	prefetcht0 0x210(%rax)
  4171f0:	0f 18 88 50 02 00 00 	prefetcht0 0x250(%rax)
  4171f7:	0f 18 88 90 02 00 00 	prefetcht0 0x290(%rax)
  4171fe:	41 83 c1 10          	add    $0x10,%r9d
  417202:	0f 11 07             	movups %xmm0,(%rdi)
  417205:	48 05 00 01 00 00    	add    $0x100,%rax
  41720b:	48 81 c7 00 01 00 00 	add    $0x100,%rdi
  417212:	66 0f 6f 88 10 ff ff 	movdqa -0xf0(%rax),%xmm1
  417219:	ff 
  41721a:	0f 11 8f 10 ff ff ff 	movups %xmm1,-0xf0(%rdi)
  417221:	66 0f 6f 90 20 ff ff 	movdqa -0xe0(%rax),%xmm2
  417228:	ff 
  417229:	0f 11 97 20 ff ff ff 	movups %xmm2,-0xe0(%rdi)
  417230:	66 0f 6f 98 30 ff ff 	movdqa -0xd0(%rax),%xmm3
  417237:	ff 
  417238:	0f 11 9f 30 ff ff ff 	movups %xmm3,-0xd0(%rdi)
  41723f:	66 0f 6f a0 40 ff ff 	movdqa -0xc0(%rax),%xmm4
  417246:	ff 
  417247:	0f 11 a7 40 ff ff ff 	movups %xmm4,-0xc0(%rdi)
  41724e:	66 0f 6f a8 50 ff ff 	movdqa -0xb0(%rax),%xmm5
  417255:	ff 
  417256:	0f 11 af 50 ff ff ff 	movups %xmm5,-0xb0(%rdi)
  41725d:	66 0f 6f b0 60 ff ff 	movdqa -0xa0(%rax),%xmm6
  417264:	ff 
  417265:	0f 11 b7 60 ff ff ff 	movups %xmm6,-0xa0(%rdi)
  41726c:	66 0f 6f b8 70 ff ff 	movdqa -0x90(%rax),%xmm7
  417273:	ff 
  417274:	0f 11 bf 70 ff ff ff 	movups %xmm7,-0x90(%rdi)
  41727b:	66 44 0f 6f 40 80    	movdqa -0x80(%rax),%xmm8
  417281:	44 0f 11 47 80       	movups %xmm8,-0x80(%rdi)
  417286:	66 44 0f 6f 48 90    	movdqa -0x70(%rax),%xmm9
  41728c:	44 0f 11 4f 90       	movups %xmm9,-0x70(%rdi)
  417291:	66 44 0f 6f 50 a0    	movdqa -0x60(%rax),%xmm10
  417297:	44 0f 11 57 a0       	movups %xmm10,-0x60(%rdi)
  41729c:	66 44 0f 6f 58 b0    	movdqa -0x50(%rax),%xmm11
  4172a2:	44 0f 11 5f b0       	movups %xmm11,-0x50(%rdi)
  4172a7:	66 44 0f 6f 60 c0    	movdqa -0x40(%rax),%xmm12
  4172ad:	44 0f 11 67 c0       	movups %xmm12,-0x40(%rdi)
  4172b2:	66 44 0f 6f 68 d0    	movdqa -0x30(%rax),%xmm13
  4172b8:	44 0f 11 6f d0       	movups %xmm13,-0x30(%rdi)
  4172bd:	66 44 0f 6f 70 e0    	movdqa -0x20(%rax),%xmm14
  4172c3:	44 0f 11 77 e0       	movups %xmm14,-0x20(%rdi)
  4172c8:	66 44 0f 6f 78 f0    	movdqa -0x10(%rax),%xmm15
  4172ce:	44 0f 11 7f f0       	movups %xmm15,-0x10(%rdi)
  4172d3:	45 39 d1             	cmp    %r10d,%r9d
  4172d6:	0f 85 02 ff ff ff    	jne    4171de <inflate+0xb8e>
  4172dc:	4c 8b 7c 24 58       	mov    0x58(%rsp),%r15
  4172e1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  4172e8:	44 89 d5             	mov    %r10d,%ebp
  4172eb:	66 0f 6f 00          	movdqa (%rax),%xmm0
  4172ef:	f7 d5                	not    %ebp
  4172f1:	41 b9 10 00 00 00    	mov    $0x10,%r9d
  4172f7:	44 01 e5             	add    %r12d,%ebp
  4172fa:	83 e5 07             	and    $0x7,%ebp
  4172fd:	89 6c 24 58          	mov    %ebp,0x58(%rsp)
  417301:	41 8d 6a 01          	lea    0x1(%r10),%ebp
  417305:	0f 11 07             	movups %xmm0,(%rdi)
  417308:	41 39 ec             	cmp    %ebp,%r12d
  41730b:	0f 86 2f 01 00 00    	jbe    417440 <inflate+0xdf0>
  417311:	83 7c 24 58 00       	cmpl   $0x0,0x58(%rsp)
  417316:	0f 84 b2 00 00 00    	je     4173ce <inflate+0xd7e>
  41731c:	83 7c 24 58 01       	cmpl   $0x1,0x58(%rsp)
  417321:	0f 84 90 00 00 00    	je     4173b7 <inflate+0xd67>
  417327:	83 7c 24 58 02       	cmpl   $0x2,0x58(%rsp)
  41732c:	74 77                	je     4173a5 <inflate+0xd55>
  41732e:	83 7c 24 58 03       	cmpl   $0x3,0x58(%rsp)
  417333:	74 5e                	je     417393 <inflate+0xd43>
  417335:	83 7c 24 58 04       	cmpl   $0x4,0x58(%rsp)
  41733a:	74 45                	je     417381 <inflate+0xd31>
  41733c:	83 7c 24 58 05       	cmpl   $0x5,0x58(%rsp)
  417341:	74 2c                	je     41736f <inflate+0xd1f>
  417343:	83 7c 24 58 06       	cmpl   $0x6,0x58(%rsp)
  417348:	74 13                	je     41735d <inflate+0xd0d>
  41734a:	66 0f 6f 48 10       	movdqa 0x10(%rax),%xmm1
  41734f:	41 8d 6a 02          	lea    0x2(%r10),%ebp
  417353:	41 b9 20 00 00 00    	mov    $0x20,%r9d
  417359:	0f 11 4f 10          	movups %xmm1,0x10(%rdi)
  41735d:	83 c5 01             	add    $0x1,%ebp
  417360:	66 42 0f 6f 14 08    	movdqa (%rax,%r9,1),%xmm2
  417366:	42 0f 11 14 0f       	movups %xmm2,(%rdi,%r9,1)
  41736b:	49 83 c1 10          	add    $0x10,%r9
  41736f:	83 c5 01             	add    $0x1,%ebp
  417372:	66 42 0f 6f 1c 08    	movdqa (%rax,%r9,1),%xmm3
  417378:	42 0f 11 1c 0f       	movups %xmm3,(%rdi,%r9,1)
  41737d:	49 83 c1 10          	add    $0x10,%r9
  417381:	83 c5 01             	add    $0x1,%ebp
  417384:	66 42 0f 6f 24 08    	movdqa (%rax,%r9,1),%xmm4
  41738a:	42 0f 11 24 0f       	movups %xmm4,(%rdi,%r9,1)
  41738f:	49 83 c1 10          	add    $0x10,%r9
  417393:	83 c5 01             	add    $0x1,%ebp
  417396:	66 42 0f 6f 2c 08    	movdqa (%rax,%r9,1),%xmm5
  41739c:	42 0f 11 2c 0f       	movups %xmm5,(%rdi,%r9,1)
  4173a1:	49 83 c1 10          	add    $0x10,%r9
  4173a5:	83 c5 01             	add    $0x1,%ebp
  4173a8:	66 42 0f 6f 34 08    	movdqa (%rax,%r9,1),%xmm6
  4173ae:	42 0f 11 34 0f       	movups %xmm6,(%rdi,%r9,1)
  4173b3:	49 83 c1 10          	add    $0x10,%r9
  4173b7:	83 c5 01             	add    $0x1,%ebp
  4173ba:	66 42 0f 6f 3c 08    	movdqa (%rax,%r9,1),%xmm7
  4173c0:	42 0f 11 3c 0f       	movups %xmm7,(%rdi,%r9,1)
  4173c5:	49 83 c1 10          	add    $0x10,%r9
  4173c9:	41 39 ec             	cmp    %ebp,%r12d
  4173cc:	76 72                	jbe    417440 <inflate+0xdf0>
  4173ce:	83 c5 08             	add    $0x8,%ebp
  4173d1:	66 46 0f 6f 04 08    	movdqa (%rax,%r9,1),%xmm8
  4173d7:	46 0f 11 04 0f       	movups %xmm8,(%rdi,%r9,1)
  4173dc:	66 46 0f 6f 4c 08 10 	movdqa 0x10(%rax,%r9,1),%xmm9
  4173e3:	46 0f 11 4c 0f 10    	movups %xmm9,0x10(%rdi,%r9,1)
  4173e9:	66 46 0f 6f 54 08 20 	movdqa 0x20(%rax,%r9,1),%xmm10
  4173f0:	46 0f 11 54 0f 20    	movups %xmm10,0x20(%rdi,%r9,1)
  4173f6:	66 46 0f 6f 5c 08 30 	movdqa 0x30(%rax,%r9,1),%xmm11
  4173fd:	46 0f 11 5c 0f 30    	movups %xmm11,0x30(%rdi,%r9,1)
  417403:	66 46 0f 6f 64 08 40 	movdqa 0x40(%rax,%r9,1),%xmm12
  41740a:	46 0f 11 64 0f 40    	movups %xmm12,0x40(%rdi,%r9,1)
  417410:	66 46 0f 6f 6c 08 50 	movdqa 0x50(%rax,%r9,1),%xmm13
  417417:	46 0f 11 6c 0f 50    	movups %xmm13,0x50(%rdi,%r9,1)
  41741d:	66 46 0f 6f 74 08 60 	movdqa 0x60(%rax,%r9,1),%xmm14
  417424:	46 0f 11 74 0f 60    	movups %xmm14,0x60(%rdi,%r9,1)
  41742a:	66 46 0f 6f 7c 08 70 	movdqa 0x70(%rax,%r9,1),%xmm15
  417431:	46 0f 11 7c 0f 70    	movups %xmm15,0x70(%rdi,%r9,1)
  417437:	49 83 e9 80          	sub    $0xffffffffffffff80,%r9
  41743b:	41 39 ec             	cmp    %ebp,%r12d
  41743e:	77 8e                	ja     4173ce <inflate+0xd7e>
  417440:	8b 7c 24 50          	mov    0x50(%rsp),%edi
  417444:	89 f8                	mov    %edi,%eax
  417446:	29 fe                	sub    %edi,%esi
  417448:	48 01 c2             	add    %rax,%rdx
  41744b:	48 01 c1             	add    %rax,%rcx
  41744e:	39 7c 24 48          	cmp    %edi,0x48(%rsp)
  417452:	0f 84 d1 00 00 00    	je     417529 <inflate+0xed9>
  417458:	44 0f b6 21          	movzbl (%rcx),%r12d
            } while (--copy);
  41745c:	83 fe 01             	cmp    $0x1,%esi
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  41745f:	44 88 22             	mov    %r12b,(%rdx)
            } while (--copy);
  417462:	0f 84 c1 00 00 00    	je     417529 <inflate+0xed9>
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  417468:	44 0f b6 51 01       	movzbl 0x1(%rcx),%r10d
            } while (--copy);
  41746d:	83 fe 02             	cmp    $0x2,%esi
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  417470:	44 88 52 01          	mov    %r10b,0x1(%rdx)
            } while (--copy);
  417474:	0f 84 af 00 00 00    	je     417529 <inflate+0xed9>
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  41747a:	44 0f b6 49 02       	movzbl 0x2(%rcx),%r9d
            } while (--copy);
  41747f:	83 fe 03             	cmp    $0x3,%esi
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  417482:	44 88 4a 02          	mov    %r9b,0x2(%rdx)
            } while (--copy);
  417486:	0f 84 9d 00 00 00    	je     417529 <inflate+0xed9>
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  41748c:	0f b6 69 03          	movzbl 0x3(%rcx),%ebp
            } while (--copy);
  417490:	83 fe 04             	cmp    $0x4,%esi
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  417493:	40 88 6a 03          	mov    %bpl,0x3(%rdx)
            } while (--copy);
  417497:	0f 84 8c 00 00 00    	je     417529 <inflate+0xed9>
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  41749d:	0f b6 79 04          	movzbl 0x4(%rcx),%edi
            } while (--copy);
  4174a1:	83 fe 05             	cmp    $0x5,%esi
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  4174a4:	40 88 7a 04          	mov    %dil,0x4(%rdx)
            } while (--copy);
  4174a8:	74 7f                	je     417529 <inflate+0xed9>
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  4174aa:	0f b6 41 05          	movzbl 0x5(%rcx),%eax
            } while (--copy);
  4174ae:	83 fe 06             	cmp    $0x6,%esi
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  4174b1:	88 42 05             	mov    %al,0x5(%rdx)
            } while (--copy);
  4174b4:	74 73                	je     417529 <inflate+0xed9>
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  4174b6:	44 0f b6 61 06       	movzbl 0x6(%rcx),%r12d
            } while (--copy);
  4174bb:	83 fe 07             	cmp    $0x7,%esi
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  4174be:	44 88 62 06          	mov    %r12b,0x6(%rdx)
            } while (--copy);
  4174c2:	74 65                	je     417529 <inflate+0xed9>
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  4174c4:	44 0f b6 51 07       	movzbl 0x7(%rcx),%r10d
            } while (--copy);
  4174c9:	83 fe 08             	cmp    $0x8,%esi
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  4174cc:	44 88 52 07          	mov    %r10b,0x7(%rdx)
            } while (--copy);
  4174d0:	74 57                	je     417529 <inflate+0xed9>
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  4174d2:	44 0f b6 49 08       	movzbl 0x8(%rcx),%r9d
            } while (--copy);
  4174d7:	83 fe 09             	cmp    $0x9,%esi
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  4174da:	44 88 4a 08          	mov    %r9b,0x8(%rdx)
            } while (--copy);
  4174de:	74 49                	je     417529 <inflate+0xed9>
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  4174e0:	0f b6 69 09          	movzbl 0x9(%rcx),%ebp
            } while (--copy);
  4174e4:	83 fe 0a             	cmp    $0xa,%esi
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  4174e7:	40 88 6a 09          	mov    %bpl,0x9(%rdx)
            } while (--copy);
  4174eb:	74 3c                	je     417529 <inflate+0xed9>
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  4174ed:	0f b6 79 0a          	movzbl 0xa(%rcx),%edi
            } while (--copy);
  4174f1:	83 fe 0b             	cmp    $0xb,%esi
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  4174f4:	40 88 7a 0a          	mov    %dil,0xa(%rdx)
            } while (--copy);
  4174f8:	74 2f                	je     417529 <inflate+0xed9>
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  4174fa:	0f b6 41 0b          	movzbl 0xb(%rcx),%eax
            } while (--copy);
  4174fe:	83 fe 0c             	cmp    $0xc,%esi
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  417501:	88 42 0b             	mov    %al,0xb(%rdx)
            } while (--copy);
  417504:	74 23                	je     417529 <inflate+0xed9>
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  417506:	44 0f b6 61 0c       	movzbl 0xc(%rcx),%r12d
            } while (--copy);
  41750b:	83 fe 0d             	cmp    $0xd,%esi
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  41750e:	44 88 62 0c          	mov    %r12b,0xc(%rdx)
            } while (--copy);
  417512:	74 15                	je     417529 <inflate+0xed9>
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  417514:	44 0f b6 51 0d       	movzbl 0xd(%rcx),%r10d
            } while (--copy);
  417519:	83 fe 0e             	cmp    $0xe,%esi
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  41751c:	44 88 52 0d          	mov    %r10b,0xd(%rdx)
            } while (--copy);
  417520:	74 07                	je     417529 <inflate+0xed9>
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  417522:	0f b6 49 0e          	movzbl 0xe(%rcx),%ecx
  417526:	88 4a 0e             	mov    %cl,0xe(%rdx)
  417529:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  41752e:	4a 8d 74 00 01       	lea    0x1(%rax,%r8,1),%rsi
            } while (--copy);
            if (state->length == 0) state->mode = LEN;
  417533:	45 8b 43 54          	mov    0x54(%r11),%r8d
  417537:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  41753c:	45 85 c0             	test   %r8d,%r8d
  41753f:	0f 84 a3 25 00 00    	je     419ae8 <inflate+0x3498>
  417545:	45 8b 23             	mov    (%r11),%r12d
  417548:	e9 c6 f1 ff ff       	jmpq   416713 <inflate+0xc3>
  41754d:	0f 1f 00             	nopl   (%rax)
            goto inf_leave;
        case BAD:
            ret = Z_DATA_ERROR;
            goto inf_leave;
        case MEM:
            return Z_MEM_ERROR;
  417550:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  417555:	0f 1f 00             	nopl   (%rax)
    strm->data_type = state->bits + (state->last ? 64 : 0) +
                      (state->mode == TYPE ? 128 : 0);
    if (((in == 0 && out == 0) || flush == Z_FINISH) && ret == Z_OK)
        ret = Z_BUF_ERROR;
    return ret;
}
  417558:	48 8b 74 24 68       	mov    0x68(%rsp),%rsi
  41755d:	64 48 33 34 25 28 00 	xor    %fs:0x28,%rsi
  417564:	00 00 
  417566:	0f 85 a4 44 00 00    	jne    41ba10 <inflate+0x53c0>
  41756c:	48 83 c4 78          	add    $0x78,%rsp
  417570:	5b                   	pop    %rbx
  417571:	5d                   	pop    %rbp
  417572:	41 5c                	pop    %r12
  417574:	41 5d                	pop    %r13
  417576:	41 5e                	pop    %r14
  417578:	41 5f                	pop    %r15
  41757a:	c3                   	retq   
  41757b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  417580:	44 89 f6             	mov    %r14d,%esi
  417583:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  417588:	41 89 da             	mov    %ebx,%r10d
                Tracev((stderr, "inflate:   length matches trailer\n"));
            }
#endif
            state->mode = DONE;
        case DONE:
            ret = Z_STREAM_END;
  41758b:	c7 44 24 28 01 00 00 	movl   $0x1,0x28(%rsp)
  417592:	00 
  417593:	4c 89 db             	mov    %r11,%rbx
  417596:	4d 89 eb             	mov    %r13,%r11
  417599:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
       If there was no progress during the inflate() call, return a buffer
       error.  Call updatewindow() to create and/or update the window state.
       Note: a memory error from inflate() is non-recoverable.
     */
  inf_leave:
    RESTORE();
  4175a0:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  4175a5:	8b 54 24 10          	mov    0x10(%rsp),%edx
  4175a9:	4d 89 3e             	mov    %r15,(%r14)
  4175ac:	41 89 76 08          	mov    %esi,0x8(%r14)
  4175b0:	49 89 46 18          	mov    %rax,0x18(%r14)
  4175b4:	41 89 56 20          	mov    %edx,0x20(%r14)
  4175b8:	4c 89 5b 48          	mov    %r11,0x48(%rbx)
    if (state->wsize || (state->mode < CHECK && out != strm->avail_out))
  4175bc:	44 8b 5b 34          	mov    0x34(%rbx),%r11d
       If there was no progress during the inflate() call, return a buffer
       error.  Call updatewindow() to create and/or update the window state.
       Note: a memory error from inflate() is non-recoverable.
     */
  inf_leave:
    RESTORE();
  4175c0:	44 89 53 50          	mov    %r10d,0x50(%rbx)
    if (state->wsize || (state->mode < CHECK && out != strm->avail_out))
  4175c4:	45 85 db             	test   %r11d,%r11d
  4175c7:	75 13                	jne    4175dc <inflate+0xf8c>
  4175c9:	83 3b 17             	cmpl   $0x17,(%rbx)
  4175cc:	0f 87 b2 00 00 00    	ja     417684 <inflate+0x1034>
  4175d2:	39 54 24 18          	cmp    %edx,0x18(%rsp)
  4175d6:	0f 84 a8 00 00 00    	je     417684 <inflate+0x1034>
unsigned out;
{
    struct inflate_state FAR *state;
    unsigned copy, dist;

    state = (struct inflate_state FAR *)strm->state;
  4175dc:	4d 8b 66 38          	mov    0x38(%r14),%r12

    /* if it hasn't been done already, allocate space for the window */
    if (state->window == Z_NULL) {
  4175e0:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  4175e5:	49 8b 7c 24 40       	mov    0x40(%r12),%rdi
  4175ea:	48 85 ff             	test   %rdi,%rdi
  4175ed:	0f 84 95 25 00 00    	je     419b88 <inflate+0x3538>
                               sizeof(unsigned char));
        if (state->window == Z_NULL) return 1;
    }

    /* if window not in use yet, initialize */
    if (state->wsize == 0) {
  4175f3:	41 8b 54 24 34       	mov    0x34(%r12),%edx
  4175f8:	85 d2                	test   %edx,%edx
  4175fa:	75 20                	jne    41761c <inflate+0xfcc>
        state->wsize = 1U << state->wbits;
  4175fc:	41 8b 4c 24 30       	mov    0x30(%r12),%ecx
  417601:	b2 01                	mov    $0x1,%dl
        state->write = 0;
  417603:	41 c7 44 24 3c 00 00 	movl   $0x0,0x3c(%r12)
  41760a:	00 00 
        state->whave = 0;
  41760c:	41 c7 44 24 38 00 00 	movl   $0x0,0x38(%r12)
  417613:	00 00 
        if (state->window == Z_NULL) return 1;
    }

    /* if window not in use yet, initialize */
    if (state->wsize == 0) {
        state->wsize = 1U << state->wbits;
  417615:	d3 e2                	shl    %cl,%edx
  417617:	41 89 54 24 34       	mov    %edx,0x34(%r12)
        state->write = 0;
        state->whave = 0;
    }

    /* copy state->wsize or less output bytes into the circular window */
    copy = out - strm->avail_out;
  41761c:	44 8b 6c 24 18       	mov    0x18(%rsp),%r13d
  417621:	45 2b 6e 20          	sub    0x20(%r14),%r13d
    if (copy >= state->wsize) {
  417625:	41 39 d5             	cmp    %edx,%r13d
  417628:	0f 83 32 1d 00 00    	jae    419360 <inflate+0x2d10>
        zmemcpy(state->window, strm->next_out - state->wsize, state->wsize);
        state->write = 0;
        state->whave = state->wsize;
    }
    else {
        dist = state->wsize - state->write;
  41762e:	45 8b 54 24 3c       	mov    0x3c(%r12),%r10d
        if (dist > copy) dist = copy;
        zmemcpy(state->window + state->write, strm->next_out - copy, dist);
  417633:	45 89 e9             	mov    %r13d,%r9d
        zmemcpy(state->window, strm->next_out - state->wsize, state->wsize);
        state->write = 0;
        state->whave = state->wsize;
    }
    else {
        dist = state->wsize - state->write;
  417636:	44 29 d2             	sub    %r10d,%edx
  417639:	44 39 ea             	cmp    %r13d,%edx
  41763c:	41 0f 47 d5          	cmova  %r13d,%edx
        if (dist > copy) dist = copy;
        zmemcpy(state->window + state->write, strm->next_out - copy, dist);
  417640:	4c 01 d7             	add    %r10,%rdi
  417643:	4c 29 ce             	sub    %r9,%rsi
  417646:	89 d2                	mov    %edx,%edx
  417648:	48 89 d5             	mov    %rdx,%rbp
  41764b:	e8 a0 f9 fe ff       	callq  406ff0 <memcpy@plt>
        copy -= dist;
        if (copy) {
  417650:	41 29 ed             	sub    %ebp,%r13d
  417653:	0f 85 47 1d 00 00    	jne    4193a0 <inflate+0x2d50>
            zmemcpy(state->window, strm->next_out - copy, copy);
            state->write = copy;
            state->whave = state->wsize;
        }
        else {
            state->write += dist;
  417659:	45 8b 44 24 3c       	mov    0x3c(%r12),%r8d
            if (state->write == state->wsize) state->write = 0;
  41765e:	41 8b 7c 24 34       	mov    0x34(%r12),%edi
            zmemcpy(state->window, strm->next_out - copy, copy);
            state->write = copy;
            state->whave = state->wsize;
        }
        else {
            state->write += dist;
  417663:	41 01 e8             	add    %ebp,%r8d
            if (state->write == state->wsize) state->write = 0;
  417666:	41 39 f8             	cmp    %edi,%r8d
            zmemcpy(state->window, strm->next_out - copy, copy);
            state->write = copy;
            state->whave = state->wsize;
        }
        else {
            state->write += dist;
  417669:	45 89 44 24 3c       	mov    %r8d,0x3c(%r12)
            if (state->write == state->wsize) state->write = 0;
  41766e:	0f 84 1c 1d 00 00    	je     419390 <inflate+0x2d40>
            if (state->whave < state->wsize) state->whave += dist;
  417674:	41 8b 74 24 38       	mov    0x38(%r12),%esi
  417679:	39 f7                	cmp    %esi,%edi
  41767b:	76 07                	jbe    417684 <inflate+0x1034>
  41767d:	01 ee                	add    %ebp,%esi
  41767f:	41 89 74 24 38       	mov    %esi,0x38(%r12)
    if (state->wsize || (state->mode < CHECK && out != strm->avail_out))
        if (updatewindow(strm, out)) {
            state->mode = MEM;
            return Z_MEM_ERROR;
        }
    in -= strm->avail_in;
  417684:	44 8b 7c 24 14       	mov    0x14(%rsp),%r15d
    out -= strm->avail_out;
  417689:	44 8b 64 24 18       	mov    0x18(%rsp),%r12d
    if (state->wsize || (state->mode < CHECK && out != strm->avail_out))
        if (updatewindow(strm, out)) {
            state->mode = MEM;
            return Z_MEM_ERROR;
        }
    in -= strm->avail_in;
  41768e:	45 2b 7e 08          	sub    0x8(%r14),%r15d
    out -= strm->avail_out;
  417692:	45 2b 66 20          	sub    0x20(%r14),%r12d
    strm->total_in += in;
  417696:	45 89 fb             	mov    %r15d,%r11d
    strm->total_out += out;
  417699:	45 89 e5             	mov    %r12d,%r13d
            state->mode = MEM;
            return Z_MEM_ERROR;
        }
    in -= strm->avail_in;
    out -= strm->avail_out;
    strm->total_in += in;
  41769c:	4d 01 5e 10          	add    %r11,0x10(%r14)
    strm->total_out += out;
  4176a0:	4d 01 6e 28          	add    %r13,0x28(%r14)
    state->total += out;
  4176a4:	4c 01 6b 20          	add    %r13,0x20(%rbx)
    if (state->wrap && out)
  4176a8:	45 85 e4             	test   %r12d,%r12d
  4176ab:	74 2f                	je     4176dc <inflate+0x108c>
  4176ad:	8b 4b 08             	mov    0x8(%rbx),%ecx
  4176b0:	85 c9                	test   %ecx,%ecx
  4176b2:	74 28                	je     4176dc <inflate+0x108c>
        strm->adler = state->check =
            UPDATE(state->check, strm->next_out - out, out);
  4176b4:	44 8b 53 10          	mov    0x10(%rbx),%r10d
  4176b8:	49 8b 76 18          	mov    0x18(%r14),%rsi
  4176bc:	45 85 d2             	test   %r10d,%r10d
  4176bf:	0f 84 83 1c 00 00    	je     419348 <inflate+0x2cf8>
  4176c5:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
  4176c9:	4c 29 ee             	sub    %r13,%rsi
  4176cc:	44 89 e2             	mov    %r12d,%edx
  4176cf:	e8 7c 94 00 00       	callq  420b50 <crc32>
    out -= strm->avail_out;
    strm->total_in += in;
    strm->total_out += out;
    state->total += out;
    if (state->wrap && out)
        strm->adler = state->check =
  4176d4:	48 89 43 18          	mov    %rax,0x18(%rbx)
  4176d8:	49 89 46 60          	mov    %rax,0x60(%r14)
            UPDATE(state->check, strm->next_out - out, out);
    strm->data_type = state->bits + (state->last ? 64 : 0) +
  4176dc:	83 7b 04 01          	cmpl   $0x1,0x4(%rbx)
  4176e0:	41 b9 80 00 00 00    	mov    $0x80,%r9d
  4176e6:	19 ed                	sbb    %ebp,%ebp
  4176e8:	f7 d5                	not    %ebp
  4176ea:	83 e5 40             	and    $0x40,%ebp
  4176ed:	03 6b 50             	add    0x50(%rbx),%ebp
  4176f0:	83 3b 0b             	cmpl   $0xb,(%rbx)
  4176f3:	bb 00 00 00 00       	mov    $0x0,%ebx
  4176f8:	44 0f 45 cb          	cmovne %ebx,%r9d
  4176fc:	44 01 cd             	add    %r9d,%ebp
                      (state->mode == TYPE ? 128 : 0);
    if (((in == 0 && out == 0) || flush == Z_FINISH) && ret == Z_OK)
  4176ff:	45 09 fc             	or     %r15d,%r12d
    strm->total_out += out;
    state->total += out;
    if (state->wrap && out)
        strm->adler = state->check =
            UPDATE(state->check, strm->next_out - out, out);
    strm->data_type = state->bits + (state->last ? 64 : 0) +
  417702:	41 89 6e 58          	mov    %ebp,0x58(%r14)
                      (state->mode == TYPE ? 128 : 0);
    if (((in == 0 && out == 0) || flush == Z_FINISH) && ret == Z_OK)
  417706:	74 0f                	je     417717 <inflate+0x10c7>
  417708:	83 7c 24 2c 04       	cmpl   $0x4,0x2c(%rsp)
  41770d:	8b 44 24 28          	mov    0x28(%rsp),%eax
  417711:	0f 85 41 fe ff ff    	jne    417558 <inflate+0xf08>
        ret = Z_BUF_ERROR;
  417717:	44 8b 74 24 28       	mov    0x28(%rsp),%r14d
  41771c:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
  417721:	45 85 f6             	test   %r14d,%r14d
  417724:	41 0f 45 c6          	cmovne %r14d,%eax
  417728:	e9 2b fe ff ff       	jmpq   417558 <inflate+0xf08>
                strm->msg = (char *)"invalid distances set";
                state->mode = BAD;
                break;
            }
            Tracev((stderr, "inflate:       codes ok\n"));
            state->mode = LEN;
  41772d:	41 c7 03 12 00 00 00 	movl   $0x12,(%r11)
  417734:	0f 1f 40 00          	nopl   0x0(%rax)
        case LEN:
            if (have >= 6 && left >= 258) {
  417738:	41 83 fe 05          	cmp    $0x5,%r14d
  41773c:	76 0e                	jbe    41774c <inflate+0x10fc>
  41773e:	81 7c 24 10 01 01 00 	cmpl   $0x101,0x10(%rsp)
  417745:	00 
  417746:	0f 87 d7 2b 00 00    	ja     41a323 <inflate+0x3cd3>
                inflate_fast(strm, out);
                LOAD();
                break;
            }
            for (;;) {
                this = state->lencode[BITS(state->lenbits)];
  41774c:	41 8b 4b 70          	mov    0x70(%r11),%ecx
  417750:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  417756:	4d 8b 43 60          	mov    0x60(%r11),%r8
  41775a:	45 89 e9             	mov    %r13d,%r9d
  41775d:	41 d3 e4             	shl    %cl,%r12d
  417760:	41 83 ec 01          	sub    $0x1,%r12d
  417764:	44 89 e2             	mov    %r12d,%edx
  417767:	44 21 ea             	and    %r13d,%edx
  41776a:	49 8d 3c 90          	lea    (%r8,%rdx,4),%rdi
  41776e:	0f b6 57 01          	movzbl 0x1(%rdi),%edx
  417772:	0f b6 37             	movzbl (%rdi),%esi
  417775:	0f b7 7f 02          	movzwl 0x2(%rdi),%edi
                if ((unsigned)(this.bits) <= bits) break;
  417779:	0f b6 c2             	movzbl %dl,%eax
  41777c:	39 c3                	cmp    %eax,%ebx
  41777e:	0f 83 d2 24 00 00    	jae    419c56 <inflate+0x3606>
                PULLBYTE();
  417784:	45 85 f6             	test   %r14d,%r14d
  417787:	0f 84 ed 3b 00 00    	je     41b37a <inflate+0x4d2a>
  41778d:	49 83 c7 01          	add    $0x1,%r15
  417791:	41 0f b6 77 ff       	movzbl -0x1(%r15),%esi
  417796:	89 d9                	mov    %ebx,%ecx
                inflate_fast(strm, out);
                LOAD();
                break;
            }
            for (;;) {
                this = state->lencode[BITS(state->lenbits)];
  417798:	44 89 e0             	mov    %r12d,%eax
  41779b:	41 83 ee 01          	sub    $0x1,%r14d
                if ((unsigned)(this.bits) <= bits) break;
                PULLBYTE();
  41779f:	83 c3 08             	add    $0x8,%ebx
  4177a2:	44 89 f5             	mov    %r14d,%ebp
  4177a5:	83 e5 03             	and    $0x3,%ebp
  4177a8:	48 d3 e6             	shl    %cl,%rsi
  4177ab:	49 01 f5             	add    %rsi,%r13
                inflate_fast(strm, out);
                LOAD();
                break;
            }
            for (;;) {
                this = state->lencode[BITS(state->lenbits)];
  4177ae:	44 21 e8             	and    %r13d,%eax
  4177b1:	45 89 e9             	mov    %r13d,%r9d
  4177b4:	4d 8d 14 80          	lea    (%r8,%rax,4),%r10
  4177b8:	41 0f b6 52 01       	movzbl 0x1(%r10),%edx
  4177bd:	41 0f b6 32          	movzbl (%r10),%esi
  4177c1:	41 0f b7 7a 02       	movzwl 0x2(%r10),%edi
                if ((unsigned)(this.bits) <= bits) break;
  4177c6:	0f b6 c2             	movzbl %dl,%eax
  4177c9:	39 d8                	cmp    %ebx,%eax
  4177cb:	0f 86 85 24 00 00    	jbe    419c56 <inflate+0x3606>
                PULLBYTE();
  4177d1:	45 85 f6             	test   %r14d,%r14d
  4177d4:	0f 84 15 3c 00 00    	je     41b3ef <inflate+0x4d9f>
  4177da:	85 ed                	test   %ebp,%ebp
  4177dc:	0f 84 c4 00 00 00    	je     4178a6 <inflate+0x1256>
  4177e2:	83 fd 01             	cmp    $0x1,%ebp
  4177e5:	74 7b                	je     417862 <inflate+0x1212>
  4177e7:	83 fd 02             	cmp    $0x2,%ebp
  4177ea:	74 3b                	je     417827 <inflate+0x11d7>
  4177ec:	49 83 c7 01          	add    $0x1,%r15
  4177f0:	45 0f b6 4f ff       	movzbl -0x1(%r15),%r9d
  4177f5:	89 d9                	mov    %ebx,%ecx
                inflate_fast(strm, out);
                LOAD();
                break;
            }
            for (;;) {
                this = state->lencode[BITS(state->lenbits)];
  4177f7:	44 89 e2             	mov    %r12d,%edx
                if ((unsigned)(this.bits) <= bits) break;
                PULLBYTE();
  4177fa:	83 c3 08             	add    $0x8,%ebx
  4177fd:	41 83 ee 01          	sub    $0x1,%r14d
  417801:	49 d3 e1             	shl    %cl,%r9
  417804:	4d 01 cd             	add    %r9,%r13
                inflate_fast(strm, out);
                LOAD();
                break;
            }
            for (;;) {
                this = state->lencode[BITS(state->lenbits)];
  417807:	44 21 ea             	and    %r13d,%edx
  41780a:	45 89 e9             	mov    %r13d,%r9d
  41780d:	49 8d 3c 90          	lea    (%r8,%rdx,4),%rdi
  417811:	0f b6 57 01          	movzbl 0x1(%rdi),%edx
  417815:	0f b6 37             	movzbl (%rdi),%esi
  417818:	0f b7 7f 02          	movzwl 0x2(%rdi),%edi
                if ((unsigned)(this.bits) <= bits) break;
  41781c:	0f b6 c2             	movzbl %dl,%eax
  41781f:	39 d8                	cmp    %ebx,%eax
  417821:	0f 86 2f 24 00 00    	jbe    419c56 <inflate+0x3606>
                PULLBYTE();
  417827:	49 83 c7 01          	add    $0x1,%r15
  41782b:	41 0f b6 6f ff       	movzbl -0x1(%r15),%ebp
  417830:	89 d9                	mov    %ebx,%ecx
                inflate_fast(strm, out);
                LOAD();
                break;
            }
            for (;;) {
                this = state->lencode[BITS(state->lenbits)];
  417832:	44 89 e6             	mov    %r12d,%esi
                if ((unsigned)(this.bits) <= bits) break;
                PULLBYTE();
  417835:	83 c3 08             	add    $0x8,%ebx
  417838:	41 83 ee 01          	sub    $0x1,%r14d
  41783c:	48 d3 e5             	shl    %cl,%rbp
  41783f:	49 01 ed             	add    %rbp,%r13
                inflate_fast(strm, out);
                LOAD();
                break;
            }
            for (;;) {
                this = state->lencode[BITS(state->lenbits)];
  417842:	44 21 ee             	and    %r13d,%esi
  417845:	45 89 e9             	mov    %r13d,%r9d
  417848:	49 8d 04 b0          	lea    (%r8,%rsi,4),%rax
  41784c:	0f b6 50 01          	movzbl 0x1(%rax),%edx
  417850:	0f b6 30             	movzbl (%rax),%esi
  417853:	0f b7 78 02          	movzwl 0x2(%rax),%edi
                if ((unsigned)(this.bits) <= bits) break;
  417857:	0f b6 c2             	movzbl %dl,%eax
  41785a:	39 d8                	cmp    %ebx,%eax
  41785c:	0f 86 f4 23 00 00    	jbe    419c56 <inflate+0x3606>
                PULLBYTE();
  417862:	49 83 c7 01          	add    $0x1,%r15
  417866:	45 0f b6 57 ff       	movzbl -0x1(%r15),%r10d
  41786b:	89 d9                	mov    %ebx,%ecx
                inflate_fast(strm, out);
                LOAD();
                break;
            }
            for (;;) {
                this = state->lencode[BITS(state->lenbits)];
  41786d:	44 89 e2             	mov    %r12d,%edx
                if ((unsigned)(this.bits) <= bits) break;
                PULLBYTE();
  417870:	83 c3 08             	add    $0x8,%ebx
  417873:	41 83 ee 01          	sub    $0x1,%r14d
  417877:	49 d3 e2             	shl    %cl,%r10
  41787a:	4d 01 d5             	add    %r10,%r13
                inflate_fast(strm, out);
                LOAD();
                break;
            }
            for (;;) {
                this = state->lencode[BITS(state->lenbits)];
  41787d:	44 21 ea             	and    %r13d,%edx
  417880:	45 89 e9             	mov    %r13d,%r9d
  417883:	49 8d 3c 90          	lea    (%r8,%rdx,4),%rdi
  417887:	0f b6 57 01          	movzbl 0x1(%rdi),%edx
  41788b:	0f b6 37             	movzbl (%rdi),%esi
  41788e:	0f b7 7f 02          	movzwl 0x2(%rdi),%edi
                if ((unsigned)(this.bits) <= bits) break;
  417892:	0f b6 c2             	movzbl %dl,%eax
  417895:	39 d8                	cmp    %ebx,%eax
  417897:	0f 86 b9 23 00 00    	jbe    419c56 <inflate+0x3606>
                PULLBYTE();
  41789d:	45 85 f6             	test   %r14d,%r14d
  4178a0:	0f 84 fd 21 00 00    	je     419aa3 <inflate+0x3453>
  4178a6:	89 d9                	mov    %ebx,%ecx
  4178a8:	4d 8d 57 01          	lea    0x1(%r15),%r10
  4178ac:	45 0f b6 4a ff       	movzbl -0x1(%r10),%r9d
                inflate_fast(strm, out);
                LOAD();
                break;
            }
            for (;;) {
                this = state->lencode[BITS(state->lenbits)];
  4178b1:	44 89 e6             	mov    %r12d,%esi
                if ((unsigned)(this.bits) <= bits) break;
                PULLBYTE();
  4178b4:	8d 69 08             	lea    0x8(%rcx),%ebp
  4178b7:	41 8d 5e ff          	lea    -0x1(%r14),%ebx
  4178bb:	4d 89 d7             	mov    %r10,%r15
  4178be:	41 89 de             	mov    %ebx,%r14d
  4178c1:	49 d3 e1             	shl    %cl,%r9
  4178c4:	89 e9                	mov    %ebp,%ecx
  4178c6:	4d 01 cd             	add    %r9,%r13
                inflate_fast(strm, out);
                LOAD();
                break;
            }
            for (;;) {
                this = state->lencode[BITS(state->lenbits)];
  4178c9:	44 21 ee             	and    %r13d,%esi
  4178cc:	45 89 e9             	mov    %r13d,%r9d
  4178cf:	49 8d 04 b0          	lea    (%r8,%rsi,4),%rax
  4178d3:	0f b6 50 01          	movzbl 0x1(%rax),%edx
  4178d7:	0f b6 30             	movzbl (%rax),%esi
  4178da:	0f b7 78 02          	movzwl 0x2(%rax),%edi
                if ((unsigned)(this.bits) <= bits) break;
  4178de:	0f b6 c2             	movzbl %dl,%eax
  4178e1:	39 e8                	cmp    %ebp,%eax
  4178e3:	0f 86 6b 23 00 00    	jbe    419c54 <inflate+0x3604>
                PULLBYTE();
  4178e9:	49 83 c7 01          	add    $0x1,%r15
  4178ed:	41 0f b6 57 ff       	movzbl -0x1(%r15),%edx
                inflate_fast(strm, out);
                LOAD();
                break;
            }
            for (;;) {
                this = state->lencode[BITS(state->lenbits)];
  4178f2:	44 89 e7             	mov    %r12d,%edi
                if ((unsigned)(this.bits) <= bits) break;
                PULLBYTE();
  4178f5:	41 83 ee 01          	sub    $0x1,%r14d
  4178f9:	48 d3 e2             	shl    %cl,%rdx
  4178fc:	83 c1 08             	add    $0x8,%ecx
  4178ff:	49 01 d5             	add    %rdx,%r13
                inflate_fast(strm, out);
                LOAD();
                break;
            }
            for (;;) {
                this = state->lencode[BITS(state->lenbits)];
  417902:	44 21 ef             	and    %r13d,%edi
  417905:	45 89 e9             	mov    %r13d,%r9d
  417908:	49 8d 04 b8          	lea    (%r8,%rdi,4),%rax
  41790c:	0f b6 50 01          	movzbl 0x1(%rax),%edx
  417910:	0f b6 30             	movzbl (%rax),%esi
  417913:	0f b7 78 02          	movzwl 0x2(%rax),%edi
                if ((unsigned)(this.bits) <= bits) break;
  417917:	0f b6 c2             	movzbl %dl,%eax
  41791a:	39 c8                	cmp    %ecx,%eax
  41791c:	0f 86 32 23 00 00    	jbe    419c54 <inflate+0x3604>
                PULLBYTE();
  417922:	4d 8d 7a 02          	lea    0x2(%r10),%r15
  417926:	45 0f b6 4f ff       	movzbl -0x1(%r15),%r9d
                inflate_fast(strm, out);
                LOAD();
                break;
            }
            for (;;) {
                this = state->lencode[BITS(state->lenbits)];
  41792b:	44 89 e6             	mov    %r12d,%esi
                if ((unsigned)(this.bits) <= bits) break;
                PULLBYTE();
  41792e:	44 8d 73 fe          	lea    -0x2(%rbx),%r14d
  417932:	49 d3 e1             	shl    %cl,%r9
  417935:	8d 4d 10             	lea    0x10(%rbp),%ecx
  417938:	4d 01 cd             	add    %r9,%r13
                inflate_fast(strm, out);
                LOAD();
                break;
            }
            for (;;) {
                this = state->lencode[BITS(state->lenbits)];
  41793b:	44 21 ee             	and    %r13d,%esi
  41793e:	45 89 e9             	mov    %r13d,%r9d
  417941:	49 8d 3c b0          	lea    (%r8,%rsi,4),%rdi
  417945:	0f b6 57 01          	movzbl 0x1(%rdi),%edx
  417949:	0f b6 37             	movzbl (%rdi),%esi
  41794c:	0f b7 7f 02          	movzwl 0x2(%rdi),%edi
                if ((unsigned)(this.bits) <= bits) break;
  417950:	0f b6 c2             	movzbl %dl,%eax
  417953:	39 c8                	cmp    %ecx,%eax
  417955:	0f 86 f9 22 00 00    	jbe    419c54 <inflate+0x3604>
                PULLBYTE();
  41795b:	4d 8d 7a 03          	lea    0x3(%r10),%r15
  41795f:	44 8d 73 fd          	lea    -0x3(%rbx),%r14d
                inflate_fast(strm, out);
                LOAD();
                break;
            }
            for (;;) {
                this = state->lencode[BITS(state->lenbits)];
  417963:	45 89 e2             	mov    %r12d,%r10d
                if ((unsigned)(this.bits) <= bits) break;
                PULLBYTE();
  417966:	41 0f b6 5f ff       	movzbl -0x1(%r15),%ebx
  41796b:	48 d3 e3             	shl    %cl,%rbx
  41796e:	8d 4d 18             	lea    0x18(%rbp),%ecx
  417971:	49 01 dd             	add    %rbx,%r13
                inflate_fast(strm, out);
                LOAD();
                break;
            }
            for (;;) {
                this = state->lencode[BITS(state->lenbits)];
  417974:	45 21 ea             	and    %r13d,%r10d
  417977:	45 89 e9             	mov    %r13d,%r9d
  41797a:	4b 8d 2c 90          	lea    (%r8,%r10,4),%rbp
  41797e:	0f b6 55 01          	movzbl 0x1(%rbp),%edx
  417982:	0f b6 75 00          	movzbl 0x0(%rbp),%esi
  417986:	0f b7 7d 02          	movzwl 0x2(%rbp),%edi
                if ((unsigned)(this.bits) <= bits) break;
  41798a:	0f b6 c2             	movzbl %dl,%eax
  41798d:	39 c8                	cmp    %ecx,%eax
  41798f:	0f 86 bf 22 00 00    	jbe    419c54 <inflate+0x3604>
                PULLBYTE();
  417995:	45 85 f6             	test   %r14d,%r14d
  417998:	0f 85 0a ff ff ff    	jne    4178a8 <inflate+0x1258>
  41799e:	4c 89 db             	mov    %r11,%rbx
  4179a1:	44 89 f6             	mov    %r14d,%esi
  4179a4:	41 89 ca             	mov    %ecx,%r10d
  4179a7:	4d 89 eb             	mov    %r13,%r11
  4179aa:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  4179af:	e9 ec fb ff ff       	jmpq   4175a0 <inflate+0xf50>
  4179b4:	0f 1f 40 00          	nopl   0x0(%rax)
                state->head->text = (int)((hold >> 8) & 1);
            if (state->flags & 0x0200) CRC2(state->check, hold);
            INITBITS();
            state->mode = TIME;
        case TIME:
            NEEDBITS(32);
  4179b8:	83 fb 1f             	cmp    $0x1f,%ebx
  4179bb:	0f 87 98 21 00 00    	ja     419b59 <inflate+0x3509>
  4179c1:	45 85 f6             	test   %r14d,%r14d
  4179c4:	0f 84 ec 35 00 00    	je     41afb6 <inflate+0x4966>
  4179ca:	41 b9 1f 00 00 00    	mov    $0x1f,%r9d
  4179d0:	41 29 d9             	sub    %ebx,%r9d
  4179d3:	41 c1 e9 03          	shr    $0x3,%r9d
  4179d7:	41 83 e1 07          	and    $0x7,%r9d
  4179db:	0f 84 27 18 00 00    	je     419208 <inflate+0x2bb8>
  4179e1:	49 83 c7 01          	add    $0x1,%r15
  4179e5:	41 0f b6 77 ff       	movzbl -0x1(%r15),%esi
  4179ea:	89 d9                	mov    %ebx,%ecx
  4179ec:	83 c3 08             	add    $0x8,%ebx
  4179ef:	41 83 ee 01          	sub    $0x1,%r14d
  4179f3:	48 d3 e6             	shl    %cl,%rsi
  4179f6:	49 01 f5             	add    %rsi,%r13
  4179f9:	83 fb 1f             	cmp    $0x1f,%ebx
  4179fc:	0f 87 57 21 00 00    	ja     419b59 <inflate+0x3509>
  417a02:	45 85 f6             	test   %r14d,%r14d
  417a05:	0f 84 fd 35 00 00    	je     41b008 <inflate+0x49b8>
  417a0b:	41 83 f9 01          	cmp    $0x1,%r9d
  417a0f:	0f 84 f3 17 00 00    	je     419208 <inflate+0x2bb8>
  417a15:	41 83 f9 02          	cmp    $0x2,%r9d
  417a19:	0f 84 b2 00 00 00    	je     417ad1 <inflate+0x1481>
  417a1f:	41 83 f9 03          	cmp    $0x3,%r9d
  417a23:	0f 84 8a 00 00 00    	je     417ab3 <inflate+0x1463>
  417a29:	41 83 f9 04          	cmp    $0x4,%r9d
  417a2d:	74 66                	je     417a95 <inflate+0x1445>
  417a2f:	41 83 f9 05          	cmp    $0x5,%r9d
  417a33:	74 42                	je     417a77 <inflate+0x1427>
  417a35:	41 83 f9 06          	cmp    $0x6,%r9d
  417a39:	74 1e                	je     417a59 <inflate+0x1409>
  417a3b:	49 83 c7 01          	add    $0x1,%r15
  417a3f:	45 0f b6 47 ff       	movzbl -0x1(%r15),%r8d
  417a44:	89 d9                	mov    %ebx,%ecx
  417a46:	83 c3 08             	add    $0x8,%ebx
  417a49:	49 d3 e0             	shl    %cl,%r8
  417a4c:	4d 01 c5             	add    %r8,%r13
  417a4f:	41 83 ee 01          	sub    $0x1,%r14d
  417a53:	0f 84 f5 36 00 00    	je     41b14e <inflate+0x4afe>
  417a59:	49 83 c7 01          	add    $0x1,%r15
  417a5d:	41 0f b6 57 ff       	movzbl -0x1(%r15),%edx
  417a62:	89 d9                	mov    %ebx,%ecx
  417a64:	83 c3 08             	add    $0x8,%ebx
  417a67:	48 d3 e2             	shl    %cl,%rdx
  417a6a:	49 01 d5             	add    %rdx,%r13
  417a6d:	41 83 ee 01          	sub    $0x1,%r14d
  417a71:	0f 84 c1 36 00 00    	je     41b138 <inflate+0x4ae8>
  417a77:	49 83 c7 01          	add    $0x1,%r15
  417a7b:	41 0f b6 6f ff       	movzbl -0x1(%r15),%ebp
  417a80:	89 d9                	mov    %ebx,%ecx
  417a82:	83 c3 08             	add    $0x8,%ebx
  417a85:	48 d3 e5             	shl    %cl,%rbp
  417a88:	49 01 ed             	add    %rbp,%r13
  417a8b:	41 83 ee 01          	sub    $0x1,%r14d
  417a8f:	0f 84 e5 36 00 00    	je     41b17a <inflate+0x4b2a>
  417a95:	49 83 c7 01          	add    $0x1,%r15
  417a99:	41 0f b6 7f ff       	movzbl -0x1(%r15),%edi
  417a9e:	89 d9                	mov    %ebx,%ecx
  417aa0:	83 c3 08             	add    $0x8,%ebx
  417aa3:	48 d3 e7             	shl    %cl,%rdi
  417aa6:	49 01 fd             	add    %rdi,%r13
  417aa9:	41 83 ee 01          	sub    $0x1,%r14d
  417aad:	0f 84 dd 36 00 00    	je     41b190 <inflate+0x4b40>
  417ab3:	49 83 c7 01          	add    $0x1,%r15
  417ab7:	41 0f b6 47 ff       	movzbl -0x1(%r15),%eax
  417abc:	89 d9                	mov    %ebx,%ecx
  417abe:	83 c3 08             	add    $0x8,%ebx
  417ac1:	48 d3 e0             	shl    %cl,%rax
  417ac4:	49 01 c5             	add    %rax,%r13
  417ac7:	41 83 ee 01          	sub    $0x1,%r14d
  417acb:	0f 84 69 37 00 00    	je     41b23a <inflate+0x4bea>
  417ad1:	49 83 c7 01          	add    $0x1,%r15
  417ad5:	45 0f b6 57 ff       	movzbl -0x1(%r15),%r10d
  417ada:	89 d9                	mov    %ebx,%ecx
  417adc:	83 c3 08             	add    $0x8,%ebx
  417adf:	49 d3 e2             	shl    %cl,%r10
  417ae2:	4d 01 d5             	add    %r10,%r13
  417ae5:	41 83 ee 01          	sub    $0x1,%r14d
  417ae9:	0f 85 19 17 00 00    	jne    419208 <inflate+0x2bb8>
  417aef:	41 89 da             	mov    %ebx,%r10d
  417af2:	44 89 f6             	mov    %r14d,%esi
  417af5:	4c 89 db             	mov    %r11,%rbx
  417af8:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  417afd:	4d 89 eb             	mov    %r13,%r11
  417b00:	e9 9b fa ff ff       	jmpq   4175a0 <inflate+0xf50>
  417b05:	0f 1f 00             	nopl   (%rax)
                state->mode = BAD;
            }
            DROPBITS(2);
            break;
        case STORED:
            BYTEBITS();                         /* go to byte boundary */
  417b08:	89 d9                	mov    %ebx,%ecx
  417b0a:	83 e3 f8             	and    $0xfffffff8,%ebx
  417b0d:	83 e1 07             	and    $0x7,%ecx
  417b10:	49 d3 ed             	shr    %cl,%r13
            NEEDBITS(32);
  417b13:	83 fb 1f             	cmp    $0x1f,%ebx
  417b16:	0f 87 92 34 00 00    	ja     41afae <inflate+0x495e>
  417b1c:	45 85 f6             	test   %r14d,%r14d
  417b1f:	0f 84 3a 35 00 00    	je     41b05f <inflate+0x4a0f>
  417b25:	45 0f b6 0f          	movzbl (%r15),%r9d
  417b29:	89 d9                	mov    %ebx,%ecx
  417b2b:	45 8d 66 ff          	lea    -0x1(%r14),%r12d
  417b2f:	49 8d 6f 01          	lea    0x1(%r15),%rbp
  417b33:	49 d3 e1             	shl    %cl,%r9
  417b36:	8d 4b 08             	lea    0x8(%rbx),%ecx
  417b39:	4d 01 cd             	add    %r9,%r13
  417b3c:	83 f9 1f             	cmp    $0x1f,%ecx
  417b3f:	0f 87 0b 2a 00 00    	ja     41a550 <inflate+0x3f00>
  417b45:	45 85 e4             	test   %r12d,%r12d
  417b48:	0f 84 14 2a 00 00    	je     41a562 <inflate+0x3f12>
  417b4e:	41 0f b6 47 01       	movzbl 0x1(%r15),%eax
  417b53:	45 8d 66 fe          	lea    -0x2(%r14),%r12d
  417b57:	49 8d 6f 02          	lea    0x2(%r15),%rbp
  417b5b:	48 d3 e0             	shl    %cl,%rax
  417b5e:	8d 4b 10             	lea    0x10(%rbx),%ecx
  417b61:	49 01 c5             	add    %rax,%r13
  417b64:	83 f9 1f             	cmp    $0x1f,%ecx
  417b67:	0f 87 e3 29 00 00    	ja     41a550 <inflate+0x3f00>
  417b6d:	45 85 e4             	test   %r12d,%r12d
  417b70:	0f 84 ec 29 00 00    	je     41a562 <inflate+0x3f12>
  417b76:	41 0f b6 57 02       	movzbl 0x2(%r15),%edx
  417b7b:	45 8d 66 fd          	lea    -0x3(%r14),%r12d
  417b7f:	49 8d 6f 03          	lea    0x3(%r15),%rbp
  417b83:	48 d3 e2             	shl    %cl,%rdx
  417b86:	8d 4b 18             	lea    0x18(%rbx),%ecx
  417b89:	49 01 d5             	add    %rdx,%r13
  417b8c:	83 f9 1f             	cmp    $0x1f,%ecx
  417b8f:	0f 87 bb 29 00 00    	ja     41a550 <inflate+0x3f00>
  417b95:	45 85 e4             	test   %r12d,%r12d
  417b98:	0f 84 c4 29 00 00    	je     41a562 <inflate+0x3f12>
  417b9e:	41 0f b6 77 03       	movzbl 0x3(%r15),%esi
  417ba3:	49 8d 6f 04          	lea    0x4(%r15),%rbp
  417ba7:	41 83 ee 04          	sub    $0x4,%r14d
  417bab:	83 c3 20             	add    $0x20,%ebx
  417bae:	48 d3 e6             	shl    %cl,%rsi
  417bb1:	49 01 f5             	add    %rsi,%r13
            if ((hold & 0xffff) != ((hold >> 16) ^ 0xffff)) {
  417bb4:	4c 89 ef             	mov    %r13,%rdi
  417bb7:	45 0f b7 c5          	movzwl %r13w,%r8d
  417bbb:	48 c1 ef 10          	shr    $0x10,%rdi
  417bbf:	48 81 f7 ff ff 00 00 	xor    $0xffff,%rdi
  417bc6:	49 39 f8             	cmp    %rdi,%r8
  417bc9:	0f 84 7d 1b 00 00    	je     41974c <inflate+0x30fc>
                strm->msg = (char *)"invalid stored block lengths";
  417bcf:	4c 8b 7c 24 20       	mov    0x20(%rsp),%r15
                state->mode = BAD;
                break;
  417bd4:	41 bc 1b 00 00 00    	mov    $0x1b,%r12d
            break;
        case STORED:
            BYTEBITS();                         /* go to byte boundary */
            NEEDBITS(32);
            if ((hold & 0xffff) != ((hold >> 16) ^ 0xffff)) {
                strm->msg = (char *)"invalid stored block lengths";
  417bda:	49 c7 47 30 16 93 43 	movq   $0x439316,0x30(%r15)
  417be1:	00 
                state->mode = BAD;
  417be2:	41 c7 03 1b 00 00 00 	movl   $0x1b,(%r11)
                break;
  417be9:	49 89 ef             	mov    %rbp,%r15
  417bec:	e9 2c eb ff ff       	jmpq   41671d <inflate+0xcd>
  417bf1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  417bf8:	45 8b 53 54          	mov    0x54(%r11),%r10d
                    state->length));
            INITBITS();
            state->mode = COPY;
        case COPY:
            copy = state->length;
            if (copy) {
  417bfc:	45 85 d2             	test   %r10d,%r10d
  417bff:	0f 84 9b 1a 00 00    	je     4196a0 <inflate+0x3050>
  417c05:	8b 6c 24 10          	mov    0x10(%rsp),%ebp
  417c09:	45 39 d6             	cmp    %r10d,%r14d
  417c0c:	45 0f 46 d6          	cmovbe %r14d,%r10d
  417c10:	41 39 ea             	cmp    %ebp,%r10d
  417c13:	44 0f 47 d5          	cmova  %ebp,%r10d
                if (copy > have) copy = have;
                if (copy > left) copy = left;
                if (copy == 0) goto inf_leave;
  417c17:	45 85 d2             	test   %r10d,%r10d
  417c1a:	44 89 d5             	mov    %r10d,%ebp
  417c1d:	0f 84 ba 3b 00 00    	je     41b7dd <inflate+0x518d>
  417c23:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
                zmemcpy(put, next, copy);
  417c28:	45 89 d4             	mov    %r10d,%r12d
  417c2b:	4c 89 fe             	mov    %r15,%rsi
  417c2e:	4c 89 e2             	mov    %r12,%rdx
  417c31:	4c 89 5c 24 48       	mov    %r11,0x48(%rsp)
                have -= copy;
                next += copy;
  417c36:	4d 01 e7             	add    %r12,%r15
            if (copy) {
                if (copy > have) copy = have;
                if (copy > left) copy = left;
                if (copy == 0) goto inf_leave;
                zmemcpy(put, next, copy);
                have -= copy;
  417c39:	41 29 ee             	sub    %ebp,%r14d
  417c3c:	e8 af f3 fe ff       	callq  406ff0 <memcpy@plt>
                next += copy;
                left -= copy;
                put += copy;
                state->length -= copy;
  417c41:	4c 8b 5c 24 48       	mov    0x48(%rsp),%r11
                if (copy == 0) goto inf_leave;
                zmemcpy(put, next, copy);
                have -= copy;
                next += copy;
                left -= copy;
                put += copy;
  417c46:	4c 01 64 24 08       	add    %r12,0x8(%rsp)
                if (copy > left) copy = left;
                if (copy == 0) goto inf_leave;
                zmemcpy(put, next, copy);
                have -= copy;
                next += copy;
                left -= copy;
  417c4b:	29 6c 24 10          	sub    %ebp,0x10(%rsp)
                put += copy;
                state->length -= copy;
  417c4f:	41 29 6b 54          	sub    %ebp,0x54(%r11)
  417c53:	45 8b 23             	mov    (%r11),%r12d
                break;
  417c56:	e9 b8 ea ff ff       	jmpq   416713 <inflate+0xc3>
  417c5b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
            }
            Tracev((stderr, "inflate:       stored end\n"));
            state->mode = TYPE;
            break;
        case TABLE:
            NEEDBITS(14);
  417c60:	83 fb 0d             	cmp    $0xd,%ebx
  417c63:	0f 87 63 33 00 00    	ja     41afcc <inflate+0x497c>
  417c69:	45 85 f6             	test   %r14d,%r14d
  417c6c:	0f 84 39 34 00 00    	je     41b0ab <inflate+0x4a5b>
  417c72:	41 0f b6 07          	movzbl (%r15),%eax
  417c76:	89 d9                	mov    %ebx,%ecx
  417c78:	45 8d 56 ff          	lea    -0x1(%r14),%r10d
  417c7c:	49 8d 6f 01          	lea    0x1(%r15),%rbp
  417c80:	48 d3 e0             	shl    %cl,%rax
  417c83:	8d 4b 08             	lea    0x8(%rbx),%ecx
  417c86:	49 01 c5             	add    %rax,%r13
  417c89:	83 f9 0d             	cmp    $0xd,%ecx
  417c8c:	0f 87 0f 34 00 00    	ja     41b0a1 <inflate+0x4a51>
  417c92:	45 85 d2             	test   %r10d,%r10d
  417c95:	0f 84 46 1f 00 00    	je     419be1 <inflate+0x3591>
  417c9b:	49 8d 6f 02          	lea    0x2(%r15),%rbp
  417c9f:	45 0f b6 7f 01       	movzbl 0x1(%r15),%r15d
  417ca4:	41 83 ee 02          	sub    $0x2,%r14d
  417ca8:	83 c3 10             	add    $0x10,%ebx
  417cab:	49 d3 e7             	shl    %cl,%r15
  417cae:	4d 01 fd             	add    %r15,%r13
            state->nlen = BITS(5) + 257;
            DROPBITS(5);
  417cb1:	4d 89 ec             	mov    %r13,%r12
            state->ndist = BITS(5) + 1;
            DROPBITS(5);
  417cb4:	4d 89 e9             	mov    %r13,%r9
            Tracev((stderr, "inflate:       stored end\n"));
            state->mode = TYPE;
            break;
        case TABLE:
            NEEDBITS(14);
            state->nlen = BITS(5) + 257;
  417cb7:	45 89 e8             	mov    %r13d,%r8d
            DROPBITS(5);
  417cba:	49 c1 ec 05          	shr    $0x5,%r12
            state->ndist = BITS(5) + 1;
            DROPBITS(5);
  417cbe:	49 c1 e9 0a          	shr    $0xa,%r9
            Tracev((stderr, "inflate:       stored end\n"));
            state->mode = TYPE;
            break;
        case TABLE:
            NEEDBITS(14);
            state->nlen = BITS(5) + 257;
  417cc2:	41 83 e0 1f          	and    $0x1f,%r8d
            DROPBITS(5);
            state->ndist = BITS(5) + 1;
  417cc6:	41 83 e4 1f          	and    $0x1f,%r12d
            DROPBITS(5);
            state->ncode = BITS(4) + 4;
  417cca:	41 83 e1 0f          	and    $0xf,%r9d
            Tracev((stderr, "inflate:       stored end\n"));
            state->mode = TYPE;
            break;
        case TABLE:
            NEEDBITS(14);
            state->nlen = BITS(5) + 257;
  417cce:	41 81 c0 01 01 00 00 	add    $0x101,%r8d
            DROPBITS(5);
            state->ndist = BITS(5) + 1;
  417cd5:	41 83 c4 01          	add    $0x1,%r12d
            DROPBITS(5);
            state->ncode = BITS(4) + 4;
  417cd9:	41 83 c1 04          	add    $0x4,%r9d
            DROPBITS(4);
  417cdd:	49 c1 ed 0e          	shr    $0xe,%r13
  417ce1:	83 eb 0e             	sub    $0xe,%ebx
#ifndef PKZIP_BUG_WORKAROUND
            if (state->nlen > 286 || state->ndist > 30) {
  417ce4:	41 83 fc 1e          	cmp    $0x1e,%r12d
            Tracev((stderr, "inflate:       stored end\n"));
            state->mode = TYPE;
            break;
        case TABLE:
            NEEDBITS(14);
            state->nlen = BITS(5) + 257;
  417ce8:	45 89 43 7c          	mov    %r8d,0x7c(%r11)
            DROPBITS(5);
            state->ndist = BITS(5) + 1;
  417cec:	45 89 a3 80 00 00 00 	mov    %r12d,0x80(%r11)
            DROPBITS(5);
            state->ncode = BITS(4) + 4;
  417cf3:	45 89 4b 78          	mov    %r9d,0x78(%r11)
            DROPBITS(4);
#ifndef PKZIP_BUG_WORKAROUND
            if (state->nlen > 286 || state->ndist > 30) {
  417cf7:	0f 87 a2 1a 00 00    	ja     41979f <inflate+0x314f>
  417cfd:	41 81 f8 1e 01 00 00 	cmp    $0x11e,%r8d
  417d04:	0f 87 95 1a 00 00    	ja     41979f <inflate+0x314f>
                state->mode = BAD;
                break;
            }
#endif
            Tracev((stderr, "inflate:       table sizes ok\n"));
            state->have = 0;
  417d0a:	41 c7 83 84 00 00 00 	movl   $0x0,0x84(%r11)
  417d11:	00 00 00 00 
            state->mode = LENLENS;
  417d15:	41 c7 03 10 00 00 00 	movl   $0x10,(%r11)
  417d1c:	49 89 ef             	mov    %rbp,%r15
  417d1f:	45 31 d2             	xor    %r10d,%r10d
  417d22:	eb 18                	jmp    417d3c <inflate+0x16ec>
  417d24:	0f 1f 40 00          	nopl   0x0(%rax)
  417d28:	45 8b 93 84 00 00 00 	mov    0x84(%r11),%r10d
  417d2f:	45 8b 4b 78          	mov    0x78(%r11),%r9d
        case LENLENS:
            while (state->have < state->ncode) {
  417d33:	45 39 d1             	cmp    %r10d,%r9d
  417d36:	0f 86 ff 1a 00 00    	jbe    41983b <inflate+0x31eb>
  417d3c:	44 89 d6             	mov    %r10d,%esi
  417d3f:	f7 d6                	not    %esi
  417d41:	44 01 ce             	add    %r9d,%esi
  417d44:	83 e6 03             	and    $0x3,%esi
  417d47:	0f 84 b3 1e 00 00    	je     419c00 <inflate+0x35b0>
                NEEDBITS(3);
  417d4d:	83 fb 02             	cmp    $0x2,%ebx
  417d50:	77 20                	ja     417d72 <inflate+0x1722>
  417d52:	45 85 f6             	test   %r14d,%r14d
  417d55:	0f 84 11 32 00 00    	je     41af6c <inflate+0x491c>
  417d5b:	41 0f b6 3f          	movzbl (%r15),%edi
  417d5f:	89 d9                	mov    %ebx,%ecx
  417d61:	41 83 ee 01          	sub    $0x1,%r14d
  417d65:	83 c3 08             	add    $0x8,%ebx
  417d68:	49 83 c7 01          	add    $0x1,%r15
  417d6c:	48 d3 e7             	shl    %cl,%rdi
  417d6f:	49 01 fd             	add    %rdi,%r13
                state->lens[order[state->have++]] = (unsigned short)BITS(3);
  417d72:	43 0f b7 94 12 c0 9d 	movzwl 0x439dc0(%r10,%r10,1),%edx
  417d79:	43 00 
  417d7b:	41 8d 6a 01          	lea    0x1(%r10),%ebp
  417d7f:	45 89 ea             	mov    %r13d,%r10d
  417d82:	41 83 e2 07          	and    $0x7,%r10d
                DROPBITS(3);
  417d86:	49 c1 ed 03          	shr    $0x3,%r13
  417d8a:	83 eb 03             	sub    $0x3,%ebx
#endif
            Tracev((stderr, "inflate:       table sizes ok\n"));
            state->have = 0;
            state->mode = LENLENS;
        case LENLENS:
            while (state->have < state->ncode) {
  417d8d:	44 39 cd             	cmp    %r9d,%ebp
                NEEDBITS(3);
                state->lens[order[state->have++]] = (unsigned short)BITS(3);
  417d90:	41 89 ab 84 00 00 00 	mov    %ebp,0x84(%r11)
  417d97:	66 45 89 94 53 90 00 	mov    %r10w,0x90(%r11,%rdx,2)
  417d9e:	00 00 
#endif
            Tracev((stderr, "inflate:       table sizes ok\n"));
            state->have = 0;
            state->mode = LENLENS;
        case LENLENS:
            while (state->have < state->ncode) {
  417da0:	0f 83 92 1a 00 00    	jae    419838 <inflate+0x31e8>
  417da6:	83 fe 01             	cmp    $0x1,%esi
  417da9:	41 89 ea             	mov    %ebp,%r10d
  417dac:	0f 84 4e 1e 00 00    	je     419c00 <inflate+0x35b0>
  417db2:	83 fe 02             	cmp    $0x2,%esi
  417db5:	74 50                	je     417e07 <inflate+0x17b7>
                NEEDBITS(3);
  417db7:	83 fb 02             	cmp    $0x2,%ebx
  417dba:	77 20                	ja     417ddc <inflate+0x178c>
  417dbc:	45 85 f6             	test   %r14d,%r14d
  417dbf:	0f 84 b0 36 00 00    	je     41b475 <inflate+0x4e25>
  417dc5:	41 0f b6 07          	movzbl (%r15),%eax
  417dc9:	89 d9                	mov    %ebx,%ecx
  417dcb:	41 83 ee 01          	sub    $0x1,%r14d
  417dcf:	83 c3 08             	add    $0x8,%ebx
  417dd2:	49 83 c7 01          	add    $0x1,%r15
  417dd6:	48 d3 e0             	shl    %cl,%rax
  417dd9:	49 01 c5             	add    %rax,%r13
                state->lens[order[state->have++]] = (unsigned short)BITS(3);
  417ddc:	44 0f b7 84 2d c0 9d 	movzwl 0x439dc0(%rbp,%rbp,1),%r8d
  417de3:	43 00 
  417de5:	45 89 ec             	mov    %r13d,%r12d
  417de8:	44 8d 55 01          	lea    0x1(%rbp),%r10d
  417dec:	41 83 e4 07          	and    $0x7,%r12d
                DROPBITS(3);
  417df0:	49 c1 ed 03          	shr    $0x3,%r13
  417df4:	83 eb 03             	sub    $0x3,%ebx
            state->have = 0;
            state->mode = LENLENS;
        case LENLENS:
            while (state->have < state->ncode) {
                NEEDBITS(3);
                state->lens[order[state->have++]] = (unsigned short)BITS(3);
  417df7:	45 89 93 84 00 00 00 	mov    %r10d,0x84(%r11)
  417dfe:	66 47 89 a4 43 90 00 	mov    %r12w,0x90(%r11,%r8,2)
  417e05:	00 00 
            Tracev((stderr, "inflate:       table sizes ok\n"));
            state->have = 0;
            state->mode = LENLENS;
        case LENLENS:
            while (state->have < state->ncode) {
                NEEDBITS(3);
  417e07:	83 fb 02             	cmp    $0x2,%ebx
  417e0a:	77 20                	ja     417e2c <inflate+0x17dc>
  417e0c:	45 85 f6             	test   %r14d,%r14d
  417e0f:	0f 84 de 39 00 00    	je     41b7f3 <inflate+0x51a3>
  417e15:	41 0f b6 37          	movzbl (%r15),%esi
  417e19:	89 d9                	mov    %ebx,%ecx
  417e1b:	41 83 ee 01          	sub    $0x1,%r14d
  417e1f:	83 c3 08             	add    $0x8,%ebx
  417e22:	49 83 c7 01          	add    $0x1,%r15
  417e26:	48 d3 e6             	shl    %cl,%rsi
  417e29:	49 01 f5             	add    %rsi,%r13
                state->lens[order[state->have++]] = (unsigned short)BITS(3);
  417e2c:	43 0f b7 ac 12 c0 9d 	movzwl 0x439dc0(%r10,%r10,1),%ebp
  417e33:	43 00 
  417e35:	41 8d 7a 01          	lea    0x1(%r10),%edi
  417e39:	44 89 ea             	mov    %r13d,%edx
  417e3c:	83 e2 07             	and    $0x7,%edx
                DROPBITS(3);
  417e3f:	83 eb 03             	sub    $0x3,%ebx
  417e42:	49 c1 ed 03          	shr    $0x3,%r13
            state->have = 0;
            state->mode = LENLENS;
        case LENLENS:
            while (state->have < state->ncode) {
                NEEDBITS(3);
                state->lens[order[state->have++]] = (unsigned short)BITS(3);
  417e46:	41 89 bb 84 00 00 00 	mov    %edi,0x84(%r11)
  417e4d:	41 89 fa             	mov    %edi,%r10d
  417e50:	89 d9                	mov    %ebx,%ecx
  417e52:	66 41 89 94 6b 90 00 	mov    %dx,0x90(%r11,%rbp,2)
  417e59:	00 00 
            Tracev((stderr, "inflate:       table sizes ok\n"));
            state->have = 0;
            state->mode = LENLENS;
        case LENLENS:
            while (state->have < state->ncode) {
                NEEDBITS(3);
  417e5b:	83 f9 02             	cmp    $0x2,%ecx
  417e5e:	77 1e                	ja     417e7e <inflate+0x182e>
  417e60:	45 85 f6             	test   %r14d,%r14d
  417e63:	0f 84 4a 3a 00 00    	je     41b8b3 <inflate+0x5263>
  417e69:	41 0f b6 1f          	movzbl (%r15),%ebx
  417e6d:	41 83 ee 01          	sub    $0x1,%r14d
  417e71:	49 83 c7 01          	add    $0x1,%r15
  417e75:	48 d3 e3             	shl    %cl,%rbx
  417e78:	83 c1 08             	add    $0x8,%ecx
  417e7b:	49 01 dd             	add    %rbx,%r13
                state->lens[order[state->have++]] = (unsigned short)BITS(3);
  417e7e:	41 8d 6a 01          	lea    0x1(%r10),%ebp
  417e82:	47 0f b7 94 12 c0 9d 	movzwl 0x439dc0(%r10,%r10,1),%r10d
  417e89:	43 00 
  417e8b:	44 89 e8             	mov    %r13d,%eax
  417e8e:	83 e0 07             	and    $0x7,%eax
                DROPBITS(3);
  417e91:	49 c1 ed 03          	shr    $0x3,%r13
  417e95:	83 e9 03             	sub    $0x3,%ecx
#endif
            Tracev((stderr, "inflate:       table sizes ok\n"));
            state->have = 0;
            state->mode = LENLENS;
        case LENLENS:
            while (state->have < state->ncode) {
  417e98:	44 39 cd             	cmp    %r9d,%ebp
                NEEDBITS(3);
                state->lens[order[state->have++]] = (unsigned short)BITS(3);
  417e9b:	41 89 ab 84 00 00 00 	mov    %ebp,0x84(%r11)
  417ea2:	66 43 89 84 53 90 00 	mov    %ax,0x90(%r11,%r10,2)
  417ea9:	00 00 
#endif
            Tracev((stderr, "inflate:       table sizes ok\n"));
            state->have = 0;
            state->mode = LENLENS;
        case LENLENS:
            while (state->have < state->ncode) {
  417eab:	0f 83 85 19 00 00    	jae    419836 <inflate+0x31e6>
                NEEDBITS(3);
  417eb1:	83 f9 02             	cmp    $0x2,%ecx
  417eb4:	77 1e                	ja     417ed4 <inflate+0x1884>
  417eb6:	45 85 f6             	test   %r14d,%r14d
  417eb9:	0f 84 a6 3c 00 00    	je     41bb65 <inflate+0x5515>
  417ebf:	41 0f b6 1f          	movzbl (%r15),%ebx
  417ec3:	41 83 ee 01          	sub    $0x1,%r14d
  417ec7:	49 83 c7 01          	add    $0x1,%r15
  417ecb:	48 d3 e3             	shl    %cl,%rbx
  417ece:	83 c1 08             	add    $0x8,%ecx
  417ed1:	49 01 dd             	add    %rbx,%r13
                state->lens[order[state->have++]] = (unsigned short)BITS(3);
  417ed4:	89 ea                	mov    %ebp,%edx
  417ed6:	45 89 e8             	mov    %r13d,%r8d
  417ed9:	44 8d 65 01          	lea    0x1(%rbp),%r12d
  417edd:	0f b7 b4 12 c0 9d 43 	movzwl 0x439dc0(%rdx,%rdx,1),%esi
  417ee4:	00 
                DROPBITS(3);
  417ee5:	83 e9 03             	sub    $0x3,%ecx
            state->have = 0;
            state->mode = LENLENS;
        case LENLENS:
            while (state->have < state->ncode) {
                NEEDBITS(3);
                state->lens[order[state->have++]] = (unsigned short)BITS(3);
  417ee8:	41 83 e0 07          	and    $0x7,%r8d
                DROPBITS(3);
  417eec:	49 c1 ed 03          	shr    $0x3,%r13
            Tracev((stderr, "inflate:       table sizes ok\n"));
            state->have = 0;
            state->mode = LENLENS;
        case LENLENS:
            while (state->have < state->ncode) {
                NEEDBITS(3);
  417ef0:	83 f9 02             	cmp    $0x2,%ecx
                state->lens[order[state->have++]] = (unsigned short)BITS(3);
  417ef3:	45 89 a3 84 00 00 00 	mov    %r12d,0x84(%r11)
  417efa:	66 45 89 84 73 90 00 	mov    %r8w,0x90(%r11,%rsi,2)
  417f01:	00 00 
            Tracev((stderr, "inflate:       table sizes ok\n"));
            state->have = 0;
            state->mode = LENLENS;
        case LENLENS:
            while (state->have < state->ncode) {
                NEEDBITS(3);
  417f03:	77 1e                	ja     417f23 <inflate+0x18d3>
  417f05:	45 85 f6             	test   %r14d,%r14d
  417f08:	0f 84 41 3c 00 00    	je     41bb4f <inflate+0x54ff>
  417f0e:	41 0f b6 3f          	movzbl (%r15),%edi
  417f12:	41 83 ee 01          	sub    $0x1,%r14d
  417f16:	49 83 c7 01          	add    $0x1,%r15
  417f1a:	48 d3 e7             	shl    %cl,%rdi
  417f1d:	83 c1 08             	add    $0x8,%ecx
  417f20:	49 01 fd             	add    %rdi,%r13
                state->lens[order[state->have++]] = (unsigned short)BITS(3);
  417f23:	43 0f b7 84 24 c0 9d 	movzwl 0x439dc0(%r12,%r12,1),%eax
  417f2a:	43 00 
  417f2c:	45 8d 54 24 01       	lea    0x1(%r12),%r10d
  417f31:	44 89 eb             	mov    %r13d,%ebx
                DROPBITS(3);
  417f34:	83 e9 03             	sub    $0x3,%ecx
            state->have = 0;
            state->mode = LENLENS;
        case LENLENS:
            while (state->have < state->ncode) {
                NEEDBITS(3);
                state->lens[order[state->have++]] = (unsigned short)BITS(3);
  417f37:	83 e3 07             	and    $0x7,%ebx
                DROPBITS(3);
  417f3a:	49 c1 ed 03          	shr    $0x3,%r13
            Tracev((stderr, "inflate:       table sizes ok\n"));
            state->have = 0;
            state->mode = LENLENS;
        case LENLENS:
            while (state->have < state->ncode) {
                NEEDBITS(3);
  417f3e:	83 f9 02             	cmp    $0x2,%ecx
                state->lens[order[state->have++]] = (unsigned short)BITS(3);
  417f41:	45 89 93 84 00 00 00 	mov    %r10d,0x84(%r11)
  417f48:	44 8d 65 02          	lea    0x2(%rbp),%r12d
  417f4c:	66 41 89 9c 43 90 00 	mov    %bx,0x90(%r11,%rax,2)
  417f53:	00 00 
            Tracev((stderr, "inflate:       table sizes ok\n"));
            state->have = 0;
            state->mode = LENLENS;
        case LENLENS:
            while (state->have < state->ncode) {
                NEEDBITS(3);
  417f55:	77 1e                	ja     417f75 <inflate+0x1925>
  417f57:	45 85 f6             	test   %r14d,%r14d
  417f5a:	0f 84 9e 3d 00 00    	je     41bcfe <inflate+0x56ae>
  417f60:	41 0f b6 17          	movzbl (%r15),%edx
  417f64:	41 83 ee 01          	sub    $0x1,%r14d
  417f68:	49 83 c7 01          	add    $0x1,%r15
  417f6c:	48 d3 e2             	shl    %cl,%rdx
  417f6f:	83 c1 08             	add    $0x8,%ecx
  417f72:	49 01 d5             	add    %rdx,%r13
                state->lens[order[state->have++]] = (unsigned short)BITS(3);
  417f75:	47 0f b7 84 24 c0 9d 	movzwl 0x439dc0(%r12,%r12,1),%r8d
  417f7c:	43 00 
  417f7e:	44 89 ef             	mov    %r13d,%edi
  417f81:	41 8d 74 24 01       	lea    0x1(%r12),%esi
  417f86:	83 e7 07             	and    $0x7,%edi
                DROPBITS(3);
  417f89:	49 c1 ed 03          	shr    $0x3,%r13
  417f8d:	83 e9 03             	sub    $0x3,%ecx
            state->have = 0;
            state->mode = LENLENS;
        case LENLENS:
            while (state->have < state->ncode) {
                NEEDBITS(3);
                state->lens[order[state->have++]] = (unsigned short)BITS(3);
  417f90:	41 89 b3 84 00 00 00 	mov    %esi,0x84(%r11)
  417f97:	44 8d 55 03          	lea    0x3(%rbp),%r10d
  417f9b:	66 43 89 bc 43 90 00 	mov    %di,0x90(%r11,%r8,2)
  417fa2:	00 00 
  417fa4:	e9 b2 fe ff ff       	jmpq   417e5b <inflate+0x180b>
  417fa9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  417fb0:	41 8b 73 5c          	mov    0x5c(%r11),%esi
                break;
            }
            state->extra = (unsigned)(this.op) & 15;
            state->mode = LENEXT;
        case LENEXT:
            if (state->extra) {
  417fb4:	85 f6                	test   %esi,%esi
  417fb6:	0f 84 d5 eb ff ff    	je     416b91 <inflate+0x541>
                NEEDBITS(state->extra);
  417fbc:	39 f3                	cmp    %esi,%ebx
  417fbe:	0f 83 b2 eb ff ff    	jae    416b76 <inflate+0x526>
  417fc4:	45 85 f6             	test   %r14d,%r14d
  417fc7:	0f 84 2d 36 00 00    	je     41b5fa <inflate+0x4faa>
  417fcd:	41 89 d8             	mov    %ebx,%r8d
  417fd0:	41 f7 d0             	not    %r8d
  417fd3:	41 01 f0             	add    %esi,%r8d
  417fd6:	41 c1 e8 03          	shr    $0x3,%r8d
  417fda:	41 83 e0 07          	and    $0x7,%r8d
  417fde:	0f 84 0d 01 00 00    	je     4180f1 <inflate+0x1aa1>
  417fe4:	49 83 c7 01          	add    $0x1,%r15
  417fe8:	41 0f b6 7f ff       	movzbl -0x1(%r15),%edi
  417fed:	89 d9                	mov    %ebx,%ecx
  417fef:	83 c3 08             	add    $0x8,%ebx
  417ff2:	41 83 ee 01          	sub    $0x1,%r14d
  417ff6:	48 d3 e7             	shl    %cl,%rdi
  417ff9:	49 01 fd             	add    %rdi,%r13
  417ffc:	39 f3                	cmp    %esi,%ebx
  417ffe:	0f 83 72 eb ff ff    	jae    416b76 <inflate+0x526>
  418004:	45 85 f6             	test   %r14d,%r14d
  418007:	0f 84 65 36 00 00    	je     41b672 <inflate+0x5022>
  41800d:	41 83 f8 01          	cmp    $0x1,%r8d
  418011:	0f 84 da 00 00 00    	je     4180f1 <inflate+0x1aa1>
  418017:	41 83 f8 02          	cmp    $0x2,%r8d
  41801b:	0f 84 b2 00 00 00    	je     4180d3 <inflate+0x1a83>
  418021:	41 83 f8 03          	cmp    $0x3,%r8d
  418025:	0f 84 8a 00 00 00    	je     4180b5 <inflate+0x1a65>
  41802b:	41 83 f8 04          	cmp    $0x4,%r8d
  41802f:	74 66                	je     418097 <inflate+0x1a47>
  418031:	41 83 f8 05          	cmp    $0x5,%r8d
  418035:	74 42                	je     418079 <inflate+0x1a29>
  418037:	41 83 f8 06          	cmp    $0x6,%r8d
  41803b:	74 1e                	je     41805b <inflate+0x1a0b>
  41803d:	49 83 c7 01          	add    $0x1,%r15
  418041:	41 0f b6 47 ff       	movzbl -0x1(%r15),%eax
  418046:	89 d9                	mov    %ebx,%ecx
  418048:	83 c3 08             	add    $0x8,%ebx
  41804b:	48 d3 e0             	shl    %cl,%rax
  41804e:	49 01 c5             	add    %rax,%r13
  418051:	41 83 ee 01          	sub    $0x1,%r14d
  418055:	0f 84 59 36 00 00    	je     41b6b4 <inflate+0x5064>
  41805b:	49 83 c7 01          	add    $0x1,%r15
  41805f:	45 0f b6 67 ff       	movzbl -0x1(%r15),%r12d
  418064:	89 d9                	mov    %ebx,%ecx
  418066:	83 c3 08             	add    $0x8,%ebx
  418069:	49 d3 e4             	shl    %cl,%r12
  41806c:	4d 01 e5             	add    %r12,%r13
  41806f:	41 83 ee 01          	sub    $0x1,%r14d
  418073:	0f 84 e0 36 00 00    	je     41b759 <inflate+0x5109>
  418079:	49 83 c7 01          	add    $0x1,%r15
  41807d:	45 0f b6 57 ff       	movzbl -0x1(%r15),%r10d
  418082:	89 d9                	mov    %ebx,%ecx
  418084:	83 c3 08             	add    $0x8,%ebx
  418087:	49 d3 e2             	shl    %cl,%r10
  41808a:	4d 01 d5             	add    %r10,%r13
  41808d:	41 83 ee 01          	sub    $0x1,%r14d
  418091:	0f 84 f1 35 00 00    	je     41b688 <inflate+0x5038>
  418097:	49 83 c7 01          	add    $0x1,%r15
  41809b:	45 0f b6 4f ff       	movzbl -0x1(%r15),%r9d
  4180a0:	89 d9                	mov    %ebx,%ecx
  4180a2:	83 c3 08             	add    $0x8,%ebx
  4180a5:	49 d3 e1             	shl    %cl,%r9
  4180a8:	4d 01 cd             	add    %r9,%r13
  4180ab:	41 83 ee 01          	sub    $0x1,%r14d
  4180af:	0f 84 e9 35 00 00    	je     41b69e <inflate+0x504e>
  4180b5:	49 83 c7 01          	add    $0x1,%r15
  4180b9:	41 0f b6 57 ff       	movzbl -0x1(%r15),%edx
  4180be:	89 d9                	mov    %ebx,%ecx
  4180c0:	83 c3 08             	add    $0x8,%ebx
  4180c3:	48 d3 e2             	shl    %cl,%rdx
  4180c6:	49 01 d5             	add    %rdx,%r13
  4180c9:	41 83 ee 01          	sub    $0x1,%r14d
  4180cd:	0f 84 c8 36 00 00    	je     41b79b <inflate+0x514b>
  4180d3:	49 83 c7 01          	add    $0x1,%r15
  4180d7:	41 0f b6 6f ff       	movzbl -0x1(%r15),%ebp
  4180dc:	89 d9                	mov    %ebx,%ecx
  4180de:	83 c3 08             	add    $0x8,%ebx
  4180e1:	48 d3 e5             	shl    %cl,%rbp
  4180e4:	49 01 ed             	add    %rbp,%r13
  4180e7:	41 83 ee 01          	sub    $0x1,%r14d
  4180eb:	0f 84 de 19 00 00    	je     419acf <inflate+0x347f>
  4180f1:	89 d9                	mov    %ebx,%ecx
  4180f3:	49 8d 47 01          	lea    0x1(%r15),%rax
  4180f7:	44 0f b6 40 ff       	movzbl -0x1(%rax),%r8d
  4180fc:	8d 79 08             	lea    0x8(%rcx),%edi
  4180ff:	41 8d 5e ff          	lea    -0x1(%r14),%ebx
  418103:	49 89 c7             	mov    %rax,%r15
  418106:	41 89 de             	mov    %ebx,%r14d
  418109:	49 d3 e0             	shl    %cl,%r8
  41810c:	89 f9                	mov    %edi,%ecx
  41810e:	4d 01 c5             	add    %r8,%r13
  418111:	39 f7                	cmp    %esi,%edi
  418113:	0f 83 5b ea ff ff    	jae    416b74 <inflate+0x524>
  418119:	45 85 f6             	test   %r14d,%r14d
  41811c:	0f 84 0a 34 00 00    	je     41b52c <inflate+0x4edc>
  418122:	49 83 c7 01          	add    $0x1,%r15
  418126:	41 0f b6 6f ff       	movzbl -0x1(%r15),%ebp
  41812b:	48 d3 e5             	shl    %cl,%rbp
  41812e:	83 c1 08             	add    $0x8,%ecx
  418131:	49 01 ed             	add    %rbp,%r13
  418134:	41 83 ee 01          	sub    $0x1,%r14d
  418138:	0f 84 d8 33 00 00    	je     41b516 <inflate+0x4ec6>
  41813e:	4c 8d 78 02          	lea    0x2(%rax),%r15
  418142:	45 0f b6 47 ff       	movzbl -0x1(%r15),%r8d
  418147:	41 89 dc             	mov    %ebx,%r12d
  41814a:	49 d3 e0             	shl    %cl,%r8
  41814d:	8d 4f 10             	lea    0x10(%rdi),%ecx
  418150:	4d 01 c5             	add    %r8,%r13
  418153:	41 83 ec 02          	sub    $0x2,%r12d
  418157:	0f 84 fb 33 00 00    	je     41b558 <inflate+0x4f08>
  41815d:	4c 8d 78 03          	lea    0x3(%rax),%r15
  418161:	45 0f b6 57 ff       	movzbl -0x1(%r15),%r10d
  418166:	41 89 de             	mov    %ebx,%r14d
  418169:	49 d3 e2             	shl    %cl,%r10
  41816c:	8d 4f 18             	lea    0x18(%rdi),%ecx
  41816f:	4d 01 d5             	add    %r10,%r13
  418172:	41 83 ee 03          	sub    $0x3,%r14d
  418176:	0f 84 68 34 00 00    	je     41b5e4 <inflate+0x4f94>
  41817c:	4c 8d 78 04          	lea    0x4(%rax),%r15
  418180:	41 0f b6 57 ff       	movzbl -0x1(%r15),%edx
  418185:	41 89 d9             	mov    %ebx,%r9d
  418188:	48 d3 e2             	shl    %cl,%rdx
  41818b:	8d 4f 20             	lea    0x20(%rdi),%ecx
  41818e:	49 01 d5             	add    %rdx,%r13
  418191:	41 83 e9 04          	sub    $0x4,%r9d
  418195:	0f 84 33 34 00 00    	je     41b5ce <inflate+0x4f7e>
  41819b:	4c 8d 78 05          	lea    0x5(%rax),%r15
  41819f:	41 0f b6 6f ff       	movzbl -0x1(%r15),%ebp
  4181a4:	41 89 d8             	mov    %ebx,%r8d
  4181a7:	48 d3 e5             	shl    %cl,%rbp
  4181aa:	8d 4f 28             	lea    0x28(%rdi),%ecx
  4181ad:	49 01 ed             	add    %rbp,%r13
  4181b0:	41 83 e8 05          	sub    $0x5,%r8d
  4181b4:	0f 84 fe 33 00 00    	je     41b5b8 <inflate+0x4f68>
  4181ba:	4c 8d 78 06          	lea    0x6(%rax),%r15
  4181be:	45 0f b6 67 ff       	movzbl -0x1(%r15),%r12d
  4181c3:	41 89 de             	mov    %ebx,%r14d
  4181c6:	49 d3 e4             	shl    %cl,%r12
  4181c9:	8d 4f 30             	lea    0x30(%rdi),%ecx
  4181cc:	4d 01 e5             	add    %r12,%r13
  4181cf:	41 83 ee 06          	sub    $0x6,%r14d
  4181d3:	0f 84 ac 35 00 00    	je     41b785 <inflate+0x5135>
  4181d9:	4c 8d 78 07          	lea    0x7(%rax),%r15
  4181dd:	41 0f b6 47 ff       	movzbl -0x1(%r15),%eax
  4181e2:	48 d3 e0             	shl    %cl,%rax
  4181e5:	8d 4f 38             	lea    0x38(%rdi),%ecx
  4181e8:	49 01 c5             	add    %rax,%r13
  4181eb:	83 eb 07             	sub    $0x7,%ebx
  4181ee:	41 89 de             	mov    %ebx,%r14d
  4181f1:	0f 85 fc fe ff ff    	jne    4180f3 <inflate+0x1aa3>
  4181f7:	4c 89 db             	mov    %r11,%rbx
  4181fa:	44 89 f6             	mov    %r14d,%esi
  4181fd:	41 89 ca             	mov    %ecx,%r10d
  418200:	4d 89 eb             	mov    %r13,%r11
  418203:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  418208:	e9 93 f3 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41820d:	0f 1f 00             	nopl   (%rax)
                state->head->time = hold;
            if (state->flags & 0x0200) CRC4(state->check, hold);
            INITBITS();
            state->mode = OS;
        case OS:
            NEEDBITS(16);
  418210:	83 fb 0f             	cmp    $0xf,%ebx
  418213:	0f 87 68 13 00 00    	ja     419581 <inflate+0x2f31>
  418219:	45 85 f6             	test   %r14d,%r14d
  41821c:	0f 84 ea 2a 00 00    	je     41ad0c <inflate+0x46bc>
  418222:	bf 0f 00 00 00       	mov    $0xf,%edi
  418227:	29 df                	sub    %ebx,%edi
  418229:	c1 ef 03             	shr    $0x3,%edi
  41822c:	83 e7 07             	and    $0x7,%edi
  41822f:	0f 84 08 01 00 00    	je     41833d <inflate+0x1ced>
  418235:	49 83 c7 01          	add    $0x1,%r15
  418239:	41 0f b6 47 ff       	movzbl -0x1(%r15),%eax
  41823e:	89 d9                	mov    %ebx,%ecx
  418240:	83 c3 08             	add    $0x8,%ebx
  418243:	41 83 ee 01          	sub    $0x1,%r14d
  418247:	48 d3 e0             	shl    %cl,%rax
  41824a:	49 01 c5             	add    %rax,%r13
  41824d:	83 fb 0f             	cmp    $0xf,%ebx
  418250:	0f 87 2b 13 00 00    	ja     419581 <inflate+0x2f31>
  418256:	45 85 f6             	test   %r14d,%r14d
  418259:	0f 84 4b 2b 00 00    	je     41adaa <inflate+0x475a>
  41825f:	83 ff 01             	cmp    $0x1,%edi
  418262:	0f 84 d5 00 00 00    	je     41833d <inflate+0x1ced>
  418268:	83 ff 02             	cmp    $0x2,%edi
  41826b:	0f 84 ae 00 00 00    	je     41831f <inflate+0x1ccf>
  418271:	83 ff 03             	cmp    $0x3,%edi
  418274:	0f 84 87 00 00 00    	je     418301 <inflate+0x1cb1>
  41827a:	83 ff 04             	cmp    $0x4,%edi
  41827d:	74 64                	je     4182e3 <inflate+0x1c93>
  41827f:	83 ff 05             	cmp    $0x5,%edi
  418282:	74 41                	je     4182c5 <inflate+0x1c75>
  418284:	83 ff 06             	cmp    $0x6,%edi
  418287:	74 1e                	je     4182a7 <inflate+0x1c57>
  418289:	49 83 c7 01          	add    $0x1,%r15
  41828d:	45 0f b6 57 ff       	movzbl -0x1(%r15),%r10d
  418292:	89 d9                	mov    %ebx,%ecx
  418294:	83 c3 08             	add    $0x8,%ebx
  418297:	49 d3 e2             	shl    %cl,%r10
  41829a:	4d 01 d5             	add    %r10,%r13
  41829d:	41 83 ee 01          	sub    $0x1,%r14d
  4182a1:	0f 84 71 2b 00 00    	je     41ae18 <inflate+0x47c8>
  4182a7:	49 83 c7 01          	add    $0x1,%r15
  4182ab:	45 0f b6 67 ff       	movzbl -0x1(%r15),%r12d
  4182b0:	89 d9                	mov    %ebx,%ecx
  4182b2:	83 c3 08             	add    $0x8,%ebx
  4182b5:	49 d3 e4             	shl    %cl,%r12
  4182b8:	4d 01 e5             	add    %r12,%r13
  4182bb:	41 83 ee 01          	sub    $0x1,%r14d
  4182bf:	0f 84 95 2b 00 00    	je     41ae5a <inflate+0x480a>
  4182c5:	49 83 c7 01          	add    $0x1,%r15
  4182c9:	45 0f b6 4f ff       	movzbl -0x1(%r15),%r9d
  4182ce:	89 d9                	mov    %ebx,%ecx
  4182d0:	83 c3 08             	add    $0x8,%ebx
  4182d3:	49 d3 e1             	shl    %cl,%r9
  4182d6:	4d 01 cd             	add    %r9,%r13
  4182d9:	41 83 ee 01          	sub    $0x1,%r14d
  4182dd:	0f 84 61 2b 00 00    	je     41ae44 <inflate+0x47f4>
  4182e3:	49 83 c7 01          	add    $0x1,%r15
  4182e7:	41 0f b6 77 ff       	movzbl -0x1(%r15),%esi
  4182ec:	89 d9                	mov    %ebx,%ecx
  4182ee:	83 c3 08             	add    $0x8,%ebx
  4182f1:	48 d3 e6             	shl    %cl,%rsi
  4182f4:	49 01 f5             	add    %rsi,%r13
  4182f7:	41 83 ee 01          	sub    $0x1,%r14d
  4182fb:	0f 84 e2 2b 00 00    	je     41aee3 <inflate+0x4893>
  418301:	49 83 c7 01          	add    $0x1,%r15
  418305:	45 0f b6 47 ff       	movzbl -0x1(%r15),%r8d
  41830a:	89 d9                	mov    %ebx,%ecx
  41830c:	83 c3 08             	add    $0x8,%ebx
  41830f:	49 d3 e0             	shl    %cl,%r8
  418312:	4d 01 c5             	add    %r8,%r13
  418315:	41 83 ee 01          	sub    $0x1,%r14d
  418319:	0f 84 37 2c 00 00    	je     41af56 <inflate+0x4906>
  41831f:	49 83 c7 01          	add    $0x1,%r15
  418323:	41 0f b6 57 ff       	movzbl -0x1(%r15),%edx
  418328:	89 d9                	mov    %ebx,%ecx
  41832a:	83 c3 08             	add    $0x8,%ebx
  41832d:	48 d3 e2             	shl    %cl,%rdx
  418330:	49 01 d5             	add    %rdx,%r13
  418333:	41 83 ee 01          	sub    $0x1,%r14d
  418337:	0f 84 9a 14 00 00    	je     4197d7 <inflate+0x3187>
  41833d:	89 d9                	mov    %ebx,%ecx
  41833f:	49 8d 6f 01          	lea    0x1(%r15),%rbp
  418343:	0f b6 7d ff          	movzbl -0x1(%rbp),%edi
  418347:	8d 41 08             	lea    0x8(%rcx),%eax
  41834a:	41 8d 5e ff          	lea    -0x1(%r14),%ebx
  41834e:	49 89 ef             	mov    %rbp,%r15
  418351:	41 89 de             	mov    %ebx,%r14d
  418354:	48 d3 e7             	shl    %cl,%rdi
  418357:	89 c1                	mov    %eax,%ecx
  418359:	49 01 fd             	add    %rdi,%r13
  41835c:	83 f8 0f             	cmp    $0xf,%eax
  41835f:	0f 87 1c 12 00 00    	ja     419581 <inflate+0x2f31>
  418365:	45 85 f6             	test   %r14d,%r14d
  418368:	0f 84 46 29 00 00    	je     41acb4 <inflate+0x4664>
  41836e:	49 83 c7 01          	add    $0x1,%r15
  418372:	41 0f b6 57 ff       	movzbl -0x1(%r15),%edx
  418377:	48 d3 e2             	shl    %cl,%rdx
  41837a:	83 c1 08             	add    $0x8,%ecx
  41837d:	49 01 d5             	add    %rdx,%r13
  418380:	41 83 ee 01          	sub    $0x1,%r14d
  418384:	0f 84 56 29 00 00    	je     41ace0 <inflate+0x4690>
  41838a:	4c 8d 7d 02          	lea    0x2(%rbp),%r15
  41838e:	41 0f b6 77 ff       	movzbl -0x1(%r15),%esi
  418393:	41 89 d8             	mov    %ebx,%r8d
  418396:	48 d3 e6             	shl    %cl,%rsi
  418399:	8d 48 10             	lea    0x10(%rax),%ecx
  41839c:	49 01 f5             	add    %rsi,%r13
  41839f:	41 83 e8 02          	sub    $0x2,%r8d
  4183a3:	0f 84 4d 29 00 00    	je     41acf6 <inflate+0x46a6>
  4183a9:	4c 8d 7d 03          	lea    0x3(%rbp),%r15
  4183ad:	41 0f b6 7f ff       	movzbl -0x1(%r15),%edi
  4183b2:	41 89 de             	mov    %ebx,%r14d
  4183b5:	48 d3 e7             	shl    %cl,%rdi
  4183b8:	8d 48 18             	lea    0x18(%rax),%ecx
  4183bb:	49 01 fd             	add    %rdi,%r13
  4183be:	41 83 ee 03          	sub    $0x3,%r14d
  4183c2:	0f 84 92 29 00 00    	je     41ad5a <inflate+0x470a>
  4183c8:	4c 8d 7d 04          	lea    0x4(%rbp),%r15
  4183cc:	45 0f b6 57 ff       	movzbl -0x1(%r15),%r10d
  4183d1:	41 89 d9             	mov    %ebx,%r9d
  4183d4:	49 d3 e2             	shl    %cl,%r10
  4183d7:	8d 48 20             	lea    0x20(%rax),%ecx
  4183da:	4d 01 d5             	add    %r10,%r13
  4183dd:	41 83 e9 04          	sub    $0x4,%r9d
  4183e1:	0f 84 ad 29 00 00    	je     41ad94 <inflate+0x4744>
  4183e7:	4c 8d 7d 05          	lea    0x5(%rbp),%r15
  4183eb:	45 0f b6 67 ff       	movzbl -0x1(%r15),%r12d
  4183f0:	89 da                	mov    %ebx,%edx
  4183f2:	49 d3 e4             	shl    %cl,%r12
  4183f5:	8d 48 28             	lea    0x28(%rax),%ecx
  4183f8:	4d 01 e5             	add    %r12,%r13
  4183fb:	83 ea 05             	sub    $0x5,%edx
  4183fe:	0f 84 7b 29 00 00    	je     41ad7f <inflate+0x472f>
  418404:	4c 8d 7d 06          	lea    0x6(%rbp),%r15
  418408:	41 0f b6 77 ff       	movzbl -0x1(%r15),%esi
  41840d:	41 89 d8             	mov    %ebx,%r8d
  418410:	48 d3 e6             	shl    %cl,%rsi
  418413:	8d 48 30             	lea    0x30(%rax),%ecx
  418416:	49 01 f5             	add    %rsi,%r13
  418419:	41 83 e8 06          	sub    $0x6,%r8d
  41841d:	0f 84 df 29 00 00    	je     41ae02 <inflate+0x47b2>
  418423:	4c 8d 7d 07          	lea    0x7(%rbp),%r15
  418427:	41 0f b6 6f ff       	movzbl -0x1(%r15),%ebp
  41842c:	48 d3 e5             	shl    %cl,%rbp
  41842f:	8d 48 38             	lea    0x38(%rax),%ecx
  418432:	49 01 ed             	add    %rbp,%r13
  418435:	83 eb 07             	sub    $0x7,%ebx
  418438:	41 89 de             	mov    %ebx,%r14d
  41843b:	0f 85 fe fe ff ff    	jne    41833f <inflate+0x1cef>
  418441:	4c 89 db             	mov    %r11,%rbx
  418444:	44 89 f6             	mov    %r14d,%esi
  418447:	41 89 ca             	mov    %ecx,%r10d
  41844a:	4d 89 eb             	mov    %r13,%r11
  41844d:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  418452:	e9 49 f1 ff ff       	jmpq   4175a0 <inflate+0xf50>
  418457:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41845e:	00 00 
  418460:	45 8b a3 84 00 00 00 	mov    0x84(%r11),%r12d
  418467:	41 8b 73 7c          	mov    0x7c(%r11),%esi
  41846b:	41 8b ab 80 00 00 00 	mov    0x80(%r11),%ebp
  418472:	89 74 24 48          	mov    %esi,0x48(%rsp)
  418476:	01 f5                	add    %esi,%ebp
            }
            Tracev((stderr, "inflate:       code lengths ok\n"));
            state->have = 0;
            state->mode = CODELENS;
        case CODELENS:
            while (state->have < state->nlen + state->ndist) {
  418478:	41 39 ec             	cmp    %ebp,%r12d
  41847b:	0f 83 84 2f 00 00    	jae    41b405 <inflate+0x4db5>
                for (;;) {
                    this = state->lencode[BITS(state->lenbits)];
  418481:	41 8b 4b 70          	mov    0x70(%r11),%ecx
  418485:	ba 01 00 00 00       	mov    $0x1,%edx
  41848a:	49 8b 73 60          	mov    0x60(%r11),%rsi
  41848e:	d3 e2                	shl    %cl,%edx
  418490:	83 ea 01             	sub    $0x1,%edx
  418493:	41 89 d1             	mov    %edx,%r9d
  418496:	45 21 e9             	and    %r13d,%r9d
  418499:	4e 8d 04 8e          	lea    (%rsi,%r9,4),%r8
  41849d:	41 0f b6 48 01       	movzbl 0x1(%r8),%ecx
  4184a2:	41 0f b7 78 02       	movzwl 0x2(%r8),%edi
                    if ((unsigned)(this.bits) <= bits) break;
  4184a7:	0f b6 c1             	movzbl %cl,%eax
  4184aa:	39 c3                	cmp    %eax,%ebx
  4184ac:	0f 83 53 16 00 00    	jae    419b05 <inflate+0x34b5>
                    PULLBYTE();
  4184b2:	45 85 f6             	test   %r14d,%r14d
  4184b5:	0f 84 29 29 00 00    	je     41ade4 <inflate+0x4794>
  4184bb:	49 83 c7 01          	add    $0x1,%r15
  4184bf:	41 0f b6 47 ff       	movzbl -0x1(%r15),%eax
  4184c4:	89 d9                	mov    %ebx,%ecx
            state->have = 0;
            state->mode = CODELENS;
        case CODELENS:
            while (state->have < state->nlen + state->ndist) {
                for (;;) {
                    this = state->lencode[BITS(state->lenbits)];
  4184c6:	89 d7                	mov    %edx,%edi
  4184c8:	41 83 ee 01          	sub    $0x1,%r14d
                    if ((unsigned)(this.bits) <= bits) break;
                    PULLBYTE();
  4184cc:	83 c3 08             	add    $0x8,%ebx
  4184cf:	45 89 f2             	mov    %r14d,%r10d
  4184d2:	41 83 e2 03          	and    $0x3,%r10d
  4184d6:	48 d3 e0             	shl    %cl,%rax
  4184d9:	49 01 c5             	add    %rax,%r13
            state->have = 0;
            state->mode = CODELENS;
        case CODELENS:
            while (state->have < state->nlen + state->ndist) {
                for (;;) {
                    this = state->lencode[BITS(state->lenbits)];
  4184dc:	44 21 ef             	and    %r13d,%edi
  4184df:	4c 8d 0c be          	lea    (%rsi,%rdi,4),%r9
  4184e3:	41 0f b6 49 01       	movzbl 0x1(%r9),%ecx
  4184e8:	41 0f b7 79 02       	movzwl 0x2(%r9),%edi
                    if ((unsigned)(this.bits) <= bits) break;
  4184ed:	0f b6 c1             	movzbl %cl,%eax
  4184f0:	39 d8                	cmp    %ebx,%eax
  4184f2:	0f 86 0d 16 00 00    	jbe    419b05 <inflate+0x34b5>
                    PULLBYTE();
  4184f8:	45 85 f6             	test   %r14d,%r14d
  4184fb:	0f 84 6f 29 00 00    	je     41ae70 <inflate+0x4820>
  418501:	45 85 d2             	test   %r10d,%r10d
  418504:	0f 84 fe 0b 00 00    	je     419108 <inflate+0x2ab8>
  41850a:	41 83 fa 01          	cmp    $0x1,%r10d
  41850e:	74 72                	je     418582 <inflate+0x1f32>
  418510:	41 83 fa 02          	cmp    $0x2,%r10d
  418514:	74 35                	je     41854b <inflate+0x1efb>
  418516:	49 83 c7 01          	add    $0x1,%r15
  41851a:	45 0f b6 47 ff       	movzbl -0x1(%r15),%r8d
  41851f:	89 d9                	mov    %ebx,%ecx
            state->have = 0;
            state->mode = CODELENS;
        case CODELENS:
            while (state->have < state->nlen + state->ndist) {
                for (;;) {
                    this = state->lencode[BITS(state->lenbits)];
  418521:	41 89 d2             	mov    %edx,%r10d
                    if ((unsigned)(this.bits) <= bits) break;
                    PULLBYTE();
  418524:	83 c3 08             	add    $0x8,%ebx
  418527:	41 83 ee 01          	sub    $0x1,%r14d
  41852b:	49 d3 e0             	shl    %cl,%r8
  41852e:	4d 01 c5             	add    %r8,%r13
            state->have = 0;
            state->mode = CODELENS;
        case CODELENS:
            while (state->have < state->nlen + state->ndist) {
                for (;;) {
                    this = state->lencode[BITS(state->lenbits)];
  418531:	45 21 ea             	and    %r13d,%r10d
  418534:	4a 8d 04 96          	lea    (%rsi,%r10,4),%rax
  418538:	0f b6 48 01          	movzbl 0x1(%rax),%ecx
  41853c:	0f b7 78 02          	movzwl 0x2(%rax),%edi
                    if ((unsigned)(this.bits) <= bits) break;
  418540:	0f b6 c1             	movzbl %cl,%eax
  418543:	39 d8                	cmp    %ebx,%eax
  418545:	0f 86 ba 15 00 00    	jbe    419b05 <inflate+0x34b5>
                    PULLBYTE();
  41854b:	49 83 c7 01          	add    $0x1,%r15
  41854f:	41 0f b6 7f ff       	movzbl -0x1(%r15),%edi
  418554:	89 d9                	mov    %ebx,%ecx
            state->have = 0;
            state->mode = CODELENS;
        case CODELENS:
            while (state->have < state->nlen + state->ndist) {
                for (;;) {
                    this = state->lencode[BITS(state->lenbits)];
  418556:	41 89 d1             	mov    %edx,%r9d
                    if ((unsigned)(this.bits) <= bits) break;
                    PULLBYTE();
  418559:	83 c3 08             	add    $0x8,%ebx
  41855c:	41 83 ee 01          	sub    $0x1,%r14d
  418560:	48 d3 e7             	shl    %cl,%rdi
  418563:	49 01 fd             	add    %rdi,%r13
            state->have = 0;
            state->mode = CODELENS;
        case CODELENS:
            while (state->have < state->nlen + state->ndist) {
                for (;;) {
                    this = state->lencode[BITS(state->lenbits)];
  418566:	45 21 e9             	and    %r13d,%r9d
  418569:	4e 8d 04 8e          	lea    (%rsi,%r9,4),%r8
  41856d:	41 0f b6 48 01       	movzbl 0x1(%r8),%ecx
  418572:	41 0f b7 78 02       	movzwl 0x2(%r8),%edi
                    if ((unsigned)(this.bits) <= bits) break;
  418577:	0f b6 c1             	movzbl %cl,%eax
  41857a:	39 d8                	cmp    %ebx,%eax
  41857c:	0f 86 83 15 00 00    	jbe    419b05 <inflate+0x34b5>
                    PULLBYTE();
  418582:	49 83 c7 01          	add    $0x1,%r15
  418586:	45 0f b6 57 ff       	movzbl -0x1(%r15),%r10d
  41858b:	89 d9                	mov    %ebx,%ecx
            state->have = 0;
            state->mode = CODELENS;
        case CODELENS:
            while (state->have < state->nlen + state->ndist) {
                for (;;) {
                    this = state->lencode[BITS(state->lenbits)];
  41858d:	89 d0                	mov    %edx,%eax
                    if ((unsigned)(this.bits) <= bits) break;
                    PULLBYTE();
  41858f:	83 c3 08             	add    $0x8,%ebx
  418592:	41 83 ee 01          	sub    $0x1,%r14d
  418596:	49 d3 e2             	shl    %cl,%r10
  418599:	4d 01 d5             	add    %r10,%r13
            state->have = 0;
            state->mode = CODELENS;
        case CODELENS:
            while (state->have < state->nlen + state->ndist) {
                for (;;) {
                    this = state->lencode[BITS(state->lenbits)];
  41859c:	44 21 e8             	and    %r13d,%eax
  41859f:	48 8d 3c 86          	lea    (%rsi,%rax,4),%rdi
  4185a3:	0f b6 4f 01          	movzbl 0x1(%rdi),%ecx
  4185a7:	0f b7 7f 02          	movzwl 0x2(%rdi),%edi
                    if ((unsigned)(this.bits) <= bits) break;
  4185ab:	0f b6 c1             	movzbl %cl,%eax
  4185ae:	39 d8                	cmp    %ebx,%eax
  4185b0:	0f 86 4f 15 00 00    	jbe    419b05 <inflate+0x34b5>
                    PULLBYTE();
  4185b6:	45 85 f6             	test   %r14d,%r14d
  4185b9:	0f 85 49 0b 00 00    	jne    419108 <inflate+0x2ab8>
  4185bf:	41 89 da             	mov    %ebx,%r10d
  4185c2:	44 89 f6             	mov    %r14d,%esi
  4185c5:	4c 89 db             	mov    %r11,%rbx
  4185c8:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  4185cd:	4d 89 eb             	mov    %r13,%r11
  4185d0:	e9 cb ef ff ff       	jmpq   4175a0 <inflate+0xf50>
  4185d5:	0f 1f 00             	nopl   (%rax)
                *put++ = *from++;
            } while (--copy);
            if (state->length == 0) state->mode = LEN;
            break;
        case LIT:
            if (left == 0) goto inf_leave;
  4185d8:	44 8b 64 24 10       	mov    0x10(%rsp),%r12d
  4185dd:	45 85 e4             	test   %r12d,%r12d
  4185e0:	0f 84 2a 30 00 00    	je     41b610 <inflate+0x4fc0>
            *put++ = (unsigned char)(state->length);
  4185e6:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  4185eb:	41 8b 7b 54          	mov    0x54(%r11),%edi
            left--;
  4185ef:	44 89 e2             	mov    %r12d,%edx
  4185f2:	83 ea 01             	sub    $0x1,%edx
            state->mode = LEN;
            break;
  4185f5:	41 bc 12 00 00 00    	mov    $0x12,%r12d
            if (state->length == 0) state->mode = LEN;
            break;
        case LIT:
            if (left == 0) goto inf_leave;
            *put++ = (unsigned char)(state->length);
            left--;
  4185fb:	89 54 24 10          	mov    %edx,0x10(%rsp)
            } while (--copy);
            if (state->length == 0) state->mode = LEN;
            break;
        case LIT:
            if (left == 0) goto inf_leave;
            *put++ = (unsigned char)(state->length);
  4185ff:	48 8d 4e 01          	lea    0x1(%rsi),%rcx
  418603:	40 88 3e             	mov    %dil,(%rsi)
            left--;
            state->mode = LEN;
  418606:	41 c7 03 12 00 00 00 	movl   $0x12,(%r11)
            } while (--copy);
            if (state->length == 0) state->mode = LEN;
            break;
        case LIT:
            if (left == 0) goto inf_leave;
            *put++ = (unsigned char)(state->length);
  41860d:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
            left--;
            state->mode = LEN;
            break;
  418612:	e9 06 e1 ff ff       	jmpq   41671d <inflate+0xcd>
  418617:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41861e:	00 00 
  418620:	41 89 da             	mov    %ebx,%r10d
  418623:	44 89 f6             	mov    %r14d,%esi
  418626:	4c 89 db             	mov    %r11,%rbx
  418629:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41862e:	4d 89 eb             	mov    %r13,%r11
            state->mode = DONE;
        case DONE:
            ret = Z_STREAM_END;
            goto inf_leave;
        case BAD:
            ret = Z_DATA_ERROR;
  418631:	c7 44 24 28 fd ff ff 	movl   $0xfffffffd,0x28(%rsp)
  418638:	ff 
  418639:	e9 62 ef ff ff       	jmpq   4175a0 <inflate+0xf50>
  41863e:	66 90                	xchg   %ax,%ax
  418640:	41 8b 6b 08          	mov    0x8(%r11),%ebp
                Tracev((stderr, "inflate:   check matches trailer\n"));
            }
#ifdef GUNZIP
            state->mode = LENGTH;
        case LENGTH:
            if (state->wrap && state->flags) {
  418644:	85 ed                	test   %ebp,%ebp
  418646:	0f 84 74 27 00 00    	je     41adc0 <inflate+0x4770>
  41864c:	45 8b 63 10          	mov    0x10(%r11),%r12d
  418650:	45 85 e4             	test   %r12d,%r12d
  418653:	0f 84 67 27 00 00    	je     41adc0 <inflate+0x4770>
                NEEDBITS(32);
  418659:	83 fb 1f             	cmp    $0x1f,%ebx
  41865c:	0f 87 98 00 00 00    	ja     4186fa <inflate+0x20aa>
  418662:	45 85 f6             	test   %r14d,%r14d
  418665:	0f 84 b7 26 00 00    	je     41ad22 <inflate+0x46d2>
  41866b:	45 0f b6 07          	movzbl (%r15),%r8d
  41866f:	89 d9                	mov    %ebx,%ecx
  418671:	41 8d 76 ff          	lea    -0x1(%r14),%esi
  418675:	49 8d 7f 01          	lea    0x1(%r15),%rdi
  418679:	49 d3 e0             	shl    %cl,%r8
  41867c:	8d 4b 08             	lea    0x8(%rbx),%ecx
  41867f:	4d 01 c5             	add    %r8,%r13
  418682:	83 f9 1f             	cmp    $0x1f,%ecx
  418685:	0f 87 50 1d 00 00    	ja     41a3db <inflate+0x3d8b>
  41868b:	85 f6                	test   %esi,%esi
  41868d:	0f 84 6f 1d 00 00    	je     41a402 <inflate+0x3db2>
  418693:	45 0f b6 4f 01       	movzbl 0x1(%r15),%r9d
  418698:	41 8d 76 fe          	lea    -0x2(%r14),%esi
  41869c:	49 8d 7f 02          	lea    0x2(%r15),%rdi
  4186a0:	49 d3 e1             	shl    %cl,%r9
  4186a3:	8d 4b 10             	lea    0x10(%rbx),%ecx
  4186a6:	4d 01 cd             	add    %r9,%r13
  4186a9:	83 f9 1f             	cmp    $0x1f,%ecx
  4186ac:	0f 87 29 1d 00 00    	ja     41a3db <inflate+0x3d8b>
  4186b2:	85 f6                	test   %esi,%esi
  4186b4:	0f 84 48 1d 00 00    	je     41a402 <inflate+0x3db2>
  4186ba:	41 0f b6 57 02       	movzbl 0x2(%r15),%edx
  4186bf:	41 8d 76 fd          	lea    -0x3(%r14),%esi
  4186c3:	49 8d 7f 03          	lea    0x3(%r15),%rdi
  4186c7:	48 d3 e2             	shl    %cl,%rdx
  4186ca:	8d 4b 18             	lea    0x18(%rbx),%ecx
  4186cd:	49 01 d5             	add    %rdx,%r13
  4186d0:	83 f9 1f             	cmp    $0x1f,%ecx
  4186d3:	0f 87 02 1d 00 00    	ja     41a3db <inflate+0x3d8b>
  4186d9:	85 f6                	test   %esi,%esi
  4186db:	0f 84 21 1d 00 00    	je     41a402 <inflate+0x3db2>
  4186e1:	41 0f b6 47 03       	movzbl 0x3(%r15),%eax
  4186e6:	49 8d 7f 04          	lea    0x4(%r15),%rdi
  4186ea:	41 83 ee 04          	sub    $0x4,%r14d
  4186ee:	83 c3 20             	add    $0x20,%ebx
  4186f1:	48 d3 e0             	shl    %cl,%rax
  4186f4:	49 01 c5             	add    %rax,%r13
  4186f7:	49 89 ff             	mov    %rdi,%r15
                if (hold != (state->total & 0xffffffffUL)) {
  4186fa:	45 8b 53 20          	mov    0x20(%r11),%r10d
  4186fe:	4d 39 ea             	cmp    %r13,%r10
  418701:	0f 84 aa 30 00 00    	je     41b7b1 <inflate+0x5161>
                    strm->msg = (char *)"incorrect length check";
  418707:	48 8b 6c 24 20       	mov    0x20(%rsp),%rbp
                    state->mode = BAD;
                    break;
  41870c:	41 bc 1b 00 00 00    	mov    $0x1b,%r12d
            state->mode = LENGTH;
        case LENGTH:
            if (state->wrap && state->flags) {
                NEEDBITS(32);
                if (hold != (state->total & 0xffffffffUL)) {
                    strm->msg = (char *)"incorrect length check";
  418712:	48 c7 45 30 fd 93 43 	movq   $0x4393fd,0x30(%rbp)
  418719:	00 
                    state->mode = BAD;
  41871a:	41 c7 03 1b 00 00 00 	movl   $0x1b,(%r11)
                    break;
  418721:	e9 f7 df ff ff       	jmpq   41671d <inflate+0xcd>
  418726:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41872d:	00 00 00 
    out = left;
    ret = Z_OK;
    for (;;)
        switch (state->mode) {
        case HEAD:
            if (state->wrap == 0) {
  418730:	41 8b 43 08          	mov    0x8(%r11),%eax
  418734:	85 c0                	test   %eax,%eax
  418736:	0f 84 b4 0f 00 00    	je     4196f0 <inflate+0x30a0>
                state->mode = TYPEDO;
                break;
            }
            NEEDBITS(16);
  41873c:	83 fb 0f             	cmp    $0xf,%ebx
  41873f:	77 4b                	ja     41878c <inflate+0x213c>
  418741:	45 85 f6             	test   %r14d,%r14d
  418744:	0f 84 12 2f 00 00    	je     41b65c <inflate+0x500c>
  41874a:	41 0f b6 17          	movzbl (%r15),%edx
  41874e:	89 d9                	mov    %ebx,%ecx
  418750:	45 8d 56 ff          	lea    -0x1(%r14),%r10d
  418754:	4d 8d 4f 01          	lea    0x1(%r15),%r9
  418758:	48 d3 e2             	shl    %cl,%rdx
  41875b:	8d 4b 08             	lea    0x8(%rbx),%ecx
  41875e:	49 01 d5             	add    %rdx,%r13
  418761:	83 f9 0f             	cmp    $0xf,%ecx
  418764:	0f 87 e8 2e 00 00    	ja     41b652 <inflate+0x5002>
  41876a:	45 85 d2             	test   %r10d,%r10d
  41876d:	0f 84 50 1c 00 00    	je     41a3c3 <inflate+0x3d73>
  418773:	45 0f b6 47 01       	movzbl 0x1(%r15),%r8d
  418778:	4d 8d 4f 02          	lea    0x2(%r15),%r9
  41877c:	41 83 ee 02          	sub    $0x2,%r14d
  418780:	83 c3 10             	add    $0x10,%ebx
  418783:	49 d3 e0             	shl    %cl,%r8
  418786:	4d 01 c5             	add    %r8,%r13
  418789:	4d 89 cf             	mov    %r9,%r15
#ifdef GUNZIP
            if ((state->wrap & 2) && hold == 0x8b1f) {  /* gzip header */
  41878c:	49 81 fd 1f 8b 00 00 	cmp    $0x8b1f,%r13
  418793:	75 08                	jne    41879d <inflate+0x214d>
  418795:	a8 02                	test   $0x2,%al
  418797:	0f 85 2d 2f 00 00    	jne    41b6ca <inflate+0x507a>
                INITBITS();
                state->mode = FLAGS;
                break;
            }
            state->flags = 0;           /* expect zlib header */
            if (state->head != Z_NULL)
  41879d:	49 8b 6b 28          	mov    0x28(%r11),%rbp
                CRC2(state->check, hold);
                INITBITS();
                state->mode = FLAGS;
                break;
            }
            state->flags = 0;           /* expect zlib header */
  4187a1:	41 c7 43 10 00 00 00 	movl   $0x0,0x10(%r11)
  4187a8:	00 
            if (state->head != Z_NULL)
  4187a9:	48 85 ed             	test   %rbp,%rbp
  4187ac:	74 07                	je     4187b5 <inflate+0x2165>
                state->head->done = -1;
  4187ae:	c7 45 48 ff ff ff ff 	movl   $0xffffffff,0x48(%rbp)
            if (!(state->wrap & 1) ||   /* check if zlib header allowed */
  4187b5:	a8 01                	test   $0x1,%al
  4187b7:	0f 84 5d 1c 00 00    	je     41a41a <inflate+0x3dca>
#else
            if (
#endif
                ((BITS(8) << 8) + (hold >> 8)) % 31) {
  4187bd:	44 89 ef             	mov    %r13d,%edi
  4187c0:	4c 89 ee             	mov    %r13,%rsi
  4187c3:	49 ba 11 42 08 21 84 	movabs $0x842108421084211,%r10
  4187ca:	10 42 08 
  4187cd:	c1 e7 08             	shl    $0x8,%edi
  4187d0:	48 c1 ee 08          	shr    $0x8,%rsi
  4187d4:	41 89 fc             	mov    %edi,%r12d
  4187d7:	41 81 e4 00 ff 00 00 	and    $0xff00,%r12d
  4187de:	4c 01 e6             	add    %r12,%rsi
  4187e1:	48 89 f0             	mov    %rsi,%rax
  4187e4:	49 89 f1             	mov    %rsi,%r9
  4187e7:	49 f7 e2             	mul    %r10
  4187ea:	49 29 d1             	sub    %rdx,%r9
  4187ed:	49 d1 e9             	shr    %r9
  4187f0:	4c 01 ca             	add    %r9,%rdx
  4187f3:	48 c1 ea 04          	shr    $0x4,%rdx
  4187f7:	48 89 d1             	mov    %rdx,%rcx
  4187fa:	48 c1 e1 05          	shl    $0x5,%rcx
  4187fe:	48 29 d1             	sub    %rdx,%rcx
                break;
            }
            state->flags = 0;           /* expect zlib header */
            if (state->head != Z_NULL)
                state->head->done = -1;
            if (!(state->wrap & 1) ||   /* check if zlib header allowed */
  418801:	48 39 ce             	cmp    %rcx,%rsi
  418804:	0f 85 10 1c 00 00    	jne    41a41a <inflate+0x3dca>
                ((BITS(8) << 8) + (hold >> 8)) % 31) {
                strm->msg = (char *)"incorrect header check";
                state->mode = BAD;
                break;
            }
            if (BITS(4) != Z_DEFLATED) {
  41880a:	45 89 e8             	mov    %r13d,%r8d
  41880d:	41 83 e0 0f          	and    $0xf,%r8d
  418811:	41 83 f8 08          	cmp    $0x8,%r8d
  418815:	0f 84 05 2f 00 00    	je     41b720 <inflate+0x50d0>
                strm->msg = (char *)"unknown compression method";
  41881b:	4c 8b 64 24 20       	mov    0x20(%rsp),%r12
  418820:	49 c7 44 24 30 a7 92 	movq   $0x4392a7,0x30(%r12)
  418827:	43 00 
                state->mode = BAD;
  418829:	41 c7 03 1b 00 00 00 	movl   $0x1b,(%r11)
                break;
  418830:	41 bc 1b 00 00 00    	mov    $0x1b,%r12d
  418836:	e9 e2 de ff ff       	jmpq   41671d <inflate+0xcd>
  41883b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  418840:	41 8b 43 10          	mov    0x10(%r11),%eax
  418844:	41 89 c0             	mov    %eax,%r8d
  418847:	41 81 e0 00 04 00 00 	and    $0x400,%r8d
            }
            else if (state->head != Z_NULL)
                state->head->extra = Z_NULL;
            state->mode = EXTRA;
        case EXTRA:
            if (state->flags & 0x0400) {
  41884e:	45 85 c0             	test   %r8d,%r8d
  418851:	0f 84 8f 00 00 00    	je     4188e6 <inflate+0x2296>
                copy = state->length;
  418857:	45 8b 4b 54          	mov    0x54(%r11),%r9d
  41885b:	45 39 ce             	cmp    %r9d,%r14d
  41885e:	45 89 cc             	mov    %r9d,%r12d
  418861:	44 89 cf             	mov    %r9d,%edi
  418864:	45 0f 46 e6          	cmovbe %r14d,%r12d
                if (copy > have) copy = have;
                if (copy) {
  418868:	45 85 e4             	test   %r12d,%r12d
  41886b:	74 6d                	je     4188da <inflate+0x228a>
                    if (state->head != Z_NULL &&
  41886d:	49 8b 73 28          	mov    0x28(%r11),%rsi
  418871:	48 85 f6             	test   %rsi,%rsi
  418874:	0f 84 32 1c 00 00    	je     41a4ac <inflate+0x3e5c>
                        state->head->extra != Z_NULL) {
  41887a:	48 8b 7e 18          	mov    0x18(%rsi),%rdi
        case EXTRA:
            if (state->flags & 0x0400) {
                copy = state->length;
                if (copy > have) copy = have;
                if (copy) {
                    if (state->head != Z_NULL &&
  41887e:	48 85 ff             	test   %rdi,%rdi
  418881:	0f 84 25 1c 00 00    	je     41a4ac <inflate+0x3e5c>
  418887:	4c 89 5c 24 48       	mov    %r11,0x48(%rsp)
                        state->head->extra != Z_NULL) {
                        len = state->head->extra_len - state->length;
  41888c:	44 8b 5e 20          	mov    0x20(%rsi),%r11d
                        zmemcpy(state->head->extra + len, next,
  418890:	44 89 e2             	mov    %r12d,%edx
                                len + copy > state->head->extra_max ?
  418893:	8b 46 24             	mov    0x24(%rsi),%eax
                if (copy > have) copy = have;
                if (copy) {
                    if (state->head != Z_NULL &&
                        state->head->extra != Z_NULL) {
                        len = state->head->extra_len - state->length;
                        zmemcpy(state->head->extra + len, next,
  418896:	48 89 d5             	mov    %rdx,%rbp
  418899:	4c 89 fe             	mov    %r15,%rsi
                copy = state->length;
                if (copy > have) copy = have;
                if (copy) {
                    if (state->head != Z_NULL &&
                        state->head->extra != Z_NULL) {
                        len = state->head->extra_len - state->length;
  41889c:	45 29 cb             	sub    %r9d,%r11d
                        zmemcpy(state->head->extra + len, next,
                                len + copy > state->head->extra_max ?
  41889f:	43 8d 0c 1c          	lea    (%r12,%r11,1),%ecx
                if (copy > have) copy = have;
                if (copy) {
                    if (state->head != Z_NULL &&
                        state->head->extra != Z_NULL) {
                        len = state->head->extra_len - state->length;
                        zmemcpy(state->head->extra + len, next,
  4188a3:	41 89 c0             	mov    %eax,%r8d
  4188a6:	45 29 d8             	sub    %r11d,%r8d
  4188a9:	39 c1                	cmp    %eax,%ecx
  4188ab:	49 0f 47 d0          	cmova  %r8,%rdx
  4188af:	4c 01 df             	add    %r11,%rdi
  4188b2:	e8 39 e7 fe ff       	callq  406ff0 <memcpy@plt>
  4188b7:	4c 8b 5c 24 48       	mov    0x48(%rsp),%r11
  4188bc:	41 8b 43 10          	mov    0x10(%r11),%eax
                                len + copy > state->head->extra_max ?
                                state->head->extra_max - len : copy);
                    }
                    if (state->flags & 0x0200)
  4188c0:	f6 c4 02             	test   $0x2,%ah
  4188c3:	0f 85 c1 1b 00 00    	jne    41a48a <inflate+0x3e3a>
                        state->check = crc32(state->check, next, copy);
                    have -= copy;
                    next += copy;
                    state->length -= copy;
  4188c9:	41 8b 7b 54          	mov    0x54(%r11),%edi
                                len + copy > state->head->extra_max ?
                                state->head->extra_max - len : copy);
                    }
                    if (state->flags & 0x0200)
                        state->check = crc32(state->check, next, copy);
                    have -= copy;
  4188cd:	45 29 e6             	sub    %r12d,%r14d
                    next += copy;
  4188d0:	49 01 ef             	add    %rbp,%r15
                    state->length -= copy;
  4188d3:	44 29 e7             	sub    %r12d,%edi
  4188d6:	41 89 7b 54          	mov    %edi,0x54(%r11)
                }
                if (state->length) goto inf_leave;
  4188da:	85 ff                	test   %edi,%edi
  4188dc:	0f 85 16 2c 00 00    	jne    41b4f8 <inflate+0x4ea8>
  4188e2:	41 8b 43 10          	mov    0x10(%r11),%eax
            }
            state->length = 0;
            state->mode = NAME;
        case NAME:
            if (state->flags & 0x0800) {
  4188e6:	f6 c4 08             	test   $0x8,%ah
                    next += copy;
                    state->length -= copy;
                }
                if (state->length) goto inf_leave;
            }
            state->length = 0;
  4188e9:	41 c7 43 54 00 00 00 	movl   $0x0,0x54(%r11)
  4188f0:	00 
            state->mode = NAME;
  4188f1:	41 c7 03 06 00 00 00 	movl   $0x6,(%r11)
        case NAME:
            if (state->flags & 0x0800) {
  4188f8:	75 27                	jne    418921 <inflate+0x22d1>
                    state->check = crc32(state->check, next, copy);
                have -= copy;
                next += copy;
                if (len) goto inf_leave;
            }
            else if (state->head != Z_NULL)
  4188fa:	4d 8b 53 28          	mov    0x28(%r11),%r10
  4188fe:	4d 85 d2             	test   %r10,%r10
  418901:	0f 84 3e 01 00 00    	je     418a45 <inflate+0x23f5>
                state->head->name = Z_NULL;
  418907:	49 c7 42 28 00 00 00 	movq   $0x0,0x28(%r10)
  41890e:	00 
  41890f:	e9 31 01 00 00       	jmpq   418a45 <inflate+0x23f5>
  418914:	0f 1f 40 00          	nopl   0x0(%rax)
  418918:	41 8b 43 10          	mov    0x10(%r11),%eax
                if (state->length) goto inf_leave;
            }
            state->length = 0;
            state->mode = NAME;
        case NAME:
            if (state->flags & 0x0800) {
  41891c:	f6 c4 08             	test   $0x8,%ah
  41891f:	74 d9                	je     4188fa <inflate+0x22aa>
                if (have == 0) goto inf_leave;
  418921:	45 85 f6             	test   %r14d,%r14d
  418924:	0f 84 fa 28 00 00    	je     41b224 <inflate+0x4bd4>
                copy = 0;
                do {
                    len = (unsigned)(next[copy++]);
                    if (state->head != Z_NULL &&
  41892a:	4d 8b 43 28          	mov    0x28(%r11),%r8
  41892e:	41 8d 56 ff          	lea    -0x1(%r14),%edx
        case NAME:
            if (state->flags & 0x0800) {
                if (have == 0) goto inf_leave;
                copy = 0;
                do {
                    len = (unsigned)(next[copy++]);
  418932:	bd 01 00 00 00       	mov    $0x1,%ebp
  418937:	45 0f b6 27          	movzbl (%r15),%r12d
  41893b:	83 e2 01             	and    $0x1,%edx
                    if (state->head != Z_NULL &&
  41893e:	4d 85 c0             	test   %r8,%r8
  418941:	41 89 d1             	mov    %edx,%r9d
  418944:	74 17                	je     41895d <inflate+0x230d>
                            state->head->name != Z_NULL &&
  418946:	49 8b 78 28          	mov    0x28(%r8),%rdi
            if (state->flags & 0x0800) {
                if (have == 0) goto inf_leave;
                copy = 0;
                do {
                    len = (unsigned)(next[copy++]);
                    if (state->head != Z_NULL &&
  41894a:	48 85 ff             	test   %rdi,%rdi
  41894d:	74 0e                	je     41895d <inflate+0x230d>
                            state->head->name != Z_NULL &&
                            state->length < state->head->name_max)
  41894f:	41 8b 4b 54          	mov    0x54(%r11),%ecx
                if (have == 0) goto inf_leave;
                copy = 0;
                do {
                    len = (unsigned)(next[copy++]);
                    if (state->head != Z_NULL &&
                            state->head->name != Z_NULL &&
  418953:	41 3b 48 30          	cmp    0x30(%r8),%ecx
  418957:	0f 82 33 0d 00 00    	jb     419690 <inflate+0x3040>
                            state->length < state->head->name_max)
                        state->head->name[state->length++] = len;
                } while (len && copy < have);
  41895d:	45 85 e4             	test   %r12d,%r12d
  418960:	b8 01 00 00 00       	mov    $0x1,%eax
  418965:	0f 84 bc 00 00 00    	je     418a27 <inflate+0x23d7>
  41896b:	44 39 f5             	cmp    %r14d,%ebp
  41896e:	0f 83 b3 00 00 00    	jae    418a27 <inflate+0x23d7>
  418974:	45 85 c9             	test   %r9d,%r9d
  418977:	74 37                	je     4189b0 <inflate+0x2360>
            if (state->flags & 0x0800) {
                if (have == 0) goto inf_leave;
                copy = 0;
                do {
                    len = (unsigned)(next[copy++]);
                    if (state->head != Z_NULL &&
  418979:	4d 8b 4b 28          	mov    0x28(%r11),%r9
        case NAME:
            if (state->flags & 0x0800) {
                if (have == 0) goto inf_leave;
                copy = 0;
                do {
                    len = (unsigned)(next[copy++]);
  41897d:	bd 02 00 00 00       	mov    $0x2,%ebp
  418982:	45 0f b6 67 01       	movzbl 0x1(%r15),%r12d
                    if (state->head != Z_NULL &&
  418987:	4d 85 c9             	test   %r9,%r9
  41898a:	74 17                	je     4189a3 <inflate+0x2353>
                            state->head->name != Z_NULL &&
  41898c:	49 8b 71 28          	mov    0x28(%r9),%rsi
            if (state->flags & 0x0800) {
                if (have == 0) goto inf_leave;
                copy = 0;
                do {
                    len = (unsigned)(next[copy++]);
                    if (state->head != Z_NULL &&
  418990:	48 85 f6             	test   %rsi,%rsi
  418993:	74 0e                	je     4189a3 <inflate+0x2353>
                            state->head->name != Z_NULL &&
                            state->length < state->head->name_max)
  418995:	41 8b 53 54          	mov    0x54(%r11),%edx
                if (have == 0) goto inf_leave;
                copy = 0;
                do {
                    len = (unsigned)(next[copy++]);
                    if (state->head != Z_NULL &&
                            state->head->name != Z_NULL &&
  418999:	41 3b 51 30          	cmp    0x30(%r9),%edx
  41899d:	0f 82 15 0d 00 00    	jb     4196b8 <inflate+0x3068>
                            state->length < state->head->name_max)
                        state->head->name[state->length++] = len;
                } while (len && copy < have);
  4189a3:	45 85 e4             	test   %r12d,%r12d
  4189a6:	89 e8                	mov    %ebp,%eax
  4189a8:	75 78                	jne    418a22 <inflate+0x23d2>
  4189aa:	eb 7b                	jmp    418a27 <inflate+0x23d7>
  4189ac:	0f 1f 40 00          	nopl   0x0(%rax)
            if (state->flags & 0x0800) {
                if (have == 0) goto inf_leave;
                copy = 0;
                do {
                    len = (unsigned)(next[copy++]);
                    if (state->head != Z_NULL &&
  4189b0:	49 8b 4b 28          	mov    0x28(%r11),%rcx
        case NAME:
            if (state->flags & 0x0800) {
                if (have == 0) goto inf_leave;
                copy = 0;
                do {
                    len = (unsigned)(next[copy++]);
  4189b4:	8d 68 01             	lea    0x1(%rax),%ebp
  4189b7:	45 0f b6 24 07       	movzbl (%r15,%rax,1),%r12d
                    if (state->head != Z_NULL &&
  4189bc:	48 85 c9             	test   %rcx,%rcx
  4189bf:	74 1f                	je     4189e0 <inflate+0x2390>
                            state->head->name != Z_NULL &&
  4189c1:	4c 8b 51 28          	mov    0x28(%rcx),%r10
            if (state->flags & 0x0800) {
                if (have == 0) goto inf_leave;
                copy = 0;
                do {
                    len = (unsigned)(next[copy++]);
                    if (state->head != Z_NULL &&
  4189c5:	4d 85 d2             	test   %r10,%r10
  4189c8:	74 16                	je     4189e0 <inflate+0x2390>
                            state->head->name != Z_NULL &&
                            state->length < state->head->name_max)
  4189ca:	45 8b 4b 54          	mov    0x54(%r11),%r9d
                if (have == 0) goto inf_leave;
                copy = 0;
                do {
                    len = (unsigned)(next[copy++]);
                    if (state->head != Z_NULL &&
                            state->head->name != Z_NULL &&
  4189ce:	44 3b 49 30          	cmp    0x30(%rcx),%r9d
  4189d2:	73 0c                	jae    4189e0 <inflate+0x2390>
                            state->length < state->head->name_max)
                        state->head->name[state->length++] = len;
  4189d4:	41 8d 41 01          	lea    0x1(%r9),%eax
  4189d8:	41 89 43 54          	mov    %eax,0x54(%r11)
  4189dc:	47 88 24 0a          	mov    %r12b,(%r10,%r9,1)
                } while (len && copy < have);
  4189e0:	45 85 e4             	test   %r12d,%r12d
  4189e3:	89 ea                	mov    %ebp,%edx
  4189e5:	74 40                	je     418a27 <inflate+0x23d7>
            if (state->flags & 0x0800) {
                if (have == 0) goto inf_leave;
                copy = 0;
                do {
                    len = (unsigned)(next[copy++]);
                    if (state->head != Z_NULL &&
  4189e7:	4d 8b 43 28          	mov    0x28(%r11),%r8
        case NAME:
            if (state->flags & 0x0800) {
                if (have == 0) goto inf_leave;
                copy = 0;
                do {
                    len = (unsigned)(next[copy++]);
  4189eb:	83 c5 01             	add    $0x1,%ebp
  4189ee:	41 89 d4             	mov    %edx,%r12d
  4189f1:	47 0f b6 24 27       	movzbl (%r15,%r12,1),%r12d
                    if (state->head != Z_NULL &&
  4189f6:	4d 85 c0             	test   %r8,%r8
  4189f9:	74 1f                	je     418a1a <inflate+0x23ca>
                            state->head->name != Z_NULL &&
  4189fb:	49 8b 78 28          	mov    0x28(%r8),%rdi
            if (state->flags & 0x0800) {
                if (have == 0) goto inf_leave;
                copy = 0;
                do {
                    len = (unsigned)(next[copy++]);
                    if (state->head != Z_NULL &&
  4189ff:	48 85 ff             	test   %rdi,%rdi
  418a02:	74 16                	je     418a1a <inflate+0x23ca>
                            state->head->name != Z_NULL &&
                            state->length < state->head->name_max)
  418a04:	41 8b 4b 54          	mov    0x54(%r11),%ecx
                if (have == 0) goto inf_leave;
                copy = 0;
                do {
                    len = (unsigned)(next[copy++]);
                    if (state->head != Z_NULL &&
                            state->head->name != Z_NULL &&
  418a08:	41 3b 48 30          	cmp    0x30(%r8),%ecx
  418a0c:	73 0c                	jae    418a1a <inflate+0x23ca>
                            state->length < state->head->name_max)
                        state->head->name[state->length++] = len;
  418a0e:	44 8d 51 01          	lea    0x1(%rcx),%r10d
  418a12:	45 89 53 54          	mov    %r10d,0x54(%r11)
  418a16:	44 88 24 0f          	mov    %r12b,(%rdi,%rcx,1)
                } while (len && copy < have);
  418a1a:	45 85 e4             	test   %r12d,%r12d
  418a1d:	8d 42 01             	lea    0x1(%rdx),%eax
  418a20:	74 05                	je     418a27 <inflate+0x23d7>
  418a22:	44 39 f5             	cmp    %r14d,%ebp
  418a25:	72 89                	jb     4189b0 <inflate+0x2360>
                if (state->flags & 0x0200)
  418a27:	41 f6 43 11 02       	testb  $0x2,0x11(%r11)
  418a2c:	0f 85 8e 11 00 00    	jne    419bc0 <inflate+0x3570>
                    state->check = crc32(state->check, next, copy);
                have -= copy;
  418a32:	41 29 ee             	sub    %ebp,%r14d
                next += copy;
  418a35:	49 01 ef             	add    %rbp,%r15
                if (len) goto inf_leave;
  418a38:	45 85 e4             	test   %r12d,%r12d
  418a3b:	0f 85 3b 28 00 00    	jne    41b27c <inflate+0x4c2c>
  418a41:	41 8b 43 10          	mov    0x10(%r11),%eax
            else if (state->head != Z_NULL)
                state->head->name = Z_NULL;
            state->length = 0;
            state->mode = COMMENT;
        case COMMENT:
            if (state->flags & 0x1000) {
  418a45:	f6 c4 10             	test   $0x10,%ah
                next += copy;
                if (len) goto inf_leave;
            }
            else if (state->head != Z_NULL)
                state->head->name = Z_NULL;
            state->length = 0;
  418a48:	41 c7 43 54 00 00 00 	movl   $0x0,0x54(%r11)
  418a4f:	00 
            state->mode = COMMENT;
  418a50:	41 c7 03 07 00 00 00 	movl   $0x7,(%r11)
        case COMMENT:
            if (state->flags & 0x1000) {
  418a57:	75 28                	jne    418a81 <inflate+0x2431>
                    state->check = crc32(state->check, next, copy);
                have -= copy;
                next += copy;
                if (len) goto inf_leave;
            }
            else if (state->head != Z_NULL)
  418a59:	49 8b 6b 28          	mov    0x28(%r11),%rbp
  418a5d:	48 85 ed             	test   %rbp,%rbp
  418a60:	0f 84 41 01 00 00    	je     418ba7 <inflate+0x2557>
                state->head->comment = Z_NULL;
  418a66:	48 c7 45 38 00 00 00 	movq   $0x0,0x38(%rbp)
  418a6d:	00 
  418a6e:	e9 34 01 00 00       	jmpq   418ba7 <inflate+0x2557>
  418a73:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  418a78:	41 8b 43 10          	mov    0x10(%r11),%eax
            else if (state->head != Z_NULL)
                state->head->name = Z_NULL;
            state->length = 0;
            state->mode = COMMENT;
        case COMMENT:
            if (state->flags & 0x1000) {
  418a7c:	f6 c4 10             	test   $0x10,%ah
  418a7f:	74 d8                	je     418a59 <inflate+0x2409>
                if (have == 0) goto inf_leave;
  418a81:	45 85 f6             	test   %r14d,%r14d
  418a84:	0f 84 eb 25 00 00    	je     41b075 <inflate+0x4a25>
                copy = 0;
                do {
                    len = (unsigned)(next[copy++]);
                    if (state->head != Z_NULL &&
  418a8a:	4d 8b 43 28          	mov    0x28(%r11),%r8
  418a8e:	45 8d 4e ff          	lea    -0x1(%r14),%r9d
        case COMMENT:
            if (state->flags & 0x1000) {
                if (have == 0) goto inf_leave;
                copy = 0;
                do {
                    len = (unsigned)(next[copy++]);
  418a92:	bd 01 00 00 00       	mov    $0x1,%ebp
  418a97:	45 0f b6 27          	movzbl (%r15),%r12d
  418a9b:	41 83 e1 01          	and    $0x1,%r9d
                    if (state->head != Z_NULL &&
  418a9f:	4d 85 c0             	test   %r8,%r8
  418aa2:	44 89 ca             	mov    %r9d,%edx
  418aa5:	74 17                	je     418abe <inflate+0x246e>
                            state->head->comment != Z_NULL &&
  418aa7:	49 8b 78 38          	mov    0x38(%r8),%rdi
            if (state->flags & 0x1000) {
                if (have == 0) goto inf_leave;
                copy = 0;
                do {
                    len = (unsigned)(next[copy++]);
                    if (state->head != Z_NULL &&
  418aab:	48 85 ff             	test   %rdi,%rdi
  418aae:	74 0e                	je     418abe <inflate+0x246e>
                            state->head->comment != Z_NULL &&
                            state->length < state->head->comm_max)
  418ab0:	41 8b 4b 54          	mov    0x54(%r11),%ecx
                if (have == 0) goto inf_leave;
                copy = 0;
                do {
                    len = (unsigned)(next[copy++]);
                    if (state->head != Z_NULL &&
                            state->head->comment != Z_NULL &&
  418ab4:	41 3b 48 40          	cmp    0x40(%r8),%ecx
  418ab8:	0f 82 32 0b 00 00    	jb     4195f0 <inflate+0x2fa0>
                            state->length < state->head->comm_max)
                        state->head->comment[state->length++] = len;
                } while (len && copy < have);
  418abe:	45 85 e4             	test   %r12d,%r12d
  418ac1:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  418ac7:	0f 84 bc 00 00 00    	je     418b89 <inflate+0x2539>
  418acd:	44 39 f5             	cmp    %r14d,%ebp
  418ad0:	0f 83 b3 00 00 00    	jae    418b89 <inflate+0x2539>
  418ad6:	85 d2                	test   %edx,%edx
  418ad8:	74 36                	je     418b10 <inflate+0x24c0>
            if (state->flags & 0x1000) {
                if (have == 0) goto inf_leave;
                copy = 0;
                do {
                    len = (unsigned)(next[copy++]);
                    if (state->head != Z_NULL &&
  418ada:	49 8b 43 28          	mov    0x28(%r11),%rax
        case COMMENT:
            if (state->flags & 0x1000) {
                if (have == 0) goto inf_leave;
                copy = 0;
                do {
                    len = (unsigned)(next[copy++]);
  418ade:	bd 02 00 00 00       	mov    $0x2,%ebp
  418ae3:	45 0f b6 67 01       	movzbl 0x1(%r15),%r12d
                    if (state->head != Z_NULL &&
  418ae8:	48 85 c0             	test   %rax,%rax
  418aeb:	74 16                	je     418b03 <inflate+0x24b3>
                            state->head->comment != Z_NULL &&
  418aed:	48 8b 70 38          	mov    0x38(%rax),%rsi
            if (state->flags & 0x1000) {
                if (have == 0) goto inf_leave;
                copy = 0;
                do {
                    len = (unsigned)(next[copy++]);
                    if (state->head != Z_NULL &&
  418af1:	48 85 f6             	test   %rsi,%rsi
  418af4:	74 0d                	je     418b03 <inflate+0x24b3>
                            state->head->comment != Z_NULL &&
                            state->length < state->head->comm_max)
  418af6:	41 8b 53 54          	mov    0x54(%r11),%edx
                if (have == 0) goto inf_leave;
                copy = 0;
                do {
                    len = (unsigned)(next[copy++]);
                    if (state->head != Z_NULL &&
                            state->head->comment != Z_NULL &&
  418afa:	3b 50 40             	cmp    0x40(%rax),%edx
  418afd:	0f 82 3d 0b 00 00    	jb     419640 <inflate+0x2ff0>
                            state->length < state->head->comm_max)
                        state->head->comment[state->length++] = len;
                } while (len && copy < have);
  418b03:	45 85 e4             	test   %r12d,%r12d
  418b06:	41 89 e9             	mov    %ebp,%r9d
  418b09:	75 79                	jne    418b84 <inflate+0x2534>
  418b0b:	eb 7c                	jmp    418b89 <inflate+0x2539>
  418b0d:	0f 1f 00             	nopl   (%rax)
            if (state->flags & 0x1000) {
                if (have == 0) goto inf_leave;
                copy = 0;
                do {
                    len = (unsigned)(next[copy++]);
                    if (state->head != Z_NULL &&
  418b10:	49 8b 4b 28          	mov    0x28(%r11),%rcx
        case COMMENT:
            if (state->flags & 0x1000) {
                if (have == 0) goto inf_leave;
                copy = 0;
                do {
                    len = (unsigned)(next[copy++]);
  418b14:	41 8d 69 01          	lea    0x1(%r9),%ebp
  418b18:	47 0f b6 24 0f       	movzbl (%r15,%r9,1),%r12d
                    if (state->head != Z_NULL &&
  418b1d:	48 85 c9             	test   %rcx,%rcx
  418b20:	74 1f                	je     418b41 <inflate+0x24f1>
                            state->head->comment != Z_NULL &&
  418b22:	4c 8b 51 38          	mov    0x38(%rcx),%r10
            if (state->flags & 0x1000) {
                if (have == 0) goto inf_leave;
                copy = 0;
                do {
                    len = (unsigned)(next[copy++]);
                    if (state->head != Z_NULL &&
  418b26:	4d 85 d2             	test   %r10,%r10
  418b29:	74 16                	je     418b41 <inflate+0x24f1>
                            state->head->comment != Z_NULL &&
                            state->length < state->head->comm_max)
  418b2b:	45 8b 4b 54          	mov    0x54(%r11),%r9d
                if (have == 0) goto inf_leave;
                copy = 0;
                do {
                    len = (unsigned)(next[copy++]);
                    if (state->head != Z_NULL &&
                            state->head->comment != Z_NULL &&
  418b2f:	44 3b 49 40          	cmp    0x40(%rcx),%r9d
  418b33:	73 0c                	jae    418b41 <inflate+0x24f1>
                            state->length < state->head->comm_max)
                        state->head->comment[state->length++] = len;
  418b35:	41 8d 41 01          	lea    0x1(%r9),%eax
  418b39:	41 89 43 54          	mov    %eax,0x54(%r11)
  418b3d:	47 88 24 0a          	mov    %r12b,(%r10,%r9,1)
                } while (len && copy < have);
  418b41:	45 85 e4             	test   %r12d,%r12d
  418b44:	89 ea                	mov    %ebp,%edx
  418b46:	74 41                	je     418b89 <inflate+0x2539>
            if (state->flags & 0x1000) {
                if (have == 0) goto inf_leave;
                copy = 0;
                do {
                    len = (unsigned)(next[copy++]);
                    if (state->head != Z_NULL &&
  418b48:	4d 8b 43 28          	mov    0x28(%r11),%r8
        case COMMENT:
            if (state->flags & 0x1000) {
                if (have == 0) goto inf_leave;
                copy = 0;
                do {
                    len = (unsigned)(next[copy++]);
  418b4c:	83 c5 01             	add    $0x1,%ebp
  418b4f:	41 89 d4             	mov    %edx,%r12d
  418b52:	47 0f b6 24 27       	movzbl (%r15,%r12,1),%r12d
                    if (state->head != Z_NULL &&
  418b57:	4d 85 c0             	test   %r8,%r8
  418b5a:	74 1f                	je     418b7b <inflate+0x252b>
                            state->head->comment != Z_NULL &&
  418b5c:	49 8b 78 38          	mov    0x38(%r8),%rdi
            if (state->flags & 0x1000) {
                if (have == 0) goto inf_leave;
                copy = 0;
                do {
                    len = (unsigned)(next[copy++]);
                    if (state->head != Z_NULL &&
  418b60:	48 85 ff             	test   %rdi,%rdi
  418b63:	74 16                	je     418b7b <inflate+0x252b>
                            state->head->comment != Z_NULL &&
                            state->length < state->head->comm_max)
  418b65:	41 8b 4b 54          	mov    0x54(%r11),%ecx
                if (have == 0) goto inf_leave;
                copy = 0;
                do {
                    len = (unsigned)(next[copy++]);
                    if (state->head != Z_NULL &&
                            state->head->comment != Z_NULL &&
  418b69:	41 3b 48 40          	cmp    0x40(%r8),%ecx
  418b6d:	73 0c                	jae    418b7b <inflate+0x252b>
                            state->length < state->head->comm_max)
                        state->head->comment[state->length++] = len;
  418b6f:	44 8d 51 01          	lea    0x1(%rcx),%r10d
  418b73:	45 89 53 54          	mov    %r10d,0x54(%r11)
  418b77:	44 88 24 0f          	mov    %r12b,(%rdi,%rcx,1)
                } while (len && copy < have);
  418b7b:	45 85 e4             	test   %r12d,%r12d
  418b7e:	44 8d 4a 01          	lea    0x1(%rdx),%r9d
  418b82:	74 05                	je     418b89 <inflate+0x2539>
  418b84:	44 39 f5             	cmp    %r14d,%ebp
  418b87:	72 87                	jb     418b10 <inflate+0x24c0>
                if (state->flags & 0x0200)
  418b89:	41 f6 43 11 02       	testb  $0x2,0x11(%r11)
  418b8e:	0f 85 a4 0f 00 00    	jne    419b38 <inflate+0x34e8>
                    state->check = crc32(state->check, next, copy);
                have -= copy;
  418b94:	41 29 ee             	sub    %ebp,%r14d
                next += copy;
  418b97:	49 01 ef             	add    %rbp,%r15
                if (len) goto inf_leave;
  418b9a:	45 85 e4             	test   %r12d,%r12d
  418b9d:	0f 85 7b 24 00 00    	jne    41b01e <inflate+0x49ce>
  418ba3:	41 8b 43 10          	mov    0x10(%r11),%eax
            }
            else if (state->head != Z_NULL)
                state->head->comment = Z_NULL;
            state->mode = HCRC;
        case HCRC:
            if (state->flags & 0x0200) {
  418ba7:	f6 c4 02             	test   $0x2,%ah
                next += copy;
                if (len) goto inf_leave;
            }
            else if (state->head != Z_NULL)
                state->head->comment = Z_NULL;
            state->mode = HCRC;
  418baa:	41 c7 03 08 00 00 00 	movl   $0x8,(%r11)
        case HCRC:
            if (state->flags & 0x0200) {
  418bb1:	0f 85 c9 02 00 00    	jne    418e80 <inflate+0x2830>
                    state->mode = BAD;
                    break;
                }
                INITBITS();
            }
            if (state->head != Z_NULL) {
  418bb7:	4d 8b 43 28          	mov    0x28(%r11),%r8
  418bbb:	4d 85 c0             	test   %r8,%r8
  418bbe:	74 12                	je     418bd2 <inflate+0x2582>
                state->head->hcrc = (int)((state->flags >> 9) & 1);
  418bc0:	c1 f8 09             	sar    $0x9,%eax
                state->head->done = 1;
  418bc3:	41 c7 40 48 01 00 00 	movl   $0x1,0x48(%r8)
  418bca:	00 
                    break;
                }
                INITBITS();
            }
            if (state->head != Z_NULL) {
                state->head->hcrc = (int)((state->flags >> 9) & 1);
  418bcb:	83 e0 01             	and    $0x1,%eax
  418bce:	41 89 40 44          	mov    %eax,0x44(%r8)
                state->head->done = 1;
            }
            strm->adler = state->check = crc32(0L, Z_NULL, 0);
  418bd2:	31 ff                	xor    %edi,%edi
  418bd4:	31 d2                	xor    %edx,%edx
  418bd6:	31 f6                	xor    %esi,%esi
  418bd8:	4c 89 5c 24 48       	mov    %r11,0x48(%rsp)
            state->mode = TYPE;
            break;
  418bdd:	41 bc 0b 00 00 00    	mov    $0xb,%r12d
            }
            if (state->head != Z_NULL) {
                state->head->hcrc = (int)((state->flags >> 9) & 1);
                state->head->done = 1;
            }
            strm->adler = state->check = crc32(0L, Z_NULL, 0);
  418be3:	e8 68 7f 00 00       	callq  420b50 <crc32>
  418be8:	4c 8b 5c 24 48       	mov    0x48(%rsp),%r11
  418bed:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  418bf2:	49 89 43 18          	mov    %rax,0x18(%r11)
  418bf6:	48 89 47 60          	mov    %rax,0x60(%rdi)
            state->mode = TYPE;
  418bfa:	41 c7 03 0b 00 00 00 	movl   $0xb,(%r11)
            break;
  418c01:	e9 17 db ff ff       	jmpq   41671d <inflate+0xcd>
  418c06:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  418c0d:	00 00 00 
  418c10:	41 8b 7b 5c          	mov    0x5c(%r11),%edi
            }
            state->offset = (unsigned)this.val;
            state->extra = (unsigned)(this.op) & 15;
            state->mode = DISTEXT;
        case DISTEXT:
            if (state->extra) {
  418c14:	85 ff                	test   %edi,%edi
  418c16:	0f 84 3c 0a 00 00    	je     419658 <inflate+0x3008>
                NEEDBITS(state->extra);
  418c1c:	39 fb                	cmp    %edi,%ebx
  418c1e:	0f 83 71 15 00 00    	jae    41a195 <inflate+0x3b45>
  418c24:	45 85 f6             	test   %r14d,%r14d
  418c27:	0f 84 f6 26 00 00    	je     41b323 <inflate+0x4cd3>
  418c2d:	41 89 d9             	mov    %ebx,%r9d
  418c30:	41 f7 d1             	not    %r9d
  418c33:	41 01 f9             	add    %edi,%r9d
  418c36:	41 c1 e9 03          	shr    $0x3,%r9d
  418c3a:	41 83 e1 07          	and    $0x7,%r9d
  418c3e:	0f 84 0d 01 00 00    	je     418d51 <inflate+0x2701>
  418c44:	49 83 c7 01          	add    $0x1,%r15
  418c48:	41 0f b6 47 ff       	movzbl -0x1(%r15),%eax
  418c4d:	89 d9                	mov    %ebx,%ecx
  418c4f:	83 c3 08             	add    $0x8,%ebx
  418c52:	41 83 ee 01          	sub    $0x1,%r14d
  418c56:	48 d3 e0             	shl    %cl,%rax
  418c59:	49 01 c5             	add    %rax,%r13
  418c5c:	39 fb                	cmp    %edi,%ebx
  418c5e:	0f 83 31 15 00 00    	jae    41a195 <inflate+0x3b45>
  418c64:	45 85 f6             	test   %r14d,%r14d
  418c67:	0f 84 2d 27 00 00    	je     41b39a <inflate+0x4d4a>
  418c6d:	41 83 f9 01          	cmp    $0x1,%r9d
  418c71:	0f 84 da 00 00 00    	je     418d51 <inflate+0x2701>
  418c77:	41 83 f9 02          	cmp    $0x2,%r9d
  418c7b:	0f 84 b2 00 00 00    	je     418d33 <inflate+0x26e3>
  418c81:	41 83 f9 03          	cmp    $0x3,%r9d
  418c85:	0f 84 8a 00 00 00    	je     418d15 <inflate+0x26c5>
  418c8b:	41 83 f9 04          	cmp    $0x4,%r9d
  418c8f:	74 66                	je     418cf7 <inflate+0x26a7>
  418c91:	41 83 f9 05          	cmp    $0x5,%r9d
  418c95:	74 42                	je     418cd9 <inflate+0x2689>
  418c97:	41 83 f9 06          	cmp    $0x6,%r9d
  418c9b:	74 1e                	je     418cbb <inflate+0x266b>
  418c9d:	49 83 c7 01          	add    $0x1,%r15
  418ca1:	41 0f b6 6f ff       	movzbl -0x1(%r15),%ebp
  418ca6:	89 d9                	mov    %ebx,%ecx
  418ca8:	83 c3 08             	add    $0x8,%ebx
  418cab:	48 d3 e5             	shl    %cl,%rbp
  418cae:	49 01 ed             	add    %rbp,%r13
  418cb1:	41 83 ee 01          	sub    $0x1,%r14d
  418cb5:	0f 84 d0 27 00 00    	je     41b48b <inflate+0x4e3b>
  418cbb:	49 83 c7 01          	add    $0x1,%r15
  418cbf:	45 0f b6 47 ff       	movzbl -0x1(%r15),%r8d
  418cc4:	89 d9                	mov    %ebx,%ecx
  418cc6:	83 c3 08             	add    $0x8,%ebx
  418cc9:	49 d3 e0             	shl    %cl,%r8
  418ccc:	4d 01 c5             	add    %r8,%r13
  418ccf:	41 83 ee 01          	sub    $0x1,%r14d
  418cd3:	0f 84 c8 27 00 00    	je     41b4a1 <inflate+0x4e51>
  418cd9:	49 83 c7 01          	add    $0x1,%r15
  418cdd:	41 0f b6 57 ff       	movzbl -0x1(%r15),%edx
  418ce2:	89 d9                	mov    %ebx,%ecx
  418ce4:	83 c3 08             	add    $0x8,%ebx
  418ce7:	48 d3 e2             	shl    %cl,%rdx
  418cea:	49 01 d5             	add    %rdx,%r13
  418ced:	41 83 ee 01          	sub    $0x1,%r14d
  418cf1:	0f 84 c0 27 00 00    	je     41b4b7 <inflate+0x4e67>
  418cf7:	49 83 c7 01          	add    $0x1,%r15
  418cfb:	45 0f b6 57 ff       	movzbl -0x1(%r15),%r10d
  418d00:	89 d9                	mov    %ebx,%ecx
  418d02:	83 c3 08             	add    $0x8,%ebx
  418d05:	49 d3 e2             	shl    %cl,%r10
  418d08:	4d 01 d5             	add    %r10,%r13
  418d0b:	41 83 ee 01          	sub    $0x1,%r14d
  418d0f:	0f 84 11 29 00 00    	je     41b626 <inflate+0x4fd6>
  418d15:	49 83 c7 01          	add    $0x1,%r15
  418d19:	41 0f b6 77 ff       	movzbl -0x1(%r15),%esi
  418d1e:	89 d9                	mov    %ebx,%ecx
  418d20:	83 c3 08             	add    $0x8,%ebx
  418d23:	48 d3 e6             	shl    %cl,%rsi
  418d26:	49 01 f5             	add    %rsi,%r13
  418d29:	41 83 ee 01          	sub    $0x1,%r14d
  418d2d:	0f 84 09 29 00 00    	je     41b63c <inflate+0x4fec>
  418d33:	49 83 c7 01          	add    $0x1,%r15
  418d37:	45 0f b6 67 ff       	movzbl -0x1(%r15),%r12d
  418d3c:	89 d9                	mov    %ebx,%ecx
  418d3e:	83 c3 08             	add    $0x8,%ebx
  418d41:	49 d3 e4             	shl    %cl,%r12
  418d44:	4d 01 e5             	add    %r12,%r13
  418d47:	41 83 ee 01          	sub    $0x1,%r14d
  418d4b:	0f 84 68 0d 00 00    	je     419ab9 <inflate+0x3469>
  418d51:	89 d9                	mov    %ebx,%ecx
  418d53:	4d 8d 4f 01          	lea    0x1(%r15),%r9
  418d57:	41 0f b6 41 ff       	movzbl -0x1(%r9),%eax
  418d5c:	8d 69 08             	lea    0x8(%rcx),%ebp
  418d5f:	41 8d 5e ff          	lea    -0x1(%r14),%ebx
  418d63:	4d 89 cf             	mov    %r9,%r15
  418d66:	41 89 de             	mov    %ebx,%r14d
  418d69:	48 d3 e0             	shl    %cl,%rax
  418d6c:	89 e9                	mov    %ebp,%ecx
  418d6e:	49 01 c5             	add    %rax,%r13
  418d71:	39 fd                	cmp    %edi,%ebp
  418d73:	0f 83 1a 14 00 00    	jae    41a193 <inflate+0x3b43>
  418d79:	45 85 f6             	test   %r14d,%r14d
  418d7c:	0f 84 26 25 00 00    	je     41b2a8 <inflate+0x4c58>
  418d82:	49 83 c7 01          	add    $0x1,%r15
  418d86:	45 0f b6 67 ff       	movzbl -0x1(%r15),%r12d
  418d8b:	49 d3 e4             	shl    %cl,%r12
  418d8e:	83 c1 08             	add    $0x8,%ecx
  418d91:	4d 01 e5             	add    %r12,%r13
  418d94:	41 83 ee 01          	sub    $0x1,%r14d
  418d98:	0f 84 b0 25 00 00    	je     41b34e <inflate+0x4cfe>
  418d9e:	4d 8d 79 02          	lea    0x2(%r9),%r15
  418da2:	45 0f b6 77 ff       	movzbl -0x1(%r15),%r14d
  418da7:	89 da                	mov    %ebx,%edx
  418da9:	49 d3 e6             	shl    %cl,%r14
  418dac:	8d 4d 10             	lea    0x10(%rbp),%ecx
  418daf:	4d 01 f5             	add    %r14,%r13
  418db2:	83 ea 02             	sub    $0x2,%edx
  418db5:	0f 84 7e 25 00 00    	je     41b339 <inflate+0x4ce9>
  418dbb:	4d 8d 79 03          	lea    0x3(%r9),%r15
  418dbf:	41 0f b6 47 ff       	movzbl -0x1(%r15),%eax
  418dc4:	89 de                	mov    %ebx,%esi
  418dc6:	48 d3 e0             	shl    %cl,%rax
  418dc9:	8d 4d 18             	lea    0x18(%rbp),%ecx
  418dcc:	49 01 c5             	add    %rax,%r13
  418dcf:	83 ee 03             	sub    $0x3,%esi
  418dd2:	0f 84 04 26 00 00    	je     41b3dc <inflate+0x4d8c>
  418dd8:	4d 8d 79 04          	lea    0x4(%r9),%r15
  418ddc:	45 0f b6 47 ff       	movzbl -0x1(%r15),%r8d
  418de1:	41 89 dc             	mov    %ebx,%r12d
  418de4:	49 d3 e0             	shl    %cl,%r8
  418de7:	8d 4d 20             	lea    0x20(%rbp),%ecx
  418dea:	4d 01 c5             	add    %r8,%r13
  418ded:	41 83 ec 04          	sub    $0x4,%r12d
  418df1:	0f 84 cf 25 00 00    	je     41b3c6 <inflate+0x4d76>
  418df7:	4d 8d 79 05          	lea    0x5(%r9),%r15
  418dfb:	45 0f b6 57 ff       	movzbl -0x1(%r15),%r10d
  418e00:	41 89 de             	mov    %ebx,%r14d
  418e03:	49 d3 e2             	shl    %cl,%r10
  418e06:	8d 4d 28             	lea    0x28(%rbp),%ecx
  418e09:	4d 01 d5             	add    %r10,%r13
  418e0c:	41 83 ee 05          	sub    $0x5,%r14d
  418e10:	0f 84 cc 26 00 00    	je     41b4e2 <inflate+0x4e92>
  418e16:	4d 8d 79 06          	lea    0x6(%r9),%r15
  418e1a:	41 0f b6 57 ff       	movzbl -0x1(%r15),%edx
  418e1f:	89 d8                	mov    %ebx,%eax
  418e21:	48 d3 e2             	shl    %cl,%rdx
  418e24:	8d 4d 30             	lea    0x30(%rbp),%ecx
  418e27:	49 01 d5             	add    %rdx,%r13
  418e2a:	83 e8 06             	sub    $0x6,%eax
  418e2d:	0f 84 9a 26 00 00    	je     41b4cd <inflate+0x4e7d>
  418e33:	4d 8d 79 07          	lea    0x7(%r9),%r15
  418e37:	45 0f b6 4f ff       	movzbl -0x1(%r15),%r9d
  418e3c:	49 d3 e1             	shl    %cl,%r9
  418e3f:	8d 4d 38             	lea    0x38(%rbp),%ecx
  418e42:	4d 01 cd             	add    %r9,%r13
  418e45:	83 eb 07             	sub    $0x7,%ebx
  418e48:	41 89 de             	mov    %ebx,%r14d
  418e4b:	0f 85 02 ff ff ff    	jne    418d53 <inflate+0x2703>
  418e51:	4c 89 db             	mov    %r11,%rbx
  418e54:	44 89 f6             	mov    %r14d,%esi
  418e57:	41 89 ca             	mov    %ecx,%r10d
  418e5a:	4d 89 eb             	mov    %r13,%r11
  418e5d:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  418e62:	e9 39 e7 ff ff       	jmpq   4175a0 <inflate+0xf50>
  418e67:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  418e6e:	00 00 
  418e70:	41 8b 43 10          	mov    0x10(%r11),%eax
            }
            else if (state->head != Z_NULL)
                state->head->comment = Z_NULL;
            state->mode = HCRC;
        case HCRC:
            if (state->flags & 0x0200) {
  418e74:	f6 c4 02             	test   $0x2,%ah
  418e77:	0f 84 3a fd ff ff    	je     418bb7 <inflate+0x2567>
  418e7d:	0f 1f 00             	nopl   (%rax)
                NEEDBITS(16);
  418e80:	83 fb 0f             	cmp    $0xf,%ebx
  418e83:	0f 87 d1 16 00 00    	ja     41a55a <inflate+0x3f0a>
  418e89:	45 85 f6             	test   %r14d,%r14d
  418e8c:	0f 84 e8 16 00 00    	je     41a57a <inflate+0x3f2a>
  418e92:	41 0f b6 17          	movzbl (%r15),%edx
  418e96:	89 d9                	mov    %ebx,%ecx
  418e98:	45 8d 66 ff          	lea    -0x1(%r14),%r12d
  418e9c:	49 8d 6f 01          	lea    0x1(%r15),%rbp
  418ea0:	48 d3 e2             	shl    %cl,%rdx
  418ea3:	8d 4b 08             	lea    0x8(%rbx),%ecx
  418ea6:	49 01 d5             	add    %rdx,%r13
  418ea9:	83 f9 0f             	cmp    $0xf,%ecx
  418eac:	0f 87 de 16 00 00    	ja     41a590 <inflate+0x3f40>
  418eb2:	45 85 e4             	test   %r12d,%r12d
  418eb5:	0f 84 0d 05 00 00    	je     4193c8 <inflate+0x2d78>
  418ebb:	49 8d 6f 02          	lea    0x2(%r15),%rbp
  418ebf:	45 0f b6 7f 01       	movzbl 0x1(%r15),%r15d
  418ec4:	41 83 ee 02          	sub    $0x2,%r14d
  418ec8:	83 c3 10             	add    $0x10,%ebx
  418ecb:	49 d3 e7             	shl    %cl,%r15
  418ece:	4d 01 fd             	add    %r15,%r13
                if (hold != (state->check & 0xffff)) {
  418ed1:	41 0f b7 73 18       	movzwl 0x18(%r11),%esi
  418ed6:	4c 39 ee             	cmp    %r13,%rsi
  418ed9:	0f 84 59 0d 00 00    	je     419c38 <inflate+0x35e8>
                    strm->msg = (char *)"header crc mismatch";
  418edf:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
                    state->mode = BAD;
                    break;
  418ee4:	49 89 ef             	mov    %rbp,%r15
  418ee7:	41 bc 1b 00 00 00    	mov    $0x1b,%r12d
            state->mode = HCRC;
        case HCRC:
            if (state->flags & 0x0200) {
                NEEDBITS(16);
                if (hold != (state->check & 0xffff)) {
                    strm->msg = (char *)"header crc mismatch";
  418eed:	48 c7 40 30 ef 92 43 	movq   $0x4392ef,0x30(%rax)
  418ef4:	00 
                    state->mode = BAD;
  418ef5:	41 c7 03 1b 00 00 00 	movl   $0x1b,(%r11)
                    break;
  418efc:	e9 1c d8 ff ff       	jmpq   41671d <inflate+0xcd>
  418f01:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            state->mode = hold & 0x200 ? DICTID : TYPE;
            INITBITS();
            break;
#ifdef GUNZIP
        case FLAGS:
            NEEDBITS(16);
  418f08:	83 fb 0f             	cmp    $0xf,%ebx
  418f0b:	0f 87 c3 20 00 00    	ja     41afd4 <inflate+0x4984>
  418f11:	45 85 f6             	test   %r14d,%r14d
  418f14:	0f 84 d8 20 00 00    	je     41aff2 <inflate+0x49a2>
  418f1a:	41 0f b6 07          	movzbl (%r15),%eax
  418f1e:	89 d9                	mov    %ebx,%ecx
  418f20:	41 8d 7e ff          	lea    -0x1(%r14),%edi
  418f24:	49 8d 6f 01          	lea    0x1(%r15),%rbp
  418f28:	48 d3 e0             	shl    %cl,%rax
  418f2b:	8d 4b 08             	lea    0x8(%rbx),%ecx
  418f2e:	49 01 c5             	add    %rax,%r13
  418f31:	83 f9 0f             	cmp    $0xf,%ecx
  418f34:	0f 87 87 21 00 00    	ja     41b0c1 <inflate+0x4a71>
  418f3a:	85 ff                	test   %edi,%edi
  418f3c:	0f 84 c5 0c 00 00    	je     419c07 <inflate+0x35b7>
  418f42:	49 8d 6f 02          	lea    0x2(%r15),%rbp
  418f46:	45 0f b6 7f 01       	movzbl 0x1(%r15),%r15d
  418f4b:	41 83 ee 02          	sub    $0x2,%r14d
  418f4f:	83 c3 10             	add    $0x10,%ebx
  418f52:	49 d3 e7             	shl    %cl,%r15
  418f55:	4d 01 fd             	add    %r15,%r13
            state->flags = (int)(hold);
            if ((state->flags & 0xff) != Z_DEFLATED) {
  418f58:	41 80 fd 08          	cmp    $0x8,%r13b
            INITBITS();
            break;
#ifdef GUNZIP
        case FLAGS:
            NEEDBITS(16);
            state->flags = (int)(hold);
  418f5c:	44 89 e8             	mov    %r13d,%eax
  418f5f:	45 89 6b 10          	mov    %r13d,0x10(%r11)
            if ((state->flags & 0xff) != Z_DEFLATED) {
  418f63:	0f 84 ff 07 00 00    	je     419768 <inflate+0x3118>
                strm->msg = (char *)"unknown compression method";
  418f69:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
                state->mode = BAD;
                break;
  418f6e:	49 89 ef             	mov    %rbp,%r15
  418f71:	41 bc 1b 00 00 00    	mov    $0x1b,%r12d
#ifdef GUNZIP
        case FLAGS:
            NEEDBITS(16);
            state->flags = (int)(hold);
            if ((state->flags & 0xff) != Z_DEFLATED) {
                strm->msg = (char *)"unknown compression method";
  418f77:	48 c7 46 30 a7 92 43 	movq   $0x4392a7,0x30(%rsi)
  418f7e:	00 
                state->mode = BAD;
  418f7f:	41 c7 03 1b 00 00 00 	movl   $0x1b,(%r11)
                break;
  418f86:	e9 92 d7 ff ff       	jmpq   41671d <inflate+0xcd>
  418f8b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
            *put++ = (unsigned char)(state->length);
            left--;
            state->mode = LEN;
            break;
        case CHECK:
            if (state->wrap) {
  418f90:	41 8b 6b 08          	mov    0x8(%r11),%ebp
  418f94:	85 ed                	test   %ebp,%ebp
  418f96:	0f 84 44 07 00 00    	je     4196e0 <inflate+0x3090>
                NEEDBITS(32);
  418f9c:	83 fb 1f             	cmp    $0x1f,%ebx
  418f9f:	0f 87 69 25 00 00    	ja     41b50e <inflate+0x4ebe>
  418fa5:	45 85 f6             	test   %r14d,%r14d
  418fa8:	0f 84 94 25 00 00    	je     41b542 <inflate+0x4ef2>
  418fae:	41 0f b6 07          	movzbl (%r15),%eax
  418fb2:	89 d9                	mov    %ebx,%ecx
  418fb4:	41 8d 56 ff          	lea    -0x1(%r14),%edx
  418fb8:	4d 8d 67 01          	lea    0x1(%r15),%r12
  418fbc:	48 d3 e0             	shl    %cl,%rax
  418fbf:	8d 4b 08             	lea    0x8(%rbx),%ecx
  418fc2:	49 01 c5             	add    %rax,%r13
  418fc5:	83 f9 1f             	cmp    $0x1f,%ecx
  418fc8:	0f 87 82 1d 00 00    	ja     41ad50 <inflate+0x4700>
  418fce:	85 d2                	test   %edx,%edx
  418fd0:	0f 84 62 1d 00 00    	je     41ad38 <inflate+0x46e8>
  418fd6:	41 0f b6 7f 01       	movzbl 0x1(%r15),%edi
  418fdb:	41 8d 56 fe          	lea    -0x2(%r14),%edx
  418fdf:	4d 8d 67 02          	lea    0x2(%r15),%r12
  418fe3:	48 d3 e7             	shl    %cl,%rdi
  418fe6:	8d 4b 10             	lea    0x10(%rbx),%ecx
  418fe9:	49 01 fd             	add    %rdi,%r13
  418fec:	83 f9 1f             	cmp    $0x1f,%ecx
  418fef:	0f 87 5b 1d 00 00    	ja     41ad50 <inflate+0x4700>
  418ff5:	85 d2                	test   %edx,%edx
  418ff7:	0f 84 3b 1d 00 00    	je     41ad38 <inflate+0x46e8>
  418ffd:	45 0f b6 57 02       	movzbl 0x2(%r15),%r10d
  419002:	41 8d 56 fd          	lea    -0x3(%r14),%edx
  419006:	4d 8d 67 03          	lea    0x3(%r15),%r12
  41900a:	49 d3 e2             	shl    %cl,%r10
  41900d:	8d 4b 18             	lea    0x18(%rbx),%ecx
  419010:	4d 01 d5             	add    %r10,%r13
  419013:	83 f9 1f             	cmp    $0x1f,%ecx
  419016:	0f 87 34 1d 00 00    	ja     41ad50 <inflate+0x4700>
  41901c:	85 d2                	test   %edx,%edx
  41901e:	0f 84 14 1d 00 00    	je     41ad38 <inflate+0x46e8>
  419024:	4d 8d 67 04          	lea    0x4(%r15),%r12
  419028:	45 0f b6 7f 03       	movzbl 0x3(%r15),%r15d
  41902d:	41 83 ee 04          	sub    $0x4,%r14d
  419031:	83 c3 20             	add    $0x20,%ebx
  419034:	49 d3 e7             	shl    %cl,%r15
  419037:	4d 01 fd             	add    %r15,%r13
                out -= left;
  41903a:	8b 54 24 18          	mov    0x18(%rsp),%edx
  41903e:	2b 54 24 10          	sub    0x10(%rsp),%edx
                strm->total_out += out;
  419042:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  419047:	89 d5                	mov    %edx,%ebp
  419049:	48 01 6e 28          	add    %rbp,0x28(%rsi)
                state->total += out;
  41904d:	49 01 6b 20          	add    %rbp,0x20(%r11)
                if (out)
  419051:	85 d2                	test   %edx,%edx
  419053:	74 35                	je     41908a <inflate+0x2a3a>
                    strm->adler = state->check =
                        UPDATE(state->check, put - out, out);
  419055:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  41905a:	45 8b 43 10          	mov    0x10(%r11),%r8d
  41905e:	49 8b 7b 18          	mov    0x18(%r11),%rdi
  419062:	4c 89 5c 24 18       	mov    %r11,0x18(%rsp)
  419067:	48 29 ee             	sub    %rbp,%rsi
  41906a:	45 85 c0             	test   %r8d,%r8d
  41906d:	0f 84 fd 1c 00 00    	je     41ad70 <inflate+0x4720>
  419073:	e8 d8 7a 00 00       	callq  420b50 <crc32>
  419078:	4c 8b 5c 24 18       	mov    0x18(%rsp),%r11
                NEEDBITS(32);
                out -= left;
                strm->total_out += out;
                state->total += out;
                if (out)
                    strm->adler = state->check =
  41907d:	4c 8b 4c 24 20       	mov    0x20(%rsp),%r9
  419082:	49 89 43 18          	mov    %rax,0x18(%r11)
  419086:	49 89 41 60          	mov    %rax,0x60(%r9)
                        UPDATE(state->check, put - out, out);
                out = left;
                if ((
#ifdef GUNZIP
                     state->flags ? hold :
  41908a:	41 8b 7b 10          	mov    0x10(%r11),%edi
  41908e:	4d 89 ef             	mov    %r13,%r15
  419091:	85 ff                	test   %edi,%edi
  419093:	75 36                	jne    4190cb <inflate+0x2a7b>
#endif
                     REVERSE(hold)) != state->check) {
  419095:	4c 89 ea             	mov    %r13,%rdx
  419098:	49 c1 ef 18          	shr    $0x18,%r15
  41909c:	4d 89 ea             	mov    %r13,%r10
  41909f:	48 c1 ea 08          	shr    $0x8,%rdx
  4190a3:	41 0f b6 c7          	movzbl %r15b,%eax
  4190a7:	41 81 e2 00 ff 00 00 	and    $0xff00,%r10d
  4190ae:	81 e2 00 ff 00 00    	and    $0xff00,%edx
  4190b4:	4c 89 e9             	mov    %r13,%rcx
  4190b7:	49 c1 e2 08          	shl    $0x8,%r10
  4190bb:	48 01 c2             	add    %rax,%rdx
  4190be:	48 c1 e1 18          	shl    $0x18,%rcx
  4190c2:	4c 01 d2             	add    %r10,%rdx
  4190c5:	41 89 cf             	mov    %ecx,%r15d
                    strm->adler = state->check =
                        UPDATE(state->check, put - out, out);
                out = left;
                if ((
#ifdef GUNZIP
                     state->flags ? hold :
  4190c8:	49 01 d7             	add    %rdx,%r15
                state->total += out;
                if (out)
                    strm->adler = state->check =
                        UPDATE(state->check, put - out, out);
                out = left;
                if ((
  4190cb:	4d 3b 7b 18          	cmp    0x18(%r11),%r15
  4190cf:	0f 84 f4 05 00 00    	je     4196c9 <inflate+0x3079>
#ifdef GUNZIP
                     state->flags ? hold :
#endif
                     REVERSE(hold)) != state->check) {
                    strm->msg = (char *)"incorrect data check";
  4190d5:	4c 8b 7c 24 20       	mov    0x20(%rsp),%r15
                    state->mode = BAD;
                    break;
  4190da:	44 8b 44 24 10       	mov    0x10(%rsp),%r8d
                if ((
#ifdef GUNZIP
                     state->flags ? hold :
#endif
                     REVERSE(hold)) != state->check) {
                    strm->msg = (char *)"incorrect data check";
  4190df:	49 c7 47 30 e8 93 43 	movq   $0x4393e8,0x30(%r15)
  4190e6:	00 
                    state->mode = BAD;
                    break;
  4190e7:	44 89 44 24 18       	mov    %r8d,0x18(%rsp)
  4190ec:	4d 89 e7             	mov    %r12,%r15
#ifdef GUNZIP
                     state->flags ? hold :
#endif
                     REVERSE(hold)) != state->check) {
                    strm->msg = (char *)"incorrect data check";
                    state->mode = BAD;
  4190ef:	41 c7 03 1b 00 00 00 	movl   $0x1b,(%r11)
                    break;
  4190f6:	41 bc 1b 00 00 00    	mov    $0x1b,%r12d
  4190fc:	e9 1c d6 ff ff       	jmpq   41671d <inflate+0xcd>
  419101:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  419108:	89 d9                	mov    %ebx,%ecx
        case CODELENS:
            while (state->have < state->nlen + state->ndist) {
                for (;;) {
                    this = state->lencode[BITS(state->lenbits)];
                    if ((unsigned)(this.bits) <= bits) break;
                    PULLBYTE();
  41910a:	4d 8d 4f 01          	lea    0x1(%r15),%r9
  41910e:	41 0f b6 59 ff       	movzbl -0x1(%r9),%ebx
            state->have = 0;
            state->mode = CODELENS;
        case CODELENS:
            while (state->have < state->nlen + state->ndist) {
                for (;;) {
                    this = state->lencode[BITS(state->lenbits)];
  419113:	41 89 d0             	mov    %edx,%r8d
                    if ((unsigned)(this.bits) <= bits) break;
                    PULLBYTE();
  419116:	45 8d 56 ff          	lea    -0x1(%r14),%r10d
  41911a:	4d 89 cf             	mov    %r9,%r15
  41911d:	45 89 d6             	mov    %r10d,%r14d
  419120:	48 d3 e3             	shl    %cl,%rbx
  419123:	49 01 dd             	add    %rbx,%r13
  419126:	8d 59 08             	lea    0x8(%rcx),%ebx
            state->have = 0;
            state->mode = CODELENS;
        case CODELENS:
            while (state->have < state->nlen + state->ndist) {
                for (;;) {
                    this = state->lencode[BITS(state->lenbits)];
  419129:	45 21 e8             	and    %r13d,%r8d
  41912c:	4a 8d 04 86          	lea    (%rsi,%r8,4),%rax
                    if ((unsigned)(this.bits) <= bits) break;
                    PULLBYTE();
  419130:	89 d9                	mov    %ebx,%ecx
            state->have = 0;
            state->mode = CODELENS;
        case CODELENS:
            while (state->have < state->nlen + state->ndist) {
                for (;;) {
                    this = state->lencode[BITS(state->lenbits)];
  419132:	44 0f b6 40 01       	movzbl 0x1(%rax),%r8d
  419137:	0f b7 78 02          	movzwl 0x2(%rax),%edi
                    if ((unsigned)(this.bits) <= bits) break;
  41913b:	41 0f b6 c0          	movzbl %r8b,%eax
  41913f:	39 d8                	cmp    %ebx,%eax
  419141:	0f 86 bb 09 00 00    	jbe    419b02 <inflate+0x34b2>
                    PULLBYTE();
  419147:	49 83 c7 01          	add    $0x1,%r15
  41914b:	41 0f b6 7f ff       	movzbl -0x1(%r15),%edi
            state->have = 0;
            state->mode = CODELENS;
        case CODELENS:
            while (state->have < state->nlen + state->ndist) {
                for (;;) {
                    this = state->lencode[BITS(state->lenbits)];
  419150:	41 89 d0             	mov    %edx,%r8d
                    if ((unsigned)(this.bits) <= bits) break;
                    PULLBYTE();
  419153:	41 83 ee 01          	sub    $0x1,%r14d
  419157:	48 d3 e7             	shl    %cl,%rdi
  41915a:	83 c1 08             	add    $0x8,%ecx
  41915d:	49 01 fd             	add    %rdi,%r13
            state->have = 0;
            state->mode = CODELENS;
        case CODELENS:
            while (state->have < state->nlen + state->ndist) {
                for (;;) {
                    this = state->lencode[BITS(state->lenbits)];
  419160:	45 21 e8             	and    %r13d,%r8d
  419163:	4a 8d 04 86          	lea    (%rsi,%r8,4),%rax
  419167:	44 0f b6 40 01       	movzbl 0x1(%rax),%r8d
  41916c:	0f b7 78 02          	movzwl 0x2(%rax),%edi
                    if ((unsigned)(this.bits) <= bits) break;
  419170:	41 0f b6 c0          	movzbl %r8b,%eax
  419174:	39 c8                	cmp    %ecx,%eax
  419176:	0f 86 84 09 00 00    	jbe    419b00 <inflate+0x34b0>
                    PULLBYTE();
  41917c:	4d 8d 79 02          	lea    0x2(%r9),%r15
  419180:	41 0f b6 7f ff       	movzbl -0x1(%r15),%edi
            state->have = 0;
            state->mode = CODELENS;
        case CODELENS:
            while (state->have < state->nlen + state->ndist) {
                for (;;) {
                    this = state->lencode[BITS(state->lenbits)];
  419185:	41 89 d0             	mov    %edx,%r8d
                    if ((unsigned)(this.bits) <= bits) break;
                    PULLBYTE();
  419188:	45 8d 72 fe          	lea    -0x2(%r10),%r14d
  41918c:	48 d3 e7             	shl    %cl,%rdi
  41918f:	8d 4b 10             	lea    0x10(%rbx),%ecx
  419192:	49 01 fd             	add    %rdi,%r13
            state->have = 0;
            state->mode = CODELENS;
        case CODELENS:
            while (state->have < state->nlen + state->ndist) {
                for (;;) {
                    this = state->lencode[BITS(state->lenbits)];
  419195:	45 21 e8             	and    %r13d,%r8d
  419198:	4a 8d 04 86          	lea    (%rsi,%r8,4),%rax
  41919c:	44 0f b6 40 01       	movzbl 0x1(%rax),%r8d
  4191a1:	0f b7 78 02          	movzwl 0x2(%rax),%edi
                    if ((unsigned)(this.bits) <= bits) break;
  4191a5:	41 0f b6 c0          	movzbl %r8b,%eax
  4191a9:	39 c8                	cmp    %ecx,%eax
  4191ab:	0f 86 4f 09 00 00    	jbe    419b00 <inflate+0x34b0>
                    PULLBYTE();
  4191b1:	4d 8d 79 03          	lea    0x3(%r9),%r15
  4191b5:	45 8d 72 fd          	lea    -0x3(%r10),%r14d
            state->have = 0;
            state->mode = CODELENS;
        case CODELENS:
            while (state->have < state->nlen + state->ndist) {
                for (;;) {
                    this = state->lencode[BITS(state->lenbits)];
  4191b9:	41 89 d1             	mov    %edx,%r9d
                    if ((unsigned)(this.bits) <= bits) break;
                    PULLBYTE();
  4191bc:	45 0f b6 57 ff       	movzbl -0x1(%r15),%r10d
  4191c1:	49 d3 e2             	shl    %cl,%r10
  4191c4:	8d 4b 18             	lea    0x18(%rbx),%ecx
  4191c7:	4d 01 d5             	add    %r10,%r13
            state->have = 0;
            state->mode = CODELENS;
        case CODELENS:
            while (state->have < state->nlen + state->ndist) {
                for (;;) {
                    this = state->lencode[BITS(state->lenbits)];
  4191ca:	45 21 e9             	and    %r13d,%r9d
  4191cd:	4a 8d 1c 8e          	lea    (%rsi,%r9,4),%rbx
  4191d1:	44 0f b6 43 01       	movzbl 0x1(%rbx),%r8d
  4191d6:	0f b7 7b 02          	movzwl 0x2(%rbx),%edi
                    if ((unsigned)(this.bits) <= bits) break;
  4191da:	41 0f b6 c0          	movzbl %r8b,%eax
  4191de:	39 c8                	cmp    %ecx,%eax
  4191e0:	0f 86 1a 09 00 00    	jbe    419b00 <inflate+0x34b0>
                    PULLBYTE();
  4191e6:	45 85 f6             	test   %r14d,%r14d
  4191e9:	0f 85 1b ff ff ff    	jne    41910a <inflate+0x2aba>
  4191ef:	4c 89 db             	mov    %r11,%rbx
  4191f2:	44 89 f6             	mov    %r14d,%esi
  4191f5:	41 89 ca             	mov    %ecx,%r10d
  4191f8:	4d 89 eb             	mov    %r13,%r11
  4191fb:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  419200:	e9 9b e3 ff ff       	jmpq   4175a0 <inflate+0xf50>
  419205:	0f 1f 00             	nopl   (%rax)
  419208:	89 d9                	mov    %ebx,%ecx
                state->head->text = (int)((hold >> 8) & 1);
            if (state->flags & 0x0200) CRC2(state->check, hold);
            INITBITS();
            state->mode = TIME;
        case TIME:
            NEEDBITS(32);
  41920a:	4d 8d 67 01          	lea    0x1(%r15),%r12
  41920e:	45 0f b6 4c 24 ff    	movzbl -0x1(%r12),%r9d
  419214:	8d 71 08             	lea    0x8(%rcx),%esi
  419217:	41 8d 5e ff          	lea    -0x1(%r14),%ebx
  41921b:	4d 89 e7             	mov    %r12,%r15
  41921e:	41 89 de             	mov    %ebx,%r14d
  419221:	49 d3 e1             	shl    %cl,%r9
  419224:	89 f1                	mov    %esi,%ecx
  419226:	4d 01 cd             	add    %r9,%r13
  419229:	83 fe 1f             	cmp    $0x1f,%esi
  41922c:	0f 87 27 09 00 00    	ja     419b59 <inflate+0x3509>
  419232:	45 85 f6             	test   %r14d,%r14d
  419235:	0f 84 4b 1c 00 00    	je     41ae86 <inflate+0x4836>
  41923b:	49 83 c7 01          	add    $0x1,%r15
  41923f:	41 0f b6 47 ff       	movzbl -0x1(%r15),%eax
  419244:	48 d3 e0             	shl    %cl,%rax
  419247:	83 c1 08             	add    $0x8,%ecx
  41924a:	49 01 c5             	add    %rax,%r13
  41924d:	41 83 ee 01          	sub    $0x1,%r14d
  419251:	0f 84 e9 1c 00 00    	je     41af40 <inflate+0x48f0>
  419257:	4d 8d 7c 24 02       	lea    0x2(%r12),%r15
  41925c:	41 0f b6 7f ff       	movzbl -0x1(%r15),%edi
  419261:	41 89 de             	mov    %ebx,%r14d
  419264:	48 d3 e7             	shl    %cl,%rdi
  419267:	8d 4e 10             	lea    0x10(%rsi),%ecx
  41926a:	49 01 fd             	add    %rdi,%r13
  41926d:	41 83 ee 02          	sub    $0x2,%r14d
  419271:	0f 84 0b 1d 00 00    	je     41af82 <inflate+0x4932>
  419277:	4d 8d 7c 24 03       	lea    0x3(%r12),%r15
  41927c:	45 0f b6 57 ff       	movzbl -0x1(%r15),%r10d
  419281:	41 89 d9             	mov    %ebx,%r9d
  419284:	49 d3 e2             	shl    %cl,%r10
  419287:	8d 4e 18             	lea    0x18(%rsi),%ecx
  41928a:	4d 01 d5             	add    %r10,%r13
  41928d:	41 83 e9 03          	sub    $0x3,%r9d
  419291:	0f 84 01 1d 00 00    	je     41af98 <inflate+0x4948>
  419297:	4d 8d 7c 24 04       	lea    0x4(%r12),%r15
  41929c:	41 0f b6 57 ff       	movzbl -0x1(%r15),%edx
  4192a1:	41 89 d8             	mov    %ebx,%r8d
  4192a4:	48 d3 e2             	shl    %cl,%rdx
  4192a7:	8d 4e 20             	lea    0x20(%rsi),%ecx
  4192aa:	49 01 d5             	add    %rdx,%r13
  4192ad:	41 83 e8 04          	sub    $0x4,%r8d
  4192b1:	0f 84 7d 1d 00 00    	je     41b034 <inflate+0x49e4>
  4192b7:	4d 8d 7c 24 05       	lea    0x5(%r12),%r15
  4192bc:	41 0f b6 6f ff       	movzbl -0x1(%r15),%ebp
  4192c1:	89 d8                	mov    %ebx,%eax
  4192c3:	48 d3 e5             	shl    %cl,%rbp
  4192c6:	8d 4e 28             	lea    0x28(%rsi),%ecx
  4192c9:	49 01 ed             	add    %rbp,%r13
  4192cc:	83 e8 05             	sub    $0x5,%eax
  4192cf:	0f 84 75 1d 00 00    	je     41b04a <inflate+0x49fa>
  4192d5:	4d 8d 7c 24 06       	lea    0x6(%r12),%r15
  4192da:	41 0f b6 7f ff       	movzbl -0x1(%r15),%edi
  4192df:	41 89 de             	mov    %ebx,%r14d
  4192e2:	48 d3 e7             	shl    %cl,%rdi
  4192e5:	8d 4e 30             	lea    0x30(%rsi),%ecx
  4192e8:	49 01 fd             	add    %rdi,%r13
  4192eb:	41 83 ee 06          	sub    $0x6,%r14d
  4192ef:	0f 84 01 1e 00 00    	je     41b0f6 <inflate+0x4aa6>
  4192f5:	4d 8d 7c 24 07       	lea    0x7(%r12),%r15
  4192fa:	45 0f b6 67 ff       	movzbl -0x1(%r15),%r12d
  4192ff:	49 d3 e4             	shl    %cl,%r12
  419302:	8d 4e 38             	lea    0x38(%rsi),%ecx
  419305:	4d 01 e5             	add    %r12,%r13
  419308:	83 eb 07             	sub    $0x7,%ebx
  41930b:	41 89 de             	mov    %ebx,%r14d
  41930e:	0f 85 f6 fe ff ff    	jne    41920a <inflate+0x2bba>
  419314:	4c 89 db             	mov    %r11,%rbx
  419317:	44 89 f6             	mov    %r14d,%esi
  41931a:	41 89 ca             	mov    %ecx,%r10d
  41931d:	4d 89 eb             	mov    %r13,%r11
  419320:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  419325:	e9 76 e2 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41932a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
#endif
    static const unsigned short order[19] = /* permutation of code lengths */
        {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};

    if (strm == Z_NULL || strm->state == Z_NULL || strm->next_out == Z_NULL ||
        (strm->next_in == Z_NULL && strm->avail_in != 0))
  419330:	8b 4f 08             	mov    0x8(%rdi),%ecx
  419333:	85 c9                	test   %ecx,%ecx
  419335:	75 49                	jne    419380 <inflate+0x2d30>
  419337:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%rsp)
  41933e:	00 
  41933f:	e9 6c d3 ff ff       	jmpq   4166b0 <inflate+0x60>
  419344:	0f 1f 40 00          	nopl   0x0(%rax)
    strm->total_in += in;
    strm->total_out += out;
    state->total += out;
    if (state->wrap && out)
        strm->adler = state->check =
            UPDATE(state->check, strm->next_out - out, out);
  419348:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
  41934c:	4c 29 ee             	sub    %r13,%rsi
  41934f:	44 89 e2             	mov    %r12d,%edx
  419352:	e8 d9 6f 00 00       	callq  420330 <adler32>
  419357:	e9 78 e3 ff ff       	jmpq   4176d4 <inflate+0x1084>
  41935c:	0f 1f 40 00          	nopl   0x0(%rax)
    }

    /* copy state->wsize or less output bytes into the circular window */
    copy = out - strm->avail_out;
    if (copy >= state->wsize) {
        zmemcpy(state->window, strm->next_out - state->wsize, state->wsize);
  419360:	48 29 d6             	sub    %rdx,%rsi
  419363:	e8 88 dc fe ff       	callq  406ff0 <memcpy@plt>
        state->write = 0;
        state->whave = state->wsize;
  419368:	41 8b 54 24 34       	mov    0x34(%r12),%edx

    /* copy state->wsize or less output bytes into the circular window */
    copy = out - strm->avail_out;
    if (copy >= state->wsize) {
        zmemcpy(state->window, strm->next_out - state->wsize, state->wsize);
        state->write = 0;
  41936d:	41 c7 44 24 3c 00 00 	movl   $0x0,0x3c(%r12)
  419374:	00 00 
        state->whave = state->wsize;
  419376:	41 89 54 24 38       	mov    %edx,0x38(%r12)
  41937b:	e9 04 e3 ff ff       	jmpq   417684 <inflate+0x1034>
    static const unsigned short order[19] = /* permutation of code lengths */
        {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};

    if (strm == Z_NULL || strm->state == Z_NULL || strm->next_out == Z_NULL ||
        (strm->next_in == Z_NULL && strm->avail_in != 0))
        return Z_STREAM_ERROR;
  419380:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  419385:	e9 ce e1 ff ff       	jmpq   417558 <inflate+0xf08>
  41938a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            state->write = copy;
            state->whave = state->wsize;
        }
        else {
            state->write += dist;
            if (state->write == state->wsize) state->write = 0;
  419390:	41 c7 44 24 3c 00 00 	movl   $0x0,0x3c(%r12)
  419397:	00 00 
  419399:	e9 d6 e2 ff ff       	jmpq   417674 <inflate+0x1024>
  41939e:	66 90                	xchg   %ax,%ax
        dist = state->wsize - state->write;
        if (dist > copy) dist = copy;
        zmemcpy(state->window + state->write, strm->next_out - copy, dist);
        copy -= dist;
        if (copy) {
            zmemcpy(state->window, strm->next_out - copy, copy);
  4193a0:	49 8b 76 18          	mov    0x18(%r14),%rsi
  4193a4:	49 8b 7c 24 40       	mov    0x40(%r12),%rdi
  4193a9:	44 89 ea             	mov    %r13d,%edx
  4193ac:	48 29 d6             	sub    %rdx,%rsi
  4193af:	e8 3c dc fe ff       	callq  406ff0 <memcpy@plt>
            state->write = copy;
            state->whave = state->wsize;
  4193b4:	41 8b 44 24 34       	mov    0x34(%r12),%eax
        if (dist > copy) dist = copy;
        zmemcpy(state->window + state->write, strm->next_out - copy, dist);
        copy -= dist;
        if (copy) {
            zmemcpy(state->window, strm->next_out - copy, copy);
            state->write = copy;
  4193b9:	45 89 6c 24 3c       	mov    %r13d,0x3c(%r12)
            state->whave = state->wsize;
  4193be:	41 89 44 24 38       	mov    %eax,0x38(%r12)
  4193c3:	e9 bc e2 ff ff       	jmpq   417684 <inflate+0x1034>
  4193c8:	4c 89 db             	mov    %r11,%rbx
  4193cb:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  4193d0:	4d 89 eb             	mov    %r13,%r11
            else if (state->head != Z_NULL)
                state->head->comment = Z_NULL;
            state->mode = HCRC;
        case HCRC:
            if (state->flags & 0x0200) {
                NEEDBITS(16);
  4193d3:	41 89 ca             	mov    %ecx,%r10d
  4193d6:	49 89 ef             	mov    %rbp,%r15
  4193d9:	31 f6                	xor    %esi,%esi
  4193db:	e9 c0 e1 ff ff       	jmpq   4175a0 <inflate+0xf50>
  4193e0:	89 cb                	mov    %ecx,%ebx
  4193e2:	4c 8b 5c 24 48       	mov    0x48(%rsp),%r11
            for (;;) {
                this = state->distcode[BITS(state->distbits)];
                if ((unsigned)(this.bits) <= bits) break;
                PULLBYTE();
            }
            if ((this.op & 0xf0) == 0) {
  4193e7:	40 f6 c7 f0          	test   $0xf0,%dil
  4193eb:	0f 85 17 03 00 00    	jne    419708 <inflate+0x30b8>
                last = this;
                for (;;) {
                    this = state->distcode[last.val +
                            (BITS(last.bits + last.op) >> last.bits)];
  4193f1:	8d 0c 07             	lea    (%rdi,%rax,1),%ecx
  4193f4:	41 b8 01 00 00 00    	mov    $0x1,%r8d
                PULLBYTE();
            }
            if ((this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->distcode[last.val +
  4193fa:	41 0f b7 ea          	movzwl %r10w,%ebp
                            (BITS(last.bits + last.op) >> last.bits)];
  4193fe:	41 d3 e0             	shl    %cl,%r8d
  419401:	89 d1                	mov    %edx,%ecx
  419403:	41 83 e8 01          	sub    $0x1,%r8d
  419407:	45 21 c4             	and    %r8d,%r12d
  41940a:	41 d3 ec             	shr    %cl,%r12d
  41940d:	44 89 e7             	mov    %r12d,%edi
                PULLBYTE();
            }
            if ((this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->distcode[last.val +
  419410:	01 ef                	add    %ebp,%edi
  419412:	49 8d 14 b9          	lea    (%r9,%rdi,4),%rdx
                            (BITS(last.bits + last.op) >> last.bits)];
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
  419416:	0f b6 72 01          	movzbl 0x1(%rdx),%esi
                PULLBYTE();
            }
            if ((this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->distcode[last.val +
  41941a:	0f b6 3a             	movzbl (%rdx),%edi
  41941d:	44 0f b7 52 02       	movzwl 0x2(%rdx),%r10d
                            (BITS(last.bits + last.op) >> last.bits)];
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
  419422:	44 8d 24 30          	lea    (%rax,%rsi,1),%r12d
  419426:	89 f2                	mov    %esi,%edx
  419428:	44 39 e3             	cmp    %r12d,%ebx
  41942b:	0f 83 44 01 00 00    	jae    419575 <inflate+0x2f25>
                    PULLBYTE();
  419431:	45 85 f6             	test   %r14d,%r14d
  419434:	0f 84 68 21 00 00    	je     41b5a2 <inflate+0x4f52>
  41943a:	49 83 c7 01          	add    $0x1,%r15
  41943e:	45 0f b6 57 ff       	movzbl -0x1(%r15),%r10d
  419443:	89 d9                	mov    %ebx,%ecx
            }
            if ((this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->distcode[last.val +
                            (BITS(last.bits + last.op) >> last.bits)];
  419445:	44 89 c6             	mov    %r8d,%esi
  419448:	41 83 ee 01          	sub    $0x1,%r14d
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
                    PULLBYTE();
  41944c:	83 c3 08             	add    $0x8,%ebx
  41944f:	45 89 f4             	mov    %r14d,%r12d
  419452:	41 83 e4 01          	and    $0x1,%r12d
  419456:	49 d3 e2             	shl    %cl,%r10
            }
            if ((this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->distcode[last.val +
                            (BITS(last.bits + last.op) >> last.bits)];
  419459:	89 c1                	mov    %eax,%ecx
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
                    PULLBYTE();
  41945b:	4d 01 d5             	add    %r10,%r13
            }
            if ((this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->distcode[last.val +
                            (BITS(last.bits + last.op) >> last.bits)];
  41945e:	44 21 ee             	and    %r13d,%esi
  419461:	d3 ee                	shr    %cl,%esi
                PULLBYTE();
            }
            if ((this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->distcode[last.val +
  419463:	01 ee                	add    %ebp,%esi
  419465:	49 8d 14 b1          	lea    (%r9,%rsi,4),%rdx
                            (BITS(last.bits + last.op) >> last.bits)];
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
  419469:	0f b6 72 01          	movzbl 0x1(%rdx),%esi
                PULLBYTE();
            }
            if ((this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->distcode[last.val +
  41946d:	0f b6 3a             	movzbl (%rdx),%edi
  419470:	44 0f b7 52 02       	movzwl 0x2(%rdx),%r10d
                            (BITS(last.bits + last.op) >> last.bits)];
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
  419475:	8d 0c 06             	lea    (%rsi,%rax,1),%ecx
  419478:	89 f2                	mov    %esi,%edx
  41947a:	39 d9                	cmp    %ebx,%ecx
  41947c:	0f 86 f3 00 00 00    	jbe    419575 <inflate+0x2f25>
                    PULLBYTE();
  419482:	45 85 f6             	test   %r14d,%r14d
  419485:	0f 84 e4 22 00 00    	je     41b76f <inflate+0x511f>
  41948b:	45 85 e4             	test   %r12d,%r12d
  41948e:	0f 84 9e 00 00 00    	je     419532 <inflate+0x2ee2>
  419494:	49 83 c7 01          	add    $0x1,%r15
  419498:	41 0f b6 7f ff       	movzbl -0x1(%r15),%edi
  41949d:	89 d9                	mov    %ebx,%ecx
            }
            if ((this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->distcode[last.val +
                            (BITS(last.bits + last.op) >> last.bits)];
  41949f:	45 89 c4             	mov    %r8d,%r12d
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
                    PULLBYTE();
  4194a2:	83 c3 08             	add    $0x8,%ebx
  4194a5:	41 83 ee 01          	sub    $0x1,%r14d
  4194a9:	48 d3 e7             	shl    %cl,%rdi
            }
            if ((this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->distcode[last.val +
                            (BITS(last.bits + last.op) >> last.bits)];
  4194ac:	89 c1                	mov    %eax,%ecx
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
                    PULLBYTE();
  4194ae:	49 01 fd             	add    %rdi,%r13
            }
            if ((this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->distcode[last.val +
                            (BITS(last.bits + last.op) >> last.bits)];
  4194b1:	45 21 ec             	and    %r13d,%r12d
  4194b4:	41 d3 ec             	shr    %cl,%r12d
                PULLBYTE();
            }
            if ((this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->distcode[last.val +
  4194b7:	41 01 ec             	add    %ebp,%r12d
  4194ba:	4b 8d 34 a1          	lea    (%r9,%r12,4),%rsi
  4194be:	0f b6 3e             	movzbl (%rsi),%edi
  4194c1:	44 0f b7 56 02       	movzwl 0x2(%rsi),%r10d
                            (BITS(last.bits + last.op) >> last.bits)];
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
  4194c6:	0f b6 76 01          	movzbl 0x1(%rsi),%esi
  4194ca:	44 8d 24 06          	lea    (%rsi,%rax,1),%r12d
  4194ce:	89 f2                	mov    %esi,%edx
  4194d0:	41 39 dc             	cmp    %ebx,%r12d
  4194d3:	0f 86 9c 00 00 00    	jbe    419575 <inflate+0x2f25>
                    PULLBYTE();
  4194d9:	45 85 f6             	test   %r14d,%r14d
  4194dc:	75 54                	jne    419532 <inflate+0x2ee2>
  4194de:	e9 e4 22 00 00       	jmpq   41b7c7 <inflate+0x5177>
  4194e3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4194e8:	49 83 c7 01          	add    $0x1,%r15
  4194ec:	41 0f b6 57 ff       	movzbl -0x1(%r15),%edx
  4194f1:	89 d9                	mov    %ebx,%ecx
            }
            if ((this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->distcode[last.val +
                            (BITS(last.bits + last.op) >> last.bits)];
  4194f3:	45 89 c2             	mov    %r8d,%r10d
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
                    PULLBYTE();
  4194f6:	83 c3 08             	add    $0x8,%ebx
  4194f9:	41 83 ee 01          	sub    $0x1,%r14d
  4194fd:	48 d3 e2             	shl    %cl,%rdx
            }
            if ((this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->distcode[last.val +
                            (BITS(last.bits + last.op) >> last.bits)];
  419500:	89 c1                	mov    %eax,%ecx
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
                    PULLBYTE();
  419502:	49 01 d5             	add    %rdx,%r13
            }
            if ((this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->distcode[last.val +
                            (BITS(last.bits + last.op) >> last.bits)];
  419505:	45 21 ea             	and    %r13d,%r10d
  419508:	41 d3 ea             	shr    %cl,%r10d
                PULLBYTE();
            }
            if ((this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->distcode[last.val +
  41950b:	41 01 ea             	add    %ebp,%r10d
  41950e:	4b 8d 34 91          	lea    (%r9,%r10,4),%rsi
  419512:	0f b6 3e             	movzbl (%rsi),%edi
  419515:	44 0f b7 56 02       	movzwl 0x2(%rsi),%r10d
                            (BITS(last.bits + last.op) >> last.bits)];
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
  41951a:	0f b6 76 01          	movzbl 0x1(%rsi),%esi
  41951e:	44 8d 24 06          	lea    (%rsi,%rax,1),%r12d
  419522:	89 f2                	mov    %esi,%edx
  419524:	41 39 dc             	cmp    %ebx,%r12d
  419527:	76 4c                	jbe    419575 <inflate+0x2f25>
                    PULLBYTE();
  419529:	45 85 f6             	test   %r14d,%r14d
  41952c:	0f 84 85 14 00 00    	je     41a9b7 <inflate+0x4367>
  419532:	49 83 c7 01          	add    $0x1,%r15
  419536:	45 0f b6 57 ff       	movzbl -0x1(%r15),%r10d
  41953b:	89 d9                	mov    %ebx,%ecx
            }
            if ((this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->distcode[last.val +
                            (BITS(last.bits + last.op) >> last.bits)];
  41953d:	44 89 c7             	mov    %r8d,%edi
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
                    PULLBYTE();
  419540:	83 c3 08             	add    $0x8,%ebx
  419543:	41 83 ee 01          	sub    $0x1,%r14d
  419547:	49 d3 e2             	shl    %cl,%r10
            }
            if ((this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->distcode[last.val +
                            (BITS(last.bits + last.op) >> last.bits)];
  41954a:	89 c1                	mov    %eax,%ecx
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
                    PULLBYTE();
  41954c:	4d 01 d5             	add    %r10,%r13
            }
            if ((this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->distcode[last.val +
                            (BITS(last.bits + last.op) >> last.bits)];
  41954f:	44 21 ef             	and    %r13d,%edi
  419552:	d3 ef                	shr    %cl,%edi
                PULLBYTE();
            }
            if ((this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->distcode[last.val +
  419554:	01 ef                	add    %ebp,%edi
  419556:	49 8d 34 b9          	lea    (%r9,%rdi,4),%rsi
  41955a:	0f b6 3e             	movzbl (%rsi),%edi
  41955d:	44 0f b7 56 02       	movzwl 0x2(%rsi),%r10d
                            (BITS(last.bits + last.op) >> last.bits)];
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
  419562:	0f b6 76 01          	movzbl 0x1(%rsi),%esi
  419566:	44 8d 24 06          	lea    (%rsi,%rax,1),%r12d
  41956a:	89 f2                	mov    %esi,%edx
  41956c:	41 39 dc             	cmp    %ebx,%r12d
  41956f:	0f 87 73 ff ff ff    	ja     4194e8 <inflate+0x2e98>
                    PULLBYTE();
                }
                DROPBITS(last.bits);
  419575:	89 c1                	mov    %eax,%ecx
  419577:	29 c3                	sub    %eax,%ebx
  419579:	49 d3 ed             	shr    %cl,%r13
  41957c:	e9 89 01 00 00       	jmpq   41970a <inflate+0x30ba>
            if (state->flags & 0x0200) CRC4(state->check, hold);
            INITBITS();
            state->mode = OS;
        case OS:
            NEEDBITS(16);
            if (state->head != Z_NULL) {
  419581:	4d 8b 53 28          	mov    0x28(%r11),%r10
  419585:	4d 85 d2             	test   %r10,%r10
  419588:	74 13                	je     41959d <inflate+0x2f4d>
                state->head->xflags = (int)(hold & 0xff);
                state->head->os = (int)(hold >> 8);
  41958a:	4d 89 e9             	mov    %r13,%r9
            INITBITS();
            state->mode = OS;
        case OS:
            NEEDBITS(16);
            if (state->head != Z_NULL) {
                state->head->xflags = (int)(hold & 0xff);
  41958d:	45 0f b6 e5          	movzbl %r13b,%r12d
                state->head->os = (int)(hold >> 8);
  419591:	49 c1 e9 08          	shr    $0x8,%r9
            INITBITS();
            state->mode = OS;
        case OS:
            NEEDBITS(16);
            if (state->head != Z_NULL) {
                state->head->xflags = (int)(hold & 0xff);
  419595:	45 89 62 10          	mov    %r12d,0x10(%r10)
                state->head->os = (int)(hold >> 8);
  419599:	45 89 4a 14          	mov    %r9d,0x14(%r10)
            }
            if (state->flags & 0x0200) CRC2(state->check, hold);
  41959d:	41 8b 53 10          	mov    0x10(%r11),%edx
  4195a1:	f6 c6 02             	test   $0x2,%dh
  4195a4:	0f 85 e1 0d 00 00    	jne    41a38b <inflate+0x3d3b>
            INITBITS();
  4195aa:	31 db                	xor    %ebx,%ebx
  4195ac:	45 31 ed             	xor    %r13d,%r13d
            state->mode = EXLEN;
        case EXLEN:
            if (state->flags & 0x0400) {
  4195af:	f6 c6 04             	test   $0x4,%dh
                state->head->xflags = (int)(hold & 0xff);
                state->head->os = (int)(hold >> 8);
            }
            if (state->flags & 0x0200) CRC2(state->check, hold);
            INITBITS();
            state->mode = EXLEN;
  4195b2:	41 c7 03 04 00 00 00 	movl   $0x4,(%r11)
        case EXLEN:
            if (state->flags & 0x0400) {
  4195b9:	89 d0                	mov    %edx,%eax
  4195bb:	0f 85 77 d3 ff ff    	jne    416938 <inflate+0x2e8>
                if (state->head != Z_NULL)
                    state->head->extra_len = (unsigned)hold;
                if (state->flags & 0x0200) CRC2(state->check, hold);
                INITBITS();
            }
            else if (state->head != Z_NULL)
  4195c1:	49 8b 73 28          	mov    0x28(%r11),%rsi
  4195c5:	48 85 f6             	test   %rsi,%rsi
  4195c8:	0f 84 c9 01 00 00    	je     419797 <inflate+0x3147>
  4195ce:	41 89 d0             	mov    %edx,%r8d
                state->head->extra = Z_NULL;
  4195d1:	48 c7 46 18 00 00 00 	movq   $0x0,0x18(%rsi)
  4195d8:	00 
  4195d9:	89 d0                	mov    %edx,%eax
  4195db:	41 81 e0 00 04 00 00 	and    $0x400,%r8d
            state->mode = EXTRA;
  4195e2:	41 c7 03 05 00 00 00 	movl   $0x5,(%r11)
  4195e9:	e9 60 f2 ff ff       	jmpq   41884e <inflate+0x21fe>
  4195ee:	66 90                	xchg   %ax,%ax
                do {
                    len = (unsigned)(next[copy++]);
                    if (state->head != Z_NULL &&
                            state->head->comment != Z_NULL &&
                            state->length < state->head->comm_max)
                        state->head->comment[state->length++] = len;
  4195f0:	44 8d 51 01          	lea    0x1(%rcx),%r10d
  4195f4:	45 89 53 54          	mov    %r10d,0x54(%r11)
  4195f8:	44 88 24 0f          	mov    %r12b,(%rdi,%rcx,1)
  4195fc:	e9 bd f4 ff ff       	jmpq   418abe <inflate+0x246e>
  419601:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        case MATCH:
            if (left == 0) goto inf_leave;
            copy = out - left;
            if (state->offset > copy) {         /* copy from window */
                copy = state->offset - copy;
                if (copy > state->write) {
  419608:	41 8b 43 3c          	mov    0x3c(%r11),%eax
            state->mode = MATCH;
        case MATCH:
            if (left == 0) goto inf_leave;
            copy = out - left;
            if (state->offset > copy) {         /* copy from window */
                copy = state->offset - copy;
  41960c:	41 29 f1             	sub    %esi,%r9d
                if (copy > state->write) {
  41960f:	41 39 c1             	cmp    %eax,%r9d
  419612:	0f 86 30 06 00 00    	jbe    419c48 <inflate+0x35f8>
                    copy -= state->write;
  419618:	41 29 c1             	sub    %eax,%r9d
                    from = state->window + (state->wsize - copy);
  41961b:	41 8b 43 34          	mov    0x34(%r11),%eax
  41961f:	44 29 c8             	sub    %r9d,%eax
  419622:	49 03 43 40          	add    0x40(%r11),%rax
                }
                else
                    from = state->window + (state->write - copy);
                if (copy > state->length) copy = state->length;
  419626:	45 8b 63 54          	mov    0x54(%r11),%r12d
  41962a:	45 39 e1             	cmp    %r12d,%r9d
  41962d:	45 0f 47 cc          	cmova  %r12d,%r9d
  419631:	e9 2f d8 ff ff       	jmpq   416e65 <inflate+0x815>
  419636:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41963d:	00 00 00 
                do {
                    len = (unsigned)(next[copy++]);
                    if (state->head != Z_NULL &&
                            state->head->comment != Z_NULL &&
                            state->length < state->head->comm_max)
                        state->head->comment[state->length++] = len;
  419640:	44 8d 42 01          	lea    0x1(%rdx),%r8d
  419644:	45 89 43 54          	mov    %r8d,0x54(%r11)
  419648:	44 88 24 16          	mov    %r12b,(%rsi,%rdx,1)
  41964c:	e9 b2 f4 ff ff       	jmpq   418b03 <inflate+0x24b3>
  419651:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  419658:	45 8b 43 58          	mov    0x58(%r11),%r8d
                strm->msg = (char *)"invalid distance too far back";
                state->mode = BAD;
                break;
            }
#endif
            if (state->offset > state->whave + out - left) {
  41965c:	8b 7c 24 18          	mov    0x18(%rsp),%edi
  419660:	41 03 7b 38          	add    0x38(%r11),%edi
  419664:	2b 7c 24 10          	sub    0x10(%rsp),%edi
  419668:	44 39 c7             	cmp    %r8d,%edi
  41966b:	0f 83 bf d7 ff ff    	jae    416e30 <inflate+0x7e0>
                strm->msg = (char *)"invalid distance too far back";
  419671:	4c 8b 54 24 20       	mov    0x20(%rsp),%r10
                state->mode = BAD;
                break;
  419676:	41 bc 1b 00 00 00    	mov    $0x1b,%r12d
                state->mode = BAD;
                break;
            }
#endif
            if (state->offset > state->whave + out - left) {
                strm->msg = (char *)"invalid distance too far back";
  41967c:	49 c7 42 30 ca 93 43 	movq   $0x4393ca,0x30(%r10)
  419683:	00 
                state->mode = BAD;
  419684:	41 c7 03 1b 00 00 00 	movl   $0x1b,(%r11)
                break;
  41968b:	e9 8d d0 ff ff       	jmpq   41671d <inflate+0xcd>
                do {
                    len = (unsigned)(next[copy++]);
                    if (state->head != Z_NULL &&
                            state->head->name != Z_NULL &&
                            state->length < state->head->name_max)
                        state->head->name[state->length++] = len;
  419690:	8d 41 01             	lea    0x1(%rcx),%eax
  419693:	41 89 43 54          	mov    %eax,0x54(%r11)
  419697:	44 88 24 0f          	mov    %r12b,(%rdi,%rcx,1)
  41969b:	e9 bd f2 ff ff       	jmpq   41895d <inflate+0x230d>
                state->mode = LIT;
                break;
            }
            if (this.op & 32) {
                Tracevv((stderr, "inflate:         end of block\n"));
                state->mode = TYPE;
  4196a0:	41 c7 03 0b 00 00 00 	movl   $0xb,(%r11)
                break;
  4196a7:	41 bc 0b 00 00 00    	mov    $0xb,%r12d
  4196ad:	e9 6b d0 ff ff       	jmpq   41671d <inflate+0xcd>
  4196b2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
                do {
                    len = (unsigned)(next[copy++]);
                    if (state->head != Z_NULL &&
                            state->head->name != Z_NULL &&
                            state->length < state->head->name_max)
                        state->head->name[state->length++] = len;
  4196b8:	44 8d 42 01          	lea    0x1(%rdx),%r8d
  4196bc:	45 89 43 54          	mov    %r8d,0x54(%r11)
  4196c0:	44 88 24 16          	mov    %r12b,(%rsi,%rdx,1)
  4196c4:	e9 da f2 ff ff       	jmpq   4189a3 <inflate+0x2353>
                state->total += out;
                if (out)
                    strm->adler = state->check =
                        UPDATE(state->check, put - out, out);
                out = left;
                if ((
  4196c9:	8b 5c 24 10          	mov    0x10(%rsp),%ebx
  4196cd:	41 8b 6b 08          	mov    0x8(%r11),%ebp
  4196d1:	4d 89 e7             	mov    %r12,%r15
                     REVERSE(hold)) != state->check) {
                    strm->msg = (char *)"incorrect data check";
                    state->mode = BAD;
                    break;
                }
                INITBITS();
  4196d4:	45 31 ed             	xor    %r13d,%r13d
                state->total += out;
                if (out)
                    strm->adler = state->check =
                        UPDATE(state->check, put - out, out);
                out = left;
                if ((
  4196d7:	89 5c 24 18          	mov    %ebx,0x18(%rsp)
                     REVERSE(hold)) != state->check) {
                    strm->msg = (char *)"incorrect data check";
                    state->mode = BAD;
                    break;
                }
                INITBITS();
  4196db:	31 db                	xor    %ebx,%ebx
  4196dd:	0f 1f 00             	nopl   (%rax)
                Tracev((stderr, "inflate:   check matches trailer\n"));
            }
#ifdef GUNZIP
            state->mode = LENGTH;
  4196e0:	41 c7 03 19 00 00 00 	movl   $0x19,(%r11)
  4196e7:	e9 58 ef ff ff       	jmpq   418644 <inflate+0x1ff4>
  4196ec:	0f 1f 40 00          	nopl   0x0(%rax)
    ret = Z_OK;
    for (;;)
        switch (state->mode) {
        case HEAD:
            if (state->wrap == 0) {
                state->mode = TYPEDO;
  4196f0:	41 c7 03 0c 00 00 00 	movl   $0xc,(%r11)
                break;
  4196f7:	41 bc 0c 00 00 00    	mov    $0xc,%r12d
  4196fd:	e9 1b d0 ff ff       	jmpq   41671d <inflate+0xcd>
  419702:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  419708:	89 c2                	mov    %eax,%edx
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
                    PULLBYTE();
                }
                DROPBITS(last.bits);
            }
            DROPBITS(this.bits);
  41970a:	89 d1                	mov    %edx,%ecx
  41970c:	29 f3                	sub    %esi,%ebx
  41970e:	49 d3 ed             	shr    %cl,%r13
            if (this.op & 64) {
  419711:	40 f6 c7 40          	test   $0x40,%dil
  419715:	0f 84 a5 0a 00 00    	je     41a1c0 <inflate+0x3b70>
                strm->msg = (char *)"invalid distance code";
  41971b:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
                state->mode = BAD;
                break;
  419720:	41 bc 1b 00 00 00    	mov    $0x1b,%r12d
                }
                DROPBITS(last.bits);
            }
            DROPBITS(this.bits);
            if (this.op & 64) {
                strm->msg = (char *)"invalid distance code";
  419726:	48 c7 47 30 b4 93 43 	movq   $0x4393b4,0x30(%rdi)
  41972d:	00 
                state->mode = BAD;
  41972e:	41 c7 03 1b 00 00 00 	movl   $0x1b,(%r11)
                break;
  419735:	e9 e3 cf ff ff       	jmpq   41671d <inflate+0xcd>
                state->mode = LEN;              /* decode codes */
                break;
            case 2:                             /* dynamic block */
                Tracev((stderr, "inflate:     dynamic codes block%s\n",
                        state->last ? " (last)" : ""));
                state->mode = TABLE;
  41973a:	41 c7 03 0f 00 00 00 	movl   $0xf,(%r11)
                break;
  419741:	41 bc 0f 00 00 00    	mov    $0xf,%r12d
  419747:	e9 8b d1 ff ff       	jmpq   4168d7 <inflate+0x287>
            if ((hold & 0xffff) != ((hold >> 16) ^ 0xffff)) {
                strm->msg = (char *)"invalid stored block lengths";
                state->mode = BAD;
                break;
            }
            state->length = (unsigned)hold & 0xffff;
  41974c:	45 0f b7 d5          	movzwl %r13w,%r10d
            Tracev((stderr, "inflate:       stored length %u\n",
                    state->length));
            INITBITS();
            state->mode = COPY;
  419750:	41 c7 03 0e 00 00 00 	movl   $0xe,(%r11)
  419757:	49 89 ef             	mov    %rbp,%r15
            if ((hold & 0xffff) != ((hold >> 16) ^ 0xffff)) {
                strm->msg = (char *)"invalid stored block lengths";
                state->mode = BAD;
                break;
            }
            state->length = (unsigned)hold & 0xffff;
  41975a:	45 89 53 54          	mov    %r10d,0x54(%r11)
            Tracev((stderr, "inflate:       stored length %u\n",
                    state->length));
            INITBITS();
  41975e:	31 db                	xor    %ebx,%ebx
  419760:	45 31 ed             	xor    %r13d,%r13d
  419763:	e9 94 e4 ff ff       	jmpq   417bfc <inflate+0x15ac>
            if ((state->flags & 0xff) != Z_DEFLATED) {
                strm->msg = (char *)"unknown compression method";
                state->mode = BAD;
                break;
            }
            if (state->flags & 0xe000) {
  419768:	41 f7 c5 00 e0 00 00 	test   $0xe000,%r13d
  41976f:	0f 84 0b 15 00 00    	je     41ac80 <inflate+0x4630>
                strm->msg = (char *)"unknown header flags set";
  419775:	4c 8b 7c 24 20       	mov    0x20(%rsp),%r15
                state->mode = BAD;
                break;
  41977a:	41 bc 1b 00 00 00    	mov    $0x1b,%r12d
                strm->msg = (char *)"unknown compression method";
                state->mode = BAD;
                break;
            }
            if (state->flags & 0xe000) {
                strm->msg = (char *)"unknown header flags set";
  419780:	49 c7 47 30 d6 92 43 	movq   $0x4392d6,0x30(%r15)
  419787:	00 
                state->mode = BAD;
  419788:	41 c7 03 1b 00 00 00 	movl   $0x1b,(%r11)
                break;
  41978f:	49 89 ef             	mov    %rbp,%r15
  419792:	e9 86 cf ff ff       	jmpq   41671d <inflate+0xcd>
  419797:	45 31 c0             	xor    %r8d,%r8d
  41979a:	e9 43 fe ff ff       	jmpq   4195e2 <inflate+0x2f92>
            DROPBITS(5);
            state->ncode = BITS(4) + 4;
            DROPBITS(4);
#ifndef PKZIP_BUG_WORKAROUND
            if (state->nlen > 286 || state->ndist > 30) {
                strm->msg = (char *)"too many length or distance symbols";
  41979f:	4c 8b 7c 24 20       	mov    0x20(%rsp),%r15
                state->mode = BAD;
                break;
  4197a4:	41 bc 1b 00 00 00    	mov    $0x1b,%r12d
            DROPBITS(5);
            state->ncode = BITS(4) + 4;
            DROPBITS(4);
#ifndef PKZIP_BUG_WORKAROUND
            if (state->nlen > 286 || state->ndist > 30) {
                strm->msg = (char *)"too many length or distance symbols";
  4197aa:	49 c7 47 30 18 94 43 	movq   $0x439418,0x30(%r15)
  4197b1:	00 
                state->mode = BAD;
  4197b2:	41 c7 03 1b 00 00 00 	movl   $0x1b,(%r11)
                break;
  4197b9:	49 89 ef             	mov    %rbp,%r15
  4197bc:	e9 5c cf ff ff       	jmpq   41671d <inflate+0xcd>
  4197c1:	41 89 da             	mov    %ebx,%r10d
  4197c4:	44 89 f6             	mov    %r14d,%esi
  4197c7:	4c 89 db             	mov    %r11,%rbx
  4197ca:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  4197cf:	4d 89 eb             	mov    %r13,%r11
  4197d2:	e9 c9 dd ff ff       	jmpq   4175a0 <inflate+0xf50>
  4197d7:	41 89 da             	mov    %ebx,%r10d
  4197da:	44 89 f6             	mov    %r14d,%esi
  4197dd:	4c 89 db             	mov    %r11,%rbx
  4197e0:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  4197e5:	4d 89 eb             	mov    %r13,%r11
  4197e8:	e9 b3 dd ff ff       	jmpq   4175a0 <inflate+0xf50>
  4197ed:	0f 1f 00             	nopl   (%rax)
            state->mode = EXLEN;
        case EXLEN:
            if (state->flags & 0x0400) {
                NEEDBITS(16);
                state->length = (unsigned)(hold);
                if (state->head != Z_NULL)
  4197f0:	4d 8b 53 28          	mov    0x28(%r11),%r10
            INITBITS();
            state->mode = EXLEN;
        case EXLEN:
            if (state->flags & 0x0400) {
                NEEDBITS(16);
                state->length = (unsigned)(hold);
  4197f4:	45 89 6b 54          	mov    %r13d,0x54(%r11)
                if (state->head != Z_NULL)
  4197f8:	4d 85 d2             	test   %r10,%r10
  4197fb:	74 04                	je     419801 <inflate+0x31b1>
                    state->head->extra_len = (unsigned)hold;
  4197fd:	45 89 6a 20          	mov    %r13d,0x20(%r10)
                if (state->flags & 0x0200) CRC2(state->check, hold);
  419801:	f6 c6 02             	test   $0x2,%dh
  419804:	0f 85 f5 0c 00 00    	jne    41a4ff <inflate+0x3eaf>
  41980a:	41 89 d0             	mov    %edx,%r8d
  41980d:	89 d0                	mov    %edx,%eax
                INITBITS();
  41980f:	31 db                	xor    %ebx,%ebx
  419811:	41 81 e0 00 04 00 00 	and    $0x400,%r8d
  419818:	45 31 ed             	xor    %r13d,%r13d
  41981b:	e9 c2 fd ff ff       	jmpq   4195e2 <inflate+0x2f92>
  419820:	41 89 da             	mov    %ebx,%r10d
  419823:	44 89 f6             	mov    %r14d,%esi
  419826:	4c 89 db             	mov    %r11,%rbx
  419829:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41982e:	4d 89 eb             	mov    %r13,%r11
  419831:	e9 6a dd ff ff       	jmpq   4175a0 <inflate+0xf50>
  419836:	89 cb                	mov    %ecx,%ebx
  419838:	41 89 ea             	mov    %ebp,%r10d
            while (state->have < state->ncode) {
                NEEDBITS(3);
                state->lens[order[state->have++]] = (unsigned short)BITS(3);
                DROPBITS(3);
            }
            while (state->have < 19)
  41983b:	41 83 fa 12          	cmp    $0x12,%r10d
  41983f:	0f 87 f0 01 00 00    	ja     419a35 <inflate+0x33e5>
                state->lens[order[state->have++]] = 0;
  419845:	45 89 d0             	mov    %r10d,%r8d
  419848:	41 b9 12 00 00 00    	mov    $0x12,%r9d
  41984e:	41 8d 52 01          	lea    0x1(%r10),%edx
  419852:	47 0f b7 a4 00 c0 9d 	movzwl 0x439dc0(%r8,%r8,1),%r12d
  419859:	43 00 
  41985b:	45 29 d1             	sub    %r10d,%r9d
  41985e:	31 f6                	xor    %esi,%esi
  419860:	41 83 e1 07          	and    $0x7,%r9d
            while (state->have < state->ncode) {
                NEEDBITS(3);
                state->lens[order[state->have++]] = (unsigned short)BITS(3);
                DROPBITS(3);
            }
            while (state->have < 19)
  419864:	83 fa 13             	cmp    $0x13,%edx
                state->lens[order[state->have++]] = 0;
  419867:	66 43 89 b4 63 90 00 	mov    %si,0x90(%r11,%r12,2)
  41986e:	00 00 
            while (state->have < state->ncode) {
                NEEDBITS(3);
                state->lens[order[state->have++]] = (unsigned short)BITS(3);
                DROPBITS(3);
            }
            while (state->have < 19)
  419870:	0f 84 b4 01 00 00    	je     419a2a <inflate+0x33da>
  419876:	45 85 c9             	test   %r9d,%r9d
  419879:	0f 84 e4 00 00 00    	je     419963 <inflate+0x3313>
  41987f:	41 83 f9 01          	cmp    $0x1,%r9d
  419883:	0f 84 b9 00 00 00    	je     419942 <inflate+0x32f2>
  419889:	41 83 f9 02          	cmp    $0x2,%r9d
  41988d:	0f 84 94 00 00 00    	je     419927 <inflate+0x32d7>
  419893:	41 83 f9 03          	cmp    $0x3,%r9d
  419897:	74 75                	je     41990e <inflate+0x32be>
  419899:	41 83 f9 04          	cmp    $0x4,%r9d
  41989d:	74 57                	je     4198f6 <inflate+0x32a6>
  41989f:	41 83 f9 05          	cmp    $0x5,%r9d
  4198a3:	74 36                	je     4198db <inflate+0x328b>
  4198a5:	41 83 f9 06          	cmp    $0x6,%r9d
  4198a9:	74 17                	je     4198c2 <inflate+0x3272>
                state->lens[order[state->have++]] = 0;
  4198ab:	0f b7 bc 12 c0 9d 43 	movzwl 0x439dc0(%rdx,%rdx,1),%edi
  4198b2:	00 
  4198b3:	31 ed                	xor    %ebp,%ebp
  4198b5:	41 8d 52 02          	lea    0x2(%r10),%edx
  4198b9:	66 41 89 ac 7b 90 00 	mov    %bp,0x90(%r11,%rdi,2)
  4198c0:	00 00 
  4198c2:	89 d1                	mov    %edx,%ecx
  4198c4:	45 31 d2             	xor    %r10d,%r10d
  4198c7:	83 c2 01             	add    $0x1,%edx
  4198ca:	0f b7 84 09 c0 9d 43 	movzwl 0x439dc0(%rcx,%rcx,1),%eax
  4198d1:	00 
  4198d2:	66 45 89 94 43 90 00 	mov    %r10w,0x90(%r11,%rax,2)
  4198d9:	00 00 
  4198db:	41 89 d1             	mov    %edx,%r9d
  4198de:	45 31 e4             	xor    %r12d,%r12d
  4198e1:	83 c2 01             	add    $0x1,%edx
  4198e4:	47 0f b7 84 09 c0 9d 	movzwl 0x439dc0(%r9,%r9,1),%r8d
  4198eb:	43 00 
  4198ed:	66 47 89 a4 43 90 00 	mov    %r12w,0x90(%r11,%r8,2)
  4198f4:	00 00 
  4198f6:	89 d6                	mov    %edx,%esi
  4198f8:	31 ed                	xor    %ebp,%ebp
  4198fa:	83 c2 01             	add    $0x1,%edx
  4198fd:	0f b7 bc 36 c0 9d 43 	movzwl 0x439dc0(%rsi,%rsi,1),%edi
  419904:	00 
  419905:	66 41 89 ac 7b 90 00 	mov    %bp,0x90(%r11,%rdi,2)
  41990c:	00 00 
  41990e:	89 d1                	mov    %edx,%ecx
  419910:	45 31 d2             	xor    %r10d,%r10d
  419913:	83 c2 01             	add    $0x1,%edx
  419916:	0f b7 84 09 c0 9d 43 	movzwl 0x439dc0(%rcx,%rcx,1),%eax
  41991d:	00 
  41991e:	66 45 89 94 43 90 00 	mov    %r10w,0x90(%r11,%rax,2)
  419925:	00 00 
  419927:	41 89 d1             	mov    %edx,%r9d
  41992a:	45 31 e4             	xor    %r12d,%r12d
  41992d:	83 c2 01             	add    $0x1,%edx
  419930:	47 0f b7 84 09 c0 9d 	movzwl 0x439dc0(%r9,%r9,1),%r8d
  419937:	43 00 
  419939:	66 47 89 a4 43 90 00 	mov    %r12w,0x90(%r11,%r8,2)
  419940:	00 00 
  419942:	89 d6                	mov    %edx,%esi
  419944:	83 c2 01             	add    $0x1,%edx
  419947:	31 ed                	xor    %ebp,%ebp
  419949:	0f b7 bc 36 c0 9d 43 	movzwl 0x439dc0(%rsi,%rsi,1),%edi
  419950:	00 
            while (state->have < state->ncode) {
                NEEDBITS(3);
                state->lens[order[state->have++]] = (unsigned short)BITS(3);
                DROPBITS(3);
            }
            while (state->have < 19)
  419951:	83 fa 13             	cmp    $0x13,%edx
                state->lens[order[state->have++]] = 0;
  419954:	66 41 89 ac 7b 90 00 	mov    %bp,0x90(%r11,%rdi,2)
  41995b:	00 00 
            while (state->have < state->ncode) {
                NEEDBITS(3);
                state->lens[order[state->have++]] = (unsigned short)BITS(3);
                DROPBITS(3);
            }
            while (state->have < 19)
  41995d:	0f 84 c7 00 00 00    	je     419a2a <inflate+0x33da>
                state->lens[order[state->have++]] = 0;
  419963:	44 8d 4a 01          	lea    0x1(%rdx),%r9d
  419967:	89 d1                	mov    %edx,%ecx
  419969:	8d 72 02             	lea    0x2(%rdx),%esi
  41996c:	0f b7 84 09 c0 9d 43 	movzwl 0x439dc0(%rcx,%rcx,1),%eax
  419973:	00 
  419974:	8d 4a 03             	lea    0x3(%rdx),%ecx
  419977:	45 31 d2             	xor    %r10d,%r10d
  41997a:	47 0f b7 84 09 c0 9d 	movzwl 0x439dc0(%r9,%r9,1),%r8d
  419981:	43 00 
  419983:	44 8d 4a 04          	lea    0x4(%rdx),%r9d
  419987:	45 31 e4             	xor    %r12d,%r12d
  41998a:	0f b7 bc 36 c0 9d 43 	movzwl 0x439dc0(%rsi,%rsi,1),%edi
  419991:	00 
  419992:	8d 72 05             	lea    0x5(%rdx),%esi
  419995:	31 ed                	xor    %ebp,%ebp
  419997:	66 45 89 94 43 90 00 	mov    %r10w,0x90(%r11,%rax,2)
  41999e:	00 00 
  4199a0:	0f b7 84 09 c0 9d 43 	movzwl 0x439dc0(%rcx,%rcx,1),%eax
  4199a7:	00 
  4199a8:	8d 4a 06             	lea    0x6(%rdx),%ecx
  4199ab:	66 47 89 a4 43 90 00 	mov    %r12w,0x90(%r11,%r8,2)
  4199b2:	00 00 
  4199b4:	47 0f b7 84 09 c0 9d 	movzwl 0x439dc0(%r9,%r9,1),%r8d
  4199bb:	43 00 
  4199bd:	44 8d 4a 07          	lea    0x7(%rdx),%r9d
  4199c1:	45 31 d2             	xor    %r10d,%r10d
  4199c4:	45 31 e4             	xor    %r12d,%r12d
  4199c7:	66 41 89 ac 7b 90 00 	mov    %bp,0x90(%r11,%rdi,2)
  4199ce:	00 00 
  4199d0:	0f b7 bc 36 c0 9d 43 	movzwl 0x439dc0(%rsi,%rsi,1),%edi
  4199d7:	00 
  4199d8:	83 c2 08             	add    $0x8,%edx
  4199db:	31 ed                	xor    %ebp,%ebp
  4199dd:	66 45 89 94 43 90 00 	mov    %r10w,0x90(%r11,%rax,2)
  4199e4:	00 00 
  4199e6:	0f b7 84 09 c0 9d 43 	movzwl 0x439dc0(%rcx,%rcx,1),%eax
  4199ed:	00 
  4199ee:	45 31 d2             	xor    %r10d,%r10d
  4199f1:	66 47 89 a4 43 90 00 	mov    %r12w,0x90(%r11,%r8,2)
  4199f8:	00 00 
  4199fa:	47 0f b7 84 09 c0 9d 	movzwl 0x439dc0(%r9,%r9,1),%r8d
  419a01:	43 00 
  419a03:	45 31 e4             	xor    %r12d,%r12d
            while (state->have < state->ncode) {
                NEEDBITS(3);
                state->lens[order[state->have++]] = (unsigned short)BITS(3);
                DROPBITS(3);
            }
            while (state->have < 19)
  419a06:	83 fa 13             	cmp    $0x13,%edx
                state->lens[order[state->have++]] = 0;
  419a09:	66 41 89 ac 7b 90 00 	mov    %bp,0x90(%r11,%rdi,2)
  419a10:	00 00 
  419a12:	66 45 89 94 43 90 00 	mov    %r10w,0x90(%r11,%rax,2)
  419a19:	00 00 
  419a1b:	66 47 89 a4 43 90 00 	mov    %r12w,0x90(%r11,%r8,2)
  419a22:	00 00 
            while (state->have < state->ncode) {
                NEEDBITS(3);
                state->lens[order[state->have++]] = (unsigned short)BITS(3);
                DROPBITS(3);
            }
            while (state->have < 19)
  419a24:	0f 85 39 ff ff ff    	jne    419963 <inflate+0x3313>
  419a2a:	41 c7 83 84 00 00 00 	movl   $0x13,0x84(%r11)
  419a31:	13 00 00 00 
                state->lens[order[state->have++]] = 0;
            state->next = state->codes;
  419a35:	48 8b 54 24 40       	mov    0x40(%rsp),%rdx
            state->lencode = (code const FAR *)(state->next);
            state->lenbits = 7;
            ret = inflate_table(CODES, state->lens, 19, &(state->next),
  419a3a:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
  419a3f:	49 8d b3 90 00 00 00 	lea    0x90(%r11),%rsi
  419a46:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  419a4b:	4d 8d 43 70          	lea    0x70(%r11),%r8
            }
            while (state->have < 19)
                state->lens[order[state->have++]] = 0;
            state->next = state->codes;
            state->lencode = (code const FAR *)(state->next);
            state->lenbits = 7;
  419a4f:	41 c7 43 70 07 00 00 	movl   $0x7,0x70(%r11)
  419a56:	00 
            ret = inflate_table(CODES, state->lens, 19, &(state->next),
  419a57:	31 ff                	xor    %edi,%edi
  419a59:	4c 89 5c 24 48       	mov    %r11,0x48(%rsp)
                state->lens[order[state->have++]] = (unsigned short)BITS(3);
                DROPBITS(3);
            }
            while (state->have < 19)
                state->lens[order[state->have++]] = 0;
            state->next = state->codes;
  419a5e:	49 89 93 88 00 00 00 	mov    %rdx,0x88(%r11)
            state->lencode = (code const FAR *)(state->next);
  419a65:	49 89 53 60          	mov    %rdx,0x60(%r11)
            state->lenbits = 7;
            ret = inflate_table(CODES, state->lens, 19, &(state->next),
  419a69:	ba 13 00 00 00       	mov    $0x13,%edx
  419a6e:	e8 8d 2c 00 00       	callq  41c700 <inflate_table>
                                &(state->lenbits), state->work);
            if (ret) {
  419a73:	85 c0                	test   %eax,%eax
            while (state->have < 19)
                state->lens[order[state->have++]] = 0;
            state->next = state->codes;
            state->lencode = (code const FAR *)(state->next);
            state->lenbits = 7;
            ret = inflate_table(CODES, state->lens, 19, &(state->next),
  419a75:	89 44 24 28          	mov    %eax,0x28(%rsp)
                                &(state->lenbits), state->work);
            if (ret) {
  419a79:	4c 8b 5c 24 48       	mov    0x48(%rsp),%r11
  419a7e:	0f 84 75 14 00 00    	je     41aef9 <inflate+0x48a9>
                strm->msg = (char *)"invalid code lengths set";
  419a84:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
                state->mode = BAD;
                break;
  419a89:	41 bc 1b 00 00 00    	mov    $0x1b,%r12d
            state->lencode = (code const FAR *)(state->next);
            state->lenbits = 7;
            ret = inflate_table(CODES, state->lens, 19, &(state->next),
                                &(state->lenbits), state->work);
            if (ret) {
                strm->msg = (char *)"invalid code lengths set";
  419a8f:	48 c7 40 30 33 93 43 	movq   $0x439333,0x30(%rax)
  419a96:	00 
                state->mode = BAD;
  419a97:	41 c7 03 1b 00 00 00 	movl   $0x1b,(%r11)
                break;
  419a9e:	e9 7a cc ff ff       	jmpq   41671d <inflate+0xcd>
  419aa3:	41 89 da             	mov    %ebx,%r10d
  419aa6:	44 89 f6             	mov    %r14d,%esi
  419aa9:	4c 89 db             	mov    %r11,%rbx
  419aac:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  419ab1:	4d 89 eb             	mov    %r13,%r11
  419ab4:	e9 e7 da ff ff       	jmpq   4175a0 <inflate+0xf50>
  419ab9:	41 89 da             	mov    %ebx,%r10d
  419abc:	44 89 f6             	mov    %r14d,%esi
  419abf:	4c 89 db             	mov    %r11,%rbx
  419ac2:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  419ac7:	4d 89 eb             	mov    %r13,%r11
  419aca:	e9 d1 da ff ff       	jmpq   4175a0 <inflate+0xf50>
  419acf:	41 89 da             	mov    %ebx,%r10d
  419ad2:	44 89 f6             	mov    %r14d,%esi
  419ad5:	4c 89 db             	mov    %r11,%rbx
  419ad8:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  419add:	4d 89 eb             	mov    %r13,%r11
  419ae0:	e9 bb da ff ff       	jmpq   4175a0 <inflate+0xf50>
  419ae5:	0f 1f 00             	nopl   (%rax)
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
            } while (--copy);
            if (state->length == 0) state->mode = LEN;
  419ae8:	41 c7 03 12 00 00 00 	movl   $0x12,(%r11)
  419aef:	41 bc 12 00 00 00    	mov    $0x12,%r12d
  419af5:	e9 23 cc ff ff       	jmpq   41671d <inflate+0xcd>
  419afa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  419b00:	89 cb                	mov    %ecx,%ebx
  419b02:	44 89 c1             	mov    %r8d,%ecx
                for (;;) {
                    this = state->lencode[BITS(state->lenbits)];
                    if ((unsigned)(this.bits) <= bits) break;
                    PULLBYTE();
                }
                if (this.val < 16) {
  419b05:	66 83 ff 0f          	cmp    $0xf,%di
  419b09:	0f 87 11 04 00 00    	ja     419f20 <inflate+0x38d0>
                    NEEDBITS(this.bits);
                    DROPBITS(this.bits);
                    state->lens[state->have++] = this.val;
  419b0f:	45 8d 54 24 01       	lea    0x1(%r12),%r10d
                    if ((unsigned)(this.bits) <= bits) break;
                    PULLBYTE();
                }
                if (this.val < 16) {
                    NEEDBITS(this.bits);
                    DROPBITS(this.bits);
  419b14:	49 d3 ed             	shr    %cl,%r13
  419b17:	29 c3                	sub    %eax,%ebx
                    state->lens[state->have++] = this.val;
  419b19:	45 89 93 84 00 00 00 	mov    %r10d,0x84(%r11)
  419b20:	66 43 89 bc 63 90 00 	mov    %di,0x90(%r11,%r12,2)
  419b27:	00 00 
  419b29:	45 89 d4             	mov    %r10d,%r12d
  419b2c:	e9 47 e9 ff ff       	jmpq   418478 <inflate+0x1e28>
  419b31:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
                            state->head->comment != Z_NULL &&
                            state->length < state->head->comm_max)
                        state->head->comment[state->length++] = len;
                } while (len && copy < have);
                if (state->flags & 0x0200)
                    state->check = crc32(state->check, next, copy);
  419b38:	49 8b 7b 18          	mov    0x18(%r11),%rdi
  419b3c:	89 ea                	mov    %ebp,%edx
  419b3e:	4c 89 fe             	mov    %r15,%rsi
  419b41:	4c 89 5c 24 48       	mov    %r11,0x48(%rsp)
  419b46:	e8 05 70 00 00       	callq  420b50 <crc32>
  419b4b:	4c 8b 5c 24 48       	mov    0x48(%rsp),%r11
  419b50:	49 89 43 18          	mov    %rax,0x18(%r11)
  419b54:	e9 3b f0 ff ff       	jmpq   418b94 <inflate+0x2544>
            if (state->flags & 0x0200) CRC2(state->check, hold);
            INITBITS();
            state->mode = TIME;
        case TIME:
            NEEDBITS(32);
            if (state->head != Z_NULL)
  419b59:	4d 8b 43 28          	mov    0x28(%r11),%r8
  419b5d:	4d 85 c0             	test   %r8,%r8
  419b60:	74 04                	je     419b66 <inflate+0x3516>
                state->head->time = hold;
  419b62:	4d 89 68 08          	mov    %r13,0x8(%r8)
            if (state->flags & 0x0200) CRC4(state->check, hold);
  419b66:	41 f6 43 11 02       	testb  $0x2,0x11(%r11)
  419b6b:	0f 85 43 09 00 00    	jne    41a4b4 <inflate+0x3e64>
            INITBITS();
            state->mode = OS;
  419b71:	41 c7 03 03 00 00 00 	movl   $0x3,(%r11)
        case TIME:
            NEEDBITS(32);
            if (state->head != Z_NULL)
                state->head->time = hold;
            if (state->flags & 0x0200) CRC4(state->check, hold);
            INITBITS();
  419b78:	45 31 ed             	xor    %r13d,%r13d
  419b7b:	31 db                	xor    %ebx,%ebx
  419b7d:	e9 97 e6 ff ff       	jmpq   418219 <inflate+0x1bc9>
  419b82:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    state = (struct inflate_state FAR *)strm->state;

    /* if it hasn't been done already, allocate space for the window */
    if (state->window == Z_NULL) {
        state->window = (unsigned char FAR *)
                        ZALLOC(strm, 1U << state->wbits,
  419b88:	41 8b 4c 24 30       	mov    0x30(%r12),%ecx
  419b8d:	be 01 00 00 00       	mov    $0x1,%esi
  419b92:	49 8b 7e 50          	mov    0x50(%r14),%rdi
  419b96:	ba 01 00 00 00       	mov    $0x1,%edx
  419b9b:	d3 e6                	shl    %cl,%esi
  419b9d:	41 ff 56 40          	callq  *0x40(%r14)
                               sizeof(unsigned char));
        if (state->window == Z_NULL) return 1;
  419ba1:	48 85 c0             	test   %rax,%rax

    state = (struct inflate_state FAR *)strm->state;

    /* if it hasn't been done already, allocate space for the window */
    if (state->window == Z_NULL) {
        state->window = (unsigned char FAR *)
  419ba4:	49 89 44 24 40       	mov    %rax,0x40(%r12)
                        ZALLOC(strm, 1U << state->wbits,
                               sizeof(unsigned char));
        if (state->window == Z_NULL) return 1;
  419ba9:	0f 84 24 13 00 00    	je     41aed3 <inflate+0x4883>
  419baf:	49 8b 76 18          	mov    0x18(%r14),%rsi
  419bb3:	48 89 c7             	mov    %rax,%rdi
  419bb6:	e9 38 da ff ff       	jmpq   4175f3 <inflate+0xfa3>
  419bbb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
                            state->head->name != Z_NULL &&
                            state->length < state->head->name_max)
                        state->head->name[state->length++] = len;
                } while (len && copy < have);
                if (state->flags & 0x0200)
                    state->check = crc32(state->check, next, copy);
  419bc0:	49 8b 7b 18          	mov    0x18(%r11),%rdi
  419bc4:	89 ea                	mov    %ebp,%edx
  419bc6:	4c 89 fe             	mov    %r15,%rsi
  419bc9:	4c 89 5c 24 48       	mov    %r11,0x48(%rsp)
  419bce:	e8 7d 6f 00 00       	callq  420b50 <crc32>
  419bd3:	4c 8b 5c 24 48       	mov    0x48(%rsp),%r11
  419bd8:	49 89 43 18          	mov    %rax,0x18(%r11)
  419bdc:	e9 51 ee ff ff       	jmpq   418a32 <inflate+0x23e2>
  419be1:	4c 89 db             	mov    %r11,%rbx
  419be4:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  419be9:	4d 89 eb             	mov    %r13,%r11
            }
            Tracev((stderr, "inflate:       stored end\n"));
            state->mode = TYPE;
            break;
        case TABLE:
            NEEDBITS(14);
  419bec:	41 89 ca             	mov    %ecx,%r10d
  419bef:	49 89 ef             	mov    %rbp,%r15
  419bf2:	31 f6                	xor    %esi,%esi
  419bf4:	e9 a7 d9 ff ff       	jmpq   4175a0 <inflate+0xf50>
  419bf9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  419c00:	89 d9                	mov    %ebx,%ecx
  419c02:	e9 54 e2 ff ff       	jmpq   417e5b <inflate+0x180b>
  419c07:	4c 89 db             	mov    %r11,%rbx
  419c0a:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  419c0f:	4d 89 eb             	mov    %r13,%r11
            state->mode = hold & 0x200 ? DICTID : TYPE;
            INITBITS();
            break;
#ifdef GUNZIP
        case FLAGS:
            NEEDBITS(16);
  419c12:	41 89 ca             	mov    %ecx,%r10d
  419c15:	49 89 ef             	mov    %rbp,%r15
  419c18:	31 f6                	xor    %esi,%esi
  419c1a:	e9 81 d9 ff ff       	jmpq   4175a0 <inflate+0xf50>
  419c1f:	90                   	nop
                from = put - state->offset;
                copy = state->length;
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
  419c20:	48 89 c1             	mov    %rax,%rcx
  419c23:	44 89 ce             	mov    %r9d,%esi
  419c26:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  419c2b:	45 8d 41 ff          	lea    -0x1(%r9),%r8d
  419c2f:	e9 3b d4 ff ff       	jmpq   41706f <inflate+0xa1f>
  419c34:	0f 1f 40 00          	nopl   0x0(%rax)
  419c38:	49 89 ef             	mov    %rbp,%r15
                if (hold != (state->check & 0xffff)) {
                    strm->msg = (char *)"header crc mismatch";
                    state->mode = BAD;
                    break;
                }
                INITBITS();
  419c3b:	31 db                	xor    %ebx,%ebx
  419c3d:	45 31 ed             	xor    %r13d,%r13d
  419c40:	e9 72 ef ff ff       	jmpq   418bb7 <inflate+0x2567>
  419c45:	0f 1f 00             	nopl   (%rax)
                if (copy > state->write) {
                    copy -= state->write;
                    from = state->window + (state->wsize - copy);
                }
                else
                    from = state->window + (state->write - copy);
  419c48:	44 29 c8             	sub    %r9d,%eax
  419c4b:	49 03 43 40          	add    0x40(%r11),%rax
  419c4f:	e9 d2 f9 ff ff       	jmpq   419626 <inflate+0x2fd6>
  419c54:	89 cb                	mov    %ecx,%ebx
            for (;;) {
                this = state->lencode[BITS(state->lenbits)];
                if ((unsigned)(this.bits) <= bits) break;
                PULLBYTE();
            }
            if (this.op && (this.op & 0xf0) == 0) {
  419c56:	40 84 f6             	test   %sil,%sil
  419c59:	0f 84 86 07 00 00    	je     41a3e5 <inflate+0x3d95>
  419c5f:	40 f6 c6 f0          	test   $0xf0,%sil
  419c63:	0f 85 10 0d 00 00    	jne    41a979 <inflate+0x4329>
                last = this;
                for (;;) {
                    this = state->lencode[last.val +
                            (BITS(last.bits + last.op) >> last.bits)];
  419c69:	8d 0c 06             	lea    (%rsi,%rax,1),%ecx
  419c6c:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  419c72:	41 d3 e4             	shl    %cl,%r12d
  419c75:	89 d1                	mov    %edx,%ecx
  419c77:	41 83 ec 01          	sub    $0x1,%r12d
  419c7b:	45 21 e1             	and    %r12d,%r9d
  419c7e:	41 d3 e9             	shr    %cl,%r9d
                PULLBYTE();
            }
            if (this.op && (this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->lencode[last.val +
  419c81:	45 8d 0c 39          	lea    (%r9,%rdi,1),%r9d
  419c85:	4f 8d 14 88          	lea    (%r8,%r9,4),%r10
                            (BITS(last.bits + last.op) >> last.bits)];
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
  419c89:	41 0f b6 52 01       	movzbl 0x1(%r10),%edx
                PULLBYTE();
            }
            if (this.op && (this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->lencode[last.val +
  419c8e:	41 0f b6 32          	movzbl (%r10),%esi
  419c92:	45 0f b7 4a 02       	movzwl 0x2(%r10),%r9d
                            (BITS(last.bits + last.op) >> last.bits)];
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
  419c97:	8d 2c 10             	lea    (%rax,%rdx,1),%ebp
  419c9a:	39 eb                	cmp    %ebp,%ebx
  419c9c:	0f 83 76 12 00 00    	jae    41af18 <inflate+0x48c8>
                    PULLBYTE();
  419ca2:	45 85 f6             	test   %r14d,%r14d
  419ca5:	0f 84 12 1f 00 00    	je     41bbbd <inflate+0x556d>
  419cab:	49 83 c7 01          	add    $0x1,%r15
  419caf:	41 0f b6 77 ff       	movzbl -0x1(%r15),%esi
  419cb4:	89 d9                	mov    %ebx,%ecx
            }
            if (this.op && (this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->lencode[last.val +
                            (BITS(last.bits + last.op) >> last.bits)];
  419cb6:	44 89 e2             	mov    %r12d,%edx
  419cb9:	41 83 ee 01          	sub    $0x1,%r14d
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
                    PULLBYTE();
  419cbd:	83 c3 08             	add    $0x8,%ebx
  419cc0:	45 89 f2             	mov    %r14d,%r10d
  419cc3:	41 83 e2 03          	and    $0x3,%r10d
  419cc7:	48 d3 e6             	shl    %cl,%rsi
            }
            if (this.op && (this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->lencode[last.val +
                            (BITS(last.bits + last.op) >> last.bits)];
  419cca:	89 c1                	mov    %eax,%ecx
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
                    PULLBYTE();
  419ccc:	49 01 f5             	add    %rsi,%r13
            }
            if (this.op && (this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->lencode[last.val +
                            (BITS(last.bits + last.op) >> last.bits)];
  419ccf:	44 21 ea             	and    %r13d,%edx
  419cd2:	d3 ea                	shr    %cl,%edx
                PULLBYTE();
            }
            if (this.op && (this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->lencode[last.val +
  419cd4:	01 fa                	add    %edi,%edx
  419cd6:	49 8d 2c 90          	lea    (%r8,%rdx,4),%rbp
                            (BITS(last.bits + last.op) >> last.bits)];
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
  419cda:	0f b6 55 01          	movzbl 0x1(%rbp),%edx
                PULLBYTE();
            }
            if (this.op && (this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->lencode[last.val +
  419cde:	0f b6 75 00          	movzbl 0x0(%rbp),%esi
  419ce2:	44 0f b7 4d 02       	movzwl 0x2(%rbp),%r9d
                            (BITS(last.bits + last.op) >> last.bits)];
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
  419ce7:	8d 0c 02             	lea    (%rdx,%rax,1),%ecx
  419cea:	39 d9                	cmp    %ebx,%ecx
  419cec:	0f 86 26 12 00 00    	jbe    41af18 <inflate+0x48c8>
                    PULLBYTE();
  419cf2:	45 85 f6             	test   %r14d,%r14d
  419cf5:	0f 84 ac 1e 00 00    	je     41bba7 <inflate+0x5557>
  419cfb:	45 85 d2             	test   %r10d,%r10d
  419cfe:	0f 84 de 00 00 00    	je     419de2 <inflate+0x3792>
  419d04:	41 83 fa 01          	cmp    $0x1,%r10d
  419d08:	0f 84 8a 00 00 00    	je     419d98 <inflate+0x3748>
  419d0e:	41 83 fa 02          	cmp    $0x2,%r10d
  419d12:	74 41                	je     419d55 <inflate+0x3705>
  419d14:	49 83 c7 01          	add    $0x1,%r15
  419d18:	45 0f b6 4f ff       	movzbl -0x1(%r15),%r9d
  419d1d:	89 d9                	mov    %ebx,%ecx
            }
            if (this.op && (this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->lencode[last.val +
                            (BITS(last.bits + last.op) >> last.bits)];
  419d1f:	45 89 e2             	mov    %r12d,%r10d
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
                    PULLBYTE();
  419d22:	83 c3 08             	add    $0x8,%ebx
  419d25:	41 83 ee 01          	sub    $0x1,%r14d
  419d29:	49 d3 e1             	shl    %cl,%r9
            }
            if (this.op && (this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->lencode[last.val +
                            (BITS(last.bits + last.op) >> last.bits)];
  419d2c:	89 c1                	mov    %eax,%ecx
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
                    PULLBYTE();
  419d2e:	4d 01 cd             	add    %r9,%r13
            }
            if (this.op && (this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->lencode[last.val +
                            (BITS(last.bits + last.op) >> last.bits)];
  419d31:	45 21 ea             	and    %r13d,%r10d
  419d34:	41 d3 ea             	shr    %cl,%r10d
                PULLBYTE();
            }
            if (this.op && (this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->lencode[last.val +
  419d37:	41 01 fa             	add    %edi,%r10d
  419d3a:	4b 8d 14 90          	lea    (%r8,%r10,4),%rdx
  419d3e:	0f b6 32             	movzbl (%rdx),%esi
  419d41:	44 0f b7 4a 02       	movzwl 0x2(%rdx),%r9d
                            (BITS(last.bits + last.op) >> last.bits)];
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
  419d46:	0f b6 52 01          	movzbl 0x1(%rdx),%edx
  419d4a:	8d 2c 02             	lea    (%rdx,%rax,1),%ebp
  419d4d:	39 dd                	cmp    %ebx,%ebp
  419d4f:	0f 86 c3 11 00 00    	jbe    41af18 <inflate+0x48c8>
                    PULLBYTE();
  419d55:	49 83 c7 01          	add    $0x1,%r15
  419d59:	41 0f b6 77 ff       	movzbl -0x1(%r15),%esi
  419d5e:	89 d9                	mov    %ebx,%ecx
            }
            if (this.op && (this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->lencode[last.val +
                            (BITS(last.bits + last.op) >> last.bits)];
  419d60:	45 89 e1             	mov    %r12d,%r9d
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
                    PULLBYTE();
  419d63:	83 c3 08             	add    $0x8,%ebx
  419d66:	41 83 ee 01          	sub    $0x1,%r14d
  419d6a:	48 d3 e6             	shl    %cl,%rsi
            }
            if (this.op && (this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->lencode[last.val +
                            (BITS(last.bits + last.op) >> last.bits)];
  419d6d:	89 c1                	mov    %eax,%ecx
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
                    PULLBYTE();
  419d6f:	49 01 f5             	add    %rsi,%r13
            }
            if (this.op && (this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->lencode[last.val +
                            (BITS(last.bits + last.op) >> last.bits)];
  419d72:	45 21 e9             	and    %r13d,%r9d
  419d75:	41 d3 e9             	shr    %cl,%r9d
                PULLBYTE();
            }
            if (this.op && (this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->lencode[last.val +
  419d78:	41 01 f9             	add    %edi,%r9d
  419d7b:	4f 8d 14 88          	lea    (%r8,%r9,4),%r10
                            (BITS(last.bits + last.op) >> last.bits)];
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
  419d7f:	41 0f b6 52 01       	movzbl 0x1(%r10),%edx
                PULLBYTE();
            }
            if (this.op && (this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->lencode[last.val +
  419d84:	41 0f b6 32          	movzbl (%r10),%esi
  419d88:	45 0f b7 4a 02       	movzwl 0x2(%r10),%r9d
                            (BITS(last.bits + last.op) >> last.bits)];
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
  419d8d:	8d 2c 02             	lea    (%rdx,%rax,1),%ebp
  419d90:	39 dd                	cmp    %ebx,%ebp
  419d92:	0f 86 80 11 00 00    	jbe    41af18 <inflate+0x48c8>
                    PULLBYTE();
  419d98:	49 83 c7 01          	add    $0x1,%r15
  419d9c:	41 0f b6 57 ff       	movzbl -0x1(%r15),%edx
  419da1:	89 d9                	mov    %ebx,%ecx
            }
            if (this.op && (this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->lencode[last.val +
                            (BITS(last.bits + last.op) >> last.bits)];
  419da3:	44 89 e6             	mov    %r12d,%esi
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
                    PULLBYTE();
  419da6:	83 c3 08             	add    $0x8,%ebx
  419da9:	41 83 ee 01          	sub    $0x1,%r14d
  419dad:	48 d3 e2             	shl    %cl,%rdx
            }
            if (this.op && (this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->lencode[last.val +
                            (BITS(last.bits + last.op) >> last.bits)];
  419db0:	89 c1                	mov    %eax,%ecx
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
                    PULLBYTE();
  419db2:	49 01 d5             	add    %rdx,%r13
            }
            if (this.op && (this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->lencode[last.val +
                            (BITS(last.bits + last.op) >> last.bits)];
  419db5:	44 21 ee             	and    %r13d,%esi
  419db8:	d3 ee                	shr    %cl,%esi
                PULLBYTE();
            }
            if (this.op && (this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->lencode[last.val +
  419dba:	01 fe                	add    %edi,%esi
  419dbc:	4d 8d 14 b0          	lea    (%r8,%rsi,4),%r10
                            (BITS(last.bits + last.op) >> last.bits)];
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
  419dc0:	41 0f b6 52 01       	movzbl 0x1(%r10),%edx
                PULLBYTE();
            }
            if (this.op && (this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->lencode[last.val +
  419dc5:	41 0f b6 32          	movzbl (%r10),%esi
  419dc9:	45 0f b7 4a 02       	movzwl 0x2(%r10),%r9d
                            (BITS(last.bits + last.op) >> last.bits)];
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
  419dce:	8d 2c 02             	lea    (%rdx,%rax,1),%ebp
  419dd1:	39 dd                	cmp    %ebx,%ebp
  419dd3:	0f 86 3f 11 00 00    	jbe    41af18 <inflate+0x48c8>
                    PULLBYTE();
  419dd9:	45 85 f6             	test   %r14d,%r14d
  419ddc:	0f 84 b4 1e 00 00    	je     41bc96 <inflate+0x5646>
  419de2:	4c 89 5c 24 48       	mov    %r11,0x48(%rsp)
  419de7:	4d 8d 57 01          	lea    0x1(%r15),%r10
  419deb:	45 0f b6 5a ff       	movzbl -0x1(%r10),%r11d
  419df0:	89 d9                	mov    %ebx,%ecx
            }
            if (this.op && (this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->lencode[last.val +
                            (BITS(last.bits + last.op) >> last.bits)];
  419df2:	45 89 e1             	mov    %r12d,%r9d
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
                    PULLBYTE();
  419df5:	41 8d 6e ff          	lea    -0x1(%r14),%ebp
  419df9:	4d 89 d7             	mov    %r10,%r15
  419dfc:	41 89 ee             	mov    %ebp,%r14d
  419dff:	49 d3 e3             	shl    %cl,%r11
            }
            if (this.op && (this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->lencode[last.val +
                            (BITS(last.bits + last.op) >> last.bits)];
  419e02:	89 c1                	mov    %eax,%ecx
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
                    PULLBYTE();
  419e04:	4d 01 dd             	add    %r11,%r13
  419e07:	44 8d 5b 08          	lea    0x8(%rbx),%r11d
            }
            if (this.op && (this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->lencode[last.val +
                            (BITS(last.bits + last.op) >> last.bits)];
  419e0b:	45 21 e9             	and    %r13d,%r9d
  419e0e:	41 d3 e9             	shr    %cl,%r9d
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
                    PULLBYTE();
  419e11:	44 89 db             	mov    %r11d,%ebx
                PULLBYTE();
            }
            if (this.op && (this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->lencode[last.val +
  419e14:	41 01 f9             	add    %edi,%r9d
  419e17:	4b 8d 14 88          	lea    (%r8,%r9,4),%rdx
  419e1b:	0f b6 32             	movzbl (%rdx),%esi
  419e1e:	44 0f b7 4a 02       	movzwl 0x2(%rdx),%r9d
                            (BITS(last.bits + last.op) >> last.bits)];
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
  419e23:	0f b6 52 01          	movzbl 0x1(%rdx),%edx
  419e27:	8d 0c 02             	lea    (%rdx,%rax,1),%ecx
  419e2a:	44 39 d9             	cmp    %r11d,%ecx
  419e2d:	0f 86 e0 10 00 00    	jbe    41af13 <inflate+0x48c3>
                    PULLBYTE();
  419e33:	49 83 c7 01          	add    $0x1,%r15
  419e37:	41 0f b6 77 ff       	movzbl -0x1(%r15),%esi
  419e3c:	89 d9                	mov    %ebx,%ecx
            }
            if (this.op && (this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->lencode[last.val +
                            (BITS(last.bits + last.op) >> last.bits)];
  419e3e:	45 89 e1             	mov    %r12d,%r9d
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
                    PULLBYTE();
  419e41:	83 c3 08             	add    $0x8,%ebx
  419e44:	41 83 ee 01          	sub    $0x1,%r14d
  419e48:	48 d3 e6             	shl    %cl,%rsi
            }
            if (this.op && (this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->lencode[last.val +
                            (BITS(last.bits + last.op) >> last.bits)];
  419e4b:	89 c1                	mov    %eax,%ecx
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
                    PULLBYTE();
  419e4d:	49 01 f5             	add    %rsi,%r13
            }
            if (this.op && (this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->lencode[last.val +
                            (BITS(last.bits + last.op) >> last.bits)];
  419e50:	45 21 e9             	and    %r13d,%r9d
  419e53:	41 d3 e9             	shr    %cl,%r9d
                PULLBYTE();
            }
            if (this.op && (this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->lencode[last.val +
  419e56:	41 01 f9             	add    %edi,%r9d
  419e59:	4b 8d 14 88          	lea    (%r8,%r9,4),%rdx
  419e5d:	0f b6 32             	movzbl (%rdx),%esi
  419e60:	44 0f b7 4a 02       	movzwl 0x2(%rdx),%r9d
                            (BITS(last.bits + last.op) >> last.bits)];
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
  419e65:	0f b6 52 01          	movzbl 0x1(%rdx),%edx
  419e69:	8d 0c 02             	lea    (%rdx,%rax,1),%ecx
  419e6c:	39 d9                	cmp    %ebx,%ecx
  419e6e:	0f 86 9f 10 00 00    	jbe    41af13 <inflate+0x48c3>
                    PULLBYTE();
  419e74:	4d 8d 7a 02          	lea    0x2(%r10),%r15
  419e78:	41 0f b6 77 ff       	movzbl -0x1(%r15),%esi
  419e7d:	89 d9                	mov    %ebx,%ecx
            }
            if (this.op && (this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->lencode[last.val +
                            (BITS(last.bits + last.op) >> last.bits)];
  419e7f:	45 89 e1             	mov    %r12d,%r9d
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
                    PULLBYTE();
  419e82:	41 8d 5b 10          	lea    0x10(%r11),%ebx
  419e86:	44 8d 75 fe          	lea    -0x2(%rbp),%r14d
  419e8a:	48 d3 e6             	shl    %cl,%rsi
            }
            if (this.op && (this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->lencode[last.val +
                            (BITS(last.bits + last.op) >> last.bits)];
  419e8d:	89 c1                	mov    %eax,%ecx
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
                    PULLBYTE();
  419e8f:	49 01 f5             	add    %rsi,%r13
            }
            if (this.op && (this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->lencode[last.val +
                            (BITS(last.bits + last.op) >> last.bits)];
  419e92:	45 21 e9             	and    %r13d,%r9d
  419e95:	41 d3 e9             	shr    %cl,%r9d
                PULLBYTE();
            }
            if (this.op && (this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->lencode[last.val +
  419e98:	41 01 f9             	add    %edi,%r9d
  419e9b:	4b 8d 14 88          	lea    (%r8,%r9,4),%rdx
  419e9f:	0f b6 32             	movzbl (%rdx),%esi
  419ea2:	44 0f b7 4a 02       	movzwl 0x2(%rdx),%r9d
                            (BITS(last.bits + last.op) >> last.bits)];
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
  419ea7:	0f b6 52 01          	movzbl 0x1(%rdx),%edx
  419eab:	8d 0c 02             	lea    (%rdx,%rax,1),%ecx
  419eae:	39 d9                	cmp    %ebx,%ecx
  419eb0:	0f 86 5d 10 00 00    	jbe    41af13 <inflate+0x48c3>
                    PULLBYTE();
  419eb6:	4d 8d 7a 03          	lea    0x3(%r10),%r15
  419eba:	44 8d 75 fd          	lea    -0x3(%rbp),%r14d
  419ebe:	89 d9                	mov    %ebx,%ecx
            }
            if (this.op && (this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->lencode[last.val +
                            (BITS(last.bits + last.op) >> last.bits)];
  419ec0:	45 89 e2             	mov    %r12d,%r10d
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
                    PULLBYTE();
  419ec3:	41 8d 5b 18          	lea    0x18(%r11),%ebx
  419ec7:	41 0f b6 6f ff       	movzbl -0x1(%r15),%ebp
  419ecc:	48 d3 e5             	shl    %cl,%rbp
            }
            if (this.op && (this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->lencode[last.val +
                            (BITS(last.bits + last.op) >> last.bits)];
  419ecf:	89 c1                	mov    %eax,%ecx
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
                    PULLBYTE();
  419ed1:	49 01 ed             	add    %rbp,%r13
            }
            if (this.op && (this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->lencode[last.val +
                            (BITS(last.bits + last.op) >> last.bits)];
  419ed4:	45 21 ea             	and    %r13d,%r10d
  419ed7:	41 d3 ea             	shr    %cl,%r10d
                PULLBYTE();
            }
            if (this.op && (this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->lencode[last.val +
  419eda:	41 01 fa             	add    %edi,%r10d
  419edd:	4f 8d 1c 90          	lea    (%r8,%r10,4),%r11
                            (BITS(last.bits + last.op) >> last.bits)];
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
  419ee1:	41 0f b6 53 01       	movzbl 0x1(%r11),%edx
                PULLBYTE();
            }
            if (this.op && (this.op & 0xf0) == 0) {
                last = this;
                for (;;) {
                    this = state->lencode[last.val +
  419ee6:	41 0f b6 33          	movzbl (%r11),%esi
  419eea:	45 0f b7 4b 02       	movzwl 0x2(%r11),%r9d
                            (BITS(last.bits + last.op) >> last.bits)];
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
  419eef:	8d 2c 02             	lea    (%rdx,%rax,1),%ebp
  419ef2:	39 dd                	cmp    %ebx,%ebp
  419ef4:	0f 86 19 10 00 00    	jbe    41af13 <inflate+0x48c3>
                    PULLBYTE();
  419efa:	45 85 f6             	test   %r14d,%r14d
  419efd:	0f 85 e4 fe ff ff    	jne    419de7 <inflate+0x3797>
  419f03:	44 89 f6             	mov    %r14d,%esi
  419f06:	41 89 da             	mov    %ebx,%r10d
  419f09:	4d 89 eb             	mov    %r13,%r11
  419f0c:	48 8b 5c 24 48       	mov    0x48(%rsp),%rbx
  419f11:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  419f16:	e9 85 d6 ff ff       	jmpq   4175a0 <inflate+0xf50>
  419f1b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
                    NEEDBITS(this.bits);
                    DROPBITS(this.bits);
                    state->lens[state->have++] = this.val;
                }
                else {
                    if (this.val == 16) {
  419f20:	66 83 ff 10          	cmp    $0x10,%di
  419f24:	0f 84 70 06 00 00    	je     41a59a <inflate+0x3f4a>
                        }
                        len = state->lens[state->have - 1];
                        copy = 3 + BITS(2);
                        DROPBITS(2);
                    }
                    else if (this.val == 17) {
  419f2a:	66 83 ff 11          	cmp    $0x11,%di
  419f2e:	0f 84 e5 0a 00 00    	je     41aa19 <inflate+0x43c9>
                        len = 0;
                        copy = 3 + BITS(3);
                        DROPBITS(3);
                    }
                    else {
                        NEEDBITS(this.bits + 7);
  419f34:	44 8d 50 07          	lea    0x7(%rax),%r10d
  419f38:	44 39 d3             	cmp    %r10d,%ebx
  419f3b:	0f 83 bb 08 00 00    	jae    41a7fc <inflate+0x41ac>
  419f41:	45 85 f6             	test   %r14d,%r14d
  419f44:	0f 84 bf 18 00 00    	je     41b809 <inflate+0x51b9>
  419f4a:	89 da                	mov    %ebx,%edx
  419f4c:	f7 d2                	not    %edx
  419f4e:	44 01 d2             	add    %r10d,%edx
  419f51:	c1 ea 03             	shr    $0x3,%edx
  419f54:	83 e2 07             	and    $0x7,%edx
  419f57:	0f 84 08 01 00 00    	je     41a065 <inflate+0x3a15>
  419f5d:	49 83 c7 01          	add    $0x1,%r15
  419f61:	45 0f b6 4f ff       	movzbl -0x1(%r15),%r9d
  419f66:	89 d9                	mov    %ebx,%ecx
  419f68:	83 c3 08             	add    $0x8,%ebx
  419f6b:	41 83 ee 01          	sub    $0x1,%r14d
  419f6f:	49 d3 e1             	shl    %cl,%r9
  419f72:	4d 01 cd             	add    %r9,%r13
  419f75:	44 39 d3             	cmp    %r10d,%ebx
  419f78:	0f 83 7e 08 00 00    	jae    41a7fc <inflate+0x41ac>
  419f7e:	45 85 f6             	test   %r14d,%r14d
  419f81:	0f 84 5d 1a 00 00    	je     41b9e4 <inflate+0x5394>
  419f87:	83 fa 01             	cmp    $0x1,%edx
  419f8a:	0f 84 d5 00 00 00    	je     41a065 <inflate+0x3a15>
  419f90:	83 fa 02             	cmp    $0x2,%edx
  419f93:	0f 84 ae 00 00 00    	je     41a047 <inflate+0x39f7>
  419f99:	83 fa 03             	cmp    $0x3,%edx
  419f9c:	0f 84 87 00 00 00    	je     41a029 <inflate+0x39d9>
  419fa2:	83 fa 04             	cmp    $0x4,%edx
  419fa5:	74 64                	je     41a00b <inflate+0x39bb>
  419fa7:	83 fa 05             	cmp    $0x5,%edx
  419faa:	74 41                	je     419fed <inflate+0x399d>
  419fac:	83 fa 06             	cmp    $0x6,%edx
  419faf:	74 1e                	je     419fcf <inflate+0x397f>
  419fb1:	49 83 c7 01          	add    $0x1,%r15
  419fb5:	45 0f b6 47 ff       	movzbl -0x1(%r15),%r8d
  419fba:	89 d9                	mov    %ebx,%ecx
  419fbc:	83 c3 08             	add    $0x8,%ebx
  419fbf:	49 d3 e0             	shl    %cl,%r8
  419fc2:	4d 01 c5             	add    %r8,%r13
  419fc5:	41 83 ee 01          	sub    $0x1,%r14d
  419fc9:	0f 84 10 19 00 00    	je     41b8df <inflate+0x528f>
  419fcf:	49 83 c7 01          	add    $0x1,%r15
  419fd3:	41 0f b6 7f ff       	movzbl -0x1(%r15),%edi
  419fd8:	89 d9                	mov    %ebx,%ecx
  419fda:	83 c3 08             	add    $0x8,%ebx
  419fdd:	48 d3 e7             	shl    %cl,%rdi
  419fe0:	49 01 fd             	add    %rdi,%r13
  419fe3:	41 83 ee 01          	sub    $0x1,%r14d
  419fe7:	0f 84 87 18 00 00    	je     41b874 <inflate+0x5224>
  419fed:	49 83 c7 01          	add    $0x1,%r15
  419ff1:	41 0f b6 77 ff       	movzbl -0x1(%r15),%esi
  419ff6:	89 d9                	mov    %ebx,%ecx
  419ff8:	83 c3 08             	add    $0x8,%ebx
  419ffb:	48 d3 e6             	shl    %cl,%rsi
  419ffe:	49 01 f5             	add    %rsi,%r13
  41a001:	41 83 ee 01          	sub    $0x1,%r14d
  41a005:	0f 84 ad 19 00 00    	je     41b9b8 <inflate+0x5368>
  41a00b:	49 83 c7 01          	add    $0x1,%r15
  41a00f:	41 0f b6 57 ff       	movzbl -0x1(%r15),%edx
  41a014:	89 d9                	mov    %ebx,%ecx
  41a016:	83 c3 08             	add    $0x8,%ebx
  41a019:	48 d3 e2             	shl    %cl,%rdx
  41a01c:	49 01 d5             	add    %rdx,%r13
  41a01f:	41 83 ee 01          	sub    $0x1,%r14d
  41a023:	0f 84 a5 19 00 00    	je     41b9ce <inflate+0x537e>
  41a029:	49 83 c7 01          	add    $0x1,%r15
  41a02d:	45 0f b6 4f ff       	movzbl -0x1(%r15),%r9d
  41a032:	89 d9                	mov    %ebx,%ecx
  41a034:	83 c3 08             	add    $0x8,%ebx
  41a037:	49 d3 e1             	shl    %cl,%r9
  41a03a:	4d 01 cd             	add    %r9,%r13
  41a03d:	41 83 ee 01          	sub    $0x1,%r14d
  41a041:	0f 84 b3 19 00 00    	je     41b9fa <inflate+0x53aa>
  41a047:	49 83 c7 01          	add    $0x1,%r15
  41a04b:	45 0f b6 47 ff       	movzbl -0x1(%r15),%r8d
  41a050:	89 d9                	mov    %ebx,%ecx
  41a052:	83 c3 08             	add    $0x8,%ebx
  41a055:	49 d3 e0             	shl    %cl,%r8
  41a058:	4d 01 c5             	add    %r8,%r13
  41a05b:	41 83 ee 01          	sub    $0x1,%r14d
  41a05f:	0f 84 18 01 00 00    	je     41a17d <inflate+0x3b2d>
  41a065:	89 d9                	mov    %ebx,%ecx
  41a067:	49 8d 7f 01          	lea    0x1(%r15),%rdi
  41a06b:	0f b6 77 ff          	movzbl -0x1(%rdi),%esi
  41a06f:	8d 51 08             	lea    0x8(%rcx),%edx
  41a072:	41 8d 5e ff          	lea    -0x1(%r14),%ebx
  41a076:	49 89 ff             	mov    %rdi,%r15
  41a079:	41 89 de             	mov    %ebx,%r14d
  41a07c:	48 d3 e6             	shl    %cl,%rsi
  41a07f:	89 d1                	mov    %edx,%ecx
  41a081:	49 01 f5             	add    %rsi,%r13
  41a084:	44 39 d2             	cmp    %r10d,%edx
  41a087:	0f 83 6d 07 00 00    	jae    41a7fa <inflate+0x41aa>
  41a08d:	45 85 f6             	test   %r14d,%r14d
  41a090:	0f 84 9f 17 00 00    	je     41b835 <inflate+0x51e5>
  41a096:	49 83 c7 01          	add    $0x1,%r15
  41a09a:	41 0f b6 77 ff       	movzbl -0x1(%r15),%esi
  41a09f:	48 d3 e6             	shl    %cl,%rsi
  41a0a2:	83 c1 08             	add    $0x8,%ecx
  41a0a5:	49 01 f5             	add    %rsi,%r13
  41a0a8:	41 83 ee 01          	sub    $0x1,%r14d
  41a0ac:	0f 84 6d 17 00 00    	je     41b81f <inflate+0x51cf>
  41a0b2:	4c 8d 7f 02          	lea    0x2(%rdi),%r15
  41a0b6:	45 0f b6 77 ff       	movzbl -0x1(%r15),%r14d
  41a0bb:	41 89 d9             	mov    %ebx,%r9d
  41a0be:	49 d3 e6             	shl    %cl,%r14
  41a0c1:	8d 4a 10             	lea    0x10(%rdx),%ecx
  41a0c4:	4d 01 f5             	add    %r14,%r13
  41a0c7:	41 83 e9 02          	sub    $0x2,%r9d
  41a0cb:	0f 84 8d 17 00 00    	je     41b85e <inflate+0x520e>
  41a0d1:	4c 8d 7f 03          	lea    0x3(%rdi),%r15
  41a0d5:	45 0f b6 47 ff       	movzbl -0x1(%r15),%r8d
  41a0da:	89 de                	mov    %ebx,%esi
  41a0dc:	49 d3 e0             	shl    %cl,%r8
  41a0df:	8d 4a 18             	lea    0x18(%rdx),%ecx
  41a0e2:	4d 01 c5             	add    %r8,%r13
  41a0e5:	83 ee 03             	sub    $0x3,%esi
  41a0e8:	0f 84 5d 17 00 00    	je     41b84b <inflate+0x51fb>
  41a0ee:	4c 8d 7f 04          	lea    0x4(%rdi),%r15
  41a0f2:	45 0f b6 77 ff       	movzbl -0x1(%r15),%r14d
  41a0f7:	41 89 d9             	mov    %ebx,%r9d
  41a0fa:	49 d3 e6             	shl    %cl,%r14
  41a0fd:	8d 4a 20             	lea    0x20(%rdx),%ecx
  41a100:	4d 01 f5             	add    %r14,%r13
  41a103:	41 83 e9 04          	sub    $0x4,%r9d
  41a107:	0f 84 90 17 00 00    	je     41b89d <inflate+0x524d>
  41a10d:	4c 8d 7f 05          	lea    0x5(%rdi),%r15
  41a111:	45 0f b6 47 ff       	movzbl -0x1(%r15),%r8d
  41a116:	89 de                	mov    %ebx,%esi
  41a118:	49 d3 e0             	shl    %cl,%r8
  41a11b:	8d 4a 28             	lea    0x28(%rdx),%ecx
  41a11e:	4d 01 c5             	add    %r8,%r13
  41a121:	83 ee 05             	sub    $0x5,%esi
  41a124:	0f 84 60 17 00 00    	je     41b88a <inflate+0x523a>
  41a12a:	4c 8d 7f 06          	lea    0x6(%rdi),%r15
  41a12e:	45 0f b6 77 ff       	movzbl -0x1(%r15),%r14d
  41a133:	41 89 d9             	mov    %ebx,%r9d
  41a136:	49 d3 e6             	shl    %cl,%r14
  41a139:	8d 4a 30             	lea    0x30(%rdx),%ecx
  41a13c:	4d 01 f5             	add    %r14,%r13
  41a13f:	41 83 e9 06          	sub    $0x6,%r9d
  41a143:	0f 84 80 17 00 00    	je     41b8c9 <inflate+0x5279>
  41a149:	4c 8d 7f 07          	lea    0x7(%rdi),%r15
  41a14d:	41 0f b6 7f ff       	movzbl -0x1(%r15),%edi
  41a152:	48 d3 e7             	shl    %cl,%rdi
  41a155:	8d 4a 38             	lea    0x38(%rdx),%ecx
  41a158:	49 01 fd             	add    %rdi,%r13
  41a15b:	83 eb 07             	sub    $0x7,%ebx
  41a15e:	41 89 de             	mov    %ebx,%r14d
  41a161:	0f 85 00 ff ff ff    	jne    41a067 <inflate+0x3a17>
  41a167:	4c 89 db             	mov    %r11,%rbx
  41a16a:	44 89 f6             	mov    %r14d,%esi
  41a16d:	41 89 ca             	mov    %ecx,%r10d
  41a170:	4d 89 eb             	mov    %r13,%r11
  41a173:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41a178:	e9 23 d4 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41a17d:	41 89 da             	mov    %ebx,%r10d
  41a180:	44 89 f6             	mov    %r14d,%esi
  41a183:	4c 89 db             	mov    %r11,%rbx
  41a186:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41a18b:	4d 89 eb             	mov    %r13,%r11
  41a18e:	e9 0d d4 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41a193:	89 eb                	mov    %ebp,%ebx
            state->extra = (unsigned)(this.op) & 15;
            state->mode = DISTEXT;
        case DISTEXT:
            if (state->extra) {
                NEEDBITS(state->extra);
                state->offset += BITS(state->extra);
  41a195:	89 f9                	mov    %edi,%ecx
  41a197:	41 b8 01 00 00 00    	mov    $0x1,%r8d
                DROPBITS(state->extra);
  41a19d:	29 fb                	sub    %edi,%ebx
            state->extra = (unsigned)(this.op) & 15;
            state->mode = DISTEXT;
        case DISTEXT:
            if (state->extra) {
                NEEDBITS(state->extra);
                state->offset += BITS(state->extra);
  41a19f:	41 d3 e0             	shl    %cl,%r8d
  41a1a2:	41 83 e8 01          	sub    $0x1,%r8d
  41a1a6:	45 21 e8             	and    %r13d,%r8d
  41a1a9:	45 03 43 58          	add    0x58(%r11),%r8d
                DROPBITS(state->extra);
  41a1ad:	49 d3 ed             	shr    %cl,%r13
            state->extra = (unsigned)(this.op) & 15;
            state->mode = DISTEXT;
        case DISTEXT:
            if (state->extra) {
                NEEDBITS(state->extra);
                state->offset += BITS(state->extra);
  41a1b0:	45 89 43 58          	mov    %r8d,0x58(%r11)
  41a1b4:	e9 a3 f4 ff ff       	jmpq   41965c <inflate+0x300c>
  41a1b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
                strm->msg = (char *)"invalid distance code";
                state->mode = BAD;
                break;
            }
            state->offset = (unsigned)this.val;
            state->extra = (unsigned)(this.op) & 15;
  41a1c0:	83 e7 0f             	and    $0xf,%edi
            if (this.op & 64) {
                strm->msg = (char *)"invalid distance code";
                state->mode = BAD;
                break;
            }
            state->offset = (unsigned)this.val;
  41a1c3:	45 89 53 58          	mov    %r10d,0x58(%r11)
            state->extra = (unsigned)(this.op) & 15;
            state->mode = DISTEXT;
  41a1c7:	41 c7 03 15 00 00 00 	movl   $0x15,(%r11)
                strm->msg = (char *)"invalid distance code";
                state->mode = BAD;
                break;
            }
            state->offset = (unsigned)this.val;
            state->extra = (unsigned)(this.op) & 15;
  41a1ce:	41 89 7b 5c          	mov    %edi,0x5c(%r11)
  41a1d2:	e9 3d ea ff ff       	jmpq   418c14 <inflate+0x25c4>
  41a1d7:	45 8d 49 ff          	lea    -0x1(%r9),%r9d
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  41a1db:	0f b6 10             	movzbl (%rax),%edx
  41a1de:	48 8b 6c 24 08       	mov    0x8(%rsp),%rbp
  41a1e3:	41 ba 01 00 00 00    	mov    $0x1,%r10d
  41a1e9:	49 8d 71 01          	lea    0x1(%r9),%rsi
  41a1ed:	4d 89 c8             	mov    %r9,%r8
  41a1f0:	41 83 e1 07          	and    $0x7,%r9d
            } while (--copy);
  41a1f4:	49 39 f2             	cmp    %rsi,%r10
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  41a1f7:	88 55 00             	mov    %dl,0x0(%rbp)
            } while (--copy);
  41a1fa:	0f 84 29 d3 ff ff    	je     417529 <inflate+0xed9>
  41a200:	4d 85 c9             	test   %r9,%r9
  41a203:	0f 84 87 11 00 00    	je     41b390 <inflate+0x4d40>
  41a209:	49 83 f9 01          	cmp    $0x1,%r9
  41a20d:	0f 84 8e 00 00 00    	je     41a2a1 <inflate+0x3c51>
  41a213:	49 83 f9 02          	cmp    $0x2,%r9
  41a217:	74 75                	je     41a28e <inflate+0x3c3e>
  41a219:	49 83 f9 03          	cmp    $0x3,%r9
  41a21d:	74 5d                	je     41a27c <inflate+0x3c2c>
  41a21f:	49 83 f9 04          	cmp    $0x4,%r9
  41a223:	74 45                	je     41a26a <inflate+0x3c1a>
  41a225:	49 83 f9 05          	cmp    $0x5,%r9
  41a229:	74 2c                	je     41a257 <inflate+0x3c07>
  41a22b:	49 83 f9 06          	cmp    $0x6,%r9
  41a22f:	74 14                	je     41a245 <inflate+0x3bf5>
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  41a231:	44 0f b6 60 01       	movzbl 0x1(%rax),%r12d
  41a236:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41a23b:	41 ba 02 00 00 00    	mov    $0x2,%r10d
  41a241:	44 88 67 01          	mov    %r12b,0x1(%rdi)
  41a245:	42 0f b6 0c 10       	movzbl (%rax,%r10,1),%ecx
  41a24a:	4c 8b 4c 24 08       	mov    0x8(%rsp),%r9
  41a24f:	43 88 0c 11          	mov    %cl,(%r9,%r10,1)
  41a253:	49 83 c2 01          	add    $0x1,%r10
  41a257:	42 0f b6 14 10       	movzbl (%rax,%r10,1),%edx
  41a25c:	48 8b 6c 24 08       	mov    0x8(%rsp),%rbp
  41a261:	42 88 54 15 00       	mov    %dl,0x0(%rbp,%r10,1)
  41a266:	49 83 c2 01          	add    $0x1,%r10
  41a26a:	46 0f b6 24 10       	movzbl (%rax,%r10,1),%r12d
  41a26f:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41a274:	46 88 24 17          	mov    %r12b,(%rdi,%r10,1)
  41a278:	49 83 c2 01          	add    $0x1,%r10
  41a27c:	42 0f b6 0c 10       	movzbl (%rax,%r10,1),%ecx
  41a281:	4c 8b 4c 24 08       	mov    0x8(%rsp),%r9
  41a286:	43 88 0c 11          	mov    %cl,(%r9,%r10,1)
  41a28a:	49 83 c2 01          	add    $0x1,%r10
  41a28e:	42 0f b6 14 10       	movzbl (%rax,%r10,1),%edx
  41a293:	48 8b 6c 24 08       	mov    0x8(%rsp),%rbp
  41a298:	42 88 54 15 00       	mov    %dl,0x0(%rbp,%r10,1)
  41a29d:	49 83 c2 01          	add    $0x1,%r10
  41a2a1:	46 0f b6 24 10       	movzbl (%rax,%r10,1),%r12d
  41a2a6:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  41a2ab:	48 89 f9             	mov    %rdi,%rcx
  41a2ae:	46 88 24 17          	mov    %r12b,(%rdi,%r10,1)
  41a2b2:	49 83 c2 01          	add    $0x1,%r10
            } while (--copy);
  41a2b6:	49 39 f2             	cmp    %rsi,%r10
  41a2b9:	0f 84 6a d2 ff ff    	je     417529 <inflate+0xed9>
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
            do {
                *put++ = *from++;
  41a2bf:	46 0f b6 0c 10       	movzbl (%rax,%r10,1),%r9d
  41a2c4:	46 88 0c 11          	mov    %r9b,(%rcx,%r10,1)
  41a2c8:	42 0f b6 54 10 01    	movzbl 0x1(%rax,%r10,1),%edx
  41a2ce:	42 88 54 11 01       	mov    %dl,0x1(%rcx,%r10,1)
  41a2d3:	42 0f b6 6c 10 02    	movzbl 0x2(%rax,%r10,1),%ebp
  41a2d9:	42 88 6c 11 02       	mov    %bpl,0x2(%rcx,%r10,1)
  41a2de:	46 0f b6 64 10 03    	movzbl 0x3(%rax,%r10,1),%r12d
  41a2e4:	46 88 64 11 03       	mov    %r12b,0x3(%rcx,%r10,1)
  41a2e9:	42 0f b6 7c 10 04    	movzbl 0x4(%rax,%r10,1),%edi
  41a2ef:	42 88 7c 11 04       	mov    %dil,0x4(%rcx,%r10,1)
  41a2f4:	46 0f b6 4c 10 05    	movzbl 0x5(%rax,%r10,1),%r9d
  41a2fa:	46 88 4c 11 05       	mov    %r9b,0x5(%rcx,%r10,1)
  41a2ff:	42 0f b6 54 10 06    	movzbl 0x6(%rax,%r10,1),%edx
  41a305:	42 88 54 11 06       	mov    %dl,0x6(%rcx,%r10,1)
  41a30a:	42 0f b6 6c 10 07    	movzbl 0x7(%rax,%r10,1),%ebp
  41a310:	42 88 6c 11 07       	mov    %bpl,0x7(%rcx,%r10,1)
  41a315:	49 83 c2 08          	add    $0x8,%r10
            } while (--copy);
  41a319:	49 39 f2             	cmp    %rsi,%r10
  41a31c:	75 a1                	jne    41a2bf <inflate+0x3c6f>
  41a31e:	e9 06 d2 ff ff       	jmpq   417529 <inflate+0xed9>
            }
            Tracev((stderr, "inflate:       codes ok\n"));
            state->mode = LEN;
        case LEN:
            if (have >= 6 && left >= 258) {
                RESTORE();
  41a323:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  41a328:	4c 8b 54 24 08       	mov    0x8(%rsp),%r10
  41a32d:	44 8b 4c 24 10       	mov    0x10(%rsp),%r9d
                inflate_fast(strm, out);
  41a332:	8b 74 24 18          	mov    0x18(%rsp),%esi
            }
            Tracev((stderr, "inflate:       codes ok\n"));
            state->mode = LEN;
        case LEN:
            if (have >= 6 && left >= 258) {
                RESTORE();
  41a336:	4c 89 5c 24 48       	mov    %r11,0x48(%rsp)
  41a33b:	4c 89 38             	mov    %r15,(%rax)
  41a33e:	44 89 70 08          	mov    %r14d,0x8(%rax)
                inflate_fast(strm, out);
  41a342:	48 89 c7             	mov    %rax,%rdi
  41a345:	49 89 c6             	mov    %rax,%r14
            }
            Tracev((stderr, "inflate:       codes ok\n"));
            state->mode = LEN;
        case LEN:
            if (have >= 6 && left >= 258) {
                RESTORE();
  41a348:	4c 89 50 18          	mov    %r10,0x18(%rax)
  41a34c:	44 89 48 20          	mov    %r9d,0x20(%rax)
  41a350:	4d 89 6b 48          	mov    %r13,0x48(%r11)
  41a354:	41 89 5b 50          	mov    %ebx,0x50(%r11)
                inflate_fast(strm, out);
  41a358:	e8 d3 32 00 00       	callq  41d630 <inflate_fast>
                LOAD();
  41a35d:	4d 8b 6e 18          	mov    0x18(%r14),%r13
  41a361:	45 8b 7e 20          	mov    0x20(%r14),%r15d
  41a365:	4c 8b 5c 24 48       	mov    0x48(%rsp),%r11
  41a36a:	4c 89 6c 24 08       	mov    %r13,0x8(%rsp)
  41a36f:	44 89 7c 24 10       	mov    %r15d,0x10(%rsp)
  41a374:	4d 8b 6b 48          	mov    0x48(%r11),%r13
  41a378:	4d 8b 3e             	mov    (%r14),%r15
  41a37b:	41 8b 5b 50          	mov    0x50(%r11),%ebx
  41a37f:	45 8b 76 08          	mov    0x8(%r14),%r14d
  41a383:	45 8b 23             	mov    (%r11),%r12d
                break;
  41a386:	e9 88 c3 ff ff       	jmpq   416713 <inflate+0xc3>
            NEEDBITS(16);
            if (state->head != Z_NULL) {
                state->head->xflags = (int)(hold & 0xff);
                state->head->os = (int)(hold >> 8);
            }
            if (state->flags & 0x0200) CRC2(state->check, hold);
  41a38b:	49 8b 7b 18          	mov    0x18(%r11),%rdi
  41a38f:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
  41a394:	44 88 6c 24 60       	mov    %r13b,0x60(%rsp)
  41a399:	ba 02 00 00 00       	mov    $0x2,%edx
  41a39e:	49 c1 ed 08          	shr    $0x8,%r13
  41a3a2:	4c 89 5c 24 48       	mov    %r11,0x48(%rsp)
  41a3a7:	44 88 6c 24 61       	mov    %r13b,0x61(%rsp)
  41a3ac:	e8 9f 67 00 00       	callq  420b50 <crc32>
  41a3b1:	4c 8b 5c 24 48       	mov    0x48(%rsp),%r11
  41a3b6:	49 89 43 18          	mov    %rax,0x18(%r11)
  41a3ba:	41 8b 53 10          	mov    0x10(%r11),%edx
  41a3be:	e9 e7 f1 ff ff       	jmpq   4195aa <inflate+0x2f5a>
  41a3c3:	4c 89 db             	mov    %r11,%rbx
  41a3c6:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41a3cb:	4d 89 eb             	mov    %r13,%r11
        case HEAD:
            if (state->wrap == 0) {
                state->mode = TYPEDO;
                break;
            }
            NEEDBITS(16);
  41a3ce:	41 89 ca             	mov    %ecx,%r10d
  41a3d1:	4d 89 cf             	mov    %r9,%r15
  41a3d4:	31 f6                	xor    %esi,%esi
  41a3d6:	e9 c5 d1 ff ff       	jmpq   4175a0 <inflate+0xf50>
            }
#ifdef GUNZIP
            state->mode = LENGTH;
        case LENGTH:
            if (state->wrap && state->flags) {
                NEEDBITS(32);
  41a3db:	89 cb                	mov    %ecx,%ebx
  41a3dd:	41 89 f6             	mov    %esi,%r14d
  41a3e0:	e9 12 e3 ff ff       	jmpq   4186f7 <inflate+0x20a7>
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
                    PULLBYTE();
                }
                DROPBITS(last.bits);
            }
            DROPBITS(this.bits);
  41a3e5:	89 d1                	mov    %edx,%ecx
  41a3e7:	29 c3                	sub    %eax,%ebx
            state->length = (unsigned)this.val;
  41a3e9:	41 89 7b 54          	mov    %edi,0x54(%r11)
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
                    PULLBYTE();
                }
                DROPBITS(last.bits);
            }
            DROPBITS(this.bits);
  41a3ed:	49 d3 ed             	shr    %cl,%r13
            state->length = (unsigned)this.val;
            if ((int)(this.op) == 0) {
                Tracevv((stderr, this.val >= 0x20 && this.val < 0x7f ?
                        "inflate:         literal '%c'\n" :
                        "inflate:         literal 0x%02x\n", this.val));
                state->mode = LIT;
  41a3f0:	41 c7 03 17 00 00 00 	movl   $0x17,(%r11)
                break;
  41a3f7:	41 bc 17 00 00 00    	mov    $0x17,%r12d
  41a3fd:	e9 1b c3 ff ff       	jmpq   41671d <inflate+0xcd>
  41a402:	4c 89 db             	mov    %r11,%rbx
  41a405:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41a40a:	4d 89 eb             	mov    %r13,%r11
            }
#ifdef GUNZIP
            state->mode = LENGTH;
        case LENGTH:
            if (state->wrap && state->flags) {
                NEEDBITS(32);
  41a40d:	41 89 ca             	mov    %ecx,%r10d
  41a410:	49 89 ff             	mov    %rdi,%r15
  41a413:	31 f6                	xor    %esi,%esi
  41a415:	e9 86 d1 ff ff       	jmpq   4175a0 <inflate+0xf50>
            if (!(state->wrap & 1) ||   /* check if zlib header allowed */
#else
            if (
#endif
                ((BITS(8) << 8) + (hold >> 8)) % 31) {
                strm->msg = (char *)"incorrect header check";
  41a41a:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
                state->mode = BAD;
                break;
  41a41f:	41 bc 1b 00 00 00    	mov    $0x1b,%r12d
            if (!(state->wrap & 1) ||   /* check if zlib header allowed */
#else
            if (
#endif
                ((BITS(8) << 8) + (hold >> 8)) % 31) {
                strm->msg = (char *)"incorrect header check";
  41a425:	48 c7 46 30 90 92 43 	movq   $0x439290,0x30(%rsi)
  41a42c:	00 
                state->mode = BAD;
  41a42d:	41 c7 03 1b 00 00 00 	movl   $0x1b,(%r11)
                break;
  41a434:	e9 e4 c2 ff ff       	jmpq   41671d <inflate+0xcd>
        virgin = 0;
    }
#else /* !BUILDFIXED */
#   include "inffixed.h"
#endif /* BUILDFIXED */
    state->lencode = lenfix;
  41a439:	49 c7 43 60 c0 95 43 	movq   $0x4395c0,0x60(%r11)
  41a440:	00 
    state->lenbits = 9;
  41a441:	41 c7 43 70 09 00 00 	movl   $0x9,0x70(%r11)
  41a448:	00 
            case 1:                             /* fixed block */
                fixedtables(state);
                Tracev((stderr, "inflate:     fixed codes block%s\n",
                        state->last ? " (last)" : ""));
                state->mode = LEN;              /* decode codes */
                break;
  41a449:	41 bc 12 00 00 00    	mov    $0x12,%r12d
#else /* !BUILDFIXED */
#   include "inffixed.h"
#endif /* BUILDFIXED */
    state->lencode = lenfix;
    state->lenbits = 9;
    state->distcode = distfix;
  41a44f:	49 c7 43 68 40 95 43 	movq   $0x439540,0x68(%r11)
  41a456:	00 
    state->distbits = 5;
  41a457:	41 c7 43 74 05 00 00 	movl   $0x5,0x74(%r11)
  41a45e:	00 
                break;
            case 1:                             /* fixed block */
                fixedtables(state);
                Tracev((stderr, "inflate:     fixed codes block%s\n",
                        state->last ? " (last)" : ""));
                state->mode = LEN;              /* decode codes */
  41a45f:	41 c7 03 12 00 00 00 	movl   $0x12,(%r11)
                break;
  41a466:	e9 6c c4 ff ff       	jmpq   4168d7 <inflate+0x287>
                Tracev((stderr, "inflate:     dynamic codes block%s\n",
                        state->last ? " (last)" : ""));
                state->mode = TABLE;
                break;
            case 3:
                strm->msg = (char *)"invalid block type";
  41a46b:	4c 8b 6c 24 20       	mov    0x20(%rsp),%r13
                state->mode = BAD;
  41a470:	41 bc 1b 00 00 00    	mov    $0x1b,%r12d
                Tracev((stderr, "inflate:     dynamic codes block%s\n",
                        state->last ? " (last)" : ""));
                state->mode = TABLE;
                break;
            case 3:
                strm->msg = (char *)"invalid block type";
  41a476:	49 c7 45 30 03 93 43 	movq   $0x439303,0x30(%r13)
  41a47d:	00 
                state->mode = BAD;
  41a47e:	41 c7 03 1b 00 00 00 	movl   $0x1b,(%r11)
  41a485:	e9 4d c4 ff ff       	jmpq   4168d7 <inflate+0x287>
                        zmemcpy(state->head->extra + len, next,
                                len + copy > state->head->extra_max ?
                                state->head->extra_max - len : copy);
                    }
                    if (state->flags & 0x0200)
                        state->check = crc32(state->check, next, copy);
  41a48a:	49 8b 7b 18          	mov    0x18(%r11),%rdi
  41a48e:	44 89 e2             	mov    %r12d,%edx
  41a491:	4c 89 fe             	mov    %r15,%rsi
  41a494:	4c 89 5c 24 48       	mov    %r11,0x48(%rsp)
  41a499:	e8 b2 66 00 00       	callq  420b50 <crc32>
  41a49e:	4c 8b 5c 24 48       	mov    0x48(%rsp),%r11
  41a4a3:	49 89 43 18          	mov    %rax,0x18(%r11)
  41a4a7:	e9 1d e4 ff ff       	jmpq   4188c9 <inflate+0x2279>
  41a4ac:	44 89 e5             	mov    %r12d,%ebp
  41a4af:	e9 0c e4 ff ff       	jmpq   4188c0 <inflate+0x2270>
            state->mode = TIME;
        case TIME:
            NEEDBITS(32);
            if (state->head != Z_NULL)
                state->head->time = hold;
            if (state->flags & 0x0200) CRC4(state->check, hold);
  41a4b4:	4c 89 ea             	mov    %r13,%rdx
  41a4b7:	49 8b 7b 18          	mov    0x18(%r11),%rdi
  41a4bb:	4c 89 ed             	mov    %r13,%rbp
  41a4be:	48 c1 ea 08          	shr    $0x8,%rdx
  41a4c2:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
  41a4c7:	44 88 6c 24 60       	mov    %r13b,0x60(%rsp)
  41a4cc:	88 54 24 61          	mov    %dl,0x61(%rsp)
  41a4d0:	48 c1 ed 10          	shr    $0x10,%rbp
  41a4d4:	49 c1 ed 18          	shr    $0x18,%r13
  41a4d8:	ba 04 00 00 00       	mov    $0x4,%edx
  41a4dd:	4c 89 5c 24 48       	mov    %r11,0x48(%rsp)
  41a4e2:	40 88 6c 24 62       	mov    %bpl,0x62(%rsp)
  41a4e7:	44 88 6c 24 63       	mov    %r13b,0x63(%rsp)
  41a4ec:	e8 5f 66 00 00       	callq  420b50 <crc32>
  41a4f1:	4c 8b 5c 24 48       	mov    0x48(%rsp),%r11
  41a4f6:	49 89 43 18          	mov    %rax,0x18(%r11)
  41a4fa:	e9 72 f6 ff ff       	jmpq   419b71 <inflate+0x3521>
            if (state->flags & 0x0400) {
                NEEDBITS(16);
                state->length = (unsigned)(hold);
                if (state->head != Z_NULL)
                    state->head->extra_len = (unsigned)hold;
                if (state->flags & 0x0200) CRC2(state->check, hold);
  41a4ff:	4c 89 ea             	mov    %r13,%rdx
  41a502:	49 8b 7b 18          	mov    0x18(%r11),%rdi
  41a506:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
  41a50b:	48 c1 ea 08          	shr    $0x8,%rdx
  41a50f:	44 88 6c 24 60       	mov    %r13b,0x60(%rsp)
  41a514:	4c 89 5c 24 48       	mov    %r11,0x48(%rsp)
  41a519:	88 54 24 61          	mov    %dl,0x61(%rsp)
  41a51d:	ba 02 00 00 00       	mov    $0x2,%edx
                INITBITS();
  41a522:	31 db                	xor    %ebx,%ebx
            if (state->flags & 0x0400) {
                NEEDBITS(16);
                state->length = (unsigned)(hold);
                if (state->head != Z_NULL)
                    state->head->extra_len = (unsigned)hold;
                if (state->flags & 0x0200) CRC2(state->check, hold);
  41a524:	e8 27 66 00 00       	callq  420b50 <crc32>
  41a529:	4c 8b 5c 24 48       	mov    0x48(%rsp),%r11
                INITBITS();
  41a52e:	45 31 ed             	xor    %r13d,%r13d
            if (state->flags & 0x0400) {
                NEEDBITS(16);
                state->length = (unsigned)(hold);
                if (state->head != Z_NULL)
                    state->head->extra_len = (unsigned)hold;
                if (state->flags & 0x0200) CRC2(state->check, hold);
  41a531:	49 89 43 18          	mov    %rax,0x18(%r11)
  41a535:	41 8b 43 10          	mov    0x10(%r11),%eax
  41a539:	41 89 c0             	mov    %eax,%r8d
  41a53c:	41 81 e0 00 04 00 00 	and    $0x400,%r8d
  41a543:	e9 9a f0 ff ff       	jmpq   4195e2 <inflate+0x2f92>
            strm->adler = state->check = crc32(0L, Z_NULL, 0);
            state->mode = TYPE;
            break;
#endif
        case DICTID:
            NEEDBITS(32);
  41a548:	41 89 f6             	mov    %esi,%r14d
  41a54b:	e9 7d c2 ff ff       	jmpq   4167cd <inflate+0x17d>
            }
            DROPBITS(2);
            break;
        case STORED:
            BYTEBITS();                         /* go to byte boundary */
            NEEDBITS(32);
  41a550:	89 cb                	mov    %ecx,%ebx
  41a552:	45 89 e6             	mov    %r12d,%r14d
  41a555:	e9 5a d6 ff ff       	jmpq   417bb4 <inflate+0x1564>
            else if (state->head != Z_NULL)
                state->head->comment = Z_NULL;
            state->mode = HCRC;
        case HCRC:
            if (state->flags & 0x0200) {
                NEEDBITS(16);
  41a55a:	4c 89 fd             	mov    %r15,%rbp
  41a55d:	e9 6f e9 ff ff       	jmpq   418ed1 <inflate+0x2881>
  41a562:	4c 89 db             	mov    %r11,%rbx
  41a565:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41a56a:	4d 89 eb             	mov    %r13,%r11
            }
            DROPBITS(2);
            break;
        case STORED:
            BYTEBITS();                         /* go to byte boundary */
            NEEDBITS(32);
  41a56d:	41 89 ca             	mov    %ecx,%r10d
  41a570:	49 89 ef             	mov    %rbp,%r15
            }
            Tracev((stderr, "inflate:       stored end\n"));
            state->mode = TYPE;
            break;
        case TABLE:
            NEEDBITS(14);
  41a573:	31 f6                	xor    %esi,%esi
  41a575:	e9 26 d0 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41a57a:	41 89 da             	mov    %ebx,%r10d
  41a57d:	44 89 f6             	mov    %r14d,%esi
  41a580:	4c 89 db             	mov    %r11,%rbx
  41a583:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41a588:	4d 89 eb             	mov    %r13,%r11
  41a58b:	e9 10 d0 ff ff       	jmpq   4175a0 <inflate+0xf50>
            else if (state->head != Z_NULL)
                state->head->comment = Z_NULL;
            state->mode = HCRC;
        case HCRC:
            if (state->flags & 0x0200) {
                NEEDBITS(16);
  41a590:	89 cb                	mov    %ecx,%ebx
  41a592:	45 89 e6             	mov    %r12d,%r14d
  41a595:	e9 37 e9 ff ff       	jmpq   418ed1 <inflate+0x2881>
                    DROPBITS(this.bits);
                    state->lens[state->have++] = this.val;
                }
                else {
                    if (this.val == 16) {
                        NEEDBITS(this.bits + 2);
  41a59a:	44 8d 50 02          	lea    0x2(%rax),%r10d
  41a59e:	44 39 d3             	cmp    %r10d,%ebx
  41a5a1:	0f 83 f7 08 00 00    	jae    41ae9e <inflate+0x484e>
  41a5a7:	45 85 f6             	test   %r14d,%r14d
  41a5aa:	0f 84 e1 15 00 00    	je     41bb91 <inflate+0x5541>
  41a5b0:	89 da                	mov    %ebx,%edx
  41a5b2:	f7 d2                	not    %edx
  41a5b4:	44 01 d2             	add    %r10d,%edx
  41a5b7:	c1 ea 03             	shr    $0x3,%edx
  41a5ba:	83 e2 07             	and    $0x7,%edx
  41a5bd:	0f 84 08 01 00 00    	je     41a6cb <inflate+0x407b>
  41a5c3:	49 83 c7 01          	add    $0x1,%r15
  41a5c7:	45 0f b6 47 ff       	movzbl -0x1(%r15),%r8d
  41a5cc:	89 d9                	mov    %ebx,%ecx
  41a5ce:	83 c3 08             	add    $0x8,%ebx
  41a5d1:	41 83 ee 01          	sub    $0x1,%r14d
  41a5d5:	49 d3 e0             	shl    %cl,%r8
  41a5d8:	4d 01 c5             	add    %r8,%r13
  41a5db:	44 39 d3             	cmp    %r10d,%ebx
  41a5de:	0f 83 ba 08 00 00    	jae    41ae9e <inflate+0x484e>
  41a5e4:	45 85 f6             	test   %r14d,%r14d
  41a5e7:	0f 84 36 15 00 00    	je     41bb23 <inflate+0x54d3>
  41a5ed:	83 fa 01             	cmp    $0x1,%edx
  41a5f0:	0f 84 d5 00 00 00    	je     41a6cb <inflate+0x407b>
  41a5f6:	83 fa 02             	cmp    $0x2,%edx
  41a5f9:	0f 84 ae 00 00 00    	je     41a6ad <inflate+0x405d>
  41a5ff:	83 fa 03             	cmp    $0x3,%edx
  41a602:	0f 84 87 00 00 00    	je     41a68f <inflate+0x403f>
  41a608:	83 fa 04             	cmp    $0x4,%edx
  41a60b:	74 64                	je     41a671 <inflate+0x4021>
  41a60d:	83 fa 05             	cmp    $0x5,%edx
  41a610:	74 41                	je     41a653 <inflate+0x4003>
  41a612:	83 fa 06             	cmp    $0x6,%edx
  41a615:	74 1e                	je     41a635 <inflate+0x3fe5>
  41a617:	49 83 c7 01          	add    $0x1,%r15
  41a61b:	41 0f b6 77 ff       	movzbl -0x1(%r15),%esi
  41a620:	89 d9                	mov    %ebx,%ecx
  41a622:	83 c3 08             	add    $0x8,%ebx
  41a625:	48 d3 e6             	shl    %cl,%rsi
  41a628:	49 01 f5             	add    %rsi,%r13
  41a62b:	41 83 ee 01          	sub    $0x1,%r14d
  41a62f:	0f 84 35 16 00 00    	je     41bc6a <inflate+0x561a>
  41a635:	49 83 c7 01          	add    $0x1,%r15
  41a639:	45 0f b6 4f ff       	movzbl -0x1(%r15),%r9d
  41a63e:	89 d9                	mov    %ebx,%ecx
  41a640:	83 c3 08             	add    $0x8,%ebx
  41a643:	49 d3 e1             	shl    %cl,%r9
  41a646:	4d 01 cd             	add    %r9,%r13
  41a649:	41 83 ee 01          	sub    $0x1,%r14d
  41a64d:	0f 84 d8 13 00 00    	je     41ba2b <inflate+0x53db>
  41a653:	49 83 c7 01          	add    $0x1,%r15
  41a657:	41 0f b6 7f ff       	movzbl -0x1(%r15),%edi
  41a65c:	89 d9                	mov    %ebx,%ecx
  41a65e:	83 c3 08             	add    $0x8,%ebx
  41a661:	48 d3 e7             	shl    %cl,%rdi
  41a664:	49 01 fd             	add    %rdi,%r13
  41a667:	41 83 ee 01          	sub    $0x1,%r14d
  41a66b:	0f 84 86 14 00 00    	je     41baf7 <inflate+0x54a7>
  41a671:	49 83 c7 01          	add    $0x1,%r15
  41a675:	41 0f b6 57 ff       	movzbl -0x1(%r15),%edx
  41a67a:	89 d9                	mov    %ebx,%ecx
  41a67c:	83 c3 08             	add    $0x8,%ebx
  41a67f:	48 d3 e2             	shl    %cl,%rdx
  41a682:	49 01 d5             	add    %rdx,%r13
  41a685:	41 83 ee 01          	sub    $0x1,%r14d
  41a689:	0f 84 7e 14 00 00    	je     41bb0d <inflate+0x54bd>
  41a68f:	49 83 c7 01          	add    $0x1,%r15
  41a693:	45 0f b6 47 ff       	movzbl -0x1(%r15),%r8d
  41a698:	89 d9                	mov    %ebx,%ecx
  41a69a:	83 c3 08             	add    $0x8,%ebx
  41a69d:	49 d3 e0             	shl    %cl,%r8
  41a6a0:	4d 01 c5             	add    %r8,%r13
  41a6a3:	41 83 ee 01          	sub    $0x1,%r14d
  41a6a7:	0f 84 8c 14 00 00    	je     41bb39 <inflate+0x54e9>
  41a6ad:	49 83 c7 01          	add    $0x1,%r15
  41a6b1:	41 0f b6 77 ff       	movzbl -0x1(%r15),%esi
  41a6b6:	89 d9                	mov    %ebx,%ecx
  41a6b8:	83 c3 08             	add    $0x8,%ebx
  41a6bb:	48 d3 e6             	shl    %cl,%rsi
  41a6be:	49 01 f5             	add    %rsi,%r13
  41a6c1:	41 83 ee 01          	sub    $0x1,%r14d
  41a6c5:	0f 84 19 01 00 00    	je     41a7e4 <inflate+0x4194>
  41a6cb:	89 d9                	mov    %ebx,%ecx
  41a6cd:	49 8d 7f 01          	lea    0x1(%r15),%rdi
  41a6d1:	44 0f b6 4f ff       	movzbl -0x1(%rdi),%r9d
  41a6d6:	8d 51 08             	lea    0x8(%rcx),%edx
  41a6d9:	41 8d 5e ff          	lea    -0x1(%r14),%ebx
  41a6dd:	49 89 ff             	mov    %rdi,%r15
  41a6e0:	41 89 de             	mov    %ebx,%r14d
  41a6e3:	49 d3 e1             	shl    %cl,%r9
  41a6e6:	89 d1                	mov    %edx,%ecx
  41a6e8:	4d 01 cd             	add    %r9,%r13
  41a6eb:	44 39 d2             	cmp    %r10d,%edx
  41a6ee:	0f 83 a8 07 00 00    	jae    41ae9c <inflate+0x484c>
  41a6f4:	45 85 f6             	test   %r14d,%r14d
  41a6f7:	0f 84 18 13 00 00    	je     41ba15 <inflate+0x53c5>
  41a6fd:	49 83 c7 01          	add    $0x1,%r15
  41a701:	41 0f b6 77 ff       	movzbl -0x1(%r15),%esi
  41a706:	48 d3 e6             	shl    %cl,%rsi
  41a709:	83 c1 08             	add    $0x8,%ecx
  41a70c:	49 01 f5             	add    %rsi,%r13
  41a70f:	41 83 ee 01          	sub    $0x1,%r14d
  41a713:	0f 84 c8 13 00 00    	je     41bae1 <inflate+0x5491>
  41a719:	4c 8d 7f 02          	lea    0x2(%rdi),%r15
  41a71d:	45 0f b6 77 ff       	movzbl -0x1(%r15),%r14d
  41a722:	41 89 d9             	mov    %ebx,%r9d
  41a725:	49 d3 e6             	shl    %cl,%r14
  41a728:	8d 4a 10             	lea    0x10(%rdx),%ecx
  41a72b:	4d 01 f5             	add    %r14,%r13
  41a72e:	41 83 e9 02          	sub    $0x2,%r9d
  41a732:	0f 84 b0 15 00 00    	je     41bce8 <inflate+0x5698>
  41a738:	4c 8d 7f 03          	lea    0x3(%rdi),%r15
  41a73c:	45 0f b6 47 ff       	movzbl -0x1(%r15),%r8d
  41a741:	89 de                	mov    %ebx,%esi
  41a743:	49 d3 e0             	shl    %cl,%r8
  41a746:	8d 4a 18             	lea    0x18(%rdx),%ecx
  41a749:	4d 01 c5             	add    %r8,%r13
  41a74c:	83 ee 03             	sub    $0x3,%esi
  41a74f:	0f 84 80 15 00 00    	je     41bcd5 <inflate+0x5685>
  41a755:	4c 8d 7f 04          	lea    0x4(%rdi),%r15
  41a759:	45 0f b6 77 ff       	movzbl -0x1(%r15),%r14d
  41a75e:	41 89 d9             	mov    %ebx,%r9d
  41a761:	49 d3 e6             	shl    %cl,%r14
  41a764:	8d 4a 20             	lea    0x20(%rdx),%ecx
  41a767:	4d 01 f5             	add    %r14,%r13
  41a76a:	41 83 e9 04          	sub    $0x4,%r9d
  41a76e:	0f 84 4b 15 00 00    	je     41bcbf <inflate+0x566f>
  41a774:	4c 8d 7f 05          	lea    0x5(%rdi),%r15
  41a778:	45 0f b6 47 ff       	movzbl -0x1(%r15),%r8d
  41a77d:	89 de                	mov    %ebx,%esi
  41a77f:	49 d3 e0             	shl    %cl,%r8
  41a782:	8d 4a 28             	lea    0x28(%rdx),%ecx
  41a785:	4d 01 c5             	add    %r8,%r13
  41a788:	83 ee 05             	sub    $0x5,%esi
  41a78b:	0f 84 1b 15 00 00    	je     41bcac <inflate+0x565c>
  41a791:	4c 8d 7f 06          	lea    0x6(%rdi),%r15
  41a795:	45 0f b6 77 ff       	movzbl -0x1(%r15),%r14d
  41a79a:	41 89 d9             	mov    %ebx,%r9d
  41a79d:	49 d3 e6             	shl    %cl,%r14
  41a7a0:	8d 4a 30             	lea    0x30(%rdx),%ecx
  41a7a3:	4d 01 f5             	add    %r14,%r13
  41a7a6:	41 83 e9 06          	sub    $0x6,%r9d
  41a7aa:	0f 84 cb 13 00 00    	je     41bb7b <inflate+0x552b>
  41a7b0:	4c 8d 7f 07          	lea    0x7(%rdi),%r15
  41a7b4:	41 0f b6 7f ff       	movzbl -0x1(%r15),%edi
  41a7b9:	48 d3 e7             	shl    %cl,%rdi
  41a7bc:	8d 4a 38             	lea    0x38(%rdx),%ecx
  41a7bf:	49 01 fd             	add    %rdi,%r13
  41a7c2:	83 eb 07             	sub    $0x7,%ebx
  41a7c5:	41 89 de             	mov    %ebx,%r14d
  41a7c8:	0f 85 ff fe ff ff    	jne    41a6cd <inflate+0x407d>
  41a7ce:	4c 89 db             	mov    %r11,%rbx
  41a7d1:	44 89 f6             	mov    %r14d,%esi
  41a7d4:	41 89 ca             	mov    %ecx,%r10d
  41a7d7:	4d 89 eb             	mov    %r13,%r11
  41a7da:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41a7df:	e9 bc cd ff ff       	jmpq   4175a0 <inflate+0xf50>
  41a7e4:	41 89 da             	mov    %ebx,%r10d
  41a7e7:	44 89 f6             	mov    %r14d,%esi
  41a7ea:	4c 89 db             	mov    %r11,%rbx
  41a7ed:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41a7f2:	4d 89 eb             	mov    %r13,%r11
  41a7f5:	e9 a6 cd ff ff       	jmpq   4175a0 <inflate+0xf50>
  41a7fa:	89 d3                	mov    %edx,%ebx
                        copy = 3 + BITS(3);
                        DROPBITS(3);
                    }
                    else {
                        NEEDBITS(this.bits + 7);
                        DROPBITS(this.bits);
  41a7fc:	89 c1                	mov    %eax,%ecx
  41a7fe:	41 b9 f9 ff ff ff    	mov    $0xfffffff9,%r9d
                        len = 0;
  41a804:	45 31 c0             	xor    %r8d,%r8d
                        copy = 3 + BITS(3);
                        DROPBITS(3);
                    }
                    else {
                        NEEDBITS(this.bits + 7);
                        DROPBITS(this.bits);
  41a807:	49 d3 ed             	shr    %cl,%r13
  41a80a:	41 29 c1             	sub    %eax,%r9d
                        len = 0;
                        copy = 11 + BITS(7);
  41a80d:	45 89 ea             	mov    %r13d,%r10d
                        DROPBITS(7);
  41a810:	44 01 cb             	add    %r9d,%ebx
  41a813:	49 c1 ed 07          	shr    $0x7,%r13
                    }
                    else {
                        NEEDBITS(this.bits + 7);
                        DROPBITS(this.bits);
                        len = 0;
                        copy = 11 + BITS(7);
  41a817:	41 83 e2 7f          	and    $0x7f,%r10d
  41a81b:	41 83 c2 0b          	add    $0xb,%r10d
                        DROPBITS(7);
                    }
                    if (state->have + copy > state->nlen + state->ndist) {
  41a81f:	45 01 e2             	add    %r12d,%r10d
  41a822:	41 39 ea             	cmp    %ebp,%r10d
  41a825:	0f 87 6b 12 00 00    	ja     41ba96 <inflate+0x5446>
  41a82b:	45 89 e1             	mov    %r12d,%r9d
                        strm->msg = (char *)"invalid bit length repeat";
                        state->mode = BAD;
                        break;
                    }
                    while (copy--)
                        state->lens[state->have++] = (unsigned short)len;
  41a82e:	44 89 e7             	mov    %r12d,%edi
  41a831:	41 83 c4 01          	add    $0x1,%r12d
  41a835:	45 29 d1             	sub    %r10d,%r9d
  41a838:	44 89 c6             	mov    %r8d,%esi
  41a83b:	66 45 89 84 7b 90 00 	mov    %r8w,0x90(%r11,%rdi,2)
  41a842:	00 00 
  41a844:	41 f7 d1             	not    %r9d
  41a847:	41 83 e1 07          	and    $0x7,%r9d
                    if (state->have + copy > state->nlen + state->ndist) {
                        strm->msg = (char *)"invalid bit length repeat";
                        state->mode = BAD;
                        break;
                    }
                    while (copy--)
  41a84b:	45 39 e2             	cmp    %r12d,%r10d
  41a84e:	0f 84 19 01 00 00    	je     41a96d <inflate+0x431d>
  41a854:	45 85 c9             	test   %r9d,%r9d
  41a857:	0f 84 99 00 00 00    	je     41a8f6 <inflate+0x42a6>
  41a85d:	41 83 f9 01          	cmp    $0x1,%r9d
  41a861:	74 7e                	je     41a8e1 <inflate+0x4291>
  41a863:	41 83 f9 02          	cmp    $0x2,%r9d
  41a867:	74 68                	je     41a8d1 <inflate+0x4281>
  41a869:	41 83 f9 03          	cmp    $0x3,%r9d
  41a86d:	74 52                	je     41a8c1 <inflate+0x4271>
  41a86f:	41 83 f9 04          	cmp    $0x4,%r9d
  41a873:	74 3c                	je     41a8b1 <inflate+0x4261>
  41a875:	41 83 f9 05          	cmp    $0x5,%r9d
  41a879:	74 26                	je     41a8a1 <inflate+0x4251>
  41a87b:	41 83 f9 06          	cmp    $0x6,%r9d
  41a87f:	74 10                	je     41a891 <inflate+0x4241>
                        state->lens[state->have++] = (unsigned short)len;
  41a881:	44 89 e2             	mov    %r12d,%edx
  41a884:	41 83 c4 01          	add    $0x1,%r12d
  41a888:	66 45 89 84 53 90 00 	mov    %r8w,0x90(%r11,%rdx,2)
  41a88f:	00 00 
  41a891:	45 89 e0             	mov    %r12d,%r8d
  41a894:	41 83 c4 01          	add    $0x1,%r12d
  41a898:	66 43 89 b4 43 90 00 	mov    %si,0x90(%r11,%r8,2)
  41a89f:	00 00 
  41a8a1:	44 89 e1             	mov    %r12d,%ecx
  41a8a4:	41 83 c4 01          	add    $0x1,%r12d
  41a8a8:	66 41 89 b4 4b 90 00 	mov    %si,0x90(%r11,%rcx,2)
  41a8af:	00 00 
  41a8b1:	44 89 e0             	mov    %r12d,%eax
  41a8b4:	41 83 c4 01          	add    $0x1,%r12d
  41a8b8:	66 41 89 b4 43 90 00 	mov    %si,0x90(%r11,%rax,2)
  41a8bf:	00 00 
  41a8c1:	45 89 e1             	mov    %r12d,%r9d
  41a8c4:	41 83 c4 01          	add    $0x1,%r12d
  41a8c8:	66 43 89 b4 4b 90 00 	mov    %si,0x90(%r11,%r9,2)
  41a8cf:	00 00 
  41a8d1:	44 89 e7             	mov    %r12d,%edi
  41a8d4:	41 83 c4 01          	add    $0x1,%r12d
  41a8d8:	66 41 89 b4 7b 90 00 	mov    %si,0x90(%r11,%rdi,2)
  41a8df:	00 00 
  41a8e1:	44 89 e2             	mov    %r12d,%edx
  41a8e4:	41 83 c4 01          	add    $0x1,%r12d
                    if (state->have + copy > state->nlen + state->ndist) {
                        strm->msg = (char *)"invalid bit length repeat";
                        state->mode = BAD;
                        break;
                    }
                    while (copy--)
  41a8e8:	45 39 e2             	cmp    %r12d,%r10d
                        state->lens[state->have++] = (unsigned short)len;
  41a8eb:	66 41 89 b4 53 90 00 	mov    %si,0x90(%r11,%rdx,2)
  41a8f2:	00 00 
                    if (state->have + copy > state->nlen + state->ndist) {
                        strm->msg = (char *)"invalid bit length repeat";
                        state->mode = BAD;
                        break;
                    }
                    while (copy--)
  41a8f4:	74 77                	je     41a96d <inflate+0x431d>
                        state->lens[state->have++] = (unsigned short)len;
  41a8f6:	41 8d 4c 24 01       	lea    0x1(%r12),%ecx
  41a8fb:	45 89 e0             	mov    %r12d,%r8d
  41a8fe:	41 8d 44 24 02       	lea    0x2(%r12),%eax
  41a903:	66 43 89 b4 43 90 00 	mov    %si,0x90(%r11,%r8,2)
  41a90a:	00 00 
  41a90c:	45 8d 4c 24 03       	lea    0x3(%r12),%r9d
  41a911:	41 8d 7c 24 04       	lea    0x4(%r12),%edi
  41a916:	66 41 89 b4 4b 90 00 	mov    %si,0x90(%r11,%rcx,2)
  41a91d:	00 00 
  41a91f:	41 8d 54 24 05       	lea    0x5(%r12),%edx
  41a924:	45 8d 44 24 06       	lea    0x6(%r12),%r8d
  41a929:	41 8d 4c 24 07       	lea    0x7(%r12),%ecx
  41a92e:	41 83 c4 08          	add    $0x8,%r12d
  41a932:	66 41 89 b4 43 90 00 	mov    %si,0x90(%r11,%rax,2)
  41a939:	00 00 
                    if (state->have + copy > state->nlen + state->ndist) {
                        strm->msg = (char *)"invalid bit length repeat";
                        state->mode = BAD;
                        break;
                    }
                    while (copy--)
  41a93b:	45 39 e2             	cmp    %r12d,%r10d
                        state->lens[state->have++] = (unsigned short)len;
  41a93e:	66 43 89 b4 4b 90 00 	mov    %si,0x90(%r11,%r9,2)
  41a945:	00 00 
  41a947:	66 41 89 b4 7b 90 00 	mov    %si,0x90(%r11,%rdi,2)
  41a94e:	00 00 
  41a950:	66 41 89 b4 53 90 00 	mov    %si,0x90(%r11,%rdx,2)
  41a957:	00 00 
  41a959:	66 43 89 b4 43 90 00 	mov    %si,0x90(%r11,%r8,2)
  41a960:	00 00 
  41a962:	66 41 89 b4 4b 90 00 	mov    %si,0x90(%r11,%rcx,2)
  41a969:	00 00 
                    if (state->have + copy > state->nlen + state->ndist) {
                        strm->msg = (char *)"invalid bit length repeat";
                        state->mode = BAD;
                        break;
                    }
                    while (copy--)
  41a96b:	75 89                	jne    41a8f6 <inflate+0x42a6>
  41a96d:	45 89 a3 84 00 00 00 	mov    %r12d,0x84(%r11)
  41a974:	e9 ff da ff ff       	jmpq   418478 <inflate+0x1e28>
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
                    PULLBYTE();
                }
                DROPBITS(last.bits);
            }
            DROPBITS(this.bits);
  41a979:	89 d1                	mov    %edx,%ecx
  41a97b:	29 c3                	sub    %eax,%ebx
            state->length = (unsigned)this.val;
  41a97d:	41 89 7b 54          	mov    %edi,0x54(%r11)
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
                    PULLBYTE();
                }
                DROPBITS(last.bits);
            }
            DROPBITS(this.bits);
  41a981:	49 d3 ed             	shr    %cl,%r13
                        "inflate:         literal '%c'\n" :
                        "inflate:         literal 0x%02x\n", this.val));
                state->mode = LIT;
                break;
            }
            if (this.op & 32) {
  41a984:	40 f6 c6 20          	test   $0x20,%sil
  41a988:	0f 85 12 ed ff ff    	jne    4196a0 <inflate+0x3050>
                Tracevv((stderr, "inflate:         end of block\n"));
                state->mode = TYPE;
                break;
            }
            if (this.op & 64) {
  41a98e:	40 f6 c6 40          	test   $0x40,%sil
  41a992:	0f 84 33 07 00 00    	je     41b0cb <inflate+0x4a7b>
                strm->msg = (char *)"invalid literal/length code";
  41a998:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
                state->mode = BAD;
                break;
  41a99d:	41 bc 1b 00 00 00    	mov    $0x1b,%r12d
                Tracevv((stderr, "inflate:         end of block\n"));
                state->mode = TYPE;
                break;
            }
            if (this.op & 64) {
                strm->msg = (char *)"invalid literal/length code";
  41a9a3:	48 c7 46 30 98 93 43 	movq   $0x439398,0x30(%rsi)
  41a9aa:	00 
                state->mode = BAD;
  41a9ab:	41 c7 03 1b 00 00 00 	movl   $0x1b,(%r11)
                break;
  41a9b2:	e9 66 bd ff ff       	jmpq   41671d <inflate+0xcd>
  41a9b7:	41 89 da             	mov    %ebx,%r10d
  41a9ba:	44 89 f6             	mov    %r14d,%esi
  41a9bd:	4c 89 db             	mov    %r11,%rbx
  41a9c0:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41a9c5:	4d 89 eb             	mov    %r13,%r11
  41a9c8:	e9 d3 cb ff ff       	jmpq   4175a0 <inflate+0xf50>
  41a9cd:	4c 89 db             	mov    %r11,%rbx
  41a9d0:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41a9d5:	4d 89 eb             	mov    %r13,%r11
            strm->adler = state->check = crc32(0L, Z_NULL, 0);
            state->mode = TYPE;
            break;
#endif
        case DICTID:
            NEEDBITS(32);
  41a9d8:	41 89 ca             	mov    %ecx,%r10d
  41a9db:	49 89 c7             	mov    %rax,%r15
            else if (state->head != Z_NULL)
                state->head->comment = Z_NULL;
            state->mode = HCRC;
        case HCRC:
            if (state->flags & 0x0200) {
                NEEDBITS(16);
  41a9de:	31 f6                	xor    %esi,%esi
  41a9e0:	e9 bb cb ff ff       	jmpq   4175a0 <inflate+0xf50>
  41a9e5:	41 89 da             	mov    %ebx,%r10d
  41a9e8:	44 89 f6             	mov    %r14d,%esi
  41a9eb:	4c 89 db             	mov    %r11,%rbx
  41a9ee:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41a9f3:	4d 89 eb             	mov    %r13,%r11
  41a9f6:	e9 a5 cb ff ff       	jmpq   4175a0 <inflate+0xf50>
            if (state->last) {
                BYTEBITS();
                state->mode = CHECK;
                break;
            }
            NEEDBITS(3);
  41a9fb:	4c 89 ff             	mov    %r15,%rdi
  41a9fe:	e9 91 be ff ff       	jmpq   416894 <inflate+0x244>
  41aa03:	41 89 da             	mov    %ebx,%r10d
  41aa06:	44 89 f6             	mov    %r14d,%esi
  41aa09:	4c 89 db             	mov    %r11,%rbx
  41aa0c:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41aa11:	4d 89 eb             	mov    %r13,%r11
  41aa14:	e9 87 cb ff ff       	jmpq   4175a0 <inflate+0xf50>
                        len = state->lens[state->have - 1];
                        copy = 3 + BITS(2);
                        DROPBITS(2);
                    }
                    else if (this.val == 17) {
                        NEEDBITS(this.bits + 3);
  41aa19:	44 8d 50 03          	lea    0x3(%rax),%r10d
  41aa1d:	44 39 d3             	cmp    %r10d,%ebx
  41aa20:	0f 83 95 07 00 00    	jae    41b1bb <inflate+0x4b6b>
  41aa26:	45 85 f6             	test   %r14d,%r14d
  41aa29:	0f 84 9c 10 00 00    	je     41bacb <inflate+0x547b>
  41aa2f:	89 da                	mov    %ebx,%edx
  41aa31:	f7 d2                	not    %edx
  41aa33:	44 01 d2             	add    %r10d,%edx
  41aa36:	c1 ea 03             	shr    $0x3,%edx
  41aa39:	83 e2 07             	and    $0x7,%edx
  41aa3c:	0f 84 08 01 00 00    	je     41ab4a <inflate+0x44fa>
  41aa42:	49 83 c7 01          	add    $0x1,%r15
  41aa46:	45 0f b6 47 ff       	movzbl -0x1(%r15),%r8d
  41aa4b:	89 d9                	mov    %ebx,%ecx
  41aa4d:	83 c3 08             	add    $0x8,%ebx
  41aa50:	41 83 ee 01          	sub    $0x1,%r14d
  41aa54:	49 d3 e0             	shl    %cl,%r8
  41aa57:	4d 01 c5             	add    %r8,%r13
  41aa5a:	44 39 d3             	cmp    %r10d,%ebx
  41aa5d:	0f 83 58 07 00 00    	jae    41b1bb <inflate+0x4b6b>
  41aa63:	45 85 f6             	test   %r14d,%r14d
  41aa66:	0f 84 14 12 00 00    	je     41bc80 <inflate+0x5630>
  41aa6c:	83 fa 01             	cmp    $0x1,%edx
  41aa6f:	0f 84 d5 00 00 00    	je     41ab4a <inflate+0x44fa>
  41aa75:	83 fa 02             	cmp    $0x2,%edx
  41aa78:	0f 84 ae 00 00 00    	je     41ab2c <inflate+0x44dc>
  41aa7e:	83 fa 03             	cmp    $0x3,%edx
  41aa81:	0f 84 87 00 00 00    	je     41ab0e <inflate+0x44be>
  41aa87:	83 fa 04             	cmp    $0x4,%edx
  41aa8a:	74 64                	je     41aaf0 <inflate+0x44a0>
  41aa8c:	83 fa 05             	cmp    $0x5,%edx
  41aa8f:	74 41                	je     41aad2 <inflate+0x4482>
  41aa91:	83 fa 06             	cmp    $0x6,%edx
  41aa94:	74 1e                	je     41aab4 <inflate+0x4464>
  41aa96:	49 83 c7 01          	add    $0x1,%r15
  41aa9a:	41 0f b6 77 ff       	movzbl -0x1(%r15),%esi
  41aa9f:	89 d9                	mov    %ebx,%ecx
  41aaa1:	83 c3 08             	add    $0x8,%ebx
  41aaa4:	48 d3 e6             	shl    %cl,%rsi
  41aaa7:	49 01 f5             	add    %rsi,%r13
  41aaaa:	41 83 ee 01          	sub    $0x1,%r14d
  41aaae:	0f 84 01 10 00 00    	je     41bab5 <inflate+0x5465>
  41aab4:	49 83 c7 01          	add    $0x1,%r15
  41aab8:	45 0f b6 4f ff       	movzbl -0x1(%r15),%r9d
  41aabd:	89 d9                	mov    %ebx,%ecx
  41aabf:	83 c3 08             	add    $0x8,%ebx
  41aac2:	49 d3 e1             	shl    %cl,%r9
  41aac5:	4d 01 cd             	add    %r9,%r13
  41aac8:	41 83 ee 01          	sub    $0x1,%r14d
  41aacc:	0f 84 2a 11 00 00    	je     41bbfc <inflate+0x55ac>
  41aad2:	49 83 c7 01          	add    $0x1,%r15
  41aad6:	41 0f b6 7f ff       	movzbl -0x1(%r15),%edi
  41aadb:	89 d9                	mov    %ebx,%ecx
  41aadd:	83 c3 08             	add    $0x8,%ebx
  41aae0:	48 d3 e7             	shl    %cl,%rdi
  41aae3:	49 01 fd             	add    %rdi,%r13
  41aae6:	41 83 ee 01          	sub    $0x1,%r14d
  41aaea:	0f 84 22 11 00 00    	je     41bc12 <inflate+0x55c2>
  41aaf0:	49 83 c7 01          	add    $0x1,%r15
  41aaf4:	41 0f b6 57 ff       	movzbl -0x1(%r15),%edx
  41aaf9:	89 d9                	mov    %ebx,%ecx
  41aafb:	83 c3 08             	add    $0x8,%ebx
  41aafe:	48 d3 e2             	shl    %cl,%rdx
  41ab01:	49 01 d5             	add    %rdx,%r13
  41ab04:	41 83 ee 01          	sub    $0x1,%r14d
  41ab08:	0f 84 30 11 00 00    	je     41bc3e <inflate+0x55ee>
  41ab0e:	49 83 c7 01          	add    $0x1,%r15
  41ab12:	45 0f b6 47 ff       	movzbl -0x1(%r15),%r8d
  41ab17:	89 d9                	mov    %ebx,%ecx
  41ab19:	83 c3 08             	add    $0x8,%ebx
  41ab1c:	49 d3 e0             	shl    %cl,%r8
  41ab1f:	4d 01 c5             	add    %r8,%r13
  41ab22:	41 83 ee 01          	sub    $0x1,%r14d
  41ab26:	0f 84 28 11 00 00    	je     41bc54 <inflate+0x5604>
  41ab2c:	49 83 c7 01          	add    $0x1,%r15
  41ab30:	41 0f b6 77 ff       	movzbl -0x1(%r15),%esi
  41ab35:	89 d9                	mov    %ebx,%ecx
  41ab37:	83 c3 08             	add    $0x8,%ebx
  41ab3a:	48 d3 e6             	shl    %cl,%rsi
  41ab3d:	49 01 f5             	add    %rsi,%r13
  41ab40:	41 83 ee 01          	sub    $0x1,%r14d
  41ab44:	0f 84 19 01 00 00    	je     41ac63 <inflate+0x4613>
  41ab4a:	89 d9                	mov    %ebx,%ecx
  41ab4c:	49 8d 7f 01          	lea    0x1(%r15),%rdi
  41ab50:	44 0f b6 4f ff       	movzbl -0x1(%rdi),%r9d
  41ab55:	8d 51 08             	lea    0x8(%rcx),%edx
  41ab58:	41 8d 5e ff          	lea    -0x1(%r14),%ebx
  41ab5c:	49 89 ff             	mov    %rdi,%r15
  41ab5f:	41 89 de             	mov    %ebx,%r14d
  41ab62:	49 d3 e1             	shl    %cl,%r9
  41ab65:	89 d1                	mov    %edx,%ecx
  41ab67:	4d 01 cd             	add    %r9,%r13
  41ab6a:	44 39 d2             	cmp    %r10d,%edx
  41ab6d:	0f 83 46 06 00 00    	jae    41b1b9 <inflate+0x4b69>
  41ab73:	45 85 f6             	test   %r14d,%r14d
  41ab76:	0f 84 ac 10 00 00    	je     41bc28 <inflate+0x55d8>
  41ab7c:	49 83 c7 01          	add    $0x1,%r15
  41ab80:	41 0f b6 77 ff       	movzbl -0x1(%r15),%esi
  41ab85:	48 d3 e6             	shl    %cl,%rsi
  41ab88:	83 c1 08             	add    $0x8,%ecx
  41ab8b:	49 01 f5             	add    %rsi,%r13
  41ab8e:	41 83 ee 01          	sub    $0x1,%r14d
  41ab92:	0f 84 e8 0e 00 00    	je     41ba80 <inflate+0x5430>
  41ab98:	4c 8d 7f 02          	lea    0x2(%rdi),%r15
  41ab9c:	45 0f b6 77 ff       	movzbl -0x1(%r15),%r14d
  41aba1:	41 89 d9             	mov    %ebx,%r9d
  41aba4:	49 d3 e6             	shl    %cl,%r14
  41aba7:	8d 4a 10             	lea    0x10(%rdx),%ecx
  41abaa:	4d 01 f5             	add    %r14,%r13
  41abad:	41 83 e9 02          	sub    $0x2,%r9d
  41abb1:	0f 84 b3 0e 00 00    	je     41ba6a <inflate+0x541a>
  41abb7:	4c 8d 7f 03          	lea    0x3(%rdi),%r15
  41abbb:	45 0f b6 47 ff       	movzbl -0x1(%r15),%r8d
  41abc0:	89 de                	mov    %ebx,%esi
  41abc2:	49 d3 e0             	shl    %cl,%r8
  41abc5:	8d 4a 18             	lea    0x18(%rdx),%ecx
  41abc8:	4d 01 c5             	add    %r8,%r13
  41abcb:	83 ee 03             	sub    $0x3,%esi
  41abce:	0f 84 83 0e 00 00    	je     41ba57 <inflate+0x5407>
  41abd4:	4c 8d 7f 04          	lea    0x4(%rdi),%r15
  41abd8:	45 0f b6 77 ff       	movzbl -0x1(%r15),%r14d
  41abdd:	41 89 d9             	mov    %ebx,%r9d
  41abe0:	49 d3 e6             	shl    %cl,%r14
  41abe3:	8d 4a 20             	lea    0x20(%rdx),%ecx
  41abe6:	4d 01 f5             	add    %r14,%r13
  41abe9:	41 83 e9 04          	sub    $0x4,%r9d
  41abed:	0f 84 4e 0e 00 00    	je     41ba41 <inflate+0x53f1>
  41abf3:	4c 8d 7f 05          	lea    0x5(%rdi),%r15
  41abf7:	45 0f b6 47 ff       	movzbl -0x1(%r15),%r8d
  41abfc:	89 de                	mov    %ebx,%esi
  41abfe:	49 d3 e0             	shl    %cl,%r8
  41ac01:	8d 4a 28             	lea    0x28(%rdx),%ecx
  41ac04:	4d 01 c5             	add    %r8,%r13
  41ac07:	83 ee 05             	sub    $0x5,%esi
  41ac0a:	0f 84 d9 0f 00 00    	je     41bbe9 <inflate+0x5599>
  41ac10:	4c 8d 7f 06          	lea    0x6(%rdi),%r15
  41ac14:	45 0f b6 77 ff       	movzbl -0x1(%r15),%r14d
  41ac19:	41 89 d9             	mov    %ebx,%r9d
  41ac1c:	49 d3 e6             	shl    %cl,%r14
  41ac1f:	8d 4a 30             	lea    0x30(%rdx),%ecx
  41ac22:	4d 01 f5             	add    %r14,%r13
  41ac25:	41 83 e9 06          	sub    $0x6,%r9d
  41ac29:	0f 84 a4 0f 00 00    	je     41bbd3 <inflate+0x5583>
  41ac2f:	4c 8d 7f 07          	lea    0x7(%rdi),%r15
  41ac33:	41 0f b6 7f ff       	movzbl -0x1(%r15),%edi
  41ac38:	48 d3 e7             	shl    %cl,%rdi
  41ac3b:	8d 4a 38             	lea    0x38(%rdx),%ecx
  41ac3e:	49 01 fd             	add    %rdi,%r13
  41ac41:	83 eb 07             	sub    $0x7,%ebx
  41ac44:	41 89 de             	mov    %ebx,%r14d
  41ac47:	0f 85 ff fe ff ff    	jne    41ab4c <inflate+0x44fc>
  41ac4d:	4c 89 db             	mov    %r11,%rbx
  41ac50:	44 89 f6             	mov    %r14d,%esi
  41ac53:	41 89 ca             	mov    %ecx,%r10d
  41ac56:	4d 89 eb             	mov    %r13,%r11
  41ac59:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41ac5e:	e9 3d c9 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41ac63:	41 89 da             	mov    %ebx,%r10d
  41ac66:	44 89 f6             	mov    %r14d,%esi
  41ac69:	4c 89 db             	mov    %r11,%rbx
  41ac6c:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41ac71:	4d 89 eb             	mov    %r13,%r11
  41ac74:	e9 27 c9 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41ac79:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            if (state->flags & 0xe000) {
                strm->msg = (char *)"unknown header flags set";
                state->mode = BAD;
                break;
            }
            if (state->head != Z_NULL)
  41ac80:	4d 8b 53 28          	mov    0x28(%r11),%r10
  41ac84:	4d 85 d2             	test   %r10,%r10
  41ac87:	74 0e                	je     41ac97 <inflate+0x4647>
                state->head->text = (int)((hold >> 8) & 1);
  41ac89:	4d 89 ec             	mov    %r13,%r12
  41ac8c:	49 c1 ec 08          	shr    $0x8,%r12
  41ac90:	41 83 e4 01          	and    $0x1,%r12d
  41ac94:	45 89 22             	mov    %r12d,(%r10)
            if (state->flags & 0x0200) CRC2(state->check, hold);
  41ac97:	f6 c4 02             	test   $0x2,%ah
  41ac9a:	0f 85 ce 08 00 00    	jne    41b56e <inflate+0x4f1e>
            INITBITS();
            state->mode = TIME;
  41aca0:	41 c7 03 02 00 00 00 	movl   $0x2,(%r11)
  41aca7:	49 89 ef             	mov    %rbp,%r15
                break;
            }
            if (state->head != Z_NULL)
                state->head->text = (int)((hold >> 8) & 1);
            if (state->flags & 0x0200) CRC2(state->check, hold);
            INITBITS();
  41acaa:	31 db                	xor    %ebx,%ebx
  41acac:	45 31 ed             	xor    %r13d,%r13d
  41acaf:	e9 0d cd ff ff       	jmpq   4179c1 <inflate+0x1371>
  41acb4:	4c 89 db             	mov    %r11,%rbx
  41acb7:	44 89 f6             	mov    %r14d,%esi
  41acba:	41 89 ca             	mov    %ecx,%r10d
  41acbd:	4d 89 eb             	mov    %r13,%r11
  41acc0:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41acc5:	e9 d6 c8 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41acca:	41 89 da             	mov    %ebx,%r10d
  41accd:	44 89 f6             	mov    %r14d,%esi
  41acd0:	4c 89 db             	mov    %r11,%rbx
  41acd3:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41acd8:	4d 89 eb             	mov    %r13,%r11
  41acdb:	e9 c0 c8 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41ace0:	4c 89 db             	mov    %r11,%rbx
  41ace3:	44 89 f6             	mov    %r14d,%esi
  41ace6:	41 89 ca             	mov    %ecx,%r10d
  41ace9:	4d 89 eb             	mov    %r13,%r11
  41acec:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41acf1:	e9 aa c8 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41acf6:	4c 89 db             	mov    %r11,%rbx
  41acf9:	41 89 ca             	mov    %ecx,%r10d
  41acfc:	4d 89 eb             	mov    %r13,%r11
  41acff:	44 89 c6             	mov    %r8d,%esi
  41ad02:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41ad07:	e9 94 c8 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41ad0c:	41 89 da             	mov    %ebx,%r10d
  41ad0f:	44 89 f6             	mov    %r14d,%esi
  41ad12:	4c 89 db             	mov    %r11,%rbx
  41ad15:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41ad1a:	4d 89 eb             	mov    %r13,%r11
  41ad1d:	e9 7e c8 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41ad22:	41 89 da             	mov    %ebx,%r10d
  41ad25:	44 89 f6             	mov    %r14d,%esi
  41ad28:	4c 89 db             	mov    %r11,%rbx
  41ad2b:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41ad30:	4d 89 eb             	mov    %r13,%r11
  41ad33:	e9 68 c8 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41ad38:	4c 89 db             	mov    %r11,%rbx
  41ad3b:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41ad40:	4d 89 eb             	mov    %r13,%r11
            left--;
            state->mode = LEN;
            break;
        case CHECK:
            if (state->wrap) {
                NEEDBITS(32);
  41ad43:	41 89 ca             	mov    %ecx,%r10d
  41ad46:	4d 89 e7             	mov    %r12,%r15
  41ad49:	31 f6                	xor    %esi,%esi
  41ad4b:	e9 50 c8 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41ad50:	89 cb                	mov    %ecx,%ebx
  41ad52:	41 89 d6             	mov    %edx,%r14d
  41ad55:	e9 e0 e2 ff ff       	jmpq   41903a <inflate+0x29ea>
  41ad5a:	4c 89 db             	mov    %r11,%rbx
  41ad5d:	44 89 f6             	mov    %r14d,%esi
  41ad60:	41 89 ca             	mov    %ecx,%r10d
  41ad63:	4d 89 eb             	mov    %r13,%r11
  41ad66:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41ad6b:	e9 30 c8 ff ff       	jmpq   4175a0 <inflate+0xf50>
                out -= left;
                strm->total_out += out;
                state->total += out;
                if (out)
                    strm->adler = state->check =
                        UPDATE(state->check, put - out, out);
  41ad70:	e8 bb 55 00 00       	callq  420330 <adler32>
  41ad75:	4c 8b 5c 24 18       	mov    0x18(%rsp),%r11
  41ad7a:	e9 fe e2 ff ff       	jmpq   41907d <inflate+0x2a2d>
  41ad7f:	4c 89 db             	mov    %r11,%rbx
  41ad82:	41 89 ca             	mov    %ecx,%r10d
  41ad85:	4d 89 eb             	mov    %r13,%r11
  41ad88:	89 d6                	mov    %edx,%esi
  41ad8a:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41ad8f:	e9 0c c8 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41ad94:	4c 89 db             	mov    %r11,%rbx
  41ad97:	41 89 ca             	mov    %ecx,%r10d
  41ad9a:	4d 89 eb             	mov    %r13,%r11
  41ad9d:	44 89 ce             	mov    %r9d,%esi
  41ada0:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41ada5:	e9 f6 c7 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41adaa:	41 89 da             	mov    %ebx,%r10d
  41adad:	44 89 f6             	mov    %r14d,%esi
  41adb0:	4c 89 db             	mov    %r11,%rbx
  41adb3:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41adb8:	4d 89 eb             	mov    %r13,%r11
  41adbb:	e9 e0 c7 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41adc0:	44 89 f6             	mov    %r14d,%esi
  41adc3:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41adc8:	41 89 da             	mov    %ebx,%r10d
  41adcb:	4c 89 db             	mov    %r11,%rbx
  41adce:	4d 89 eb             	mov    %r13,%r11
                }
                INITBITS();
                Tracev((stderr, "inflate:   length matches trailer\n"));
            }
#endif
            state->mode = DONE;
  41add1:	c7 03 1a 00 00 00    	movl   $0x1a,(%rbx)
        case DONE:
            ret = Z_STREAM_END;
  41add7:	c7 44 24 28 01 00 00 	movl   $0x1,0x28(%rsp)
  41adde:	00 
  41addf:	e9 bc c7 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41ade4:	41 89 da             	mov    %ebx,%r10d
  41ade7:	44 89 f6             	mov    %r14d,%esi
  41adea:	4c 89 db             	mov    %r11,%rbx
  41aded:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41adf2:	4d 89 eb             	mov    %r13,%r11
  41adf5:	e9 a6 c7 ff ff       	jmpq   4175a0 <inflate+0xf50>
                from = put - state->offset;
                copy = state->length;
            }
            if (copy > left) copy = left;
            left -= copy;
            state->length -= copy;
  41adfa:	45 31 d2             	xor    %r10d,%r10d
  41adfd:	e9 e6 c4 ff ff       	jmpq   4172e8 <inflate+0xc98>
  41ae02:	4c 89 db             	mov    %r11,%rbx
  41ae05:	41 89 ca             	mov    %ecx,%r10d
  41ae08:	4d 89 eb             	mov    %r13,%r11
  41ae0b:	44 89 c6             	mov    %r8d,%esi
  41ae0e:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41ae13:	e9 88 c7 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41ae18:	41 89 da             	mov    %ebx,%r10d
  41ae1b:	44 89 f6             	mov    %r14d,%esi
  41ae1e:	4c 89 db             	mov    %r11,%rbx
  41ae21:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41ae26:	4d 89 eb             	mov    %r13,%r11
  41ae29:	e9 72 c7 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41ae2e:	41 89 da             	mov    %ebx,%r10d
  41ae31:	44 89 f6             	mov    %r14d,%esi
  41ae34:	4c 89 db             	mov    %r11,%rbx
  41ae37:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41ae3c:	4d 89 eb             	mov    %r13,%r11
  41ae3f:	e9 5c c7 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41ae44:	41 89 da             	mov    %ebx,%r10d
  41ae47:	44 89 f6             	mov    %r14d,%esi
  41ae4a:	4c 89 db             	mov    %r11,%rbx
  41ae4d:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41ae52:	4d 89 eb             	mov    %r13,%r11
  41ae55:	e9 46 c7 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41ae5a:	41 89 da             	mov    %ebx,%r10d
  41ae5d:	44 89 f6             	mov    %r14d,%esi
  41ae60:	4c 89 db             	mov    %r11,%rbx
  41ae63:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41ae68:	4d 89 eb             	mov    %r13,%r11
  41ae6b:	e9 30 c7 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41ae70:	41 89 da             	mov    %ebx,%r10d
  41ae73:	44 89 f6             	mov    %r14d,%esi
  41ae76:	4c 89 db             	mov    %r11,%rbx
  41ae79:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41ae7e:	4d 89 eb             	mov    %r13,%r11
  41ae81:	e9 1a c7 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41ae86:	4c 89 db             	mov    %r11,%rbx
  41ae89:	44 89 f6             	mov    %r14d,%esi
  41ae8c:	41 89 ca             	mov    %ecx,%r10d
  41ae8f:	4d 89 eb             	mov    %r13,%r11
  41ae92:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41ae97:	e9 04 c7 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41ae9c:	89 d3                	mov    %edx,%ebx
                    state->lens[state->have++] = this.val;
                }
                else {
                    if (this.val == 16) {
                        NEEDBITS(this.bits + 2);
                        DROPBITS(this.bits);
  41ae9e:	89 c1                	mov    %eax,%ecx
  41aea0:	29 c3                	sub    %eax,%ebx
  41aea2:	49 d3 ed             	shr    %cl,%r13
                        if (state->have == 0) {
  41aea5:	45 85 e4             	test   %r12d,%r12d
  41aea8:	0f 84 e8 0b 00 00    	je     41ba96 <inflate+0x5446>
                            strm->msg = (char *)"invalid bit length repeat";
                            state->mode = BAD;
                            break;
                        }
                        len = state->lens[state->have - 1];
                        copy = 3 + BITS(2);
  41aeae:	45 89 ea             	mov    %r13d,%r10d
                        if (state->have == 0) {
                            strm->msg = (char *)"invalid bit length repeat";
                            state->mode = BAD;
                            break;
                        }
                        len = state->lens[state->have - 1];
  41aeb1:	41 8d 44 24 ff       	lea    -0x1(%r12),%eax
                        copy = 3 + BITS(2);
                        DROPBITS(2);
  41aeb6:	49 c1 ed 02          	shr    $0x2,%r13
                            strm->msg = (char *)"invalid bit length repeat";
                            state->mode = BAD;
                            break;
                        }
                        len = state->lens[state->have - 1];
                        copy = 3 + BITS(2);
  41aeba:	41 83 e2 03          	and    $0x3,%r10d
                        DROPBITS(2);
  41aebe:	83 eb 02             	sub    $0x2,%ebx
                        if (state->have == 0) {
                            strm->msg = (char *)"invalid bit length repeat";
                            state->mode = BAD;
                            break;
                        }
                        len = state->lens[state->have - 1];
  41aec1:	45 0f b7 84 43 90 00 	movzwl 0x90(%r11,%rax,2),%r8d
  41aec8:	00 00 
                        copy = 3 + BITS(2);
  41aeca:	41 83 c2 03          	add    $0x3,%r10d
  41aece:	e9 4c f9 ff ff       	jmpq   41a81f <inflate+0x41cf>
     */
  inf_leave:
    RESTORE();
    if (state->wsize || (state->mode < CHECK && out != strm->avail_out))
        if (updatewindow(strm, out)) {
            state->mode = MEM;
  41aed3:	c7 03 1c 00 00 00    	movl   $0x1c,(%rbx)
            return Z_MEM_ERROR;
  41aed9:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  41aede:	e9 75 c6 ff ff       	jmpq   417558 <inflate+0xf08>
  41aee3:	41 89 da             	mov    %ebx,%r10d
  41aee6:	44 89 f6             	mov    %r14d,%esi
  41aee9:	4c 89 db             	mov    %r11,%rbx
  41aeec:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41aef1:	4d 89 eb             	mov    %r13,%r11
  41aef4:	e9 a7 c6 ff ff       	jmpq   4175a0 <inflate+0xf50>
                strm->msg = (char *)"invalid code lengths set";
                state->mode = BAD;
                break;
            }
            Tracev((stderr, "inflate:       code lengths ok\n"));
            state->have = 0;
  41aef9:	41 c7 83 84 00 00 00 	movl   $0x0,0x84(%r11)
  41af00:	00 00 00 00 
            state->mode = CODELENS;
  41af04:	41 c7 03 11 00 00 00 	movl   $0x11,(%r11)
  41af0b:	45 31 e4             	xor    %r12d,%r12d
  41af0e:	e9 54 d5 ff ff       	jmpq   418467 <inflate+0x1e17>
  41af13:	4c 8b 5c 24 48       	mov    0x48(%rsp),%r11
                    this = state->lencode[last.val +
                            (BITS(last.bits + last.op) >> last.bits)];
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
                    PULLBYTE();
                }
                DROPBITS(last.bits);
  41af18:	89 c1                	mov    %eax,%ecx
  41af1a:	29 c3                	sub    %eax,%ebx
            }
            DROPBITS(this.bits);
            state->length = (unsigned)this.val;
  41af1c:	45 89 4b 54          	mov    %r9d,0x54(%r11)
                    this = state->lencode[last.val +
                            (BITS(last.bits + last.op) >> last.bits)];
                    if ((unsigned)(last.bits + this.bits) <= bits) break;
                    PULLBYTE();
                }
                DROPBITS(last.bits);
  41af20:	49 d3 ed             	shr    %cl,%r13
            }
            DROPBITS(this.bits);
  41af23:	89 d1                	mov    %edx,%ecx
  41af25:	29 d3                	sub    %edx,%ebx
  41af27:	49 d3 ed             	shr    %cl,%r13
            state->length = (unsigned)this.val;
            if ((int)(this.op) == 0) {
  41af2a:	40 84 f6             	test   %sil,%sil
  41af2d:	0f 85 51 fa ff ff    	jne    41a984 <inflate+0x4334>
  41af33:	e9 b8 f4 ff ff       	jmpq   41a3f0 <inflate+0x3da0>
  41af38:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41af3f:	00 
  41af40:	4c 89 db             	mov    %r11,%rbx
  41af43:	44 89 f6             	mov    %r14d,%esi
  41af46:	41 89 ca             	mov    %ecx,%r10d
  41af49:	4d 89 eb             	mov    %r13,%r11
  41af4c:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41af51:	e9 4a c6 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41af56:	41 89 da             	mov    %ebx,%r10d
  41af59:	44 89 f6             	mov    %r14d,%esi
  41af5c:	4c 89 db             	mov    %r11,%rbx
  41af5f:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41af64:	4d 89 eb             	mov    %r13,%r11
  41af67:	e9 34 c6 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41af6c:	41 89 da             	mov    %ebx,%r10d
  41af6f:	44 89 f6             	mov    %r14d,%esi
  41af72:	4c 89 db             	mov    %r11,%rbx
  41af75:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41af7a:	4d 89 eb             	mov    %r13,%r11
  41af7d:	e9 1e c6 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41af82:	4c 89 db             	mov    %r11,%rbx
  41af85:	44 89 f6             	mov    %r14d,%esi
  41af88:	41 89 ca             	mov    %ecx,%r10d
  41af8b:	4d 89 eb             	mov    %r13,%r11
  41af8e:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41af93:	e9 08 c6 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41af98:	4c 89 db             	mov    %r11,%rbx
  41af9b:	41 89 ca             	mov    %ecx,%r10d
  41af9e:	4d 89 eb             	mov    %r13,%r11
  41afa1:	44 89 ce             	mov    %r9d,%esi
  41afa4:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41afa9:	e9 f2 c5 ff ff       	jmpq   4175a0 <inflate+0xf50>
            }
            DROPBITS(2);
            break;
        case STORED:
            BYTEBITS();                         /* go to byte boundary */
            NEEDBITS(32);
  41afae:	4c 89 fd             	mov    %r15,%rbp
  41afb1:	e9 fe cb ff ff       	jmpq   417bb4 <inflate+0x1564>
  41afb6:	41 89 da             	mov    %ebx,%r10d
  41afb9:	44 89 f6             	mov    %r14d,%esi
  41afbc:	4c 89 db             	mov    %r11,%rbx
  41afbf:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41afc4:	4d 89 eb             	mov    %r13,%r11
  41afc7:	e9 d4 c5 ff ff       	jmpq   4175a0 <inflate+0xf50>
            }
            Tracev((stderr, "inflate:       stored end\n"));
            state->mode = TYPE;
            break;
        case TABLE:
            NEEDBITS(14);
  41afcc:	4c 89 fd             	mov    %r15,%rbp
  41afcf:	e9 dd cc ff ff       	jmpq   417cb1 <inflate+0x1661>
            state->mode = hold & 0x200 ? DICTID : TYPE;
            INITBITS();
            break;
#ifdef GUNZIP
        case FLAGS:
            NEEDBITS(16);
  41afd4:	4c 89 fd             	mov    %r15,%rbp
  41afd7:	e9 7c df ff ff       	jmpq   418f58 <inflate+0x2908>
  41afdc:	4c 89 db             	mov    %r11,%rbx
  41afdf:	44 89 f6             	mov    %r14d,%esi
  41afe2:	41 89 ca             	mov    %ecx,%r10d
  41afe5:	4d 89 eb             	mov    %r13,%r11
  41afe8:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41afed:	e9 ae c5 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41aff2:	41 89 da             	mov    %ebx,%r10d
  41aff5:	44 89 f6             	mov    %r14d,%esi
  41aff8:	4c 89 db             	mov    %r11,%rbx
  41affb:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b000:	4d 89 eb             	mov    %r13,%r11
  41b003:	e9 98 c5 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b008:	41 89 da             	mov    %ebx,%r10d
  41b00b:	44 89 f6             	mov    %r14d,%esi
  41b00e:	4c 89 db             	mov    %r11,%rbx
  41b011:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b016:	4d 89 eb             	mov    %r13,%r11
  41b019:	e9 82 c5 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b01e:	41 89 da             	mov    %ebx,%r10d
  41b021:	44 89 f6             	mov    %r14d,%esi
  41b024:	4c 89 db             	mov    %r11,%rbx
  41b027:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b02c:	4d 89 eb             	mov    %r13,%r11
  41b02f:	e9 6c c5 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b034:	4c 89 db             	mov    %r11,%rbx
  41b037:	41 89 ca             	mov    %ecx,%r10d
  41b03a:	4d 89 eb             	mov    %r13,%r11
  41b03d:	44 89 c6             	mov    %r8d,%esi
  41b040:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b045:	e9 56 c5 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b04a:	4c 89 db             	mov    %r11,%rbx
  41b04d:	41 89 ca             	mov    %ecx,%r10d
  41b050:	4d 89 eb             	mov    %r13,%r11
  41b053:	89 c6                	mov    %eax,%esi
  41b055:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b05a:	e9 41 c5 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b05f:	41 89 da             	mov    %ebx,%r10d
  41b062:	44 89 f6             	mov    %r14d,%esi
  41b065:	4c 89 db             	mov    %r11,%rbx
  41b068:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b06d:	4d 89 eb             	mov    %r13,%r11
  41b070:	e9 2b c5 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b075:	41 89 da             	mov    %ebx,%r10d
  41b078:	44 89 f6             	mov    %r14d,%esi
  41b07b:	4c 89 db             	mov    %r11,%rbx
  41b07e:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b083:	4d 89 eb             	mov    %r13,%r11
  41b086:	e9 15 c5 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b08b:	41 89 da             	mov    %ebx,%r10d
  41b08e:	44 89 f6             	mov    %r14d,%esi
  41b091:	4c 89 db             	mov    %r11,%rbx
  41b094:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b099:	4d 89 eb             	mov    %r13,%r11
  41b09c:	e9 ff c4 ff ff       	jmpq   4175a0 <inflate+0xf50>
            }
            Tracev((stderr, "inflate:       stored end\n"));
            state->mode = TYPE;
            break;
        case TABLE:
            NEEDBITS(14);
  41b0a1:	89 cb                	mov    %ecx,%ebx
  41b0a3:	45 89 d6             	mov    %r10d,%r14d
  41b0a6:	e9 06 cc ff ff       	jmpq   417cb1 <inflate+0x1661>
  41b0ab:	41 89 da             	mov    %ebx,%r10d
  41b0ae:	44 89 f6             	mov    %r14d,%esi
  41b0b1:	4c 89 db             	mov    %r11,%rbx
  41b0b4:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b0b9:	4d 89 eb             	mov    %r13,%r11
  41b0bc:	e9 df c4 ff ff       	jmpq   4175a0 <inflate+0xf50>
            state->mode = hold & 0x200 ? DICTID : TYPE;
            INITBITS();
            break;
#ifdef GUNZIP
        case FLAGS:
            NEEDBITS(16);
  41b0c1:	89 cb                	mov    %ecx,%ebx
  41b0c3:	41 89 fe             	mov    %edi,%r14d
  41b0c6:	e9 8d de ff ff       	jmpq   418f58 <inflate+0x2908>
            if (this.op & 64) {
                strm->msg = (char *)"invalid literal/length code";
                state->mode = BAD;
                break;
            }
            state->extra = (unsigned)(this.op) & 15;
  41b0cb:	83 e6 0f             	and    $0xf,%esi
            state->mode = LENEXT;
  41b0ce:	41 c7 03 13 00 00 00 	movl   $0x13,(%r11)
            if (this.op & 64) {
                strm->msg = (char *)"invalid literal/length code";
                state->mode = BAD;
                break;
            }
            state->extra = (unsigned)(this.op) & 15;
  41b0d5:	41 89 73 5c          	mov    %esi,0x5c(%r11)
  41b0d9:	e9 d6 ce ff ff       	jmpq   417fb4 <inflate+0x1964>
  41b0de:	41 89 da             	mov    %ebx,%r10d
  41b0e1:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b0e6:	4c 89 db             	mov    %r11,%rbx
            strm->adler = state->check = crc32(0L, Z_NULL, 0);
            state->mode = TYPE;
            break;
#endif
        case DICTID:
            NEEDBITS(32);
  41b0e9:	49 89 c7             	mov    %rax,%r15
  41b0ec:	4d 89 eb             	mov    %r13,%r11
            else if (state->head != Z_NULL)
                state->head->comment = Z_NULL;
            state->mode = HCRC;
        case HCRC:
            if (state->flags & 0x0200) {
                NEEDBITS(16);
  41b0ef:	31 f6                	xor    %esi,%esi
  41b0f1:	e9 aa c4 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b0f6:	4c 89 db             	mov    %r11,%rbx
  41b0f9:	44 89 f6             	mov    %r14d,%esi
  41b0fc:	41 89 ca             	mov    %ecx,%r10d
  41b0ff:	4d 89 eb             	mov    %r13,%r11
  41b102:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b107:	e9 94 c4 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b10c:	41 89 da             	mov    %ebx,%r10d
  41b10f:	44 89 f6             	mov    %r14d,%esi
  41b112:	4c 89 db             	mov    %r11,%rbx
  41b115:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b11a:	4d 89 eb             	mov    %r13,%r11
  41b11d:	e9 7e c4 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b122:	4c 89 db             	mov    %r11,%rbx
  41b125:	41 89 ca             	mov    %ecx,%r10d
  41b128:	4d 89 eb             	mov    %r13,%r11
  41b12b:	44 89 ce             	mov    %r9d,%esi
  41b12e:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b133:	e9 68 c4 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b138:	41 89 da             	mov    %ebx,%r10d
  41b13b:	44 89 f6             	mov    %r14d,%esi
  41b13e:	4c 89 db             	mov    %r11,%rbx
  41b141:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b146:	4d 89 eb             	mov    %r13,%r11
  41b149:	e9 52 c4 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b14e:	41 89 da             	mov    %ebx,%r10d
  41b151:	44 89 f6             	mov    %r14d,%esi
  41b154:	4c 89 db             	mov    %r11,%rbx
  41b157:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b15c:	4d 89 eb             	mov    %r13,%r11
  41b15f:	e9 3c c4 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b164:	4c 89 db             	mov    %r11,%rbx
  41b167:	44 89 f6             	mov    %r14d,%esi
  41b16a:	41 89 ca             	mov    %ecx,%r10d
  41b16d:	4d 89 eb             	mov    %r13,%r11
  41b170:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b175:	e9 26 c4 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b17a:	41 89 da             	mov    %ebx,%r10d
  41b17d:	44 89 f6             	mov    %r14d,%esi
  41b180:	4c 89 db             	mov    %r11,%rbx
  41b183:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b188:	4d 89 eb             	mov    %r13,%r11
  41b18b:	e9 10 c4 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b190:	41 89 da             	mov    %ebx,%r10d
  41b193:	44 89 f6             	mov    %r14d,%esi
  41b196:	4c 89 db             	mov    %r11,%rbx
  41b199:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b19e:	4d 89 eb             	mov    %r13,%r11
  41b1a1:	e9 fa c3 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b1a6:	4c 89 db             	mov    %r11,%rbx
  41b1a9:	41 89 ca             	mov    %ecx,%r10d
  41b1ac:	4d 89 eb             	mov    %r13,%r11
  41b1af:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b1b4:	e9 e7 c3 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b1b9:	89 d3                	mov    %edx,%ebx
                        copy = 3 + BITS(2);
                        DROPBITS(2);
                    }
                    else if (this.val == 17) {
                        NEEDBITS(this.bits + 3);
                        DROPBITS(this.bits);
  41b1bb:	89 c1                	mov    %eax,%ecx
  41b1bd:	41 b8 fd ff ff ff    	mov    $0xfffffffd,%r8d
  41b1c3:	49 d3 ed             	shr    %cl,%r13
  41b1c6:	41 29 c0             	sub    %eax,%r8d
                        len = 0;
                        copy = 3 + BITS(3);
  41b1c9:	45 89 ea             	mov    %r13d,%r10d
                        DROPBITS(3);
  41b1cc:	44 01 c3             	add    %r8d,%ebx
  41b1cf:	49 c1 ed 03          	shr    $0x3,%r13
                    }
                    else if (this.val == 17) {
                        NEEDBITS(this.bits + 3);
                        DROPBITS(this.bits);
                        len = 0;
                        copy = 3 + BITS(3);
  41b1d3:	41 83 e2 07          	and    $0x7,%r10d
                        DROPBITS(2);
                    }
                    else if (this.val == 17) {
                        NEEDBITS(this.bits + 3);
                        DROPBITS(this.bits);
                        len = 0;
  41b1d7:	45 31 c0             	xor    %r8d,%r8d
                        copy = 3 + BITS(3);
  41b1da:	41 83 c2 03          	add    $0x3,%r10d
  41b1de:	e9 3c f6 ff ff       	jmpq   41a81f <inflate+0x41cf>
  41b1e3:	41 89 da             	mov    %ebx,%r10d
  41b1e6:	44 89 f6             	mov    %r14d,%esi
  41b1e9:	4c 89 db             	mov    %r11,%rbx
  41b1ec:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b1f1:	4d 89 eb             	mov    %r13,%r11
  41b1f4:	e9 a7 c3 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b1f9:	4c 89 db             	mov    %r11,%rbx
  41b1fc:	41 89 ca             	mov    %ecx,%r10d
  41b1ff:	4d 89 eb             	mov    %r13,%r11
  41b202:	89 fe                	mov    %edi,%esi
  41b204:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b209:	e9 92 c3 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b20e:	4c 89 db             	mov    %r11,%rbx
  41b211:	44 89 f6             	mov    %r14d,%esi
  41b214:	41 89 ca             	mov    %ecx,%r10d
  41b217:	4d 89 eb             	mov    %r13,%r11
  41b21a:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b21f:	e9 7c c3 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b224:	41 89 da             	mov    %ebx,%r10d
  41b227:	44 89 f6             	mov    %r14d,%esi
  41b22a:	4c 89 db             	mov    %r11,%rbx
  41b22d:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b232:	4d 89 eb             	mov    %r13,%r11
  41b235:	e9 66 c3 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b23a:	41 89 da             	mov    %ebx,%r10d
  41b23d:	44 89 f6             	mov    %r14d,%esi
  41b240:	4c 89 db             	mov    %r11,%rbx
  41b243:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b248:	4d 89 eb             	mov    %r13,%r11
  41b24b:	e9 50 c3 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b250:	41 89 da             	mov    %ebx,%r10d
  41b253:	44 89 f6             	mov    %r14d,%esi
  41b256:	4c 89 db             	mov    %r11,%rbx
  41b259:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b25e:	4d 89 eb             	mov    %r13,%r11
  41b261:	e9 3a c3 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b266:	4c 89 db             	mov    %r11,%rbx
  41b269:	41 89 ca             	mov    %ecx,%r10d
  41b26c:	4d 89 eb             	mov    %r13,%r11
  41b26f:	44 89 e6             	mov    %r12d,%esi
  41b272:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b277:	e9 24 c3 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b27c:	41 89 da             	mov    %ebx,%r10d
  41b27f:	44 89 f6             	mov    %r14d,%esi
  41b282:	4c 89 db             	mov    %r11,%rbx
  41b285:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b28a:	4d 89 eb             	mov    %r13,%r11
  41b28d:	e9 0e c3 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b292:	41 89 da             	mov    %ebx,%r10d
  41b295:	44 89 f6             	mov    %r14d,%esi
  41b298:	4c 89 db             	mov    %r11,%rbx
  41b29b:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b2a0:	4d 89 eb             	mov    %r13,%r11
  41b2a3:	e9 f8 c2 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b2a8:	4c 89 db             	mov    %r11,%rbx
  41b2ab:	44 89 f6             	mov    %r14d,%esi
  41b2ae:	41 89 ca             	mov    %ecx,%r10d
  41b2b1:	4d 89 eb             	mov    %r13,%r11
  41b2b4:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b2b9:	e9 e2 c2 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b2be:	41 89 da             	mov    %ebx,%r10d
  41b2c1:	44 89 f6             	mov    %r14d,%esi
  41b2c4:	4c 89 db             	mov    %r11,%rbx
  41b2c7:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b2cc:	4d 89 eb             	mov    %r13,%r11
  41b2cf:	e9 cc c2 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b2d4:	44 89 f2             	mov    %r14d,%edx
            strm->adler = state->check = REVERSE(hold);
            INITBITS();
            state->mode = DICT;
        case DICT:
            if (state->havedict == 0) {
                RESTORE();
  41b2d7:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  41b2dc:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b2e1:	44 8b 44 24 10       	mov    0x10(%rsp),%r8d
  41b2e6:	41 89 d9             	mov    %ebx,%r9d
  41b2e9:	4c 89 db             	mov    %r11,%rbx
                return Z_NEED_DICT;
  41b2ec:	b8 02 00 00 00       	mov    $0x2,%eax
            strm->adler = state->check = REVERSE(hold);
            INITBITS();
            state->mode = DICT;
        case DICT:
            if (state->havedict == 0) {
                RESTORE();
  41b2f1:	49 89 76 18          	mov    %rsi,0x18(%r14)
  41b2f5:	4d 89 3e             	mov    %r15,(%r14)
  41b2f8:	45 89 46 20          	mov    %r8d,0x20(%r14)
  41b2fc:	41 89 56 08          	mov    %edx,0x8(%r14)
  41b300:	4c 89 6b 48          	mov    %r13,0x48(%rbx)
  41b304:	44 89 4b 50          	mov    %r9d,0x50(%rbx)
                return Z_NEED_DICT;
  41b308:	e9 4b c2 ff ff       	jmpq   417558 <inflate+0xf08>
  41b30d:	41 89 da             	mov    %ebx,%r10d
  41b310:	44 89 f6             	mov    %r14d,%esi
  41b313:	4c 89 db             	mov    %r11,%rbx
  41b316:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b31b:	4d 89 eb             	mov    %r13,%r11
  41b31e:	e9 7d c2 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b323:	41 89 da             	mov    %ebx,%r10d
  41b326:	44 89 f6             	mov    %r14d,%esi
  41b329:	4c 89 db             	mov    %r11,%rbx
  41b32c:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b331:	4d 89 eb             	mov    %r13,%r11
  41b334:	e9 67 c2 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b339:	4c 89 db             	mov    %r11,%rbx
  41b33c:	41 89 ca             	mov    %ecx,%r10d
  41b33f:	4d 89 eb             	mov    %r13,%r11
  41b342:	89 d6                	mov    %edx,%esi
  41b344:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b349:	e9 52 c2 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b34e:	4c 89 db             	mov    %r11,%rbx
  41b351:	44 89 f6             	mov    %r14d,%esi
  41b354:	41 89 ca             	mov    %ecx,%r10d
  41b357:	4d 89 eb             	mov    %r13,%r11
  41b35a:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b35f:	e9 3c c2 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b364:	41 89 da             	mov    %ebx,%r10d
  41b367:	44 89 f6             	mov    %r14d,%esi
  41b36a:	4c 89 db             	mov    %r11,%rbx
  41b36d:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b372:	4d 89 eb             	mov    %r13,%r11
  41b375:	e9 26 c2 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b37a:	41 89 da             	mov    %ebx,%r10d
  41b37d:	44 89 f6             	mov    %r14d,%esi
  41b380:	4c 89 db             	mov    %r11,%rbx
  41b383:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b388:	4d 89 eb             	mov    %r13,%r11
  41b38b:	e9 10 c2 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b390:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  41b395:	e9 25 ef ff ff       	jmpq   41a2bf <inflate+0x3c6f>
  41b39a:	41 89 da             	mov    %ebx,%r10d
  41b39d:	44 89 f6             	mov    %r14d,%esi
  41b3a0:	4c 89 db             	mov    %r11,%rbx
  41b3a3:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b3a8:	4d 89 eb             	mov    %r13,%r11
  41b3ab:	e9 f0 c1 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b3b0:	41 89 da             	mov    %ebx,%r10d
  41b3b3:	44 89 f6             	mov    %r14d,%esi
  41b3b6:	4c 89 db             	mov    %r11,%rbx
  41b3b9:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b3be:	4d 89 eb             	mov    %r13,%r11
  41b3c1:	e9 da c1 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b3c6:	4c 89 db             	mov    %r11,%rbx
  41b3c9:	41 89 ca             	mov    %ecx,%r10d
  41b3cc:	4d 89 eb             	mov    %r13,%r11
  41b3cf:	44 89 e6             	mov    %r12d,%esi
  41b3d2:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b3d7:	e9 c4 c1 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b3dc:	4c 89 db             	mov    %r11,%rbx
  41b3df:	41 89 ca             	mov    %ecx,%r10d
  41b3e2:	4d 89 eb             	mov    %r13,%r11
  41b3e5:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b3ea:	e9 b1 c1 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b3ef:	41 89 da             	mov    %ebx,%r10d
  41b3f2:	44 89 f6             	mov    %r14d,%esi
  41b3f5:	4c 89 db             	mov    %r11,%rbx
  41b3f8:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b3fd:	4d 89 eb             	mov    %r13,%r11
  41b400:	e9 9b c1 ff ff       	jmpq   4175a0 <inflate+0xf50>

            /* handle error breaks in while */
            if (state->mode == BAD) break;

            /* build code tables */
            state->next = state->codes;
  41b405:	48 8b 7c 24 40       	mov    0x40(%rsp),%rdi
            state->lencode = (code const FAR *)(state->next);
            state->lenbits = 9;
            ret = inflate_table(LENS, state->lens, state->nlen, &(state->next),
  41b40a:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
  41b40f:	49 8d b3 90 00 00 00 	lea    0x90(%r11),%rsi
  41b416:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  41b41b:	8b 54 24 48          	mov    0x48(%rsp),%edx
  41b41f:	4d 8d 43 70          	lea    0x70(%r11),%r8
            if (state->mode == BAD) break;

            /* build code tables */
            state->next = state->codes;
            state->lencode = (code const FAR *)(state->next);
            state->lenbits = 9;
  41b423:	41 c7 43 70 09 00 00 	movl   $0x9,0x70(%r11)
  41b42a:	00 
            ret = inflate_table(LENS, state->lens, state->nlen, &(state->next),
  41b42b:	4c 89 5c 24 50       	mov    %r11,0x50(%rsp)

            /* handle error breaks in while */
            if (state->mode == BAD) break;

            /* build code tables */
            state->next = state->codes;
  41b430:	49 89 bb 88 00 00 00 	mov    %rdi,0x88(%r11)
            state->lencode = (code const FAR *)(state->next);
  41b437:	49 89 7b 60          	mov    %rdi,0x60(%r11)
            state->lenbits = 9;
            ret = inflate_table(LENS, state->lens, state->nlen, &(state->next),
  41b43b:	bf 01 00 00 00       	mov    $0x1,%edi
  41b440:	e8 bb 12 00 00       	callq  41c700 <inflate_table>
                                &(state->lenbits), state->work);
            if (ret) {
  41b445:	85 c0                	test   %eax,%eax

            /* build code tables */
            state->next = state->codes;
            state->lencode = (code const FAR *)(state->next);
            state->lenbits = 9;
            ret = inflate_table(LENS, state->lens, state->nlen, &(state->next),
  41b447:	89 44 24 28          	mov    %eax,0x28(%rsp)
                                &(state->lenbits), state->work);
            if (ret) {
  41b44b:	4c 8b 5c 24 50       	mov    0x50(%rsp),%r11
  41b450:	0f 84 9f 04 00 00    	je     41b8f5 <inflate+0x52a5>
                strm->msg = (char *)"invalid literal/lengths set";
  41b456:	4c 8b 54 24 20       	mov    0x20(%rsp),%r10
                state->mode = BAD;
                break;
  41b45b:	41 bc 1b 00 00 00    	mov    $0x1b,%r12d
            state->lencode = (code const FAR *)(state->next);
            state->lenbits = 9;
            ret = inflate_table(LENS, state->lens, state->nlen, &(state->next),
                                &(state->lenbits), state->work);
            if (ret) {
                strm->msg = (char *)"invalid literal/lengths set";
  41b461:	49 c7 42 30 66 93 43 	movq   $0x439366,0x30(%r10)
  41b468:	00 
                state->mode = BAD;
  41b469:	41 c7 03 1b 00 00 00 	movl   $0x1b,(%r11)
                break;
  41b470:	e9 a8 b2 ff ff       	jmpq   41671d <inflate+0xcd>
  41b475:	41 89 da             	mov    %ebx,%r10d
  41b478:	44 89 f6             	mov    %r14d,%esi
  41b47b:	4c 89 db             	mov    %r11,%rbx
  41b47e:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b483:	4d 89 eb             	mov    %r13,%r11
  41b486:	e9 15 c1 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b48b:	41 89 da             	mov    %ebx,%r10d
  41b48e:	44 89 f6             	mov    %r14d,%esi
  41b491:	4c 89 db             	mov    %r11,%rbx
  41b494:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b499:	4d 89 eb             	mov    %r13,%r11
  41b49c:	e9 ff c0 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b4a1:	41 89 da             	mov    %ebx,%r10d
  41b4a4:	44 89 f6             	mov    %r14d,%esi
  41b4a7:	4c 89 db             	mov    %r11,%rbx
  41b4aa:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b4af:	4d 89 eb             	mov    %r13,%r11
  41b4b2:	e9 e9 c0 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b4b7:	41 89 da             	mov    %ebx,%r10d
  41b4ba:	44 89 f6             	mov    %r14d,%esi
  41b4bd:	4c 89 db             	mov    %r11,%rbx
  41b4c0:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b4c5:	4d 89 eb             	mov    %r13,%r11
  41b4c8:	e9 d3 c0 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b4cd:	4c 89 db             	mov    %r11,%rbx
  41b4d0:	41 89 ca             	mov    %ecx,%r10d
  41b4d3:	4d 89 eb             	mov    %r13,%r11
  41b4d6:	89 c6                	mov    %eax,%esi
  41b4d8:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b4dd:	e9 be c0 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b4e2:	4c 89 db             	mov    %r11,%rbx
  41b4e5:	44 89 f6             	mov    %r14d,%esi
  41b4e8:	41 89 ca             	mov    %ecx,%r10d
  41b4eb:	4d 89 eb             	mov    %r13,%r11
  41b4ee:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b4f3:	e9 a8 c0 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b4f8:	41 89 da             	mov    %ebx,%r10d
  41b4fb:	44 89 f6             	mov    %r14d,%esi
  41b4fe:	4c 89 db             	mov    %r11,%rbx
  41b501:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b506:	4d 89 eb             	mov    %r13,%r11
  41b509:	e9 92 c0 ff ff       	jmpq   4175a0 <inflate+0xf50>
            left--;
            state->mode = LEN;
            break;
        case CHECK:
            if (state->wrap) {
                NEEDBITS(32);
  41b50e:	4d 89 fc             	mov    %r15,%r12
  41b511:	e9 24 db ff ff       	jmpq   41903a <inflate+0x29ea>
  41b516:	4c 89 db             	mov    %r11,%rbx
  41b519:	44 89 f6             	mov    %r14d,%esi
  41b51c:	41 89 ca             	mov    %ecx,%r10d
  41b51f:	4d 89 eb             	mov    %r13,%r11
  41b522:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b527:	e9 74 c0 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b52c:	4c 89 db             	mov    %r11,%rbx
  41b52f:	44 89 f6             	mov    %r14d,%esi
  41b532:	41 89 ca             	mov    %ecx,%r10d
  41b535:	4d 89 eb             	mov    %r13,%r11
  41b538:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b53d:	e9 5e c0 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b542:	41 89 da             	mov    %ebx,%r10d
  41b545:	44 89 f6             	mov    %r14d,%esi
  41b548:	4c 89 db             	mov    %r11,%rbx
  41b54b:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b550:	4d 89 eb             	mov    %r13,%r11
  41b553:	e9 48 c0 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b558:	4c 89 db             	mov    %r11,%rbx
  41b55b:	41 89 ca             	mov    %ecx,%r10d
  41b55e:	4d 89 eb             	mov    %r13,%r11
  41b561:	44 89 e6             	mov    %r12d,%esi
  41b564:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b569:	e9 32 c0 ff ff       	jmpq   4175a0 <inflate+0xf50>
                state->mode = BAD;
                break;
            }
            if (state->head != Z_NULL)
                state->head->text = (int)((hold >> 8) & 1);
            if (state->flags & 0x0200) CRC2(state->check, hold);
  41b56e:	49 8b 7b 18          	mov    0x18(%r11),%rdi
  41b572:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
  41b577:	44 88 6c 24 60       	mov    %r13b,0x60(%rsp)
  41b57c:	ba 02 00 00 00       	mov    $0x2,%edx
  41b581:	49 c1 ed 08          	shr    $0x8,%r13
  41b585:	4c 89 5c 24 48       	mov    %r11,0x48(%rsp)
  41b58a:	44 88 6c 24 61       	mov    %r13b,0x61(%rsp)
  41b58f:	e8 bc 55 00 00       	callq  420b50 <crc32>
  41b594:	4c 8b 5c 24 48       	mov    0x48(%rsp),%r11
  41b599:	49 89 43 18          	mov    %rax,0x18(%r11)
  41b59d:	e9 fe f6 ff ff       	jmpq   41aca0 <inflate+0x4650>
  41b5a2:	41 89 da             	mov    %ebx,%r10d
  41b5a5:	44 89 f6             	mov    %r14d,%esi
  41b5a8:	4c 89 db             	mov    %r11,%rbx
  41b5ab:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b5b0:	4d 89 eb             	mov    %r13,%r11
  41b5b3:	e9 e8 bf ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b5b8:	4c 89 db             	mov    %r11,%rbx
  41b5bb:	41 89 ca             	mov    %ecx,%r10d
  41b5be:	4d 89 eb             	mov    %r13,%r11
  41b5c1:	44 89 c6             	mov    %r8d,%esi
  41b5c4:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b5c9:	e9 d2 bf ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b5ce:	4c 89 db             	mov    %r11,%rbx
  41b5d1:	41 89 ca             	mov    %ecx,%r10d
  41b5d4:	4d 89 eb             	mov    %r13,%r11
  41b5d7:	44 89 ce             	mov    %r9d,%esi
  41b5da:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b5df:	e9 bc bf ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b5e4:	4c 89 db             	mov    %r11,%rbx
  41b5e7:	44 89 f6             	mov    %r14d,%esi
  41b5ea:	41 89 ca             	mov    %ecx,%r10d
  41b5ed:	4d 89 eb             	mov    %r13,%r11
  41b5f0:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b5f5:	e9 a6 bf ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b5fa:	41 89 da             	mov    %ebx,%r10d
  41b5fd:	44 89 f6             	mov    %r14d,%esi
  41b600:	4c 89 db             	mov    %r11,%rbx
  41b603:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b608:	4d 89 eb             	mov    %r13,%r11
  41b60b:	e9 90 bf ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b610:	41 89 da             	mov    %ebx,%r10d
  41b613:	44 89 f6             	mov    %r14d,%esi
  41b616:	4c 89 db             	mov    %r11,%rbx
  41b619:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b61e:	4d 89 eb             	mov    %r13,%r11
  41b621:	e9 7a bf ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b626:	41 89 da             	mov    %ebx,%r10d
  41b629:	44 89 f6             	mov    %r14d,%esi
  41b62c:	4c 89 db             	mov    %r11,%rbx
  41b62f:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b634:	4d 89 eb             	mov    %r13,%r11
  41b637:	e9 64 bf ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b63c:	41 89 da             	mov    %ebx,%r10d
  41b63f:	44 89 f6             	mov    %r14d,%esi
  41b642:	4c 89 db             	mov    %r11,%rbx
  41b645:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b64a:	4d 89 eb             	mov    %r13,%r11
  41b64d:	e9 4e bf ff ff       	jmpq   4175a0 <inflate+0xf50>
        case HEAD:
            if (state->wrap == 0) {
                state->mode = TYPEDO;
                break;
            }
            NEEDBITS(16);
  41b652:	89 cb                	mov    %ecx,%ebx
  41b654:	45 89 d6             	mov    %r10d,%r14d
  41b657:	e9 2d d1 ff ff       	jmpq   418789 <inflate+0x2139>
  41b65c:	41 89 da             	mov    %ebx,%r10d
  41b65f:	44 89 f6             	mov    %r14d,%esi
  41b662:	4c 89 db             	mov    %r11,%rbx
  41b665:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b66a:	4d 89 eb             	mov    %r13,%r11
  41b66d:	e9 2e bf ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b672:	41 89 da             	mov    %ebx,%r10d
  41b675:	44 89 f6             	mov    %r14d,%esi
  41b678:	4c 89 db             	mov    %r11,%rbx
  41b67b:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b680:	4d 89 eb             	mov    %r13,%r11
  41b683:	e9 18 bf ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b688:	41 89 da             	mov    %ebx,%r10d
  41b68b:	44 89 f6             	mov    %r14d,%esi
  41b68e:	4c 89 db             	mov    %r11,%rbx
  41b691:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b696:	4d 89 eb             	mov    %r13,%r11
  41b699:	e9 02 bf ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b69e:	41 89 da             	mov    %ebx,%r10d
  41b6a1:	44 89 f6             	mov    %r14d,%esi
  41b6a4:	4c 89 db             	mov    %r11,%rbx
  41b6a7:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b6ac:	4d 89 eb             	mov    %r13,%r11
  41b6af:	e9 ec be ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b6b4:	41 89 da             	mov    %ebx,%r10d
  41b6b7:	44 89 f6             	mov    %r14d,%esi
  41b6ba:	4c 89 db             	mov    %r11,%rbx
  41b6bd:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b6c2:	4d 89 eb             	mov    %r13,%r11
  41b6c5:	e9 d6 be ff ff       	jmpq   4175a0 <inflate+0xf50>
#ifdef GUNZIP
            if ((state->wrap & 2) && hold == 0x8b1f) {  /* gzip header */
                state->check = crc32(0L, Z_NULL, 0);
  41b6ca:	31 d2                	xor    %edx,%edx
  41b6cc:	31 f6                	xor    %esi,%esi
  41b6ce:	31 ff                	xor    %edi,%edi
  41b6d0:	4c 89 5c 24 48       	mov    %r11,0x48(%rsp)
                CRC2(state->check, hold);
                INITBITS();
                state->mode = FLAGS;
                break;
  41b6d5:	41 bc 01 00 00 00    	mov    $0x1,%r12d
            NEEDBITS(16);
#ifdef GUNZIP
            if ((state->wrap & 2) && hold == 0x8b1f) {  /* gzip header */
                state->check = crc32(0L, Z_NULL, 0);
                CRC2(state->check, hold);
                INITBITS();
  41b6db:	66 45 31 ed          	xor    %r13w,%r13w
                break;
            }
            NEEDBITS(16);
#ifdef GUNZIP
            if ((state->wrap & 2) && hold == 0x8b1f) {  /* gzip header */
                state->check = crc32(0L, Z_NULL, 0);
  41b6df:	e8 6c 54 00 00       	callq  420b50 <crc32>
  41b6e4:	48 8b 5c 24 48       	mov    0x48(%rsp),%rbx
                CRC2(state->check, hold);
  41b6e9:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
  41b6ee:	ba 02 00 00 00       	mov    $0x2,%edx
  41b6f3:	48 89 c7             	mov    %rax,%rdi
  41b6f6:	c6 44 24 60 1f       	movb   $0x1f,0x60(%rsp)
  41b6fb:	c6 44 24 61 8b       	movb   $0x8b,0x61(%rsp)
                break;
            }
            NEEDBITS(16);
#ifdef GUNZIP
            if ((state->wrap & 2) && hold == 0x8b1f) {  /* gzip header */
                state->check = crc32(0L, Z_NULL, 0);
  41b700:	48 89 43 18          	mov    %rax,0x18(%rbx)
                CRC2(state->check, hold);
                INITBITS();
  41b704:	31 db                	xor    %ebx,%ebx
            }
            NEEDBITS(16);
#ifdef GUNZIP
            if ((state->wrap & 2) && hold == 0x8b1f) {  /* gzip header */
                state->check = crc32(0L, Z_NULL, 0);
                CRC2(state->check, hold);
  41b706:	e8 45 54 00 00       	callq  420b50 <crc32>
  41b70b:	4c 8b 5c 24 48       	mov    0x48(%rsp),%r11
  41b710:	49 89 43 18          	mov    %rax,0x18(%r11)
                INITBITS();
                state->mode = FLAGS;
  41b714:	41 c7 03 01 00 00 00 	movl   $0x1,(%r11)
                break;
  41b71b:	e9 fd af ff ff       	jmpq   41671d <inflate+0xcd>
            if (BITS(4) != Z_DEFLATED) {
                strm->msg = (char *)"unknown compression method";
                state->mode = BAD;
                break;
            }
            DROPBITS(4);
  41b720:	49 c1 ed 04          	shr    $0x4,%r13
            len = BITS(4) + 8;
  41b724:	44 89 e9             	mov    %r13d,%ecx
  41b727:	83 e1 0f             	and    $0xf,%ecx
  41b72a:	83 c1 08             	add    $0x8,%ecx
            if (len > state->wbits) {
  41b72d:	41 3b 4b 30          	cmp    0x30(%r11),%ecx
  41b731:	0f 86 31 02 00 00    	jbe    41b968 <inflate+0x5318>
                strm->msg = (char *)"invalid window size";
  41b737:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
            if (BITS(4) != Z_DEFLATED) {
                strm->msg = (char *)"unknown compression method";
                state->mode = BAD;
                break;
            }
            DROPBITS(4);
  41b73c:	83 eb 04             	sub    $0x4,%ebx
            len = BITS(4) + 8;
            if (len > state->wbits) {
                strm->msg = (char *)"invalid window size";
                state->mode = BAD;
                break;
  41b73f:	41 bc 1b 00 00 00    	mov    $0x1b,%r12d
                break;
            }
            DROPBITS(4);
            len = BITS(4) + 8;
            if (len > state->wbits) {
                strm->msg = (char *)"invalid window size";
  41b745:	48 c7 47 30 c2 92 43 	movq   $0x4392c2,0x30(%rdi)
  41b74c:	00 
                state->mode = BAD;
  41b74d:	41 c7 03 1b 00 00 00 	movl   $0x1b,(%r11)
                break;
  41b754:	e9 c4 af ff ff       	jmpq   41671d <inflate+0xcd>
  41b759:	41 89 da             	mov    %ebx,%r10d
  41b75c:	44 89 f6             	mov    %r14d,%esi
  41b75f:	4c 89 db             	mov    %r11,%rbx
  41b762:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b767:	4d 89 eb             	mov    %r13,%r11
  41b76a:	e9 31 be ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b76f:	41 89 da             	mov    %ebx,%r10d
  41b772:	44 89 f6             	mov    %r14d,%esi
  41b775:	4c 89 db             	mov    %r11,%rbx
  41b778:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b77d:	4d 89 eb             	mov    %r13,%r11
  41b780:	e9 1b be ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b785:	4c 89 db             	mov    %r11,%rbx
  41b788:	44 89 f6             	mov    %r14d,%esi
  41b78b:	41 89 ca             	mov    %ecx,%r10d
  41b78e:	4d 89 eb             	mov    %r13,%r11
  41b791:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b796:	e9 05 be ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b79b:	41 89 da             	mov    %ebx,%r10d
  41b79e:	44 89 f6             	mov    %r14d,%esi
  41b7a1:	4c 89 db             	mov    %r11,%rbx
  41b7a4:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b7a9:	4d 89 eb             	mov    %r13,%r11
  41b7ac:	e9 ef bd ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b7b1:	44 89 f6             	mov    %r14d,%esi
  41b7b4:	4c 89 db             	mov    %r11,%rbx
  41b7b7:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
                if (hold != (state->total & 0xffffffffUL)) {
                    strm->msg = (char *)"incorrect length check";
                    state->mode = BAD;
                    break;
                }
                INITBITS();
  41b7bc:	45 31 d2             	xor    %r10d,%r10d
  41b7bf:	45 31 db             	xor    %r11d,%r11d
  41b7c2:	e9 0a f6 ff ff       	jmpq   41add1 <inflate+0x4781>
  41b7c7:	41 89 da             	mov    %ebx,%r10d
  41b7ca:	44 89 f6             	mov    %r14d,%esi
  41b7cd:	4c 89 db             	mov    %r11,%rbx
  41b7d0:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b7d5:	4d 89 eb             	mov    %r13,%r11
  41b7d8:	e9 c3 bd ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b7dd:	41 89 da             	mov    %ebx,%r10d
  41b7e0:	44 89 f6             	mov    %r14d,%esi
  41b7e3:	4c 89 db             	mov    %r11,%rbx
  41b7e6:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b7eb:	4d 89 eb             	mov    %r13,%r11
  41b7ee:	e9 ad bd ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b7f3:	41 89 da             	mov    %ebx,%r10d
  41b7f6:	44 89 f6             	mov    %r14d,%esi
  41b7f9:	4c 89 db             	mov    %r11,%rbx
  41b7fc:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b801:	4d 89 eb             	mov    %r13,%r11
  41b804:	e9 97 bd ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b809:	41 89 da             	mov    %ebx,%r10d
  41b80c:	44 89 f6             	mov    %r14d,%esi
  41b80f:	4c 89 db             	mov    %r11,%rbx
  41b812:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b817:	4d 89 eb             	mov    %r13,%r11
  41b81a:	e9 81 bd ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b81f:	4c 89 db             	mov    %r11,%rbx
  41b822:	44 89 f6             	mov    %r14d,%esi
  41b825:	41 89 ca             	mov    %ecx,%r10d
  41b828:	4d 89 eb             	mov    %r13,%r11
  41b82b:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b830:	e9 6b bd ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b835:	4c 89 db             	mov    %r11,%rbx
  41b838:	44 89 f6             	mov    %r14d,%esi
  41b83b:	41 89 ca             	mov    %ecx,%r10d
  41b83e:	4d 89 eb             	mov    %r13,%r11
  41b841:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b846:	e9 55 bd ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b84b:	4c 89 db             	mov    %r11,%rbx
  41b84e:	41 89 ca             	mov    %ecx,%r10d
  41b851:	4d 89 eb             	mov    %r13,%r11
  41b854:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b859:	e9 42 bd ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b85e:	4c 89 db             	mov    %r11,%rbx
  41b861:	41 89 ca             	mov    %ecx,%r10d
  41b864:	4d 89 eb             	mov    %r13,%r11
  41b867:	44 89 ce             	mov    %r9d,%esi
  41b86a:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b86f:	e9 2c bd ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b874:	41 89 da             	mov    %ebx,%r10d
  41b877:	44 89 f6             	mov    %r14d,%esi
  41b87a:	4c 89 db             	mov    %r11,%rbx
  41b87d:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b882:	4d 89 eb             	mov    %r13,%r11
  41b885:	e9 16 bd ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b88a:	4c 89 db             	mov    %r11,%rbx
  41b88d:	41 89 ca             	mov    %ecx,%r10d
  41b890:	4d 89 eb             	mov    %r13,%r11
  41b893:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b898:	e9 03 bd ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b89d:	4c 89 db             	mov    %r11,%rbx
  41b8a0:	41 89 ca             	mov    %ecx,%r10d
  41b8a3:	4d 89 eb             	mov    %r13,%r11
  41b8a6:	44 89 ce             	mov    %r9d,%esi
  41b8a9:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b8ae:	e9 ed bc ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b8b3:	4c 89 db             	mov    %r11,%rbx
  41b8b6:	44 89 f6             	mov    %r14d,%esi
  41b8b9:	41 89 ca             	mov    %ecx,%r10d
  41b8bc:	4d 89 eb             	mov    %r13,%r11
  41b8bf:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b8c4:	e9 d7 bc ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b8c9:	4c 89 db             	mov    %r11,%rbx
  41b8cc:	41 89 ca             	mov    %ecx,%r10d
  41b8cf:	4d 89 eb             	mov    %r13,%r11
  41b8d2:	44 89 ce             	mov    %r9d,%esi
  41b8d5:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b8da:	e9 c1 bc ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b8df:	41 89 da             	mov    %ebx,%r10d
  41b8e2:	44 89 f6             	mov    %r14d,%esi
  41b8e5:	4c 89 db             	mov    %r11,%rbx
  41b8e8:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b8ed:	4d 89 eb             	mov    %r13,%r11
  41b8f0:	e9 ab bc ff ff       	jmpq   4175a0 <inflate+0xf50>
                state->mode = BAD;
                break;
            }
            state->distcode = (code const FAR *)(state->next);
            state->distbits = 6;
            ret = inflate_table(DISTS, state->lens + state->nlen, state->ndist,
  41b8f5:	41 8b 4b 7c          	mov    0x7c(%r11),%ecx
            if (ret) {
                strm->msg = (char *)"invalid literal/lengths set";
                state->mode = BAD;
                break;
            }
            state->distcode = (code const FAR *)(state->next);
  41b8f9:	49 8b ab 88 00 00 00 	mov    0x88(%r11),%rbp
            state->distbits = 6;
            ret = inflate_table(DISTS, state->lens + state->nlen, state->ndist,
  41b900:	4d 8d 43 74          	lea    0x74(%r11),%r8
  41b904:	41 8b 93 80 00 00 00 	mov    0x80(%r11),%edx
  41b90b:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
  41b910:	bf 02 00 00 00       	mov    $0x2,%edi
                strm->msg = (char *)"invalid literal/lengths set";
                state->mode = BAD;
                break;
            }
            state->distcode = (code const FAR *)(state->next);
            state->distbits = 6;
  41b915:	41 c7 43 74 06 00 00 	movl   $0x6,0x74(%r11)
  41b91c:	00 
            ret = inflate_table(DISTS, state->lens + state->nlen, state->ndist,
  41b91d:	4c 89 5c 24 48       	mov    %r11,0x48(%rsp)
            if (ret) {
                strm->msg = (char *)"invalid literal/lengths set";
                state->mode = BAD;
                break;
            }
            state->distcode = (code const FAR *)(state->next);
  41b922:	49 89 6b 68          	mov    %rbp,0x68(%r11)
            state->distbits = 6;
            ret = inflate_table(DISTS, state->lens + state->nlen, state->ndist,
  41b926:	49 8d b4 4b 90 00 00 	lea    0x90(%r11,%rcx,2),%rsi
  41b92d:	00 
  41b92e:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  41b933:	e8 c8 0d 00 00       	callq  41c700 <inflate_table>
                            &(state->next), &(state->distbits), state->work);
            if (ret) {
  41b938:	85 c0                	test   %eax,%eax
                state->mode = BAD;
                break;
            }
            state->distcode = (code const FAR *)(state->next);
            state->distbits = 6;
            ret = inflate_table(DISTS, state->lens + state->nlen, state->ndist,
  41b93a:	89 44 24 28          	mov    %eax,0x28(%rsp)
                            &(state->next), &(state->distbits), state->work);
            if (ret) {
  41b93e:	4c 8b 5c 24 48       	mov    0x48(%rsp),%r11
  41b943:	0f 84 e4 bd ff ff    	je     41772d <inflate+0x10dd>
                strm->msg = (char *)"invalid distances set";
  41b949:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
                state->mode = BAD;
                break;
  41b94e:	41 bc 1b 00 00 00    	mov    $0x1b,%r12d
            state->distcode = (code const FAR *)(state->next);
            state->distbits = 6;
            ret = inflate_table(DISTS, state->lens + state->nlen, state->ndist,
                            &(state->next), &(state->distbits), state->work);
            if (ret) {
                strm->msg = (char *)"invalid distances set";
  41b954:	48 c7 47 30 82 93 43 	movq   $0x439382,0x30(%rdi)
  41b95b:	00 
                state->mode = BAD;
  41b95c:	41 c7 03 1b 00 00 00 	movl   $0x1b,(%r11)
                break;
  41b963:	e9 b5 ad ff ff       	jmpq   41671d <inflate+0xcd>
            if (len > state->wbits) {
                strm->msg = (char *)"invalid window size";
                state->mode = BAD;
                break;
            }
            state->dmax = 1U << len;
  41b968:	bb 01 00 00 00       	mov    $0x1,%ebx
            Tracev((stderr, "inflate:   zlib header ok\n"));
            strm->adler = state->check = adler32(0L, Z_NULL, 0);
  41b96d:	31 d2                	xor    %edx,%edx
  41b96f:	31 f6                	xor    %esi,%esi
            if (len > state->wbits) {
                strm->msg = (char *)"invalid window size";
                state->mode = BAD;
                break;
            }
            state->dmax = 1U << len;
  41b971:	d3 e3                	shl    %cl,%ebx
            Tracev((stderr, "inflate:   zlib header ok\n"));
            strm->adler = state->check = adler32(0L, Z_NULL, 0);
  41b973:	31 ff                	xor    %edi,%edi
            state->mode = hold & 0x200 ? DICTID : TYPE;
  41b975:	41 81 e5 00 02 00 00 	and    $0x200,%r13d
            if (len > state->wbits) {
                strm->msg = (char *)"invalid window size";
                state->mode = BAD;
                break;
            }
            state->dmax = 1U << len;
  41b97c:	41 89 5b 14          	mov    %ebx,0x14(%r11)
  41b980:	4c 89 5c 24 48       	mov    %r11,0x48(%rsp)
            Tracev((stderr, "inflate:   zlib header ok\n"));
            strm->adler = state->check = adler32(0L, Z_NULL, 0);
  41b985:	e8 a6 49 00 00       	callq  420330 <adler32>
            state->mode = hold & 0x200 ? DICTID : TYPE;
  41b98a:	49 83 fd 01          	cmp    $0x1,%r13
                state->mode = BAD;
                break;
            }
            state->dmax = 1U << len;
            Tracev((stderr, "inflate:   zlib header ok\n"));
            strm->adler = state->check = adler32(0L, Z_NULL, 0);
  41b98e:	4c 8b 5c 24 48       	mov    0x48(%rsp),%r11
  41b993:	48 8b 6c 24 20       	mov    0x20(%rsp),%rbp
            state->mode = hold & 0x200 ? DICTID : TYPE;
  41b998:	45 19 e4             	sbb    %r12d,%r12d
            INITBITS();
  41b99b:	31 db                	xor    %ebx,%ebx
  41b99d:	45 31 ed             	xor    %r13d,%r13d
                break;
            }
            state->dmax = 1U << len;
            Tracev((stderr, "inflate:   zlib header ok\n"));
            strm->adler = state->check = adler32(0L, Z_NULL, 0);
            state->mode = hold & 0x200 ? DICTID : TYPE;
  41b9a0:	41 83 e4 02          	and    $0x2,%r12d
  41b9a4:	41 83 c4 09          	add    $0x9,%r12d
                state->mode = BAD;
                break;
            }
            state->dmax = 1U << len;
            Tracev((stderr, "inflate:   zlib header ok\n"));
            strm->adler = state->check = adler32(0L, Z_NULL, 0);
  41b9a8:	49 89 43 18          	mov    %rax,0x18(%r11)
  41b9ac:	48 89 45 60          	mov    %rax,0x60(%rbp)
            state->mode = hold & 0x200 ? DICTID : TYPE;
  41b9b0:	45 89 23             	mov    %r12d,(%r11)
            INITBITS();
            break;
  41b9b3:	e9 5b ad ff ff       	jmpq   416713 <inflate+0xc3>
  41b9b8:	41 89 da             	mov    %ebx,%r10d
  41b9bb:	44 89 f6             	mov    %r14d,%esi
  41b9be:	4c 89 db             	mov    %r11,%rbx
  41b9c1:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b9c6:	4d 89 eb             	mov    %r13,%r11
  41b9c9:	e9 d2 bb ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b9ce:	41 89 da             	mov    %ebx,%r10d
  41b9d1:	44 89 f6             	mov    %r14d,%esi
  41b9d4:	4c 89 db             	mov    %r11,%rbx
  41b9d7:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b9dc:	4d 89 eb             	mov    %r13,%r11
  41b9df:	e9 bc bb ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b9e4:	41 89 da             	mov    %ebx,%r10d
  41b9e7:	44 89 f6             	mov    %r14d,%esi
  41b9ea:	4c 89 db             	mov    %r11,%rbx
  41b9ed:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41b9f2:	4d 89 eb             	mov    %r13,%r11
  41b9f5:	e9 a6 bb ff ff       	jmpq   4175a0 <inflate+0xf50>
  41b9fa:	41 89 da             	mov    %ebx,%r10d
  41b9fd:	44 89 f6             	mov    %r14d,%esi
  41ba00:	4c 89 db             	mov    %r11,%rbx
  41ba03:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41ba08:	4d 89 eb             	mov    %r13,%r11
  41ba0b:	e9 90 bb ff ff       	jmpq   4175a0 <inflate+0xf50>
    strm->data_type = state->bits + (state->last ? 64 : 0) +
                      (state->mode == TYPE ? 128 : 0);
    if (((in == 0 && out == 0) || flush == Z_FINISH) && ret == Z_OK)
        ret = Z_BUF_ERROR;
    return ret;
}
  41ba10:	e8 ab b4 fe ff       	callq  406ec0 <__stack_chk_fail@plt>
  41ba15:	4c 89 db             	mov    %r11,%rbx
  41ba18:	44 89 f6             	mov    %r14d,%esi
  41ba1b:	41 89 ca             	mov    %ecx,%r10d
  41ba1e:	4d 89 eb             	mov    %r13,%r11
  41ba21:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41ba26:	e9 75 bb ff ff       	jmpq   4175a0 <inflate+0xf50>
  41ba2b:	41 89 da             	mov    %ebx,%r10d
  41ba2e:	44 89 f6             	mov    %r14d,%esi
  41ba31:	4c 89 db             	mov    %r11,%rbx
  41ba34:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41ba39:	4d 89 eb             	mov    %r13,%r11
  41ba3c:	e9 5f bb ff ff       	jmpq   4175a0 <inflate+0xf50>
  41ba41:	4c 89 db             	mov    %r11,%rbx
  41ba44:	41 89 ca             	mov    %ecx,%r10d
  41ba47:	4d 89 eb             	mov    %r13,%r11
  41ba4a:	44 89 ce             	mov    %r9d,%esi
  41ba4d:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41ba52:	e9 49 bb ff ff       	jmpq   4175a0 <inflate+0xf50>
  41ba57:	4c 89 db             	mov    %r11,%rbx
  41ba5a:	41 89 ca             	mov    %ecx,%r10d
  41ba5d:	4d 89 eb             	mov    %r13,%r11
  41ba60:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41ba65:	e9 36 bb ff ff       	jmpq   4175a0 <inflate+0xf50>
  41ba6a:	4c 89 db             	mov    %r11,%rbx
  41ba6d:	41 89 ca             	mov    %ecx,%r10d
  41ba70:	4d 89 eb             	mov    %r13,%r11
  41ba73:	44 89 ce             	mov    %r9d,%esi
  41ba76:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41ba7b:	e9 20 bb ff ff       	jmpq   4175a0 <inflate+0xf50>
  41ba80:	4c 89 db             	mov    %r11,%rbx
  41ba83:	44 89 f6             	mov    %r14d,%esi
  41ba86:	41 89 ca             	mov    %ecx,%r10d
  41ba89:	4d 89 eb             	mov    %r13,%r11
  41ba8c:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41ba91:	e9 0a bb ff ff       	jmpq   4175a0 <inflate+0xf50>
                        len = 0;
                        copy = 11 + BITS(7);
                        DROPBITS(7);
                    }
                    if (state->have + copy > state->nlen + state->ndist) {
                        strm->msg = (char *)"invalid bit length repeat";
  41ba96:	48 8b 6c 24 20       	mov    0x20(%rsp),%rbp
            ret = inflate_table(CODES, state->lens, 19, &(state->next),
                                &(state->lenbits), state->work);
            if (ret) {
                strm->msg = (char *)"invalid code lengths set";
                state->mode = BAD;
                break;
  41ba9b:	41 bc 1b 00 00 00    	mov    $0x1b,%r12d
                        len = 0;
                        copy = 11 + BITS(7);
                        DROPBITS(7);
                    }
                    if (state->have + copy > state->nlen + state->ndist) {
                        strm->msg = (char *)"invalid bit length repeat";
  41baa1:	48 c7 45 30 4c 93 43 	movq   $0x43934c,0x30(%rbp)
  41baa8:	00 
                        state->mode = BAD;
  41baa9:	41 c7 03 1b 00 00 00 	movl   $0x1b,(%r11)
  41bab0:	e9 68 ac ff ff       	jmpq   41671d <inflate+0xcd>
  41bab5:	41 89 da             	mov    %ebx,%r10d
  41bab8:	44 89 f6             	mov    %r14d,%esi
  41babb:	4c 89 db             	mov    %r11,%rbx
  41babe:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41bac3:	4d 89 eb             	mov    %r13,%r11
  41bac6:	e9 d5 ba ff ff       	jmpq   4175a0 <inflate+0xf50>
  41bacb:	41 89 da             	mov    %ebx,%r10d
  41bace:	44 89 f6             	mov    %r14d,%esi
  41bad1:	4c 89 db             	mov    %r11,%rbx
  41bad4:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41bad9:	4d 89 eb             	mov    %r13,%r11
  41badc:	e9 bf ba ff ff       	jmpq   4175a0 <inflate+0xf50>
  41bae1:	4c 89 db             	mov    %r11,%rbx
  41bae4:	44 89 f6             	mov    %r14d,%esi
  41bae7:	41 89 ca             	mov    %ecx,%r10d
  41baea:	4d 89 eb             	mov    %r13,%r11
  41baed:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41baf2:	e9 a9 ba ff ff       	jmpq   4175a0 <inflate+0xf50>
  41baf7:	41 89 da             	mov    %ebx,%r10d
  41bafa:	44 89 f6             	mov    %r14d,%esi
  41bafd:	4c 89 db             	mov    %r11,%rbx
  41bb00:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41bb05:	4d 89 eb             	mov    %r13,%r11
  41bb08:	e9 93 ba ff ff       	jmpq   4175a0 <inflate+0xf50>
  41bb0d:	41 89 da             	mov    %ebx,%r10d
  41bb10:	44 89 f6             	mov    %r14d,%esi
  41bb13:	4c 89 db             	mov    %r11,%rbx
  41bb16:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41bb1b:	4d 89 eb             	mov    %r13,%r11
  41bb1e:	e9 7d ba ff ff       	jmpq   4175a0 <inflate+0xf50>
  41bb23:	41 89 da             	mov    %ebx,%r10d
  41bb26:	44 89 f6             	mov    %r14d,%esi
  41bb29:	4c 89 db             	mov    %r11,%rbx
  41bb2c:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41bb31:	4d 89 eb             	mov    %r13,%r11
  41bb34:	e9 67 ba ff ff       	jmpq   4175a0 <inflate+0xf50>
  41bb39:	41 89 da             	mov    %ebx,%r10d
  41bb3c:	44 89 f6             	mov    %r14d,%esi
  41bb3f:	4c 89 db             	mov    %r11,%rbx
  41bb42:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41bb47:	4d 89 eb             	mov    %r13,%r11
  41bb4a:	e9 51 ba ff ff       	jmpq   4175a0 <inflate+0xf50>
  41bb4f:	4c 89 db             	mov    %r11,%rbx
  41bb52:	44 89 f6             	mov    %r14d,%esi
  41bb55:	41 89 ca             	mov    %ecx,%r10d
  41bb58:	4d 89 eb             	mov    %r13,%r11
  41bb5b:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41bb60:	e9 3b ba ff ff       	jmpq   4175a0 <inflate+0xf50>
  41bb65:	4c 89 db             	mov    %r11,%rbx
  41bb68:	44 89 f6             	mov    %r14d,%esi
  41bb6b:	41 89 ca             	mov    %ecx,%r10d
  41bb6e:	4d 89 eb             	mov    %r13,%r11
  41bb71:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41bb76:	e9 25 ba ff ff       	jmpq   4175a0 <inflate+0xf50>
  41bb7b:	4c 89 db             	mov    %r11,%rbx
  41bb7e:	41 89 ca             	mov    %ecx,%r10d
  41bb81:	4d 89 eb             	mov    %r13,%r11
  41bb84:	44 89 ce             	mov    %r9d,%esi
  41bb87:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41bb8c:	e9 0f ba ff ff       	jmpq   4175a0 <inflate+0xf50>
  41bb91:	41 89 da             	mov    %ebx,%r10d
  41bb94:	44 89 f6             	mov    %r14d,%esi
  41bb97:	4c 89 db             	mov    %r11,%rbx
  41bb9a:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41bb9f:	4d 89 eb             	mov    %r13,%r11
  41bba2:	e9 f9 b9 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41bba7:	41 89 da             	mov    %ebx,%r10d
  41bbaa:	44 89 f6             	mov    %r14d,%esi
  41bbad:	4c 89 db             	mov    %r11,%rbx
  41bbb0:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41bbb5:	4d 89 eb             	mov    %r13,%r11
  41bbb8:	e9 e3 b9 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41bbbd:	41 89 da             	mov    %ebx,%r10d
  41bbc0:	44 89 f6             	mov    %r14d,%esi
  41bbc3:	4c 89 db             	mov    %r11,%rbx
  41bbc6:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41bbcb:	4d 89 eb             	mov    %r13,%r11
  41bbce:	e9 cd b9 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41bbd3:	4c 89 db             	mov    %r11,%rbx
  41bbd6:	41 89 ca             	mov    %ecx,%r10d
  41bbd9:	4d 89 eb             	mov    %r13,%r11
  41bbdc:	44 89 ce             	mov    %r9d,%esi
  41bbdf:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41bbe4:	e9 b7 b9 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41bbe9:	4c 89 db             	mov    %r11,%rbx
  41bbec:	41 89 ca             	mov    %ecx,%r10d
  41bbef:	4d 89 eb             	mov    %r13,%r11
  41bbf2:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41bbf7:	e9 a4 b9 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41bbfc:	41 89 da             	mov    %ebx,%r10d
  41bbff:	44 89 f6             	mov    %r14d,%esi
  41bc02:	4c 89 db             	mov    %r11,%rbx
  41bc05:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41bc0a:	4d 89 eb             	mov    %r13,%r11
  41bc0d:	e9 8e b9 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41bc12:	41 89 da             	mov    %ebx,%r10d
  41bc15:	44 89 f6             	mov    %r14d,%esi
  41bc18:	4c 89 db             	mov    %r11,%rbx
  41bc1b:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41bc20:	4d 89 eb             	mov    %r13,%r11
  41bc23:	e9 78 b9 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41bc28:	4c 89 db             	mov    %r11,%rbx
  41bc2b:	44 89 f6             	mov    %r14d,%esi
  41bc2e:	41 89 ca             	mov    %ecx,%r10d
  41bc31:	4d 89 eb             	mov    %r13,%r11
  41bc34:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41bc39:	e9 62 b9 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41bc3e:	41 89 da             	mov    %ebx,%r10d
  41bc41:	44 89 f6             	mov    %r14d,%esi
  41bc44:	4c 89 db             	mov    %r11,%rbx
  41bc47:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41bc4c:	4d 89 eb             	mov    %r13,%r11
  41bc4f:	e9 4c b9 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41bc54:	41 89 da             	mov    %ebx,%r10d
  41bc57:	44 89 f6             	mov    %r14d,%esi
  41bc5a:	4c 89 db             	mov    %r11,%rbx
  41bc5d:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41bc62:	4d 89 eb             	mov    %r13,%r11
  41bc65:	e9 36 b9 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41bc6a:	41 89 da             	mov    %ebx,%r10d
  41bc6d:	44 89 f6             	mov    %r14d,%esi
  41bc70:	4c 89 db             	mov    %r11,%rbx
  41bc73:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41bc78:	4d 89 eb             	mov    %r13,%r11
  41bc7b:	e9 20 b9 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41bc80:	41 89 da             	mov    %ebx,%r10d
  41bc83:	44 89 f6             	mov    %r14d,%esi
  41bc86:	4c 89 db             	mov    %r11,%rbx
  41bc89:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41bc8e:	4d 89 eb             	mov    %r13,%r11
  41bc91:	e9 0a b9 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41bc96:	41 89 da             	mov    %ebx,%r10d
  41bc99:	44 89 f6             	mov    %r14d,%esi
  41bc9c:	4c 89 db             	mov    %r11,%rbx
  41bc9f:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41bca4:	4d 89 eb             	mov    %r13,%r11
  41bca7:	e9 f4 b8 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41bcac:	4c 89 db             	mov    %r11,%rbx
  41bcaf:	41 89 ca             	mov    %ecx,%r10d
  41bcb2:	4d 89 eb             	mov    %r13,%r11
  41bcb5:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41bcba:	e9 e1 b8 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41bcbf:	4c 89 db             	mov    %r11,%rbx
  41bcc2:	41 89 ca             	mov    %ecx,%r10d
  41bcc5:	4d 89 eb             	mov    %r13,%r11
  41bcc8:	44 89 ce             	mov    %r9d,%esi
  41bccb:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41bcd0:	e9 cb b8 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41bcd5:	4c 89 db             	mov    %r11,%rbx
  41bcd8:	41 89 ca             	mov    %ecx,%r10d
  41bcdb:	4d 89 eb             	mov    %r13,%r11
  41bcde:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41bce3:	e9 b8 b8 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41bce8:	4c 89 db             	mov    %r11,%rbx
  41bceb:	41 89 ca             	mov    %ecx,%r10d
  41bcee:	4d 89 eb             	mov    %r13,%r11
  41bcf1:	44 89 ce             	mov    %r9d,%esi
  41bcf4:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41bcf9:	e9 a2 b8 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41bcfe:	4c 89 db             	mov    %r11,%rbx
  41bd01:	44 89 f6             	mov    %r14d,%esi
  41bd04:	41 89 ca             	mov    %ecx,%r10d
  41bd07:	4d 89 eb             	mov    %r13,%r11
  41bd0a:	4c 8b 74 24 20       	mov    0x20(%rsp),%r14
  41bd0f:	e9 8c b8 ff ff       	jmpq   4175a0 <inflate+0xf50>
  41bd14:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
  41bd1b:	00 00 00 00 00 

000000000041bd20 <inflateEnd>:

int ZEXPORT inflateEnd(strm)
z_streamp strm;
{
    struct inflate_state FAR *state;
    if (strm == Z_NULL || strm->state == Z_NULL || strm->zfree == (free_func)0)
  41bd20:	48 85 ff             	test   %rdi,%rdi
  41bd23:	74 4b                	je     41bd70 <inflateEnd+0x50>
  41bd25:	48 8b 47 38          	mov    0x38(%rdi),%rax
  41bd29:	48 85 c0             	test   %rax,%rax
  41bd2c:	74 42                	je     41bd70 <inflateEnd+0x50>
  41bd2e:	48 8b 57 48          	mov    0x48(%rdi),%rdx
  41bd32:	48 85 d2             	test   %rdx,%rdx
  41bd35:	74 39                	je     41bd70 <inflateEnd+0x50>
    return ret;
}

int ZEXPORT inflateEnd(strm)
z_streamp strm;
{
  41bd37:	53                   	push   %rbx
    struct inflate_state FAR *state;
    if (strm == Z_NULL || strm->state == Z_NULL || strm->zfree == (free_func)0)
        return Z_STREAM_ERROR;
    state = (struct inflate_state FAR *)strm->state;
    if (state->window != Z_NULL) ZFREE(strm, state->window);
  41bd38:	48 8b 70 40          	mov    0x40(%rax),%rsi
  41bd3c:	48 89 fb             	mov    %rdi,%rbx
  41bd3f:	48 85 f6             	test   %rsi,%rsi
  41bd42:	74 0e                	je     41bd52 <inflateEnd+0x32>
  41bd44:	48 8b 7f 50          	mov    0x50(%rdi),%rdi
  41bd48:	ff d2                	callq  *%rdx
  41bd4a:	48 8b 53 48          	mov    0x48(%rbx),%rdx
  41bd4e:	48 8b 43 38          	mov    0x38(%rbx),%rax
    ZFREE(strm, strm->state);
  41bd52:	48 8b 7b 50          	mov    0x50(%rbx),%rdi
  41bd56:	48 89 c6             	mov    %rax,%rsi
  41bd59:	ff d2                	callq  *%rdx
    strm->state = Z_NULL;
  41bd5b:	48 c7 43 38 00 00 00 	movq   $0x0,0x38(%rbx)
  41bd62:	00 
    Tracev((stderr, "inflate: end\n"));
    return Z_OK;
  41bd63:	31 c0                	xor    %eax,%eax
}
  41bd65:	5b                   	pop    %rbx
  41bd66:	c3                   	retq   
  41bd67:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41bd6e:	00 00 
int ZEXPORT inflateEnd(strm)
z_streamp strm;
{
    struct inflate_state FAR *state;
    if (strm == Z_NULL || strm->state == Z_NULL || strm->zfree == (free_func)0)
        return Z_STREAM_ERROR;
  41bd70:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  41bd75:	c3                   	retq   
  41bd76:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41bd7d:	00 00 00 

000000000041bd80 <inflateSetDictionary>:
{
    struct inflate_state FAR *state;
    unsigned long id;

    /* check state */
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  41bd80:	48 85 ff             	test   %rdi,%rdi
  41bd83:	0f 84 1f 02 00 00    	je     41bfa8 <inflateSetDictionary+0x228>

int ZEXPORT inflateSetDictionary(strm, dictionary, dictLength)
z_streamp strm;
const Bytef *dictionary;
uInt dictLength;
{
  41bd89:	41 57                	push   %r15
  41bd8b:	41 56                	push   %r14
  41bd8d:	41 55                	push   %r13
  41bd8f:	41 54                	push   %r12
  41bd91:	55                   	push   %rbp
  41bd92:	53                   	push   %rbx
  41bd93:	48 83 ec 18          	sub    $0x18,%rsp
    struct inflate_state FAR *state;
    unsigned long id;

    /* check state */
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  41bd97:	4c 8b 77 38          	mov    0x38(%rdi),%r14
  41bd9b:	4d 85 f6             	test   %r14,%r14
  41bd9e:	0f 84 0a 02 00 00    	je     41bfae <inflateSetDictionary+0x22e>
    state = (struct inflate_state FAR *)strm->state;
    if (state->wrap != 0 && state->mode != DICT)
  41bda4:	41 8b 46 08          	mov    0x8(%r14),%eax
  41bda8:	89 d5                	mov    %edx,%ebp
  41bdaa:	49 89 f4             	mov    %rsi,%r12
  41bdad:	49 89 ff             	mov    %rdi,%r15
  41bdb0:	85 c0                	test   %eax,%eax
  41bdb2:	0f 85 f8 00 00 00    	jne    41beb0 <inflateSetDictionary+0x130>
        return Z_STREAM_ERROR;

    /* check for correct dictionary id */
    if (state->mode == DICT) {
  41bdb8:	41 83 3e 0a          	cmpl   $0xa,(%r14)
  41bdbc:	0f 84 f9 00 00 00    	je     41bebb <inflateSetDictionary+0x13b>
  41bdc2:	4d 89 f5             	mov    %r14,%r13
    unsigned copy, dist;

    state = (struct inflate_state FAR *)strm->state;

    /* if it hasn't been done already, allocate space for the window */
    if (state->window == Z_NULL) {
  41bdc5:	49 8b 7d 40          	mov    0x40(%r13),%rdi
  41bdc9:	45 31 c9             	xor    %r9d,%r9d
        if (id != state->check)
            return Z_DATA_ERROR;
    }

    /* copy dictionary to window */
    if (updatewindow(strm, strm->avail_out)) {
  41bdcc:	41 8b 5f 20          	mov    0x20(%r15),%ebx
    unsigned copy, dist;

    state = (struct inflate_state FAR *)strm->state;

    /* if it hasn't been done already, allocate space for the window */
    if (state->window == Z_NULL) {
  41bdd0:	48 85 ff             	test   %rdi,%rdi
  41bdd3:	0f 84 9f 01 00 00    	je     41bf78 <inflateSetDictionary+0x1f8>
                               sizeof(unsigned char));
        if (state->window == Z_NULL) return 1;
    }

    /* if window not in use yet, initialize */
    if (state->wsize == 0) {
  41bdd9:	41 8b 75 34          	mov    0x34(%r13),%esi
  41bddd:	85 f6                	test   %esi,%esi
  41bddf:	75 24                	jne    41be05 <inflateSetDictionary+0x85>
        state->wsize = 1U << state->wbits;
  41bde1:	41 8b 4d 30          	mov    0x30(%r13),%ecx
  41bde5:	41 b8 01 00 00 00    	mov    $0x1,%r8d
        state->write = 0;
  41bdeb:	41 c7 45 3c 00 00 00 	movl   $0x0,0x3c(%r13)
  41bdf2:	00 
        state->whave = 0;
  41bdf3:	41 c7 45 38 00 00 00 	movl   $0x0,0x38(%r13)
  41bdfa:	00 
        if (state->window == Z_NULL) return 1;
    }

    /* if window not in use yet, initialize */
    if (state->wsize == 0) {
        state->wsize = 1U << state->wbits;
  41bdfb:	41 d3 e0             	shl    %cl,%r8d
  41bdfe:	44 89 c6             	mov    %r8d,%esi
  41be01:	45 89 45 34          	mov    %r8d,0x34(%r13)
        state->whave = 0;
    }

    /* copy state->wsize or less output bytes into the circular window */
    copy = out - strm->avail_out;
    if (copy >= state->wsize) {
  41be05:	41 39 f1             	cmp    %esi,%r9d
  41be08:	0f 83 02 01 00 00    	jae    41bf10 <inflateSetDictionary+0x190>
        zmemcpy(state->window, strm->next_out - state->wsize, state->wsize);
        state->write = 0;
        state->whave = state->wsize;
    }
    else {
        dist = state->wsize - state->write;
  41be0e:	45 8b 55 3c          	mov    0x3c(%r13),%r10d
        if (dist > copy) dist = copy;
        zmemcpy(state->window + state->write, strm->next_out - copy, dist);
  41be12:	45 89 cb             	mov    %r9d,%r11d
  41be15:	44 89 4c 24 0c       	mov    %r9d,0xc(%rsp)
        zmemcpy(state->window, strm->next_out - state->wsize, state->wsize);
        state->write = 0;
        state->whave = state->wsize;
    }
    else {
        dist = state->wsize - state->write;
  41be1a:	44 29 d6             	sub    %r10d,%esi
  41be1d:	44 39 ce             	cmp    %r9d,%esi
  41be20:	89 f3                	mov    %esi,%ebx
        if (dist > copy) dist = copy;
        zmemcpy(state->window + state->write, strm->next_out - copy, dist);
  41be22:	49 8b 77 18          	mov    0x18(%r15),%rsi
  41be26:	41 0f 47 d9          	cmova  %r9d,%ebx
  41be2a:	4c 01 d7             	add    %r10,%rdi
  41be2d:	89 da                	mov    %ebx,%edx
  41be2f:	4c 29 de             	sub    %r11,%rsi
  41be32:	e8 b9 b1 fe ff       	callq  406ff0 <memcpy@plt>
        copy -= dist;
        if (copy) {
  41be37:	8b 7c 24 0c          	mov    0xc(%rsp),%edi
  41be3b:	29 df                	sub    %ebx,%edi
  41be3d:	0f 85 05 01 00 00    	jne    41bf48 <inflateSetDictionary+0x1c8>
            zmemcpy(state->window, strm->next_out - copy, copy);
            state->write = copy;
            state->whave = state->wsize;
        }
        else {
            state->write += dist;
  41be43:	45 8b 7d 3c          	mov    0x3c(%r13),%r15d
            if (state->write == state->wsize) state->write = 0;
  41be47:	41 8b 45 34          	mov    0x34(%r13),%eax
            zmemcpy(state->window, strm->next_out - copy, copy);
            state->write = copy;
            state->whave = state->wsize;
        }
        else {
            state->write += dist;
  41be4b:	41 01 df             	add    %ebx,%r15d
            if (state->write == state->wsize) state->write = 0;
  41be4e:	41 39 c7             	cmp    %eax,%r15d
            zmemcpy(state->window, strm->next_out - copy, copy);
            state->write = copy;
            state->whave = state->wsize;
        }
        else {
            state->write += dist;
  41be51:	45 89 7d 3c          	mov    %r15d,0x3c(%r13)
            if (state->write == state->wsize) state->write = 0;
  41be55:	0f 84 dd 00 00 00    	je     41bf38 <inflateSetDictionary+0x1b8>
            if (state->whave < state->wsize) state->whave += dist;
  41be5b:	41 8b 55 38          	mov    0x38(%r13),%edx
  41be5f:	39 d0                	cmp    %edx,%eax
  41be61:	76 06                	jbe    41be69 <inflateSetDictionary+0xe9>
  41be63:	01 da                	add    %ebx,%edx
  41be65:	41 89 55 38          	mov    %edx,0x38(%r13)
    /* copy dictionary to window */
    if (updatewindow(strm, strm->avail_out)) {
        state->mode = MEM;
        return Z_MEM_ERROR;
    }
    if (dictLength > state->wsize) {
  41be69:	41 8b 7e 34          	mov    0x34(%r14),%edi
  41be6d:	39 fd                	cmp    %edi,%ebp
  41be6f:	76 7f                	jbe    41bef0 <inflateSetDictionary+0x170>
        zmemcpy(state->window, dictionary + dictLength - state->wsize,
  41be71:	89 fa                	mov    %edi,%edx
  41be73:	89 ed                	mov    %ebp,%ebp
  41be75:	49 8b 7e 40          	mov    0x40(%r14),%rdi
  41be79:	48 29 d5             	sub    %rdx,%rbp
  41be7c:	49 8d 34 2c          	lea    (%r12,%rbp,1),%rsi
  41be80:	e8 6b b1 fe ff       	callq  406ff0 <memcpy@plt>
                state->wsize);
        state->whave = state->wsize;
  41be85:	45 8b 66 34          	mov    0x34(%r14),%r12d
  41be89:	45 89 66 38          	mov    %r12d,0x38(%r14)
    else {
        zmemcpy(state->window + state->wsize - dictLength, dictionary,
                dictLength);
        state->whave = dictLength;
    }
    state->havedict = 1;
  41be8d:	41 c7 46 0c 01 00 00 	movl   $0x1,0xc(%r14)
  41be94:	00 
    Tracev((stderr, "inflate:   dictionary set\n"));
    return Z_OK;
  41be95:	31 c0                	xor    %eax,%eax
}
  41be97:	48 83 c4 18          	add    $0x18,%rsp
  41be9b:	5b                   	pop    %rbx
  41be9c:	5d                   	pop    %rbp
  41be9d:	41 5c                	pop    %r12
  41be9f:	41 5d                	pop    %r13
  41bea1:	41 5e                	pop    %r14
  41bea3:	41 5f                	pop    %r15
  41bea5:	c3                   	retq   
  41bea6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41bead:	00 00 00 
    unsigned long id;

    /* check state */
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
    state = (struct inflate_state FAR *)strm->state;
    if (state->wrap != 0 && state->mode != DICT)
  41beb0:	41 83 3e 0a          	cmpl   $0xa,(%r14)
{
    struct inflate_state FAR *state;
    unsigned long id;

    /* check state */
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  41beb4:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    state = (struct inflate_state FAR *)strm->state;
    if (state->wrap != 0 && state->mode != DICT)
  41beb9:	75 dc                	jne    41be97 <inflateSetDictionary+0x117>
        return Z_STREAM_ERROR;

    /* check for correct dictionary id */
    if (state->mode == DICT) {
        id = adler32(0L, Z_NULL, 0);
  41bebb:	31 d2                	xor    %edx,%edx
  41bebd:	31 f6                	xor    %esi,%esi
  41bebf:	31 ff                	xor    %edi,%edi
  41bec1:	e8 6a 44 00 00       	callq  420330 <adler32>
        id = adler32(id, dictionary, dictLength);
  41bec6:	89 ea                	mov    %ebp,%edx
  41bec8:	4c 89 e6             	mov    %r12,%rsi
  41becb:	48 89 c7             	mov    %rax,%rdi
  41bece:	e8 5d 44 00 00       	callq  420330 <adler32>
  41bed3:	48 89 c2             	mov    %rax,%rdx
        if (id != state->check)
  41bed6:	49 39 56 18          	cmp    %rdx,0x18(%r14)
            return Z_DATA_ERROR;
  41beda:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax

    /* check for correct dictionary id */
    if (state->mode == DICT) {
        id = adler32(0L, Z_NULL, 0);
        id = adler32(id, dictionary, dictLength);
        if (id != state->check)
  41bedf:	75 b6                	jne    41be97 <inflateSetDictionary+0x117>
  41bee1:	4d 8b 6f 38          	mov    0x38(%r15),%r13
  41bee5:	e9 db fe ff ff       	jmpq   41bdc5 <inflateSetDictionary+0x45>
  41beea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        zmemcpy(state->window, dictionary + dictLength - state->wsize,
                state->wsize);
        state->whave = state->wsize;
    }
    else {
        zmemcpy(state->window + state->wsize - dictLength, dictionary,
  41bef0:	89 ea                	mov    %ebp,%edx
  41bef2:	4c 89 e6             	mov    %r12,%rsi
  41bef5:	48 29 d7             	sub    %rdx,%rdi
  41bef8:	49 03 7e 40          	add    0x40(%r14),%rdi
  41befc:	e8 ef b0 fe ff       	callq  406ff0 <memcpy@plt>
                dictLength);
        state->whave = dictLength;
  41bf01:	41 89 6e 38          	mov    %ebp,0x38(%r14)
  41bf05:	eb 86                	jmp    41be8d <inflateSetDictionary+0x10d>
  41bf07:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41bf0e:	00 00 
    }

    /* copy state->wsize or less output bytes into the circular window */
    copy = out - strm->avail_out;
    if (copy >= state->wsize) {
        zmemcpy(state->window, strm->next_out - state->wsize, state->wsize);
  41bf10:	89 f2                	mov    %esi,%edx
  41bf12:	49 8b 77 18          	mov    0x18(%r15),%rsi
  41bf16:	48 29 d6             	sub    %rdx,%rsi
  41bf19:	e8 d2 b0 fe ff       	callq  406ff0 <memcpy@plt>
        state->write = 0;
        state->whave = state->wsize;
  41bf1e:	45 8b 45 34          	mov    0x34(%r13),%r8d

    /* copy state->wsize or less output bytes into the circular window */
    copy = out - strm->avail_out;
    if (copy >= state->wsize) {
        zmemcpy(state->window, strm->next_out - state->wsize, state->wsize);
        state->write = 0;
  41bf22:	41 c7 45 3c 00 00 00 	movl   $0x0,0x3c(%r13)
  41bf29:	00 
        state->whave = state->wsize;
  41bf2a:	45 89 45 38          	mov    %r8d,0x38(%r13)
  41bf2e:	e9 36 ff ff ff       	jmpq   41be69 <inflateSetDictionary+0xe9>
  41bf33:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
            state->write = copy;
            state->whave = state->wsize;
        }
        else {
            state->write += dist;
            if (state->write == state->wsize) state->write = 0;
  41bf38:	41 c7 45 3c 00 00 00 	movl   $0x0,0x3c(%r13)
  41bf3f:	00 
  41bf40:	e9 16 ff ff ff       	jmpq   41be5b <inflateSetDictionary+0xdb>
  41bf45:	0f 1f 00             	nopl   (%rax)
        dist = state->wsize - state->write;
        if (dist > copy) dist = copy;
        zmemcpy(state->window + state->write, strm->next_out - copy, dist);
        copy -= dist;
        if (copy) {
            zmemcpy(state->window, strm->next_out - copy, copy);
  41bf48:	49 8b 77 18          	mov    0x18(%r15),%rsi
  41bf4c:	89 fa                	mov    %edi,%edx
  41bf4e:	89 7c 24 0c          	mov    %edi,0xc(%rsp)
  41bf52:	49 8b 7d 40          	mov    0x40(%r13),%rdi
  41bf56:	48 29 d6             	sub    %rdx,%rsi
  41bf59:	e8 92 b0 fe ff       	callq  406ff0 <memcpy@plt>
            state->write = copy;
  41bf5e:	44 8b 4c 24 0c       	mov    0xc(%rsp),%r9d
            state->whave = state->wsize;
  41bf63:	41 8b 4d 34          	mov    0x34(%r13),%ecx
        if (dist > copy) dist = copy;
        zmemcpy(state->window + state->write, strm->next_out - copy, dist);
        copy -= dist;
        if (copy) {
            zmemcpy(state->window, strm->next_out - copy, copy);
            state->write = copy;
  41bf67:	45 89 4d 3c          	mov    %r9d,0x3c(%r13)
            state->whave = state->wsize;
  41bf6b:	41 89 4d 38          	mov    %ecx,0x38(%r13)
  41bf6f:	e9 f5 fe ff ff       	jmpq   41be69 <inflateSetDictionary+0xe9>
  41bf74:	0f 1f 40 00          	nopl   0x0(%rax)
    state = (struct inflate_state FAR *)strm->state;

    /* if it hasn't been done already, allocate space for the window */
    if (state->window == Z_NULL) {
        state->window = (unsigned char FAR *)
                        ZALLOC(strm, 1U << state->wbits,
  41bf78:	41 8b 4d 30          	mov    0x30(%r13),%ecx
  41bf7c:	be 01 00 00 00       	mov    $0x1,%esi
  41bf81:	49 8b 7f 50          	mov    0x50(%r15),%rdi
  41bf85:	ba 01 00 00 00       	mov    $0x1,%edx
  41bf8a:	d3 e6                	shl    %cl,%esi
  41bf8c:	41 ff 57 40          	callq  *0x40(%r15)
                               sizeof(unsigned char));
        if (state->window == Z_NULL) return 1;
  41bf90:	48 85 c0             	test   %rax,%rax

    state = (struct inflate_state FAR *)strm->state;

    /* if it hasn't been done already, allocate space for the window */
    if (state->window == Z_NULL) {
        state->window = (unsigned char FAR *)
  41bf93:	49 89 45 40          	mov    %rax,0x40(%r13)
                        ZALLOC(strm, 1U << state->wbits,
                               sizeof(unsigned char));
        if (state->window == Z_NULL) return 1;
  41bf97:	74 1f                	je     41bfb8 <inflateSetDictionary+0x238>
  41bf99:	41 2b 5f 20          	sub    0x20(%r15),%ebx
  41bf9d:	48 89 c7             	mov    %rax,%rdi
  41bfa0:	41 89 d9             	mov    %ebx,%r9d
  41bfa3:	e9 31 fe ff ff       	jmpq   41bdd9 <inflateSetDictionary+0x59>
{
    struct inflate_state FAR *state;
    unsigned long id;

    /* check state */
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  41bfa8:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
        state->whave = dictLength;
    }
    state->havedict = 1;
    Tracev((stderr, "inflate:   dictionary set\n"));
    return Z_OK;
}
  41bfad:	c3                   	retq   
{
    struct inflate_state FAR *state;
    unsigned long id;

    /* check state */
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  41bfae:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  41bfb3:	e9 df fe ff ff       	jmpq   41be97 <inflateSetDictionary+0x117>
            return Z_DATA_ERROR;
    }

    /* copy dictionary to window */
    if (updatewindow(strm, strm->avail_out)) {
        state->mode = MEM;
  41bfb8:	41 c7 06 1c 00 00 00 	movl   $0x1c,(%r14)
        return Z_MEM_ERROR;
  41bfbf:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  41bfc4:	e9 ce fe ff ff       	jmpq   41be97 <inflateSetDictionary+0x117>
  41bfc9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000041bfd0 <inflateGetHeader>:
gz_headerp head;
{
    struct inflate_state FAR *state;

    /* check state */
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  41bfd0:	48 85 ff             	test   %rdi,%rdi
  41bfd3:	74 23                	je     41bff8 <inflateGetHeader+0x28>
  41bfd5:	48 8b 47 38          	mov    0x38(%rdi),%rax
  41bfd9:	48 85 c0             	test   %rax,%rax
  41bfdc:	74 1a                	je     41bff8 <inflateGetHeader+0x28>
    state = (struct inflate_state FAR *)strm->state;
    if ((state->wrap & 2) == 0) return Z_STREAM_ERROR;
  41bfde:	f6 40 08 02          	testb  $0x2,0x8(%rax)
  41bfe2:	74 14                	je     41bff8 <inflateGetHeader+0x28>

    /* save header structure */
    state->head = head;
  41bfe4:	48 89 70 28          	mov    %rsi,0x28(%rax)
    head->done = 0;
  41bfe8:	c7 46 48 00 00 00 00 	movl   $0x0,0x48(%rsi)
    return Z_OK;
  41bfef:	31 c0                	xor    %eax,%eax
  41bff1:	c3                   	retq   
  41bff2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
gz_headerp head;
{
    struct inflate_state FAR *state;

    /* check state */
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  41bff8:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax

    /* save header structure */
    state->head = head;
    head->done = 0;
    return Z_OK;
}
  41bffd:	c3                   	retq   
  41bffe:	66 90                	xchg   %ax,%ax

000000000041c000 <inflateSync>:
    return next;
}

int ZEXPORT inflateSync(strm)
z_streamp strm;
{
  41c000:	53                   	push   %rbx
  41c001:	48 83 ec 10          	sub    $0x10,%rsp
  41c005:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  41c00c:	00 00 
  41c00e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41c013:	31 c0                	xor    %eax,%eax
    unsigned long in, out;      /* temporary to save total_in and total_out */
    unsigned char buf[4];       /* to restore bit buffer to byte string */
    struct inflate_state FAR *state;

    /* check parameters */
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  41c015:	48 85 ff             	test   %rdi,%rdi
  41c018:	0f 84 8c 04 00 00    	je     41c4aa <inflateSync+0x4aa>
  41c01e:	48 8b 77 38          	mov    0x38(%rdi),%rsi
  41c022:	48 85 f6             	test   %rsi,%rsi
  41c025:	0f 84 7f 04 00 00    	je     41c4aa <inflateSync+0x4aa>
    state = (struct inflate_state FAR *)strm->state;
    if (strm->avail_in == 0 && state->bits < 8) return Z_BUF_ERROR;
  41c02b:	44 8b 5f 08          	mov    0x8(%rdi),%r11d
  41c02f:	45 85 db             	test   %r11d,%r11d
  41c032:	0f 84 40 03 00 00    	je     41c378 <inflateSync+0x378>

    /* if first time, start search in bit buffer */
    if (state->mode != SYNC) {
  41c038:	83 3e 1d             	cmpl   $0x1d,(%rsi)
  41c03b:	0f 84 ff 03 00 00    	je     41c440 <inflateSync+0x440>
        state->mode = SYNC;
        state->hold <<= state->bits & 7;
  41c041:	8b 46 50             	mov    0x50(%rsi),%eax
  41c044:	48 8b 56 48          	mov    0x48(%rsi),%rdx
    state = (struct inflate_state FAR *)strm->state;
    if (strm->avail_in == 0 && state->bits < 8) return Z_BUF_ERROR;

    /* if first time, start search in bit buffer */
    if (state->mode != SYNC) {
        state->mode = SYNC;
  41c048:	c7 06 1d 00 00 00    	movl   $0x1d,(%rsi)
        state->hold <<= state->bits & 7;
  41c04e:	89 c1                	mov    %eax,%ecx
        state->bits -= state->bits & 7;
  41c050:	83 e0 f8             	and    $0xfffffff8,%eax
    if (strm->avail_in == 0 && state->bits < 8) return Z_BUF_ERROR;

    /* if first time, start search in bit buffer */
    if (state->mode != SYNC) {
        state->mode = SYNC;
        state->hold <<= state->bits & 7;
  41c053:	83 e1 07             	and    $0x7,%ecx
        state->bits -= state->bits & 7;
  41c056:	89 46 50             	mov    %eax,0x50(%rsi)
    if (strm->avail_in == 0 && state->bits < 8) return Z_BUF_ERROR;

    /* if first time, start search in bit buffer */
    if (state->mode != SYNC) {
        state->mode = SYNC;
        state->hold <<= state->bits & 7;
  41c059:	48 d3 e2             	shl    %cl,%rdx
        state->bits -= state->bits & 7;
        len = 0;
        while (state->bits >= 8) {
  41c05c:	83 f8 07             	cmp    $0x7,%eax
    if (strm->avail_in == 0 && state->bits < 8) return Z_BUF_ERROR;

    /* if first time, start search in bit buffer */
    if (state->mode != SYNC) {
        state->mode = SYNC;
        state->hold <<= state->bits & 7;
  41c05f:	48 89 56 48          	mov    %rdx,0x48(%rsi)
        state->bits -= state->bits & 7;
        len = 0;
        while (state->bits >= 8) {
  41c063:	0f 86 27 04 00 00    	jbe    41c490 <inflateSync+0x490>
            buf[len++] = (unsigned char)(state->hold);
            state->hold >>= 8;
            state->bits -= 8;
  41c069:	8d 58 f8             	lea    -0x8(%rax),%ebx
        state->hold <<= state->bits & 7;
        state->bits -= state->bits & 7;
        len = 0;
        while (state->bits >= 8) {
            buf[len++] = (unsigned char)(state->hold);
            state->hold >>= 8;
  41c06c:	49 89 d0             	mov    %rdx,%r8
        state->mode = SYNC;
        state->hold <<= state->bits & 7;
        state->bits -= state->bits & 7;
        len = 0;
        while (state->bits >= 8) {
            buf[len++] = (unsigned char)(state->hold);
  41c06f:	88 14 24             	mov    %dl,(%rsp)
            state->hold >>= 8;
  41c072:	49 c1 e8 08          	shr    $0x8,%r8
    if (state->mode != SYNC) {
        state->mode = SYNC;
        state->hold <<= state->bits & 7;
        state->bits -= state->bits & 7;
        len = 0;
        while (state->bits >= 8) {
  41c076:	83 fb 07             	cmp    $0x7,%ebx
  41c079:	76 36                	jbe    41c0b1 <inflateSync+0xb1>
            buf[len++] = (unsigned char)(state->hold);
            state->hold >>= 8;
            state->bits -= 8;
  41c07b:	44 8d 48 f0          	lea    -0x10(%rax),%r9d
        state->mode = SYNC;
        state->hold <<= state->bits & 7;
        state->bits -= state->bits & 7;
        len = 0;
        while (state->bits >= 8) {
            buf[len++] = (unsigned char)(state->hold);
  41c07f:	44 88 44 24 01       	mov    %r8b,0x1(%rsp)
            state->hold >>= 8;
  41c084:	49 89 d0             	mov    %rdx,%r8
  41c087:	49 c1 e8 10          	shr    $0x10,%r8
    if (state->mode != SYNC) {
        state->mode = SYNC;
        state->hold <<= state->bits & 7;
        state->bits -= state->bits & 7;
        len = 0;
        while (state->bits >= 8) {
  41c08b:	41 83 f9 07          	cmp    $0x7,%r9d
  41c08f:	76 20                	jbe    41c0b1 <inflateSync+0xb1>
            buf[len++] = (unsigned char)(state->hold);
  41c091:	44 88 44 24 02       	mov    %r8b,0x2(%rsp)
            state->hold >>= 8;
            state->bits -= 8;
  41c096:	83 e8 18             	sub    $0x18,%eax
        state->hold <<= state->bits & 7;
        state->bits -= state->bits & 7;
        len = 0;
        while (state->bits >= 8) {
            buf[len++] = (unsigned char)(state->hold);
            state->hold >>= 8;
  41c099:	49 89 d0             	mov    %rdx,%r8
  41c09c:	49 c1 e8 18          	shr    $0x18,%r8
    if (state->mode != SYNC) {
        state->mode = SYNC;
        state->hold <<= state->bits & 7;
        state->bits -= state->bits & 7;
        len = 0;
        while (state->bits >= 8) {
  41c0a0:	83 f8 07             	cmp    $0x7,%eax
  41c0a3:	76 0c                	jbe    41c0b1 <inflateSync+0xb1>
            buf[len++] = (unsigned char)(state->hold);
            state->hold >>= 8;
  41c0a5:	48 c1 ea 20          	shr    $0x20,%rdx
        state->mode = SYNC;
        state->hold <<= state->bits & 7;
        state->bits -= state->bits & 7;
        len = 0;
        while (state->bits >= 8) {
            buf[len++] = (unsigned char)(state->hold);
  41c0a9:	44 88 44 24 03       	mov    %r8b,0x3(%rsp)
            state->hold >>= 8;
  41c0ae:	49 89 d0             	mov    %rdx,%r8
    unsigned next;

    got = *have;
    next = 0;
    while (next < len && got < 4) {
        if ((int)(buf[next]) == (got < 2 ? 0 : 0xff))
  41c0b1:	0f b6 04 24          	movzbl (%rsp),%eax
  41c0b5:	41 89 db             	mov    %ebx,%r11d
  41c0b8:	4c 89 46 48          	mov    %r8,0x48(%rsi)
  41c0bc:	41 c1 eb 03          	shr    $0x3,%r11d
  41c0c0:	c7 46 50 00 00 00 00 	movl   $0x0,0x50(%rsi)
            got++;
        else if (buf[next])
            got = 0;
        else
            got = 4 - got;
  41c0c7:	41 ba 04 00 00 00    	mov    $0x4,%r10d
  41c0cd:	45 8d 4b 01          	lea    0x1(%r11),%r9d
  41c0d1:	41 83 e3 01          	and    $0x1,%r11d
  41c0d5:	44 89 db             	mov    %r11d,%ebx
    unsigned next;

    got = *have;
    next = 0;
    while (next < len && got < 4) {
        if ((int)(buf[next]) == (got < 2 ? 0 : 0xff))
  41c0d8:	84 c0                	test   %al,%al
  41c0da:	0f 84 a0 03 00 00    	je     41c480 <inflateSync+0x480>
            got++;
        else if (buf[next])
            got = 0;
        else
            got = 4 - got;
  41c0e0:	3c 01                	cmp    $0x1,%al
  41c0e2:	19 d2                	sbb    %edx,%edx
  41c0e4:	83 e2 04             	and    $0x4,%edx
  41c0e7:	3c 01                	cmp    $0x1,%al
  41c0e9:	19 c9                	sbb    %ecx,%ecx
  41c0eb:	83 c1 01             	add    $0x1,%ecx
    unsigned got;
    unsigned next;

    got = *have;
    next = 0;
    while (next < len && got < 4) {
  41c0ee:	84 c9                	test   %cl,%cl
            got++;
        else if (buf[next])
            got = 0;
        else
            got = 4 - got;
        next++;
  41c0f0:	41 bb 01 00 00 00    	mov    $0x1,%r11d
    unsigned got;
    unsigned next;

    got = *have;
    next = 0;
    while (next < len && got < 4) {
  41c0f6:	0f 84 9c 00 00 00    	je     41c198 <inflateSync+0x198>
  41c0fc:	45 39 cb             	cmp    %r9d,%r11d
  41c0ff:	0f 83 93 00 00 00    	jae    41c198 <inflateSync+0x198>
  41c105:	85 db                	test   %ebx,%ebx
  41c107:	74 23                	je     41c12c <inflateSync+0x12c>
        if ((int)(buf[next]) == (got < 2 ? 0 : 0xff))
  41c109:	44 0f b6 44 24 01    	movzbl 0x1(%rsp),%r8d
  41c10f:	eb 59                	jmp    41c16a <inflateSync+0x16a>
  41c111:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            got++;
        else if (buf[next])
  41c118:	b9 01 00 00 00       	mov    $0x1,%ecx
            got = 0;
  41c11d:	31 d2                	xor    %edx,%edx
        else
            got = 4 - got;
        next++;
  41c11f:	41 83 c3 01          	add    $0x1,%r11d
    unsigned got;
    unsigned next;

    got = *have;
    next = 0;
    while (next < len && got < 4) {
  41c123:	84 c9                	test   %cl,%cl
  41c125:	74 71                	je     41c198 <inflateSync+0x198>
  41c127:	45 39 cb             	cmp    %r9d,%r11d
  41c12a:	73 6c                	jae    41c198 <inflateSync+0x198>
        if ((int)(buf[next]) == (got < 2 ? 0 : 0xff))
  41c12c:	44 89 d8             	mov    %r11d,%eax
  41c12f:	83 fa 02             	cmp    $0x2,%edx
  41c132:	44 0f b6 04 04       	movzbl (%rsp,%rax,1),%r8d
  41c137:	19 db                	sbb    %ebx,%ebx
  41c139:	f7 d3                	not    %ebx
  41c13b:	41 38 d8             	cmp    %bl,%r8b
  41c13e:	0f 84 6c 02 00 00    	je     41c3b0 <inflateSync+0x3b0>
            got++;
        else if (buf[next])
  41c144:	45 84 c0             	test   %r8b,%r8b
  41c147:	0f 85 43 02 00 00    	jne    41c390 <inflateSync+0x390>
            got = 0;
        else
            got = 4 - got;
  41c14d:	44 89 d1             	mov    %r10d,%ecx
  41c150:	29 d1                	sub    %edx,%ecx
  41c152:	83 f9 03             	cmp    $0x3,%ecx
  41c155:	89 ca                	mov    %ecx,%edx
  41c157:	0f 96 c1             	setbe  %cl
        next++;
  41c15a:	41 83 c3 01          	add    $0x1,%r11d
    unsigned got;
    unsigned next;

    got = *have;
    next = 0;
    while (next < len && got < 4) {
  41c15e:	84 c9                	test   %cl,%cl
  41c160:	74 36                	je     41c198 <inflateSync+0x198>
        if ((int)(buf[next]) == (got < 2 ? 0 : 0xff))
  41c162:	44 89 d8             	mov    %r11d,%eax
  41c165:	44 0f b6 04 04       	movzbl (%rsp,%rax,1),%r8d
  41c16a:	83 fa 02             	cmp    $0x2,%edx
  41c16d:	19 c9                	sbb    %ecx,%ecx
  41c16f:	f7 d1                	not    %ecx
  41c171:	41 38 c8             	cmp    %cl,%r8b
  41c174:	0f 84 26 02 00 00    	je     41c3a0 <inflateSync+0x3a0>
            got++;
        else if (buf[next])
  41c17a:	45 84 c0             	test   %r8b,%r8b
  41c17d:	75 99                	jne    41c118 <inflateSync+0x118>
            got = 0;
        else
            got = 4 - got;
  41c17f:	44 89 d3             	mov    %r10d,%ebx
  41c182:	29 d3                	sub    %edx,%ebx
  41c184:	83 fb 03             	cmp    $0x3,%ebx
  41c187:	89 da                	mov    %ebx,%edx
  41c189:	0f 96 c1             	setbe  %cl
        next++;
  41c18c:	41 83 c3 01          	add    $0x1,%r11d
    unsigned got;
    unsigned next;

    got = *have;
    next = 0;
    while (next < len && got < 4) {
  41c190:	84 c9                	test   %cl,%cl
  41c192:	75 93                	jne    41c127 <inflateSync+0x127>
  41c194:	0f 1f 40 00          	nopl   0x0(%rax)
            got = 0;
        else
            got = 4 - got;
        next++;
    }
    *have = got;
  41c198:	89 96 84 00 00 00    	mov    %edx,0x84(%rsi)
  41c19e:	44 8b 5f 08          	mov    0x8(%rdi),%r11d
    unsigned got;
    unsigned next;

    got = *have;
    next = 0;
    while (next < len && got < 4) {
  41c1a2:	45 85 db             	test   %r11d,%r11d
        state->have = 0;
        syncsearch(&(state->have), buf, len);
    }

    /* search available input */
    len = syncsearch(&(state->have), strm->next_in, strm->avail_in);
  41c1a5:	4c 8b 0f             	mov    (%rdi),%r9
    unsigned got;
    unsigned next;

    got = *have;
    next = 0;
    while (next < len && got < 4) {
  41c1a8:	41 0f 95 c2          	setne  %r10b
  41c1ac:	44 20 d1             	and    %r10b,%cl
  41c1af:	0f 84 eb 02 00 00    	je     41c4a0 <inflateSync+0x4a0>
  41c1b5:	41 8d 43 ff          	lea    -0x1(%r11),%eax
        if ((int)(buf[next]) == (got < 2 ? 0 : 0xff))
  41c1b9:	45 0f b6 11          	movzbl (%r9),%r10d
            got++;
        else if (buf[next])
            got = 0;
        else
            got = 4 - got;
  41c1bd:	bb 04 00 00 00       	mov    $0x4,%ebx
  41c1c2:	83 e0 01             	and    $0x1,%eax
    unsigned next;

    got = *have;
    next = 0;
    while (next < len && got < 4) {
        if ((int)(buf[next]) == (got < 2 ? 0 : 0xff))
  41c1c5:	83 fa 02             	cmp    $0x2,%edx
  41c1c8:	41 89 c0             	mov    %eax,%r8d
  41c1cb:	19 c0                	sbb    %eax,%eax
  41c1cd:	f7 d0                	not    %eax
  41c1cf:	41 38 c2             	cmp    %al,%r10b
  41c1d2:	0f 84 80 02 00 00    	je     41c458 <inflateSync+0x458>
            got++;
        else if (buf[next])
  41c1d8:	45 84 d2             	test   %r10b,%r10b
  41c1db:	0f 84 1f 02 00 00    	je     41c400 <inflateSync+0x400>
  41c1e1:	41 89 ca             	mov    %ecx,%r10d
            got = 0;
  41c1e4:	31 d2                	xor    %edx,%edx
    unsigned got;
    unsigned next;

    got = *have;
    next = 0;
    while (next < len && got < 4) {
  41c1e6:	45 84 d2             	test   %r10b,%r10b
            got++;
        else if (buf[next])
            got = 0;
        else
            got = 4 - got;
        next++;
  41c1e9:	b8 01 00 00 00       	mov    $0x1,%eax
    unsigned got;
    unsigned next;

    got = *have;
    next = 0;
    while (next < len && got < 4) {
  41c1ee:	0f 84 cc 00 00 00    	je     41c2c0 <inflateSync+0x2c0>
  41c1f4:	44 39 d8             	cmp    %r11d,%eax
  41c1f7:	0f 83 c3 00 00 00    	jae    41c2c0 <inflateSync+0x2c0>
  41c1fd:	45 85 c0             	test   %r8d,%r8d
  41c200:	0f 84 88 00 00 00    	je     41c28e <inflateSync+0x28e>
        if ((int)(buf[next]) == (got < 2 ? 0 : 0xff))
  41c206:	45 0f b6 51 01       	movzbl 0x1(%r9),%r10d
  41c20b:	83 fa 02             	cmp    $0x2,%edx
  41c20e:	45 19 c0             	sbb    %r8d,%r8d
  41c211:	41 f7 d0             	not    %r8d
  41c214:	45 38 c2             	cmp    %r8b,%r10b
  41c217:	0f 84 53 02 00 00    	je     41c470 <inflateSync+0x470>
            got++;
        else if (buf[next])
  41c21d:	45 84 d2             	test   %r10b,%r10b
  41c220:	0f 84 fa 01 00 00    	je     41c420 <inflateSync+0x420>
  41c226:	41 89 c8             	mov    %ecx,%r8d
            got = 0;
  41c229:	31 d2                	xor    %edx,%edx
        else
            got = 4 - got;
        next++;
  41c22b:	83 c0 01             	add    $0x1,%eax
    unsigned got;
    unsigned next;

    got = *have;
    next = 0;
    while (next < len && got < 4) {
  41c22e:	45 84 c0             	test   %r8b,%r8b
  41c231:	75 56                	jne    41c289 <inflateSync+0x289>
  41c233:	e9 88 00 00 00       	jmpq   41c2c0 <inflateSync+0x2c0>
  41c238:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41c23f:	00 
        if ((int)(buf[next]) == (got < 2 ? 0 : 0xff))
            got++;
        else if (buf[next])
            got = 0;
        else
            got = 4 - got;
  41c240:	41 89 da             	mov    %ebx,%r10d
  41c243:	41 29 d2             	sub    %edx,%r10d
  41c246:	41 83 fa 03          	cmp    $0x3,%r10d
  41c24a:	44 89 d2             	mov    %r10d,%edx
  41c24d:	41 0f 96 c2          	setbe  %r10b
        next++;
  41c251:	44 8d 40 01          	lea    0x1(%rax),%r8d
    unsigned got;
    unsigned next;

    got = *have;
    next = 0;
    while (next < len && got < 4) {
  41c255:	45 84 d2             	test   %r10b,%r10b
            got++;
        else if (buf[next])
            got = 0;
        else
            got = 4 - got;
        next++;
  41c258:	44 89 c0             	mov    %r8d,%eax
    unsigned got;
    unsigned next;

    got = *have;
    next = 0;
    while (next < len && got < 4) {
  41c25b:	74 63                	je     41c2c0 <inflateSync+0x2c0>
        if ((int)(buf[next]) == (got < 2 ? 0 : 0xff))
  41c25d:	45 0f b6 14 01       	movzbl (%r9,%rax,1),%r10d
  41c262:	83 fa 02             	cmp    $0x2,%edx
  41c265:	19 c0                	sbb    %eax,%eax
  41c267:	f7 d0                	not    %eax
  41c269:	41 38 c2             	cmp    %al,%r10b
  41c26c:	0f 84 7e 01 00 00    	je     41c3f0 <inflateSync+0x3f0>
            got++;
        else if (buf[next])
  41c272:	45 84 d2             	test   %r10b,%r10b
  41c275:	0f 84 45 01 00 00    	je     41c3c0 <inflateSync+0x3c0>
  41c27b:	41 89 ca             	mov    %ecx,%r10d
            got = 0;
  41c27e:	31 d2                	xor    %edx,%edx
    unsigned got;
    unsigned next;

    got = *have;
    next = 0;
    while (next < len && got < 4) {
  41c280:	45 84 d2             	test   %r10b,%r10b
            got++;
        else if (buf[next])
            got = 0;
        else
            got = 4 - got;
        next++;
  41c283:	41 8d 40 01          	lea    0x1(%r8),%eax
    unsigned got;
    unsigned next;

    got = *have;
    next = 0;
    while (next < len && got < 4) {
  41c287:	74 37                	je     41c2c0 <inflateSync+0x2c0>
  41c289:	44 39 d8             	cmp    %r11d,%eax
  41c28c:	73 32                	jae    41c2c0 <inflateSync+0x2c0>
        if ((int)(buf[next]) == (got < 2 ? 0 : 0xff))
  41c28e:	41 89 c2             	mov    %eax,%r10d
  41c291:	83 fa 02             	cmp    $0x2,%edx
  41c294:	47 0f b6 14 11       	movzbl (%r9,%r10,1),%r10d
  41c299:	45 19 c0             	sbb    %r8d,%r8d
  41c29c:	41 f7 d0             	not    %r8d
  41c29f:	45 38 c2             	cmp    %r8b,%r10b
  41c2a2:	0f 84 38 01 00 00    	je     41c3e0 <inflateSync+0x3e0>
            got++;
        else if (buf[next])
  41c2a8:	45 84 d2             	test   %r10b,%r10b
  41c2ab:	74 93                	je     41c240 <inflateSync+0x240>
  41c2ad:	41 89 ca             	mov    %ecx,%r10d
            got = 0;
        else
            got = 4 - got;
        next++;
  41c2b0:	44 8d 40 01          	lea    0x1(%rax),%r8d
    next = 0;
    while (next < len && got < 4) {
        if ((int)(buf[next]) == (got < 2 ? 0 : 0xff))
            got++;
        else if (buf[next])
            got = 0;
  41c2b4:	31 d2                	xor    %edx,%edx
    unsigned got;
    unsigned next;

    got = *have;
    next = 0;
    while (next < len && got < 4) {
  41c2b6:	45 84 d2             	test   %r10b,%r10b
            got++;
        else if (buf[next])
            got = 0;
        else
            got = 4 - got;
        next++;
  41c2b9:	44 89 c0             	mov    %r8d,%eax
    unsigned got;
    unsigned next;

    got = *have;
    next = 0;
    while (next < len && got < 4) {
  41c2bc:	75 9f                	jne    41c25d <inflateSync+0x25d>
  41c2be:	66 90                	xchg   %ax,%ax
  41c2c0:	41 89 c0             	mov    %eax,%r8d
            got = 0;
        else
            got = 4 - got;
        next++;
    }
    *have = got;
  41c2c3:	89 96 84 00 00 00    	mov    %edx,0x84(%rsi)
    }

    /* search available input */
    len = syncsearch(&(state->have), strm->next_in, strm->avail_in);
    strm->avail_in -= len;
    strm->next_in += len;
  41c2c9:	4d 01 c1             	add    %r8,%r9
        syncsearch(&(state->have), buf, len);
    }

    /* search available input */
    len = syncsearch(&(state->have), strm->next_in, strm->avail_in);
    strm->avail_in -= len;
  41c2cc:	29 47 08             	sub    %eax,0x8(%rdi)
    strm->next_in += len;
    strm->total_in += len;
  41c2cf:	4c 01 47 10          	add    %r8,0x10(%rdi)

    /* return no joy or set up to restart inflate() on a new block */
    if (state->have != 4) return Z_DATA_ERROR;
  41c2d3:	83 fa 04             	cmp    $0x4,%edx
    }

    /* search available input */
    len = syncsearch(&(state->have), strm->next_in, strm->avail_in);
    strm->avail_in -= len;
    strm->next_in += len;
  41c2d6:	4c 89 0f             	mov    %r9,(%rdi)
    strm->total_in += len;

    /* return no joy or set up to restart inflate() on a new block */
    if (state->have != 4) return Z_DATA_ERROR;
  41c2d9:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  41c2de:	75 77                	jne    41c357 <inflateSync+0x357>
{
    struct inflate_state FAR *state;

    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
    state = (struct inflate_state FAR *)strm->state;
    strm->total_in = strm->total_out = state->total = 0;
  41c2e0:	48 c7 46 20 00 00 00 	movq   $0x0,0x20(%rsi)
  41c2e7:	00 
    if (state->have != 4) return Z_DATA_ERROR;
    in = strm->total_in;  out = strm->total_out;
    inflateReset(strm);
    strm->total_in = in;  strm->total_out = out;
    state->mode = TYPE;
    return Z_OK;
  41c2e8:	31 c0                	xor    %eax,%eax
    struct inflate_state FAR *state;

    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
    state = (struct inflate_state FAR *)strm->state;
    strm->total_in = strm->total_out = state->total = 0;
    strm->msg = Z_NULL;
  41c2ea:	48 c7 47 30 00 00 00 	movq   $0x0,0x30(%rdi)
  41c2f1:	00 
    strm->adler = 1;        /* to support ill-conceived Java test suite */
  41c2f2:	48 c7 47 60 01 00 00 	movq   $0x1,0x60(%rdi)
  41c2f9:	00 
    state->wsize = 0;
    state->whave = 0;
    state->write = 0;
    state->hold = 0;
    state->bits = 0;
    state->lencode = state->distcode = state->next = state->codes;
  41c2fa:	48 8d be 50 05 00 00 	lea    0x550(%rsi),%rdi
    state = (struct inflate_state FAR *)strm->state;
    strm->total_in = strm->total_out = state->total = 0;
    strm->msg = Z_NULL;
    strm->adler = 1;        /* to support ill-conceived Java test suite */
    state->mode = HEAD;
    state->last = 0;
  41c301:	c7 46 04 00 00 00 00 	movl   $0x0,0x4(%rsi)
    state->havedict = 0;
  41c308:	c7 46 0c 00 00 00 00 	movl   $0x0,0xc(%rsi)
    state->dmax = 32768U;
  41c30f:	c7 46 14 00 80 00 00 	movl   $0x8000,0x14(%rsi)
    state->head = Z_NULL;
  41c316:	48 c7 46 28 00 00 00 	movq   $0x0,0x28(%rsi)
  41c31d:	00 
    state->wsize = 0;
  41c31e:	c7 46 34 00 00 00 00 	movl   $0x0,0x34(%rsi)
    state->whave = 0;
  41c325:	c7 46 38 00 00 00 00 	movl   $0x0,0x38(%rsi)
    state->write = 0;
  41c32c:	c7 46 3c 00 00 00 00 	movl   $0x0,0x3c(%rsi)
    state->hold = 0;
  41c333:	48 c7 46 48 00 00 00 	movq   $0x0,0x48(%rsi)
  41c33a:	00 
    state->bits = 0;
  41c33b:	c7 46 50 00 00 00 00 	movl   $0x0,0x50(%rsi)
    state->lencode = state->distcode = state->next = state->codes;
  41c342:	48 89 be 88 00 00 00 	mov    %rdi,0x88(%rsi)
  41c349:	48 89 7e 68          	mov    %rdi,0x68(%rsi)
  41c34d:	48 89 7e 60          	mov    %rdi,0x60(%rsi)
    /* return no joy or set up to restart inflate() on a new block */
    if (state->have != 4) return Z_DATA_ERROR;
    in = strm->total_in;  out = strm->total_out;
    inflateReset(strm);
    strm->total_in = in;  strm->total_out = out;
    state->mode = TYPE;
  41c351:	c7 06 0b 00 00 00    	movl   $0xb,(%rsi)
    return Z_OK;
}
  41c357:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  41c35c:	64 48 33 1c 25 28 00 	xor    %fs:0x28,%rbx
  41c363:	00 00 
  41c365:	0f 85 49 01 00 00    	jne    41c4b4 <inflateSync+0x4b4>
  41c36b:	48 83 c4 10          	add    $0x10,%rsp
  41c36f:	5b                   	pop    %rbx
  41c370:	c3                   	retq   
  41c371:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    struct inflate_state FAR *state;

    /* check parameters */
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
    state = (struct inflate_state FAR *)strm->state;
    if (strm->avail_in == 0 && state->bits < 8) return Z_BUF_ERROR;
  41c378:	83 7e 50 07          	cmpl   $0x7,0x50(%rsi)
  41c37c:	0f 87 b6 fc ff ff    	ja     41c038 <inflateSync+0x38>
  41c382:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
  41c387:	eb ce                	jmp    41c357 <inflateSync+0x357>
  41c389:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    got = *have;
    next = 0;
    while (next < len && got < 4) {
        if ((int)(buf[next]) == (got < 2 ? 0 : 0xff))
            got++;
        else if (buf[next])
  41c390:	b9 01 00 00 00       	mov    $0x1,%ecx
            got = 0;
  41c395:	31 d2                	xor    %edx,%edx
  41c397:	e9 be fd ff ff       	jmpq   41c15a <inflateSync+0x15a>
  41c39c:	0f 1f 40 00          	nopl   0x0(%rax)

    got = *have;
    next = 0;
    while (next < len && got < 4) {
        if ((int)(buf[next]) == (got < 2 ? 0 : 0xff))
            got++;
  41c3a0:	83 c2 01             	add    $0x1,%edx
  41c3a3:	83 fa 03             	cmp    $0x3,%edx
  41c3a6:	0f 96 c1             	setbe  %cl
  41c3a9:	e9 71 fd ff ff       	jmpq   41c11f <inflateSync+0x11f>
  41c3ae:	66 90                	xchg   %ax,%ax
  41c3b0:	83 c2 01             	add    $0x1,%edx
  41c3b3:	83 fa 03             	cmp    $0x3,%edx
  41c3b6:	0f 96 c1             	setbe  %cl
  41c3b9:	e9 9c fd ff ff       	jmpq   41c15a <inflateSync+0x15a>
  41c3be:	66 90                	xchg   %ax,%ax
        else if (buf[next])
            got = 0;
        else
            got = 4 - got;
  41c3c0:	41 89 da             	mov    %ebx,%r10d
  41c3c3:	41 29 d2             	sub    %edx,%r10d
  41c3c6:	41 83 fa 03          	cmp    $0x3,%r10d
  41c3ca:	44 89 d2             	mov    %r10d,%edx
  41c3cd:	41 0f 96 c2          	setbe  %r10b
  41c3d1:	e9 aa fe ff ff       	jmpq   41c280 <inflateSync+0x280>
  41c3d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41c3dd:	00 00 00 

    got = *have;
    next = 0;
    while (next < len && got < 4) {
        if ((int)(buf[next]) == (got < 2 ? 0 : 0xff))
            got++;
  41c3e0:	83 c2 01             	add    $0x1,%edx
  41c3e3:	83 fa 03             	cmp    $0x3,%edx
  41c3e6:	41 0f 96 c2          	setbe  %r10b
  41c3ea:	e9 62 fe ff ff       	jmpq   41c251 <inflateSync+0x251>
  41c3ef:	90                   	nop
  41c3f0:	83 c2 01             	add    $0x1,%edx
  41c3f3:	83 fa 03             	cmp    $0x3,%edx
  41c3f6:	41 0f 96 c2          	setbe  %r10b
  41c3fa:	e9 81 fe ff ff       	jmpq   41c280 <inflateSync+0x280>
  41c3ff:	90                   	nop
        else if (buf[next])
            got = 0;
        else
            got = 4 - got;
  41c400:	41 89 da             	mov    %ebx,%r10d
  41c403:	41 29 d2             	sub    %edx,%r10d
  41c406:	41 83 fa 03          	cmp    $0x3,%r10d
  41c40a:	44 89 d2             	mov    %r10d,%edx
  41c40d:	41 0f 96 c2          	setbe  %r10b
  41c411:	e9 d0 fd ff ff       	jmpq   41c1e6 <inflateSync+0x1e6>
  41c416:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41c41d:	00 00 00 
  41c420:	41 89 da             	mov    %ebx,%r10d
  41c423:	41 29 d2             	sub    %edx,%r10d
  41c426:	41 83 fa 03          	cmp    $0x3,%r10d
  41c42a:	44 89 d2             	mov    %r10d,%edx
  41c42d:	41 0f 96 c0          	setbe  %r8b
  41c431:	e9 f5 fd ff ff       	jmpq   41c22b <inflateSync+0x22b>
  41c436:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41c43d:	00 00 00 
  41c440:	8b 96 84 00 00 00    	mov    0x84(%rsi),%edx
  41c446:	83 fa 03             	cmp    $0x3,%edx
  41c449:	0f 96 c1             	setbe  %cl
  41c44c:	e9 51 fd ff ff       	jmpq   41c1a2 <inflateSync+0x1a2>
  41c451:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

    got = *have;
    next = 0;
    while (next < len && got < 4) {
        if ((int)(buf[next]) == (got < 2 ? 0 : 0xff))
            got++;
  41c458:	83 c2 01             	add    $0x1,%edx
  41c45b:	83 fa 03             	cmp    $0x3,%edx
  41c45e:	41 0f 96 c2          	setbe  %r10b
  41c462:	e9 7f fd ff ff       	jmpq   41c1e6 <inflateSync+0x1e6>
  41c467:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41c46e:	00 00 
  41c470:	83 c2 01             	add    $0x1,%edx
  41c473:	83 fa 03             	cmp    $0x3,%edx
  41c476:	41 0f 96 c0          	setbe  %r8b
  41c47a:	e9 ac fd ff ff       	jmpq   41c22b <inflateSync+0x22b>
  41c47f:	90                   	nop
  41c480:	ba 01 00 00 00       	mov    $0x1,%edx
  41c485:	b9 01 00 00 00       	mov    $0x1,%ecx
  41c48a:	e9 5f fc ff ff       	jmpq   41c0ee <inflateSync+0xee>
  41c48f:	90                   	nop
    if (state->mode != SYNC) {
        state->mode = SYNC;
        state->hold <<= state->bits & 7;
        state->bits -= state->bits & 7;
        len = 0;
        while (state->bits >= 8) {
  41c490:	b9 01 00 00 00       	mov    $0x1,%ecx
unsigned len;
{
    unsigned got;
    unsigned next;

    got = *have;
  41c495:	31 d2                	xor    %edx,%edx
  41c497:	e9 fc fc ff ff       	jmpq   41c198 <inflateSync+0x198>
  41c49c:	0f 1f 40 00          	nopl   0x0(%rax)
    next = 0;
    while (next < len && got < 4) {
  41c4a0:	45 31 c0             	xor    %r8d,%r8d
{
    unsigned got;
    unsigned next;

    got = *have;
    next = 0;
  41c4a3:	31 c0                	xor    %eax,%eax
  41c4a5:	e9 19 fe ff ff       	jmpq   41c2c3 <inflateSync+0x2c3>
    unsigned long in, out;      /* temporary to save total_in and total_out */
    unsigned char buf[4];       /* to restore bit buffer to byte string */
    struct inflate_state FAR *state;

    /* check parameters */
    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  41c4aa:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  41c4af:	e9 a3 fe ff ff       	jmpq   41c357 <inflateSync+0x357>
    in = strm->total_in;  out = strm->total_out;
    inflateReset(strm);
    strm->total_in = in;  strm->total_out = out;
    state->mode = TYPE;
    return Z_OK;
}
  41c4b4:	e8 07 aa fe ff       	callq  406ec0 <__stack_chk_fail@plt>
  41c4b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000041c4c0 <inflateSyncPoint>:
int ZEXPORT inflateSyncPoint(strm)
z_streamp strm;
{
    struct inflate_state FAR *state;

    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  41c4c0:	48 85 ff             	test   %rdi,%rdi
  41c4c3:	74 2b                	je     41c4f0 <inflateSyncPoint+0x30>
  41c4c5:	48 8b 57 38          	mov    0x38(%rdi),%rdx
  41c4c9:	48 85 d2             	test   %rdx,%rdx
  41c4cc:	74 22                	je     41c4f0 <inflateSyncPoint+0x30>
    state = (struct inflate_state FAR *)strm->state;
    return state->mode == STORED && state->bits == 0;
  41c4ce:	31 c0                	xor    %eax,%eax
  41c4d0:	83 3a 0d             	cmpl   $0xd,(%rdx)
  41c4d3:	74 0b                	je     41c4e0 <inflateSyncPoint+0x20>
}
  41c4d5:	f3 c3                	repz retq 
  41c4d7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41c4de:	00 00 
{
    struct inflate_state FAR *state;

    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
    state = (struct inflate_state FAR *)strm->state;
    return state->mode == STORED && state->bits == 0;
  41c4e0:	8b 4a 50             	mov    0x50(%rdx),%ecx
  41c4e3:	31 c0                	xor    %eax,%eax
  41c4e5:	85 c9                	test   %ecx,%ecx
  41c4e7:	0f 94 c0             	sete   %al
  41c4ea:	c3                   	retq   
  41c4eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
int ZEXPORT inflateSyncPoint(strm)
z_streamp strm;
{
    struct inflate_state FAR *state;

    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
  41c4f0:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    state = (struct inflate_state FAR *)strm->state;
    return state->mode == STORED && state->bits == 0;
}
  41c4f5:	c3                   	retq   
  41c4f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41c4fd:	00 00 00 

000000000041c500 <inflateCopy>:
    struct inflate_state FAR *copy;
    unsigned char FAR *window;
    unsigned wsize;

    /* check input */
    if (dest == Z_NULL || source == Z_NULL || source->state == Z_NULL ||
  41c500:	48 85 ff             	test   %rdi,%rdi
  41c503:	0f 84 b7 01 00 00    	je     41c6c0 <inflateCopy+0x1c0>
  41c509:	48 85 f6             	test   %rsi,%rsi
  41c50c:	0f 84 ae 01 00 00    	je     41c6c0 <inflateCopy+0x1c0>
}

int ZEXPORT inflateCopy(dest, source)
z_streamp dest;
z_streamp source;
{
  41c512:	41 56                	push   %r14
  41c514:	41 55                	push   %r13
  41c516:	41 54                	push   %r12
  41c518:	55                   	push   %rbp
  41c519:	53                   	push   %rbx
    struct inflate_state FAR *copy;
    unsigned char FAR *window;
    unsigned wsize;

    /* check input */
    if (dest == Z_NULL || source == Z_NULL || source->state == Z_NULL ||
  41c51a:	4c 8b 66 38          	mov    0x38(%rsi),%r12
  41c51e:	4d 85 e4             	test   %r12,%r12
  41c521:	0f 84 a9 01 00 00    	je     41c6d0 <inflateCopy+0x1d0>
        source->zalloc == (alloc_func)0 || source->zfree == (free_func)0)
  41c527:	48 8b 46 40          	mov    0x40(%rsi),%rax
    struct inflate_state FAR *copy;
    unsigned char FAR *window;
    unsigned wsize;

    /* check input */
    if (dest == Z_NULL || source == Z_NULL || source->state == Z_NULL ||
  41c52b:	48 85 c0             	test   %rax,%rax
  41c52e:	0f 84 9c 01 00 00    	je     41c6d0 <inflateCopy+0x1d0>
        source->zalloc == (alloc_func)0 || source->zfree == (free_func)0)
  41c534:	48 83 7e 48 00       	cmpq   $0x0,0x48(%rsi)
  41c539:	0f 84 91 01 00 00    	je     41c6d0 <inflateCopy+0x1d0>
  41c53f:	48 89 f3             	mov    %rsi,%rbx
  41c542:	48 89 fd             	mov    %rdi,%rbp
        return Z_STREAM_ERROR;
    state = (struct inflate_state FAR *)source->state;

    /* allocate space */
    copy = (struct inflate_state FAR *)
  41c545:	ba 50 25 00 00       	mov    $0x2550,%edx
  41c54a:	48 8b 7e 50          	mov    0x50(%rsi),%rdi
  41c54e:	be 01 00 00 00       	mov    $0x1,%esi
  41c553:	ff d0                	callq  *%rax
           ZALLOC(source, 1, sizeof(struct inflate_state));
    if (copy == Z_NULL) return Z_MEM_ERROR;
  41c555:	48 85 c0             	test   %rax,%rax
        source->zalloc == (alloc_func)0 || source->zfree == (free_func)0)
        return Z_STREAM_ERROR;
    state = (struct inflate_state FAR *)source->state;

    /* allocate space */
    copy = (struct inflate_state FAR *)
  41c558:	49 89 c5             	mov    %rax,%r13
           ZALLOC(source, 1, sizeof(struct inflate_state));
    if (copy == Z_NULL) return Z_MEM_ERROR;
  41c55b:	0f 84 76 01 00 00    	je     41c6d7 <inflateCopy+0x1d7>
    window = Z_NULL;
    if (state->window != Z_NULL) {
  41c561:	49 83 7c 24 40 00    	cmpq   $0x0,0x40(%r12)
  41c567:	0f 84 4b 01 00 00    	je     41c6b8 <inflateCopy+0x1b8>
        window = (unsigned char FAR *)
                 ZALLOC(source, 1U << state->wbits, sizeof(unsigned char));
  41c56d:	41 8b 4c 24 30       	mov    0x30(%r12),%ecx
  41c572:	be 01 00 00 00       	mov    $0x1,%esi
    copy = (struct inflate_state FAR *)
           ZALLOC(source, 1, sizeof(struct inflate_state));
    if (copy == Z_NULL) return Z_MEM_ERROR;
    window = Z_NULL;
    if (state->window != Z_NULL) {
        window = (unsigned char FAR *)
  41c577:	48 8b 7b 50          	mov    0x50(%rbx),%rdi
  41c57b:	ba 01 00 00 00       	mov    $0x1,%edx
                 ZALLOC(source, 1U << state->wbits, sizeof(unsigned char));
  41c580:	d3 e6                	shl    %cl,%esi
    copy = (struct inflate_state FAR *)
           ZALLOC(source, 1, sizeof(struct inflate_state));
    if (copy == Z_NULL) return Z_MEM_ERROR;
    window = Z_NULL;
    if (state->window != Z_NULL) {
        window = (unsigned char FAR *)
  41c582:	ff 53 40             	callq  *0x40(%rbx)
                 ZALLOC(source, 1U << state->wbits, sizeof(unsigned char));
        if (window == Z_NULL) {
  41c585:	48 85 c0             	test   %rax,%rax
    copy = (struct inflate_state FAR *)
           ZALLOC(source, 1, sizeof(struct inflate_state));
    if (copy == Z_NULL) return Z_MEM_ERROR;
    window = Z_NULL;
    if (state->window != Z_NULL) {
        window = (unsigned char FAR *)
  41c588:	49 89 c6             	mov    %rax,%r14
                 ZALLOC(source, 1U << state->wbits, sizeof(unsigned char));
        if (window == Z_NULL) {
  41c58b:	0f 84 4d 01 00 00    	je     41c6de <inflateCopy+0x1de>
  41c591:	48 8b 13             	mov    (%rbx),%rdx
  41c594:	48 89 55 00          	mov    %rdx,0x0(%rbp)
  41c598:	48 8b 73 08          	mov    0x8(%rbx),%rsi
  41c59c:	48 89 75 08          	mov    %rsi,0x8(%rbp)
  41c5a0:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
  41c5a4:	48 89 7d 10          	mov    %rdi,0x10(%rbp)
  41c5a8:	4c 8b 43 18          	mov    0x18(%rbx),%r8
  41c5ac:	4c 89 45 18          	mov    %r8,0x18(%rbp)
  41c5b0:	4c 8b 4b 20          	mov    0x20(%rbx),%r9
  41c5b4:	4c 89 4d 20          	mov    %r9,0x20(%rbp)
  41c5b8:	4c 8b 53 28          	mov    0x28(%rbx),%r10
  41c5bc:	4c 89 55 28          	mov    %r10,0x28(%rbp)
  41c5c0:	4c 8b 5b 30          	mov    0x30(%rbx),%r11
  41c5c4:	4c 89 5d 30          	mov    %r11,0x30(%rbp)
  41c5c8:	48 8b 43 38          	mov    0x38(%rbx),%rax
  41c5cc:	48 89 45 38          	mov    %rax,0x38(%rbp)
  41c5d0:	48 8b 4b 40          	mov    0x40(%rbx),%rcx
  41c5d4:	48 89 4d 40          	mov    %rcx,0x40(%rbp)
  41c5d8:	48 8b 53 48          	mov    0x48(%rbx),%rdx
  41c5dc:	48 89 55 48          	mov    %rdx,0x48(%rbp)
  41c5e0:	48 8b 73 50          	mov    0x50(%rbx),%rsi
  41c5e4:	ba 50 25 00 00       	mov    $0x2550,%edx
  41c5e9:	48 89 75 50          	mov    %rsi,0x50(%rbp)
  41c5ed:	48 8b 7b 58          	mov    0x58(%rbx),%rdi
  41c5f1:	4c 89 e6             	mov    %r12,%rsi
  41c5f4:	48 89 7d 58          	mov    %rdi,0x58(%rbp)
  41c5f8:	4c 8b 43 60          	mov    0x60(%rbx),%r8
  41c5fc:	4c 89 ef             	mov    %r13,%rdi
  41c5ff:	4c 89 45 60          	mov    %r8,0x60(%rbp)
  41c603:	48 8b 5b 68          	mov    0x68(%rbx),%rbx
  41c607:	48 89 5d 68          	mov    %rbx,0x68(%rbp)
  41c60b:	e8 e0 a9 fe ff       	callq  406ff0 <memcpy@plt>
    }

    /* copy state */
    zmemcpy(dest, source, sizeof(z_stream));
    zmemcpy(copy, state, sizeof(struct inflate_state));
    if (state->lencode >= state->codes &&
  41c610:	4d 8b 4c 24 60       	mov    0x60(%r12),%r9
  41c615:	4d 8d 94 24 50 05 00 	lea    0x550(%r12),%r10
  41c61c:	00 
  41c61d:	4d 39 d1             	cmp    %r10,%r9
  41c620:	73 56                	jae    41c678 <inflateCopy+0x178>
        state->lencode <= state->codes + ENOUGH - 1) {
        copy->lencode = copy->codes + (state->lencode - state->codes);
        copy->distcode = copy->codes + (state->distcode - state->codes);
    }
    copy->next = copy->codes + (state->next - state->codes);
  41c622:	49 8b b4 24 88 00 00 	mov    0x88(%r12),%rsi
  41c629:	00 
  41c62a:	4c 29 d6             	sub    %r10,%rsi
  41c62d:	48 89 f7             	mov    %rsi,%rdi
  41c630:	48 c1 ff 02          	sar    $0x2,%rdi
    if (window != Z_NULL) {
  41c634:	4d 85 f6             	test   %r14,%r14
    if (state->lencode >= state->codes &&
        state->lencode <= state->codes + ENOUGH - 1) {
        copy->lencode = copy->codes + (state->lencode - state->codes);
        copy->distcode = copy->codes + (state->distcode - state->codes);
    }
    copy->next = copy->codes + (state->next - state->codes);
  41c637:	4d 8d 84 bd 50 05 00 	lea    0x550(%r13,%rdi,4),%r8
  41c63e:	00 
  41c63f:	4d 89 85 88 00 00 00 	mov    %r8,0x88(%r13)
    if (window != Z_NULL) {
  41c646:	74 19                	je     41c661 <inflateCopy+0x161>
        wsize = 1U << state->wbits;
  41c648:	41 8b 4c 24 30       	mov    0x30(%r12),%ecx
  41c64d:	49 8b 74 24 40       	mov    0x40(%r12),%rsi
        zmemcpy(window, state->window, wsize);
  41c652:	ba 01 00 00 00       	mov    $0x1,%edx
  41c657:	4c 89 f7             	mov    %r14,%rdi
  41c65a:	d3 e2                	shl    %cl,%edx
  41c65c:	e8 8f a9 fe ff       	callq  406ff0 <memcpy@plt>
    }
    copy->window = window;
  41c661:	4d 89 75 40          	mov    %r14,0x40(%r13)
    dest->state = (struct internal_state FAR *)copy;
    return Z_OK;
  41c665:	31 c0                	xor    %eax,%eax
    if (window != Z_NULL) {
        wsize = 1U << state->wbits;
        zmemcpy(window, state->window, wsize);
    }
    copy->window = window;
    dest->state = (struct internal_state FAR *)copy;
  41c667:	4c 89 6d 38          	mov    %r13,0x38(%rbp)
    return Z_OK;
}
  41c66b:	5b                   	pop    %rbx
  41c66c:	5d                   	pop    %rbp
  41c66d:	41 5c                	pop    %r12
  41c66f:	41 5d                	pop    %r13
  41c671:	41 5e                	pop    %r14
  41c673:	c3                   	retq   
  41c674:	0f 1f 40 00          	nopl   0x0(%rax)

    /* copy state */
    zmemcpy(dest, source, sizeof(z_stream));
    zmemcpy(copy, state, sizeof(struct inflate_state));
    if (state->lencode >= state->codes &&
        state->lencode <= state->codes + ENOUGH - 1) {
  41c678:	4d 8d 9c 24 4c 25 00 	lea    0x254c(%r12),%r11
  41c67f:	00 
    }

    /* copy state */
    zmemcpy(dest, source, sizeof(z_stream));
    zmemcpy(copy, state, sizeof(struct inflate_state));
    if (state->lencode >= state->codes &&
  41c680:	4d 39 d9             	cmp    %r11,%r9
  41c683:	77 9d                	ja     41c622 <inflateCopy+0x122>
        state->lencode <= state->codes + ENOUGH - 1) {
        copy->lencode = copy->codes + (state->lencode - state->codes);
        copy->distcode = copy->codes + (state->distcode - state->codes);
  41c685:	49 8b 4c 24 68       	mov    0x68(%r12),%rcx
    /* copy state */
    zmemcpy(dest, source, sizeof(z_stream));
    zmemcpy(copy, state, sizeof(struct inflate_state));
    if (state->lencode >= state->codes &&
        state->lencode <= state->codes + ENOUGH - 1) {
        copy->lencode = copy->codes + (state->lencode - state->codes);
  41c68a:	4d 29 d1             	sub    %r10,%r9
  41c68d:	49 c1 f9 02          	sar    $0x2,%r9
  41c691:	4b 8d 84 8d 50 05 00 	lea    0x550(%r13,%r9,4),%rax
  41c698:	00 
        copy->distcode = copy->codes + (state->distcode - state->codes);
  41c699:	4c 29 d1             	sub    %r10,%rcx
  41c69c:	48 c1 f9 02          	sar    $0x2,%rcx
    /* copy state */
    zmemcpy(dest, source, sizeof(z_stream));
    zmemcpy(copy, state, sizeof(struct inflate_state));
    if (state->lencode >= state->codes &&
        state->lencode <= state->codes + ENOUGH - 1) {
        copy->lencode = copy->codes + (state->lencode - state->codes);
  41c6a0:	49 89 45 60          	mov    %rax,0x60(%r13)
        copy->distcode = copy->codes + (state->distcode - state->codes);
  41c6a4:	49 8d 94 8d 50 05 00 	lea    0x550(%r13,%rcx,4),%rdx
  41c6ab:	00 
  41c6ac:	49 89 55 68          	mov    %rdx,0x68(%r13)
  41c6b0:	e9 6d ff ff ff       	jmpq   41c622 <inflateCopy+0x122>
  41c6b5:	0f 1f 00             	nopl   (%rax)

    /* allocate space */
    copy = (struct inflate_state FAR *)
           ZALLOC(source, 1, sizeof(struct inflate_state));
    if (copy == Z_NULL) return Z_MEM_ERROR;
    window = Z_NULL;
  41c6b8:	45 31 f6             	xor    %r14d,%r14d
  41c6bb:	e9 d1 fe ff ff       	jmpq   41c591 <inflateCopy+0x91>
    unsigned wsize;

    /* check input */
    if (dest == Z_NULL || source == Z_NULL || source->state == Z_NULL ||
        source->zalloc == (alloc_func)0 || source->zfree == (free_func)0)
        return Z_STREAM_ERROR;
  41c6c0:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
        zmemcpy(window, state->window, wsize);
    }
    copy->window = window;
    dest->state = (struct internal_state FAR *)copy;
    return Z_OK;
}
  41c6c5:	c3                   	retq   
  41c6c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41c6cd:	00 00 00 
    unsigned wsize;

    /* check input */
    if (dest == Z_NULL || source == Z_NULL || source->state == Z_NULL ||
        source->zalloc == (alloc_func)0 || source->zfree == (free_func)0)
        return Z_STREAM_ERROR;
  41c6d0:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  41c6d5:	eb 94                	jmp    41c66b <inflateCopy+0x16b>
    state = (struct inflate_state FAR *)source->state;

    /* allocate space */
    copy = (struct inflate_state FAR *)
           ZALLOC(source, 1, sizeof(struct inflate_state));
    if (copy == Z_NULL) return Z_MEM_ERROR;
  41c6d7:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  41c6dc:	eb 8d                	jmp    41c66b <inflateCopy+0x16b>
    window = Z_NULL;
    if (state->window != Z_NULL) {
        window = (unsigned char FAR *)
                 ZALLOC(source, 1U << state->wbits, sizeof(unsigned char));
        if (window == Z_NULL) {
            ZFREE(source, copy);
  41c6de:	48 8b 7b 50          	mov    0x50(%rbx),%rdi
  41c6e2:	4c 89 ee             	mov    %r13,%rsi
  41c6e5:	ff 53 48             	callq  *0x48(%rbx)
            return Z_MEM_ERROR;
  41c6e8:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  41c6ed:	e9 79 ff ff ff       	jmpq   41c66b <inflateCopy+0x16b>
  41c6f2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41c6f9:	00 00 00 
  41c6fc:	0f 1f 40 00          	nopl   0x0(%rax)

000000000041c700 <inflate_table>:
unsigned short FAR *lens;
unsigned codes;
code FAR * FAR *table;
unsigned FAR *bits;
unsigned short FAR *work;
{
  41c700:	41 57                	push   %r15
  41c702:	41 56                	push   %r14
  41c704:	49 89 cf             	mov    %rcx,%r15
  41c707:	41 55                	push   %r13
  41c709:	41 54                	push   %r12
  41c70b:	55                   	push   %rbp
  41c70c:	53                   	push   %rbx
  41c70d:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  41c714:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  41c71b:	00 00 
  41c71d:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  41c724:	00 
  41c725:	31 c0                	xor    %eax,%eax
     */

    /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
    for (len = 0; len <= MAXBITS; len++)
        count[len] = 0;
    for (sym = 0; sym < codes; sym++)
  41c727:	85 d2                	test   %edx,%edx
unsigned short FAR *lens;
unsigned codes;
code FAR * FAR *table;
unsigned FAR *bits;
unsigned short FAR *work;
{
  41c729:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  41c72e:	4c 89 44 24 30       	mov    %r8,0x30(%rsp)
  41c733:	4c 89 4c 24 10       	mov    %r9,0x10(%rsp)
  41c738:	48 c7 44 24 50 00 00 	movq   $0x0,0x50(%rsp)
  41c73f:	00 00 
  41c741:	48 c7 44 24 58 00 00 	movq   $0x0,0x58(%rsp)
  41c748:	00 00 
  41c74a:	48 c7 44 24 60 00 00 	movq   $0x0,0x60(%rsp)
  41c751:	00 00 
  41c753:	48 c7 44 24 68 00 00 	movq   $0x0,0x68(%rsp)
  41c75a:	00 00 
     */

    /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
    for (len = 0; len <= MAXBITS; len++)
        count[len] = 0;
    for (sym = 0; sym < codes; sym++)
  41c75c:	0f 84 2b 01 00 00    	je     41c88d <inflate_table+0x18d>
  41c762:	48 89 f3             	mov    %rsi,%rbx
  41c765:	8d 4a ff             	lea    -0x1(%rdx),%ecx
        count[lens[sym]]++;
  41c768:	0f b7 2b             	movzwl (%rbx),%ebp
  41c76b:	49 89 d9             	mov    %rbx,%r9
  41c76e:	48 8d 74 4e 02       	lea    0x2(%rsi,%rcx,2),%rsi
  41c773:	49 83 c1 02          	add    $0x2,%r9
  41c777:	83 e1 07             	and    $0x7,%ecx
  41c77a:	66 83 44 6c 50 01    	addw   $0x1,0x50(%rsp,%rbp,2)
     */

    /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
    for (len = 0; len <= MAXBITS; len++)
        count[len] = 0;
    for (sym = 0; sym < codes; sym++)
  41c780:	49 39 f1             	cmp    %rsi,%r9
  41c783:	0f 84 04 01 00 00    	je     41c88d <inflate_table+0x18d>
  41c789:	48 85 c9             	test   %rcx,%rcx
  41c78c:	0f 84 96 00 00 00    	je     41c828 <inflate_table+0x128>
  41c792:	48 83 f9 01          	cmp    $0x1,%rcx
  41c796:	74 7d                	je     41c815 <inflate_table+0x115>
  41c798:	48 83 f9 02          	cmp    $0x2,%rcx
  41c79c:	74 68                	je     41c806 <inflate_table+0x106>
  41c79e:	48 83 f9 03          	cmp    $0x3,%rcx
  41c7a2:	74 53                	je     41c7f7 <inflate_table+0xf7>
  41c7a4:	48 83 f9 04          	cmp    $0x4,%rcx
  41c7a8:	74 3e                	je     41c7e8 <inflate_table+0xe8>
  41c7aa:	48 83 f9 05          	cmp    $0x5,%rcx
  41c7ae:	74 29                	je     41c7d9 <inflate_table+0xd9>
  41c7b0:	48 83 f9 06          	cmp    $0x6,%rcx
  41c7b4:	74 14                	je     41c7ca <inflate_table+0xca>
        count[lens[sym]]++;
  41c7b6:	45 0f b7 01          	movzwl (%r9),%r8d
  41c7ba:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
  41c7bf:	49 83 c1 04          	add    $0x4,%r9
  41c7c3:	66 42 83 44 44 50 01 	addw   $0x1,0x50(%rsp,%r8,2)
  41c7ca:	45 0f b7 11          	movzwl (%r9),%r10d
  41c7ce:	49 83 c1 02          	add    $0x2,%r9
  41c7d2:	66 42 83 44 54 50 01 	addw   $0x1,0x50(%rsp,%r10,2)
  41c7d9:	45 0f b7 19          	movzwl (%r9),%r11d
  41c7dd:	49 83 c1 02          	add    $0x2,%r9
  41c7e1:	66 42 83 44 5c 50 01 	addw   $0x1,0x50(%rsp,%r11,2)
  41c7e8:	45 0f b7 21          	movzwl (%r9),%r12d
  41c7ec:	49 83 c1 02          	add    $0x2,%r9
  41c7f0:	66 42 83 44 64 50 01 	addw   $0x1,0x50(%rsp,%r12,2)
  41c7f7:	45 0f b7 29          	movzwl (%r9),%r13d
  41c7fb:	49 83 c1 02          	add    $0x2,%r9
  41c7ff:	66 42 83 44 6c 50 01 	addw   $0x1,0x50(%rsp,%r13,2)
  41c806:	45 0f b7 31          	movzwl (%r9),%r14d
  41c80a:	49 83 c1 02          	add    $0x2,%r9
  41c80e:	66 42 83 44 74 50 01 	addw   $0x1,0x50(%rsp,%r14,2)
  41c815:	41 0f b7 19          	movzwl (%r9),%ebx
  41c819:	49 83 c1 02          	add    $0x2,%r9
  41c81d:	66 83 44 5c 50 01    	addw   $0x1,0x50(%rsp,%rbx,2)
     */

    /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
    for (len = 0; len <= MAXBITS; len++)
        count[len] = 0;
    for (sym = 0; sym < codes; sym++)
  41c823:	49 39 f1             	cmp    %rsi,%r9
  41c826:	74 65                	je     41c88d <inflate_table+0x18d>
        count[lens[sym]]++;
  41c828:	41 0f b7 09          	movzwl (%r9),%ecx
  41c82c:	41 0f b7 41 02       	movzwl 0x2(%r9),%eax
  41c831:	49 83 c1 10          	add    $0x10,%r9
  41c835:	41 0f b7 69 f4       	movzwl -0xc(%r9),%ebp
  41c83a:	45 0f b7 41 f6       	movzwl -0xa(%r9),%r8d
  41c83f:	45 0f b7 51 f8       	movzwl -0x8(%r9),%r10d
  41c844:	45 0f b7 59 fa       	movzwl -0x6(%r9),%r11d
  41c849:	66 83 44 4c 50 01    	addw   $0x1,0x50(%rsp,%rcx,2)
  41c84f:	45 0f b7 61 fc       	movzwl -0x4(%r9),%r12d
  41c854:	66 83 44 44 50 01    	addw   $0x1,0x50(%rsp,%rax,2)
  41c85a:	45 0f b7 69 fe       	movzwl -0x2(%r9),%r13d
  41c85f:	66 83 44 6c 50 01    	addw   $0x1,0x50(%rsp,%rbp,2)
  41c865:	66 42 83 44 44 50 01 	addw   $0x1,0x50(%rsp,%r8,2)
  41c86c:	66 42 83 44 54 50 01 	addw   $0x1,0x50(%rsp,%r10,2)
  41c873:	66 42 83 44 5c 50 01 	addw   $0x1,0x50(%rsp,%r11,2)
  41c87a:	66 42 83 44 64 50 01 	addw   $0x1,0x50(%rsp,%r12,2)
  41c881:	66 42 83 44 6c 50 01 	addw   $0x1,0x50(%rsp,%r13,2)
     */

    /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
    for (len = 0; len <= MAXBITS; len++)
        count[len] = 0;
    for (sym = 0; sym < codes; sym++)
  41c888:	49 39 f1             	cmp    %rsi,%r9
  41c88b:	75 9b                	jne    41c828 <inflate_table+0x128>
        count[lens[sym]]++;

    /* bound code lengths, force root to be within code lengths */
    root = *bits;
  41c88d:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
    for (max = MAXBITS; max >= 1; max--)
        if (count[max] != 0) break;
  41c892:	44 0f b7 74 24 6e    	movzwl 0x6e(%rsp),%r14d
        count[len] = 0;
    for (sym = 0; sym < codes; sym++)
        count[lens[sym]]++;

    /* bound code lengths, force root to be within code lengths */
    root = *bits;
  41c898:	44 8b 0e             	mov    (%rsi),%r9d
    for (max = MAXBITS; max >= 1; max--)
        if (count[max] != 0) break;
  41c89b:	66 45 85 f6          	test   %r14w,%r14w
        count[len] = 0;
    for (sym = 0; sym < codes; sym++)
        count[lens[sym]]++;

    /* bound code lengths, force root to be within code lengths */
    root = *bits;
  41c89f:	44 89 4c 24 0c       	mov    %r9d,0xc(%rsp)
    for (max = MAXBITS; max >= 1; max--)
        if (count[max] != 0) break;
  41c8a4:	0f 85 38 0c 00 00    	jne    41d4e2 <inflate_table+0xde2>
  41c8aa:	66 83 7c 24 6c 00    	cmpw   $0x0,0x6c(%rsp)
  41c8b0:	0f 85 21 0c 00 00    	jne    41d4d7 <inflate_table+0xdd7>
  41c8b6:	66 83 7c 24 6a 00    	cmpw   $0x0,0x6a(%rsp)
  41c8bc:	0f 85 0a 0c 00 00    	jne    41d4cc <inflate_table+0xdcc>
  41c8c2:	66 83 7c 24 68 00    	cmpw   $0x0,0x68(%rsp)
  41c8c8:	0f 85 1f 0c 00 00    	jne    41d4ed <inflate_table+0xded>
  41c8ce:	66 83 7c 24 66 00    	cmpw   $0x0,0x66(%rsp)
  41c8d4:	0f 85 29 0c 00 00    	jne    41d503 <inflate_table+0xe03>
  41c8da:	66 83 7c 24 64 00    	cmpw   $0x0,0x64(%rsp)
  41c8e0:	0f 85 12 0c 00 00    	jne    41d4f8 <inflate_table+0xdf8>
  41c8e6:	66 83 7c 24 62 00    	cmpw   $0x0,0x62(%rsp)
  41c8ec:	0f 85 27 0c 00 00    	jne    41d519 <inflate_table+0xe19>
  41c8f2:	66 83 7c 24 60 00    	cmpw   $0x0,0x60(%rsp)
  41c8f8:	0f 85 10 0c 00 00    	jne    41d50e <inflate_table+0xe0e>
  41c8fe:	66 83 7c 24 5e 00    	cmpw   $0x0,0x5e(%rsp)
  41c904:	0f 85 30 0c 00 00    	jne    41d53a <inflate_table+0xe3a>
  41c90a:	66 83 7c 24 5c 00    	cmpw   $0x0,0x5c(%rsp)
  41c910:	0f 85 19 0c 00 00    	jne    41d52f <inflate_table+0xe2f>
  41c916:	66 83 7c 24 5a 00    	cmpw   $0x0,0x5a(%rsp)
  41c91c:	0f 85 02 0c 00 00    	jne    41d524 <inflate_table+0xe24>
  41c922:	66 83 7c 24 58 00    	cmpw   $0x0,0x58(%rsp)
  41c928:	0f 85 5e 0c 00 00    	jne    41d58c <inflate_table+0xe8c>
  41c92e:	66 83 7c 24 56 00    	cmpw   $0x0,0x56(%rsp)
  41c934:	0f 85 47 0c 00 00    	jne    41d581 <inflate_table+0xe81>
  41c93a:	66 83 7c 24 54 00    	cmpw   $0x0,0x54(%rsp)
  41c940:	0f 85 51 0c 00 00    	jne    41d597 <inflate_table+0xe97>
  41c946:	66 83 7c 24 52 00    	cmpw   $0x0,0x52(%rsp)
  41c94c:	75 67                	jne    41c9b5 <inflate_table+0x2b5>
    if (root > max) root = max;
    if (max == 0) {                     /* no symbols to code at all */
        this.op = (unsigned char)64;    /* invalid code marker */
        this.bits = (unsigned char)1;
        this.val = (unsigned short)0;
        *(*table)++ = this;             /* make a table to force an error */
  41c94e:	49 8b 3f             	mov    (%r15),%rdi
  41c951:	31 db                	xor    %ebx,%ebx
        *(*table)++ = this;
        *bits = 1;
  41c953:	48 8b 6c 24 30       	mov    0x30(%rsp),%rbp
    if (root > max) root = max;
    if (max == 0) {                     /* no symbols to code at all */
        this.op = (unsigned char)64;    /* invalid code marker */
        this.bits = (unsigned char)1;
        this.val = (unsigned short)0;
        *(*table)++ = this;             /* make a table to force an error */
  41c958:	48 8d 57 04          	lea    0x4(%rdi),%rdx
  41c95c:	49 89 17             	mov    %rdx,(%r15)
  41c95f:	c6 07 40             	movb   $0x40,(%rdi)
  41c962:	c6 47 01 01          	movb   $0x1,0x1(%rdi)
  41c966:	66 89 5f 02          	mov    %bx,0x2(%rdi)
        *(*table)++ = this;
  41c96a:	49 8b 07             	mov    (%r15),%rax
  41c96d:	48 8d 48 04          	lea    0x4(%rax),%rcx
  41c971:	49 89 0f             	mov    %rcx,(%r15)
  41c974:	45 31 ff             	xor    %r15d,%r15d
  41c977:	c6 00 40             	movb   $0x40,(%rax)
  41c97a:	c6 40 01 01          	movb   $0x1,0x1(%rax)
  41c97e:	66 44 89 78 02       	mov    %r15w,0x2(%rax)
        *bits = 1;
        return 0;     /* no symbols, but wait for decoding to report error */
  41c983:	31 c0                	xor    %eax,%eax
        this.op = (unsigned char)64;    /* invalid code marker */
        this.bits = (unsigned char)1;
        this.val = (unsigned short)0;
        *(*table)++ = this;             /* make a table to force an error */
        *(*table)++ = this;
        *bits = 1;
  41c985:	c7 45 00 01 00 00 00 	movl   $0x1,0x0(%rbp)

    /* set return parameters */
    *table += used;
    *bits = root;
    return 0;
}
  41c98c:	48 8b 9c 24 98 00 00 	mov    0x98(%rsp),%rbx
  41c993:	00 
  41c994:	64 48 33 1c 25 28 00 	xor    %fs:0x28,%rbx
  41c99b:	00 00 
  41c99d:	0f 85 5d 0c 00 00    	jne    41d600 <inflate_table+0xf00>
  41c9a3:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  41c9aa:	5b                   	pop    %rbx
  41c9ab:	5d                   	pop    %rbp
  41c9ac:	41 5c                	pop    %r12
  41c9ae:	41 5d                	pop    %r13
  41c9b0:	41 5e                	pop    %r14
  41c9b2:	41 5f                	pop    %r15
  41c9b4:	c3                   	retq   
    for (sym = 0; sym < codes; sym++)
        count[lens[sym]]++;

    /* bound code lengths, force root to be within code lengths */
    root = *bits;
    for (max = MAXBITS; max >= 1; max--)
  41c9b5:	41 bd 01 00 00 00    	mov    $0x1,%r13d
        if (count[max] != 0) break;
    if (root > max) root = max;
  41c9bb:	44 39 6c 24 0c       	cmp    %r13d,0xc(%rsp)
  41c9c0:	0f 86 08 06 00 00    	jbe    41cfce <inflate_table+0x8ce>
        *(*table)++ = this;
        *bits = 1;
        return 0;     /* no symbols, but wait for decoding to report error */
    }
    for (min = 1; min <= MAXBITS; min++)
        if (count[min] != 0) break;
  41c9c6:	44 0f b7 54 24 52    	movzwl 0x52(%rsp),%r10d
  41c9cc:	44 89 6c 24 0c       	mov    %r13d,0xc(%rsp)
  41c9d1:	66 45 85 d2          	test   %r10w,%r10w
  41c9d5:	0f 85 11 06 00 00    	jne    41cfec <inflate_table+0x8ec>
  41c9db:	66 83 7c 24 54 00    	cmpw   $0x0,0x54(%rsp)
  41c9e1:	0f 85 92 0b 00 00    	jne    41d579 <inflate_table+0xe79>
  41c9e7:	66 83 7c 24 56 00    	cmpw   $0x0,0x56(%rsp)
  41c9ed:	0f 85 7e 0b 00 00    	jne    41d571 <inflate_table+0xe71>
  41c9f3:	66 83 7c 24 58 00    	cmpw   $0x0,0x58(%rsp)
  41c9f9:	0f 85 6a 0b 00 00    	jne    41d569 <inflate_table+0xe69>
  41c9ff:	66 83 7c 24 5a 00    	cmpw   $0x0,0x5a(%rsp)
  41ca05:	0f 85 56 0b 00 00    	jne    41d561 <inflate_table+0xe61>
  41ca0b:	66 83 7c 24 5c 00    	cmpw   $0x0,0x5c(%rsp)
  41ca11:	0f 85 2e 0b 00 00    	jne    41d545 <inflate_table+0xe45>
  41ca17:	66 83 7c 24 5e 00    	cmpw   $0x0,0x5e(%rsp)
  41ca1d:	0f 85 7f 0b 00 00    	jne    41d5a2 <inflate_table+0xea2>
  41ca23:	66 83 7c 24 60 00    	cmpw   $0x0,0x60(%rsp)
  41ca29:	0f 85 a6 0b 00 00    	jne    41d5d5 <inflate_table+0xed5>
  41ca2f:	66 83 7c 24 62 00    	cmpw   $0x0,0x62(%rsp)
  41ca35:	0f 85 8f 0b 00 00    	jne    41d5ca <inflate_table+0xeca>
  41ca3b:	66 83 7c 24 64 00    	cmpw   $0x0,0x64(%rsp)
  41ca41:	0f 85 7b 0b 00 00    	jne    41d5c2 <inflate_table+0xec2>
  41ca47:	66 83 7c 24 66 00    	cmpw   $0x0,0x66(%rsp)
  41ca4d:	0f 85 67 0b 00 00    	jne    41d5ba <inflate_table+0xeba>
  41ca53:	66 83 7c 24 68 00    	cmpw   $0x0,0x68(%rsp)
  41ca59:	0f 85 53 0b 00 00    	jne    41d5b2 <inflate_table+0xeb2>
  41ca5f:	66 83 7c 24 6a 00    	cmpw   $0x0,0x6a(%rsp)
  41ca65:	0f 85 3f 0b 00 00    	jne    41d5aa <inflate_table+0xeaa>
  41ca6b:	66 83 7c 24 6c 00    	cmpw   $0x0,0x6c(%rsp)
  41ca71:	0f 85 74 0b 00 00    	jne    41d5eb <inflate_table+0xeeb>
  41ca77:	66 45 85 f6          	test   %r14w,%r14w
  41ca7b:	0f 85 5f 0b 00 00    	jne    41d5e0 <inflate_table+0xee0>
  41ca81:	c7 44 24 0c 10 00 00 	movl   $0x10,0xc(%rsp)
  41ca88:	00 
  41ca89:	44 8b 64 24 0c       	mov    0xc(%rsp),%r12d

    /* check for an over-subscribed or incomplete set of lengths */
    left = 1;
    for (len = 1; len <= MAXBITS; len++) {
        left <<= 1;
        left -= count[len];
  41ca8e:	41 0f b7 f2          	movzwl %r10w,%esi
  41ca92:	41 bb 02 00 00 00    	mov    $0x2,%r11d
        if (left < 0) return -1;        /* over-subscribed */
  41ca98:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  41ca9d:	41 29 f3             	sub    %esi,%r11d
  41caa0:	0f 88 e6 fe ff ff    	js     41c98c <inflate_table+0x28c>

    /* check for an over-subscribed or incomplete set of lengths */
    left = 1;
    for (len = 1; len <= MAXBITS; len++) {
        left <<= 1;
        left -= count[len];
  41caa6:	44 0f b7 4c 24 54    	movzwl 0x54(%rsp),%r9d
    if (root < min) root = min;

    /* check for an over-subscribed or incomplete set of lengths */
    left = 1;
    for (len = 1; len <= MAXBITS; len++) {
        left <<= 1;
  41caac:	45 01 db             	add    %r11d,%r11d
        left -= count[len];
        if (left < 0) return -1;        /* over-subscribed */
  41caaf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  41cab4:	45 29 cb             	sub    %r9d,%r11d
  41cab7:	0f 88 cf fe ff ff    	js     41c98c <inflate_table+0x28c>

    /* check for an over-subscribed or incomplete set of lengths */
    left = 1;
    for (len = 1; len <= MAXBITS; len++) {
        left <<= 1;
        left -= count[len];
  41cabd:	0f b7 5c 24 56       	movzwl 0x56(%rsp),%ebx
    if (root < min) root = min;

    /* check for an over-subscribed or incomplete set of lengths */
    left = 1;
    for (len = 1; len <= MAXBITS; len++) {
        left <<= 1;
  41cac2:	45 01 db             	add    %r11d,%r11d
        left -= count[len];
        if (left < 0) return -1;        /* over-subscribed */
  41cac5:	41 29 db             	sub    %ebx,%r11d
  41cac8:	0f 88 be fe ff ff    	js     41c98c <inflate_table+0x28c>

    /* check for an over-subscribed or incomplete set of lengths */
    left = 1;
    for (len = 1; len <= MAXBITS; len++) {
        left <<= 1;
        left -= count[len];
  41cace:	0f b7 4c 24 58       	movzwl 0x58(%rsp),%ecx
    if (root < min) root = min;

    /* check for an over-subscribed or incomplete set of lengths */
    left = 1;
    for (len = 1; len <= MAXBITS; len++) {
        left <<= 1;
  41cad3:	45 01 db             	add    %r11d,%r11d
        left -= count[len];
        if (left < 0) return -1;        /* over-subscribed */
  41cad6:	41 29 cb             	sub    %ecx,%r11d
  41cad9:	0f 88 ad fe ff ff    	js     41c98c <inflate_table+0x28c>

    /* check for an over-subscribed or incomplete set of lengths */
    left = 1;
    for (len = 1; len <= MAXBITS; len++) {
        left <<= 1;
        left -= count[len];
  41cadf:	0f b7 6c 24 5a       	movzwl 0x5a(%rsp),%ebp
    if (root < min) root = min;

    /* check for an over-subscribed or incomplete set of lengths */
    left = 1;
    for (len = 1; len <= MAXBITS; len++) {
        left <<= 1;
  41cae4:	45 01 db             	add    %r11d,%r11d
        left -= count[len];
        if (left < 0) return -1;        /* over-subscribed */
  41cae7:	41 29 eb             	sub    %ebp,%r11d
  41caea:	0f 88 9c fe ff ff    	js     41c98c <inflate_table+0x28c>

    /* check for an over-subscribed or incomplete set of lengths */
    left = 1;
    for (len = 1; len <= MAXBITS; len++) {
        left <<= 1;
        left -= count[len];
  41caf0:	44 0f b7 44 24 5c    	movzwl 0x5c(%rsp),%r8d
    if (root < min) root = min;

    /* check for an over-subscribed or incomplete set of lengths */
    left = 1;
    for (len = 1; len <= MAXBITS; len++) {
        left <<= 1;
  41caf6:	45 01 db             	add    %r11d,%r11d
        left -= count[len];
        if (left < 0) return -1;        /* over-subscribed */
  41caf9:	45 29 c3             	sub    %r8d,%r11d
  41cafc:	0f 88 8a fe ff ff    	js     41c98c <inflate_table+0x28c>

    /* check for an over-subscribed or incomplete set of lengths */
    left = 1;
    for (len = 1; len <= MAXBITS; len++) {
        left <<= 1;
        left -= count[len];
  41cb02:	0f b7 74 24 5e       	movzwl 0x5e(%rsp),%esi
    if (root < min) root = min;

    /* check for an over-subscribed or incomplete set of lengths */
    left = 1;
    for (len = 1; len <= MAXBITS; len++) {
        left <<= 1;
  41cb07:	45 01 db             	add    %r11d,%r11d
        left -= count[len];
        if (left < 0) return -1;        /* over-subscribed */
  41cb0a:	41 29 f3             	sub    %esi,%r11d
  41cb0d:	0f 88 79 fe ff ff    	js     41c98c <inflate_table+0x28c>

    /* check for an over-subscribed or incomplete set of lengths */
    left = 1;
    for (len = 1; len <= MAXBITS; len++) {
        left <<= 1;
        left -= count[len];
  41cb13:	44 0f b7 4c 24 60    	movzwl 0x60(%rsp),%r9d
    if (root < min) root = min;

    /* check for an over-subscribed or incomplete set of lengths */
    left = 1;
    for (len = 1; len <= MAXBITS; len++) {
        left <<= 1;
  41cb19:	45 01 db             	add    %r11d,%r11d
        left -= count[len];
        if (left < 0) return -1;        /* over-subscribed */
  41cb1c:	45 29 cb             	sub    %r9d,%r11d
  41cb1f:	0f 88 67 fe ff ff    	js     41c98c <inflate_table+0x28c>

    /* check for an over-subscribed or incomplete set of lengths */
    left = 1;
    for (len = 1; len <= MAXBITS; len++) {
        left <<= 1;
        left -= count[len];
  41cb25:	0f b7 5c 24 62       	movzwl 0x62(%rsp),%ebx
    if (root < min) root = min;

    /* check for an over-subscribed or incomplete set of lengths */
    left = 1;
    for (len = 1; len <= MAXBITS; len++) {
        left <<= 1;
  41cb2a:	45 01 db             	add    %r11d,%r11d
        left -= count[len];
        if (left < 0) return -1;        /* over-subscribed */
  41cb2d:	41 29 db             	sub    %ebx,%r11d
  41cb30:	0f 88 56 fe ff ff    	js     41c98c <inflate_table+0x28c>

    /* check for an over-subscribed or incomplete set of lengths */
    left = 1;
    for (len = 1; len <= MAXBITS; len++) {
        left <<= 1;
        left -= count[len];
  41cb36:	0f b7 4c 24 64       	movzwl 0x64(%rsp),%ecx
    if (root < min) root = min;

    /* check for an over-subscribed or incomplete set of lengths */
    left = 1;
    for (len = 1; len <= MAXBITS; len++) {
        left <<= 1;
  41cb3b:	45 01 db             	add    %r11d,%r11d
        left -= count[len];
        if (left < 0) return -1;        /* over-subscribed */
  41cb3e:	41 29 cb             	sub    %ecx,%r11d
  41cb41:	0f 88 45 fe ff ff    	js     41c98c <inflate_table+0x28c>

    /* check for an over-subscribed or incomplete set of lengths */
    left = 1;
    for (len = 1; len <= MAXBITS; len++) {
        left <<= 1;
        left -= count[len];
  41cb47:	0f b7 6c 24 66       	movzwl 0x66(%rsp),%ebp
    if (root < min) root = min;

    /* check for an over-subscribed or incomplete set of lengths */
    left = 1;
    for (len = 1; len <= MAXBITS; len++) {
        left <<= 1;
  41cb4c:	45 01 db             	add    %r11d,%r11d
        left -= count[len];
        if (left < 0) return -1;        /* over-subscribed */
  41cb4f:	41 29 eb             	sub    %ebp,%r11d
  41cb52:	0f 88 34 fe ff ff    	js     41c98c <inflate_table+0x28c>

    /* check for an over-subscribed or incomplete set of lengths */
    left = 1;
    for (len = 1; len <= MAXBITS; len++) {
        left <<= 1;
        left -= count[len];
  41cb58:	44 0f b7 44 24 68    	movzwl 0x68(%rsp),%r8d
    if (root < min) root = min;

    /* check for an over-subscribed or incomplete set of lengths */
    left = 1;
    for (len = 1; len <= MAXBITS; len++) {
        left <<= 1;
  41cb5e:	45 01 db             	add    %r11d,%r11d
        left -= count[len];
        if (left < 0) return -1;        /* over-subscribed */
  41cb61:	45 29 c3             	sub    %r8d,%r11d
  41cb64:	0f 88 22 fe ff ff    	js     41c98c <inflate_table+0x28c>

    /* check for an over-subscribed or incomplete set of lengths */
    left = 1;
    for (len = 1; len <= MAXBITS; len++) {
        left <<= 1;
        left -= count[len];
  41cb6a:	0f b7 74 24 6a       	movzwl 0x6a(%rsp),%esi
    if (root < min) root = min;

    /* check for an over-subscribed or incomplete set of lengths */
    left = 1;
    for (len = 1; len <= MAXBITS; len++) {
        left <<= 1;
  41cb6f:	45 01 db             	add    %r11d,%r11d
        left -= count[len];
        if (left < 0) return -1;        /* over-subscribed */
  41cb72:	41 29 f3             	sub    %esi,%r11d
  41cb75:	0f 88 11 fe ff ff    	js     41c98c <inflate_table+0x28c>

    /* check for an over-subscribed or incomplete set of lengths */
    left = 1;
    for (len = 1; len <= MAXBITS; len++) {
        left <<= 1;
        left -= count[len];
  41cb7b:	44 0f b7 4c 24 6c    	movzwl 0x6c(%rsp),%r9d
    if (root < min) root = min;

    /* check for an over-subscribed or incomplete set of lengths */
    left = 1;
    for (len = 1; len <= MAXBITS; len++) {
        left <<= 1;
  41cb81:	45 01 db             	add    %r11d,%r11d
        left -= count[len];
        if (left < 0) return -1;        /* over-subscribed */
  41cb84:	45 29 cb             	sub    %r9d,%r11d
  41cb87:	0f 88 ff fd ff ff    	js     41c98c <inflate_table+0x28c>
    if (root < min) root = min;

    /* check for an over-subscribed or incomplete set of lengths */
    left = 1;
    for (len = 1; len <= MAXBITS; len++) {
        left <<= 1;
  41cb8d:	45 01 db             	add    %r11d,%r11d
        left -= count[len];
        if (left < 0) return -1;        /* over-subscribed */
  41cb90:	45 39 f3             	cmp    %r14d,%r11d
  41cb93:	0f 88 f3 fd ff ff    	js     41c98c <inflate_table+0x28c>
    }
    if (left > 0 && (type == CODES || max != 1))
  41cb99:	74 12                	je     41cbad <inflate_table+0x4ad>
  41cb9b:	41 83 fd 01          	cmp    $0x1,%r13d
  41cb9f:	0f 85 51 0a 00 00    	jne    41d5f6 <inflate_table+0xef6>
  41cba5:	85 ff                	test   %edi,%edi
  41cba7:	0f 84 49 0a 00 00    	je     41d5f6 <inflate_table+0xef6>
        return -1;                      /* incomplete set */

    /* generate offsets into symbol table for each length for sorting */
    offs[1] = 0;
    for (len = 1; len < MAXBITS; len++)
        offs[len + 1] = offs[len] + count[len];
  41cbad:	44 89 d0             	mov    %r10d,%eax
  41cbb0:	66 03 44 24 54       	add    0x54(%rsp),%ax
    }
    if (left > 0 && (type == CODES || max != 1))
        return -1;                      /* incomplete set */

    /* generate offsets into symbol table for each length for sorting */
    offs[1] = 0;
  41cbb5:	45 31 f6             	xor    %r14d,%r14d
  41cbb8:	66 44 89 74 24 72    	mov    %r14w,0x72(%rsp)
    for (len = 1; len < MAXBITS; len++)
        offs[len + 1] = offs[len] + count[len];
  41cbbe:	66 44 89 54 24 74    	mov    %r10w,0x74(%rsp)
  41cbc4:	66 89 44 24 76       	mov    %ax,0x76(%rsp)
  41cbc9:	66 03 44 24 56       	add    0x56(%rsp),%ax
  41cbce:	66 89 44 24 78       	mov    %ax,0x78(%rsp)
  41cbd3:	66 03 44 24 58       	add    0x58(%rsp),%ax
  41cbd8:	66 89 44 24 7a       	mov    %ax,0x7a(%rsp)
  41cbdd:	66 03 44 24 5a       	add    0x5a(%rsp),%ax
  41cbe2:	66 89 44 24 7c       	mov    %ax,0x7c(%rsp)
  41cbe7:	66 03 44 24 5c       	add    0x5c(%rsp),%ax
  41cbec:	66 89 44 24 7e       	mov    %ax,0x7e(%rsp)
  41cbf1:	66 03 44 24 5e       	add    0x5e(%rsp),%ax
  41cbf6:	66 89 84 24 80 00 00 	mov    %ax,0x80(%rsp)
  41cbfd:	00 
  41cbfe:	66 03 44 24 60       	add    0x60(%rsp),%ax
  41cc03:	66 89 84 24 82 00 00 	mov    %ax,0x82(%rsp)
  41cc0a:	00 
  41cc0b:	66 03 44 24 62       	add    0x62(%rsp),%ax
  41cc10:	66 89 84 24 84 00 00 	mov    %ax,0x84(%rsp)
  41cc17:	00 
  41cc18:	66 03 44 24 64       	add    0x64(%rsp),%ax
  41cc1d:	66 89 84 24 86 00 00 	mov    %ax,0x86(%rsp)
  41cc24:	00 
  41cc25:	66 03 44 24 66       	add    0x66(%rsp),%ax
  41cc2a:	66 89 84 24 88 00 00 	mov    %ax,0x88(%rsp)
  41cc31:	00 
  41cc32:	66 03 44 24 68       	add    0x68(%rsp),%ax
  41cc37:	66 89 84 24 8a 00 00 	mov    %ax,0x8a(%rsp)
  41cc3e:	00 
  41cc3f:	66 03 44 24 6a       	add    0x6a(%rsp),%ax
  41cc44:	66 89 84 24 8c 00 00 	mov    %ax,0x8c(%rsp)
  41cc4b:	00 
  41cc4c:	66 03 44 24 6c       	add    0x6c(%rsp),%ax

    /* sort symbols by length, by symbol order within each length */
    for (sym = 0; sym < codes; sym++)
  41cc51:	85 d2                	test   %edx,%edx
        return -1;                      /* incomplete set */

    /* generate offsets into symbol table for each length for sorting */
    offs[1] = 0;
    for (len = 1; len < MAXBITS; len++)
        offs[len + 1] = offs[len] + count[len];
  41cc53:	66 89 84 24 8e 00 00 	mov    %ax,0x8e(%rsp)
  41cc5a:	00 

    /* sort symbols by length, by symbol order within each length */
    for (sym = 0; sym < codes; sym++)
  41cc5b:	0f 84 ef 02 00 00    	je     41cf50 <inflate_table+0x850>
        if (lens[sym] != 0) work[offs[lens[sym]]++] = (unsigned short)sym;
  41cc61:	4c 8b 5c 24 18       	mov    0x18(%rsp),%r11
  41cc66:	44 8d 52 ff          	lea    -0x1(%rdx),%r10d
  41cc6a:	41 83 e2 07          	and    $0x7,%r10d
  41cc6e:	41 0f b7 1b          	movzwl (%r11),%ebx
  41cc72:	66 85 db             	test   %bx,%bx
  41cc75:	74 1a                	je     41cc91 <inflate_table+0x591>
  41cc77:	0f b7 4c 5c 70       	movzwl 0x70(%rsp,%rbx,2),%ecx
  41cc7c:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  41cc81:	45 31 c0             	xor    %r8d,%r8d
  41cc84:	8d 69 01             	lea    0x1(%rcx),%ebp
  41cc87:	66 44 89 04 4e       	mov    %r8w,(%rsi,%rcx,2)
  41cc8c:	66 89 6c 5c 70       	mov    %bp,0x70(%rsp,%rbx,2)
    offs[1] = 0;
    for (len = 1; len < MAXBITS; len++)
        offs[len + 1] = offs[len] + count[len];

    /* sort symbols by length, by symbol order within each length */
    for (sym = 0; sym < codes; sym++)
  41cc91:	83 fa 01             	cmp    $0x1,%edx
  41cc94:	41 be 01 00 00 00    	mov    $0x1,%r14d
  41cc9a:	0f 86 b0 02 00 00    	jbe    41cf50 <inflate_table+0x850>
  41cca0:	45 85 d2             	test   %r10d,%r10d
  41cca3:	0f 84 7c 01 00 00    	je     41ce25 <inflate_table+0x725>
  41cca9:	41 83 fa 01          	cmp    $0x1,%r10d
  41ccad:	0f 84 3d 01 00 00    	je     41cdf0 <inflate_table+0x6f0>
  41ccb3:	41 83 fa 02          	cmp    $0x2,%r10d
  41ccb7:	0f 84 05 01 00 00    	je     41cdc2 <inflate_table+0x6c2>
  41ccbd:	41 83 fa 03          	cmp    $0x3,%r10d
  41ccc1:	0f 84 d1 00 00 00    	je     41cd98 <inflate_table+0x698>
  41ccc7:	41 83 fa 04          	cmp    $0x4,%r10d
  41cccb:	0f 84 9b 00 00 00    	je     41cd6c <inflate_table+0x66c>
  41ccd1:	41 83 fa 05          	cmp    $0x5,%r10d
  41ccd5:	74 67                	je     41cd3e <inflate_table+0x63e>
  41ccd7:	41 83 fa 06          	cmp    $0x6,%r10d
  41ccdb:	74 32                	je     41cd0f <inflate_table+0x60f>
        if (lens[sym] != 0) work[offs[lens[sym]]++] = (unsigned short)sym;
  41ccdd:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
  41cce2:	43 0f b7 04 71       	movzwl (%r9,%r14,2),%eax
  41cce7:	66 85 c0             	test   %ax,%ax
  41ccea:	74 1f                	je     41cd0b <inflate_table+0x60b>
  41ccec:	44 0f b7 54 44 70    	movzwl 0x70(%rsp,%rax,2),%r10d
  41ccf2:	48 8b 5c 24 10       	mov    0x10(%rsp),%rbx
  41ccf7:	b9 01 00 00 00       	mov    $0x1,%ecx
  41ccfc:	45 8d 5a 01          	lea    0x1(%r10),%r11d
  41cd00:	66 42 89 0c 53       	mov    %cx,(%rbx,%r10,2)
  41cd05:	66 44 89 5c 44 70    	mov    %r11w,0x70(%rsp,%rax,2)
  41cd0b:	49 83 c6 01          	add    $0x1,%r14
  41cd0f:	48 8b 6c 24 18       	mov    0x18(%rsp),%rbp
  41cd14:	46 0f b7 4c 75 00    	movzwl 0x0(%rbp,%r14,2),%r9d
  41cd1a:	66 45 85 c9          	test   %r9w,%r9w
  41cd1e:	74 1a                	je     41cd3a <inflate_table+0x63a>
  41cd20:	42 0f b7 74 4c 70    	movzwl 0x70(%rsp,%r9,2),%esi
  41cd26:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41cd2b:	44 8d 46 01          	lea    0x1(%rsi),%r8d
  41cd2f:	66 44 89 34 70       	mov    %r14w,(%rax,%rsi,2)
  41cd34:	66 46 89 44 4c 70    	mov    %r8w,0x70(%rsp,%r9,2)
  41cd3a:	49 83 c6 01          	add    $0x1,%r14
  41cd3e:	4c 8b 54 24 18       	mov    0x18(%rsp),%r10
  41cd43:	47 0f b7 1c 72       	movzwl (%r10,%r14,2),%r11d
  41cd48:	66 45 85 db          	test   %r11w,%r11w
  41cd4c:	74 1a                	je     41cd68 <inflate_table+0x668>
  41cd4e:	42 0f b7 4c 5c 70    	movzwl 0x70(%rsp,%r11,2),%ecx
  41cd54:	48 8b 6c 24 10       	mov    0x10(%rsp),%rbp
  41cd59:	8d 59 01             	lea    0x1(%rcx),%ebx
  41cd5c:	66 44 89 74 4d 00    	mov    %r14w,0x0(%rbp,%rcx,2)
  41cd62:	66 42 89 5c 5c 70    	mov    %bx,0x70(%rsp,%r11,2)
  41cd68:	49 83 c6 01          	add    $0x1,%r14
  41cd6c:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
  41cd71:	43 0f b7 04 71       	movzwl (%r9,%r14,2),%eax
  41cd76:	66 85 c0             	test   %ax,%ax
  41cd79:	74 19                	je     41cd94 <inflate_table+0x694>
  41cd7b:	0f b7 74 44 70       	movzwl 0x70(%rsp,%rax,2),%esi
  41cd80:	4c 8b 54 24 10       	mov    0x10(%rsp),%r10
  41cd85:	44 8d 46 01          	lea    0x1(%rsi),%r8d
  41cd89:	66 45 89 34 72       	mov    %r14w,(%r10,%rsi,2)
  41cd8e:	66 44 89 44 44 70    	mov    %r8w,0x70(%rsp,%rax,2)
  41cd94:	49 83 c6 01          	add    $0x1,%r14
  41cd98:	4c 8b 5c 24 18       	mov    0x18(%rsp),%r11
  41cd9d:	43 0f b7 0c 73       	movzwl (%r11,%r14,2),%ecx
  41cda2:	66 85 c9             	test   %cx,%cx
  41cda5:	74 17                	je     41cdbe <inflate_table+0x6be>
  41cda7:	0f b7 6c 4c 70       	movzwl 0x70(%rsp,%rcx,2),%ebp
  41cdac:	4c 8b 4c 24 10       	mov    0x10(%rsp),%r9
  41cdb1:	8d 5d 01             	lea    0x1(%rbp),%ebx
  41cdb4:	66 45 89 34 69       	mov    %r14w,(%r9,%rbp,2)
  41cdb9:	66 89 5c 4c 70       	mov    %bx,0x70(%rsp,%rcx,2)
  41cdbe:	49 83 c6 01          	add    $0x1,%r14
  41cdc2:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  41cdc7:	46 0f b7 14 70       	movzwl (%rax,%r14,2),%r10d
  41cdcc:	66 45 85 d2          	test   %r10w,%r10w
  41cdd0:	74 1a                	je     41cdec <inflate_table+0x6ec>
  41cdd2:	42 0f b7 74 54 70    	movzwl 0x70(%rsp,%r10,2),%esi
  41cdd8:	4c 8b 5c 24 10       	mov    0x10(%rsp),%r11
  41cddd:	44 8d 46 01          	lea    0x1(%rsi),%r8d
  41cde1:	66 45 89 34 73       	mov    %r14w,(%r11,%rsi,2)
  41cde6:	66 46 89 44 54 70    	mov    %r8w,0x70(%rsp,%r10,2)
  41cdec:	49 83 c6 01          	add    $0x1,%r14
  41cdf0:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  41cdf5:	42 0f b7 2c 71       	movzwl (%rcx,%r14,2),%ebp
  41cdfa:	66 85 ed             	test   %bp,%bp
  41cdfd:	74 19                	je     41ce18 <inflate_table+0x718>
  41cdff:	44 0f b7 4c 6c 70    	movzwl 0x70(%rsp,%rbp,2),%r9d
  41ce05:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41ce0a:	41 8d 59 01          	lea    0x1(%r9),%ebx
  41ce0e:	66 46 89 34 48       	mov    %r14w,(%rax,%r9,2)
  41ce13:	66 89 5c 6c 70       	mov    %bx,0x70(%rsp,%rbp,2)
  41ce18:	49 83 c6 01          	add    $0x1,%r14
    offs[1] = 0;
    for (len = 1; len < MAXBITS; len++)
        offs[len + 1] = offs[len] + count[len];

    /* sort symbols by length, by symbol order within each length */
    for (sym = 0; sym < codes; sym++)
  41ce1c:	44 39 f2             	cmp    %r14d,%edx
  41ce1f:	0f 86 2b 01 00 00    	jbe    41cf50 <inflate_table+0x850>
  41ce25:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  41ce2a:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
        if (lens[sym] != 0) work[offs[lens[sym]]++] = (unsigned short)sym;
  41ce2f:	46 0f b7 04 71       	movzwl (%rcx,%r14,2),%r8d
  41ce34:	66 45 85 c0          	test   %r8w,%r8w
  41ce38:	74 15                	je     41ce4f <inflate_table+0x74f>
  41ce3a:	46 0f b7 5c 44 70    	movzwl 0x70(%rsp,%r8,2),%r11d
  41ce40:	45 8d 53 01          	lea    0x1(%r11),%r10d
  41ce44:	66 46 89 34 5e       	mov    %r14w,(%rsi,%r11,2)
  41ce49:	66 46 89 54 44 70    	mov    %r10w,0x70(%rsp,%r8,2)
  41ce4f:	49 83 c6 01          	add    $0x1,%r14
  41ce53:	42 0f b7 2c 71       	movzwl (%rcx,%r14,2),%ebp
  41ce58:	66 85 ed             	test   %bp,%bp
  41ce5b:	74 14                	je     41ce71 <inflate_table+0x771>
  41ce5d:	44 0f b7 4c 6c 70    	movzwl 0x70(%rsp,%rbp,2),%r9d
  41ce63:	41 8d 59 01          	lea    0x1(%r9),%ebx
  41ce67:	66 46 89 34 4e       	mov    %r14w,(%rsi,%r9,2)
  41ce6c:	66 89 5c 6c 70       	mov    %bx,0x70(%rsp,%rbp,2)
  41ce71:	49 8d 46 01          	lea    0x1(%r14),%rax
  41ce75:	44 0f b7 04 41       	movzwl (%rcx,%rax,2),%r8d
  41ce7a:	66 45 85 c0          	test   %r8w,%r8w
  41ce7e:	74 15                	je     41ce95 <inflate_table+0x795>
  41ce80:	46 0f b7 54 44 70    	movzwl 0x70(%rsp,%r8,2),%r10d
  41ce86:	45 8d 5a 01          	lea    0x1(%r10),%r11d
  41ce8a:	66 42 89 04 56       	mov    %ax,(%rsi,%r10,2)
  41ce8f:	66 46 89 5c 44 70    	mov    %r11w,0x70(%rsp,%r8,2)
  41ce95:	49 8d 6e 02          	lea    0x2(%r14),%rbp
  41ce99:	0f b7 1c 69          	movzwl (%rcx,%rbp,2),%ebx
  41ce9d:	66 85 db             	test   %bx,%bx
  41cea0:	74 14                	je     41ceb6 <inflate_table+0x7b6>
  41cea2:	44 0f b7 4c 5c 70    	movzwl 0x70(%rsp,%rbx,2),%r9d
  41cea8:	41 8d 41 01          	lea    0x1(%r9),%eax
  41ceac:	66 42 89 2c 4e       	mov    %bp,(%rsi,%r9,2)
  41ceb1:	66 89 44 5c 70       	mov    %ax,0x70(%rsp,%rbx,2)
  41ceb6:	4d 8d 56 03          	lea    0x3(%r14),%r10
  41ceba:	46 0f b7 04 51       	movzwl (%rcx,%r10,2),%r8d
  41cebf:	66 45 85 c0          	test   %r8w,%r8w
  41cec3:	74 15                	je     41ceda <inflate_table+0x7da>
  41cec5:	42 0f b7 6c 44 70    	movzwl 0x70(%rsp,%r8,2),%ebp
  41cecb:	44 8d 5d 01          	lea    0x1(%rbp),%r11d
  41cecf:	66 44 89 14 6e       	mov    %r10w,(%rsi,%rbp,2)
  41ced4:	66 46 89 5c 44 70    	mov    %r11w,0x70(%rsp,%r8,2)
  41ceda:	49 8d 5e 04          	lea    0x4(%r14),%rbx
  41cede:	0f b7 04 59          	movzwl (%rcx,%rbx,2),%eax
  41cee2:	66 85 c0             	test   %ax,%ax
  41cee5:	74 15                	je     41cefc <inflate_table+0x7fc>
  41cee7:	44 0f b7 4c 44 70    	movzwl 0x70(%rsp,%rax,2),%r9d
  41ceed:	45 8d 51 01          	lea    0x1(%r9),%r10d
  41cef1:	66 42 89 1c 4e       	mov    %bx,(%rsi,%r9,2)
  41cef6:	66 44 89 54 44 70    	mov    %r10w,0x70(%rsp,%rax,2)
  41cefc:	49 8d 6e 05          	lea    0x5(%r14),%rbp
  41cf00:	44 0f b7 04 69       	movzwl (%rcx,%rbp,2),%r8d
  41cf05:	66 45 85 c0          	test   %r8w,%r8w
  41cf09:	74 14                	je     41cf1f <inflate_table+0x81f>
  41cf0b:	42 0f b7 5c 44 70    	movzwl 0x70(%rsp,%r8,2),%ebx
  41cf11:	44 8d 5b 01          	lea    0x1(%rbx),%r11d
  41cf15:	66 89 2c 5e          	mov    %bp,(%rsi,%rbx,2)
  41cf19:	66 46 89 5c 44 70    	mov    %r11w,0x70(%rsp,%r8,2)
  41cf1f:	49 8d 46 06          	lea    0x6(%r14),%rax
  41cf23:	44 0f b7 14 41       	movzwl (%rcx,%rax,2),%r10d
  41cf28:	66 45 85 d2          	test   %r10w,%r10w
  41cf2c:	74 15                	je     41cf43 <inflate_table+0x843>
  41cf2e:	46 0f b7 4c 54 70    	movzwl 0x70(%rsp,%r10,2),%r9d
  41cf34:	41 8d 69 01          	lea    0x1(%r9),%ebp
  41cf38:	66 42 89 04 4e       	mov    %ax,(%rsi,%r9,2)
  41cf3d:	66 42 89 6c 54 70    	mov    %bp,0x70(%rsp,%r10,2)
  41cf43:	49 83 c6 07          	add    $0x7,%r14
    offs[1] = 0;
    for (len = 1; len < MAXBITS; len++)
        offs[len + 1] = offs[len] + count[len];

    /* sort symbols by length, by symbol order within each length */
    for (sym = 0; sym < codes; sym++)
  41cf47:	44 39 f2             	cmp    %r14d,%edx
  41cf4a:	0f 87 df fe ff ff    	ja     41ce2f <inflate_table+0x72f>
       routine permits incomplete codes, so another loop after this one fills
       in the rest of the decoding tables with invalid code markers.
     */

    /* set up for code type */
    switch (type) {
  41cf50:	85 ff                	test   %edi,%edi
  41cf52:	0f 84 9f 00 00 00    	je     41cff7 <inflate_table+0x8f7>
        end = 256;
        break;
    default:            /* DISTS */
        base = dbase;
        extra = dext;
        end = -1;
  41cf58:	83 ff 01             	cmp    $0x1,%edi
  41cf5b:	b9 00 9e 43 00       	mov    $0x439e00,%ecx
  41cf60:	be 7e 9c 43 00       	mov    $0x439c7e,%esi
  41cf65:	48 0f 44 ce          	cmove  %rsi,%rcx
  41cf69:	41 be ff ff ff ff    	mov    $0xffffffff,%r14d
  41cf6f:	ba 00 01 00 00       	mov    $0x100,%edx
  41cf74:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
    len = min;                  /* starting code length */
    next = *table;              /* current table to fill in */
    curr = root;                /* current table index bits */
    drop = 0;                   /* current bits to drop from code for index */
    low = (unsigned)(-1);       /* trigger new sub-table when len > root */
    used = 1U << root;          /* use root table entries */
  41cf79:	0f b6 4c 24 0c       	movzbl 0xc(%rsp),%ecx
        end = 256;
        break;
    default:            /* DISTS */
        base = dbase;
        extra = dext;
        end = -1;
  41cf7e:	41 b8 40 9e 43 00    	mov    $0x439e40,%r8d
  41cf84:	bb be 9c 43 00       	mov    $0x439cbe,%ebx
    len = min;                  /* starting code length */
    next = *table;              /* current table to fill in */
    curr = root;                /* current table index bits */
    drop = 0;                   /* current bits to drop from code for index */
    low = (unsigned)(-1);       /* trigger new sub-table when len > root */
    used = 1U << root;          /* use root table entries */
  41cf89:	41 bb 01 00 00 00    	mov    $0x1,%r11d
        end = 256;
        break;
    default:            /* DISTS */
        base = dbase;
        extra = dext;
        end = -1;
  41cf8f:	44 0f 44 f2          	cmove  %edx,%r14d
  41cf93:	4c 0f 44 c3          	cmove  %rbx,%r8
  41cf97:	44 89 74 24 28       	mov    %r14d,0x28(%rsp)

    /* initialize state for loop */
    huff = 0;                   /* starting code */
    sym = 0;                    /* starting code symbol */
    len = min;                  /* starting code length */
    next = *table;              /* current table to fill in */
  41cf9c:	4d 8b 0f             	mov    (%r15),%r9
        end = 256;
        break;
    default:            /* DISTS */
        base = dbase;
        extra = dext;
        end = -1;
  41cf9f:	4c 89 44 24 38       	mov    %r8,0x38(%rsp)
    len = min;                  /* starting code length */
    next = *table;              /* current table to fill in */
    curr = root;                /* current table index bits */
    drop = 0;                   /* current bits to drop from code for index */
    low = (unsigned)(-1);       /* trigger new sub-table when len > root */
    used = 1U << root;          /* use root table entries */
  41cfa4:	41 d3 e3             	shl    %cl,%r11d
    mask = used - 1;            /* mask for comparing low */

    /* check available table space */
    if (type == LENS && used >= ENOUGH - MAXD)
  41cfa7:	83 ff 01             	cmp    $0x1,%edi
  41cfaa:	0f 94 44 24 4f       	sete   0x4f(%rsp)
  41cfaf:	41 81 fb af 05 00 00 	cmp    $0x5af,%r11d
    len = min;                  /* starting code length */
    next = *table;              /* current table to fill in */
    curr = root;                /* current table index bits */
    drop = 0;                   /* current bits to drop from code for index */
    low = (unsigned)(-1);       /* trigger new sub-table when len > root */
    used = 1U << root;          /* use root table entries */
  41cfb6:	44 89 5c 24 24       	mov    %r11d,0x24(%rsp)
    mask = used - 1;            /* mask for comparing low */

    /* check available table space */
    if (type == LENS && used >= ENOUGH - MAXD)
  41cfbb:	76 69                	jbe    41d026 <inflate_table+0x926>
  41cfbd:	80 7c 24 4f 00       	cmpb   $0x0,0x4f(%rsp)
  41cfc2:	74 62                	je     41d026 <inflate_table+0x926>
        return 1;
  41cfc4:	b8 01 00 00 00       	mov    $0x1,%eax
  41cfc9:	e9 be f9 ff ff       	jmpq   41c98c <inflate_table+0x28c>
        *(*table)++ = this;
        *bits = 1;
        return 0;     /* no symbols, but wait for decoding to report error */
    }
    for (min = 1; min <= MAXBITS; min++)
        if (count[min] != 0) break;
  41cfce:	44 0f b7 54 24 52    	movzwl 0x52(%rsp),%r10d
  41cfd4:	66 45 85 d2          	test   %r10w,%r10w
  41cfd8:	0f 84 fd f9 ff ff    	je     41c9db <inflate_table+0x2db>
    if (root < min) root = min;
  41cfde:	44 8b 44 24 0c       	mov    0xc(%rsp),%r8d
  41cfe3:	45 85 c0             	test   %r8d,%r8d
  41cfe6:	0f 84 19 06 00 00    	je     41d605 <inflate_table+0xf05>
        *(*table)++ = this;
        *bits = 1;
        return 0;     /* no symbols, but wait for decoding to report error */
    }
    for (min = 1; min <= MAXBITS; min++)
        if (count[min] != 0) break;
  41cfec:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  41cff2:	e9 97 fa ff ff       	jmpq   41ca8e <inflate_table+0x38e>
    len = min;                  /* starting code length */
    next = *table;              /* current table to fill in */
    curr = root;                /* current table index bits */
    drop = 0;                   /* current bits to drop from code for index */
    low = (unsigned)(-1);       /* trigger new sub-table when len > root */
    used = 1U << root;          /* use root table entries */
  41cff7:	0f b6 4c 24 0c       	movzbl 0xc(%rsp),%ecx
     */

    /* set up for code type */
    switch (type) {
    case CODES:
        base = extra = work;    /* dummy value--not used */
  41cffc:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    len = min;                  /* starting code length */
    next = *table;              /* current table to fill in */
    curr = root;                /* current table index bits */
    drop = 0;                   /* current bits to drop from code for index */
    low = (unsigned)(-1);       /* trigger new sub-table when len > root */
    used = 1U << root;          /* use root table entries */
  41d001:	bf 01 00 00 00       	mov    $0x1,%edi

    /* initialize state for loop */
    huff = 0;                   /* starting code */
    sym = 0;                    /* starting code symbol */
    len = min;                  /* starting code length */
    next = *table;              /* current table to fill in */
  41d006:	4d 8b 0f             	mov    (%r15),%r9
    low = (unsigned)(-1);       /* trigger new sub-table when len > root */
    used = 1U << root;          /* use root table entries */
    mask = used - 1;            /* mask for comparing low */

    /* check available table space */
    if (type == LENS && used >= ENOUGH - MAXD)
  41d009:	c6 44 24 4f 00       	movb   $0x0,0x4f(%rsp)

    /* set up for code type */
    switch (type) {
    case CODES:
        base = extra = work;    /* dummy value--not used */
        end = 19;
  41d00e:	c7 44 24 28 13 00 00 	movl   $0x13,0x28(%rsp)
  41d015:	00 
     */

    /* set up for code type */
    switch (type) {
    case CODES:
        base = extra = work;    /* dummy value--not used */
  41d016:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
  41d01b:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
    len = min;                  /* starting code length */
    next = *table;              /* current table to fill in */
    curr = root;                /* current table index bits */
    drop = 0;                   /* current bits to drop from code for index */
    low = (unsigned)(-1);       /* trigger new sub-table when len > root */
    used = 1U << root;          /* use root table entries */
  41d020:	d3 e7                	shl    %cl,%edi
  41d022:	89 7c 24 24          	mov    %edi,0x24(%rsp)
    mask = used - 1;            /* mask for comparing low */
  41d026:	44 8b 54 24 24       	mov    0x24(%rsp),%r10d
  41d02b:	8b 6c 24 0c          	mov    0xc(%rsp),%ebp
  41d02f:	31 f6                	xor    %esi,%esi
  41d031:	c7 44 24 2c ff ff ff 	movl   $0xffffffff,0x2c(%rsp)
  41d038:	ff 
  41d039:	31 db                	xor    %ebx,%ebx
  41d03b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%rsp)
  41d042:	00 
            this.op = (unsigned char)(32 + 64);         /* end of block */
            this.val = 0;
        }

        /* replicate for those indices with low len bits equal to huff */
        incr = 1U << (len - drop);
  41d043:	41 be 01 00 00 00    	mov    $0x1,%r14d
    next = *table;              /* current table to fill in */
    curr = root;                /* current table index bits */
    drop = 0;                   /* current bits to drop from code for index */
    low = (unsigned)(-1);       /* trigger new sub-table when len > root */
    used = 1U << root;          /* use root table entries */
    mask = used - 1;            /* mask for comparing low */
  41d049:	41 83 ea 01          	sub    $0x1,%r10d
  41d04d:	44 89 54 24 48       	mov    %r10d,0x48(%rsp)
  41d052:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

    /* process all codes and make table entries */
    for (;;) {
        /* create table entry */
        this.bits = (unsigned char)(len - drop);
        if ((int)(work[sym]) < end) {
  41d058:	8b 54 24 08          	mov    0x8(%rsp),%edx
  41d05c:	4c 8b 44 24 10       	mov    0x10(%rsp),%r8
        return 1;

    /* process all codes and make table entries */
    for (;;) {
        /* create table entry */
        this.bits = (unsigned char)(len - drop);
  41d061:	45 89 e2             	mov    %r12d,%r10d
  41d064:	41 29 da             	sub    %ebx,%r10d
        if ((int)(work[sym]) < end) {
  41d067:	45 0f b7 1c 50       	movzwl (%r8,%rdx,2),%r11d
            this.op = (unsigned char)0;
  41d06c:	45 31 c0             	xor    %r8d,%r8d

    /* process all codes and make table entries */
    for (;;) {
        /* create table entry */
        this.bits = (unsigned char)(len - drop);
        if ((int)(work[sym]) < end) {
  41d06f:	44 39 5c 24 28       	cmp    %r11d,0x28(%rsp)
  41d074:	4c 89 df             	mov    %r11,%rdi
  41d077:	7f 1a                	jg     41d093 <inflate_table+0x993>
            this.op = (unsigned char)0;
            this.val = work[sym];
        }
        else if ((int)(work[sym]) > end) {
  41d079:	0f 8d a1 03 00 00    	jge    41d420 <inflate_table+0xd20>
            this.op = (unsigned char)(extra[work[sym]]);
  41d07f:	48 8b 4c 24 40       	mov    0x40(%rsp),%rcx
            this.val = base[work[sym]];
  41d084:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
        if ((int)(work[sym]) < end) {
            this.op = (unsigned char)0;
            this.val = work[sym];
        }
        else if ((int)(work[sym]) > end) {
            this.op = (unsigned char)(extra[work[sym]]);
  41d089:	46 0f b6 04 59       	movzbl (%rcx,%r11,2),%r8d
            this.val = base[work[sym]];
  41d08e:	42 0f b7 3c 58       	movzwl (%rax,%r11,2),%edi
            this.op = (unsigned char)(32 + 64);         /* end of block */
            this.val = 0;
        }

        /* replicate for those indices with low len bits equal to huff */
        incr = 1U << (len - drop);
  41d093:	44 89 e1             	mov    %r12d,%ecx
  41d096:	45 89 f3             	mov    %r14d,%r11d
        fill = 1U << curr;
  41d099:	44 89 f0             	mov    %r14d,%eax
            this.op = (unsigned char)(32 + 64);         /* end of block */
            this.val = 0;
        }

        /* replicate for those indices with low len bits equal to huff */
        incr = 1U << (len - drop);
  41d09c:	29 d9                	sub    %ebx,%ecx
  41d09e:	89 f2                	mov    %esi,%edx
  41d0a0:	41 d3 e3             	shl    %cl,%r11d
        fill = 1U << curr;
  41d0a3:	89 e9                	mov    %ebp,%ecx
  41d0a5:	d3 e0                	shl    %cl,%eax
  41d0a7:	89 d9                	mov    %ebx,%ecx
  41d0a9:	d3 ea                	shr    %cl,%edx
  41d0ab:	89 44 24 20          	mov    %eax,0x20(%rsp)
  41d0af:	89 d1                	mov    %edx,%ecx
  41d0b1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        min = fill;                 /* save offset to next table */
        do {
            fill -= incr;
  41d0b8:	44 29 d8             	sub    %r11d,%eax
            next[(huff >> drop) + fill] = this;
  41d0bb:	8d 14 08             	lea    (%rax,%rcx,1),%edx
        } while (fill != 0);
  41d0be:	85 c0                	test   %eax,%eax
        incr = 1U << (len - drop);
        fill = 1U << curr;
        min = fill;                 /* save offset to next table */
        do {
            fill -= incr;
            next[(huff >> drop) + fill] = this;
  41d0c0:	49 8d 14 91          	lea    (%r9,%rdx,4),%rdx
  41d0c4:	44 88 02             	mov    %r8b,(%rdx)
  41d0c7:	44 88 52 01          	mov    %r10b,0x1(%rdx)
  41d0cb:	66 89 7a 02          	mov    %di,0x2(%rdx)
        } while (fill != 0);
  41d0cf:	75 e7                	jne    41d0b8 <inflate_table+0x9b8>

        /* backwards increment the len-bit code huff */
        incr = 1U << (len - 1);
  41d0d1:	41 8d 4c 24 ff       	lea    -0x1(%r12),%ecx
  41d0d6:	44 89 f7             	mov    %r14d,%edi
  41d0d9:	d3 e7                	shl    %cl,%edi
        while (huff & incr)
  41d0db:	85 f7                	test   %esi,%edi
  41d0dd:	74 07                	je     41d0e6 <inflate_table+0x9e6>
  41d0df:	90                   	nop
            incr >>= 1;
  41d0e0:	d1 ef                	shr    %edi
            next[(huff >> drop) + fill] = this;
        } while (fill != 0);

        /* backwards increment the len-bit code huff */
        incr = 1U << (len - 1);
        while (huff & incr)
  41d0e2:	85 fe                	test   %edi,%esi
  41d0e4:	75 fa                	jne    41d0e0 <inflate_table+0x9e0>
            incr >>= 1;
        if (incr != 0) {
  41d0e6:	85 ff                	test   %edi,%edi
  41d0e8:	0f 84 12 03 00 00    	je     41d400 <inflate_table+0xd00>
            huff &= incr - 1;
  41d0ee:	44 8d 47 ff          	lea    -0x1(%rdi),%r8d
  41d0f2:	44 21 c6             	and    %r8d,%esi
            huff += incr;
  41d0f5:	01 fe                	add    %edi,%esi
        else
            huff = 0;

        /* go to next symbol, update count, len */
        sym++;
        if (--(count[len]) == 0) {
  41d0f7:	45 89 e3             	mov    %r12d,%r11d
        }
        else
            huff = 0;

        /* go to next symbol, update count, len */
        sym++;
  41d0fa:	83 44 24 08 01       	addl   $0x1,0x8(%rsp)
        if (--(count[len]) == 0) {
  41d0ff:	66 42 83 6c 5c 50 01 	subw   $0x1,0x50(%rsp,%r11,2)
  41d106:	75 22                	jne    41d12a <inflate_table+0xa2a>
            if (len == max) break;
  41d108:	45 39 ec             	cmp    %r13d,%r12d
  41d10b:	0f 84 23 03 00 00    	je     41d434 <inflate_table+0xd34>
            len = lens[work[sym]];
  41d111:	44 8b 64 24 08       	mov    0x8(%rsp),%r12d
  41d116:	4c 8b 54 24 10       	mov    0x10(%rsp),%r10
  41d11b:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  41d120:	43 0f b7 04 62       	movzwl (%r10,%r12,2),%eax
  41d125:	44 0f b7 24 42       	movzwl (%rdx,%rax,2),%r12d
        }

        /* create new sub-table if needed */
        if (len > root && (huff & mask) != low) {
  41d12a:	44 3b 64 24 0c       	cmp    0xc(%rsp),%r12d
  41d12f:	0f 86 23 ff ff ff    	jbe    41d058 <inflate_table+0x958>
  41d135:	44 8b 44 24 48       	mov    0x48(%rsp),%r8d
  41d13a:	41 21 f0             	and    %esi,%r8d
  41d13d:	44 3b 44 24 2c       	cmp    0x2c(%rsp),%r8d
  41d142:	0f 84 10 ff ff ff    	je     41d058 <inflate_table+0x958>
            /* if first time, transition to sub-tables */
            if (drop == 0)
                drop = root;

            /* increment past last table */
            next += min;            /* here min is 1 << curr */
  41d148:	8b 6c 24 20          	mov    0x20(%rsp),%ebp
        }

        /* create new sub-table if needed */
        if (len > root && (huff & mask) != low) {
            /* if first time, transition to sub-tables */
            if (drop == 0)
  41d14c:	85 db                	test   %ebx,%ebx
  41d14e:	0f 44 5c 24 0c       	cmove  0xc(%rsp),%ebx
            /* increment past last table */
            next += min;            /* here min is 1 << curr */

            /* determine length of next table */
            curr = len - drop;
            left = (int)(1 << curr);
  41d153:	45 89 f3             	mov    %r14d,%r11d
            /* if first time, transition to sub-tables */
            if (drop == 0)
                drop = root;

            /* increment past last table */
            next += min;            /* here min is 1 << curr */
  41d156:	4d 8d 0c a9          	lea    (%r9,%rbp,4),%r9

            /* determine length of next table */
            curr = len - drop;
  41d15a:	44 89 e5             	mov    %r12d,%ebp
  41d15d:	29 dd                	sub    %ebx,%ebp
            left = (int)(1 << curr);
  41d15f:	89 e9                	mov    %ebp,%ecx
  41d161:	89 ef                	mov    %ebp,%edi
  41d163:	41 d3 e3             	shl    %cl,%r11d
            while (curr + drop < max) {
  41d166:	45 39 e5             	cmp    %r12d,%r13d
  41d169:	0f 86 2b 02 00 00    	jbe    41d39a <inflate_table+0xc9a>
                left -= count[curr + drop];
  41d16f:	45 89 e2             	mov    %r12d,%r10d
  41d172:	42 0f b7 44 54 50    	movzwl 0x50(%rsp,%r10,2),%eax
  41d178:	41 29 c3             	sub    %eax,%r11d
                if (left <= 0) break;
  41d17b:	45 85 db             	test   %r11d,%r11d
  41d17e:	0f 8e 16 02 00 00    	jle    41d39a <inflate_table+0xc9a>
                curr++;
  41d184:	8d 4d 01             	lea    0x1(%rbp),%ecx
                left <<= 1;
  41d187:	45 01 db             	add    %r11d,%r11d
            next += min;            /* here min is 1 << curr */

            /* determine length of next table */
            curr = len - drop;
            left = (int)(1 << curr);
            while (curr + drop < max) {
  41d18a:	8d 3c 19             	lea    (%rcx,%rbx,1),%edi
  41d18d:	41 39 fd             	cmp    %edi,%r13d
  41d190:	0f 86 7a 02 00 00    	jbe    41d410 <inflate_table+0xd10>
                left -= count[curr + drop];
  41d196:	0f b7 54 7c 50       	movzwl 0x50(%rsp,%rdi,2),%edx
  41d19b:	41 29 d3             	sub    %edx,%r11d
                if (left <= 0) break;
  41d19e:	45 85 db             	test   %r11d,%r11d
  41d1a1:	0f 8e 69 02 00 00    	jle    41d410 <inflate_table+0xd10>
                curr++;
  41d1a7:	8d 4d 02             	lea    0x2(%rbp),%ecx
                left <<= 1;
  41d1aa:	45 01 db             	add    %r11d,%r11d
            next += min;            /* here min is 1 << curr */

            /* determine length of next table */
            curr = len - drop;
            left = (int)(1 << curr);
            while (curr + drop < max) {
  41d1ad:	44 8d 14 19          	lea    (%rcx,%rbx,1),%r10d
  41d1b1:	45 39 d5             	cmp    %r10d,%r13d
  41d1b4:	0f 86 56 02 00 00    	jbe    41d410 <inflate_table+0xd10>
                left -= count[curr + drop];
  41d1ba:	42 0f b7 44 54 50    	movzwl 0x50(%rsp,%r10,2),%eax
  41d1c0:	41 29 c3             	sub    %eax,%r11d
                if (left <= 0) break;
  41d1c3:	45 85 db             	test   %r11d,%r11d
  41d1c6:	0f 8e 44 02 00 00    	jle    41d410 <inflate_table+0xd10>
                curr++;
  41d1cc:	8d 7d 03             	lea    0x3(%rbp),%edi
                left <<= 1;
  41d1cf:	45 01 db             	add    %r11d,%r11d
            next += min;            /* here min is 1 << curr */

            /* determine length of next table */
            curr = len - drop;
            left = (int)(1 << curr);
            while (curr + drop < max) {
  41d1d2:	8d 0c 1f             	lea    (%rdi,%rbx,1),%ecx
  41d1d5:	41 39 cd             	cmp    %ecx,%r13d
  41d1d8:	0f 86 4f 02 00 00    	jbe    41d42d <inflate_table+0xd2d>
                left -= count[curr + drop];
  41d1de:	0f b7 54 4c 50       	movzwl 0x50(%rsp,%rcx,2),%edx
  41d1e3:	41 29 d3             	sub    %edx,%r11d
                if (left <= 0) break;
  41d1e6:	45 85 db             	test   %r11d,%r11d
  41d1e9:	0f 8e 3e 02 00 00    	jle    41d42d <inflate_table+0xd2d>
                curr++;
  41d1ef:	8d 4d 04             	lea    0x4(%rbp),%ecx
                left <<= 1;
  41d1f2:	45 01 db             	add    %r11d,%r11d
            next += min;            /* here min is 1 << curr */

            /* determine length of next table */
            curr = len - drop;
            left = (int)(1 << curr);
            while (curr + drop < max) {
  41d1f5:	8d 3c 19             	lea    (%rcx,%rbx,1),%edi
  41d1f8:	41 39 fd             	cmp    %edi,%r13d
  41d1fb:	0f 86 0f 02 00 00    	jbe    41d410 <inflate_table+0xd10>
                left -= count[curr + drop];
  41d201:	44 0f b7 54 7c 50    	movzwl 0x50(%rsp,%rdi,2),%r10d
  41d207:	45 29 d3             	sub    %r10d,%r11d
                if (left <= 0) break;
  41d20a:	45 85 db             	test   %r11d,%r11d
  41d20d:	0f 8e fd 01 00 00    	jle    41d410 <inflate_table+0xd10>
                curr++;
  41d213:	8d 4d 05             	lea    0x5(%rbp),%ecx
                left <<= 1;
  41d216:	45 01 db             	add    %r11d,%r11d
            next += min;            /* here min is 1 << curr */

            /* determine length of next table */
            curr = len - drop;
            left = (int)(1 << curr);
            while (curr + drop < max) {
  41d219:	8d 04 19             	lea    (%rcx,%rbx,1),%eax
  41d21c:	41 39 c5             	cmp    %eax,%r13d
  41d21f:	0f 86 eb 01 00 00    	jbe    41d410 <inflate_table+0xd10>
                left -= count[curr + drop];
  41d225:	0f b7 54 44 50       	movzwl 0x50(%rsp,%rax,2),%edx
  41d22a:	41 29 d3             	sub    %edx,%r11d
                if (left <= 0) break;
  41d22d:	45 85 db             	test   %r11d,%r11d
  41d230:	0f 8e da 01 00 00    	jle    41d410 <inflate_table+0xd10>
                curr++;
  41d236:	8d 4d 06             	lea    0x6(%rbp),%ecx
                left <<= 1;
  41d239:	45 01 db             	add    %r11d,%r11d
            next += min;            /* here min is 1 << curr */

            /* determine length of next table */
            curr = len - drop;
            left = (int)(1 << curr);
            while (curr + drop < max) {
  41d23c:	8d 3c 19             	lea    (%rcx,%rbx,1),%edi
  41d23f:	41 39 fd             	cmp    %edi,%r13d
  41d242:	0f 86 c8 01 00 00    	jbe    41d410 <inflate_table+0xd10>
                left -= count[curr + drop];
  41d248:	44 0f b7 54 7c 50    	movzwl 0x50(%rsp,%rdi,2),%r10d
  41d24e:	45 29 d3             	sub    %r10d,%r11d
                if (left <= 0) break;
  41d251:	45 85 db             	test   %r11d,%r11d
  41d254:	0f 8e b6 01 00 00    	jle    41d410 <inflate_table+0xd10>
                curr++;
  41d25a:	8d 4d 07             	lea    0x7(%rbp),%ecx
                left <<= 1;
  41d25d:	45 01 db             	add    %r11d,%r11d
            next += min;            /* here min is 1 << curr */

            /* determine length of next table */
            curr = len - drop;
            left = (int)(1 << curr);
            while (curr + drop < max) {
  41d260:	8d 04 19             	lea    (%rcx,%rbx,1),%eax
  41d263:	41 39 c5             	cmp    %eax,%r13d
  41d266:	0f 86 a4 01 00 00    	jbe    41d410 <inflate_table+0xd10>
                left -= count[curr + drop];
  41d26c:	0f b7 54 44 50       	movzwl 0x50(%rsp,%rax,2),%edx
  41d271:	41 29 d3             	sub    %edx,%r11d
                if (left <= 0) break;
  41d274:	45 85 db             	test   %r11d,%r11d
  41d277:	0f 8e 93 01 00 00    	jle    41d410 <inflate_table+0xd10>
                curr++;
  41d27d:	8d 4d 08             	lea    0x8(%rbp),%ecx
                left <<= 1;
  41d280:	45 01 db             	add    %r11d,%r11d
            next += min;            /* here min is 1 << curr */

            /* determine length of next table */
            curr = len - drop;
            left = (int)(1 << curr);
            while (curr + drop < max) {
  41d283:	8d 3c 19             	lea    (%rcx,%rbx,1),%edi
  41d286:	41 39 fd             	cmp    %edi,%r13d
  41d289:	0f 86 81 01 00 00    	jbe    41d410 <inflate_table+0xd10>
                left -= count[curr + drop];
  41d28f:	44 0f b7 54 7c 50    	movzwl 0x50(%rsp,%rdi,2),%r10d
  41d295:	45 29 d3             	sub    %r10d,%r11d
                if (left <= 0) break;
  41d298:	45 85 db             	test   %r11d,%r11d
  41d29b:	0f 8e 6f 01 00 00    	jle    41d410 <inflate_table+0xd10>
                curr++;
  41d2a1:	8d 4d 09             	lea    0x9(%rbp),%ecx
                left <<= 1;
  41d2a4:	45 01 db             	add    %r11d,%r11d
            next += min;            /* here min is 1 << curr */

            /* determine length of next table */
            curr = len - drop;
            left = (int)(1 << curr);
            while (curr + drop < max) {
  41d2a7:	8d 04 19             	lea    (%rcx,%rbx,1),%eax
  41d2aa:	41 39 c5             	cmp    %eax,%r13d
  41d2ad:	0f 86 5d 01 00 00    	jbe    41d410 <inflate_table+0xd10>
                left -= count[curr + drop];
  41d2b3:	0f b7 54 44 50       	movzwl 0x50(%rsp,%rax,2),%edx
  41d2b8:	41 29 d3             	sub    %edx,%r11d
                if (left <= 0) break;
  41d2bb:	45 85 db             	test   %r11d,%r11d
  41d2be:	0f 8e 4c 01 00 00    	jle    41d410 <inflate_table+0xd10>
                curr++;
  41d2c4:	8d 4d 0a             	lea    0xa(%rbp),%ecx
                left <<= 1;
  41d2c7:	45 01 db             	add    %r11d,%r11d
            next += min;            /* here min is 1 << curr */

            /* determine length of next table */
            curr = len - drop;
            left = (int)(1 << curr);
            while (curr + drop < max) {
  41d2ca:	8d 3c 19             	lea    (%rcx,%rbx,1),%edi
  41d2cd:	41 39 fd             	cmp    %edi,%r13d
  41d2d0:	0f 86 3a 01 00 00    	jbe    41d410 <inflate_table+0xd10>
                left -= count[curr + drop];
  41d2d6:	44 0f b7 54 7c 50    	movzwl 0x50(%rsp,%rdi,2),%r10d
  41d2dc:	45 29 d3             	sub    %r10d,%r11d
                if (left <= 0) break;
  41d2df:	45 85 db             	test   %r11d,%r11d
  41d2e2:	0f 8e 28 01 00 00    	jle    41d410 <inflate_table+0xd10>
                curr++;
  41d2e8:	8d 4d 0b             	lea    0xb(%rbp),%ecx
                left <<= 1;
  41d2eb:	45 01 db             	add    %r11d,%r11d
            next += min;            /* here min is 1 << curr */

            /* determine length of next table */
            curr = len - drop;
            left = (int)(1 << curr);
            while (curr + drop < max) {
  41d2ee:	8d 04 19             	lea    (%rcx,%rbx,1),%eax
  41d2f1:	41 39 c5             	cmp    %eax,%r13d
  41d2f4:	0f 86 16 01 00 00    	jbe    41d410 <inflate_table+0xd10>
                left -= count[curr + drop];
  41d2fa:	0f b7 54 44 50       	movzwl 0x50(%rsp,%rax,2),%edx
  41d2ff:	41 29 d3             	sub    %edx,%r11d
                if (left <= 0) break;
  41d302:	45 85 db             	test   %r11d,%r11d
  41d305:	0f 8e 05 01 00 00    	jle    41d410 <inflate_table+0xd10>
                curr++;
  41d30b:	8d 4d 0c             	lea    0xc(%rbp),%ecx
                left <<= 1;
  41d30e:	45 01 db             	add    %r11d,%r11d
            next += min;            /* here min is 1 << curr */

            /* determine length of next table */
            curr = len - drop;
            left = (int)(1 << curr);
            while (curr + drop < max) {
  41d311:	8d 3c 19             	lea    (%rcx,%rbx,1),%edi
  41d314:	41 39 fd             	cmp    %edi,%r13d
  41d317:	0f 86 f3 00 00 00    	jbe    41d410 <inflate_table+0xd10>
                left -= count[curr + drop];
  41d31d:	44 0f b7 54 7c 50    	movzwl 0x50(%rsp,%rdi,2),%r10d
  41d323:	45 29 d3             	sub    %r10d,%r11d
                if (left <= 0) break;
  41d326:	45 85 db             	test   %r11d,%r11d
  41d329:	0f 8e e1 00 00 00    	jle    41d410 <inflate_table+0xd10>
                curr++;
  41d32f:	8d 4d 0d             	lea    0xd(%rbp),%ecx
                left <<= 1;
  41d332:	45 01 db             	add    %r11d,%r11d
            next += min;            /* here min is 1 << curr */

            /* determine length of next table */
            curr = len - drop;
            left = (int)(1 << curr);
            while (curr + drop < max) {
  41d335:	8d 04 19             	lea    (%rcx,%rbx,1),%eax
  41d338:	41 39 c5             	cmp    %eax,%r13d
  41d33b:	0f 86 cf 00 00 00    	jbe    41d410 <inflate_table+0xd10>
                left -= count[curr + drop];
  41d341:	0f b7 54 44 50       	movzwl 0x50(%rsp,%rax,2),%edx
  41d346:	41 29 d3             	sub    %edx,%r11d
                if (left <= 0) break;
  41d349:	45 85 db             	test   %r11d,%r11d
  41d34c:	0f 8e be 00 00 00    	jle    41d410 <inflate_table+0xd10>
                curr++;
  41d352:	8d 4d 0e             	lea    0xe(%rbp),%ecx
                left <<= 1;
  41d355:	45 01 db             	add    %r11d,%r11d
            next += min;            /* here min is 1 << curr */

            /* determine length of next table */
            curr = len - drop;
            left = (int)(1 << curr);
            while (curr + drop < max) {
  41d358:	8d 3c 19             	lea    (%rcx,%rbx,1),%edi
  41d35b:	41 39 fd             	cmp    %edi,%r13d
  41d35e:	0f 86 ac 00 00 00    	jbe    41d410 <inflate_table+0xd10>
                left -= count[curr + drop];
  41d364:	44 0f b7 54 7c 50    	movzwl 0x50(%rsp,%rdi,2),%r10d
  41d36a:	45 29 d3             	sub    %r10d,%r11d
                if (left <= 0) break;
  41d36d:	45 85 db             	test   %r11d,%r11d
  41d370:	0f 8e 9a 00 00 00    	jle    41d410 <inflate_table+0xd10>
                curr++;
  41d376:	8d 4d 0f             	lea    0xf(%rbp),%ecx
                left <<= 1;
  41d379:	45 01 db             	add    %r11d,%r11d
            next += min;            /* here min is 1 << curr */

            /* determine length of next table */
            curr = len - drop;
            left = (int)(1 << curr);
            while (curr + drop < max) {
  41d37c:	8d 04 19             	lea    (%rcx,%rbx,1),%eax
  41d37f:	41 39 c5             	cmp    %eax,%r13d
  41d382:	0f 86 88 00 00 00    	jbe    41d410 <inflate_table+0xd10>
                left -= count[curr + drop];
  41d388:	0f b7 54 44 50       	movzwl 0x50(%rsp,%rax,2),%edx
                if (left <= 0) break;
                curr++;
  41d38d:	83 c5 10             	add    $0x10,%ebp
  41d390:	89 ef                	mov    %ebp,%edi

            /* determine length of next table */
            curr = len - drop;
            left = (int)(1 << curr);
            while (curr + drop < max) {
                left -= count[curr + drop];
  41d392:	41 29 d3             	sub    %edx,%r11d
                if (left <= 0) break;
  41d395:	45 85 db             	test   %r11d,%r11d
  41d398:	7e 76                	jle    41d410 <inflate_table+0xd10>
                curr++;
                left <<= 1;
            }

            /* check for enough space */
            used += 1U << curr;
  41d39a:	45 89 f3             	mov    %r14d,%r11d
  41d39d:	89 f9                	mov    %edi,%ecx
  41d39f:	41 d3 e3             	shl    %cl,%r11d
  41d3a2:	44 01 5c 24 24       	add    %r11d,0x24(%rsp)
  41d3a7:	44 8b 54 24 24       	mov    0x24(%rsp),%r10d
            if (type == LENS && used >= ENOUGH - MAXD)
  41d3ac:	41 81 fa af 05 00 00 	cmp    $0x5af,%r10d
  41d3b3:	76 0b                	jbe    41d3c0 <inflate_table+0xcc0>
  41d3b5:	80 7c 24 4f 00       	cmpb   $0x0,0x4f(%rsp)
  41d3ba:	0f 85 04 fc ff ff    	jne    41cfc4 <inflate_table+0x8c4>
                return 1;

            /* point entry in root table to sub-table */
            low = huff & mask;
            (*table)[low].op = (unsigned char)curr;
  41d3c0:	49 8b 17             	mov    (%r15),%rdx
  41d3c3:	44 89 c0             	mov    %r8d,%eax
            (*table)[low].bits = (unsigned char)root;
  41d3c6:	0f b6 7c 24 0c       	movzbl 0xc(%rsp),%edi
            if (type == LENS && used >= ENOUGH - MAXD)
                return 1;

            /* point entry in root table to sub-table */
            low = huff & mask;
            (*table)[low].op = (unsigned char)curr;
  41d3cb:	4c 8d 1c 85 00 00 00 	lea    0x0(,%rax,4),%r11
  41d3d2:	00 
            (*table)[low].bits = (unsigned char)root;
            (*table)[low].val = (unsigned short)(next - *table);
  41d3d3:	44 89 44 24 2c       	mov    %r8d,0x2c(%rsp)
            if (type == LENS && used >= ENOUGH - MAXD)
                return 1;

            /* point entry in root table to sub-table */
            low = huff & mask;
            (*table)[low].op = (unsigned char)curr;
  41d3d8:	40 88 2c 82          	mov    %bpl,(%rdx,%rax,4)
            (*table)[low].bits = (unsigned char)root;
  41d3dc:	49 8b 0f             	mov    (%r15),%rcx
            (*table)[low].val = (unsigned short)(next - *table);
  41d3df:	4c 89 c8             	mov    %r9,%rax
                return 1;

            /* point entry in root table to sub-table */
            low = huff & mask;
            (*table)[low].op = (unsigned char)curr;
            (*table)[low].bits = (unsigned char)root;
  41d3e2:	42 88 7c 19 01       	mov    %dil,0x1(%rcx,%r11,1)
            (*table)[low].val = (unsigned short)(next - *table);
  41d3e7:	4d 8b 17             	mov    (%r15),%r10
  41d3ea:	4c 29 d0             	sub    %r10,%rax
  41d3ed:	48 c1 f8 02          	sar    $0x2,%rax
  41d3f1:	66 43 89 44 1a 02    	mov    %ax,0x2(%r10,%r11,1)
  41d3f7:	e9 5c fc ff ff       	jmpq   41d058 <inflate_table+0x958>
  41d3fc:	0f 1f 40 00          	nopl   0x0(%rax)
        if (incr != 0) {
            huff &= incr - 1;
            huff += incr;
        }
        else
            huff = 0;
  41d400:	31 f6                	xor    %esi,%esi
  41d402:	e9 f0 fc ff ff       	jmpq   41d0f7 <inflate_table+0x9f7>
  41d407:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  41d40e:	00 00 
  41d410:	89 cd                	mov    %ecx,%ebp
            curr = len - drop;
            left = (int)(1 << curr);
            while (curr + drop < max) {
                left -= count[curr + drop];
                if (left <= 0) break;
                curr++;
  41d412:	89 cf                	mov    %ecx,%edi
  41d414:	eb 84                	jmp    41d39a <inflate_table+0xc9a>
  41d416:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41d41d:	00 00 00 
            this.op = (unsigned char)(extra[work[sym]]);
            this.val = base[work[sym]];
        }
        else {
            this.op = (unsigned char)(32 + 64);         /* end of block */
            this.val = 0;
  41d420:	31 ff                	xor    %edi,%edi
        else if ((int)(work[sym]) > end) {
            this.op = (unsigned char)(extra[work[sym]]);
            this.val = base[work[sym]];
        }
        else {
            this.op = (unsigned char)(32 + 64);         /* end of block */
  41d422:	41 b8 60 00 00 00    	mov    $0x60,%r8d
  41d428:	e9 66 fc ff ff       	jmpq   41d093 <inflate_table+0x993>
            curr = len - drop;
            left = (int)(1 << curr);
            while (curr + drop < max) {
                left -= count[curr + drop];
                if (left <= 0) break;
                curr++;
  41d42d:	89 fd                	mov    %edi,%ebp
  41d42f:	e9 66 ff ff ff       	jmpq   41d39a <inflate_table+0xc9a>
       drops back to the root table to fill in any remaining entries there.
     */
    this.op = (unsigned char)64;                /* invalid code marker */
    this.bits = (unsigned char)(len - drop);
    this.val = (unsigned short)0;
    while (huff != 0) {
  41d434:	85 f6                	test   %esi,%esi
        /* when done with sub-table, drop back to root table */
        if (drop != 0 && (huff & mask) != low) {
            drop = 0;
            len = root;
            next = *table;
            this.bits = (unsigned char)len;
  41d436:	44 0f b6 74 24 0c    	movzbl 0xc(%rsp),%r14d

        /* put invalid code marker in table */
        next[huff >> drop] = this;

        /* backwards increment the len-bit code huff */
        incr = 1U << (len - 1);
  41d43c:	41 bc 01 00 00 00    	mov    $0x1,%r12d
       drops back to the root table to fill in any remaining entries there.
     */
    this.op = (unsigned char)64;                /* invalid code marker */
    this.bits = (unsigned char)(len - drop);
    this.val = (unsigned short)0;
    while (huff != 0) {
  41d442:	74 64                	je     41d4a8 <inflate_table+0xda8>
  41d444:	44 8b 44 24 2c       	mov    0x2c(%rsp),%r8d
  41d449:	44 8b 5c 24 48       	mov    0x48(%rsp),%r11d
  41d44e:	66 90                	xchg   %ax,%ax
  41d450:	31 c9                	xor    %ecx,%ecx
        /* when done with sub-table, drop back to root table */
        if (drop != 0 && (huff & mask) != low) {
  41d452:	85 db                	test   %ebx,%ebx
  41d454:	74 17                	je     41d46d <inflate_table+0xd6d>
  41d456:	89 f5                	mov    %esi,%ebp
  41d458:	44 21 dd             	and    %r11d,%ebp
  41d45b:	44 39 c5             	cmp    %r8d,%ebp
  41d45e:	74 68                	je     41d4c8 <inflate_table+0xdc8>
            drop = 0;
            len = root;
            next = *table;
  41d460:	4d 8b 0f             	mov    (%r15),%r9
            this.bits = (unsigned char)len;
  41d463:	44 8b 6c 24 0c       	mov    0xc(%rsp),%r13d
  41d468:	45 89 f2             	mov    %r14d,%r10d
    this.bits = (unsigned char)(len - drop);
    this.val = (unsigned short)0;
    while (huff != 0) {
        /* when done with sub-table, drop back to root table */
        if (drop != 0 && (huff & mask) != low) {
            drop = 0;
  41d46b:	31 db                	xor    %ebx,%ebx
            next = *table;
            this.bits = (unsigned char)len;
        }

        /* put invalid code marker in table */
        next[huff >> drop] = this;
  41d46d:	89 f2                	mov    %esi,%edx

        /* backwards increment the len-bit code huff */
        incr = 1U << (len - 1);
  41d46f:	44 89 e5             	mov    %r12d,%ebp
            next = *table;
            this.bits = (unsigned char)len;
        }

        /* put invalid code marker in table */
        next[huff >> drop] = this;
  41d472:	31 c0                	xor    %eax,%eax
  41d474:	d3 ea                	shr    %cl,%edx

        /* backwards increment the len-bit code huff */
        incr = 1U << (len - 1);
  41d476:	41 8d 4d ff          	lea    -0x1(%r13),%ecx
            next = *table;
            this.bits = (unsigned char)len;
        }

        /* put invalid code marker in table */
        next[huff >> drop] = this;
  41d47a:	49 8d 3c 91          	lea    (%r9,%rdx,4),%rdi

        /* backwards increment the len-bit code huff */
        incr = 1U << (len - 1);
  41d47e:	d3 e5                	shl    %cl,%ebp
        while (huff & incr)
  41d480:	85 f5                	test   %esi,%ebp
            next = *table;
            this.bits = (unsigned char)len;
        }

        /* put invalid code marker in table */
        next[huff >> drop] = this;
  41d482:	c6 07 40             	movb   $0x40,(%rdi)
  41d485:	44 88 57 01          	mov    %r10b,0x1(%rdi)
  41d489:	66 89 47 02          	mov    %ax,0x2(%rdi)

        /* backwards increment the len-bit code huff */
        incr = 1U << (len - 1);
        while (huff & incr)
  41d48d:	74 07                	je     41d496 <inflate_table+0xd96>
  41d48f:	90                   	nop
            incr >>= 1;
  41d490:	d1 ed                	shr    %ebp
        /* put invalid code marker in table */
        next[huff >> drop] = this;

        /* backwards increment the len-bit code huff */
        incr = 1U << (len - 1);
        while (huff & incr)
  41d492:	85 ee                	test   %ebp,%esi
  41d494:	75 fa                	jne    41d490 <inflate_table+0xd90>
            incr >>= 1;
        if (incr != 0) {
  41d496:	85 ed                	test   %ebp,%ebp
  41d498:	74 0e                	je     41d4a8 <inflate_table+0xda8>
            huff &= incr - 1;
  41d49a:	8d 55 ff             	lea    -0x1(%rbp),%edx
  41d49d:	21 d6                	and    %edx,%esi
       drops back to the root table to fill in any remaining entries there.
     */
    this.op = (unsigned char)64;                /* invalid code marker */
    this.bits = (unsigned char)(len - drop);
    this.val = (unsigned short)0;
    while (huff != 0) {
  41d49f:	01 ee                	add    %ebp,%esi
  41d4a1:	75 ad                	jne    41d450 <inflate_table+0xd50>
  41d4a3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        else
            huff = 0;
    }

    /* set return parameters */
    *table += used;
  41d4a8:	44 8b 6c 24 24       	mov    0x24(%rsp),%r13d
    *bits = root;
  41d4ad:	44 8b 4c 24 0c       	mov    0xc(%rsp),%r9d
    return 0;
  41d4b2:	31 c0                	xor    %eax,%eax
        else
            huff = 0;
    }

    /* set return parameters */
    *table += used;
  41d4b4:	49 c1 e5 02          	shl    $0x2,%r13
  41d4b8:	4d 01 2f             	add    %r13,(%r15)
    *bits = root;
  41d4bb:	4c 8b 7c 24 30       	mov    0x30(%rsp),%r15
  41d4c0:	45 89 0f             	mov    %r9d,(%r15)
    return 0;
  41d4c3:	e9 c4 f4 ff ff       	jmpq   41c98c <inflate_table+0x28c>
  41d4c8:	89 d9                	mov    %ebx,%ecx
  41d4ca:	eb a1                	jmp    41d46d <inflate_table+0xd6d>
    for (sym = 0; sym < codes; sym++)
        count[lens[sym]]++;

    /* bound code lengths, force root to be within code lengths */
    root = *bits;
    for (max = MAXBITS; max >= 1; max--)
  41d4cc:	41 bd 0d 00 00 00    	mov    $0xd,%r13d
  41d4d2:	e9 e4 f4 ff ff       	jmpq   41c9bb <inflate_table+0x2bb>
  41d4d7:	41 bd 0e 00 00 00    	mov    $0xe,%r13d
  41d4dd:	e9 d9 f4 ff ff       	jmpq   41c9bb <inflate_table+0x2bb>
  41d4e2:	41 bd 0f 00 00 00    	mov    $0xf,%r13d
  41d4e8:	e9 ce f4 ff ff       	jmpq   41c9bb <inflate_table+0x2bb>
  41d4ed:	41 bd 0c 00 00 00    	mov    $0xc,%r13d
  41d4f3:	e9 c3 f4 ff ff       	jmpq   41c9bb <inflate_table+0x2bb>
  41d4f8:	41 bd 0a 00 00 00    	mov    $0xa,%r13d
  41d4fe:	e9 b8 f4 ff ff       	jmpq   41c9bb <inflate_table+0x2bb>
  41d503:	41 bd 0b 00 00 00    	mov    $0xb,%r13d
  41d509:	e9 ad f4 ff ff       	jmpq   41c9bb <inflate_table+0x2bb>
  41d50e:	41 bd 08 00 00 00    	mov    $0x8,%r13d
  41d514:	e9 a2 f4 ff ff       	jmpq   41c9bb <inflate_table+0x2bb>
  41d519:	41 bd 09 00 00 00    	mov    $0x9,%r13d
  41d51f:	e9 97 f4 ff ff       	jmpq   41c9bb <inflate_table+0x2bb>
  41d524:	41 bd 05 00 00 00    	mov    $0x5,%r13d
  41d52a:	e9 8c f4 ff ff       	jmpq   41c9bb <inflate_table+0x2bb>
  41d52f:	41 bd 06 00 00 00    	mov    $0x6,%r13d
  41d535:	e9 81 f4 ff ff       	jmpq   41c9bb <inflate_table+0x2bb>
  41d53a:	41 bd 07 00 00 00    	mov    $0x7,%r13d
  41d540:	e9 76 f4 ff ff       	jmpq   41c9bb <inflate_table+0x2bb>
        *(*table)++ = this;             /* make a table to force an error */
        *(*table)++ = this;
        *bits = 1;
        return 0;     /* no symbols, but wait for decoding to report error */
    }
    for (min = 1; min <= MAXBITS; min++)
  41d545:	41 bc 06 00 00 00    	mov    $0x6,%r12d
        if (count[min] != 0) break;
    if (root < min) root = min;
  41d54b:	44 39 64 24 0c       	cmp    %r12d,0xc(%rsp)
  41d550:	0f 82 c1 00 00 00    	jb     41d617 <inflate_table+0xf17>

    /* check for an over-subscribed or incomplete set of lengths */
    left = 1;
    for (len = 1; len <= MAXBITS; len++) {
        left <<= 1;
        left -= count[len];
  41d556:	41 bb 02 00 00 00    	mov    $0x2,%r11d
  41d55c:	e9 45 f5 ff ff       	jmpq   41caa6 <inflate_table+0x3a6>
        *(*table)++ = this;             /* make a table to force an error */
        *(*table)++ = this;
        *bits = 1;
        return 0;     /* no symbols, but wait for decoding to report error */
    }
    for (min = 1; min <= MAXBITS; min++)
  41d561:	41 bc 05 00 00 00    	mov    $0x5,%r12d
  41d567:	eb e2                	jmp    41d54b <inflate_table+0xe4b>
  41d569:	41 bc 04 00 00 00    	mov    $0x4,%r12d
  41d56f:	eb da                	jmp    41d54b <inflate_table+0xe4b>
  41d571:	41 bc 03 00 00 00    	mov    $0x3,%r12d
  41d577:	eb d2                	jmp    41d54b <inflate_table+0xe4b>
  41d579:	41 bc 02 00 00 00    	mov    $0x2,%r12d
  41d57f:	eb ca                	jmp    41d54b <inflate_table+0xe4b>
    for (sym = 0; sym < codes; sym++)
        count[lens[sym]]++;

    /* bound code lengths, force root to be within code lengths */
    root = *bits;
    for (max = MAXBITS; max >= 1; max--)
  41d581:	41 bd 03 00 00 00    	mov    $0x3,%r13d
  41d587:	e9 2f f4 ff ff       	jmpq   41c9bb <inflate_table+0x2bb>
  41d58c:	41 bd 04 00 00 00    	mov    $0x4,%r13d
  41d592:	e9 24 f4 ff ff       	jmpq   41c9bb <inflate_table+0x2bb>
  41d597:	41 bd 02 00 00 00    	mov    $0x2,%r13d
  41d59d:	e9 19 f4 ff ff       	jmpq   41c9bb <inflate_table+0x2bb>
        *(*table)++ = this;             /* make a table to force an error */
        *(*table)++ = this;
        *bits = 1;
        return 0;     /* no symbols, but wait for decoding to report error */
    }
    for (min = 1; min <= MAXBITS; min++)
  41d5a2:	41 bc 07 00 00 00    	mov    $0x7,%r12d
  41d5a8:	eb a1                	jmp    41d54b <inflate_table+0xe4b>
  41d5aa:	41 bc 0d 00 00 00    	mov    $0xd,%r12d
  41d5b0:	eb 99                	jmp    41d54b <inflate_table+0xe4b>
  41d5b2:	41 bc 0c 00 00 00    	mov    $0xc,%r12d
  41d5b8:	eb 91                	jmp    41d54b <inflate_table+0xe4b>
  41d5ba:	41 bc 0b 00 00 00    	mov    $0xb,%r12d
  41d5c0:	eb 89                	jmp    41d54b <inflate_table+0xe4b>
  41d5c2:	41 bc 0a 00 00 00    	mov    $0xa,%r12d
  41d5c8:	eb 81                	jmp    41d54b <inflate_table+0xe4b>
  41d5ca:	41 bc 09 00 00 00    	mov    $0x9,%r12d
  41d5d0:	e9 76 ff ff ff       	jmpq   41d54b <inflate_table+0xe4b>
  41d5d5:	41 bc 08 00 00 00    	mov    $0x8,%r12d
  41d5db:	e9 6b ff ff ff       	jmpq   41d54b <inflate_table+0xe4b>
  41d5e0:	41 bc 0f 00 00 00    	mov    $0xf,%r12d
  41d5e6:	e9 60 ff ff ff       	jmpq   41d54b <inflate_table+0xe4b>
  41d5eb:	41 bc 0e 00 00 00    	mov    $0xe,%r12d
  41d5f1:	e9 55 ff ff ff       	jmpq   41d54b <inflate_table+0xe4b>
    /* check for an over-subscribed or incomplete set of lengths */
    left = 1;
    for (len = 1; len <= MAXBITS; len++) {
        left <<= 1;
        left -= count[len];
        if (left < 0) return -1;        /* over-subscribed */
  41d5f6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  41d5fb:	e9 8c f3 ff ff       	jmpq   41c98c <inflate_table+0x28c>

    /* set return parameters */
    *table += used;
    *bits = root;
    return 0;
}
  41d600:	e8 bb 98 fe ff       	callq  406ec0 <__stack_chk_fail@plt>
  41d605:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%rsp)
  41d60c:	00 
  41d60d:	44 8b 64 24 0c       	mov    0xc(%rsp),%r12d
  41d612:	e9 77 f4 ff ff       	jmpq   41ca8e <inflate_table+0x38e>
        *bits = 1;
        return 0;     /* no symbols, but wait for decoding to report error */
    }
    for (min = 1; min <= MAXBITS; min++)
        if (count[min] != 0) break;
    if (root < min) root = min;
  41d617:	44 89 64 24 0c       	mov    %r12d,0xc(%rsp)
  41d61c:	e9 6d f4 ff ff       	jmpq   41ca8e <inflate_table+0x38e>
  41d621:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  41d628:	00 00 00 
  41d62b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000041d630 <inflate_fast>:
      output space.
 */
void inflate_fast(strm, start)
z_streamp strm;
unsigned start;         /* inflate()'s starting value for strm->avail_out */
{
  41d630:	41 57                	push   %r15
  41d632:	41 56                	push   %r14
  41d634:	49 89 ff             	mov    %rdi,%r15
  41d637:	41 55                	push   %r13
  41d639:	41 54                	push   %r12
  41d63b:	55                   	push   %rbp
  41d63c:	53                   	push   %rbx
  41d63d:	48 83 ec 70          	sub    $0x70,%rsp
    unsigned len;               /* match length, unused bytes */
    unsigned dist;              /* match distance */
    unsigned char FAR *from;    /* where to copy match from */

    /* copy state to local variables */
    state = (struct inflate_state FAR *)strm->state;
  41d641:	4c 8b 6f 38          	mov    0x38(%rdi),%r13
    in = strm->next_in - OFF;
  41d645:	48 8b 07             	mov    (%rdi),%rax
    last = in + (strm->avail_in - 5);
    out = strm->next_out - OFF;
  41d648:	48 8b 4f 18          	mov    0x18(%rdi),%rcx
    unsigned char FAR *from;    /* where to copy match from */

    /* copy state to local variables */
    state = (struct inflate_state FAR *)strm->state;
    in = strm->next_in - OFF;
    last = in + (strm->avail_in - 5);
  41d64c:	8b 57 08             	mov    0x8(%rdi),%edx
    out = strm->next_out - OFF;
    beg = out - (start - strm->avail_out);
  41d64f:	8b 7f 20             	mov    0x20(%rdi),%edi
    dmax = state->dmax;
#endif
    wsize = state->wsize;
    whave = state->whave;
    write = state->write;
    window = state->window;
  41d652:	4d 8b 55 40          	mov    0x40(%r13),%r10
    unsigned dist;              /* match distance */
    unsigned char FAR *from;    /* where to copy match from */

    /* copy state to local variables */
    state = (struct inflate_state FAR *)strm->state;
    in = strm->next_in - OFF;
  41d656:	48 8d 68 ff          	lea    -0x1(%rax),%rbp
    end = out + (strm->avail_out - 257);
#ifdef INFLATE_STRICT
    dmax = state->dmax;
#endif
    wsize = state->wsize;
    whave = state->whave;
  41d65a:	45 8b 45 38          	mov    0x38(%r13),%r8d

    /* copy state to local variables */
    state = (struct inflate_state FAR *)strm->state;
    in = strm->next_in - OFF;
    last = in + (strm->avail_in - 5);
    out = strm->next_out - OFF;
  41d65e:	4c 8d 61 ff          	lea    -0x1(%rcx),%r12
    unsigned char FAR *from;    /* where to copy match from */

    /* copy state to local variables */
    state = (struct inflate_state FAR *)strm->state;
    in = strm->next_in - OFF;
    last = in + (strm->avail_in - 5);
  41d662:	83 ea 05             	sub    $0x5,%edx
    hold = state->hold;
    bits = state->bits;
    lcode = state->lencode;
    dcode = state->distcode;
    lmask = (1U << state->lenbits) - 1;
    dmask = (1U << state->distbits) - 1;
  41d665:	41 8b 4d 74          	mov    0x74(%r13),%ecx
    /* copy state to local variables */
    state = (struct inflate_state FAR *)strm->state;
    in = strm->next_in - OFF;
    last = in + (strm->avail_in - 5);
    out = strm->next_out - OFF;
    beg = out - (start - strm->avail_out);
  41d669:	29 fe                	sub    %edi,%esi
    end = out + (strm->avail_out - 257);
  41d66b:	81 ef 01 01 00 00    	sub    $0x101,%edi
    unsigned char FAR *from;    /* where to copy match from */

    /* copy state to local variables */
    state = (struct inflate_state FAR *)strm->state;
    in = strm->next_in - OFF;
    last = in + (strm->avail_in - 5);
  41d671:	48 01 ea             	add    %rbp,%rdx
    out = strm->next_out - OFF;
    beg = out - (start - strm->avail_out);
    end = out + (strm->avail_out - 257);
  41d674:	4c 01 e7             	add    %r12,%rdi
    hold = state->hold;
    bits = state->bits;
    lcode = state->lencode;
    dcode = state->distcode;
    lmask = (1U << state->lenbits) - 1;
    dmask = (1U << state->distbits) - 1;
  41d677:	b8 01 00 00 00       	mov    $0x1,%eax
#ifdef INFLATE_STRICT
    dmax = state->dmax;
#endif
    wsize = state->wsize;
    whave = state->whave;
    write = state->write;
  41d67c:	45 8b 4d 3c          	mov    0x3c(%r13),%r9d
    unsigned char FAR *from;    /* where to copy match from */

    /* copy state to local variables */
    state = (struct inflate_state FAR *)strm->state;
    in = strm->next_in - OFF;
    last = in + (strm->avail_in - 5);
  41d680:	48 89 54 24 88       	mov    %rdx,-0x78(%rsp)
    out = strm->next_out - OFF;
    beg = out - (start - strm->avail_out);
    end = out + (strm->avail_out - 257);
  41d685:	48 89 7c 24 90       	mov    %rdi,-0x70(%rsp)
    hold = state->hold;
    bits = state->bits;
    lcode = state->lencode;
    dcode = state->distcode;
    lmask = (1U << state->lenbits) - 1;
    dmask = (1U << state->distbits) - 1;
  41d68a:	89 c2                	mov    %eax,%edx
    dmax = state->dmax;
#endif
    wsize = state->wsize;
    whave = state->whave;
    write = state->write;
    window = state->window;
  41d68c:	4c 89 d7             	mov    %r10,%rdi
    hold = state->hold;
    bits = state->bits;
    lcode = state->lencode;
    dcode = state->distcode;
    lmask = (1U << state->lenbits) - 1;
    dmask = (1U << state->distbits) - 1;
  41d68f:	d3 e2                	shl    %cl,%edx
    end = out + (strm->avail_out - 257);
#ifdef INFLATE_STRICT
    dmax = state->dmax;
#endif
    wsize = state->wsize;
    whave = state->whave;
  41d691:	44 89 44 24 d0       	mov    %r8d,-0x30(%rsp)
    window = state->window;
    hold = state->hold;
    bits = state->bits;
    lcode = state->lencode;
    dcode = state->distcode;
    lmask = (1U << state->lenbits) - 1;
  41d696:	41 8b 4d 70          	mov    0x70(%r13),%ecx
  41d69a:	49 89 f8             	mov    %rdi,%r8
    /* copy state to local variables */
    state = (struct inflate_state FAR *)strm->state;
    in = strm->next_in - OFF;
    last = in + (strm->avail_in - 5);
    out = strm->next_out - OFF;
    beg = out - (start - strm->avail_out);
  41d69d:	4c 89 e3             	mov    %r12,%rbx
  41d6a0:	48 29 f3             	sub    %rsi,%rbx
  41d6a3:	49 f7 d8             	neg    %r8
    end = out + (strm->avail_out - 257);
#ifdef INFLATE_STRICT
    dmax = state->dmax;
#endif
    wsize = state->wsize;
  41d6a6:	41 8b 75 34          	mov    0x34(%r13),%esi
    /* copy state to local variables */
    state = (struct inflate_state FAR *)strm->state;
    in = strm->next_in - OFF;
    last = in + (strm->avail_in - 5);
    out = strm->next_out - OFF;
    beg = out - (start - strm->avail_out);
  41d6aa:	48 89 5c 24 c0       	mov    %rbx,-0x40(%rsp)
  41d6af:	41 83 e0 0f          	and    $0xf,%r8d
#ifdef INFLATE_STRICT
    dmax = state->dmax;
#endif
    wsize = state->wsize;
    whave = state->whave;
    write = state->write;
  41d6b3:	44 89 cb             	mov    %r9d,%ebx
    window = state->window;
    hold = state->hold;
    bits = state->bits;
    lcode = state->lencode;
    dcode = state->distcode;
    lmask = (1U << state->lenbits) - 1;
  41d6b6:	d3 e0                	shl    %cl,%eax
  41d6b8:	41 39 d8             	cmp    %ebx,%r8d
    dmask = (1U << state->distbits) - 1;
  41d6bb:	89 54 24 a8          	mov    %edx,-0x58(%rsp)
  41d6bf:	44 0f 47 c3          	cmova  %ebx,%r8d
    beg = out - (start - strm->avail_out);
    end = out + (strm->avail_out - 257);
#ifdef INFLATE_STRICT
    dmax = state->dmax;
#endif
    wsize = state->wsize;
  41d6c3:	89 74 24 a0          	mov    %esi,-0x60(%rsp)
  41d6c7:	8d 70 ff             	lea    -0x1(%rax),%esi
  41d6ca:	89 d8                	mov    %ebx,%eax
    whave = state->whave;
    write = state->write;
  41d6cc:	44 89 4c 24 b8       	mov    %r9d,-0x48(%rsp)
    window = state->window;
  41d6d1:	4c 89 54 24 b0       	mov    %r10,-0x50(%rsp)
  41d6d6:	44 29 c0             	sub    %r8d,%eax
  41d6d9:	48 89 74 24 98       	mov    %rsi,-0x68(%rsp)
  41d6de:	44 89 44 24 bc       	mov    %r8d,-0x44(%rsp)
  41d6e3:	89 04 24             	mov    %eax,(%rsp)
  41d6e6:	83 e8 10             	sub    $0x10,%eax
  41d6e9:	89 de                	mov    %ebx,%esi
  41d6eb:	c1 e8 04             	shr    $0x4,%eax
    hold = state->hold;
  41d6ee:	4d 8b 5d 48          	mov    0x48(%r13),%r11
    bits = state->bits;
  41d6f2:	45 8b 4d 50          	mov    0x50(%r13),%r9d
  41d6f6:	8d 50 01             	lea    0x1(%rax),%edx
    lcode = state->lencode;
  41d6f9:	4d 8b 75 60          	mov    0x60(%r13),%r14
    dcode = state->distcode;
  41d6fd:	4d 8b 55 68          	mov    0x68(%r13),%r10
  41d701:	8d 5b ff             	lea    -0x1(%rbx),%ebx
  41d704:	44 89 c1             	mov    %r8d,%ecx
  41d707:	83 e8 04             	sub    $0x4,%eax
  41d70a:	89 54 24 e8          	mov    %edx,-0x18(%rsp)
                            } while (--op);
                            from = out - dist;  /* rest from output */
                        }
                    }
                    else if (write < op) {      /* wrap around window */
                        from += wsize + write - op;
  41d70e:	03 74 24 a0          	add    -0x60(%rsp),%esi
  41d712:	c1 e2 04             	shl    $0x4,%edx
  41d715:	41 89 d0             	mov    %edx,%r8d
  41d718:	89 54 24 fc          	mov    %edx,-0x4(%rsp)
  41d71c:	89 da                	mov    %ebx,%edx
  41d71e:	29 ca                	sub    %ecx,%edx
  41d720:	89 5c 24 a4          	mov    %ebx,-0x5c(%rsp)
  41d724:	89 44 24 ec          	mov    %eax,-0x14(%rsp)
  41d728:	c1 e8 02             	shr    $0x2,%eax
  41d72b:	89 54 24 f8          	mov    %edx,-0x8(%rsp)
                hold += (unsigned long)(PUP(in)) << bits;
                bits += 8;
                hold += (unsigned long)(PUP(in)) << bits;
                bits += 8;
            }
            this = dcode[hold & dmask];
  41d72f:	8b 54 24 a8          	mov    -0x58(%rsp),%edx
                            } while (--op);
                            from = out - dist;  /* rest from output */
                        }
                    }
                    else if (write < op) {      /* wrap around window */
                        from += wsize + write - op;
  41d733:	89 74 24 04          	mov    %esi,0x4(%rsp)
  41d737:	8b 74 24 a4          	mov    -0x5c(%rsp),%esi
  41d73b:	8d 04 85 04 00 00 00 	lea    0x4(,%rax,4),%eax
  41d742:	45 89 c0             	mov    %r8d,%r8d
  41d745:	89 c9                	mov    %ecx,%ecx
                    if (bits < op) {
                        hold += (unsigned long)(PUP(in)) << bits;
                        bits += 8;
                    }
                }
                dist += (unsigned)hold & ((1U << op) - 1);
  41d747:	bb 01 00 00 00       	mov    $0x1,%ebx
  41d74c:	89 44 24 d4          	mov    %eax,-0x2c(%rsp)
  41d750:	4c 89 44 24 f0       	mov    %r8,-0x10(%rsp)
                    if (op > whave) {
                        strm->msg = (char *)"invalid distance too far back";
                        state->mode = BAD;
                        break;
                    }
                    from = window - OFF;
  41d755:	48 89 f8             	mov    %rdi,%rax
  41d758:	4c 8d 47 ff          	lea    -0x1(%rdi),%r8
                hold += (unsigned long)(PUP(in)) << bits;
                bits += 8;
                hold += (unsigned long)(PUP(in)) << bits;
                bits += 8;
            }
            this = dcode[hold & dmask];
  41d75c:	83 ea 01             	sub    $0x1,%edx
  41d75f:	48 01 cf             	add    %rcx,%rdi
  41d762:	48 83 c0 10          	add    $0x10,%rax
  41d766:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  41d76b:	48 83 c1 02          	add    $0x2,%rcx
  41d76f:	48 83 c6 01          	add    $0x1,%rsi
  41d773:	48 89 54 24 a8       	mov    %rdx,-0x58(%rsp)
                    if (op > whave) {
                        strm->msg = (char *)"invalid distance too far back";
                        state->mode = BAD;
                        break;
                    }
                    from = window - OFF;
  41d778:	4c 89 44 24 c8       	mov    %r8,-0x38(%rsp)
  41d77d:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  41d782:	48 89 74 24 d8       	mov    %rsi,-0x28(%rsp)
  41d787:	48 89 7c 24 e0       	mov    %rdi,-0x20(%rsp)
  41d78c:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
    dmask = (1U << state->distbits) - 1;

    /* decode literals and length/distances until end-of-block or not enough
       input data or output space */
    do {
        if (bits < 15) {
  41d791:	41 83 f9 0e          	cmp    $0xe,%r9d
  41d795:	77 23                	ja     41d7ba <inflate_fast+0x18a>
            hold += (unsigned long)(PUP(in)) << bits;
  41d797:	0f b6 7d 01          	movzbl 0x1(%rbp),%edi
            bits += 8;
            hold += (unsigned long)(PUP(in)) << bits;
  41d79b:	0f b6 45 02          	movzbl 0x2(%rbp),%eax

    /* decode literals and length/distances until end-of-block or not enough
       input data or output space */
    do {
        if (bits < 15) {
            hold += (unsigned long)(PUP(in)) << bits;
  41d79f:	44 89 c9             	mov    %r9d,%ecx
            bits += 8;
            hold += (unsigned long)(PUP(in)) << bits;
  41d7a2:	48 83 c5 02          	add    $0x2,%rbp

    /* decode literals and length/distances until end-of-block or not enough
       input data or output space */
    do {
        if (bits < 15) {
            hold += (unsigned long)(PUP(in)) << bits;
  41d7a6:	48 d3 e7             	shl    %cl,%rdi
            bits += 8;
  41d7a9:	41 8d 49 08          	lea    0x8(%r9),%ecx
            hold += (unsigned long)(PUP(in)) << bits;
            bits += 8;
  41d7ad:	41 83 c1 10          	add    $0x10,%r9d
       input data or output space */
    do {
        if (bits < 15) {
            hold += (unsigned long)(PUP(in)) << bits;
            bits += 8;
            hold += (unsigned long)(PUP(in)) << bits;
  41d7b1:	48 d3 e0             	shl    %cl,%rax
  41d7b4:	48 01 f8             	add    %rdi,%rax
  41d7b7:	49 01 c3             	add    %rax,%r11
            bits += 8;
        }
        this = lcode[hold & lmask];
  41d7ba:	4c 8b 44 24 98       	mov    -0x68(%rsp),%r8
  41d7bf:	4d 21 d8             	and    %r11,%r8
  41d7c2:	eb 27                	jmp    41d7eb <inflate_fast+0x1bb>
  41d7c4:	0f 1f 40 00          	nopl   0x0(%rax)
            Tracevv((stderr, this.val >= 0x20 && this.val < 0x7f ?
                    "inflate:         literal '%c'\n" :
                    "inflate:         literal 0x%02x\n", this.val));
            PUP(out) = (unsigned char)(this.val);
        }
        else if (op & 16) {                     /* length base */
  41d7c8:	a8 10                	test   $0x10,%al
  41d7ca:	0f 85 f0 00 00 00    	jne    41d8c0 <inflate_fast+0x290>
                strm->msg = (char *)"invalid distance code";
                state->mode = BAD;
                break;
            }
        }
        else if ((op & 64) == 0) {              /* 2nd level length code */
  41d7d0:	a8 40                	test   $0x40,%al
  41d7d2:	0f 85 38 03 00 00    	jne    41db10 <inflate_fast+0x4e0>
            this = lcode[this.val + (hold & ((1U << op) - 1))];
  41d7d8:	89 da                	mov    %ebx,%edx
  41d7da:	89 c1                	mov    %eax,%ecx
  41d7dc:	d3 e2                	shl    %cl,%edx
  41d7de:	41 89 d0             	mov    %edx,%r8d
  41d7e1:	41 83 e8 01          	sub    $0x1,%r8d
  41d7e5:	4d 21 d8             	and    %r11,%r8
  41d7e8:	49 01 f0             	add    %rsi,%r8
  41d7eb:	4f 8d 04 86          	lea    (%r14,%r8,4),%r8
  41d7ef:	41 0f b6 48 01       	movzbl 0x1(%r8),%ecx
  41d7f4:	41 0f b6 00          	movzbl (%r8),%eax
  41d7f8:	41 0f b7 70 02       	movzwl 0x2(%r8),%esi
            bits += 8;
        }
        this = lcode[hold & lmask];
      dolen:
        op = (unsigned)(this.bits);
        hold >>= op;
  41d7fd:	0f b6 f9             	movzbl %cl,%edi
  41d800:	49 d3 eb             	shr    %cl,%r11
        bits -= op;
  41d803:	41 29 f9             	sub    %edi,%r9d
        op = (unsigned)(this.op);
        if (op == 0) {                          /* literal */
  41d806:	84 c0                	test   %al,%al
  41d808:	75 be                	jne    41d7c8 <inflate_fast+0x198>
            Tracevv((stderr, this.val >= 0x20 && this.val < 0x7f ?
                    "inflate:         literal '%c'\n" :
                    "inflate:         literal 0x%02x\n", this.val));
            PUP(out) = (unsigned char)(this.val);
  41d80a:	41 88 74 24 01       	mov    %sil,0x1(%r12)
  41d80f:	49 83 c4 01          	add    $0x1,%r12
        else {
            strm->msg = (char *)"invalid literal/length code";
            state->mode = BAD;
            break;
        }
    } while (in < last && out < end);
  41d813:	4c 3b 64 24 90       	cmp    -0x70(%rsp),%r12
  41d818:	73 0e                	jae    41d828 <inflate_fast+0x1f8>
  41d81a:	48 3b 6c 24 88       	cmp    -0x78(%rsp),%rbp
  41d81f:	0f 82 6c ff ff ff    	jb     41d791 <inflate_fast+0x161>
  41d825:	0f 1f 00             	nopl   (%rax)

    /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
    len = bits >> 3;
  41d828:	44 89 cb             	mov    %r9d,%ebx
    in -= len;
    bits -= len << 3;
  41d82b:	44 89 c9             	mov    %r9d,%ecx
    hold &= (1U << bits) - 1;
  41d82e:	41 b9 01 00 00 00    	mov    $0x1,%r9d
            break;
        }
    } while (in < last && out < end);

    /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
    len = bits >> 3;
  41d834:	c1 eb 03             	shr    $0x3,%ebx
    in -= len;
  41d837:	41 89 da             	mov    %ebx,%r10d
    bits -= len << 3;
  41d83a:	c1 e3 03             	shl    $0x3,%ebx
  41d83d:	29 d9                	sub    %ebx,%ecx
        }
    } while (in < last && out < end);

    /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
    len = bits >> 3;
    in -= len;
  41d83f:	4c 29 d5             	sub    %r10,%rbp
    bits -= len << 3;
    hold &= (1U << bits) - 1;
  41d842:	41 d3 e1             	shl    %cl,%r9d
        }
    } while (in < last && out < end);

    /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
    len = bits >> 3;
    in -= len;
  41d845:	49 89 ee             	mov    %rbp,%r14
    bits -= len << 3;
    hold &= (1U << bits) - 1;
  41d848:	41 83 e9 01          	sub    $0x1,%r9d
  41d84c:	4d 21 d9             	and    %r11,%r9

    /* update state and return */
    strm->next_in = in + OFF;
    strm->next_out = out + OFF;
    strm->avail_in = (unsigned)(in < last ? 5 + (last - in) : 5 - (in - last));
  41d84f:	4c 39 74 24 88       	cmp    %r14,-0x78(%rsp)
    in -= len;
    bits -= len << 3;
    hold &= (1U << bits) - 1;

    /* update state and return */
    strm->next_in = in + OFF;
  41d854:	4c 8d 5d 01          	lea    0x1(%rbp),%r11
    strm->next_out = out + OFF;
  41d858:	49 8d 6c 24 01       	lea    0x1(%r12),%rbp
    in -= len;
    bits -= len << 3;
    hold &= (1U << bits) - 1;

    /* update state and return */
    strm->next_in = in + OFF;
  41d85d:	4d 89 1f             	mov    %r11,(%r15)
    strm->next_out = out + OFF;
  41d860:	49 89 6f 18          	mov    %rbp,0x18(%r15)
    strm->avail_in = (unsigned)(in < last ? 5 + (last - in) : 5 - (in - last));
  41d864:	0f 86 be 02 00 00    	jbe    41db28 <inflate_fast+0x4f8>
  41d86a:	48 8b 7c 24 88       	mov    -0x78(%rsp),%rdi
  41d86f:	4c 29 f7             	sub    %r14,%rdi
  41d872:	48 89 fa             	mov    %rdi,%rdx
  41d875:	83 c2 05             	add    $0x5,%edx
    strm->avail_out = (unsigned)(out < end ?
  41d878:	4c 8b 44 24 90       	mov    -0x70(%rsp),%r8
    hold &= (1U << bits) - 1;

    /* update state and return */
    strm->next_in = in + OFF;
    strm->next_out = out + OFF;
    strm->avail_in = (unsigned)(in < last ? 5 + (last - in) : 5 - (in - last));
  41d87d:	41 89 57 08          	mov    %edx,0x8(%r15)
    strm->avail_out = (unsigned)(out < end ?
  41d881:	44 89 c6             	mov    %r8d,%esi
  41d884:	44 29 e6             	sub    %r12d,%esi
  41d887:	81 c6 01 01 00 00    	add    $0x101,%esi
  41d88d:	4d 39 c4             	cmp    %r8,%r12
  41d890:	73 0c                	jae    41d89e <inflate_fast+0x26e>
                                 257 + (end - out) : 257 - (out - end));
  41d892:	4c 89 c6             	mov    %r8,%rsi
  41d895:	4c 29 e6             	sub    %r12,%rsi

    /* update state and return */
    strm->next_in = in + OFF;
    strm->next_out = out + OFF;
    strm->avail_in = (unsigned)(in < last ? 5 + (last - in) : 5 - (in - last));
    strm->avail_out = (unsigned)(out < end ?
  41d898:	81 c6 01 01 00 00    	add    $0x101,%esi
  41d89e:	41 89 77 20          	mov    %esi,0x20(%r15)
                                 257 + (end - out) : 257 - (out - end));
    state->hold = hold;
  41d8a2:	4d 89 4d 48          	mov    %r9,0x48(%r13)
    state->bits = bits;
  41d8a6:	41 89 4d 50          	mov    %ecx,0x50(%r13)
    return;
}
  41d8aa:	48 83 c4 70          	add    $0x70,%rsp
  41d8ae:	5b                   	pop    %rbx
  41d8af:	5d                   	pop    %rbp
  41d8b0:	41 5c                	pop    %r12
  41d8b2:	41 5d                	pop    %r13
  41d8b4:	41 5e                	pop    %r14
  41d8b6:	41 5f                	pop    %r15
  41d8b8:	c3                   	retq   
  41d8b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            PUP(out) = (unsigned char)(this.val);
        }
        else if (op & 16) {                     /* length base */
            len = (unsigned)(this.val);
            op &= 15;                           /* number of extra bits */
            if (op) {
  41d8c0:	83 e0 0f             	and    $0xf,%eax
  41d8c3:	74 38                	je     41d8fd <inflate_fast+0x2cd>
                    "inflate:         literal 0x%02x\n", this.val));
            PUP(out) = (unsigned char)(this.val);
        }
        else if (op & 16) {                     /* length base */
            len = (unsigned)(this.val);
            op &= 15;                           /* number of extra bits */
  41d8c5:	0f b6 d0             	movzbl %al,%edx
            if (op) {
                if (bits < op) {
  41d8c8:	44 39 ca             	cmp    %r9d,%edx
  41d8cb:	76 15                	jbe    41d8e2 <inflate_fast+0x2b2>
                    hold += (unsigned long)(PUP(in)) << bits;
  41d8cd:	0f b6 7d 01          	movzbl 0x1(%rbp),%edi
  41d8d1:	44 89 c9             	mov    %r9d,%ecx
  41d8d4:	48 83 c5 01          	add    $0x1,%rbp
                    bits += 8;
  41d8d8:	41 83 c1 08          	add    $0x8,%r9d
        else if (op & 16) {                     /* length base */
            len = (unsigned)(this.val);
            op &= 15;                           /* number of extra bits */
            if (op) {
                if (bits < op) {
                    hold += (unsigned long)(PUP(in)) << bits;
  41d8dc:	48 d3 e7             	shl    %cl,%rdi
  41d8df:	49 01 fb             	add    %rdi,%r11
                    bits += 8;
                }
                len += (unsigned)hold & ((1U << op) - 1);
  41d8e2:	89 c1                	mov    %eax,%ecx
  41d8e4:	41 89 d8             	mov    %ebx,%r8d
                hold >>= op;
                bits -= op;
  41d8e7:	41 29 d1             	sub    %edx,%r9d
            if (op) {
                if (bits < op) {
                    hold += (unsigned long)(PUP(in)) << bits;
                    bits += 8;
                }
                len += (unsigned)hold & ((1U << op) - 1);
  41d8ea:	41 d3 e0             	shl    %cl,%r8d
                hold >>= op;
  41d8ed:	89 c1                	mov    %eax,%ecx
            if (op) {
                if (bits < op) {
                    hold += (unsigned long)(PUP(in)) << bits;
                    bits += 8;
                }
                len += (unsigned)hold & ((1U << op) - 1);
  41d8ef:	44 89 c7             	mov    %r8d,%edi
  41d8f2:	83 ef 01             	sub    $0x1,%edi
  41d8f5:	44 21 df             	and    %r11d,%edi
                hold >>= op;
  41d8f8:	49 d3 eb             	shr    %cl,%r11
            if (op) {
                if (bits < op) {
                    hold += (unsigned long)(PUP(in)) << bits;
                    bits += 8;
                }
                len += (unsigned)hold & ((1U << op) - 1);
  41d8fb:	01 fe                	add    %edi,%esi
                hold >>= op;
                bits -= op;
            }
            Tracevv((stderr, "inflate:         length %u\n", len));
            if (bits < 15) {
  41d8fd:	41 83 f9 0e          	cmp    $0xe,%r9d
  41d901:	0f 86 39 02 00 00    	jbe    41db40 <inflate_fast+0x510>
                hold += (unsigned long)(PUP(in)) << bits;
                bits += 8;
                hold += (unsigned long)(PUP(in)) << bits;
                bits += 8;
            }
            this = dcode[hold & dmask];
  41d907:	48 8b 7c 24 a8       	mov    -0x58(%rsp),%rdi
  41d90c:	4c 21 df             	and    %r11,%rdi
  41d90f:	49 8d 04 ba          	lea    (%r10,%rdi,4),%rax
  41d913:	eb 21                	jmp    41d936 <inflate_fast+0x306>
  41d915:	0f 1f 00             	nopl   (%rax)
                        if (len > 1)
                            PUP(out) = PUP(from);
                    }
                }
            }
            else if ((op & 64) == 0) {          /* 2nd level distance code */
  41d918:	f6 c2 40             	test   $0x40,%dl
  41d91b:	0f 85 67 02 00 00    	jne    41db88 <inflate_fast+0x558>
                this = dcode[this.val + (hold & ((1U << op) - 1))];
  41d921:	89 d1                	mov    %edx,%ecx
  41d923:	89 df                	mov    %ebx,%edi
  41d925:	d3 e7                	shl    %cl,%edi
  41d927:	89 fa                	mov    %edi,%edx
  41d929:	83 ea 01             	sub    $0x1,%edx
  41d92c:	4c 21 da             	and    %r11,%rdx
  41d92f:	48 01 c2             	add    %rax,%rdx
  41d932:	49 8d 04 92          	lea    (%r10,%rdx,4),%rax
  41d936:	44 0f b6 40 01       	movzbl 0x1(%rax),%r8d
  41d93b:	0f b6 10             	movzbl (%rax),%edx
  41d93e:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  41d942:	44 89 c1             	mov    %r8d,%ecx
            }
            this = dcode[hold & dmask];
          dodist:
            op = (unsigned)(this.bits);
            hold >>= op;
            bits -= op;
  41d945:	45 29 c1             	sub    %r8d,%r9d
                bits += 8;
            }
            this = dcode[hold & dmask];
          dodist:
            op = (unsigned)(this.bits);
            hold >>= op;
  41d948:	49 d3 eb             	shr    %cl,%r11
            bits -= op;
            op = (unsigned)(this.op);
            if (op & 16) {                      /* distance base */
  41d94b:	f6 c2 10             	test   $0x10,%dl
  41d94e:	74 c8                	je     41d918 <inflate_fast+0x2e8>
                dist = (unsigned)(this.val);
                op &= 15;                       /* number of extra bits */
  41d950:	83 e2 0f             	and    $0xf,%edx
  41d953:	0f b6 fa             	movzbl %dl,%edi
                if (bits < op) {
  41d956:	44 39 cf             	cmp    %r9d,%edi
  41d959:	76 21                	jbe    41d97c <inflate_fast+0x34c>
                    hold += (unsigned long)(PUP(in)) << bits;
  41d95b:	44 0f b6 45 01       	movzbl 0x1(%rbp),%r8d
  41d960:	44 89 c9             	mov    %r9d,%ecx
  41d963:	49 d3 e0             	shl    %cl,%r8
                    bits += 8;
  41d966:	41 8d 49 08          	lea    0x8(%r9),%ecx
            op = (unsigned)(this.op);
            if (op & 16) {                      /* distance base */
                dist = (unsigned)(this.val);
                op &= 15;                       /* number of extra bits */
                if (bits < op) {
                    hold += (unsigned long)(PUP(in)) << bits;
  41d96a:	4d 01 c3             	add    %r8,%r11
                    bits += 8;
                    if (bits < op) {
  41d96d:	39 cf                	cmp    %ecx,%edi
  41d96f:	0f 87 3e 17 00 00    	ja     41f0b3 <inflate_fast+0x1a83>
            op = (unsigned)(this.op);
            if (op & 16) {                      /* distance base */
                dist = (unsigned)(this.val);
                op &= 15;                       /* number of extra bits */
                if (bits < op) {
                    hold += (unsigned long)(PUP(in)) << bits;
  41d975:	48 83 c5 01          	add    $0x1,%rbp
  41d979:	41 89 c9             	mov    %ecx,%r9d
                    if (bits < op) {
                        hold += (unsigned long)(PUP(in)) << bits;
                        bits += 8;
                    }
                }
                dist += (unsigned)hold & ((1U << op) - 1);
  41d97c:	89 d1                	mov    %edx,%ecx
  41d97e:	41 89 d8             	mov    %ebx,%r8d
                    state->mode = BAD;
                    break;
                }
#endif
                hold >>= op;
                bits -= op;
  41d981:	41 29 f9             	sub    %edi,%r9d
                    if (bits < op) {
                        hold += (unsigned long)(PUP(in)) << bits;
                        bits += 8;
                    }
                }
                dist += (unsigned)hold & ((1U << op) - 1);
  41d984:	41 d3 e0             	shl    %cl,%r8d
                    strm->msg = (char *)"invalid distance too far back";
                    state->mode = BAD;
                    break;
                }
#endif
                hold >>= op;
  41d987:	89 d1                	mov    %edx,%ecx
                bits -= op;
                Tracevv((stderr, "inflate:         distance %u\n", dist));
                op = (unsigned)(out - beg);     /* max distance in output */
  41d989:	4c 89 e2             	mov    %r12,%rdx
  41d98c:	48 2b 54 24 c0       	sub    -0x40(%rsp),%rdx
                    if (bits < op) {
                        hold += (unsigned long)(PUP(in)) << bits;
                        bits += 8;
                    }
                }
                dist += (unsigned)hold & ((1U << op) - 1);
  41d991:	41 83 e8 01          	sub    $0x1,%r8d
  41d995:	45 21 d8             	and    %r11d,%r8d
                    strm->msg = (char *)"invalid distance too far back";
                    state->mode = BAD;
                    break;
                }
#endif
                hold >>= op;
  41d998:	49 d3 eb             	shr    %cl,%r11
                    if (bits < op) {
                        hold += (unsigned long)(PUP(in)) << bits;
                        bits += 8;
                    }
                }
                dist += (unsigned)hold & ((1U << op) - 1);
  41d99b:	44 01 c0             	add    %r8d,%eax
  41d99e:	89 44 24 48          	mov    %eax,0x48(%rsp)
#endif
                hold >>= op;
                bits -= op;
                Tracevv((stderr, "inflate:         distance %u\n", dist));
                op = (unsigned)(out - beg);     /* max distance in output */
                if (dist > op) {                /* see if copy from window */
  41d9a2:	39 d0                	cmp    %edx,%eax
  41d9a4:	0f 87 f3 01 00 00    	ja     41db9d <inflate_fast+0x56d>
                        if (len > 1)
                            PUP(out) = PUP(from);
                    }
                }
                else {
                    from = out - dist;          /* copy direct from output */
  41d9aa:	8b 7c 24 48          	mov    0x48(%rsp),%edi
  41d9ae:	4c 89 e1             	mov    %r12,%rcx
  41d9b1:	41 b8 ab aa aa aa    	mov    $0xaaaaaaab,%r8d
  41d9b7:	48 29 f9             	sub    %rdi,%rcx
  41d9ba:	8d 7e fd             	lea    -0x3(%rsi),%edi
  41d9bd:	89 f8                	mov    %edi,%eax
  41d9bf:	41 f7 e0             	mul    %r8d
  41d9c2:	d1 ea                	shr    %edx
  41d9c4:	83 e2 03             	and    $0x3,%edx
  41d9c7:	0f 84 e5 00 00 00    	je     41dab2 <inflate_fast+0x482>
                    do {                        /* minimum length is three */
                        PUP(out) = PUP(from);
  41d9cd:	0f b6 71 01          	movzbl 0x1(%rcx),%esi
  41d9d1:	49 8d 44 24 03       	lea    0x3(%r12),%rax
  41d9d6:	83 fa 01             	cmp    $0x1,%edx
  41d9d9:	41 88 74 24 01       	mov    %sil,0x1(%r12)
                        PUP(out) = PUP(from);
  41d9de:	44 0f b6 41 02       	movzbl 0x2(%rcx),%r8d
                        PUP(out) = PUP(from);
                        len -= 3;
  41d9e3:	89 fe                	mov    %edi,%esi
                }
                else {
                    from = out - dist;          /* copy direct from output */
                    do {                        /* minimum length is three */
                        PUP(out) = PUP(from);
                        PUP(out) = PUP(from);
  41d9e5:	45 88 44 24 02       	mov    %r8b,0x2(%r12)
  41d9ea:	4c 8d 41 03          	lea    0x3(%rcx),%r8
                        PUP(out) = PUP(from);
  41d9ee:	0f b6 49 03          	movzbl 0x3(%rcx),%ecx
  41d9f2:	41 88 4c 24 03       	mov    %cl,0x3(%r12)
  41d9f7:	4c 89 c1             	mov    %r8,%rcx
  41d9fa:	49 89 c4             	mov    %rax,%r12
  41d9fd:	0f 84 af 00 00 00    	je     41dab2 <inflate_fast+0x482>
  41da03:	83 fa 02             	cmp    $0x2,%edx
  41da06:	74 25                	je     41da2d <inflate_fast+0x3fd>
                    }
                }
                else {
                    from = out - dist;          /* copy direct from output */
                    do {                        /* minimum length is three */
                        PUP(out) = PUP(from);
  41da08:	41 0f b6 78 01       	movzbl 0x1(%r8),%edi
                        PUP(out) = PUP(from);
                        PUP(out) = PUP(from);
                        len -= 3;
  41da0d:	83 ee 03             	sub    $0x3,%esi
  41da10:	48 83 c1 03          	add    $0x3,%rcx
  41da14:	49 83 c4 03          	add    $0x3,%r12
                    }
                }
                else {
                    from = out - dist;          /* copy direct from output */
                    do {                        /* minimum length is three */
                        PUP(out) = PUP(from);
  41da18:	40 88 78 01          	mov    %dil,0x1(%rax)
                        PUP(out) = PUP(from);
  41da1c:	41 0f b6 50 02       	movzbl 0x2(%r8),%edx
  41da21:	88 50 02             	mov    %dl,0x2(%rax)
                        PUP(out) = PUP(from);
  41da24:	45 0f b6 40 03       	movzbl 0x3(%r8),%r8d
  41da29:	44 88 40 03          	mov    %r8b,0x3(%rax)
                    }
                }
                else {
                    from = out - dist;          /* copy direct from output */
                    do {                        /* minimum length is three */
                        PUP(out) = PUP(from);
  41da2d:	0f b6 41 01          	movzbl 0x1(%rcx),%eax
                        PUP(out) = PUP(from);
                        PUP(out) = PUP(from);
                        len -= 3;
  41da31:	83 ee 03             	sub    $0x3,%esi
  41da34:	48 83 c1 03          	add    $0x3,%rcx
  41da38:	49 83 c4 03          	add    $0x3,%r12
                    }
                }
                else {
                    from = out - dist;          /* copy direct from output */
                    do {                        /* minimum length is three */
                        PUP(out) = PUP(from);
  41da3c:	41 88 44 24 fe       	mov    %al,-0x2(%r12)
                        PUP(out) = PUP(from);
  41da41:	0f b6 79 ff          	movzbl -0x1(%rcx),%edi
  41da45:	41 88 7c 24 ff       	mov    %dil,-0x1(%r12)
                        PUP(out) = PUP(from);
  41da4a:	0f b6 11             	movzbl (%rcx),%edx
  41da4d:	41 88 14 24          	mov    %dl,(%r12)
  41da51:	eb 5f                	jmp    41dab2 <inflate_fast+0x482>
  41da53:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
                    }
                }
                else {
                    from = out - dist;          /* copy direct from output */
                    do {                        /* minimum length is three */
                        PUP(out) = PUP(from);
  41da58:	0f b6 42 01          	movzbl 0x1(%rdx),%eax
                        PUP(out) = PUP(from);
                        PUP(out) = PUP(from);
                        len -= 3;
  41da5c:	83 ee 0c             	sub    $0xc,%esi
  41da5f:	48 83 c1 0c          	add    $0xc,%rcx
  41da63:	49 83 c4 0c          	add    $0xc,%r12
                    }
                }
                else {
                    from = out - dist;          /* copy direct from output */
                    do {                        /* minimum length is three */
                        PUP(out) = PUP(from);
  41da67:	41 88 40 01          	mov    %al,0x1(%r8)
                        PUP(out) = PUP(from);
  41da6b:	0f b6 52 02          	movzbl 0x2(%rdx),%edx
  41da6f:	41 88 50 02          	mov    %dl,0x2(%r8)
                        PUP(out) = PUP(from);
  41da73:	44 0f b6 41 fa       	movzbl -0x6(%rcx),%r8d
  41da78:	45 88 44 24 fa       	mov    %r8b,-0x6(%r12)
                    }
                }
                else {
                    from = out - dist;          /* copy direct from output */
                    do {                        /* minimum length is three */
                        PUP(out) = PUP(from);
  41da7d:	0f b6 79 fb          	movzbl -0x5(%rcx),%edi
  41da81:	41 88 7c 24 fb       	mov    %dil,-0x5(%r12)
                        PUP(out) = PUP(from);
  41da86:	0f b6 41 fc          	movzbl -0x4(%rcx),%eax
  41da8a:	41 88 44 24 fc       	mov    %al,-0x4(%r12)
                        PUP(out) = PUP(from);
  41da8f:	0f b6 51 fd          	movzbl -0x3(%rcx),%edx
  41da93:	41 88 54 24 fd       	mov    %dl,-0x3(%r12)
                    }
                }
                else {
                    from = out - dist;          /* copy direct from output */
                    do {                        /* minimum length is three */
                        PUP(out) = PUP(from);
  41da98:	44 0f b6 41 fe       	movzbl -0x2(%rcx),%r8d
  41da9d:	45 88 44 24 fe       	mov    %r8b,-0x2(%r12)
                        PUP(out) = PUP(from);
  41daa2:	0f b6 79 ff          	movzbl -0x1(%rcx),%edi
  41daa6:	41 88 7c 24 ff       	mov    %dil,-0x1(%r12)
                        PUP(out) = PUP(from);
  41daab:	0f b6 01             	movzbl (%rcx),%eax
  41daae:	41 88 04 24          	mov    %al,(%r12)
                    }
                }
                else {
                    from = out - dist;          /* copy direct from output */
                    do {                        /* minimum length is three */
                        PUP(out) = PUP(from);
  41dab2:	44 0f b6 41 01       	movzbl 0x1(%rcx),%r8d
  41dab7:	48 8d 51 03          	lea    0x3(%rcx),%rdx
  41dabb:	45 88 44 24 01       	mov    %r8b,0x1(%r12)
                        PUP(out) = PUP(from);
  41dac0:	0f b6 41 02          	movzbl 0x2(%rcx),%eax
  41dac4:	4d 8d 44 24 03       	lea    0x3(%r12),%r8
  41dac9:	41 88 44 24 02       	mov    %al,0x2(%r12)
                        PUP(out) = PUP(from);
  41dace:	0f b6 79 03          	movzbl 0x3(%rcx),%edi
  41dad2:	41 88 7c 24 03       	mov    %dil,0x3(%r12)
                        len -= 3;
  41dad7:	8d 7e fd             	lea    -0x3(%rsi),%edi
                    } while (len > 2);
  41dada:	83 ff 02             	cmp    $0x2,%edi
  41dadd:	0f 87 75 ff ff ff    	ja     41da58 <inflate_fast+0x428>
                    if (len) {
  41dae3:	85 ff                	test   %edi,%edi
  41dae5:	0f 84 e0 15 00 00    	je     41f0cb <inflate_fast+0x1a9b>
                        PUP(out) = PUP(from);
  41daeb:	0f b6 71 04          	movzbl 0x4(%rcx),%esi
                        if (len > 1)
  41daef:	83 ff 02             	cmp    $0x2,%edi
                        PUP(out) = PUP(from);
                        PUP(out) = PUP(from);
                        len -= 3;
                    } while (len > 2);
                    if (len) {
                        PUP(out) = PUP(from);
  41daf2:	41 88 74 24 04       	mov    %sil,0x4(%r12)
                        if (len > 1)
  41daf7:	0f 85 17 1c 00 00    	jne    41f714 <inflate_fast+0x20e4>
                            PUP(out) = PUP(from);
  41dafd:	0f b6 49 05          	movzbl 0x5(%rcx),%ecx
  41db01:	49 83 c4 05          	add    $0x5,%r12
  41db05:	41 88 0c 24          	mov    %cl,(%r12)
  41db09:	e9 05 fd ff ff       	jmpq   41d813 <inflate_fast+0x1e3>
  41db0e:	66 90                	xchg   %ax,%ax
        }
        else if ((op & 64) == 0) {              /* 2nd level length code */
            this = lcode[this.val + (hold & ((1U << op) - 1))];
            goto dolen;
        }
        else if (op & 32) {                     /* end-of-block */
  41db10:	a8 20                	test   $0x20,%al
  41db12:	74 5c                	je     41db70 <inflate_fast+0x540>
            Tracevv((stderr, "inflate:         end of block\n"));
            state->mode = TYPE;
  41db14:	41 c7 45 00 0b 00 00 	movl   $0xb,0x0(%r13)
  41db1b:	00 
            break;
  41db1c:	e9 07 fd ff ff       	jmpq   41d828 <inflate_fast+0x1f8>
  41db21:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    hold &= (1U << bits) - 1;

    /* update state and return */
    strm->next_in = in + OFF;
    strm->next_out = out + OFF;
    strm->avail_in = (unsigned)(in < last ? 5 + (last - in) : 5 - (in - last));
  41db28:	8b 44 24 88          	mov    -0x78(%rsp),%eax
  41db2c:	44 29 f0             	sub    %r14d,%eax
  41db2f:	89 c2                	mov    %eax,%edx
  41db31:	83 c2 05             	add    $0x5,%edx
  41db34:	e9 3f fd ff ff       	jmpq   41d878 <inflate_fast+0x248>
  41db39:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
                hold >>= op;
                bits -= op;
            }
            Tracevv((stderr, "inflate:         length %u\n", len));
            if (bits < 15) {
                hold += (unsigned long)(PUP(in)) << bits;
  41db40:	0f b6 45 01          	movzbl 0x1(%rbp),%eax
                bits += 8;
                hold += (unsigned long)(PUP(in)) << bits;
  41db44:	44 0f b6 45 02       	movzbl 0x2(%rbp),%r8d
                hold >>= op;
                bits -= op;
            }
            Tracevv((stderr, "inflate:         length %u\n", len));
            if (bits < 15) {
                hold += (unsigned long)(PUP(in)) << bits;
  41db49:	44 89 c9             	mov    %r9d,%ecx
                bits += 8;
                hold += (unsigned long)(PUP(in)) << bits;
  41db4c:	48 83 c5 02          	add    $0x2,%rbp
                hold >>= op;
                bits -= op;
            }
            Tracevv((stderr, "inflate:         length %u\n", len));
            if (bits < 15) {
                hold += (unsigned long)(PUP(in)) << bits;
  41db50:	48 d3 e0             	shl    %cl,%rax
                bits += 8;
  41db53:	41 8d 49 08          	lea    0x8(%r9),%ecx
                hold += (unsigned long)(PUP(in)) << bits;
                bits += 8;
  41db57:	41 83 c1 10          	add    $0x10,%r9d
            }
            Tracevv((stderr, "inflate:         length %u\n", len));
            if (bits < 15) {
                hold += (unsigned long)(PUP(in)) << bits;
                bits += 8;
                hold += (unsigned long)(PUP(in)) << bits;
  41db5b:	49 d3 e0             	shl    %cl,%r8
  41db5e:	49 01 c0             	add    %rax,%r8
  41db61:	4d 01 c3             	add    %r8,%r11
  41db64:	e9 9e fd ff ff       	jmpq   41d907 <inflate_fast+0x2d7>
  41db69:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            Tracevv((stderr, "inflate:         end of block\n"));
            state->mode = TYPE;
            break;
        }
        else {
            strm->msg = (char *)"invalid literal/length code";
  41db70:	49 c7 47 30 98 93 43 	movq   $0x439398,0x30(%r15)
  41db77:	00 
            state->mode = BAD;
  41db78:	41 c7 45 00 1b 00 00 	movl   $0x1b,0x0(%r13)
  41db7f:	00 
            break;
  41db80:	e9 a3 fc ff ff       	jmpq   41d828 <inflate_fast+0x1f8>
  41db85:	0f 1f 00             	nopl   (%rax)
            else if ((op & 64) == 0) {          /* 2nd level distance code */
                this = dcode[this.val + (hold & ((1U << op) - 1))];
                goto dodist;
            }
            else {
                strm->msg = (char *)"invalid distance code";
  41db88:	49 c7 47 30 b4 93 43 	movq   $0x4393b4,0x30(%r15)
  41db8f:	00 
                state->mode = BAD;
  41db90:	41 c7 45 00 1b 00 00 	movl   $0x1b,0x0(%r13)
  41db97:	00 
                break;
  41db98:	e9 8b fc ff ff       	jmpq   41d828 <inflate_fast+0x1f8>
                hold >>= op;
                bits -= op;
                Tracevv((stderr, "inflate:         distance %u\n", dist));
                op = (unsigned)(out - beg);     /* max distance in output */
                if (dist > op) {                /* see if copy from window */
                    op = dist - op;             /* distance back in window */
  41db9d:	29 d0                	sub    %edx,%eax
                    if (op > whave) {
  41db9f:	39 44 24 d0          	cmp    %eax,-0x30(%rsp)
  41dba3:	0f 82 47 1f 00 00    	jb     41faf0 <inflate_fast+0x24c0>
                        strm->msg = (char *)"invalid distance too far back";
                        state->mode = BAD;
                        break;
                    }
                    from = window - OFF;
                    if (write == 0) {           /* very common case */
  41dba9:	8b 54 24 b8          	mov    -0x48(%rsp),%edx
                    if (op > whave) {
                        strm->msg = (char *)"invalid distance too far back";
                        state->mode = BAD;
                        break;
                    }
                    from = window - OFF;
  41dbad:	48 8b 4c 24 c8       	mov    -0x38(%rsp),%rcx
                    if (write == 0) {           /* very common case */
  41dbb2:	85 d2                	test   %edx,%edx
                    if (op > whave) {
                        strm->msg = (char *)"invalid distance too far back";
                        state->mode = BAD;
                        break;
                    }
                    from = window - OFF;
  41dbb4:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
                    if (write == 0) {           /* very common case */
  41dbb9:	0f 85 01 05 00 00    	jne    41e0c0 <inflate_fast+0xa90>
                        from += wsize - op;
  41dbbf:	8b 7c 24 a0          	mov    -0x60(%rsp),%edi
  41dbc3:	29 c7                	sub    %eax,%edi
  41dbc5:	48 01 f9             	add    %rdi,%rcx
                        if (op < len) {         /* some from window */
  41dbc8:	39 c6                	cmp    %eax,%esi
                        state->mode = BAD;
                        break;
                    }
                    from = window - OFF;
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
  41dbca:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
                        if (op < len) {         /* some from window */
  41dbcf:	0f 86 6b 13 00 00    	jbe    41ef40 <inflate_fast+0x1910>
  41dbd5:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  41dbda:	48 8b 54 24 b0       	mov    -0x50(%rsp),%rdx
  41dbdf:	4d 8d 44 24 01       	lea    0x1(%r12),%r8
                            len -= op;
  41dbe4:	29 c6                	sub    %eax,%esi
  41dbe6:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
  41dbeb:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
  41dbf0:	4c 8d 04 3a          	lea    (%rdx,%rdi,1),%r8
  41dbf4:	48 8d 54 3a 10       	lea    0x10(%rdx,%rdi,1),%rdx
  41dbf9:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  41dbfe:	48 39 d7             	cmp    %rdx,%rdi
  41dc01:	49 8d 54 24 11       	lea    0x11(%r12),%rdx
  41dc06:	40 0f 93 c7          	setae  %dil
  41dc0a:	49 39 d0             	cmp    %rdx,%r8
  41dc0d:	0f 93 c2             	setae  %dl
  41dc10:	40 08 d7             	or     %dl,%dil
  41dc13:	0f 84 96 1d 00 00    	je     41f9af <inflate_fast+0x237f>
  41dc19:	83 f8 16             	cmp    $0x16,%eax
  41dc1c:	0f 86 8d 1d 00 00    	jbe    41f9af <inflate_fast+0x237f>
  41dc22:	4c 89 c2             	mov    %r8,%rdx
  41dc25:	48 f7 da             	neg    %rdx
  41dc28:	83 e2 0f             	and    $0xf,%edx
  41dc2b:	39 c2                	cmp    %eax,%edx
  41dc2d:	0f 47 d0             	cmova  %eax,%edx
  41dc30:	85 d2                	test   %edx,%edx
  41dc32:	0f 84 60 1d 00 00    	je     41f998 <inflate_fast+0x2368>
                            do {
                                PUP(out) = PUP(from);
  41dc38:	0f b6 79 01          	movzbl 0x1(%rcx),%edi
  41dc3c:	83 fa 01             	cmp    $0x1,%edx
  41dc3f:	4c 8d 41 01          	lea    0x1(%rcx),%r8
  41dc43:	41 88 7c 24 01       	mov    %dil,0x1(%r12)
                            } while (--op);
  41dc48:	8d 78 ff             	lea    -0x1(%rax),%edi
  41dc4b:	89 7c 24 4c          	mov    %edi,0x4c(%rsp)
  41dc4f:	89 7c 24 28          	mov    %edi,0x28(%rsp)
  41dc53:	0f 84 aa 1a 00 00    	je     41f703 <inflate_fast+0x20d3>
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41dc59:	0f b6 79 02          	movzbl 0x2(%rcx),%edi
  41dc5d:	4d 8d 44 24 02       	lea    0x2(%r12),%r8
  41dc62:	83 fa 02             	cmp    $0x2,%edx
  41dc65:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
  41dc6a:	4c 8d 41 02          	lea    0x2(%rcx),%r8
  41dc6e:	41 88 7c 24 02       	mov    %dil,0x2(%r12)
                            } while (--op);
  41dc73:	8d 78 fe             	lea    -0x2(%rax),%edi
  41dc76:	89 7c 24 28          	mov    %edi,0x28(%rsp)
  41dc7a:	0f 84 83 1a 00 00    	je     41f703 <inflate_fast+0x20d3>
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41dc80:	0f b6 79 03          	movzbl 0x3(%rcx),%edi
  41dc84:	4d 8d 44 24 03       	lea    0x3(%r12),%r8
  41dc89:	83 fa 03             	cmp    $0x3,%edx
  41dc8c:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
  41dc91:	4c 8d 41 03          	lea    0x3(%rcx),%r8
  41dc95:	41 88 7c 24 03       	mov    %dil,0x3(%r12)
                            } while (--op);
  41dc9a:	8d 78 fd             	lea    -0x3(%rax),%edi
  41dc9d:	89 7c 24 28          	mov    %edi,0x28(%rsp)
  41dca1:	0f 84 5c 1a 00 00    	je     41f703 <inflate_fast+0x20d3>
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41dca7:	0f b6 79 04          	movzbl 0x4(%rcx),%edi
  41dcab:	4d 8d 44 24 04       	lea    0x4(%r12),%r8
  41dcb0:	83 fa 04             	cmp    $0x4,%edx
  41dcb3:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
  41dcb8:	4c 8d 41 04          	lea    0x4(%rcx),%r8
  41dcbc:	41 88 7c 24 04       	mov    %dil,0x4(%r12)
                            } while (--op);
  41dcc1:	8d 78 fc             	lea    -0x4(%rax),%edi
  41dcc4:	89 7c 24 28          	mov    %edi,0x28(%rsp)
  41dcc8:	0f 84 35 1a 00 00    	je     41f703 <inflate_fast+0x20d3>
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41dcce:	0f b6 79 05          	movzbl 0x5(%rcx),%edi
  41dcd2:	4d 8d 44 24 05       	lea    0x5(%r12),%r8
  41dcd7:	83 fa 05             	cmp    $0x5,%edx
  41dcda:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
  41dcdf:	4c 8d 41 05          	lea    0x5(%rcx),%r8
  41dce3:	41 88 7c 24 05       	mov    %dil,0x5(%r12)
                            } while (--op);
  41dce8:	8d 78 fb             	lea    -0x5(%rax),%edi
  41dceb:	89 7c 24 28          	mov    %edi,0x28(%rsp)
  41dcef:	0f 84 0e 1a 00 00    	je     41f703 <inflate_fast+0x20d3>
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41dcf5:	0f b6 79 06          	movzbl 0x6(%rcx),%edi
  41dcf9:	4d 8d 44 24 06       	lea    0x6(%r12),%r8
  41dcfe:	83 fa 06             	cmp    $0x6,%edx
  41dd01:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
  41dd06:	4c 8d 41 06          	lea    0x6(%rcx),%r8
  41dd0a:	41 88 7c 24 06       	mov    %dil,0x6(%r12)
                            } while (--op);
  41dd0f:	8d 78 fa             	lea    -0x6(%rax),%edi
  41dd12:	89 7c 24 28          	mov    %edi,0x28(%rsp)
  41dd16:	0f 84 e7 19 00 00    	je     41f703 <inflate_fast+0x20d3>
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41dd1c:	0f b6 79 07          	movzbl 0x7(%rcx),%edi
  41dd20:	4d 8d 44 24 07       	lea    0x7(%r12),%r8
  41dd25:	83 fa 07             	cmp    $0x7,%edx
  41dd28:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
  41dd2d:	4c 8d 41 07          	lea    0x7(%rcx),%r8
  41dd31:	41 88 7c 24 07       	mov    %dil,0x7(%r12)
                            } while (--op);
  41dd36:	8d 78 f9             	lea    -0x7(%rax),%edi
  41dd39:	89 7c 24 28          	mov    %edi,0x28(%rsp)
  41dd3d:	0f 84 c0 19 00 00    	je     41f703 <inflate_fast+0x20d3>
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41dd43:	0f b6 79 08          	movzbl 0x8(%rcx),%edi
  41dd47:	4d 8d 44 24 08       	lea    0x8(%r12),%r8
  41dd4c:	83 fa 08             	cmp    $0x8,%edx
  41dd4f:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
  41dd54:	4c 8d 41 08          	lea    0x8(%rcx),%r8
  41dd58:	41 88 7c 24 08       	mov    %dil,0x8(%r12)
                            } while (--op);
  41dd5d:	8d 78 f8             	lea    -0x8(%rax),%edi
  41dd60:	89 7c 24 28          	mov    %edi,0x28(%rsp)
  41dd64:	0f 84 99 19 00 00    	je     41f703 <inflate_fast+0x20d3>
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41dd6a:	0f b6 79 09          	movzbl 0x9(%rcx),%edi
  41dd6e:	4d 8d 44 24 09       	lea    0x9(%r12),%r8
  41dd73:	83 fa 09             	cmp    $0x9,%edx
  41dd76:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
  41dd7b:	4c 8d 41 09          	lea    0x9(%rcx),%r8
  41dd7f:	41 88 7c 24 09       	mov    %dil,0x9(%r12)
                            } while (--op);
  41dd84:	8d 78 f7             	lea    -0x9(%rax),%edi
  41dd87:	89 7c 24 28          	mov    %edi,0x28(%rsp)
  41dd8b:	0f 84 72 19 00 00    	je     41f703 <inflate_fast+0x20d3>
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41dd91:	0f b6 79 0a          	movzbl 0xa(%rcx),%edi
  41dd95:	4d 8d 44 24 0a       	lea    0xa(%r12),%r8
  41dd9a:	83 fa 0a             	cmp    $0xa,%edx
  41dd9d:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
  41dda2:	4c 8d 41 0a          	lea    0xa(%rcx),%r8
  41dda6:	41 88 7c 24 0a       	mov    %dil,0xa(%r12)
                            } while (--op);
  41ddab:	8d 78 f6             	lea    -0xa(%rax),%edi
  41ddae:	89 7c 24 28          	mov    %edi,0x28(%rsp)
  41ddb2:	0f 84 4b 19 00 00    	je     41f703 <inflate_fast+0x20d3>
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41ddb8:	0f b6 79 0b          	movzbl 0xb(%rcx),%edi
  41ddbc:	4d 8d 44 24 0b       	lea    0xb(%r12),%r8
  41ddc1:	83 fa 0b             	cmp    $0xb,%edx
  41ddc4:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
  41ddc9:	4c 8d 41 0b          	lea    0xb(%rcx),%r8
  41ddcd:	41 88 7c 24 0b       	mov    %dil,0xb(%r12)
                            } while (--op);
  41ddd2:	8d 78 f5             	lea    -0xb(%rax),%edi
  41ddd5:	89 7c 24 28          	mov    %edi,0x28(%rsp)
  41ddd9:	0f 84 24 19 00 00    	je     41f703 <inflate_fast+0x20d3>
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41dddf:	0f b6 79 0c          	movzbl 0xc(%rcx),%edi
  41dde3:	4d 8d 44 24 0c       	lea    0xc(%r12),%r8
  41dde8:	83 fa 0c             	cmp    $0xc,%edx
  41ddeb:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
  41ddf0:	4c 8d 41 0c          	lea    0xc(%rcx),%r8
  41ddf4:	41 88 7c 24 0c       	mov    %dil,0xc(%r12)
                            } while (--op);
  41ddf9:	8d 78 f4             	lea    -0xc(%rax),%edi
  41ddfc:	89 7c 24 28          	mov    %edi,0x28(%rsp)
  41de00:	0f 84 fd 18 00 00    	je     41f703 <inflate_fast+0x20d3>
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41de06:	0f b6 79 0d          	movzbl 0xd(%rcx),%edi
  41de0a:	4d 8d 44 24 0d       	lea    0xd(%r12),%r8
  41de0f:	83 fa 0d             	cmp    $0xd,%edx
  41de12:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
  41de17:	4c 8d 41 0d          	lea    0xd(%rcx),%r8
  41de1b:	41 88 7c 24 0d       	mov    %dil,0xd(%r12)
                            } while (--op);
  41de20:	8d 78 f3             	lea    -0xd(%rax),%edi
  41de23:	89 7c 24 28          	mov    %edi,0x28(%rsp)
  41de27:	0f 84 d6 18 00 00    	je     41f703 <inflate_fast+0x20d3>
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41de2d:	0f b6 79 0e          	movzbl 0xe(%rcx),%edi
  41de31:	4d 8d 44 24 0e       	lea    0xe(%r12),%r8
  41de36:	83 fa 0f             	cmp    $0xf,%edx
  41de39:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
  41de3e:	4c 8d 41 0e          	lea    0xe(%rcx),%r8
  41de42:	41 88 7c 24 0e       	mov    %dil,0xe(%r12)
                            } while (--op);
  41de47:	8d 78 f2             	lea    -0xe(%rax),%edi
  41de4a:	89 7c 24 28          	mov    %edi,0x28(%rsp)
  41de4e:	0f 85 af 18 00 00    	jne    41f703 <inflate_fast+0x20d3>
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41de54:	4d 8d 44 24 0f       	lea    0xf(%r12),%r8
  41de59:	0f b6 79 0f          	movzbl 0xf(%rcx),%edi
                            } while (--op);
  41de5d:	48 83 c1 0f          	add    $0xf,%rcx
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41de61:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
                            } while (--op);
  41de66:	44 8d 40 f1          	lea    -0xf(%rax),%r8d
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41de6a:	41 88 7c 24 0f       	mov    %dil,0xf(%r12)
                            } while (--op);
  41de6f:	44 89 44 24 28       	mov    %r8d,0x28(%rsp)
  41de74:	29 d0                	sub    %edx,%eax
  41de76:	41 89 d0             	mov    %edx,%r8d
  41de79:	89 44 24 5c          	mov    %eax,0x5c(%rsp)
  41de7d:	83 e8 10             	sub    $0x10,%eax
  41de80:	c1 e8 04             	shr    $0x4,%eax
  41de83:	8d 78 01             	lea    0x1(%rax),%edi
  41de86:	89 7c 24 40          	mov    %edi,0x40(%rsp)
  41de8a:	c1 e7 04             	shl    $0x4,%edi
  41de8d:	89 7c 24 58          	mov    %edi,0x58(%rsp)
  41de91:	8b 7c 24 4c          	mov    0x4c(%rsp),%edi
  41de95:	29 d7                	sub    %edx,%edi
  41de97:	83 ff 0e             	cmp    $0xe,%edi
  41de9a:	0f 86 ff 19 00 00    	jbe    41f89f <inflate_fast+0x226f>
  41dea0:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  41dea5:	83 e8 04             	sub    $0x4,%eax
  41dea8:	4c 01 c7             	add    %r8,%rdi
  41deab:	48 03 7c 24 b0       	add    -0x50(%rsp),%rdi
  41deb0:	83 f8 fa             	cmp    $0xfffffffa,%eax
  41deb3:	4f 8d 44 04 01       	lea    0x1(%r12,%r8,1),%r8
  41deb8:	0f 87 c0 22 00 00    	ja     42017e <inflate_fast+0x2b4e>
  41debe:	c1 e8 02             	shr    $0x2,%eax
                    }
                    from = window - OFF;
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
  41dec1:	c7 44 24 30 04 00 00 	movl   $0x4,0x30(%rsp)
  41dec8:	00 
  41dec9:	8d 14 85 08 00 00 00 	lea    0x8(,%rax,4),%edx
  41ded0:	83 e0 03             	and    $0x3,%eax
  41ded3:	89 54 24 60          	mov    %edx,0x60(%rsp)
  41ded7:	0f 84 f3 1b 00 00    	je     41fad0 <inflate_fast+0x24a0>
                            do {
                                PUP(out) = PUP(from);
  41dedd:	66 0f 6f 07          	movdqa (%rdi),%xmm0
  41dee1:	0f 18 8f d0 01 00 00 	prefetcht0 0x1d0(%rdi)
  41dee8:	49 83 c0 40          	add    $0x40,%r8
  41deec:	48 83 c7 40          	add    $0x40,%rdi
  41def0:	c7 44 24 30 08 00 00 	movl   $0x8,0x30(%rsp)
  41def7:	00 
  41def8:	41 0f 11 40 c0       	movups %xmm0,-0x40(%r8)
  41defd:	66 0f 6f 4f d0       	movdqa -0x30(%rdi),%xmm1
  41df02:	41 0f 11 48 d0       	movups %xmm1,-0x30(%r8)
  41df07:	66 0f 6f 57 e0       	movdqa -0x20(%rdi),%xmm2
  41df0c:	41 0f 11 50 e0       	movups %xmm2,-0x20(%r8)
  41df11:	66 0f 6f 5f f0       	movdqa -0x10(%rdi),%xmm3
  41df16:	41 0f 11 58 f0       	movups %xmm3,-0x10(%r8)
  41df1b:	83 f8 01             	cmp    $0x1,%eax
  41df1e:	0f 84 ac 1b 00 00    	je     41fad0 <inflate_fast+0x24a0>
  41df24:	83 f8 02             	cmp    $0x2,%eax
  41df27:	74 3e                	je     41df67 <inflate_fast+0x937>
  41df29:	66 0f 6f 27          	movdqa (%rdi),%xmm4
  41df2d:	0f 18 8f d0 01 00 00 	prefetcht0 0x1d0(%rdi)
  41df34:	49 83 c0 40          	add    $0x40,%r8
  41df38:	48 83 c7 40          	add    $0x40,%rdi
  41df3c:	c7 44 24 30 0c 00 00 	movl   $0xc,0x30(%rsp)
  41df43:	00 
  41df44:	41 0f 11 60 c0       	movups %xmm4,-0x40(%r8)
  41df49:	66 0f 6f 6f d0       	movdqa -0x30(%rdi),%xmm5
  41df4e:	41 0f 11 68 d0       	movups %xmm5,-0x30(%r8)
  41df53:	66 0f 6f 77 e0       	movdqa -0x20(%rdi),%xmm6
  41df58:	41 0f 11 70 e0       	movups %xmm6,-0x20(%r8)
  41df5d:	66 0f 6f 7f f0       	movdqa -0x10(%rdi),%xmm7
  41df62:	41 0f 11 78 f0       	movups %xmm7,-0x10(%r8)
  41df67:	0f 18 8f d0 01 00 00 	prefetcht0 0x1d0(%rdi)
  41df6e:	83 44 24 30 04       	addl   $0x4,0x30(%rsp)
  41df73:	48 89 6c 24 38       	mov    %rbp,0x38(%rsp)
  41df78:	48 83 c7 40          	add    $0x40,%rdi
  41df7c:	49 83 c0 40          	add    $0x40,%r8
  41df80:	8b 6c 24 30          	mov    0x30(%rsp),%ebp
  41df84:	4c 89 64 24 50       	mov    %r12,0x50(%rsp)
  41df89:	66 44 0f 6f 47 c0    	movdqa -0x40(%rdi),%xmm8
  41df8f:	45 0f 11 40 c0       	movups %xmm8,-0x40(%r8)
  41df94:	66 44 0f 6f 4f d0    	movdqa -0x30(%rdi),%xmm9
  41df9a:	45 0f 11 48 d0       	movups %xmm9,-0x30(%r8)
  41df9f:	66 44 0f 6f 57 e0    	movdqa -0x20(%rdi),%xmm10
  41dfa5:	45 0f 11 50 e0       	movups %xmm10,-0x20(%r8)
  41dfaa:	66 44 0f 6f 5f f0    	movdqa -0x10(%rdi),%xmm11
  41dfb0:	45 0f 11 58 f0       	movups %xmm11,-0x10(%r8)
  41dfb5:	0f 18 8f d0 01 00 00 	prefetcht0 0x1d0(%rdi)
  41dfbc:	83 c5 04             	add    $0x4,%ebp
  41dfbf:	3b 6c 24 60          	cmp    0x60(%rsp),%ebp
  41dfc3:	4c 8d 67 40          	lea    0x40(%rdi),%r12
  41dfc7:	49 8d 40 40          	lea    0x40(%r8),%rax
  41dfcb:	66 44 0f 6f 27       	movdqa (%rdi),%xmm12
  41dfd0:	45 0f 11 20          	movups %xmm12,(%r8)
  41dfd4:	66 44 0f 6f 6f 10    	movdqa 0x10(%rdi),%xmm13
  41dfda:	45 0f 11 68 10       	movups %xmm13,0x10(%r8)
  41dfdf:	66 44 0f 6f 77 20    	movdqa 0x20(%rdi),%xmm14
  41dfe5:	45 0f 11 70 20       	movups %xmm14,0x20(%r8)
  41dfea:	66 44 0f 6f 7f 30    	movdqa 0x30(%rdi),%xmm15
  41dff0:	4c 89 e7             	mov    %r12,%rdi
  41dff3:	45 0f 11 78 30       	movups %xmm15,0x30(%r8)
  41dff8:	49 89 c0             	mov    %rax,%r8
  41dffb:	0f 84 1c 17 00 00    	je     41f71d <inflate_fast+0x20ed>
  41e001:	0f 18 8f d0 01 00 00 	prefetcht0 0x1d0(%rdi)
  41e008:	0f 18 8f 10 02 00 00 	prefetcht0 0x210(%rdi)
  41e00f:	0f 18 8f 50 02 00 00 	prefetcht0 0x250(%rdi)
  41e016:	49 81 c0 c0 00 00 00 	add    $0xc0,%r8
  41e01d:	48 81 c7 c0 00 00 00 	add    $0xc0,%rdi
  41e024:	66 41 0f 6f 04 24    	movdqa (%r12),%xmm0
  41e02a:	8b 54 24 30          	mov    0x30(%rsp),%edx
  41e02e:	0f 11 00             	movups %xmm0,(%rax)
  41e031:	83 c2 10             	add    $0x10,%edx
  41e034:	89 d5                	mov    %edx,%ebp
  41e036:	66 41 0f 6f 4c 24 10 	movdqa 0x10(%r12),%xmm1
  41e03d:	89 54 24 30          	mov    %edx,0x30(%rsp)
  41e041:	0f 11 48 10          	movups %xmm1,0x10(%rax)
  41e045:	66 41 0f 6f 54 24 20 	movdqa 0x20(%r12),%xmm2
  41e04c:	0f 11 50 20          	movups %xmm2,0x20(%rax)
  41e050:	66 41 0f 6f 5c 24 30 	movdqa 0x30(%r12),%xmm3
  41e057:	0f 11 58 30          	movups %xmm3,0x30(%rax)
  41e05b:	66 41 0f 6f 64 24 40 	movdqa 0x40(%r12),%xmm4
  41e062:	0f 11 60 40          	movups %xmm4,0x40(%rax)
  41e066:	66 0f 6f 6f 90       	movdqa -0x70(%rdi),%xmm5
  41e06b:	41 0f 11 68 90       	movups %xmm5,-0x70(%r8)
  41e070:	66 0f 6f 77 a0       	movdqa -0x60(%rdi),%xmm6
  41e075:	41 0f 11 70 a0       	movups %xmm6,-0x60(%r8)
  41e07a:	66 0f 6f 7f b0       	movdqa -0x50(%rdi),%xmm7
  41e07f:	41 0f 11 78 b0       	movups %xmm7,-0x50(%r8)
  41e084:	66 45 0f 6f 84 24 80 	movdqa 0x80(%r12),%xmm8
  41e08b:	00 00 00 
  41e08e:	44 0f 11 80 80 00 00 	movups %xmm8,0x80(%rax)
  41e095:	00 
  41e096:	66 44 0f 6f 4f d0    	movdqa -0x30(%rdi),%xmm9
  41e09c:	45 0f 11 48 d0       	movups %xmm9,-0x30(%r8)
  41e0a1:	66 44 0f 6f 57 e0    	movdqa -0x20(%rdi),%xmm10
  41e0a7:	45 0f 11 50 e0       	movups %xmm10,-0x20(%r8)
  41e0ac:	66 44 0f 6f 5f f0    	movdqa -0x10(%rdi),%xmm11
  41e0b2:	45 0f 11 58 f0       	movups %xmm11,-0x10(%r8)
  41e0b7:	e9 f9 fe ff ff       	jmpq   41dfb5 <inflate_fast+0x985>
  41e0bc:	0f 1f 40 00          	nopl   0x0(%rax)
                            } while (--op);
                            from = out - dist;  /* rest from output */
                        }
                    }
                    else if (write < op) {      /* wrap around window */
  41e0c0:	39 44 24 b8          	cmp    %eax,-0x48(%rsp)
  41e0c4:	0f 83 09 10 00 00    	jae    41f0d3 <inflate_fast+0x1aa3>
                        from += wsize + write - op;
  41e0ca:	8b 4c 24 04          	mov    0x4(%rsp),%ecx
  41e0ce:	48 8b 7c 24 c8       	mov    -0x38(%rsp),%rdi
  41e0d3:	29 c1                	sub    %eax,%ecx
                        op -= write;
  41e0d5:	2b 44 24 b8          	sub    -0x48(%rsp),%eax
                            } while (--op);
                            from = out - dist;  /* rest from output */
                        }
                    }
                    else if (write < op) {      /* wrap around window */
                        from += wsize + write - op;
  41e0d9:	48 01 cf             	add    %rcx,%rdi
  41e0dc:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  41e0e1:	48 89 f9             	mov    %rdi,%rcx
                        op -= write;
                        if (op < len) {         /* some from end of window */
  41e0e4:	39 c6                	cmp    %eax,%esi
                            from = out - dist;  /* rest from output */
                        }
                    }
                    else if (write < op) {      /* wrap around window */
                        from += wsize + write - op;
                        op -= write;
  41e0e6:	89 c2                	mov    %eax,%edx
                        if (op < len) {         /* some from end of window */
  41e0e8:	0f 86 52 0e 00 00    	jbe    41ef40 <inflate_fast+0x1910>
                            len -= op;
  41e0ee:	29 c6                	sub    %eax,%esi
  41e0f0:	49 8d 44 24 01       	lea    0x1(%r12),%rax
  41e0f5:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  41e0fa:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  41e0ff:	48 8b 44 24 b0       	mov    -0x50(%rsp),%rax
  41e104:	49 89 c0             	mov    %rax,%r8
  41e107:	48 8d 44 38 10       	lea    0x10(%rax,%rdi,1),%rax
  41e10c:	49 01 f8             	add    %rdi,%r8
  41e10f:	48 39 44 24 28       	cmp    %rax,0x28(%rsp)
  41e114:	49 8d 44 24 11       	lea    0x11(%r12),%rax
  41e119:	40 0f 93 c7          	setae  %dil
  41e11d:	49 39 c0             	cmp    %rax,%r8
  41e120:	0f 93 c0             	setae  %al
  41e123:	40 08 c7             	or     %al,%dil
  41e126:	0f 84 36 1b 00 00    	je     41fc62 <inflate_fast+0x2632>
  41e12c:	83 fa 16             	cmp    $0x16,%edx
  41e12f:	0f 86 2d 1b 00 00    	jbe    41fc62 <inflate_fast+0x2632>
  41e135:	4c 89 c0             	mov    %r8,%rax
  41e138:	48 f7 d8             	neg    %rax
  41e13b:	83 e0 0f             	and    $0xf,%eax
  41e13e:	39 d0                	cmp    %edx,%eax
  41e140:	0f 47 c2             	cmova  %edx,%eax
  41e143:	85 c0                	test   %eax,%eax
  41e145:	0f 84 ff 1a 00 00    	je     41fc4a <inflate_fast+0x261a>
                            do {
                                PUP(out) = PUP(from);
  41e14b:	0f b6 79 01          	movzbl 0x1(%rcx),%edi
  41e14f:	83 f8 01             	cmp    $0x1,%eax
  41e152:	4c 8d 41 01          	lea    0x1(%rcx),%r8
  41e156:	41 88 7c 24 01       	mov    %dil,0x1(%r12)
                            } while (--op);
  41e15b:	8d 7a ff             	lea    -0x1(%rdx),%edi
  41e15e:	89 7c 24 58          	mov    %edi,0x58(%rsp)
  41e162:	89 7c 24 30          	mov    %edi,0x30(%rsp)
  41e166:	0f 84 0d 02 00 00    	je     41e379 <inflate_fast+0xd49>
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41e16c:	0f b6 79 02          	movzbl 0x2(%rcx),%edi
  41e170:	4d 8d 44 24 02       	lea    0x2(%r12),%r8
  41e175:	83 f8 02             	cmp    $0x2,%eax
  41e178:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
  41e17d:	4c 8d 41 02          	lea    0x2(%rcx),%r8
  41e181:	41 88 7c 24 02       	mov    %dil,0x2(%r12)
                            } while (--op);
  41e186:	8d 7a fe             	lea    -0x2(%rdx),%edi
  41e189:	89 7c 24 30          	mov    %edi,0x30(%rsp)
  41e18d:	0f 84 e6 01 00 00    	je     41e379 <inflate_fast+0xd49>
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41e193:	0f b6 79 03          	movzbl 0x3(%rcx),%edi
  41e197:	4d 8d 44 24 03       	lea    0x3(%r12),%r8
  41e19c:	83 f8 03             	cmp    $0x3,%eax
  41e19f:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
  41e1a4:	4c 8d 41 03          	lea    0x3(%rcx),%r8
  41e1a8:	41 88 7c 24 03       	mov    %dil,0x3(%r12)
                            } while (--op);
  41e1ad:	8d 7a fd             	lea    -0x3(%rdx),%edi
  41e1b0:	89 7c 24 30          	mov    %edi,0x30(%rsp)
  41e1b4:	0f 84 bf 01 00 00    	je     41e379 <inflate_fast+0xd49>
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41e1ba:	0f b6 79 04          	movzbl 0x4(%rcx),%edi
  41e1be:	4d 8d 44 24 04       	lea    0x4(%r12),%r8
  41e1c3:	83 f8 04             	cmp    $0x4,%eax
  41e1c6:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
  41e1cb:	4c 8d 41 04          	lea    0x4(%rcx),%r8
  41e1cf:	41 88 7c 24 04       	mov    %dil,0x4(%r12)
                            } while (--op);
  41e1d4:	8d 7a fc             	lea    -0x4(%rdx),%edi
  41e1d7:	89 7c 24 30          	mov    %edi,0x30(%rsp)
  41e1db:	0f 84 98 01 00 00    	je     41e379 <inflate_fast+0xd49>
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41e1e1:	0f b6 79 05          	movzbl 0x5(%rcx),%edi
  41e1e5:	4d 8d 44 24 05       	lea    0x5(%r12),%r8
  41e1ea:	83 f8 05             	cmp    $0x5,%eax
  41e1ed:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
  41e1f2:	4c 8d 41 05          	lea    0x5(%rcx),%r8
  41e1f6:	41 88 7c 24 05       	mov    %dil,0x5(%r12)
                            } while (--op);
  41e1fb:	8d 7a fb             	lea    -0x5(%rdx),%edi
  41e1fe:	89 7c 24 30          	mov    %edi,0x30(%rsp)
  41e202:	0f 84 71 01 00 00    	je     41e379 <inflate_fast+0xd49>
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41e208:	0f b6 79 06          	movzbl 0x6(%rcx),%edi
  41e20c:	4d 8d 44 24 06       	lea    0x6(%r12),%r8
  41e211:	83 f8 06             	cmp    $0x6,%eax
  41e214:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
  41e219:	4c 8d 41 06          	lea    0x6(%rcx),%r8
  41e21d:	41 88 7c 24 06       	mov    %dil,0x6(%r12)
                            } while (--op);
  41e222:	8d 7a fa             	lea    -0x6(%rdx),%edi
  41e225:	89 7c 24 30          	mov    %edi,0x30(%rsp)
  41e229:	0f 84 4a 01 00 00    	je     41e379 <inflate_fast+0xd49>
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41e22f:	0f b6 79 07          	movzbl 0x7(%rcx),%edi
  41e233:	4d 8d 44 24 07       	lea    0x7(%r12),%r8
  41e238:	83 f8 07             	cmp    $0x7,%eax
  41e23b:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
  41e240:	4c 8d 41 07          	lea    0x7(%rcx),%r8
  41e244:	41 88 7c 24 07       	mov    %dil,0x7(%r12)
                            } while (--op);
  41e249:	8d 7a f9             	lea    -0x7(%rdx),%edi
  41e24c:	89 7c 24 30          	mov    %edi,0x30(%rsp)
  41e250:	0f 84 23 01 00 00    	je     41e379 <inflate_fast+0xd49>
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41e256:	0f b6 79 08          	movzbl 0x8(%rcx),%edi
  41e25a:	4d 8d 44 24 08       	lea    0x8(%r12),%r8
  41e25f:	83 f8 08             	cmp    $0x8,%eax
  41e262:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
  41e267:	4c 8d 41 08          	lea    0x8(%rcx),%r8
  41e26b:	41 88 7c 24 08       	mov    %dil,0x8(%r12)
                            } while (--op);
  41e270:	8d 7a f8             	lea    -0x8(%rdx),%edi
  41e273:	89 7c 24 30          	mov    %edi,0x30(%rsp)
  41e277:	0f 84 fc 00 00 00    	je     41e379 <inflate_fast+0xd49>
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41e27d:	0f b6 79 09          	movzbl 0x9(%rcx),%edi
  41e281:	4d 8d 44 24 09       	lea    0x9(%r12),%r8
  41e286:	83 f8 09             	cmp    $0x9,%eax
  41e289:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
  41e28e:	4c 8d 41 09          	lea    0x9(%rcx),%r8
  41e292:	41 88 7c 24 09       	mov    %dil,0x9(%r12)
                            } while (--op);
  41e297:	8d 7a f7             	lea    -0x9(%rdx),%edi
  41e29a:	89 7c 24 30          	mov    %edi,0x30(%rsp)
  41e29e:	0f 84 d5 00 00 00    	je     41e379 <inflate_fast+0xd49>
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41e2a4:	0f b6 79 0a          	movzbl 0xa(%rcx),%edi
  41e2a8:	4d 8d 44 24 0a       	lea    0xa(%r12),%r8
  41e2ad:	83 f8 0a             	cmp    $0xa,%eax
  41e2b0:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
  41e2b5:	4c 8d 41 0a          	lea    0xa(%rcx),%r8
  41e2b9:	41 88 7c 24 0a       	mov    %dil,0xa(%r12)
                            } while (--op);
  41e2be:	8d 7a f6             	lea    -0xa(%rdx),%edi
  41e2c1:	89 7c 24 30          	mov    %edi,0x30(%rsp)
  41e2c5:	0f 84 ae 00 00 00    	je     41e379 <inflate_fast+0xd49>
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41e2cb:	0f b6 79 0b          	movzbl 0xb(%rcx),%edi
  41e2cf:	4d 8d 44 24 0b       	lea    0xb(%r12),%r8
  41e2d4:	83 f8 0b             	cmp    $0xb,%eax
  41e2d7:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
  41e2dc:	4c 8d 41 0b          	lea    0xb(%rcx),%r8
  41e2e0:	41 88 7c 24 0b       	mov    %dil,0xb(%r12)
                            } while (--op);
  41e2e5:	8d 7a f5             	lea    -0xb(%rdx),%edi
  41e2e8:	89 7c 24 30          	mov    %edi,0x30(%rsp)
  41e2ec:	0f 84 87 00 00 00    	je     41e379 <inflate_fast+0xd49>
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41e2f2:	0f b6 79 0c          	movzbl 0xc(%rcx),%edi
  41e2f6:	4d 8d 44 24 0c       	lea    0xc(%r12),%r8
  41e2fb:	83 f8 0c             	cmp    $0xc,%eax
  41e2fe:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
  41e303:	4c 8d 41 0c          	lea    0xc(%rcx),%r8
  41e307:	41 88 7c 24 0c       	mov    %dil,0xc(%r12)
                            } while (--op);
  41e30c:	8d 7a f4             	lea    -0xc(%rdx),%edi
  41e30f:	89 7c 24 30          	mov    %edi,0x30(%rsp)
  41e313:	74 64                	je     41e379 <inflate_fast+0xd49>
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41e315:	0f b6 79 0d          	movzbl 0xd(%rcx),%edi
  41e319:	4d 8d 44 24 0d       	lea    0xd(%r12),%r8
  41e31e:	83 f8 0d             	cmp    $0xd,%eax
  41e321:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
  41e326:	4c 8d 41 0d          	lea    0xd(%rcx),%r8
  41e32a:	41 88 7c 24 0d       	mov    %dil,0xd(%r12)
                            } while (--op);
  41e32f:	8d 7a f3             	lea    -0xd(%rdx),%edi
  41e332:	89 7c 24 30          	mov    %edi,0x30(%rsp)
  41e336:	74 41                	je     41e379 <inflate_fast+0xd49>
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41e338:	0f b6 79 0e          	movzbl 0xe(%rcx),%edi
  41e33c:	4d 8d 44 24 0e       	lea    0xe(%r12),%r8
  41e341:	83 f8 0f             	cmp    $0xf,%eax
  41e344:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
  41e349:	4c 8d 41 0e          	lea    0xe(%rcx),%r8
  41e34d:	41 88 7c 24 0e       	mov    %dil,0xe(%r12)
                            } while (--op);
  41e352:	8d 7a f2             	lea    -0xe(%rdx),%edi
  41e355:	89 7c 24 30          	mov    %edi,0x30(%rsp)
  41e359:	75 1e                	jne    41e379 <inflate_fast+0xd49>
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41e35b:	4d 8d 44 24 0f       	lea    0xf(%r12),%r8
                            } while (--op);
  41e360:	8d 7a f1             	lea    -0xf(%rdx),%edi
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41e363:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
  41e368:	4c 8d 41 0f          	lea    0xf(%rcx),%r8
  41e36c:	0f b6 49 0f          	movzbl 0xf(%rcx),%ecx
                            } while (--op);
  41e370:	89 7c 24 30          	mov    %edi,0x30(%rsp)
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41e374:	41 88 4c 24 0f       	mov    %cl,0xf(%r12)
  41e379:	29 c2                	sub    %eax,%edx
  41e37b:	89 c1                	mov    %eax,%ecx
  41e37d:	89 54 24 60          	mov    %edx,0x60(%rsp)
  41e381:	83 ea 10             	sub    $0x10,%edx
  41e384:	c1 ea 04             	shr    $0x4,%edx
  41e387:	89 54 24 40          	mov    %edx,0x40(%rsp)
  41e38b:	83 c2 01             	add    $0x1,%edx
  41e38e:	89 54 24 50          	mov    %edx,0x50(%rsp)
  41e392:	c1 e2 04             	shl    $0x4,%edx
  41e395:	89 54 24 5c          	mov    %edx,0x5c(%rsp)
  41e399:	8b 54 24 58          	mov    0x58(%rsp),%edx
  41e39d:	29 c2                	sub    %eax,%edx
  41e39f:	83 fa 0e             	cmp    $0xe,%edx
  41e3a2:	0f 86 5f 02 00 00    	jbe    41e607 <inflate_fast+0xfd7>
  41e3a8:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  41e3ad:	49 8d 54 0c 01       	lea    0x1(%r12,%rcx,1),%rdx
  41e3b2:	48 01 c8             	add    %rcx,%rax
  41e3b5:	8b 4c 24 40          	mov    0x40(%rsp),%ecx
  41e3b9:	48 03 44 24 b0       	add    -0x50(%rsp),%rax
  41e3be:	83 e9 04             	sub    $0x4,%ecx
  41e3c1:	83 f9 fa             	cmp    $0xfffffffa,%ecx
  41e3c4:	0f 87 27 1f 00 00    	ja     4202f1 <inflate_fast+0x2cc1>
  41e3ca:	66 0f 6f 00          	movdqa (%rax),%xmm0
  41e3ce:	0f 18 88 d0 01 00 00 	prefetcht0 0x1d0(%rax)
  41e3d5:	c1 e9 02             	shr    $0x2,%ecx
  41e3d8:	8d 3c 8d 04 00 00 00 	lea    0x4(,%rcx,4),%edi
  41e3df:	48 83 c0 40          	add    $0x40,%rax
  41e3e3:	83 e1 03             	and    $0x3,%ecx
  41e3e6:	0f 11 02             	movups %xmm0,(%rdx)
  41e3e9:	c7 44 24 38 04 00 00 	movl   $0x4,0x38(%rsp)
  41e3f0:	00 
  41e3f1:	48 83 c2 40          	add    $0x40,%rdx
  41e3f5:	89 7c 24 4c          	mov    %edi,0x4c(%rsp)
  41e3f9:	66 0f 6f 48 d0       	movdqa -0x30(%rax),%xmm1
  41e3fe:	0f 11 4a d0          	movups %xmm1,-0x30(%rdx)
  41e402:	66 0f 6f 50 e0       	movdqa -0x20(%rax),%xmm2
  41e407:	0f 11 52 e0          	movups %xmm2,-0x20(%rdx)
  41e40b:	66 0f 6f 58 f0       	movdqa -0x10(%rax),%xmm3
  41e410:	0f 11 5a f0          	movups %xmm3,-0x10(%rdx)
  41e414:	39 7c 24 38          	cmp    %edi,0x38(%rsp)
  41e418:	0f 85 72 19 00 00    	jne    41fd90 <inflate_fast+0x2760>
  41e41e:	8b 7c 24 4c          	mov    0x4c(%rsp),%edi
  41e422:	48 c7 44 24 38 10 00 	movq   $0x10,0x38(%rsp)
  41e429:	00 00 
  41e42b:	66 0f 6f 00          	movdqa (%rax),%xmm0
  41e42f:	89 f9                	mov    %edi,%ecx
  41e431:	83 c7 01             	add    $0x1,%edi
  41e434:	f7 d1                	not    %ecx
  41e436:	03 4c 24 50          	add    0x50(%rsp),%ecx
  41e43a:	89 7c 24 40          	mov    %edi,0x40(%rsp)
  41e43e:	0f 11 02             	movups %xmm0,(%rdx)
  41e441:	83 e1 07             	and    $0x7,%ecx
  41e444:	39 7c 24 50          	cmp    %edi,0x50(%rsp)
  41e448:	89 4c 24 64          	mov    %ecx,0x64(%rsp)
  41e44c:	0f 86 99 01 00 00    	jbe    41e5eb <inflate_fast+0xfbb>
  41e452:	8b 4c 24 64          	mov    0x64(%rsp),%ecx
  41e456:	85 c9                	test   %ecx,%ecx
  41e458:	0f 84 fd 00 00 00    	je     41e55b <inflate_fast+0xf2b>
  41e45e:	83 f9 01             	cmp    $0x1,%ecx
  41e461:	0f 84 ca 00 00 00    	je     41e531 <inflate_fast+0xf01>
  41e467:	83 f9 02             	cmp    $0x2,%ecx
  41e46a:	0f 84 a5 00 00 00    	je     41e515 <inflate_fast+0xee5>
  41e470:	83 f9 03             	cmp    $0x3,%ecx
  41e473:	0f 84 80 00 00 00    	je     41e4f9 <inflate_fast+0xec9>
  41e479:	83 f9 04             	cmp    $0x4,%ecx
  41e47c:	74 5f                	je     41e4dd <inflate_fast+0xead>
  41e47e:	83 f9 05             	cmp    $0x5,%ecx
  41e481:	74 3e                	je     41e4c1 <inflate_fast+0xe91>
  41e483:	83 f9 06             	cmp    $0x6,%ecx
  41e486:	74 1d                	je     41e4a5 <inflate_fast+0xe75>
  41e488:	66 0f 6f 48 10       	movdqa 0x10(%rax),%xmm1
  41e48d:	8b 7c 24 4c          	mov    0x4c(%rsp),%edi
  41e491:	48 c7 44 24 38 20 00 	movq   $0x20,0x38(%rsp)
  41e498:	00 00 
  41e49a:	0f 11 4a 10          	movups %xmm1,0x10(%rdx)
  41e49e:	83 c7 02             	add    $0x2,%edi
  41e4a1:	89 7c 24 40          	mov    %edi,0x40(%rsp)
  41e4a5:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  41e4aa:	83 44 24 40 01       	addl   $0x1,0x40(%rsp)
  41e4af:	66 0f 6f 14 08       	movdqa (%rax,%rcx,1),%xmm2
  41e4b4:	0f 11 14 0a          	movups %xmm2,(%rdx,%rcx,1)
  41e4b8:	48 83 c1 10          	add    $0x10,%rcx
  41e4bc:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  41e4c1:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  41e4c6:	83 44 24 40 01       	addl   $0x1,0x40(%rsp)
  41e4cb:	66 0f 6f 1c 38       	movdqa (%rax,%rdi,1),%xmm3
  41e4d0:	0f 11 1c 3a          	movups %xmm3,(%rdx,%rdi,1)
  41e4d4:	48 83 c7 10          	add    $0x10,%rdi
  41e4d8:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  41e4dd:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  41e4e2:	83 44 24 40 01       	addl   $0x1,0x40(%rsp)
  41e4e7:	66 0f 6f 24 08       	movdqa (%rax,%rcx,1),%xmm4
  41e4ec:	0f 11 24 0a          	movups %xmm4,(%rdx,%rcx,1)
  41e4f0:	48 83 c1 10          	add    $0x10,%rcx
  41e4f4:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  41e4f9:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  41e4fe:	83 44 24 40 01       	addl   $0x1,0x40(%rsp)
  41e503:	66 0f 6f 2c 38       	movdqa (%rax,%rdi,1),%xmm5
  41e508:	0f 11 2c 3a          	movups %xmm5,(%rdx,%rdi,1)
  41e50c:	48 83 c7 10          	add    $0x10,%rdi
  41e510:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  41e515:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  41e51a:	83 44 24 40 01       	addl   $0x1,0x40(%rsp)
  41e51f:	66 0f 6f 34 08       	movdqa (%rax,%rcx,1),%xmm6
  41e524:	0f 11 34 0a          	movups %xmm6,(%rdx,%rcx,1)
  41e528:	48 83 c1 10          	add    $0x10,%rcx
  41e52c:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  41e531:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
  41e536:	83 44 24 40 01       	addl   $0x1,0x40(%rsp)
  41e53b:	8b 4c 24 40          	mov    0x40(%rsp),%ecx
  41e53f:	66 0f 6f 3c 38       	movdqa (%rax,%rdi,1),%xmm7
  41e544:	0f 11 3c 3a          	movups %xmm7,(%rdx,%rdi,1)
  41e548:	48 83 c7 10          	add    $0x10,%rdi
  41e54c:	39 4c 24 50          	cmp    %ecx,0x50(%rsp)
  41e550:	48 89 7c 24 38       	mov    %rdi,0x38(%rsp)
  41e555:	0f 86 90 00 00 00    	jbe    41e5eb <inflate_fast+0xfbb>
  41e55b:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  41e560:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  41e565:	89 74 24 4c          	mov    %esi,0x4c(%rsp)
  41e569:	66 44 0f 6f 04 08    	movdqa (%rax,%rcx,1),%xmm8
  41e56f:	83 44 24 40 08       	addl   $0x8,0x40(%rsp)
  41e574:	8b 74 24 40          	mov    0x40(%rsp),%esi
  41e578:	44 0f 11 04 0a       	movups %xmm8,(%rdx,%rcx,1)
  41e57d:	66 44 0f 6f 4c 08 10 	movdqa 0x10(%rax,%rcx,1),%xmm9
  41e584:	44 0f 11 4c 0a 10    	movups %xmm9,0x10(%rdx,%rcx,1)
  41e58a:	66 44 0f 6f 54 08 20 	movdqa 0x20(%rax,%rcx,1),%xmm10
  41e591:	44 0f 11 54 0a 20    	movups %xmm10,0x20(%rdx,%rcx,1)
  41e597:	66 44 0f 6f 5c 08 30 	movdqa 0x30(%rax,%rcx,1),%xmm11
  41e59e:	44 0f 11 5c 0a 30    	movups %xmm11,0x30(%rdx,%rcx,1)
  41e5a4:	66 44 0f 6f 64 08 40 	movdqa 0x40(%rax,%rcx,1),%xmm12
  41e5ab:	44 0f 11 64 0a 40    	movups %xmm12,0x40(%rdx,%rcx,1)
  41e5b1:	66 44 0f 6f 6c 08 50 	movdqa 0x50(%rax,%rcx,1),%xmm13
  41e5b8:	44 0f 11 6c 0a 50    	movups %xmm13,0x50(%rdx,%rcx,1)
  41e5be:	66 44 0f 6f 74 08 60 	movdqa 0x60(%rax,%rcx,1),%xmm14
  41e5c5:	44 0f 11 74 0a 60    	movups %xmm14,0x60(%rdx,%rcx,1)
  41e5cb:	66 44 0f 6f 7c 08 70 	movdqa 0x70(%rax,%rcx,1),%xmm15
  41e5d2:	44 0f 11 7c 0a 70    	movups %xmm15,0x70(%rdx,%rcx,1)
  41e5d8:	48 83 e9 80          	sub    $0xffffffffffffff80,%rcx
  41e5dc:	39 74 24 50          	cmp    %esi,0x50(%rsp)
  41e5e0:	77 87                	ja     41e569 <inflate_fast+0xf39>
  41e5e2:	8b 74 24 4c          	mov    0x4c(%rsp),%esi
  41e5e6:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  41e5eb:	8b 54 24 5c          	mov    0x5c(%rsp),%edx
  41e5ef:	29 54 24 30          	sub    %edx,0x30(%rsp)
  41e5f3:	89 d0                	mov    %edx,%eax
  41e5f5:	48 01 44 24 28       	add    %rax,0x28(%rsp)
  41e5fa:	49 01 c0             	add    %rax,%r8
  41e5fd:	3b 54 24 60          	cmp    0x60(%rsp),%edx
  41e601:	0f 84 e1 00 00 00    	je     41e6e8 <inflate_fast+0x10b8>
  41e607:	41 0f b6 50 01       	movzbl 0x1(%r8),%edx
                            } while (--op);
  41e60c:	8b 7c 24 30          	mov    0x30(%rsp),%edi
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41e610:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
                            } while (--op);
  41e615:	83 ff 01             	cmp    $0x1,%edi
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41e618:	88 51 01             	mov    %dl,0x1(%rcx)
                            } while (--op);
  41e61b:	0f 84 c7 00 00 00    	je     41e6e8 <inflate_fast+0x10b8>
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41e621:	41 0f b6 50 02       	movzbl 0x2(%r8),%edx
                            } while (--op);
  41e626:	83 ff 02             	cmp    $0x2,%edi
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41e629:	88 51 02             	mov    %dl,0x2(%rcx)
                            } while (--op);
  41e62c:	0f 84 b6 00 00 00    	je     41e6e8 <inflate_fast+0x10b8>
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41e632:	41 0f b6 50 03       	movzbl 0x3(%r8),%edx
                            } while (--op);
  41e637:	83 ff 03             	cmp    $0x3,%edi
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41e63a:	88 51 03             	mov    %dl,0x3(%rcx)
                            } while (--op);
  41e63d:	0f 84 a5 00 00 00    	je     41e6e8 <inflate_fast+0x10b8>
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41e643:	41 0f b6 50 04       	movzbl 0x4(%r8),%edx
                            } while (--op);
  41e648:	83 ff 04             	cmp    $0x4,%edi
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41e64b:	88 51 04             	mov    %dl,0x4(%rcx)
                            } while (--op);
  41e64e:	0f 84 94 00 00 00    	je     41e6e8 <inflate_fast+0x10b8>
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41e654:	41 0f b6 50 05       	movzbl 0x5(%r8),%edx
                            } while (--op);
  41e659:	83 ff 05             	cmp    $0x5,%edi
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41e65c:	88 51 05             	mov    %dl,0x5(%rcx)
                            } while (--op);
  41e65f:	0f 84 83 00 00 00    	je     41e6e8 <inflate_fast+0x10b8>
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41e665:	41 0f b6 50 06       	movzbl 0x6(%r8),%edx
                            } while (--op);
  41e66a:	83 ff 06             	cmp    $0x6,%edi
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41e66d:	88 51 06             	mov    %dl,0x6(%rcx)
                            } while (--op);
  41e670:	74 76                	je     41e6e8 <inflate_fast+0x10b8>
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41e672:	41 0f b6 50 07       	movzbl 0x7(%r8),%edx
                            } while (--op);
  41e677:	83 ff 07             	cmp    $0x7,%edi
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41e67a:	88 51 07             	mov    %dl,0x7(%rcx)
                            } while (--op);
  41e67d:	74 69                	je     41e6e8 <inflate_fast+0x10b8>
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41e67f:	41 0f b6 50 08       	movzbl 0x8(%r8),%edx
                            } while (--op);
  41e684:	83 ff 08             	cmp    $0x8,%edi
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41e687:	88 51 08             	mov    %dl,0x8(%rcx)
                            } while (--op);
  41e68a:	74 5c                	je     41e6e8 <inflate_fast+0x10b8>
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41e68c:	41 0f b6 50 09       	movzbl 0x9(%r8),%edx
                            } while (--op);
  41e691:	83 ff 09             	cmp    $0x9,%edi
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41e694:	88 51 09             	mov    %dl,0x9(%rcx)
                            } while (--op);
  41e697:	74 4f                	je     41e6e8 <inflate_fast+0x10b8>
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41e699:	41 0f b6 50 0a       	movzbl 0xa(%r8),%edx
                            } while (--op);
  41e69e:	83 ff 0a             	cmp    $0xa,%edi
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41e6a1:	88 51 0a             	mov    %dl,0xa(%rcx)
                            } while (--op);
  41e6a4:	74 42                	je     41e6e8 <inflate_fast+0x10b8>
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41e6a6:	41 0f b6 50 0b       	movzbl 0xb(%r8),%edx
                            } while (--op);
  41e6ab:	83 ff 0b             	cmp    $0xb,%edi
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41e6ae:	88 51 0b             	mov    %dl,0xb(%rcx)
                            } while (--op);
  41e6b1:	74 35                	je     41e6e8 <inflate_fast+0x10b8>
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41e6b3:	41 0f b6 50 0c       	movzbl 0xc(%r8),%edx
                            } while (--op);
  41e6b8:	83 ff 0c             	cmp    $0xc,%edi
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41e6bb:	88 51 0c             	mov    %dl,0xc(%rcx)
                            } while (--op);
  41e6be:	74 28                	je     41e6e8 <inflate_fast+0x10b8>
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41e6c0:	41 0f b6 50 0d       	movzbl 0xd(%r8),%edx
                            } while (--op);
  41e6c5:	83 ff 0d             	cmp    $0xd,%edi
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41e6c8:	88 51 0d             	mov    %dl,0xd(%rcx)
                            } while (--op);
  41e6cb:	74 1b                	je     41e6e8 <inflate_fast+0x10b8>
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41e6cd:	41 0f b6 50 0e       	movzbl 0xe(%r8),%edx
                            } while (--op);
  41e6d2:	83 ff 0e             	cmp    $0xe,%edi
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41e6d5:	88 51 0e             	mov    %dl,0xe(%rcx)
                            } while (--op);
  41e6d8:	74 0e                	je     41e6e8 <inflate_fast+0x10b8>
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41e6da:	45 0f b6 40 0f       	movzbl 0xf(%r8),%r8d
  41e6df:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  41e6e4:	44 88 47 0f          	mov    %r8b,0xf(%rdi)
  41e6e8:	8b 4c 24 58          	mov    0x58(%rsp),%ecx
                            } while (--op);
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
  41e6ec:	39 74 24 b8          	cmp    %esi,-0x48(%rsp)
  41e6f0:	49 8d 54 0c 01       	lea    0x1(%r12,%rcx,1),%rdx
  41e6f5:	0f 83 e8 13 00 00    	jae    41fae3 <inflate_fast+0x24b3>
  41e6fb:	4d 8d 44 0c 02       	lea    0x2(%r12,%rcx,1),%r8
                                op = write;
                                len -= op;
  41e700:	2b 74 24 b8          	sub    -0x48(%rsp),%esi
  41e704:	4c 3b 44 24 08       	cmp    0x8(%rsp),%r8
  41e709:	49 8d 44 0c 12       	lea    0x12(%r12,%rcx,1),%rax
  41e70e:	40 0f 93 c7          	setae  %dil
  41e712:	48 39 44 24 b0       	cmp    %rax,-0x50(%rsp)
  41e717:	41 0f 93 c0          	setae  %r8b
  41e71b:	44 08 c7             	or     %r8b,%dil
  41e71e:	0f 84 7b 1a 00 00    	je     42019f <inflate_fast+0x2b6f>
  41e724:	83 7c 24 b8 16       	cmpl   $0x16,-0x48(%rsp)
  41e729:	0f 86 70 1a 00 00    	jbe    42019f <inflate_fast+0x2b6f>
  41e72f:	8b 44 24 bc          	mov    -0x44(%rsp),%eax
  41e733:	85 c0                	test   %eax,%eax
  41e735:	0f 84 50 1a 00 00    	je     42018b <inflate_fast+0x2b5b>
                                do {
                                    PUP(out) = PUP(from);
  41e73b:	4c 8b 44 24 b0       	mov    -0x50(%rsp),%r8
  41e740:	48 8d 7a 01          	lea    0x1(%rdx),%rdi
  41e744:	83 7c 24 bc 01       	cmpl   $0x1,-0x44(%rsp)
  41e749:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  41e74e:	41 0f b6 38          	movzbl (%r8),%edi
  41e752:	40 88 7a 01          	mov    %dil,0x1(%rdx)
  41e756:	0f 84 c1 1b 00 00    	je     42031d <inflate_fast+0x2ced>
  41e75c:	48 8d 7a 02          	lea    0x2(%rdx),%rdi
  41e760:	41 0f b6 40 01       	movzbl 0x1(%r8),%eax
  41e765:	83 7c 24 bc 02       	cmpl   $0x2,-0x44(%rsp)
  41e76a:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  41e76f:	49 8d 78 01          	lea    0x1(%r8),%rdi
  41e773:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
                                } while (--op);
  41e778:	8b 7c 24 b8          	mov    -0x48(%rsp),%edi
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41e77c:	88 42 02             	mov    %al,0x2(%rdx)
                                } while (--op);
  41e77f:	8d 47 fe             	lea    -0x2(%rdi),%eax
  41e782:	89 44 24 30          	mov    %eax,0x30(%rsp)
  41e786:	0f 84 61 02 00 00    	je     41e9ed <inflate_fast+0x13bd>
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41e78c:	48 8d 7a 03          	lea    0x3(%rdx),%rdi
  41e790:	41 0f b6 40 02       	movzbl 0x2(%r8),%eax
  41e795:	83 7c 24 bc 03       	cmpl   $0x3,-0x44(%rsp)
  41e79a:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  41e79f:	49 8d 78 02          	lea    0x2(%r8),%rdi
  41e7a3:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
                                } while (--op);
  41e7a8:	8b 7c 24 b8          	mov    -0x48(%rsp),%edi
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41e7ac:	88 42 03             	mov    %al,0x3(%rdx)
                                } while (--op);
  41e7af:	8d 47 fd             	lea    -0x3(%rdi),%eax
  41e7b2:	89 44 24 30          	mov    %eax,0x30(%rsp)
  41e7b6:	0f 84 31 02 00 00    	je     41e9ed <inflate_fast+0x13bd>
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41e7bc:	48 8d 7a 04          	lea    0x4(%rdx),%rdi
  41e7c0:	41 0f b6 40 03       	movzbl 0x3(%r8),%eax
  41e7c5:	83 7c 24 bc 04       	cmpl   $0x4,-0x44(%rsp)
  41e7ca:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  41e7cf:	49 8d 78 03          	lea    0x3(%r8),%rdi
  41e7d3:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
                                } while (--op);
  41e7d8:	8b 7c 24 b8          	mov    -0x48(%rsp),%edi
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41e7dc:	88 42 04             	mov    %al,0x4(%rdx)
                                } while (--op);
  41e7df:	8d 47 fc             	lea    -0x4(%rdi),%eax
  41e7e2:	89 44 24 30          	mov    %eax,0x30(%rsp)
  41e7e6:	0f 84 01 02 00 00    	je     41e9ed <inflate_fast+0x13bd>
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41e7ec:	48 8d 7a 05          	lea    0x5(%rdx),%rdi
  41e7f0:	41 0f b6 40 04       	movzbl 0x4(%r8),%eax
  41e7f5:	83 7c 24 bc 05       	cmpl   $0x5,-0x44(%rsp)
  41e7fa:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  41e7ff:	49 8d 78 04          	lea    0x4(%r8),%rdi
  41e803:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
                                } while (--op);
  41e808:	8b 7c 24 b8          	mov    -0x48(%rsp),%edi
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41e80c:	88 42 05             	mov    %al,0x5(%rdx)
                                } while (--op);
  41e80f:	8d 47 fb             	lea    -0x5(%rdi),%eax
  41e812:	89 44 24 30          	mov    %eax,0x30(%rsp)
  41e816:	0f 84 d1 01 00 00    	je     41e9ed <inflate_fast+0x13bd>
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41e81c:	48 8d 7a 06          	lea    0x6(%rdx),%rdi
  41e820:	41 0f b6 40 05       	movzbl 0x5(%r8),%eax
  41e825:	83 7c 24 bc 06       	cmpl   $0x6,-0x44(%rsp)
  41e82a:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  41e82f:	49 8d 78 05          	lea    0x5(%r8),%rdi
  41e833:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
                                } while (--op);
  41e838:	8b 7c 24 b8          	mov    -0x48(%rsp),%edi
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41e83c:	88 42 06             	mov    %al,0x6(%rdx)
                                } while (--op);
  41e83f:	8d 47 fa             	lea    -0x6(%rdi),%eax
  41e842:	89 44 24 30          	mov    %eax,0x30(%rsp)
  41e846:	0f 84 a1 01 00 00    	je     41e9ed <inflate_fast+0x13bd>
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41e84c:	48 8d 7a 07          	lea    0x7(%rdx),%rdi
  41e850:	41 0f b6 40 06       	movzbl 0x6(%r8),%eax
  41e855:	83 7c 24 bc 07       	cmpl   $0x7,-0x44(%rsp)
  41e85a:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  41e85f:	49 8d 78 06          	lea    0x6(%r8),%rdi
  41e863:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
                                } while (--op);
  41e868:	8b 7c 24 b8          	mov    -0x48(%rsp),%edi
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41e86c:	88 42 07             	mov    %al,0x7(%rdx)
                                } while (--op);
  41e86f:	8d 47 f9             	lea    -0x7(%rdi),%eax
  41e872:	89 44 24 30          	mov    %eax,0x30(%rsp)
  41e876:	0f 84 71 01 00 00    	je     41e9ed <inflate_fast+0x13bd>
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41e87c:	48 8d 7a 08          	lea    0x8(%rdx),%rdi
  41e880:	41 0f b6 40 07       	movzbl 0x7(%r8),%eax
  41e885:	83 7c 24 bc 08       	cmpl   $0x8,-0x44(%rsp)
  41e88a:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  41e88f:	49 8d 78 07          	lea    0x7(%r8),%rdi
  41e893:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
                                } while (--op);
  41e898:	8b 7c 24 b8          	mov    -0x48(%rsp),%edi
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41e89c:	88 42 08             	mov    %al,0x8(%rdx)
                                } while (--op);
  41e89f:	8d 47 f8             	lea    -0x8(%rdi),%eax
  41e8a2:	89 44 24 30          	mov    %eax,0x30(%rsp)
  41e8a6:	0f 84 41 01 00 00    	je     41e9ed <inflate_fast+0x13bd>
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41e8ac:	48 8d 7a 09          	lea    0x9(%rdx),%rdi
  41e8b0:	41 0f b6 40 08       	movzbl 0x8(%r8),%eax
  41e8b5:	83 7c 24 bc 09       	cmpl   $0x9,-0x44(%rsp)
  41e8ba:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  41e8bf:	49 8d 78 08          	lea    0x8(%r8),%rdi
  41e8c3:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
                                } while (--op);
  41e8c8:	8b 7c 24 b8          	mov    -0x48(%rsp),%edi
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41e8cc:	88 42 09             	mov    %al,0x9(%rdx)
                                } while (--op);
  41e8cf:	8d 47 f7             	lea    -0x9(%rdi),%eax
  41e8d2:	89 44 24 30          	mov    %eax,0x30(%rsp)
  41e8d6:	0f 84 11 01 00 00    	je     41e9ed <inflate_fast+0x13bd>
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41e8dc:	48 8d 7a 0a          	lea    0xa(%rdx),%rdi
  41e8e0:	41 0f b6 40 09       	movzbl 0x9(%r8),%eax
  41e8e5:	83 7c 24 bc 0a       	cmpl   $0xa,-0x44(%rsp)
  41e8ea:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  41e8ef:	49 8d 78 09          	lea    0x9(%r8),%rdi
  41e8f3:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
                                } while (--op);
  41e8f8:	8b 7c 24 b8          	mov    -0x48(%rsp),%edi
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41e8fc:	88 42 0a             	mov    %al,0xa(%rdx)
                                } while (--op);
  41e8ff:	8d 47 f6             	lea    -0xa(%rdi),%eax
  41e902:	89 44 24 30          	mov    %eax,0x30(%rsp)
  41e906:	0f 84 e1 00 00 00    	je     41e9ed <inflate_fast+0x13bd>
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41e90c:	48 8d 7a 0b          	lea    0xb(%rdx),%rdi
  41e910:	41 0f b6 40 0a       	movzbl 0xa(%r8),%eax
  41e915:	83 7c 24 bc 0b       	cmpl   $0xb,-0x44(%rsp)
  41e91a:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  41e91f:	49 8d 78 0a          	lea    0xa(%r8),%rdi
  41e923:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
                                } while (--op);
  41e928:	8b 7c 24 b8          	mov    -0x48(%rsp),%edi
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41e92c:	88 42 0b             	mov    %al,0xb(%rdx)
                                } while (--op);
  41e92f:	8d 47 f5             	lea    -0xb(%rdi),%eax
  41e932:	89 44 24 30          	mov    %eax,0x30(%rsp)
  41e936:	0f 84 b1 00 00 00    	je     41e9ed <inflate_fast+0x13bd>
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41e93c:	48 8d 7a 0c          	lea    0xc(%rdx),%rdi
  41e940:	41 0f b6 40 0b       	movzbl 0xb(%r8),%eax
  41e945:	83 7c 24 bc 0c       	cmpl   $0xc,-0x44(%rsp)
  41e94a:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  41e94f:	49 8d 78 0b          	lea    0xb(%r8),%rdi
  41e953:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
                                } while (--op);
  41e958:	8b 7c 24 b8          	mov    -0x48(%rsp),%edi
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41e95c:	88 42 0c             	mov    %al,0xc(%rdx)
                                } while (--op);
  41e95f:	8d 47 f4             	lea    -0xc(%rdi),%eax
  41e962:	89 44 24 30          	mov    %eax,0x30(%rsp)
  41e966:	0f 84 81 00 00 00    	je     41e9ed <inflate_fast+0x13bd>
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41e96c:	48 8d 7a 0d          	lea    0xd(%rdx),%rdi
  41e970:	41 0f b6 40 0c       	movzbl 0xc(%r8),%eax
  41e975:	83 7c 24 bc 0d       	cmpl   $0xd,-0x44(%rsp)
  41e97a:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  41e97f:	49 8d 78 0c          	lea    0xc(%r8),%rdi
  41e983:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
                                } while (--op);
  41e988:	8b 7c 24 b8          	mov    -0x48(%rsp),%edi
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41e98c:	88 42 0d             	mov    %al,0xd(%rdx)
                                } while (--op);
  41e98f:	8d 47 f3             	lea    -0xd(%rdi),%eax
  41e992:	89 44 24 30          	mov    %eax,0x30(%rsp)
  41e996:	74 55                	je     41e9ed <inflate_fast+0x13bd>
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41e998:	48 8d 7a 0e          	lea    0xe(%rdx),%rdi
  41e99c:	41 0f b6 40 0d       	movzbl 0xd(%r8),%eax
  41e9a1:	83 7c 24 bc 0f       	cmpl   $0xf,-0x44(%rsp)
  41e9a6:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  41e9ab:	49 8d 78 0d          	lea    0xd(%r8),%rdi
  41e9af:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
                                } while (--op);
  41e9b4:	8b 7c 24 b8          	mov    -0x48(%rsp),%edi
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41e9b8:	88 42 0e             	mov    %al,0xe(%rdx)
                                } while (--op);
  41e9bb:	8d 47 f2             	lea    -0xe(%rdi),%eax
  41e9be:	89 44 24 30          	mov    %eax,0x30(%rsp)
  41e9c2:	75 29                	jne    41e9ed <inflate_fast+0x13bd>
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41e9c4:	48 8d 7a 0f          	lea    0xf(%rdx),%rdi
  41e9c8:	4c 89 c0             	mov    %r8,%rax
  41e9cb:	48 83 c0 0e          	add    $0xe,%rax
  41e9cf:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  41e9d4:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  41e9d9:	41 0f b6 78 0e       	movzbl 0xe(%r8),%edi
                                } while (--op);
  41e9de:	8b 44 24 b8          	mov    -0x48(%rsp),%eax
  41e9e2:	83 e8 0f             	sub    $0xf,%eax
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41e9e5:	40 88 7a 0f          	mov    %dil,0xf(%rdx)
                                } while (--op);
  41e9e9:	89 44 24 30          	mov    %eax,0x30(%rsp)
  41e9ed:	83 7c 24 f8 0e       	cmpl   $0xe,-0x8(%rsp)
  41e9f2:	0f 86 31 04 00 00    	jbe    41ee29 <inflate_fast+0x17f9>
  41e9f8:	48 03 4c 24 18       	add    0x18(%rsp),%rcx
  41e9fd:	4c 8b 44 24 e0       	mov    -0x20(%rsp),%r8
  41ea02:	4c 89 c0             	mov    %r8,%rax
  41ea05:	49 01 cc             	add    %rcx,%r12
  41ea08:	83 7c 24 ec fa       	cmpl   $0xfffffffa,-0x14(%rsp)
  41ea0d:	0f 87 f8 18 00 00    	ja     42030b <inflate_fast+0x2cdb>
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41ea13:	66 41 0f 6f 00       	movdqa (%r8),%xmm0
  41ea18:	41 0f 18 88 d0 01 00 	prefetcht0 0x1d0(%r8)
  41ea1f:	00 
  41ea20:	4c 89 c0             	mov    %r8,%rax
  41ea23:	8b 7c 24 d4          	mov    -0x2c(%rsp),%edi
  41ea27:	48 83 c0 40          	add    $0x40,%rax
  41ea2b:	49 83 c4 40          	add    $0x40,%r12
  41ea2f:	41 0f 11 44 24 c0    	movups %xmm0,-0x40(%r12)
  41ea35:	89 f9                	mov    %edi,%ecx
  41ea37:	83 e9 04             	sub    $0x4,%ecx
  41ea3a:	66 41 0f 6f 48 10    	movdqa 0x10(%r8),%xmm1
  41ea40:	c1 e9 02             	shr    $0x2,%ecx
  41ea43:	83 e1 03             	and    $0x3,%ecx
  41ea46:	41 0f 11 4c 24 d0    	movups %xmm1,-0x30(%r12)
  41ea4c:	66 41 0f 6f 50 20    	movdqa 0x20(%r8),%xmm2
  41ea52:	41 0f 11 54 24 e0    	movups %xmm2,-0x20(%r12)
  41ea58:	66 41 0f 6f 58 30    	movdqa 0x30(%r8),%xmm3
  41ea5e:	41 b8 04 00 00 00    	mov    $0x4,%r8d
  41ea64:	44 89 44 24 38       	mov    %r8d,0x38(%rsp)
  41ea69:	41 0f 11 5c 24 f0    	movups %xmm3,-0x10(%r12)
  41ea6f:	41 39 f8             	cmp    %edi,%r8d
  41ea72:	0f 84 21 02 00 00    	je     41ec99 <inflate_fast+0x1669>
  41ea78:	85 c9                	test   %ecx,%ecx
  41ea7a:	0f 84 ef 00 00 00    	je     41eb6f <inflate_fast+0x153f>
  41ea80:	83 f9 01             	cmp    $0x1,%ecx
  41ea83:	0f 84 94 00 00 00    	je     41eb1d <inflate_fast+0x14ed>
  41ea89:	83 f9 02             	cmp    $0x2,%ecx
  41ea8c:	74 4b                	je     41ead9 <inflate_fast+0x14a9>
  41ea8e:	48 8b 7c 24 e0       	mov    -0x20(%rsp),%rdi
  41ea93:	49 83 c4 40          	add    $0x40,%r12
  41ea97:	66 0f 6f 67 40       	movdqa 0x40(%rdi),%xmm4
  41ea9c:	0f 18 8f 10 02 00 00 	prefetcht0 0x210(%rdi)
  41eaa3:	c7 44 24 38 08 00 00 	movl   $0x8,0x38(%rsp)
  41eaaa:	00 
  41eaab:	41 0f 11 64 24 c0    	movups %xmm4,-0x40(%r12)
  41eab1:	66 0f 6f 68 10       	movdqa 0x10(%rax),%xmm5
  41eab6:	41 0f 11 6c 24 d0    	movups %xmm5,-0x30(%r12)
  41eabc:	66 0f 6f 70 20       	movdqa 0x20(%rax),%xmm6
  41eac1:	41 0f 11 74 24 e0    	movups %xmm6,-0x20(%r12)
  41eac7:	66 0f 6f 78 30       	movdqa 0x30(%rax),%xmm7
  41eacc:	48 8d 87 80 00 00 00 	lea    0x80(%rdi),%rax
  41ead3:	41 0f 11 7c 24 f0    	movups %xmm7,-0x10(%r12)
  41ead9:	0f 18 88 d0 01 00 00 	prefetcht0 0x1d0(%rax)
  41eae0:	83 44 24 38 04       	addl   $0x4,0x38(%rsp)
  41eae5:	48 83 c0 40          	add    $0x40,%rax
  41eae9:	49 83 c4 40          	add    $0x40,%r12
  41eaed:	66 44 0f 6f 40 c0    	movdqa -0x40(%rax),%xmm8
  41eaf3:	45 0f 11 44 24 c0    	movups %xmm8,-0x40(%r12)
  41eaf9:	66 44 0f 6f 48 d0    	movdqa -0x30(%rax),%xmm9
  41eaff:	45 0f 11 4c 24 d0    	movups %xmm9,-0x30(%r12)
  41eb05:	66 44 0f 6f 50 e0    	movdqa -0x20(%rax),%xmm10
  41eb0b:	45 0f 11 54 24 e0    	movups %xmm10,-0x20(%r12)
  41eb11:	66 44 0f 6f 58 f0    	movdqa -0x10(%rax),%xmm11
  41eb17:	45 0f 11 5c 24 f0    	movups %xmm11,-0x10(%r12)
  41eb1d:	0f 18 88 d0 01 00 00 	prefetcht0 0x1d0(%rax)
  41eb24:	83 44 24 38 04       	addl   $0x4,0x38(%rsp)
  41eb29:	48 83 c0 40          	add    $0x40,%rax
  41eb2d:	49 83 c4 40          	add    $0x40,%r12
  41eb31:	8b 4c 24 38          	mov    0x38(%rsp),%ecx
  41eb35:	66 44 0f 6f 60 c0    	movdqa -0x40(%rax),%xmm12
  41eb3b:	45 0f 11 64 24 c0    	movups %xmm12,-0x40(%r12)
  41eb41:	66 44 0f 6f 68 d0    	movdqa -0x30(%rax),%xmm13
  41eb47:	45 0f 11 6c 24 d0    	movups %xmm13,-0x30(%r12)
  41eb4d:	66 44 0f 6f 70 e0    	movdqa -0x20(%rax),%xmm14
  41eb53:	45 0f 11 74 24 e0    	movups %xmm14,-0x20(%r12)
  41eb59:	66 44 0f 6f 78 f0    	movdqa -0x10(%rax),%xmm15
  41eb5f:	45 0f 11 7c 24 f0    	movups %xmm15,-0x10(%r12)
  41eb65:	3b 4c 24 d4          	cmp    -0x2c(%rsp),%ecx
  41eb69:	0f 84 2a 01 00 00    	je     41ec99 <inflate_fast+0x1669>
  41eb6f:	4c 8b 44 24 20       	mov    0x20(%rsp),%r8
  41eb74:	66 0f 6f 00          	movdqa (%rax),%xmm0
  41eb78:	0f 18 88 d0 01 00 00 	prefetcht0 0x1d0(%rax)
  41eb7f:	0f 18 88 10 02 00 00 	prefetcht0 0x210(%rax)
  41eb86:	0f 18 88 50 02 00 00 	prefetcht0 0x250(%rax)
  41eb8d:	0f 18 88 90 02 00 00 	prefetcht0 0x290(%rax)
  41eb94:	49 81 c4 00 01 00 00 	add    $0x100,%r12
  41eb9b:	41 0f 11 84 24 00 ff 	movups %xmm0,-0x100(%r12)
  41eba2:	ff ff 
  41eba4:	48 05 00 01 00 00    	add    $0x100,%rax
  41ebaa:	66 0f 6f 88 10 ff ff 	movdqa -0xf0(%rax),%xmm1
  41ebb1:	ff 
  41ebb2:	41 0f 11 8c 24 10 ff 	movups %xmm1,-0xf0(%r12)
  41ebb9:	ff ff 
  41ebbb:	66 0f 6f 90 20 ff ff 	movdqa -0xe0(%rax),%xmm2
  41ebc2:	ff 
  41ebc3:	41 0f 11 94 24 20 ff 	movups %xmm2,-0xe0(%r12)
  41ebca:	ff ff 
  41ebcc:	66 0f 6f 98 30 ff ff 	movdqa -0xd0(%rax),%xmm3
  41ebd3:	ff 
  41ebd4:	41 0f 11 9c 24 30 ff 	movups %xmm3,-0xd0(%r12)
  41ebdb:	ff ff 
  41ebdd:	66 0f 6f a0 40 ff ff 	movdqa -0xc0(%rax),%xmm4
  41ebe4:	ff 
  41ebe5:	41 0f 11 a4 24 40 ff 	movups %xmm4,-0xc0(%r12)
  41ebec:	ff ff 
  41ebee:	66 0f 6f a8 50 ff ff 	movdqa -0xb0(%rax),%xmm5
  41ebf5:	ff 
  41ebf6:	41 0f 11 ac 24 50 ff 	movups %xmm5,-0xb0(%r12)
  41ebfd:	ff ff 
  41ebff:	66 0f 6f b0 60 ff ff 	movdqa -0xa0(%rax),%xmm6
  41ec06:	ff 
  41ec07:	41 0f 11 b4 24 60 ff 	movups %xmm6,-0xa0(%r12)
  41ec0e:	ff ff 
  41ec10:	66 0f 6f b8 70 ff ff 	movdqa -0x90(%rax),%xmm7
  41ec17:	ff 
  41ec18:	41 0f 11 bc 24 70 ff 	movups %xmm7,-0x90(%r12)
  41ec1f:	ff ff 
  41ec21:	66 44 0f 6f 40 80    	movdqa -0x80(%rax),%xmm8
  41ec27:	45 0f 11 44 24 80    	movups %xmm8,-0x80(%r12)
  41ec2d:	66 44 0f 6f 48 90    	movdqa -0x70(%rax),%xmm9
  41ec33:	45 0f 11 4c 24 90    	movups %xmm9,-0x70(%r12)
  41ec39:	66 44 0f 6f 50 a0    	movdqa -0x60(%rax),%xmm10
  41ec3f:	45 0f 11 54 24 a0    	movups %xmm10,-0x60(%r12)
  41ec45:	66 44 0f 6f 58 b0    	movdqa -0x50(%rax),%xmm11
  41ec4b:	45 0f 11 5c 24 b0    	movups %xmm11,-0x50(%r12)
  41ec51:	66 44 0f 6f 60 c0    	movdqa -0x40(%rax),%xmm12
  41ec57:	45 0f 11 64 24 c0    	movups %xmm12,-0x40(%r12)
  41ec5d:	66 44 0f 6f 68 d0    	movdqa -0x30(%rax),%xmm13
  41ec63:	45 0f 11 6c 24 d0    	movups %xmm13,-0x30(%r12)
  41ec69:	66 44 0f 6f 70 e0    	movdqa -0x20(%rax),%xmm14
  41ec6f:	45 0f 11 74 24 e0    	movups %xmm14,-0x20(%r12)
  41ec75:	83 44 24 38 10       	addl   $0x10,0x38(%rsp)
  41ec7a:	8b 7c 24 38          	mov    0x38(%rsp),%edi
  41ec7e:	66 44 0f 6f 78 f0    	movdqa -0x10(%rax),%xmm15
  41ec84:	45 0f 11 7c 24 f0    	movups %xmm15,-0x10(%r12)
  41ec8a:	3b 7c 24 d4          	cmp    -0x2c(%rsp),%edi
  41ec8e:	0f 85 e0 fe ff ff    	jne    41eb74 <inflate_fast+0x1544>
  41ec94:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
  41ec99:	44 8b 44 24 d4       	mov    -0x2c(%rsp),%r8d
  41ec9e:	44 89 44 24 38       	mov    %r8d,0x38(%rsp)
  41eca3:	44 89 c1             	mov    %r8d,%ecx
  41eca6:	45 8d 40 01          	lea    0x1(%r8),%r8d
  41ecaa:	f7 d1                	not    %ecx
  41ecac:	03 4c 24 e8          	add    -0x18(%rsp),%ecx
  41ecb0:	66 0f 6f 00          	movdqa (%rax),%xmm0
  41ecb4:	41 0f 11 04 24       	movups %xmm0,(%r12)
  41ecb9:	83 e1 07             	and    $0x7,%ecx
  41ecbc:	44 39 44 24 e8       	cmp    %r8d,-0x18(%rsp)
  41ecc1:	89 4c 24 40          	mov    %ecx,0x40(%rsp)
  41ecc5:	b9 10 00 00 00       	mov    $0x10,%ecx
  41ecca:	0f 86 39 01 00 00    	jbe    41ee09 <inflate_fast+0x17d9>
  41ecd0:	8b 7c 24 40          	mov    0x40(%rsp),%edi
  41ecd4:	85 ff                	test   %edi,%edi
  41ecd6:	0f 84 ae 00 00 00    	je     41ed8a <inflate_fast+0x175a>
  41ecdc:	83 ff 01             	cmp    $0x1,%edi
  41ecdf:	0f 84 8c 00 00 00    	je     41ed71 <inflate_fast+0x1741>
  41ece5:	83 ff 02             	cmp    $0x2,%edi
  41ece8:	74 75                	je     41ed5f <inflate_fast+0x172f>
  41ecea:	83 ff 03             	cmp    $0x3,%edi
  41eced:	74 5e                	je     41ed4d <inflate_fast+0x171d>
  41ecef:	83 ff 04             	cmp    $0x4,%edi
  41ecf2:	74 47                	je     41ed3b <inflate_fast+0x170b>
  41ecf4:	83 ff 05             	cmp    $0x5,%edi
  41ecf7:	74 30                	je     41ed29 <inflate_fast+0x16f9>
  41ecf9:	83 ff 06             	cmp    $0x6,%edi
  41ecfc:	74 19                	je     41ed17 <inflate_fast+0x16e7>
  41ecfe:	66 0f 6f 48 10       	movdqa 0x10(%rax),%xmm1
  41ed03:	b9 20 00 00 00       	mov    $0x20,%ecx
  41ed08:	44 8b 44 24 38       	mov    0x38(%rsp),%r8d
  41ed0d:	41 0f 11 4c 24 10    	movups %xmm1,0x10(%r12)
  41ed13:	41 83 c0 02          	add    $0x2,%r8d
  41ed17:	41 83 c0 01          	add    $0x1,%r8d
  41ed1b:	66 0f 6f 14 08       	movdqa (%rax,%rcx,1),%xmm2
  41ed20:	41 0f 11 14 0c       	movups %xmm2,(%r12,%rcx,1)
  41ed25:	48 83 c1 10          	add    $0x10,%rcx
  41ed29:	41 83 c0 01          	add    $0x1,%r8d
  41ed2d:	66 0f 6f 1c 08       	movdqa (%rax,%rcx,1),%xmm3
  41ed32:	41 0f 11 1c 0c       	movups %xmm3,(%r12,%rcx,1)
  41ed37:	48 83 c1 10          	add    $0x10,%rcx
  41ed3b:	41 83 c0 01          	add    $0x1,%r8d
  41ed3f:	66 0f 6f 24 08       	movdqa (%rax,%rcx,1),%xmm4
  41ed44:	41 0f 11 24 0c       	movups %xmm4,(%r12,%rcx,1)
  41ed49:	48 83 c1 10          	add    $0x10,%rcx
  41ed4d:	41 83 c0 01          	add    $0x1,%r8d
  41ed51:	66 0f 6f 2c 08       	movdqa (%rax,%rcx,1),%xmm5
  41ed56:	41 0f 11 2c 0c       	movups %xmm5,(%r12,%rcx,1)
  41ed5b:	48 83 c1 10          	add    $0x10,%rcx
  41ed5f:	41 83 c0 01          	add    $0x1,%r8d
  41ed63:	66 0f 6f 34 08       	movdqa (%rax,%rcx,1),%xmm6
  41ed68:	41 0f 11 34 0c       	movups %xmm6,(%r12,%rcx,1)
  41ed6d:	48 83 c1 10          	add    $0x10,%rcx
  41ed71:	41 83 c0 01          	add    $0x1,%r8d
  41ed75:	66 0f 6f 3c 08       	movdqa (%rax,%rcx,1),%xmm7
  41ed7a:	41 0f 11 3c 0c       	movups %xmm7,(%r12,%rcx,1)
  41ed7f:	48 83 c1 10          	add    $0x10,%rcx
  41ed83:	44 39 44 24 e8       	cmp    %r8d,-0x18(%rsp)
  41ed88:	76 7f                	jbe    41ee09 <inflate_fast+0x17d9>
  41ed8a:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  41ed8f:	66 44 0f 6f 04 08    	movdqa (%rax,%rcx,1),%xmm8
  41ed95:	41 83 c0 08          	add    $0x8,%r8d
  41ed99:	45 0f 11 04 0c       	movups %xmm8,(%r12,%rcx,1)
  41ed9e:	66 44 0f 6f 4c 08 10 	movdqa 0x10(%rax,%rcx,1),%xmm9
  41eda5:	45 0f 11 4c 0c 10    	movups %xmm9,0x10(%r12,%rcx,1)
  41edab:	66 44 0f 6f 54 08 20 	movdqa 0x20(%rax,%rcx,1),%xmm10
  41edb2:	45 0f 11 54 0c 20    	movups %xmm10,0x20(%r12,%rcx,1)
  41edb8:	66 44 0f 6f 5c 08 30 	movdqa 0x30(%rax,%rcx,1),%xmm11
  41edbf:	45 0f 11 5c 0c 30    	movups %xmm11,0x30(%r12,%rcx,1)
  41edc5:	66 44 0f 6f 64 08 40 	movdqa 0x40(%rax,%rcx,1),%xmm12
  41edcc:	45 0f 11 64 0c 40    	movups %xmm12,0x40(%r12,%rcx,1)
  41edd2:	66 44 0f 6f 6c 08 50 	movdqa 0x50(%rax,%rcx,1),%xmm13
  41edd9:	45 0f 11 6c 0c 50    	movups %xmm13,0x50(%r12,%rcx,1)
  41eddf:	66 44 0f 6f 74 08 60 	movdqa 0x60(%rax,%rcx,1),%xmm14
  41ede6:	45 0f 11 74 0c 60    	movups %xmm14,0x60(%r12,%rcx,1)
  41edec:	66 44 0f 6f 7c 08 70 	movdqa 0x70(%rax,%rcx,1),%xmm15
  41edf3:	45 0f 11 7c 0c 70    	movups %xmm15,0x70(%r12,%rcx,1)
  41edf9:	48 83 e9 80          	sub    $0xffffffffffffff80,%rcx
  41edfd:	44 39 44 24 e8       	cmp    %r8d,-0x18(%rsp)
  41ee02:	77 8b                	ja     41ed8f <inflate_fast+0x175f>
  41ee04:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  41ee09:	4c 8b 64 24 f0       	mov    -0x10(%rsp),%r12
  41ee0e:	8b 44 24 fc          	mov    -0x4(%rsp),%eax
  41ee12:	4c 01 64 24 28       	add    %r12,0x28(%rsp)
  41ee17:	29 44 24 30          	sub    %eax,0x30(%rsp)
  41ee1b:	4c 01 64 24 20       	add    %r12,0x20(%rsp)
  41ee20:	3b 04 24             	cmp    (%rsp),%eax
  41ee23:	0f 84 03 01 00 00    	je     41ef2c <inflate_fast+0x18fc>
  41ee29:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
                                } while (--op);
  41ee2e:	8b 4c 24 30          	mov    0x30(%rsp),%ecx
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41ee32:	4c 8b 64 24 28       	mov    0x28(%rsp),%r12
  41ee37:	44 0f b6 47 01       	movzbl 0x1(%rdi),%r8d
                                } while (--op);
  41ee3c:	83 f9 01             	cmp    $0x1,%ecx
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41ee3f:	45 88 44 24 01       	mov    %r8b,0x1(%r12)
                                } while (--op);
  41ee44:	0f 84 e2 00 00 00    	je     41ef2c <inflate_fast+0x18fc>
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41ee4a:	0f b6 47 02          	movzbl 0x2(%rdi),%eax
                                } while (--op);
  41ee4e:	83 f9 02             	cmp    $0x2,%ecx
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41ee51:	41 88 44 24 02       	mov    %al,0x2(%r12)
                                } while (--op);
  41ee56:	0f 84 d0 00 00 00    	je     41ef2c <inflate_fast+0x18fc>
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41ee5c:	44 0f b6 47 03       	movzbl 0x3(%rdi),%r8d
                                } while (--op);
  41ee61:	83 f9 03             	cmp    $0x3,%ecx
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41ee64:	45 88 44 24 03       	mov    %r8b,0x3(%r12)
                                } while (--op);
  41ee69:	0f 84 bd 00 00 00    	je     41ef2c <inflate_fast+0x18fc>
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41ee6f:	0f b6 47 04          	movzbl 0x4(%rdi),%eax
                                } while (--op);
  41ee73:	83 f9 04             	cmp    $0x4,%ecx
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41ee76:	41 88 44 24 04       	mov    %al,0x4(%r12)
                                } while (--op);
  41ee7b:	0f 84 ab 00 00 00    	je     41ef2c <inflate_fast+0x18fc>
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41ee81:	44 0f b6 47 05       	movzbl 0x5(%rdi),%r8d
                                } while (--op);
  41ee86:	83 f9 05             	cmp    $0x5,%ecx
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41ee89:	45 88 44 24 05       	mov    %r8b,0x5(%r12)
                                } while (--op);
  41ee8e:	0f 84 98 00 00 00    	je     41ef2c <inflate_fast+0x18fc>
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41ee94:	0f b6 47 06          	movzbl 0x6(%rdi),%eax
                                } while (--op);
  41ee98:	83 f9 06             	cmp    $0x6,%ecx
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41ee9b:	41 88 44 24 06       	mov    %al,0x6(%r12)
                                } while (--op);
  41eea0:	0f 84 86 00 00 00    	je     41ef2c <inflate_fast+0x18fc>
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41eea6:	44 0f b6 47 07       	movzbl 0x7(%rdi),%r8d
                                } while (--op);
  41eeab:	83 f9 07             	cmp    $0x7,%ecx
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41eeae:	45 88 44 24 07       	mov    %r8b,0x7(%r12)
                                } while (--op);
  41eeb3:	74 77                	je     41ef2c <inflate_fast+0x18fc>
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41eeb5:	0f b6 47 08          	movzbl 0x8(%rdi),%eax
                                } while (--op);
  41eeb9:	83 f9 08             	cmp    $0x8,%ecx
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41eebc:	41 88 44 24 08       	mov    %al,0x8(%r12)
                                } while (--op);
  41eec1:	74 69                	je     41ef2c <inflate_fast+0x18fc>
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41eec3:	44 0f b6 47 09       	movzbl 0x9(%rdi),%r8d
                                } while (--op);
  41eec8:	83 f9 09             	cmp    $0x9,%ecx
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41eecb:	45 88 44 24 09       	mov    %r8b,0x9(%r12)
                                } while (--op);
  41eed0:	74 5a                	je     41ef2c <inflate_fast+0x18fc>
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41eed2:	0f b6 47 0a          	movzbl 0xa(%rdi),%eax
                                } while (--op);
  41eed6:	83 f9 0a             	cmp    $0xa,%ecx
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41eed9:	41 88 44 24 0a       	mov    %al,0xa(%r12)
                                } while (--op);
  41eede:	74 4c                	je     41ef2c <inflate_fast+0x18fc>
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41eee0:	44 0f b6 47 0b       	movzbl 0xb(%rdi),%r8d
                                } while (--op);
  41eee5:	83 f9 0b             	cmp    $0xb,%ecx
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41eee8:	45 88 44 24 0b       	mov    %r8b,0xb(%r12)
                                } while (--op);
  41eeed:	74 3d                	je     41ef2c <inflate_fast+0x18fc>
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41eeef:	0f b6 47 0c          	movzbl 0xc(%rdi),%eax
                                } while (--op);
  41eef3:	83 f9 0c             	cmp    $0xc,%ecx
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41eef6:	41 88 44 24 0c       	mov    %al,0xc(%r12)
                                } while (--op);
  41eefb:	74 2f                	je     41ef2c <inflate_fast+0x18fc>
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41eefd:	44 0f b6 47 0d       	movzbl 0xd(%rdi),%r8d
                                } while (--op);
  41ef02:	83 f9 0d             	cmp    $0xd,%ecx
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41ef05:	45 88 44 24 0d       	mov    %r8b,0xd(%r12)
                                } while (--op);
  41ef0a:	74 20                	je     41ef2c <inflate_fast+0x18fc>
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41ef0c:	44 0f b6 47 0e       	movzbl 0xe(%rdi),%r8d
                                } while (--op);
  41ef11:	83 f9 0e             	cmp    $0xe,%ecx
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41ef14:	45 88 44 24 0e       	mov    %r8b,0xe(%r12)
                                } while (--op);
  41ef19:	74 11                	je     41ef2c <inflate_fast+0x18fc>
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  41ef1b:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  41ef20:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  41ef25:	0f b6 41 0f          	movzbl 0xf(%rcx),%eax
  41ef29:	88 47 0f             	mov    %al,0xf(%rdi)
  41ef2c:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  41ef31:	4c 8d 64 02 01       	lea    0x1(%rdx,%rax,1),%r12
                                } while (--op);
                                from = out - dist;      /* rest from output */
  41ef36:	8b 54 24 48          	mov    0x48(%rsp),%edx
  41ef3a:	4c 89 e1             	mov    %r12,%rcx
  41ef3d:	48 29 d1             	sub    %rdx,%rcx
                                PUP(out) = PUP(from);
                            } while (--op);
                            from = out - dist;  /* rest from output */
                        }
                    }
                    while (len > 2) {
  41ef40:	83 fe 02             	cmp    $0x2,%esi
  41ef43:	0f 86 3e 01 00 00    	jbe    41f087 <inflate_fast+0x1a57>
  41ef49:	83 ee 03             	sub    $0x3,%esi
  41ef4c:	41 b8 ab aa aa aa    	mov    $0xaaaaaaab,%r8d
  41ef52:	48 83 c1 03          	add    $0x3,%rcx
  41ef56:	89 f0                	mov    %esi,%eax
  41ef58:	49 83 c4 03          	add    $0x3,%r12
  41ef5c:	41 f7 e0             	mul    %r8d
                        PUP(out) = PUP(from);
  41ef5f:	44 0f b6 41 fe       	movzbl -0x2(%rcx),%r8d
  41ef64:	89 d7                	mov    %edx,%edi
  41ef66:	45 88 44 24 fe       	mov    %r8b,-0x2(%r12)
                        PUP(out) = PUP(from);
  41ef6b:	0f b6 41 ff          	movzbl -0x1(%rcx),%eax
  41ef6f:	d1 ef                	shr    %edi
  41ef71:	83 e7 03             	and    $0x3,%edi
  41ef74:	41 88 44 24 ff       	mov    %al,-0x1(%r12)
                        PUP(out) = PUP(from);
  41ef79:	0f b6 11             	movzbl (%rcx),%edx
                                PUP(out) = PUP(from);
                            } while (--op);
                            from = out - dist;  /* rest from output */
                        }
                    }
                    while (len > 2) {
  41ef7c:	83 fe 02             	cmp    $0x2,%esi
                        PUP(out) = PUP(from);
                        PUP(out) = PUP(from);
                        PUP(out) = PUP(from);
  41ef7f:	41 88 14 24          	mov    %dl,(%r12)
                                PUP(out) = PUP(from);
                            } while (--op);
                            from = out - dist;  /* rest from output */
                        }
                    }
                    while (len > 2) {
  41ef83:	0f 86 fe 00 00 00    	jbe    41f087 <inflate_fast+0x1a57>
  41ef89:	85 ff                	test   %edi,%edi
  41ef8b:	74 7d                	je     41f00a <inflate_fast+0x19da>
  41ef8d:	83 ff 01             	cmp    $0x1,%edi
  41ef90:	74 4f                	je     41efe1 <inflate_fast+0x19b1>
  41ef92:	83 ff 02             	cmp    $0x2,%edi
  41ef95:	74 25                	je     41efbc <inflate_fast+0x198c>
                        PUP(out) = PUP(from);
  41ef97:	0f b6 79 01          	movzbl 0x1(%rcx),%edi
  41ef9b:	49 83 c4 03          	add    $0x3,%r12
  41ef9f:	48 83 c1 03          	add    $0x3,%rcx
                        PUP(out) = PUP(from);
                        PUP(out) = PUP(from);
                        len -= 3;
  41efa3:	83 ee 03             	sub    $0x3,%esi
                            } while (--op);
                            from = out - dist;  /* rest from output */
                        }
                    }
                    while (len > 2) {
                        PUP(out) = PUP(from);
  41efa6:	41 88 7c 24 fe       	mov    %dil,-0x2(%r12)
                        PUP(out) = PUP(from);
  41efab:	44 0f b6 41 ff       	movzbl -0x1(%rcx),%r8d
  41efb0:	45 88 44 24 ff       	mov    %r8b,-0x1(%r12)
                        PUP(out) = PUP(from);
  41efb5:	0f b6 01             	movzbl (%rcx),%eax
  41efb8:	41 88 04 24          	mov    %al,(%r12)
                            } while (--op);
                            from = out - dist;  /* rest from output */
                        }
                    }
                    while (len > 2) {
                        PUP(out) = PUP(from);
  41efbc:	0f b6 51 01          	movzbl 0x1(%rcx),%edx
  41efc0:	49 83 c4 03          	add    $0x3,%r12
  41efc4:	48 83 c1 03          	add    $0x3,%rcx
                        PUP(out) = PUP(from);
                        PUP(out) = PUP(from);
                        len -= 3;
  41efc8:	83 ee 03             	sub    $0x3,%esi
                            } while (--op);
                            from = out - dist;  /* rest from output */
                        }
                    }
                    while (len > 2) {
                        PUP(out) = PUP(from);
  41efcb:	41 88 54 24 fe       	mov    %dl,-0x2(%r12)
                        PUP(out) = PUP(from);
  41efd0:	0f b6 79 ff          	movzbl -0x1(%rcx),%edi
  41efd4:	41 88 7c 24 ff       	mov    %dil,-0x1(%r12)
                        PUP(out) = PUP(from);
  41efd9:	44 0f b6 01          	movzbl (%rcx),%r8d
  41efdd:	45 88 04 24          	mov    %r8b,(%r12)
                            } while (--op);
                            from = out - dist;  /* rest from output */
                        }
                    }
                    while (len > 2) {
                        PUP(out) = PUP(from);
  41efe1:	0f b6 41 01          	movzbl 0x1(%rcx),%eax
  41efe5:	48 83 c1 03          	add    $0x3,%rcx
                        PUP(out) = PUP(from);
                        PUP(out) = PUP(from);
                        len -= 3;
  41efe9:	83 ee 03             	sub    $0x3,%esi
  41efec:	49 83 c4 03          	add    $0x3,%r12
                            } while (--op);
                            from = out - dist;  /* rest from output */
                        }
                    }
                    while (len > 2) {
                        PUP(out) = PUP(from);
  41eff0:	41 88 44 24 fe       	mov    %al,-0x2(%r12)
                        PUP(out) = PUP(from);
  41eff5:	0f b6 51 ff          	movzbl -0x1(%rcx),%edx
  41eff9:	41 88 54 24 ff       	mov    %dl,-0x1(%r12)
                        PUP(out) = PUP(from);
  41effe:	0f b6 39             	movzbl (%rcx),%edi
                                PUP(out) = PUP(from);
                            } while (--op);
                            from = out - dist;  /* rest from output */
                        }
                    }
                    while (len > 2) {
  41f001:	83 fe 02             	cmp    $0x2,%esi
                        PUP(out) = PUP(from);
                        PUP(out) = PUP(from);
                        PUP(out) = PUP(from);
  41f004:	41 88 3c 24          	mov    %dil,(%r12)
                                PUP(out) = PUP(from);
                            } while (--op);
                            from = out - dist;  /* rest from output */
                        }
                    }
                    while (len > 2) {
  41f008:	76 7d                	jbe    41f087 <inflate_fast+0x1a57>
                        PUP(out) = PUP(from);
  41f00a:	44 0f b6 41 01       	movzbl 0x1(%rcx),%r8d
  41f00f:	48 83 c1 0c          	add    $0xc,%rcx
                        PUP(out) = PUP(from);
                        PUP(out) = PUP(from);
                        len -= 3;
  41f013:	83 ee 0c             	sub    $0xc,%esi
  41f016:	49 83 c4 0c          	add    $0xc,%r12
                            } while (--op);
                            from = out - dist;  /* rest from output */
                        }
                    }
                    while (len > 2) {
                        PUP(out) = PUP(from);
  41f01a:	45 88 44 24 f5       	mov    %r8b,-0xb(%r12)
                        PUP(out) = PUP(from);
  41f01f:	0f b6 41 f6          	movzbl -0xa(%rcx),%eax
  41f023:	41 88 44 24 f6       	mov    %al,-0xa(%r12)
                        PUP(out) = PUP(from);
  41f028:	0f b6 51 f7          	movzbl -0x9(%rcx),%edx
  41f02c:	41 88 54 24 f7       	mov    %dl,-0x9(%r12)
                            } while (--op);
                            from = out - dist;  /* rest from output */
                        }
                    }
                    while (len > 2) {
                        PUP(out) = PUP(from);
  41f031:	0f b6 79 f8          	movzbl -0x8(%rcx),%edi
  41f035:	41 88 7c 24 f8       	mov    %dil,-0x8(%r12)
                        PUP(out) = PUP(from);
  41f03a:	44 0f b6 41 f9       	movzbl -0x7(%rcx),%r8d
  41f03f:	45 88 44 24 f9       	mov    %r8b,-0x7(%r12)
                        PUP(out) = PUP(from);
  41f044:	0f b6 41 fa          	movzbl -0x6(%rcx),%eax
  41f048:	41 88 44 24 fa       	mov    %al,-0x6(%r12)
                            } while (--op);
                            from = out - dist;  /* rest from output */
                        }
                    }
                    while (len > 2) {
                        PUP(out) = PUP(from);
  41f04d:	0f b6 51 fb          	movzbl -0x5(%rcx),%edx
  41f051:	41 88 54 24 fb       	mov    %dl,-0x5(%r12)
                        PUP(out) = PUP(from);
  41f056:	0f b6 79 fc          	movzbl -0x4(%rcx),%edi
  41f05a:	41 88 7c 24 fc       	mov    %dil,-0x4(%r12)
                        PUP(out) = PUP(from);
  41f05f:	44 0f b6 41 fd       	movzbl -0x3(%rcx),%r8d
  41f064:	45 88 44 24 fd       	mov    %r8b,-0x3(%r12)
                            } while (--op);
                            from = out - dist;  /* rest from output */
                        }
                    }
                    while (len > 2) {
                        PUP(out) = PUP(from);
  41f069:	0f b6 41 fe          	movzbl -0x2(%rcx),%eax
  41f06d:	41 88 44 24 fe       	mov    %al,-0x2(%r12)
                        PUP(out) = PUP(from);
  41f072:	0f b6 51 ff          	movzbl -0x1(%rcx),%edx
  41f076:	41 88 54 24 ff       	mov    %dl,-0x1(%r12)
                        PUP(out) = PUP(from);
  41f07b:	0f b6 39             	movzbl (%rcx),%edi
                                PUP(out) = PUP(from);
                            } while (--op);
                            from = out - dist;  /* rest from output */
                        }
                    }
                    while (len > 2) {
  41f07e:	83 fe 02             	cmp    $0x2,%esi
                        PUP(out) = PUP(from);
                        PUP(out) = PUP(from);
                        PUP(out) = PUP(from);
  41f081:	41 88 3c 24          	mov    %dil,(%r12)
                                PUP(out) = PUP(from);
                            } while (--op);
                            from = out - dist;  /* rest from output */
                        }
                    }
                    while (len > 2) {
  41f085:	77 83                	ja     41f00a <inflate_fast+0x19da>
                        PUP(out) = PUP(from);
                        PUP(out) = PUP(from);
                        PUP(out) = PUP(from);
                        len -= 3;
                    }
                    if (len) {
  41f087:	85 f6                	test   %esi,%esi
  41f089:	0f 84 84 e7 ff ff    	je     41d813 <inflate_fast+0x1e3>
                        PUP(out) = PUP(from);
  41f08f:	44 0f b6 41 01       	movzbl 0x1(%rcx),%r8d
                        if (len > 1)
  41f094:	83 fe 02             	cmp    $0x2,%esi
                        PUP(out) = PUP(from);
                        PUP(out) = PUP(from);
                        len -= 3;
                    }
                    if (len) {
                        PUP(out) = PUP(from);
  41f097:	45 88 44 24 01       	mov    %r8b,0x1(%r12)
                        if (len > 1)
  41f09c:	0f 85 69 06 00 00    	jne    41f70b <inflate_fast+0x20db>
                            PUP(out) = PUP(from);
  41f0a2:	0f b6 71 02          	movzbl 0x2(%rcx),%esi
  41f0a6:	49 83 c4 02          	add    $0x2,%r12
  41f0aa:	41 88 34 24          	mov    %sil,(%r12)
  41f0ae:	e9 60 e7 ff ff       	jmpq   41d813 <inflate_fast+0x1e3>
                op &= 15;                       /* number of extra bits */
                if (bits < op) {
                    hold += (unsigned long)(PUP(in)) << bits;
                    bits += 8;
                    if (bits < op) {
                        hold += (unsigned long)(PUP(in)) << bits;
  41f0b3:	44 0f b6 45 02       	movzbl 0x2(%rbp),%r8d
                        bits += 8;
  41f0b8:	41 83 c1 10          	add    $0x10,%r9d
                op &= 15;                       /* number of extra bits */
                if (bits < op) {
                    hold += (unsigned long)(PUP(in)) << bits;
                    bits += 8;
                    if (bits < op) {
                        hold += (unsigned long)(PUP(in)) << bits;
  41f0bc:	48 83 c5 02          	add    $0x2,%rbp
  41f0c0:	49 d3 e0             	shl    %cl,%r8
  41f0c3:	4d 01 c3             	add    %r8,%r11
  41f0c6:	e9 b1 e8 ff ff       	jmpq   41d97c <inflate_fast+0x34c>
  41f0cb:	4d 89 c4             	mov    %r8,%r12
  41f0ce:	e9 40 e7 ff ff       	jmpq   41d813 <inflate_fast+0x1e3>
                                from = out - dist;      /* rest from output */
                            }
                        }
                    }
                    else {                      /* contiguous in window */
                        from += write - op;
  41f0d3:	44 8b 44 24 b8       	mov    -0x48(%rsp),%r8d
  41f0d8:	48 8b 7c 24 c8       	mov    -0x38(%rsp),%rdi
  41f0dd:	41 29 c0             	sub    %eax,%r8d
                        if (op < len) {         /* some from window */
  41f0e0:	39 c6                	cmp    %eax,%esi
                                from = out - dist;      /* rest from output */
                            }
                        }
                    }
                    else {                      /* contiguous in window */
                        from += write - op;
  41f0e2:	4a 8d 0c 07          	lea    (%rdi,%r8,1),%rcx
                        if (op < len) {         /* some from window */
  41f0e6:	0f 86 54 fe ff ff    	jbe    41ef40 <inflate_fast+0x1910>
  41f0ec:	48 8b 54 24 b0       	mov    -0x50(%rsp),%rdx
  41f0f1:	49 8d 7c 24 01       	lea    0x1(%r12),%rdi
                            len -= op;
  41f0f6:	29 c6                	sub    %eax,%esi
  41f0f8:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  41f0fd:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  41f102:	4c 01 c2             	add    %r8,%rdx
  41f105:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
  41f10a:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
  41f10f:	4a 8d 54 02 10       	lea    0x10(%rdx,%r8,1),%rdx
  41f114:	48 39 d7             	cmp    %rdx,%rdi
  41f117:	49 8d 54 24 11       	lea    0x11(%r12),%rdx
  41f11c:	40 0f 93 c7          	setae  %dil
  41f120:	48 39 54 24 20       	cmp    %rdx,0x20(%rsp)
  41f125:	0f 93 c2             	setae  %dl
  41f128:	40 08 d7             	or     %dl,%dil
  41f12b:	0f 84 d4 09 00 00    	je     41fb05 <inflate_fast+0x24d5>
  41f131:	83 f8 16             	cmp    $0x16,%eax
  41f134:	0f 86 cb 09 00 00    	jbe    41fb05 <inflate_fast+0x24d5>
  41f13a:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  41f13f:	48 f7 df             	neg    %rdi
  41f142:	48 89 fa             	mov    %rdi,%rdx
  41f145:	83 e2 0f             	and    $0xf,%edx
  41f148:	39 c2                	cmp    %eax,%edx
  41f14a:	0f 47 d0             	cmova  %eax,%edx
  41f14d:	85 d2                	test   %edx,%edx
  41f14f:	0f 84 db 0a 00 00    	je     41fc30 <inflate_fast+0x2600>
                            do {
                                PUP(out) = PUP(from);
  41f155:	48 8d 79 01          	lea    0x1(%rcx),%rdi
  41f159:	83 fa 01             	cmp    $0x1,%edx
  41f15c:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  41f161:	0f b6 79 01          	movzbl 0x1(%rcx),%edi
  41f165:	41 88 7c 24 01       	mov    %dil,0x1(%r12)
                            } while (--op);
  41f16a:	8d 78 ff             	lea    -0x1(%rax),%edi
  41f16d:	89 7c 24 4c          	mov    %edi,0x4c(%rsp)
  41f171:	89 7c 24 30          	mov    %edi,0x30(%rsp)
  41f175:	0f 84 53 02 00 00    	je     41f3ce <inflate_fast+0x1d9e>
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f17b:	49 8d 7c 24 02       	lea    0x2(%r12),%rdi
  41f180:	83 fa 02             	cmp    $0x2,%edx
  41f183:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  41f188:	48 8d 79 02          	lea    0x2(%rcx),%rdi
  41f18c:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  41f191:	0f b6 79 02          	movzbl 0x2(%rcx),%edi
  41f195:	41 88 7c 24 02       	mov    %dil,0x2(%r12)
                            } while (--op);
  41f19a:	8d 78 fe             	lea    -0x2(%rax),%edi
  41f19d:	89 7c 24 30          	mov    %edi,0x30(%rsp)
  41f1a1:	0f 84 27 02 00 00    	je     41f3ce <inflate_fast+0x1d9e>
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f1a7:	49 8d 7c 24 03       	lea    0x3(%r12),%rdi
  41f1ac:	83 fa 03             	cmp    $0x3,%edx
  41f1af:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  41f1b4:	48 8d 79 03          	lea    0x3(%rcx),%rdi
  41f1b8:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  41f1bd:	0f b6 79 03          	movzbl 0x3(%rcx),%edi
  41f1c1:	41 88 7c 24 03       	mov    %dil,0x3(%r12)
                            } while (--op);
  41f1c6:	8d 78 fd             	lea    -0x3(%rax),%edi
  41f1c9:	89 7c 24 30          	mov    %edi,0x30(%rsp)
  41f1cd:	0f 84 fb 01 00 00    	je     41f3ce <inflate_fast+0x1d9e>
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f1d3:	49 8d 7c 24 04       	lea    0x4(%r12),%rdi
  41f1d8:	83 fa 04             	cmp    $0x4,%edx
  41f1db:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  41f1e0:	48 8d 79 04          	lea    0x4(%rcx),%rdi
  41f1e4:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  41f1e9:	0f b6 79 04          	movzbl 0x4(%rcx),%edi
  41f1ed:	41 88 7c 24 04       	mov    %dil,0x4(%r12)
                            } while (--op);
  41f1f2:	8d 78 fc             	lea    -0x4(%rax),%edi
  41f1f5:	89 7c 24 30          	mov    %edi,0x30(%rsp)
  41f1f9:	0f 84 cf 01 00 00    	je     41f3ce <inflate_fast+0x1d9e>
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f1ff:	49 8d 7c 24 05       	lea    0x5(%r12),%rdi
  41f204:	83 fa 05             	cmp    $0x5,%edx
  41f207:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  41f20c:	48 8d 79 05          	lea    0x5(%rcx),%rdi
  41f210:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  41f215:	0f b6 79 05          	movzbl 0x5(%rcx),%edi
  41f219:	41 88 7c 24 05       	mov    %dil,0x5(%r12)
                            } while (--op);
  41f21e:	8d 78 fb             	lea    -0x5(%rax),%edi
  41f221:	89 7c 24 30          	mov    %edi,0x30(%rsp)
  41f225:	0f 84 a3 01 00 00    	je     41f3ce <inflate_fast+0x1d9e>
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f22b:	49 8d 7c 24 06       	lea    0x6(%r12),%rdi
  41f230:	83 fa 06             	cmp    $0x6,%edx
  41f233:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  41f238:	48 8d 79 06          	lea    0x6(%rcx),%rdi
  41f23c:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  41f241:	0f b6 79 06          	movzbl 0x6(%rcx),%edi
  41f245:	41 88 7c 24 06       	mov    %dil,0x6(%r12)
                            } while (--op);
  41f24a:	8d 78 fa             	lea    -0x6(%rax),%edi
  41f24d:	89 7c 24 30          	mov    %edi,0x30(%rsp)
  41f251:	0f 84 77 01 00 00    	je     41f3ce <inflate_fast+0x1d9e>
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f257:	49 8d 7c 24 07       	lea    0x7(%r12),%rdi
  41f25c:	83 fa 07             	cmp    $0x7,%edx
  41f25f:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  41f264:	48 8d 79 07          	lea    0x7(%rcx),%rdi
  41f268:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  41f26d:	0f b6 79 07          	movzbl 0x7(%rcx),%edi
  41f271:	41 88 7c 24 07       	mov    %dil,0x7(%r12)
                            } while (--op);
  41f276:	8d 78 f9             	lea    -0x7(%rax),%edi
  41f279:	89 7c 24 30          	mov    %edi,0x30(%rsp)
  41f27d:	0f 84 4b 01 00 00    	je     41f3ce <inflate_fast+0x1d9e>
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f283:	49 8d 7c 24 08       	lea    0x8(%r12),%rdi
  41f288:	83 fa 08             	cmp    $0x8,%edx
  41f28b:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  41f290:	48 8d 79 08          	lea    0x8(%rcx),%rdi
  41f294:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  41f299:	0f b6 79 08          	movzbl 0x8(%rcx),%edi
  41f29d:	41 88 7c 24 08       	mov    %dil,0x8(%r12)
                            } while (--op);
  41f2a2:	8d 78 f8             	lea    -0x8(%rax),%edi
  41f2a5:	89 7c 24 30          	mov    %edi,0x30(%rsp)
  41f2a9:	0f 84 1f 01 00 00    	je     41f3ce <inflate_fast+0x1d9e>
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f2af:	49 8d 7c 24 09       	lea    0x9(%r12),%rdi
  41f2b4:	83 fa 09             	cmp    $0x9,%edx
  41f2b7:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  41f2bc:	48 8d 79 09          	lea    0x9(%rcx),%rdi
  41f2c0:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  41f2c5:	0f b6 79 09          	movzbl 0x9(%rcx),%edi
  41f2c9:	41 88 7c 24 09       	mov    %dil,0x9(%r12)
                            } while (--op);
  41f2ce:	8d 78 f7             	lea    -0x9(%rax),%edi
  41f2d1:	89 7c 24 30          	mov    %edi,0x30(%rsp)
  41f2d5:	0f 84 f3 00 00 00    	je     41f3ce <inflate_fast+0x1d9e>
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f2db:	49 8d 7c 24 0a       	lea    0xa(%r12),%rdi
  41f2e0:	83 fa 0a             	cmp    $0xa,%edx
  41f2e3:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  41f2e8:	48 8d 79 0a          	lea    0xa(%rcx),%rdi
  41f2ec:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  41f2f1:	0f b6 79 0a          	movzbl 0xa(%rcx),%edi
  41f2f5:	41 88 7c 24 0a       	mov    %dil,0xa(%r12)
                            } while (--op);
  41f2fa:	8d 78 f6             	lea    -0xa(%rax),%edi
  41f2fd:	89 7c 24 30          	mov    %edi,0x30(%rsp)
  41f301:	0f 84 c7 00 00 00    	je     41f3ce <inflate_fast+0x1d9e>
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f307:	49 8d 7c 24 0b       	lea    0xb(%r12),%rdi
  41f30c:	83 fa 0b             	cmp    $0xb,%edx
  41f30f:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  41f314:	48 8d 79 0b          	lea    0xb(%rcx),%rdi
  41f318:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  41f31d:	0f b6 79 0b          	movzbl 0xb(%rcx),%edi
  41f321:	41 88 7c 24 0b       	mov    %dil,0xb(%r12)
                            } while (--op);
  41f326:	8d 78 f5             	lea    -0xb(%rax),%edi
  41f329:	89 7c 24 30          	mov    %edi,0x30(%rsp)
  41f32d:	0f 84 9b 00 00 00    	je     41f3ce <inflate_fast+0x1d9e>
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f333:	49 8d 7c 24 0c       	lea    0xc(%r12),%rdi
  41f338:	83 fa 0c             	cmp    $0xc,%edx
  41f33b:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  41f340:	48 8d 79 0c          	lea    0xc(%rcx),%rdi
  41f344:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  41f349:	0f b6 79 0c          	movzbl 0xc(%rcx),%edi
  41f34d:	41 88 7c 24 0c       	mov    %dil,0xc(%r12)
                            } while (--op);
  41f352:	8d 78 f4             	lea    -0xc(%rax),%edi
  41f355:	89 7c 24 30          	mov    %edi,0x30(%rsp)
  41f359:	74 73                	je     41f3ce <inflate_fast+0x1d9e>
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f35b:	49 8d 7c 24 0d       	lea    0xd(%r12),%rdi
  41f360:	83 fa 0d             	cmp    $0xd,%edx
  41f363:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  41f368:	48 8d 79 0d          	lea    0xd(%rcx),%rdi
  41f36c:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  41f371:	0f b6 79 0d          	movzbl 0xd(%rcx),%edi
  41f375:	41 88 7c 24 0d       	mov    %dil,0xd(%r12)
                            } while (--op);
  41f37a:	8d 78 f3             	lea    -0xd(%rax),%edi
  41f37d:	89 7c 24 30          	mov    %edi,0x30(%rsp)
  41f381:	74 4b                	je     41f3ce <inflate_fast+0x1d9e>
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f383:	49 8d 7c 24 0e       	lea    0xe(%r12),%rdi
  41f388:	83 fa 0f             	cmp    $0xf,%edx
  41f38b:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  41f390:	48 8d 79 0e          	lea    0xe(%rcx),%rdi
  41f394:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  41f399:	0f b6 79 0e          	movzbl 0xe(%rcx),%edi
  41f39d:	41 88 7c 24 0e       	mov    %dil,0xe(%r12)
                            } while (--op);
  41f3a2:	8d 78 f2             	lea    -0xe(%rax),%edi
  41f3a5:	89 7c 24 30          	mov    %edi,0x30(%rsp)
  41f3a9:	75 23                	jne    41f3ce <inflate_fast+0x1d9e>
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f3ab:	49 8d 7c 24 0f       	lea    0xf(%r12),%rdi
  41f3b0:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  41f3b5:	48 8d 79 0f          	lea    0xf(%rcx),%rdi
  41f3b9:	0f b6 49 0f          	movzbl 0xf(%rcx),%ecx
  41f3bd:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
                            } while (--op);
  41f3c2:	8d 78 f1             	lea    -0xf(%rax),%edi
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f3c5:	41 88 4c 24 0f       	mov    %cl,0xf(%r12)
                            } while (--op);
  41f3ca:	89 7c 24 30          	mov    %edi,0x30(%rsp)
  41f3ce:	29 d0                	sub    %edx,%eax
  41f3d0:	89 d1                	mov    %edx,%ecx
  41f3d2:	89 44 24 5c          	mov    %eax,0x5c(%rsp)
  41f3d6:	83 e8 10             	sub    $0x10,%eax
  41f3d9:	c1 e8 04             	shr    $0x4,%eax
  41f3dc:	89 44 24 38          	mov    %eax,0x38(%rsp)
  41f3e0:	83 c0 01             	add    $0x1,%eax
  41f3e3:	89 44 24 50          	mov    %eax,0x50(%rsp)
  41f3e7:	c1 e0 04             	shl    $0x4,%eax
  41f3ea:	89 44 24 58          	mov    %eax,0x58(%rsp)
  41f3ee:	8b 44 24 4c          	mov    0x4c(%rsp),%eax
  41f3f2:	29 d0                	sub    %edx,%eax
  41f3f4:	83 f8 0e             	cmp    $0xe,%eax
  41f3f7:	0f 86 f3 01 00 00    	jbe    41f5f0 <inflate_fast+0x1fc0>
  41f3fd:	4a 8d 04 01          	lea    (%rcx,%r8,1),%rax
  41f401:	49 8d 54 0c 01       	lea    0x1(%r12,%rcx,1),%rdx
  41f406:	8b 4c 24 38          	mov    0x38(%rsp),%ecx
  41f40a:	48 03 44 24 b0       	add    -0x50(%rsp),%rax
  41f40f:	83 e9 04             	sub    $0x4,%ecx
  41f412:	83 f9 fa             	cmp    $0xfffffffa,%ecx
  41f415:	0f 87 e3 0e 00 00    	ja     4202fe <inflate_fast+0x2cce>
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f41b:	66 0f 6f 00          	movdqa (%rax),%xmm0
  41f41f:	0f 18 88 d0 01 00 00 	prefetcht0 0x1d0(%rax)
  41f426:	c1 e9 02             	shr    $0x2,%ecx
  41f429:	8d 3c 8d 04 00 00 00 	lea    0x4(,%rcx,4),%edi
  41f430:	41 b8 04 00 00 00    	mov    $0x4,%r8d
  41f436:	83 e1 03             	and    $0x3,%ecx
  41f439:	0f 11 02             	movups %xmm0,(%rdx)
  41f43c:	48 83 c0 40          	add    $0x40,%rax
  41f440:	48 83 c2 40          	add    $0x40,%rdx
  41f444:	89 7c 24 40          	mov    %edi,0x40(%rsp)
  41f448:	66 0f 6f 48 d0       	movdqa -0x30(%rax),%xmm1
  41f44d:	44 89 44 24 38       	mov    %r8d,0x38(%rsp)
  41f452:	0f 11 4a d0          	movups %xmm1,-0x30(%rdx)
  41f456:	66 0f 6f 50 e0       	movdqa -0x20(%rax),%xmm2
  41f45b:	0f 11 52 e0          	movups %xmm2,-0x20(%rdx)
  41f45f:	66 0f 6f 58 f0       	movdqa -0x10(%rax),%xmm3
  41f464:	0f 11 5a f0          	movups %xmm3,-0x10(%rdx)
  41f468:	41 39 f8             	cmp    %edi,%r8d
  41f46b:	0f 85 1a 0b 00 00    	jne    41ff8b <inflate_fast+0x295b>
  41f471:	44 8b 44 24 40       	mov    0x40(%rsp),%r8d
  41f476:	8b 7c 24 50          	mov    0x50(%rsp),%edi
  41f47a:	66 0f 6f 00          	movdqa (%rax),%xmm0
  41f47e:	44 89 c1             	mov    %r8d,%ecx
  41f481:	41 83 c0 01          	add    $0x1,%r8d
  41f485:	f7 d1                	not    %ecx
  41f487:	01 f9                	add    %edi,%ecx
  41f489:	83 e1 07             	and    $0x7,%ecx
  41f48c:	44 39 c7             	cmp    %r8d,%edi
  41f48f:	89 4c 24 38          	mov    %ecx,0x38(%rsp)
  41f493:	b9 10 00 00 00       	mov    $0x10,%ecx
  41f498:	0f 11 02             	movups %xmm0,(%rdx)
  41f49b:	0f 86 31 01 00 00    	jbe    41f5d2 <inflate_fast+0x1fa2>
  41f4a1:	8b 7c 24 38          	mov    0x38(%rsp),%edi
  41f4a5:	85 ff                	test   %edi,%edi
  41f4a7:	0f 84 a6 00 00 00    	je     41f553 <inflate_fast+0x1f23>
  41f4ad:	83 ff 01             	cmp    $0x1,%edi
  41f4b0:	0f 84 85 00 00 00    	je     41f53b <inflate_fast+0x1f0b>
  41f4b6:	83 ff 02             	cmp    $0x2,%edi
  41f4b9:	74 6f                	je     41f52a <inflate_fast+0x1efa>
  41f4bb:	83 ff 03             	cmp    $0x3,%edi
  41f4be:	74 59                	je     41f519 <inflate_fast+0x1ee9>
  41f4c0:	83 ff 04             	cmp    $0x4,%edi
  41f4c3:	74 43                	je     41f508 <inflate_fast+0x1ed8>
  41f4c5:	83 ff 05             	cmp    $0x5,%edi
  41f4c8:	74 2d                	je     41f4f7 <inflate_fast+0x1ec7>
  41f4ca:	83 ff 06             	cmp    $0x6,%edi
  41f4cd:	74 17                	je     41f4e6 <inflate_fast+0x1eb6>
  41f4cf:	66 0f 6f 48 10       	movdqa 0x10(%rax),%xmm1
  41f4d4:	b9 20 00 00 00       	mov    $0x20,%ecx
  41f4d9:	44 8b 44 24 40       	mov    0x40(%rsp),%r8d
  41f4de:	0f 11 4a 10          	movups %xmm1,0x10(%rdx)
  41f4e2:	41 83 c0 02          	add    $0x2,%r8d
  41f4e6:	41 83 c0 01          	add    $0x1,%r8d
  41f4ea:	66 0f 6f 14 08       	movdqa (%rax,%rcx,1),%xmm2
  41f4ef:	0f 11 14 0a          	movups %xmm2,(%rdx,%rcx,1)
  41f4f3:	48 83 c1 10          	add    $0x10,%rcx
  41f4f7:	41 83 c0 01          	add    $0x1,%r8d
  41f4fb:	66 0f 6f 1c 08       	movdqa (%rax,%rcx,1),%xmm3
  41f500:	0f 11 1c 0a          	movups %xmm3,(%rdx,%rcx,1)
  41f504:	48 83 c1 10          	add    $0x10,%rcx
  41f508:	41 83 c0 01          	add    $0x1,%r8d
  41f50c:	66 0f 6f 24 08       	movdqa (%rax,%rcx,1),%xmm4
  41f511:	0f 11 24 0a          	movups %xmm4,(%rdx,%rcx,1)
  41f515:	48 83 c1 10          	add    $0x10,%rcx
  41f519:	41 83 c0 01          	add    $0x1,%r8d
  41f51d:	66 0f 6f 2c 08       	movdqa (%rax,%rcx,1),%xmm5
  41f522:	0f 11 2c 0a          	movups %xmm5,(%rdx,%rcx,1)
  41f526:	48 83 c1 10          	add    $0x10,%rcx
  41f52a:	41 83 c0 01          	add    $0x1,%r8d
  41f52e:	66 0f 6f 34 08       	movdqa (%rax,%rcx,1),%xmm6
  41f533:	0f 11 34 0a          	movups %xmm6,(%rdx,%rcx,1)
  41f537:	48 83 c1 10          	add    $0x10,%rcx
  41f53b:	41 83 c0 01          	add    $0x1,%r8d
  41f53f:	66 0f 6f 3c 08       	movdqa (%rax,%rcx,1),%xmm7
  41f544:	0f 11 3c 0a          	movups %xmm7,(%rdx,%rcx,1)
  41f548:	48 83 c1 10          	add    $0x10,%rcx
  41f54c:	44 39 44 24 50       	cmp    %r8d,0x50(%rsp)
  41f551:	76 7f                	jbe    41f5d2 <inflate_fast+0x1fa2>
  41f553:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  41f558:	66 44 0f 6f 04 08    	movdqa (%rax,%rcx,1),%xmm8
  41f55e:	41 83 c0 08          	add    $0x8,%r8d
  41f562:	44 0f 11 04 0a       	movups %xmm8,(%rdx,%rcx,1)
  41f567:	66 44 0f 6f 4c 08 10 	movdqa 0x10(%rax,%rcx,1),%xmm9
  41f56e:	44 0f 11 4c 0a 10    	movups %xmm9,0x10(%rdx,%rcx,1)
  41f574:	66 44 0f 6f 54 08 20 	movdqa 0x20(%rax,%rcx,1),%xmm10
  41f57b:	44 0f 11 54 0a 20    	movups %xmm10,0x20(%rdx,%rcx,1)
  41f581:	66 44 0f 6f 5c 08 30 	movdqa 0x30(%rax,%rcx,1),%xmm11
  41f588:	44 0f 11 5c 0a 30    	movups %xmm11,0x30(%rdx,%rcx,1)
  41f58e:	66 44 0f 6f 64 08 40 	movdqa 0x40(%rax,%rcx,1),%xmm12
  41f595:	44 0f 11 64 0a 40    	movups %xmm12,0x40(%rdx,%rcx,1)
  41f59b:	66 44 0f 6f 6c 08 50 	movdqa 0x50(%rax,%rcx,1),%xmm13
  41f5a2:	44 0f 11 6c 0a 50    	movups %xmm13,0x50(%rdx,%rcx,1)
  41f5a8:	66 44 0f 6f 74 08 60 	movdqa 0x60(%rax,%rcx,1),%xmm14
  41f5af:	44 0f 11 74 0a 60    	movups %xmm14,0x60(%rdx,%rcx,1)
  41f5b5:	66 44 0f 6f 7c 08 70 	movdqa 0x70(%rax,%rcx,1),%xmm15
  41f5bc:	44 0f 11 7c 0a 70    	movups %xmm15,0x70(%rdx,%rcx,1)
  41f5c2:	48 83 e9 80          	sub    $0xffffffffffffff80,%rcx
  41f5c6:	44 39 44 24 50       	cmp    %r8d,0x50(%rsp)
  41f5cb:	77 8b                	ja     41f558 <inflate_fast+0x1f28>
  41f5cd:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  41f5d2:	8b 54 24 58          	mov    0x58(%rsp),%edx
  41f5d6:	29 54 24 30          	sub    %edx,0x30(%rsp)
  41f5da:	89 d0                	mov    %edx,%eax
  41f5dc:	48 01 44 24 28       	add    %rax,0x28(%rsp)
  41f5e1:	48 01 44 24 20       	add    %rax,0x20(%rsp)
  41f5e6:	3b 54 24 5c          	cmp    0x5c(%rsp),%edx
  41f5ea:	0f 84 90 03 00 00    	je     41f980 <inflate_fast+0x2350>
  41f5f0:	4c 8b 44 24 20       	mov    0x20(%rsp),%r8
                            } while (--op);
  41f5f5:	8b 7c 24 30          	mov    0x30(%rsp),%edi
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f5f9:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  41f5fe:	41 0f b6 50 01       	movzbl 0x1(%r8),%edx
                            } while (--op);
  41f603:	83 ff 01             	cmp    $0x1,%edi
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f606:	88 51 01             	mov    %dl,0x1(%rcx)
                            } while (--op);
  41f609:	0f 84 71 03 00 00    	je     41f980 <inflate_fast+0x2350>
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f60f:	41 0f b6 40 02       	movzbl 0x2(%r8),%eax
                            } while (--op);
  41f614:	83 ff 02             	cmp    $0x2,%edi
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f617:	88 41 02             	mov    %al,0x2(%rcx)
                            } while (--op);
  41f61a:	0f 84 60 03 00 00    	je     41f980 <inflate_fast+0x2350>
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f620:	41 0f b6 50 03       	movzbl 0x3(%r8),%edx
                            } while (--op);
  41f625:	83 ff 03             	cmp    $0x3,%edi
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f628:	88 51 03             	mov    %dl,0x3(%rcx)
                            } while (--op);
  41f62b:	0f 84 4f 03 00 00    	je     41f980 <inflate_fast+0x2350>
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f631:	41 0f b6 40 04       	movzbl 0x4(%r8),%eax
                            } while (--op);
  41f636:	83 ff 04             	cmp    $0x4,%edi
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f639:	88 41 04             	mov    %al,0x4(%rcx)
                            } while (--op);
  41f63c:	0f 84 3e 03 00 00    	je     41f980 <inflate_fast+0x2350>
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f642:	41 0f b6 50 05       	movzbl 0x5(%r8),%edx
                            } while (--op);
  41f647:	83 ff 05             	cmp    $0x5,%edi
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f64a:	88 51 05             	mov    %dl,0x5(%rcx)
                            } while (--op);
  41f64d:	0f 84 2d 03 00 00    	je     41f980 <inflate_fast+0x2350>
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f653:	41 0f b6 40 06       	movzbl 0x6(%r8),%eax
                            } while (--op);
  41f658:	83 ff 06             	cmp    $0x6,%edi
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f65b:	88 41 06             	mov    %al,0x6(%rcx)
                            } while (--op);
  41f65e:	0f 84 1c 03 00 00    	je     41f980 <inflate_fast+0x2350>
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f664:	41 0f b6 50 07       	movzbl 0x7(%r8),%edx
                            } while (--op);
  41f669:	83 ff 07             	cmp    $0x7,%edi
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f66c:	88 51 07             	mov    %dl,0x7(%rcx)
                            } while (--op);
  41f66f:	0f 84 0b 03 00 00    	je     41f980 <inflate_fast+0x2350>
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f675:	41 0f b6 40 08       	movzbl 0x8(%r8),%eax
                            } while (--op);
  41f67a:	83 ff 08             	cmp    $0x8,%edi
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f67d:	88 41 08             	mov    %al,0x8(%rcx)
                            } while (--op);
  41f680:	0f 84 fa 02 00 00    	je     41f980 <inflate_fast+0x2350>
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f686:	41 0f b6 50 09       	movzbl 0x9(%r8),%edx
                            } while (--op);
  41f68b:	83 ff 09             	cmp    $0x9,%edi
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f68e:	88 51 09             	mov    %dl,0x9(%rcx)
                            } while (--op);
  41f691:	0f 84 e9 02 00 00    	je     41f980 <inflate_fast+0x2350>
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f697:	41 0f b6 40 0a       	movzbl 0xa(%r8),%eax
                            } while (--op);
  41f69c:	83 ff 0a             	cmp    $0xa,%edi
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f69f:	88 41 0a             	mov    %al,0xa(%rcx)
                            } while (--op);
  41f6a2:	0f 84 d8 02 00 00    	je     41f980 <inflate_fast+0x2350>
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f6a8:	41 0f b6 50 0b       	movzbl 0xb(%r8),%edx
                            } while (--op);
  41f6ad:	83 ff 0b             	cmp    $0xb,%edi
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f6b0:	88 51 0b             	mov    %dl,0xb(%rcx)
                            } while (--op);
  41f6b3:	0f 84 c7 02 00 00    	je     41f980 <inflate_fast+0x2350>
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f6b9:	41 0f b6 40 0c       	movzbl 0xc(%r8),%eax
                            } while (--op);
  41f6be:	83 ff 0c             	cmp    $0xc,%edi
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f6c1:	88 41 0c             	mov    %al,0xc(%rcx)
                            } while (--op);
  41f6c4:	0f 84 b6 02 00 00    	je     41f980 <inflate_fast+0x2350>
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f6ca:	41 0f b6 50 0d       	movzbl 0xd(%r8),%edx
                            } while (--op);
  41f6cf:	83 ff 0d             	cmp    $0xd,%edi
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f6d2:	88 51 0d             	mov    %dl,0xd(%rcx)
                            } while (--op);
  41f6d5:	0f 84 a5 02 00 00    	je     41f980 <inflate_fast+0x2350>
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f6db:	41 0f b6 50 0e       	movzbl 0xe(%r8),%edx
                            } while (--op);
  41f6e0:	83 ff 0e             	cmp    $0xe,%edi
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f6e3:	88 51 0e             	mov    %dl,0xe(%rcx)
                            } while (--op);
  41f6e6:	0f 84 94 02 00 00    	je     41f980 <inflate_fast+0x2350>
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f6ec:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  41f6f1:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
  41f6f6:	0f b6 47 0f          	movzbl 0xf(%rdi),%eax
  41f6fa:	41 88 40 0f          	mov    %al,0xf(%r8)
  41f6fe:	e9 7d 02 00 00       	jmpq   41f980 <inflate_fast+0x2350>
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
                            } while (--op);
  41f703:	4c 89 c1             	mov    %r8,%rcx
  41f706:	e9 69 e7 ff ff       	jmpq   41de74 <inflate_fast+0x844>
                        PUP(out) = PUP(from);
                        PUP(out) = PUP(from);
                        len -= 3;
                    }
                    if (len) {
                        PUP(out) = PUP(from);
  41f70b:	49 83 c4 01          	add    $0x1,%r12
  41f70f:	e9 ff e0 ff ff       	jmpq   41d813 <inflate_fast+0x1e3>
                        PUP(out) = PUP(from);
                        PUP(out) = PUP(from);
                        len -= 3;
                    } while (len > 2);
                    if (len) {
                        PUP(out) = PUP(from);
  41f714:	49 83 c4 04          	add    $0x4,%r12
  41f718:	e9 f6 e0 ff ff       	jmpq   41d813 <inflate_fast+0x1e3>
  41f71d:	48 8b 6c 24 38       	mov    0x38(%rsp),%rbp
  41f722:	4c 8b 64 24 50       	mov    0x50(%rsp),%r12
  41f727:	8b 54 24 30          	mov    0x30(%rsp),%edx
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f72b:	66 44 0f 6f 27       	movdqa (%rdi),%xmm12
  41f730:	89 d0                	mov    %edx,%eax
  41f732:	83 c2 01             	add    $0x1,%edx
  41f735:	f7 d0                	not    %eax
  41f737:	03 44 24 40          	add    0x40(%rsp),%eax
  41f73b:	45 0f 11 20          	movups %xmm12,(%r8)
  41f73f:	83 e0 07             	and    $0x7,%eax
  41f742:	39 54 24 40          	cmp    %edx,0x40(%rsp)
  41f746:	89 44 24 38          	mov    %eax,0x38(%rsp)
  41f74a:	b8 10 00 00 00       	mov    $0x10,%eax
  41f74f:	0f 86 2d 01 00 00    	jbe    41f882 <inflate_fast+0x2252>
  41f755:	83 7c 24 38 00       	cmpl   $0x0,0x38(%rsp)
  41f75a:	0f 84 b3 00 00 00    	je     41f813 <inflate_fast+0x21e3>
  41f760:	83 7c 24 38 01       	cmpl   $0x1,0x38(%rsp)
  41f765:	0f 84 91 00 00 00    	je     41f7fc <inflate_fast+0x21cc>
  41f76b:	83 7c 24 38 02       	cmpl   $0x2,0x38(%rsp)
  41f770:	74 79                	je     41f7eb <inflate_fast+0x21bb>
  41f772:	83 7c 24 38 03       	cmpl   $0x3,0x38(%rsp)
  41f777:	74 61                	je     41f7da <inflate_fast+0x21aa>
  41f779:	83 7c 24 38 04       	cmpl   $0x4,0x38(%rsp)
  41f77e:	74 49                	je     41f7c9 <inflate_fast+0x2199>
  41f780:	83 7c 24 38 05       	cmpl   $0x5,0x38(%rsp)
  41f785:	74 30                	je     41f7b7 <inflate_fast+0x2187>
  41f787:	83 7c 24 38 06       	cmpl   $0x6,0x38(%rsp)
  41f78c:	74 17                	je     41f7a5 <inflate_fast+0x2175>
  41f78e:	66 44 0f 6f 6f 10    	movdqa 0x10(%rdi),%xmm13
  41f794:	b8 20 00 00 00       	mov    $0x20,%eax
  41f799:	8b 54 24 30          	mov    0x30(%rsp),%edx
  41f79d:	45 0f 11 68 10       	movups %xmm13,0x10(%r8)
  41f7a2:	83 c2 02             	add    $0x2,%edx
  41f7a5:	83 c2 01             	add    $0x1,%edx
  41f7a8:	66 44 0f 6f 34 07    	movdqa (%rdi,%rax,1),%xmm14
  41f7ae:	45 0f 11 34 00       	movups %xmm14,(%r8,%rax,1)
  41f7b3:	48 83 c0 10          	add    $0x10,%rax
  41f7b7:	83 c2 01             	add    $0x1,%edx
  41f7ba:	66 44 0f 6f 3c 07    	movdqa (%rdi,%rax,1),%xmm15
  41f7c0:	45 0f 11 3c 00       	movups %xmm15,(%r8,%rax,1)
  41f7c5:	48 83 c0 10          	add    $0x10,%rax
  41f7c9:	83 c2 01             	add    $0x1,%edx
  41f7cc:	66 0f 6f 04 07       	movdqa (%rdi,%rax,1),%xmm0
  41f7d1:	41 0f 11 04 00       	movups %xmm0,(%r8,%rax,1)
  41f7d6:	48 83 c0 10          	add    $0x10,%rax
  41f7da:	83 c2 01             	add    $0x1,%edx
  41f7dd:	66 0f 6f 0c 07       	movdqa (%rdi,%rax,1),%xmm1
  41f7e2:	41 0f 11 0c 00       	movups %xmm1,(%r8,%rax,1)
  41f7e7:	48 83 c0 10          	add    $0x10,%rax
  41f7eb:	83 c2 01             	add    $0x1,%edx
  41f7ee:	66 0f 6f 14 07       	movdqa (%rdi,%rax,1),%xmm2
  41f7f3:	41 0f 11 14 00       	movups %xmm2,(%r8,%rax,1)
  41f7f8:	48 83 c0 10          	add    $0x10,%rax
  41f7fc:	83 c2 01             	add    $0x1,%edx
  41f7ff:	66 0f 6f 1c 07       	movdqa (%rdi,%rax,1),%xmm3
  41f804:	41 0f 11 1c 00       	movups %xmm3,(%r8,%rax,1)
  41f809:	48 83 c0 10          	add    $0x10,%rax
  41f80d:	39 54 24 40          	cmp    %edx,0x40(%rsp)
  41f811:	76 6f                	jbe    41f882 <inflate_fast+0x2252>
  41f813:	66 0f 6f 24 07       	movdqa (%rdi,%rax,1),%xmm4
  41f818:	83 c2 08             	add    $0x8,%edx
  41f81b:	41 0f 11 24 00       	movups %xmm4,(%r8,%rax,1)
  41f820:	66 0f 6f 6c 07 10    	movdqa 0x10(%rdi,%rax,1),%xmm5
  41f826:	41 0f 11 6c 00 10    	movups %xmm5,0x10(%r8,%rax,1)
  41f82c:	66 0f 6f 74 07 20    	movdqa 0x20(%rdi,%rax,1),%xmm6
  41f832:	41 0f 11 74 00 20    	movups %xmm6,0x20(%r8,%rax,1)
  41f838:	66 0f 6f 7c 07 30    	movdqa 0x30(%rdi,%rax,1),%xmm7
  41f83e:	41 0f 11 7c 00 30    	movups %xmm7,0x30(%r8,%rax,1)
  41f844:	66 44 0f 6f 44 07 40 	movdqa 0x40(%rdi,%rax,1),%xmm8
  41f84b:	45 0f 11 44 00 40    	movups %xmm8,0x40(%r8,%rax,1)
  41f851:	66 44 0f 6f 4c 07 50 	movdqa 0x50(%rdi,%rax,1),%xmm9
  41f858:	45 0f 11 4c 00 50    	movups %xmm9,0x50(%r8,%rax,1)
  41f85e:	66 44 0f 6f 54 07 60 	movdqa 0x60(%rdi,%rax,1),%xmm10
  41f865:	45 0f 11 54 00 60    	movups %xmm10,0x60(%r8,%rax,1)
  41f86b:	66 44 0f 6f 5c 07 70 	movdqa 0x70(%rdi,%rax,1),%xmm11
  41f872:	45 0f 11 5c 00 70    	movups %xmm11,0x70(%r8,%rax,1)
  41f878:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  41f87c:	39 54 24 40          	cmp    %edx,0x40(%rsp)
  41f880:	77 91                	ja     41f813 <inflate_fast+0x21e3>
  41f882:	8b 7c 24 58          	mov    0x58(%rsp),%edi
  41f886:	29 7c 24 28          	sub    %edi,0x28(%rsp)
  41f88a:	41 89 f8             	mov    %edi,%r8d
  41f88d:	4c 01 44 24 20       	add    %r8,0x20(%rsp)
  41f892:	4c 01 c1             	add    %r8,%rcx
  41f895:	3b 7c 24 5c          	cmp    0x5c(%rsp),%edi
  41f899:	0f 84 e1 00 00 00    	je     41f980 <inflate_fast+0x2350>
  41f89f:	0f b6 51 01          	movzbl 0x1(%rcx),%edx
                            } while (--op);
  41f8a3:	44 8b 44 24 28       	mov    0x28(%rsp),%r8d
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f8a8:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
                            } while (--op);
  41f8ad:	41 83 f8 01          	cmp    $0x1,%r8d
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f8b1:	88 57 01             	mov    %dl,0x1(%rdi)
                            } while (--op);
  41f8b4:	0f 84 c6 00 00 00    	je     41f980 <inflate_fast+0x2350>
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f8ba:	0f b6 51 02          	movzbl 0x2(%rcx),%edx
                            } while (--op);
  41f8be:	41 83 f8 02          	cmp    $0x2,%r8d
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f8c2:	88 57 02             	mov    %dl,0x2(%rdi)
                            } while (--op);
  41f8c5:	0f 84 b5 00 00 00    	je     41f980 <inflate_fast+0x2350>
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f8cb:	0f b6 51 03          	movzbl 0x3(%rcx),%edx
                            } while (--op);
  41f8cf:	41 83 f8 03          	cmp    $0x3,%r8d
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f8d3:	88 57 03             	mov    %dl,0x3(%rdi)
                            } while (--op);
  41f8d6:	0f 84 a4 00 00 00    	je     41f980 <inflate_fast+0x2350>
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f8dc:	0f b6 51 04          	movzbl 0x4(%rcx),%edx
                            } while (--op);
  41f8e0:	41 83 f8 04          	cmp    $0x4,%r8d
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f8e4:	88 57 04             	mov    %dl,0x4(%rdi)
                            } while (--op);
  41f8e7:	0f 84 93 00 00 00    	je     41f980 <inflate_fast+0x2350>
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f8ed:	0f b6 51 05          	movzbl 0x5(%rcx),%edx
                            } while (--op);
  41f8f1:	41 83 f8 05          	cmp    $0x5,%r8d
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f8f5:	88 57 05             	mov    %dl,0x5(%rdi)
                            } while (--op);
  41f8f8:	0f 84 82 00 00 00    	je     41f980 <inflate_fast+0x2350>
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f8fe:	0f b6 51 06          	movzbl 0x6(%rcx),%edx
                            } while (--op);
  41f902:	41 83 f8 06          	cmp    $0x6,%r8d
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f906:	88 57 06             	mov    %dl,0x6(%rdi)
                            } while (--op);
  41f909:	74 75                	je     41f980 <inflate_fast+0x2350>
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f90b:	0f b6 51 07          	movzbl 0x7(%rcx),%edx
                            } while (--op);
  41f90f:	41 83 f8 07          	cmp    $0x7,%r8d
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f913:	88 57 07             	mov    %dl,0x7(%rdi)
                            } while (--op);
  41f916:	74 68                	je     41f980 <inflate_fast+0x2350>
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f918:	0f b6 51 08          	movzbl 0x8(%rcx),%edx
                            } while (--op);
  41f91c:	41 83 f8 08          	cmp    $0x8,%r8d
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f920:	88 57 08             	mov    %dl,0x8(%rdi)
                            } while (--op);
  41f923:	74 5b                	je     41f980 <inflate_fast+0x2350>
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f925:	0f b6 51 09          	movzbl 0x9(%rcx),%edx
                            } while (--op);
  41f929:	41 83 f8 09          	cmp    $0x9,%r8d
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f92d:	88 57 09             	mov    %dl,0x9(%rdi)
                            } while (--op);
  41f930:	74 4e                	je     41f980 <inflate_fast+0x2350>
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f932:	0f b6 51 0a          	movzbl 0xa(%rcx),%edx
                            } while (--op);
  41f936:	41 83 f8 0a          	cmp    $0xa,%r8d
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f93a:	88 57 0a             	mov    %dl,0xa(%rdi)
                            } while (--op);
  41f93d:	74 41                	je     41f980 <inflate_fast+0x2350>
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f93f:	0f b6 51 0b          	movzbl 0xb(%rcx),%edx
                            } while (--op);
  41f943:	41 83 f8 0b          	cmp    $0xb,%r8d
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f947:	88 57 0b             	mov    %dl,0xb(%rdi)
                            } while (--op);
  41f94a:	74 34                	je     41f980 <inflate_fast+0x2350>
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f94c:	0f b6 51 0c          	movzbl 0xc(%rcx),%edx
                            } while (--op);
  41f950:	41 83 f8 0c          	cmp    $0xc,%r8d
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f954:	88 57 0c             	mov    %dl,0xc(%rdi)
                            } while (--op);
  41f957:	74 27                	je     41f980 <inflate_fast+0x2350>
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f959:	0f b6 51 0d          	movzbl 0xd(%rcx),%edx
                            } while (--op);
  41f95d:	41 83 f8 0d          	cmp    $0xd,%r8d
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f961:	88 57 0d             	mov    %dl,0xd(%rdi)
                            } while (--op);
  41f964:	74 1a                	je     41f980 <inflate_fast+0x2350>
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f966:	0f b6 51 0e          	movzbl 0xe(%rcx),%edx
                            } while (--op);
  41f96a:	41 83 f8 0e          	cmp    $0xe,%r8d
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f96e:	88 57 0e             	mov    %dl,0xe(%rdi)
                            } while (--op);
  41f971:	74 0d                	je     41f980 <inflate_fast+0x2350>
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f973:	0f b6 49 0f          	movzbl 0xf(%rcx),%ecx
  41f977:	4c 8b 44 24 20       	mov    0x20(%rsp),%r8
  41f97c:	41 88 48 0f          	mov    %cl,0xf(%r8)
  41f980:	8b 4c 24 4c          	mov    0x4c(%rsp),%ecx
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
                            } while (--op);
                            from = out - dist;  /* rest from output */
  41f984:	8b 7c 24 48          	mov    0x48(%rsp),%edi
  41f988:	4d 8d 64 0c 01       	lea    0x1(%r12,%rcx,1),%r12
  41f98d:	4c 89 e1             	mov    %r12,%rcx
  41f990:	48 29 f9             	sub    %rdi,%rcx
  41f993:	e9 a8 f5 ff ff       	jmpq   41ef40 <inflate_fast+0x1910>
  41f998:	44 8d 40 ff          	lea    -0x1(%rax),%r8d
                    }
                    from = window - OFF;
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
  41f99c:	89 44 24 28          	mov    %eax,0x28(%rsp)
  41f9a0:	4c 89 64 24 20       	mov    %r12,0x20(%rsp)
  41f9a5:	44 89 44 24 4c       	mov    %r8d,0x4c(%rsp)
  41f9aa:	e9 c5 e4 ff ff       	jmpq   41de74 <inflate_fast+0x844>
  41f9af:	8d 50 ff             	lea    -0x1(%rax),%edx
                            do {
                                PUP(out) = PUP(from);
  41f9b2:	44 0f b6 41 01       	movzbl 0x1(%rcx),%r8d
  41f9b7:	b8 01 00 00 00       	mov    $0x1,%eax
  41f9bc:	48 8d 7a 01          	lea    0x1(%rdx),%rdi
  41f9c0:	89 54 24 4c          	mov    %edx,0x4c(%rsp)
  41f9c4:	83 e2 07             	and    $0x7,%edx
                            } while (--op);
  41f9c7:	48 39 f8             	cmp    %rdi,%rax
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f9ca:	45 88 44 24 01       	mov    %r8b,0x1(%r12)
                            } while (--op);
  41f9cf:	74 af                	je     41f980 <inflate_fast+0x2350>
  41f9d1:	48 85 d2             	test   %rdx,%rdx
  41f9d4:	0f 84 92 00 00 00    	je     41fa6c <inflate_fast+0x243c>
  41f9da:	48 83 fa 01          	cmp    $0x1,%rdx
  41f9de:	74 75                	je     41fa55 <inflate_fast+0x2425>
  41f9e0:	48 83 fa 02          	cmp    $0x2,%rdx
  41f9e4:	74 60                	je     41fa46 <inflate_fast+0x2416>
  41f9e6:	48 83 fa 03          	cmp    $0x3,%rdx
  41f9ea:	74 4c                	je     41fa38 <inflate_fast+0x2408>
  41f9ec:	48 83 fa 04          	cmp    $0x4,%rdx
  41f9f0:	74 37                	je     41fa29 <inflate_fast+0x23f9>
  41f9f2:	48 83 fa 05          	cmp    $0x5,%rdx
  41f9f6:	74 23                	je     41fa1b <inflate_fast+0x23eb>
  41f9f8:	48 83 fa 06          	cmp    $0x6,%rdx
  41f9fc:	74 0e                	je     41fa0c <inflate_fast+0x23dc>
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41f9fe:	0f b6 51 02          	movzbl 0x2(%rcx),%edx
  41fa02:	b8 02 00 00 00       	mov    $0x2,%eax
  41fa07:	41 88 54 24 02       	mov    %dl,0x2(%r12)
  41fa0c:	44 0f b6 44 01 01    	movzbl 0x1(%rcx,%rax,1),%r8d
  41fa12:	45 88 44 04 01       	mov    %r8b,0x1(%r12,%rax,1)
  41fa17:	48 83 c0 01          	add    $0x1,%rax
  41fa1b:	0f b6 54 01 01       	movzbl 0x1(%rcx,%rax,1),%edx
  41fa20:	41 88 54 04 01       	mov    %dl,0x1(%r12,%rax,1)
  41fa25:	48 83 c0 01          	add    $0x1,%rax
  41fa29:	44 0f b6 44 01 01    	movzbl 0x1(%rcx,%rax,1),%r8d
  41fa2f:	45 88 44 04 01       	mov    %r8b,0x1(%r12,%rax,1)
  41fa34:	48 83 c0 01          	add    $0x1,%rax
  41fa38:	0f b6 54 01 01       	movzbl 0x1(%rcx,%rax,1),%edx
  41fa3d:	41 88 54 04 01       	mov    %dl,0x1(%r12,%rax,1)
  41fa42:	48 83 c0 01          	add    $0x1,%rax
  41fa46:	44 0f b6 44 01 01    	movzbl 0x1(%rcx,%rax,1),%r8d
  41fa4c:	45 88 44 04 01       	mov    %r8b,0x1(%r12,%rax,1)
  41fa51:	48 83 c0 01          	add    $0x1,%rax
  41fa55:	0f b6 54 01 01       	movzbl 0x1(%rcx,%rax,1),%edx
  41fa5a:	41 88 54 04 01       	mov    %dl,0x1(%r12,%rax,1)
  41fa5f:	48 83 c0 01          	add    $0x1,%rax
                            } while (--op);
  41fa63:	48 39 f8             	cmp    %rdi,%rax
  41fa66:	0f 84 14 ff ff ff    	je     41f980 <inflate_fast+0x2350>
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41fa6c:	44 0f b6 44 01 01    	movzbl 0x1(%rcx,%rax,1),%r8d
  41fa72:	45 88 44 04 01       	mov    %r8b,0x1(%r12,%rax,1)
  41fa77:	0f b6 54 01 02       	movzbl 0x2(%rcx,%rax,1),%edx
  41fa7c:	41 88 54 04 02       	mov    %dl,0x2(%r12,%rax,1)
  41fa81:	44 0f b6 44 01 03    	movzbl 0x3(%rcx,%rax,1),%r8d
  41fa87:	45 88 44 04 03       	mov    %r8b,0x3(%r12,%rax,1)
  41fa8c:	0f b6 54 01 04       	movzbl 0x4(%rcx,%rax,1),%edx
  41fa91:	41 88 54 04 04       	mov    %dl,0x4(%r12,%rax,1)
  41fa96:	44 0f b6 44 01 05    	movzbl 0x5(%rcx,%rax,1),%r8d
  41fa9c:	45 88 44 04 05       	mov    %r8b,0x5(%r12,%rax,1)
  41faa1:	0f b6 54 01 06       	movzbl 0x6(%rcx,%rax,1),%edx
  41faa6:	41 88 54 04 06       	mov    %dl,0x6(%r12,%rax,1)
  41faab:	44 0f b6 44 01 07    	movzbl 0x7(%rcx,%rax,1),%r8d
  41fab1:	45 88 44 04 07       	mov    %r8b,0x7(%r12,%rax,1)
  41fab6:	0f b6 54 01 08       	movzbl 0x8(%rcx,%rax,1),%edx
  41fabb:	41 88 54 04 08       	mov    %dl,0x8(%r12,%rax,1)
  41fac0:	48 83 c0 08          	add    $0x8,%rax
                            } while (--op);
  41fac4:	48 39 f8             	cmp    %rdi,%rax
  41fac7:	75 a3                	jne    41fa6c <inflate_fast+0x243c>
  41fac9:	e9 b2 fe ff ff       	jmpq   41f980 <inflate_fast+0x2350>
  41face:	66 90                	xchg   %ax,%ax
  41fad0:	48 89 6c 24 38       	mov    %rbp,0x38(%rsp)
  41fad5:	4c 89 64 24 50       	mov    %r12,0x50(%rsp)
  41fada:	8b 6c 24 30          	mov    0x30(%rsp),%ebp
  41fade:	e9 d2 e4 ff ff       	jmpq   41dfb5 <inflate_fast+0x985>
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
                            } while (--op);
                            from = window - OFF;
  41fae3:	48 8b 4c 24 c8       	mov    -0x38(%rsp),%rcx
  41fae8:	49 89 d4             	mov    %rdx,%r12
  41faeb:	e9 50 f4 ff ff       	jmpq   41ef40 <inflate_fast+0x1910>
                Tracevv((stderr, "inflate:         distance %u\n", dist));
                op = (unsigned)(out - beg);     /* max distance in output */
                if (dist > op) {                /* see if copy from window */
                    op = dist - op;             /* distance back in window */
                    if (op > whave) {
                        strm->msg = (char *)"invalid distance too far back";
  41faf0:	49 c7 47 30 ca 93 43 	movq   $0x4393ca,0x30(%r15)
  41faf7:	00 
                        state->mode = BAD;
  41faf8:	41 c7 45 00 1b 00 00 	movl   $0x1b,0x0(%r13)
  41faff:	00 
                        break;
  41fb00:	e9 23 dd ff ff       	jmpq   41d828 <inflate_fast+0x1f8>
  41fb05:	8d 50 ff             	lea    -0x1(%rax),%edx
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41fb08:	0f b6 41 01          	movzbl 0x1(%rcx),%eax
  41fb0c:	48 8d 7a 01          	lea    0x1(%rdx),%rdi
  41fb10:	89 54 24 4c          	mov    %edx,0x4c(%rsp)
  41fb14:	83 e2 07             	and    $0x7,%edx
  41fb17:	41 88 44 24 01       	mov    %al,0x1(%r12)
  41fb1c:	b8 01 00 00 00       	mov    $0x1,%eax
                            } while (--op);
  41fb21:	48 39 f8             	cmp    %rdi,%rax
  41fb24:	0f 84 56 fe ff ff    	je     41f980 <inflate_fast+0x2350>
  41fb2a:	48 85 d2             	test   %rdx,%rdx
  41fb2d:	0f 84 93 00 00 00    	je     41fbc6 <inflate_fast+0x2596>
  41fb33:	48 83 fa 01          	cmp    $0x1,%rdx
  41fb37:	74 75                	je     41fbae <inflate_fast+0x257e>
  41fb39:	48 83 fa 02          	cmp    $0x2,%rdx
  41fb3d:	74 61                	je     41fba0 <inflate_fast+0x2570>
  41fb3f:	48 83 fa 03          	cmp    $0x3,%rdx
  41fb43:	74 4c                	je     41fb91 <inflate_fast+0x2561>
  41fb45:	48 83 fa 04          	cmp    $0x4,%rdx
  41fb49:	74 38                	je     41fb83 <inflate_fast+0x2553>
  41fb4b:	48 83 fa 05          	cmp    $0x5,%rdx
  41fb4f:	74 23                	je     41fb74 <inflate_fast+0x2544>
  41fb51:	48 83 fa 06          	cmp    $0x6,%rdx
  41fb55:	74 0f                	je     41fb66 <inflate_fast+0x2536>
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41fb57:	44 0f b6 41 02       	movzbl 0x2(%rcx),%r8d
  41fb5c:	b8 02 00 00 00       	mov    $0x2,%eax
  41fb61:	45 88 44 24 02       	mov    %r8b,0x2(%r12)
  41fb66:	0f b6 54 01 01       	movzbl 0x1(%rcx,%rax,1),%edx
  41fb6b:	41 88 54 04 01       	mov    %dl,0x1(%r12,%rax,1)
  41fb70:	48 83 c0 01          	add    $0x1,%rax
  41fb74:	44 0f b6 44 01 01    	movzbl 0x1(%rcx,%rax,1),%r8d
  41fb7a:	45 88 44 04 01       	mov    %r8b,0x1(%r12,%rax,1)
  41fb7f:	48 83 c0 01          	add    $0x1,%rax
  41fb83:	0f b6 54 01 01       	movzbl 0x1(%rcx,%rax,1),%edx
  41fb88:	41 88 54 04 01       	mov    %dl,0x1(%r12,%rax,1)
  41fb8d:	48 83 c0 01          	add    $0x1,%rax
  41fb91:	44 0f b6 44 01 01    	movzbl 0x1(%rcx,%rax,1),%r8d
  41fb97:	45 88 44 04 01       	mov    %r8b,0x1(%r12,%rax,1)
  41fb9c:	48 83 c0 01          	add    $0x1,%rax
  41fba0:	0f b6 54 01 01       	movzbl 0x1(%rcx,%rax,1),%edx
  41fba5:	41 88 54 04 01       	mov    %dl,0x1(%r12,%rax,1)
  41fbaa:	48 83 c0 01          	add    $0x1,%rax
  41fbae:	44 0f b6 44 01 01    	movzbl 0x1(%rcx,%rax,1),%r8d
  41fbb4:	45 88 44 04 01       	mov    %r8b,0x1(%r12,%rax,1)
  41fbb9:	48 83 c0 01          	add    $0x1,%rax
                            } while (--op);
  41fbbd:	48 39 f8             	cmp    %rdi,%rax
  41fbc0:	0f 84 ba fd ff ff    	je     41f980 <inflate_fast+0x2350>
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41fbc6:	0f b6 54 01 01       	movzbl 0x1(%rcx,%rax,1),%edx
  41fbcb:	41 88 54 04 01       	mov    %dl,0x1(%r12,%rax,1)
  41fbd0:	44 0f b6 44 01 02    	movzbl 0x2(%rcx,%rax,1),%r8d
  41fbd6:	45 88 44 04 02       	mov    %r8b,0x2(%r12,%rax,1)
  41fbdb:	0f b6 54 01 03       	movzbl 0x3(%rcx,%rax,1),%edx
  41fbe0:	41 88 54 04 03       	mov    %dl,0x3(%r12,%rax,1)
  41fbe5:	44 0f b6 44 01 04    	movzbl 0x4(%rcx,%rax,1),%r8d
  41fbeb:	45 88 44 04 04       	mov    %r8b,0x4(%r12,%rax,1)
  41fbf0:	0f b6 54 01 05       	movzbl 0x5(%rcx,%rax,1),%edx
  41fbf5:	41 88 54 04 05       	mov    %dl,0x5(%r12,%rax,1)
  41fbfa:	44 0f b6 44 01 06    	movzbl 0x6(%rcx,%rax,1),%r8d
  41fc00:	45 88 44 04 06       	mov    %r8b,0x6(%r12,%rax,1)
  41fc05:	0f b6 54 01 07       	movzbl 0x7(%rcx,%rax,1),%edx
  41fc0a:	41 88 54 04 07       	mov    %dl,0x7(%r12,%rax,1)
  41fc0f:	44 0f b6 44 01 08    	movzbl 0x8(%rcx,%rax,1),%r8d
  41fc15:	45 88 44 04 08       	mov    %r8b,0x8(%r12,%rax,1)
  41fc1a:	48 83 c0 08          	add    $0x8,%rax
                            } while (--op);
  41fc1e:	48 39 f8             	cmp    %rdi,%rax
  41fc21:	75 a3                	jne    41fbc6 <inflate_fast+0x2596>
  41fc23:	e9 58 fd ff ff       	jmpq   41f980 <inflate_fast+0x2350>
  41fc28:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  41fc2f:	00 
                                from = out - dist;      /* rest from output */
                            }
                        }
                    }
                    else {                      /* contiguous in window */
                        from += write - op;
  41fc30:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  41fc35:	8d 48 ff             	lea    -0x1(%rax),%ecx
                        if (op < len) {         /* some from window */
                            len -= op;
  41fc38:	89 44 24 30          	mov    %eax,0x30(%rsp)
  41fc3c:	4c 89 64 24 28       	mov    %r12,0x28(%rsp)
  41fc41:	89 4c 24 4c          	mov    %ecx,0x4c(%rsp)
  41fc45:	e9 84 f7 ff ff       	jmpq   41f3ce <inflate_fast+0x1d9e>
                            } while (--op);
                            from = out - dist;  /* rest from output */
                        }
                    }
                    else if (write < op) {      /* wrap around window */
                        from += wsize + write - op;
  41fc4a:	49 89 c8             	mov    %rcx,%r8
  41fc4d:	8d 4a ff             	lea    -0x1(%rdx),%ecx
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
  41fc50:	89 54 24 30          	mov    %edx,0x30(%rsp)
  41fc54:	4c 89 64 24 28       	mov    %r12,0x28(%rsp)
  41fc59:	89 4c 24 58          	mov    %ecx,0x58(%rsp)
  41fc5d:	e9 17 e7 ff ff       	jmpq   41e379 <inflate_fast+0xd49>
  41fc62:	83 ea 01             	sub    $0x1,%edx
                            do {
                                PUP(out) = PUP(from);
  41fc65:	0f b6 79 01          	movzbl 0x1(%rcx),%edi
  41fc69:	b8 01 00 00 00       	mov    $0x1,%eax
  41fc6e:	4c 8d 42 01          	lea    0x1(%rdx),%r8
  41fc72:	89 54 24 58          	mov    %edx,0x58(%rsp)
  41fc76:	83 e2 07             	and    $0x7,%edx
                            } while (--op);
  41fc79:	4c 39 c0             	cmp    %r8,%rax
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41fc7c:	41 88 7c 24 01       	mov    %dil,0x1(%r12)
                            } while (--op);
  41fc81:	0f 84 61 ea ff ff    	je     41e6e8 <inflate_fast+0x10b8>
  41fc87:	48 85 d2             	test   %rdx,%rdx
  41fc8a:	0f 84 8f 00 00 00    	je     41fd1f <inflate_fast+0x26ef>
  41fc90:	48 83 fa 01          	cmp    $0x1,%rdx
  41fc94:	74 72                	je     41fd08 <inflate_fast+0x26d8>
  41fc96:	48 83 fa 02          	cmp    $0x2,%rdx
  41fc9a:	74 5e                	je     41fcfa <inflate_fast+0x26ca>
  41fc9c:	48 83 fa 03          	cmp    $0x3,%rdx
  41fca0:	74 4a                	je     41fcec <inflate_fast+0x26bc>
  41fca2:	48 83 fa 04          	cmp    $0x4,%rdx
  41fca6:	74 36                	je     41fcde <inflate_fast+0x26ae>
  41fca8:	48 83 fa 05          	cmp    $0x5,%rdx
  41fcac:	74 22                	je     41fcd0 <inflate_fast+0x26a0>
  41fcae:	48 83 fa 06          	cmp    $0x6,%rdx
  41fcb2:	74 0e                	je     41fcc2 <inflate_fast+0x2692>
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41fcb4:	0f b6 51 02          	movzbl 0x2(%rcx),%edx
  41fcb8:	b8 02 00 00 00       	mov    $0x2,%eax
  41fcbd:	41 88 54 24 02       	mov    %dl,0x2(%r12)
  41fcc2:	0f b6 7c 01 01       	movzbl 0x1(%rcx,%rax,1),%edi
  41fcc7:	41 88 7c 04 01       	mov    %dil,0x1(%r12,%rax,1)
  41fccc:	48 83 c0 01          	add    $0x1,%rax
  41fcd0:	0f b6 54 01 01       	movzbl 0x1(%rcx,%rax,1),%edx
  41fcd5:	41 88 54 04 01       	mov    %dl,0x1(%r12,%rax,1)
  41fcda:	48 83 c0 01          	add    $0x1,%rax
  41fcde:	0f b6 7c 01 01       	movzbl 0x1(%rcx,%rax,1),%edi
  41fce3:	41 88 7c 04 01       	mov    %dil,0x1(%r12,%rax,1)
  41fce8:	48 83 c0 01          	add    $0x1,%rax
  41fcec:	0f b6 54 01 01       	movzbl 0x1(%rcx,%rax,1),%edx
  41fcf1:	41 88 54 04 01       	mov    %dl,0x1(%r12,%rax,1)
  41fcf6:	48 83 c0 01          	add    $0x1,%rax
  41fcfa:	0f b6 7c 01 01       	movzbl 0x1(%rcx,%rax,1),%edi
  41fcff:	41 88 7c 04 01       	mov    %dil,0x1(%r12,%rax,1)
  41fd04:	48 83 c0 01          	add    $0x1,%rax
  41fd08:	0f b6 54 01 01       	movzbl 0x1(%rcx,%rax,1),%edx
  41fd0d:	41 88 54 04 01       	mov    %dl,0x1(%r12,%rax,1)
  41fd12:	48 83 c0 01          	add    $0x1,%rax
                            } while (--op);
  41fd16:	4c 39 c0             	cmp    %r8,%rax
  41fd19:	0f 84 c9 e9 ff ff    	je     41e6e8 <inflate_fast+0x10b8>
  41fd1f:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  41fd24:	89 74 24 28          	mov    %esi,0x28(%rsp)
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41fd28:	0f b6 74 01 01       	movzbl 0x1(%rcx,%rax,1),%esi
  41fd2d:	41 88 74 04 01       	mov    %sil,0x1(%r12,%rax,1)
  41fd32:	0f b6 54 01 02       	movzbl 0x2(%rcx,%rax,1),%edx
  41fd37:	41 88 54 04 02       	mov    %dl,0x2(%r12,%rax,1)
  41fd3c:	0f b6 74 01 03       	movzbl 0x3(%rcx,%rax,1),%esi
  41fd41:	41 88 74 04 03       	mov    %sil,0x3(%r12,%rax,1)
  41fd46:	0f b6 54 01 04       	movzbl 0x4(%rcx,%rax,1),%edx
  41fd4b:	41 88 54 04 04       	mov    %dl,0x4(%r12,%rax,1)
  41fd50:	0f b6 74 01 05       	movzbl 0x5(%rcx,%rax,1),%esi
  41fd55:	41 88 74 04 05       	mov    %sil,0x5(%r12,%rax,1)
  41fd5a:	0f b6 54 01 06       	movzbl 0x6(%rcx,%rax,1),%edx
  41fd5f:	41 88 54 04 06       	mov    %dl,0x6(%r12,%rax,1)
  41fd64:	0f b6 74 01 07       	movzbl 0x7(%rcx,%rax,1),%esi
  41fd69:	41 88 74 04 07       	mov    %sil,0x7(%r12,%rax,1)
  41fd6e:	0f b6 54 01 08       	movzbl 0x8(%rcx,%rax,1),%edx
  41fd73:	41 88 54 04 08       	mov    %dl,0x8(%r12,%rax,1)
  41fd78:	48 83 c0 08          	add    $0x8,%rax
                            } while (--op);
  41fd7c:	4c 39 c0             	cmp    %r8,%rax
  41fd7f:	75 a7                	jne    41fd28 <inflate_fast+0x26f8>
  41fd81:	8b 74 24 28          	mov    0x28(%rsp),%esi
  41fd85:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  41fd8a:	e9 59 e9 ff ff       	jmpq   41e6e8 <inflate_fast+0x10b8>
  41fd8f:	90                   	nop
  41fd90:	85 c9                	test   %ecx,%ecx
  41fd92:	0f 84 d2 00 00 00    	je     41fe6a <inflate_fast+0x283a>
  41fd98:	83 f9 01             	cmp    $0x1,%ecx
  41fd9b:	74 7f                	je     41fe1c <inflate_fast+0x27ec>
  41fd9d:	83 f9 02             	cmp    $0x2,%ecx
  41fda0:	74 3a                	je     41fddc <inflate_fast+0x27ac>
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41fda2:	66 0f 6f 20          	movdqa (%rax),%xmm4
  41fda6:	0f 18 88 d0 01 00 00 	prefetcht0 0x1d0(%rax)
  41fdad:	48 83 c2 40          	add    $0x40,%rdx
  41fdb1:	48 83 c0 40          	add    $0x40,%rax
  41fdb5:	c7 44 24 38 08 00 00 	movl   $0x8,0x38(%rsp)
  41fdbc:	00 
  41fdbd:	0f 11 62 c0          	movups %xmm4,-0x40(%rdx)
  41fdc1:	66 0f 6f 68 d0       	movdqa -0x30(%rax),%xmm5
  41fdc6:	0f 11 6a d0          	movups %xmm5,-0x30(%rdx)
  41fdca:	66 0f 6f 70 e0       	movdqa -0x20(%rax),%xmm6
  41fdcf:	0f 11 72 e0          	movups %xmm6,-0x20(%rdx)
  41fdd3:	66 0f 6f 78 f0       	movdqa -0x10(%rax),%xmm7
  41fdd8:	0f 11 7a f0          	movups %xmm7,-0x10(%rdx)
  41fddc:	0f 18 88 d0 01 00 00 	prefetcht0 0x1d0(%rax)
  41fde3:	83 44 24 38 04       	addl   $0x4,0x38(%rsp)
  41fde8:	48 83 c0 40          	add    $0x40,%rax
  41fdec:	48 83 c2 40          	add    $0x40,%rdx
  41fdf0:	66 44 0f 6f 40 c0    	movdqa -0x40(%rax),%xmm8
  41fdf6:	44 0f 11 42 c0       	movups %xmm8,-0x40(%rdx)
  41fdfb:	66 44 0f 6f 48 d0    	movdqa -0x30(%rax),%xmm9
  41fe01:	44 0f 11 4a d0       	movups %xmm9,-0x30(%rdx)
  41fe06:	66 44 0f 6f 50 e0    	movdqa -0x20(%rax),%xmm10
  41fe0c:	44 0f 11 52 e0       	movups %xmm10,-0x20(%rdx)
  41fe11:	66 44 0f 6f 58 f0    	movdqa -0x10(%rax),%xmm11
  41fe17:	44 0f 11 5a f0       	movups %xmm11,-0x10(%rdx)
  41fe1c:	0f 18 88 d0 01 00 00 	prefetcht0 0x1d0(%rax)
  41fe23:	83 44 24 38 04       	addl   $0x4,0x38(%rsp)
  41fe28:	48 83 c0 40          	add    $0x40,%rax
  41fe2c:	48 83 c2 40          	add    $0x40,%rdx
  41fe30:	8b 4c 24 38          	mov    0x38(%rsp),%ecx
  41fe34:	66 44 0f 6f 60 c0    	movdqa -0x40(%rax),%xmm12
  41fe3a:	44 0f 11 62 c0       	movups %xmm12,-0x40(%rdx)
  41fe3f:	66 44 0f 6f 68 d0    	movdqa -0x30(%rax),%xmm13
  41fe45:	44 0f 11 6a d0       	movups %xmm13,-0x30(%rdx)
  41fe4a:	66 44 0f 6f 70 e0    	movdqa -0x20(%rax),%xmm14
  41fe50:	44 0f 11 72 e0       	movups %xmm14,-0x20(%rdx)
  41fe55:	66 44 0f 6f 78 f0    	movdqa -0x10(%rax),%xmm15
  41fe5b:	44 0f 11 7a f0       	movups %xmm15,-0x10(%rdx)
  41fe60:	3b 4c 24 4c          	cmp    0x4c(%rsp),%ecx
  41fe64:	0f 84 b4 e5 ff ff    	je     41e41e <inflate_fast+0xdee>
  41fe6a:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  41fe6f:	48 89 6c 24 40       	mov    %rbp,0x40(%rsp)
  41fe74:	66 0f 6f 00          	movdqa (%rax),%xmm0
  41fe78:	0f 18 88 d0 01 00 00 	prefetcht0 0x1d0(%rax)
  41fe7f:	0f 18 88 10 02 00 00 	prefetcht0 0x210(%rax)
  41fe86:	0f 18 88 50 02 00 00 	prefetcht0 0x250(%rax)
  41fe8d:	0f 18 88 90 02 00 00 	prefetcht0 0x290(%rax)
  41fe94:	48 81 c2 00 01 00 00 	add    $0x100,%rdx
  41fe9b:	0f 11 82 00 ff ff ff 	movups %xmm0,-0x100(%rdx)
  41fea2:	48 05 00 01 00 00    	add    $0x100,%rax
  41fea8:	66 0f 6f 88 10 ff ff 	movdqa -0xf0(%rax),%xmm1
  41feaf:	ff 
  41feb0:	0f 11 8a 10 ff ff ff 	movups %xmm1,-0xf0(%rdx)
  41feb7:	66 0f 6f 90 20 ff ff 	movdqa -0xe0(%rax),%xmm2
  41febe:	ff 
  41febf:	0f 11 92 20 ff ff ff 	movups %xmm2,-0xe0(%rdx)
  41fec6:	66 0f 6f 98 30 ff ff 	movdqa -0xd0(%rax),%xmm3
  41fecd:	ff 
  41fece:	0f 11 9a 30 ff ff ff 	movups %xmm3,-0xd0(%rdx)
  41fed5:	66 0f 6f a0 40 ff ff 	movdqa -0xc0(%rax),%xmm4
  41fedc:	ff 
  41fedd:	0f 11 a2 40 ff ff ff 	movups %xmm4,-0xc0(%rdx)
  41fee4:	66 0f 6f a8 50 ff ff 	movdqa -0xb0(%rax),%xmm5
  41feeb:	ff 
  41feec:	0f 11 aa 50 ff ff ff 	movups %xmm5,-0xb0(%rdx)
  41fef3:	66 0f 6f b0 60 ff ff 	movdqa -0xa0(%rax),%xmm6
  41fefa:	ff 
  41fefb:	0f 11 b2 60 ff ff ff 	movups %xmm6,-0xa0(%rdx)
  41ff02:	66 0f 6f b8 70 ff ff 	movdqa -0x90(%rax),%xmm7
  41ff09:	ff 
  41ff0a:	0f 11 ba 70 ff ff ff 	movups %xmm7,-0x90(%rdx)
  41ff11:	66 44 0f 6f 40 80    	movdqa -0x80(%rax),%xmm8
  41ff17:	44 0f 11 42 80       	movups %xmm8,-0x80(%rdx)
  41ff1c:	66 44 0f 6f 48 90    	movdqa -0x70(%rax),%xmm9
  41ff22:	44 0f 11 4a 90       	movups %xmm9,-0x70(%rdx)
  41ff27:	66 44 0f 6f 50 a0    	movdqa -0x60(%rax),%xmm10
  41ff2d:	44 0f 11 52 a0       	movups %xmm10,-0x60(%rdx)
  41ff32:	66 44 0f 6f 58 b0    	movdqa -0x50(%rax),%xmm11
  41ff38:	44 0f 11 5a b0       	movups %xmm11,-0x50(%rdx)
  41ff3d:	66 44 0f 6f 60 c0    	movdqa -0x40(%rax),%xmm12
  41ff43:	44 0f 11 62 c0       	movups %xmm12,-0x40(%rdx)
  41ff48:	66 44 0f 6f 68 d0    	movdqa -0x30(%rax),%xmm13
  41ff4e:	44 0f 11 6a d0       	movups %xmm13,-0x30(%rdx)
  41ff53:	66 44 0f 6f 70 e0    	movdqa -0x20(%rax),%xmm14
  41ff59:	44 0f 11 72 e0       	movups %xmm14,-0x20(%rdx)
  41ff5e:	83 44 24 38 10       	addl   $0x10,0x38(%rsp)
  41ff63:	8b 6c 24 38          	mov    0x38(%rsp),%ebp
  41ff67:	66 44 0f 6f 78 f0    	movdqa -0x10(%rax),%xmm15
  41ff6d:	44 0f 11 7a f0       	movups %xmm15,-0x10(%rdx)
  41ff72:	3b 6c 24 4c          	cmp    0x4c(%rsp),%ebp
  41ff76:	0f 85 f8 fe ff ff    	jne    41fe74 <inflate_fast+0x2844>
  41ff7c:	48 8b 6c 24 40       	mov    0x40(%rsp),%rbp
  41ff81:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  41ff86:	e9 93 e4 ff ff       	jmpq   41e41e <inflate_fast+0xdee>
  41ff8b:	85 c9                	test   %ecx,%ecx
  41ff8d:	0f 84 d2 00 00 00    	je     420065 <inflate_fast+0x2a35>
  41ff93:	83 f9 01             	cmp    $0x1,%ecx
  41ff96:	74 7f                	je     420017 <inflate_fast+0x29e7>
  41ff98:	83 f9 02             	cmp    $0x2,%ecx
  41ff9b:	74 3a                	je     41ffd7 <inflate_fast+0x29a7>
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  41ff9d:	66 0f 6f 20          	movdqa (%rax),%xmm4
  41ffa1:	0f 18 88 d0 01 00 00 	prefetcht0 0x1d0(%rax)
  41ffa8:	48 83 c2 40          	add    $0x40,%rdx
  41ffac:	48 83 c0 40          	add    $0x40,%rax
  41ffb0:	c7 44 24 38 08 00 00 	movl   $0x8,0x38(%rsp)
  41ffb7:	00 
  41ffb8:	0f 11 62 c0          	movups %xmm4,-0x40(%rdx)
  41ffbc:	66 0f 6f 68 d0       	movdqa -0x30(%rax),%xmm5
  41ffc1:	0f 11 6a d0          	movups %xmm5,-0x30(%rdx)
  41ffc5:	66 0f 6f 70 e0       	movdqa -0x20(%rax),%xmm6
  41ffca:	0f 11 72 e0          	movups %xmm6,-0x20(%rdx)
  41ffce:	66 0f 6f 78 f0       	movdqa -0x10(%rax),%xmm7
  41ffd3:	0f 11 7a f0          	movups %xmm7,-0x10(%rdx)
  41ffd7:	0f 18 88 d0 01 00 00 	prefetcht0 0x1d0(%rax)
  41ffde:	83 44 24 38 04       	addl   $0x4,0x38(%rsp)
  41ffe3:	48 83 c0 40          	add    $0x40,%rax
  41ffe7:	48 83 c2 40          	add    $0x40,%rdx
  41ffeb:	66 44 0f 6f 40 c0    	movdqa -0x40(%rax),%xmm8
  41fff1:	44 0f 11 42 c0       	movups %xmm8,-0x40(%rdx)
  41fff6:	66 44 0f 6f 48 d0    	movdqa -0x30(%rax),%xmm9
  41fffc:	44 0f 11 4a d0       	movups %xmm9,-0x30(%rdx)
  420001:	66 44 0f 6f 50 e0    	movdqa -0x20(%rax),%xmm10
  420007:	44 0f 11 52 e0       	movups %xmm10,-0x20(%rdx)
  42000c:	66 44 0f 6f 58 f0    	movdqa -0x10(%rax),%xmm11
  420012:	44 0f 11 5a f0       	movups %xmm11,-0x10(%rdx)
  420017:	0f 18 88 d0 01 00 00 	prefetcht0 0x1d0(%rax)
  42001e:	83 44 24 38 04       	addl   $0x4,0x38(%rsp)
  420023:	48 83 c0 40          	add    $0x40,%rax
  420027:	48 83 c2 40          	add    $0x40,%rdx
  42002b:	8b 4c 24 38          	mov    0x38(%rsp),%ecx
  42002f:	66 44 0f 6f 60 c0    	movdqa -0x40(%rax),%xmm12
  420035:	44 0f 11 62 c0       	movups %xmm12,-0x40(%rdx)
  42003a:	66 44 0f 6f 68 d0    	movdqa -0x30(%rax),%xmm13
  420040:	44 0f 11 6a d0       	movups %xmm13,-0x30(%rdx)
  420045:	66 44 0f 6f 70 e0    	movdqa -0x20(%rax),%xmm14
  42004b:	44 0f 11 72 e0       	movups %xmm14,-0x20(%rdx)
  420050:	66 44 0f 6f 78 f0    	movdqa -0x10(%rax),%xmm15
  420056:	44 0f 11 7a f0       	movups %xmm15,-0x10(%rdx)
  42005b:	3b 4c 24 40          	cmp    0x40(%rsp),%ecx
  42005f:	0f 84 0c f4 ff ff    	je     41f471 <inflate_fast+0x1e41>
  420065:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  42006a:	66 0f 6f 00          	movdqa (%rax),%xmm0
  42006e:	0f 18 88 d0 01 00 00 	prefetcht0 0x1d0(%rax)
  420075:	0f 18 88 10 02 00 00 	prefetcht0 0x210(%rax)
  42007c:	0f 18 88 50 02 00 00 	prefetcht0 0x250(%rax)
  420083:	0f 18 88 90 02 00 00 	prefetcht0 0x290(%rax)
  42008a:	48 81 c2 00 01 00 00 	add    $0x100,%rdx
  420091:	0f 11 82 00 ff ff ff 	movups %xmm0,-0x100(%rdx)
  420098:	48 05 00 01 00 00    	add    $0x100,%rax
  42009e:	66 0f 6f 88 10 ff ff 	movdqa -0xf0(%rax),%xmm1
  4200a5:	ff 
  4200a6:	0f 11 8a 10 ff ff ff 	movups %xmm1,-0xf0(%rdx)
  4200ad:	66 0f 6f 90 20 ff ff 	movdqa -0xe0(%rax),%xmm2
  4200b4:	ff 
  4200b5:	0f 11 92 20 ff ff ff 	movups %xmm2,-0xe0(%rdx)
  4200bc:	66 0f 6f 98 30 ff ff 	movdqa -0xd0(%rax),%xmm3
  4200c3:	ff 
  4200c4:	0f 11 9a 30 ff ff ff 	movups %xmm3,-0xd0(%rdx)
  4200cb:	66 0f 6f a0 40 ff ff 	movdqa -0xc0(%rax),%xmm4
  4200d2:	ff 
  4200d3:	0f 11 a2 40 ff ff ff 	movups %xmm4,-0xc0(%rdx)
  4200da:	66 0f 6f a8 50 ff ff 	movdqa -0xb0(%rax),%xmm5
  4200e1:	ff 
  4200e2:	0f 11 aa 50 ff ff ff 	movups %xmm5,-0xb0(%rdx)
  4200e9:	66 0f 6f b0 60 ff ff 	movdqa -0xa0(%rax),%xmm6
  4200f0:	ff 
  4200f1:	0f 11 b2 60 ff ff ff 	movups %xmm6,-0xa0(%rdx)
  4200f8:	66 0f 6f b8 70 ff ff 	movdqa -0x90(%rax),%xmm7
  4200ff:	ff 
  420100:	0f 11 ba 70 ff ff ff 	movups %xmm7,-0x90(%rdx)
  420107:	66 44 0f 6f 40 80    	movdqa -0x80(%rax),%xmm8
  42010d:	44 0f 11 42 80       	movups %xmm8,-0x80(%rdx)
  420112:	66 44 0f 6f 48 90    	movdqa -0x70(%rax),%xmm9
  420118:	44 0f 11 4a 90       	movups %xmm9,-0x70(%rdx)
  42011d:	66 44 0f 6f 50 a0    	movdqa -0x60(%rax),%xmm10
  420123:	44 0f 11 52 a0       	movups %xmm10,-0x60(%rdx)
  420128:	66 44 0f 6f 58 b0    	movdqa -0x50(%rax),%xmm11
  42012e:	44 0f 11 5a b0       	movups %xmm11,-0x50(%rdx)
  420133:	66 44 0f 6f 60 c0    	movdqa -0x40(%rax),%xmm12
  420139:	44 0f 11 62 c0       	movups %xmm12,-0x40(%rdx)
  42013e:	66 44 0f 6f 68 d0    	movdqa -0x30(%rax),%xmm13
  420144:	44 0f 11 6a d0       	movups %xmm13,-0x30(%rdx)
  420149:	66 44 0f 6f 70 e0    	movdqa -0x20(%rax),%xmm14
  42014f:	44 0f 11 72 e0       	movups %xmm14,-0x20(%rdx)
  420154:	83 44 24 38 10       	addl   $0x10,0x38(%rsp)
  420159:	44 8b 44 24 38       	mov    0x38(%rsp),%r8d
  42015e:	66 44 0f 6f 78 f0    	movdqa -0x10(%rax),%xmm15
  420164:	44 0f 11 7a f0       	movups %xmm15,-0x10(%rdx)
  420169:	44 3b 44 24 40       	cmp    0x40(%rsp),%r8d
  42016e:	0f 85 f6 fe ff ff    	jne    42006a <inflate_fast+0x2a3a>
  420174:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  420179:	e9 f3 f2 ff ff       	jmpq   41f471 <inflate_fast+0x1e41>
                    if (write == 0) {           /* very common case */
                        from += wsize - op;
                        if (op < len) {         /* some from window */
                            len -= op;
                            do {
                                PUP(out) = PUP(from);
  42017e:	c7 44 24 30 00 00 00 	movl   $0x0,0x30(%rsp)
  420185:	00 
  420186:	e9 9c f5 ff ff       	jmpq   41f727 <inflate_fast+0x20f7>
                                PUP(out) = PUP(from);
                            } while (--op);
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
  42018b:	44 8b 44 24 b8       	mov    -0x48(%rsp),%r8d
  420190:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
  420195:	44 89 44 24 30       	mov    %r8d,0x30(%rsp)
  42019a:	e9 4e e8 ff ff       	jmpq   41e9ed <inflate_fast+0x13bd>
                                do {
                                    PUP(out) = PUP(from);
  42019f:	48 8b 44 24 b0       	mov    -0x50(%rsp),%rax
  4201a4:	4c 8b 44 24 d8       	mov    -0x28(%rsp),%r8
  4201a9:	0f b6 38             	movzbl (%rax),%edi
  4201ac:	49 8d 48 ff          	lea    -0x1(%r8),%rcx
  4201b0:	b8 01 00 00 00       	mov    $0x1,%eax
  4201b5:	83 e1 07             	and    $0x7,%ecx
                                } while (--op);
  4201b8:	4c 39 c0             	cmp    %r8,%rax
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  4201bb:	40 88 7a 01          	mov    %dil,0x1(%rdx)
                                } while (--op);
  4201bf:	0f 84 67 ed ff ff    	je     41ef2c <inflate_fast+0x18fc>
  4201c5:	48 85 c9             	test   %rcx,%rcx
  4201c8:	0f 84 1c 01 00 00    	je     4202ea <inflate_fast+0x2cba>
  4201ce:	48 83 f9 01          	cmp    $0x1,%rcx
  4201d2:	0f 84 8d 00 00 00    	je     420265 <inflate_fast+0x2c35>
  4201d8:	48 83 f9 02          	cmp    $0x2,%rcx
  4201dc:	74 75                	je     420253 <inflate_fast+0x2c23>
  4201de:	48 83 f9 03          	cmp    $0x3,%rcx
  4201e2:	74 5c                	je     420240 <inflate_fast+0x2c10>
  4201e4:	48 83 f9 04          	cmp    $0x4,%rcx
  4201e8:	74 44                	je     42022e <inflate_fast+0x2bfe>
  4201ea:	48 83 f9 05          	cmp    $0x5,%rcx
  4201ee:	74 2b                	je     42021b <inflate_fast+0x2beb>
  4201f0:	48 83 f9 06          	cmp    $0x6,%rcx
  4201f4:	74 13                	je     420209 <inflate_fast+0x2bd9>
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  4201f6:	4c 8b 44 24 b0       	mov    -0x50(%rsp),%r8
  4201fb:	b8 02 00 00 00       	mov    $0x2,%eax
  420200:	45 0f b6 60 01       	movzbl 0x1(%r8),%r12d
  420205:	44 88 62 02          	mov    %r12b,0x2(%rdx)
  420209:	48 8b 4c 24 b0       	mov    -0x50(%rsp),%rcx
  42020e:	0f b6 3c 01          	movzbl (%rcx,%rax,1),%edi
  420212:	40 88 7c 02 01       	mov    %dil,0x1(%rdx,%rax,1)
  420217:	48 83 c0 01          	add    $0x1,%rax
  42021b:	4c 8b 44 24 b0       	mov    -0x50(%rsp),%r8
  420220:	45 0f b6 24 00       	movzbl (%r8,%rax,1),%r12d
  420225:	44 88 64 02 01       	mov    %r12b,0x1(%rdx,%rax,1)
  42022a:	48 83 c0 01          	add    $0x1,%rax
  42022e:	48 8b 4c 24 b0       	mov    -0x50(%rsp),%rcx
  420233:	0f b6 3c 01          	movzbl (%rcx,%rax,1),%edi
  420237:	40 88 7c 02 01       	mov    %dil,0x1(%rdx,%rax,1)
  42023c:	48 83 c0 01          	add    $0x1,%rax
  420240:	4c 8b 44 24 b0       	mov    -0x50(%rsp),%r8
  420245:	45 0f b6 24 00       	movzbl (%r8,%rax,1),%r12d
  42024a:	44 88 64 02 01       	mov    %r12b,0x1(%rdx,%rax,1)
  42024f:	48 83 c0 01          	add    $0x1,%rax
  420253:	48 8b 4c 24 b0       	mov    -0x50(%rsp),%rcx
  420258:	0f b6 3c 01          	movzbl (%rcx,%rax,1),%edi
  42025c:	40 88 7c 02 01       	mov    %dil,0x1(%rdx,%rax,1)
  420261:	48 83 c0 01          	add    $0x1,%rax
  420265:	4c 8b 44 24 b0       	mov    -0x50(%rsp),%r8
  42026a:	45 0f b6 24 00       	movzbl (%r8,%rax,1),%r12d
  42026f:	4c 89 c1             	mov    %r8,%rcx
  420272:	44 88 64 02 01       	mov    %r12b,0x1(%rdx,%rax,1)
  420277:	48 83 c0 01          	add    $0x1,%rax
                                } while (--op);
  42027b:	48 3b 44 24 d8       	cmp    -0x28(%rsp),%rax
  420280:	0f 84 a6 ec ff ff    	je     41ef2c <inflate_fast+0x18fc>
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  420286:	0f b6 3c 01          	movzbl (%rcx,%rax,1),%edi
  42028a:	40 88 7c 02 01       	mov    %dil,0x1(%rdx,%rax,1)
  42028f:	44 0f b6 44 01 01    	movzbl 0x1(%rcx,%rax,1),%r8d
  420295:	44 88 44 02 02       	mov    %r8b,0x2(%rdx,%rax,1)
  42029a:	44 0f b6 64 01 02    	movzbl 0x2(%rcx,%rax,1),%r12d
  4202a0:	44 88 64 02 03       	mov    %r12b,0x3(%rdx,%rax,1)
  4202a5:	0f b6 7c 01 03       	movzbl 0x3(%rcx,%rax,1),%edi
  4202aa:	40 88 7c 02 04       	mov    %dil,0x4(%rdx,%rax,1)
  4202af:	44 0f b6 44 01 04    	movzbl 0x4(%rcx,%rax,1),%r8d
  4202b5:	44 88 44 02 05       	mov    %r8b,0x5(%rdx,%rax,1)
  4202ba:	44 0f b6 64 01 05    	movzbl 0x5(%rcx,%rax,1),%r12d
  4202c0:	44 88 64 02 06       	mov    %r12b,0x6(%rdx,%rax,1)
  4202c5:	0f b6 7c 01 06       	movzbl 0x6(%rcx,%rax,1),%edi
  4202ca:	40 88 7c 02 07       	mov    %dil,0x7(%rdx,%rax,1)
  4202cf:	44 0f b6 44 01 07    	movzbl 0x7(%rcx,%rax,1),%r8d
  4202d5:	44 88 44 02 08       	mov    %r8b,0x8(%rdx,%rax,1)
  4202da:	48 83 c0 08          	add    $0x8,%rax
                                } while (--op);
  4202de:	48 3b 44 24 d8       	cmp    -0x28(%rsp),%rax
  4202e3:	75 a1                	jne    420286 <inflate_fast+0x2c56>
  4202e5:	e9 42 ec ff ff       	jmpq   41ef2c <inflate_fast+0x18fc>
  4202ea:	48 8b 4c 24 b0       	mov    -0x50(%rsp),%rcx
  4202ef:	eb 95                	jmp    420286 <inflate_fast+0x2c56>
                    }
                    else if (write < op) {      /* wrap around window */
                        from += wsize + write - op;
                        op -= write;
                        if (op < len) {         /* some from end of window */
                            len -= op;
  4202f1:	c7 44 24 4c 00 00 00 	movl   $0x0,0x4c(%rsp)
  4202f8:	00 
  4202f9:	e9 20 e1 ff ff       	jmpq   41e41e <inflate_fast+0xdee>
                        }
                    }
                    else {                      /* contiguous in window */
                        from += write - op;
                        if (op < len) {         /* some from window */
                            len -= op;
  4202fe:	c7 44 24 40 00 00 00 	movl   $0x0,0x40(%rsp)
  420305:	00 
  420306:	e9 66 f1 ff ff       	jmpq   41f471 <inflate_fast+0x1e41>
                                PUP(out) = PUP(from);
                            } while (--op);
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
  42030b:	c7 44 24 38 00 00 00 	movl   $0x0,0x38(%rsp)
  420312:	00 
  420313:	44 8b 44 24 38       	mov    0x38(%rsp),%r8d
  420318:	e9 86 e9 ff ff       	jmpq   41eca3 <inflate_fast+0x1673>
                                do {
                                    PUP(out) = PUP(from);
                                } while (--op);
  42031d:	8b 44 24 a4          	mov    -0x5c(%rsp),%eax
                            from = window - OFF;
                            if (write < len) {  /* some from start of window */
                                op = write;
                                len -= op;
                                do {
                                    PUP(out) = PUP(from);
  420321:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
                                } while (--op);
  420326:	89 44 24 30          	mov    %eax,0x30(%rsp)
  42032a:	e9 be e6 ff ff       	jmpq   41e9ed <inflate_fast+0x13bd>
  42032f:	90                   	nop

0000000000420330 <adler32>:
{
    unsigned long sum2;
    unsigned n;

    /* split Adler-32 into component sums */
    sum2 = (adler >> 16) & 0xffff;
  420330:	48 89 f8             	mov    %rdi,%rax
/* ========================================================================= */
uLong ZEXPORT adler32(adler, buf, len)
    uLong adler;
    const Bytef *buf;
    uInt len;
{
  420333:	41 57                	push   %r15
  420335:	41 56                	push   %r14
    unsigned long sum2;
    unsigned n;

    /* split Adler-32 into component sums */
    sum2 = (adler >> 16) & 0xffff;
  420337:	48 c1 e8 10          	shr    $0x10,%rax
/* ========================================================================= */
uLong ZEXPORT adler32(adler, buf, len)
    uLong adler;
    const Bytef *buf;
    uInt len;
{
  42033b:	41 55                	push   %r13
  42033d:	41 54                	push   %r12
  42033f:	55                   	push   %rbp
  420340:	53                   	push   %rbx
    unsigned long sum2;
    unsigned n;

    /* split Adler-32 into component sums */
    sum2 = (adler >> 16) & 0xffff;
  420341:	0f b7 c8             	movzwl %ax,%ecx
    adler &= 0xffff;

    /* in case user likes doing a byte at a time, keep it fast */
    if (len == 1) {
  420344:	83 fa 01             	cmp    $0x1,%edx
/* ========================================================================= */
uLong ZEXPORT adler32(adler, buf, len)
    uLong adler;
    const Bytef *buf;
    uInt len;
{
  420347:	49 89 f2             	mov    %rsi,%r10
    unsigned long sum2;
    unsigned n;

    /* split Adler-32 into component sums */
    sum2 = (adler >> 16) & 0xffff;
    adler &= 0xffff;
  42034a:	44 0f b7 ff          	movzwl %di,%r15d
/* ========================================================================= */
uLong ZEXPORT adler32(adler, buf, len)
    uLong adler;
    const Bytef *buf;
    uInt len;
{
  42034e:	89 54 24 f4          	mov    %edx,-0xc(%rsp)
    unsigned long sum2;
    unsigned n;

    /* split Adler-32 into component sums */
    sum2 = (adler >> 16) & 0xffff;
  420352:	48 89 4c 24 e0       	mov    %rcx,-0x20(%rsp)
    adler &= 0xffff;

    /* in case user likes doing a byte at a time, keep it fast */
    if (len == 1) {
  420357:	0f 84 83 06 00 00    	je     4209e0 <adler32+0x6b0>
            sum2 -= BASE;
        return adler | (sum2 << 16);
    }

    /* initial Adler-32 value (deferred check for len == 1 speed) */
    if (buf == Z_NULL)
  42035d:	48 85 f6             	test   %rsi,%rsi
  420360:	0f 84 bf 06 00 00    	je     420a25 <adler32+0x6f5>
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
  420366:	83 7c 24 f4 0f       	cmpl   $0xf,-0xc(%rsp)
  42036b:	0f 87 04 02 00 00    	ja     420575 <adler32+0x245>
        while (len--) {
  420371:	44 8b 5c 24 f4       	mov    -0xc(%rsp),%r11d
  420376:	45 85 db             	test   %r11d,%r11d
  420379:	0f 84 91 01 00 00    	je     420510 <adler32+0x1e0>
            adler += *buf++;
  42037f:	0f b6 3e             	movzbl (%rsi),%edi
  420382:	49 01 ff             	add    %rdi,%r15
            sum2 += adler;
  420385:	4c 01 7c 24 e0       	add    %r15,-0x20(%rsp)
    if (buf == Z_NULL)
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
        while (len--) {
  42038a:	41 83 fb 01          	cmp    $0x1,%r11d
            adler += *buf++;
            sum2 += adler;
  42038e:	4c 8b 64 24 e0       	mov    -0x20(%rsp),%r12
    if (buf == Z_NULL)
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
        while (len--) {
  420393:	0f 84 77 01 00 00    	je     420510 <adler32+0x1e0>
            adler += *buf++;
  420399:	0f b6 76 01          	movzbl 0x1(%rsi),%esi
            sum2 += adler;
  42039d:	4c 89 e1             	mov    %r12,%rcx
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
        while (len--) {
            adler += *buf++;
  4203a0:	49 01 f7             	add    %rsi,%r15
            sum2 += adler;
  4203a3:	4c 01 f9             	add    %r15,%rcx
    if (buf == Z_NULL)
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
        while (len--) {
  4203a6:	41 83 fb 02          	cmp    $0x2,%r11d
            adler += *buf++;
            sum2 += adler;
  4203aa:	48 89 4c 24 e0       	mov    %rcx,-0x20(%rsp)
    if (buf == Z_NULL)
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
        while (len--) {
  4203af:	0f 84 5b 01 00 00    	je     420510 <adler32+0x1e0>
            adler += *buf++;
  4203b5:	45 0f b6 4a 02       	movzbl 0x2(%r10),%r9d
            sum2 += adler;
  4203ba:	49 89 cd             	mov    %rcx,%r13
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
        while (len--) {
            adler += *buf++;
  4203bd:	4d 01 cf             	add    %r9,%r15
            sum2 += adler;
  4203c0:	4d 01 fd             	add    %r15,%r13
    if (buf == Z_NULL)
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
        while (len--) {
  4203c3:	41 83 fb 03          	cmp    $0x3,%r11d
            adler += *buf++;
            sum2 += adler;
  4203c7:	4c 89 6c 24 e0       	mov    %r13,-0x20(%rsp)
    if (buf == Z_NULL)
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
        while (len--) {
  4203cc:	0f 84 3e 01 00 00    	je     420510 <adler32+0x1e0>
            adler += *buf++;
  4203d2:	45 0f b6 42 03       	movzbl 0x3(%r10),%r8d
            sum2 += adler;
  4203d7:	4c 89 ef             	mov    %r13,%rdi
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
        while (len--) {
            adler += *buf++;
  4203da:	4d 01 c7             	add    %r8,%r15
            sum2 += adler;
  4203dd:	4c 01 ff             	add    %r15,%rdi
    if (buf == Z_NULL)
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
        while (len--) {
  4203e0:	41 83 fb 04          	cmp    $0x4,%r11d
            adler += *buf++;
            sum2 += adler;
  4203e4:	48 89 7c 24 e0       	mov    %rdi,-0x20(%rsp)
    if (buf == Z_NULL)
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
        while (len--) {
  4203e9:	0f 84 21 01 00 00    	je     420510 <adler32+0x1e0>
            adler += *buf++;
  4203ef:	41 0f b6 72 04       	movzbl 0x4(%r10),%esi
            sum2 += adler;
  4203f4:	48 89 f9             	mov    %rdi,%rcx
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
        while (len--) {
            adler += *buf++;
  4203f7:	49 01 f7             	add    %rsi,%r15
            sum2 += adler;
  4203fa:	4c 01 f9             	add    %r15,%rcx
    if (buf == Z_NULL)
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
        while (len--) {
  4203fd:	41 83 fb 05          	cmp    $0x5,%r11d
            adler += *buf++;
            sum2 += adler;
  420401:	48 89 4c 24 e0       	mov    %rcx,-0x20(%rsp)
    if (buf == Z_NULL)
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
        while (len--) {
  420406:	0f 84 04 01 00 00    	je     420510 <adler32+0x1e0>
            adler += *buf++;
  42040c:	45 0f b6 4a 05       	movzbl 0x5(%r10),%r9d
            sum2 += adler;
  420411:	49 89 cd             	mov    %rcx,%r13
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
        while (len--) {
            adler += *buf++;
  420414:	4d 01 cf             	add    %r9,%r15
            sum2 += adler;
  420417:	4d 01 fd             	add    %r15,%r13
    if (buf == Z_NULL)
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
        while (len--) {
  42041a:	41 83 fb 06          	cmp    $0x6,%r11d
            adler += *buf++;
            sum2 += adler;
  42041e:	4c 89 6c 24 e0       	mov    %r13,-0x20(%rsp)
    if (buf == Z_NULL)
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
        while (len--) {
  420423:	0f 84 e7 00 00 00    	je     420510 <adler32+0x1e0>
            adler += *buf++;
  420429:	45 0f b6 42 06       	movzbl 0x6(%r10),%r8d
            sum2 += adler;
  42042e:	4c 89 ef             	mov    %r13,%rdi
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
        while (len--) {
            adler += *buf++;
  420431:	4d 01 c7             	add    %r8,%r15
            sum2 += adler;
  420434:	4c 01 ff             	add    %r15,%rdi
    if (buf == Z_NULL)
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
        while (len--) {
  420437:	41 83 fb 07          	cmp    $0x7,%r11d
            adler += *buf++;
            sum2 += adler;
  42043b:	48 89 7c 24 e0       	mov    %rdi,-0x20(%rsp)
    if (buf == Z_NULL)
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
        while (len--) {
  420440:	0f 84 ca 00 00 00    	je     420510 <adler32+0x1e0>
            adler += *buf++;
  420446:	41 0f b6 72 07       	movzbl 0x7(%r10),%esi
            sum2 += adler;
  42044b:	48 89 f9             	mov    %rdi,%rcx
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
        while (len--) {
            adler += *buf++;
  42044e:	49 01 f7             	add    %rsi,%r15
            sum2 += adler;
  420451:	4c 01 f9             	add    %r15,%rcx
    if (buf == Z_NULL)
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
        while (len--) {
  420454:	41 83 fb 08          	cmp    $0x8,%r11d
            adler += *buf++;
            sum2 += adler;
  420458:	48 89 4c 24 e0       	mov    %rcx,-0x20(%rsp)
    if (buf == Z_NULL)
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
        while (len--) {
  42045d:	0f 84 ad 00 00 00    	je     420510 <adler32+0x1e0>
            adler += *buf++;
  420463:	45 0f b6 4a 08       	movzbl 0x8(%r10),%r9d
            sum2 += adler;
  420468:	49 89 cd             	mov    %rcx,%r13
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
        while (len--) {
            adler += *buf++;
  42046b:	4d 01 cf             	add    %r9,%r15
            sum2 += adler;
  42046e:	4d 01 fd             	add    %r15,%r13
    if (buf == Z_NULL)
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
        while (len--) {
  420471:	41 83 fb 09          	cmp    $0x9,%r11d
            adler += *buf++;
            sum2 += adler;
  420475:	4c 89 6c 24 e0       	mov    %r13,-0x20(%rsp)
    if (buf == Z_NULL)
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
        while (len--) {
  42047a:	0f 84 90 00 00 00    	je     420510 <adler32+0x1e0>
            adler += *buf++;
  420480:	45 0f b6 42 09       	movzbl 0x9(%r10),%r8d
            sum2 += adler;
  420485:	4c 89 ef             	mov    %r13,%rdi
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
        while (len--) {
            adler += *buf++;
  420488:	4d 01 c7             	add    %r8,%r15
            sum2 += adler;
  42048b:	4c 01 ff             	add    %r15,%rdi
    if (buf == Z_NULL)
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
        while (len--) {
  42048e:	41 83 fb 0a          	cmp    $0xa,%r11d
            adler += *buf++;
            sum2 += adler;
  420492:	48 89 7c 24 e0       	mov    %rdi,-0x20(%rsp)
    if (buf == Z_NULL)
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
        while (len--) {
  420497:	74 77                	je     420510 <adler32+0x1e0>
            adler += *buf++;
  420499:	41 0f b6 72 0a       	movzbl 0xa(%r10),%esi
            sum2 += adler;
  42049e:	48 89 f9             	mov    %rdi,%rcx
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
        while (len--) {
            adler += *buf++;
  4204a1:	49 01 f7             	add    %rsi,%r15
            sum2 += adler;
  4204a4:	4c 01 f9             	add    %r15,%rcx
    if (buf == Z_NULL)
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
        while (len--) {
  4204a7:	41 83 fb 0b          	cmp    $0xb,%r11d
            adler += *buf++;
            sum2 += adler;
  4204ab:	48 89 4c 24 e0       	mov    %rcx,-0x20(%rsp)
    if (buf == Z_NULL)
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
        while (len--) {
  4204b0:	74 5e                	je     420510 <adler32+0x1e0>
            adler += *buf++;
  4204b2:	45 0f b6 4a 0b       	movzbl 0xb(%r10),%r9d
            sum2 += adler;
  4204b7:	49 89 cd             	mov    %rcx,%r13
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
        while (len--) {
            adler += *buf++;
  4204ba:	4d 01 cf             	add    %r9,%r15
            sum2 += adler;
  4204bd:	4d 01 fd             	add    %r15,%r13
    if (buf == Z_NULL)
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
        while (len--) {
  4204c0:	41 83 fb 0c          	cmp    $0xc,%r11d
            adler += *buf++;
            sum2 += adler;
  4204c4:	4c 89 6c 24 e0       	mov    %r13,-0x20(%rsp)
    if (buf == Z_NULL)
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
        while (len--) {
  4204c9:	74 45                	je     420510 <adler32+0x1e0>
            adler += *buf++;
  4204cb:	45 0f b6 42 0c       	movzbl 0xc(%r10),%r8d
            sum2 += adler;
  4204d0:	4c 89 ef             	mov    %r13,%rdi
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
        while (len--) {
            adler += *buf++;
  4204d3:	4d 01 c7             	add    %r8,%r15
            sum2 += adler;
  4204d6:	4c 01 ff             	add    %r15,%rdi
    if (buf == Z_NULL)
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
        while (len--) {
  4204d9:	41 83 fb 0d          	cmp    $0xd,%r11d
            adler += *buf++;
            sum2 += adler;
  4204dd:	48 89 7c 24 e0       	mov    %rdi,-0x20(%rsp)
    if (buf == Z_NULL)
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
        while (len--) {
  4204e2:	74 2c                	je     420510 <adler32+0x1e0>
            adler += *buf++;
  4204e4:	41 0f b6 72 0d       	movzbl 0xd(%r10),%esi
            sum2 += adler;
  4204e9:	48 89 f9             	mov    %rdi,%rcx
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
        while (len--) {
            adler += *buf++;
  4204ec:	49 01 f7             	add    %rsi,%r15
            sum2 += adler;
  4204ef:	4c 01 f9             	add    %r15,%rcx
    if (buf == Z_NULL)
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
        while (len--) {
  4204f2:	41 83 fb 0e          	cmp    $0xe,%r11d
            adler += *buf++;
            sum2 += adler;
  4204f6:	48 89 4c 24 e0       	mov    %rcx,-0x20(%rsp)
    if (buf == Z_NULL)
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
        while (len--) {
  4204fb:	74 13                	je     420510 <adler32+0x1e0>
            adler += *buf++;
  4204fd:	45 0f b6 52 0e       	movzbl 0xe(%r10),%r10d
            sum2 += adler;
  420502:	48 89 c8             	mov    %rcx,%rax
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
        while (len--) {
            adler += *buf++;
  420505:	4d 01 d7             	add    %r10,%r15
            sum2 += adler;
  420508:	4c 01 f8             	add    %r15,%rax
  42050b:	48 89 44 24 e0       	mov    %rax,-0x20(%rsp)
        }
        if (adler >= BASE)
            adler -= BASE;
        MOD4(sum2);             /* only added so many BASE's */
  420510:	48 8b 44 24 e0       	mov    -0x20(%rsp),%rax
        while (len--) {
            adler += *buf++;
            sum2 += adler;
        }
        if (adler >= BASE)
            adler -= BASE;
  420515:	4d 8d 8f 0f 00 ff ff 	lea    -0xfff1(%r15),%r9
  42051c:	49 81 ff f1 ff 00 00 	cmp    $0xfff1,%r15
        MOD4(sum2);             /* only added so many BASE's */
  420523:	49 bd cd c5 2f 0d e1 	movabs $0xf00e10d2fc5cd,%r13
  42052a:	00 0f 00 
  42052d:	4c 8b 74 24 e0       	mov    -0x20(%rsp),%r14
        while (len--) {
            adler += *buf++;
            sum2 += adler;
        }
        if (adler >= BASE)
            adler -= BASE;
  420532:	4d 0f 43 f9          	cmovae %r9,%r15
        MOD4(sum2);             /* only added so many BASE's */
  420536:	49 f7 e5             	mul    %r13
  420539:	4c 89 f5             	mov    %r14,%rbp
  42053c:	4c 89 f0             	mov    %r14,%rax
  42053f:	48 29 d5             	sub    %rdx,%rbp
  420542:	48 d1 ed             	shr    %rbp
  420545:	48 01 ea             	add    %rbp,%rdx
  420548:	48 c1 ea 0f          	shr    $0xf,%rdx
  42054c:	49 89 d0             	mov    %rdx,%r8
  42054f:	48 89 d7             	mov    %rdx,%rdi
  420552:	49 c1 e0 04          	shl    $0x4,%r8
  420556:	48 c1 e7 10          	shl    $0x10,%rdi
  42055a:	4c 29 c7             	sub    %r8,%rdi
  42055d:	48 01 fa             	add    %rdi,%rdx
  420560:	48 29 d0             	sub    %rdx,%rax
        return adler | (sum2 << 16);
  420563:	48 c1 e0 10          	shl    $0x10,%rax
  420567:	4c 09 f8             	or     %r15,%rax
        MOD(sum2);
    }

    /* return recombined sums */
    return adler | (sum2 << 16);
}
  42056a:	5b                   	pop    %rbx
  42056b:	5d                   	pop    %rbp
  42056c:	41 5c                	pop    %r12
  42056e:	41 5d                	pop    %r13
  420570:	41 5e                	pop    %r14
  420572:	41 5f                	pop    %r15
  420574:	c3                   	retq   
        MOD4(sum2);             /* only added so many BASE's */
        return adler | (sum2 << 16);
    }

    /* do length NMAX blocks -- requires just one modulo operation */
    while (len >= NMAX) {
  420575:	81 7c 24 f4 af 15 00 	cmpl   $0x15af,-0xc(%rsp)
  42057c:	00 
  42057d:	49 89 f3             	mov    %rsi,%r11
  420580:	0f 86 a9 04 00 00    	jbe    420a2f <adler32+0x6ff>
        len -= NMAX;
  420586:	81 6c 24 f4 b0 15 00 	subl   $0x15b0,-0xc(%rsp)
  42058d:	00 
  42058e:	49 8d 9b b0 15 00 00 	lea    0x15b0(%r11),%rbx
  420595:	48 89 5c 24 e8       	mov    %rbx,-0x18(%rsp)
  42059a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        n = NMAX / 16;          /* NMAX is divisible by 16 */
        do {
            DO16(buf);          /* 16 sums unrolled */
  4205a0:	45 0f b6 2b          	movzbl (%r11),%r13d
            buf += 16;
  4205a4:	49 83 c3 10          	add    $0x10,%r11
    /* do length NMAX blocks -- requires just one modulo operation */
    while (len >= NMAX) {
        len -= NMAX;
        n = NMAX / 16;          /* NMAX is divisible by 16 */
        do {
            DO16(buf);          /* 16 sums unrolled */
  4205a8:	45 0f b6 73 f1       	movzbl -0xf(%r11),%r14d
  4205ad:	45 0f b6 63 f2       	movzbl -0xe(%r11),%r12d
  4205b2:	41 0f b6 6b f3       	movzbl -0xd(%r11),%ebp
  4205b7:	41 0f b6 5b f4       	movzbl -0xc(%r11),%ebx
  4205bc:	45 0f b6 53 f5       	movzbl -0xb(%r11),%r10d
  4205c1:	4d 01 fd             	add    %r15,%r13
  4205c4:	45 0f b6 4b f6       	movzbl -0xa(%r11),%r9d
  4205c9:	45 0f b6 43 f7       	movzbl -0x9(%r11),%r8d
  4205ce:	4d 01 ee             	add    %r13,%r14
  4205d1:	41 0f b6 7b f8       	movzbl -0x8(%r11),%edi
  4205d6:	45 0f b6 7b f9       	movzbl -0x7(%r11),%r15d
  4205db:	4d 01 f4             	add    %r14,%r12
  4205de:	4d 01 f5             	add    %r14,%r13
  4205e1:	41 0f b6 4b fc       	movzbl -0x4(%r11),%ecx
  4205e6:	4c 01 e5             	add    %r12,%rbp
  4205e9:	4d 01 e5             	add    %r12,%r13
  4205ec:	41 0f b6 53 fd       	movzbl -0x3(%r11),%edx
  4205f1:	48 01 eb             	add    %rbp,%rbx
  4205f4:	49 01 ed             	add    %rbp,%r13
  4205f7:	41 0f b6 43 fe       	movzbl -0x2(%r11),%eax
  4205fc:	49 01 da             	add    %rbx,%r10
  4205ff:	49 01 dd             	add    %rbx,%r13
  420602:	4d 01 d1             	add    %r10,%r9
  420605:	4d 01 ea             	add    %r13,%r10
  420608:	4d 01 c8             	add    %r9,%r8
  42060b:	4d 01 d1             	add    %r10,%r9
  42060e:	49 8d 34 38          	lea    (%r8,%rdi,1),%rsi
  420612:	41 0f b6 7b fa       	movzbl -0x6(%r11),%edi
  420617:	4d 01 c8             	add    %r9,%r8
  42061a:	49 01 f7             	add    %rsi,%r15
  42061d:	48 89 74 24 d0       	mov    %rsi,-0x30(%rsp)
  420622:	4c 03 44 24 d0       	add    -0x30(%rsp),%r8
  420627:	41 0f b6 73 fb       	movzbl -0x5(%r11),%esi
  42062c:	4c 89 7c 24 d8       	mov    %r15,-0x28(%rsp)
  420631:	4c 03 44 24 d8       	add    -0x28(%rsp),%r8
  420636:	4c 01 ff             	add    %r15,%rdi
  420639:	45 0f b6 7b ff       	movzbl -0x1(%r11),%r15d
  42063e:	48 01 fe             	add    %rdi,%rsi
  420641:	4c 01 c7             	add    %r8,%rdi
  420644:	48 01 f1             	add    %rsi,%rcx
  420647:	48 01 fe             	add    %rdi,%rsi
  42064a:	48 01 ca             	add    %rcx,%rdx
  42064d:	48 01 f1             	add    %rsi,%rcx
  420650:	48 01 d0             	add    %rdx,%rax
  420653:	48 01 ca             	add    %rcx,%rdx
  420656:	49 01 c7             	add    %rax,%r15
  420659:	48 01 d0             	add    %rdx,%rax
  42065c:	4c 01 f8             	add    %r15,%rax
  42065f:	48 01 44 24 e0       	add    %rax,-0x20(%rsp)
            buf += 16;
        } while (--n);
  420664:	4c 3b 5c 24 e8       	cmp    -0x18(%rsp),%r11
  420669:	0f 85 31 ff ff ff    	jne    4205a0 <adler32+0x270>
        MOD(adler);
  42066f:	48 b8 cd c5 2f 0d e1 	movabs $0xf00e10d2fc5cd,%rax
  420676:	00 0f 00 
        MOD(sum2);
  420679:	4c 8b 64 24 e0       	mov    -0x20(%rsp),%r12
        n = NMAX / 16;          /* NMAX is divisible by 16 */
        do {
            DO16(buf);          /* 16 sums unrolled */
            buf += 16;
        } while (--n);
        MOD(adler);
  42067e:	4d 89 fb             	mov    %r15,%r11
  420681:	49 f7 e7             	mul    %r15
        MOD(sum2);
  420684:	48 b8 cd c5 2f 0d e1 	movabs $0xf00e10d2fc5cd,%rax
  42068b:	00 0f 00 
  42068e:	4c 89 e5             	mov    %r12,%rbp
        n = NMAX / 16;          /* NMAX is divisible by 16 */
        do {
            DO16(buf);          /* 16 sums unrolled */
            buf += 16;
        } while (--n);
        MOD(adler);
  420691:	49 29 d3             	sub    %rdx,%r11
  420694:	49 d1 eb             	shr    %r11
  420697:	49 01 d3             	add    %rdx,%r11
        MOD(sum2);
  42069a:	49 f7 e4             	mul    %r12
        n = NMAX / 16;          /* NMAX is divisible by 16 */
        do {
            DO16(buf);          /* 16 sums unrolled */
            buf += 16;
        } while (--n);
        MOD(adler);
  42069d:	49 c1 eb 0f          	shr    $0xf,%r11
  4206a1:	4d 89 dd             	mov    %r11,%r13
  4206a4:	4d 89 de             	mov    %r11,%r14
  4206a7:	49 c1 e5 04          	shl    $0x4,%r13
  4206ab:	49 c1 e6 10          	shl    $0x10,%r14
  4206af:	4d 29 ee             	sub    %r13,%r14
        MOD(sum2);
  4206b2:	48 29 d5             	sub    %rdx,%rbp
        n = NMAX / 16;          /* NMAX is divisible by 16 */
        do {
            DO16(buf);          /* 16 sums unrolled */
            buf += 16;
        } while (--n);
        MOD(adler);
  4206b5:	4d 01 f3             	add    %r14,%r11
        MOD(sum2);
  4206b8:	48 d1 ed             	shr    %rbp
        n = NMAX / 16;          /* NMAX is divisible by 16 */
        do {
            DO16(buf);          /* 16 sums unrolled */
            buf += 16;
        } while (--n);
        MOD(adler);
  4206bb:	4d 29 df             	sub    %r11,%r15
  4206be:	4c 8b 5c 24 e8       	mov    -0x18(%rsp),%r11
        MOD(sum2);
  4206c3:	48 01 d5             	add    %rdx,%rbp
  4206c6:	48 c1 ed 0f          	shr    $0xf,%rbp
  4206ca:	48 89 eb             	mov    %rbp,%rbx
  4206cd:	49 89 ea             	mov    %rbp,%r10
  4206d0:	48 c1 e3 04          	shl    $0x4,%rbx
  4206d4:	49 c1 e2 10          	shl    $0x10,%r10
  4206d8:	49 29 da             	sub    %rbx,%r10
  4206db:	4c 01 d5             	add    %r10,%rbp
  4206de:	49 29 ec             	sub    %rbp,%r12
        MOD4(sum2);             /* only added so many BASE's */
        return adler | (sum2 << 16);
    }

    /* do length NMAX blocks -- requires just one modulo operation */
    while (len >= NMAX) {
  4206e1:	81 7c 24 f4 af 15 00 	cmpl   $0x15af,-0xc(%rsp)
  4206e8:	00 
        do {
            DO16(buf);          /* 16 sums unrolled */
            buf += 16;
        } while (--n);
        MOD(adler);
        MOD(sum2);
  4206e9:	4c 89 64 24 e0       	mov    %r12,-0x20(%rsp)
        MOD4(sum2);             /* only added so many BASE's */
        return adler | (sum2 << 16);
    }

    /* do length NMAX blocks -- requires just one modulo operation */
    while (len >= NMAX) {
  4206ee:	0f 87 92 fe ff ff    	ja     420586 <adler32+0x256>
        MOD(adler);
        MOD(sum2);
    }

    /* do remaining bytes (less than NMAX, still just one modulo) */
    if (len) {                  /* avoid modulos if none remaining */
  4206f4:	44 8b 4c 24 f4       	mov    -0xc(%rsp),%r9d
  4206f9:	45 85 c9             	test   %r9d,%r9d
  4206fc:	0f 84 c7 02 00 00    	je     4209c9 <adler32+0x699>
        while (len >= 16) {
  420702:	83 7c 24 f4 0f       	cmpl   $0xf,-0xc(%rsp)
  420707:	0f 86 2c 03 00 00    	jbe    420a39 <adler32+0x709>
        MOD4(sum2);             /* only added so many BASE's */
        return adler | (sum2 << 16);
    }

    /* do length NMAX blocks -- requires just one modulo operation */
    while (len >= NMAX) {
  42070d:	8b 7c 24 f4          	mov    -0xc(%rsp),%edi
  420711:	4c 8b 4c 24 e8       	mov    -0x18(%rsp),%r9
  420716:	89 7c 24 d0          	mov    %edi,-0x30(%rsp)

    /* do remaining bytes (less than NMAX, still just one modulo) */
    if (len) {                  /* avoid modulos if none remaining */
        while (len >= 16) {
            len -= 16;
            DO16(buf);
  42071a:	45 0f b6 29          	movzbl (%r9),%r13d
  42071e:	45 0f b6 71 01       	movzbl 0x1(%r9),%r14d
            buf += 16;
  420723:	49 83 c1 10          	add    $0x10,%r9

    /* do remaining bytes (less than NMAX, still just one modulo) */
    if (len) {                  /* avoid modulos if none remaining */
        while (len >= 16) {
            len -= 16;
            DO16(buf);
  420727:	45 0f b6 61 f2       	movzbl -0xe(%r9),%r12d
  42072c:	41 0f b6 69 f3       	movzbl -0xd(%r9),%ebp
  420731:	41 0f b6 59 f4       	movzbl -0xc(%r9),%ebx
  420736:	45 0f b6 59 f5       	movzbl -0xb(%r9),%r11d
  42073b:	45 0f b6 51 f6       	movzbl -0xa(%r9),%r10d
  420740:	45 0f b6 41 f7       	movzbl -0x9(%r9),%r8d
  420745:	4d 01 fd             	add    %r15,%r13
  420748:	41 0f b6 79 f8       	movzbl -0x8(%r9),%edi
  42074d:	41 0f b6 71 f9       	movzbl -0x7(%r9),%esi
  420752:	4d 01 ee             	add    %r13,%r14
  420755:	41 0f b6 49 fa       	movzbl -0x6(%r9),%ecx
  42075a:	45 0f b6 79 fb       	movzbl -0x5(%r9),%r15d
  42075f:	4d 01 f4             	add    %r14,%r12
  420762:	4d 01 f5             	add    %r14,%r13
  420765:	41 0f b6 51 fc       	movzbl -0x4(%r9),%edx
  42076a:	4c 01 e5             	add    %r12,%rbp
  42076d:	4d 01 e5             	add    %r12,%r13
    }

    /* do remaining bytes (less than NMAX, still just one modulo) */
    if (len) {                  /* avoid modulos if none remaining */
        while (len >= 16) {
            len -= 16;
  420770:	83 6c 24 d0 10       	subl   $0x10,-0x30(%rsp)
            DO16(buf);
  420775:	48 01 eb             	add    %rbp,%rbx
  420778:	49 01 ed             	add    %rbp,%r13
  42077b:	49 01 db             	add    %rbx,%r11
  42077e:	49 01 dd             	add    %rbx,%r13
  420781:	4d 01 da             	add    %r11,%r10
  420784:	4d 01 eb             	add    %r13,%r11
  420787:	4d 01 d0             	add    %r10,%r8
  42078a:	4d 01 da             	add    %r11,%r10
  42078d:	4c 01 c7             	add    %r8,%rdi
  420790:	4d 01 d0             	add    %r10,%r8
  420793:	48 01 fe             	add    %rdi,%rsi
  420796:	4c 01 c7             	add    %r8,%rdi
  420799:	48 01 f1             	add    %rsi,%rcx
  42079c:	48 01 fe             	add    %rdi,%rsi
  42079f:	4a 8d 04 39          	lea    (%rcx,%r15,1),%rax
  4207a3:	48 01 f1             	add    %rsi,%rcx
  4207a6:	49 89 c7             	mov    %rax,%r15
  4207a9:	48 89 d0             	mov    %rdx,%rax
  4207ac:	41 0f b6 51 fd       	movzbl -0x3(%r9),%edx
  4207b1:	4c 01 f8             	add    %r15,%rax
  4207b4:	4c 89 7c 24 d8       	mov    %r15,-0x28(%rsp)
  4207b9:	48 03 4c 24 d8       	add    -0x28(%rsp),%rcx
  4207be:	48 89 44 24 f8       	mov    %rax,-0x8(%rsp)
  4207c3:	48 03 4c 24 f8       	add    -0x8(%rsp),%rcx
  4207c8:	45 0f b6 79 ff       	movzbl -0x1(%r9),%r15d
  4207cd:	48 01 c2             	add    %rax,%rdx
  4207d0:	41 0f b6 41 fe       	movzbl -0x2(%r9),%eax
  4207d5:	48 01 d0             	add    %rdx,%rax
  4207d8:	48 01 ca             	add    %rcx,%rdx
  4207db:	49 01 c7             	add    %rax,%r15
  4207de:	48 01 d0             	add    %rdx,%rax
  4207e1:	4c 01 f8             	add    %r15,%rax
  4207e4:	48 01 44 24 e0       	add    %rax,-0x20(%rsp)
        MOD(sum2);
    }

    /* do remaining bytes (less than NMAX, still just one modulo) */
    if (len) {                  /* avoid modulos if none remaining */
        while (len >= 16) {
  4207e9:	83 7c 24 d0 0f       	cmpl   $0xf,-0x30(%rsp)
  4207ee:	0f 87 26 ff ff ff    	ja     42071a <adler32+0x3ea>
  4207f4:	44 8b 4c 24 f4       	mov    -0xc(%rsp),%r9d
  4207f9:	45 89 cd             	mov    %r9d,%r13d
  4207fc:	41 83 e9 10          	sub    $0x10,%r9d
  420800:	41 c1 e9 04          	shr    $0x4,%r9d
  420804:	41 83 e5 0f          	and    $0xf,%r13d
  420808:	49 83 c1 01          	add    $0x1,%r9
            len -= 16;
            DO16(buf);
            buf += 16;
        }
        while (len--) {
  42080c:	45 8d 45 ff          	lea    -0x1(%r13),%r8d
  420810:	49 c1 e1 04          	shl    $0x4,%r9
  420814:	4c 01 4c 24 e8       	add    %r9,-0x18(%rsp)
  420819:	45 85 ed             	test   %r13d,%r13d
  42081c:	0f 84 37 01 00 00    	je     420959 <adler32+0x629>
  420822:	4c 8b 74 24 e8       	mov    -0x18(%rsp),%r14
            adler += *buf++;
  420827:	49 8d 5e 01          	lea    0x1(%r14),%rbx
  42082b:	0f b6 6b ff          	movzbl -0x1(%rbx),%ebp
  42082f:	4f 8d 64 06 01       	lea    0x1(%r14,%r8,1),%r12
  420834:	41 83 e0 07          	and    $0x7,%r8d
  420838:	49 01 ef             	add    %rbp,%r15
            sum2 += adler;
  42083b:	4c 01 7c 24 e0       	add    %r15,-0x20(%rsp)
        while (len >= 16) {
            len -= 16;
            DO16(buf);
            buf += 16;
        }
        while (len--) {
  420840:	4c 39 e3             	cmp    %r12,%rbx
  420843:	0f 84 10 01 00 00    	je     420959 <adler32+0x629>
  420849:	4d 85 c0             	test   %r8,%r8
  42084c:	0f 84 a0 00 00 00    	je     4208f2 <adler32+0x5c2>
  420852:	49 83 f8 01          	cmp    $0x1,%r8
  420856:	0f 84 81 00 00 00    	je     4208dd <adler32+0x5ad>
  42085c:	49 83 f8 02          	cmp    $0x2,%r8
  420860:	74 6c                	je     4208ce <adler32+0x59e>
  420862:	49 83 f8 03          	cmp    $0x3,%r8
  420866:	74 57                	je     4208bf <adler32+0x58f>
  420868:	49 83 f8 04          	cmp    $0x4,%r8
  42086c:	74 42                	je     4208b0 <adler32+0x580>
  42086e:	49 83 f8 05          	cmp    $0x5,%r8
  420872:	74 2c                	je     4208a0 <adler32+0x570>
  420874:	49 83 f8 06          	cmp    $0x6,%r8
  420878:	74 16                	je     420890 <adler32+0x560>
            adler += *buf++;
  42087a:	48 8b 5c 24 e8       	mov    -0x18(%rsp),%rbx
  42087f:	44 0f b6 5b 01       	movzbl 0x1(%rbx),%r11d
  420884:	48 83 c3 02          	add    $0x2,%rbx
  420888:	4d 01 df             	add    %r11,%r15
            sum2 += adler;
  42088b:	4c 01 7c 24 e0       	add    %r15,-0x20(%rsp)
            len -= 16;
            DO16(buf);
            buf += 16;
        }
        while (len--) {
            adler += *buf++;
  420890:	44 0f b6 13          	movzbl (%rbx),%r10d
  420894:	48 83 c3 01          	add    $0x1,%rbx
  420898:	4d 01 d7             	add    %r10,%r15
            sum2 += adler;
  42089b:	4c 01 7c 24 e0       	add    %r15,-0x20(%rsp)
            len -= 16;
            DO16(buf);
            buf += 16;
        }
        while (len--) {
            adler += *buf++;
  4208a0:	44 0f b6 03          	movzbl (%rbx),%r8d
  4208a4:	48 83 c3 01          	add    $0x1,%rbx
  4208a8:	4d 01 c7             	add    %r8,%r15
            sum2 += adler;
  4208ab:	4c 01 7c 24 e0       	add    %r15,-0x20(%rsp)
            len -= 16;
            DO16(buf);
            buf += 16;
        }
        while (len--) {
            adler += *buf++;
  4208b0:	0f b6 3b             	movzbl (%rbx),%edi
  4208b3:	48 83 c3 01          	add    $0x1,%rbx
  4208b7:	49 01 ff             	add    %rdi,%r15
            sum2 += adler;
  4208ba:	4c 01 7c 24 e0       	add    %r15,-0x20(%rsp)
            len -= 16;
            DO16(buf);
            buf += 16;
        }
        while (len--) {
            adler += *buf++;
  4208bf:	0f b6 33             	movzbl (%rbx),%esi
  4208c2:	48 83 c3 01          	add    $0x1,%rbx
  4208c6:	49 01 f7             	add    %rsi,%r15
            sum2 += adler;
  4208c9:	4c 01 7c 24 e0       	add    %r15,-0x20(%rsp)
            len -= 16;
            DO16(buf);
            buf += 16;
        }
        while (len--) {
            adler += *buf++;
  4208ce:	0f b6 0b             	movzbl (%rbx),%ecx
  4208d1:	48 83 c3 01          	add    $0x1,%rbx
  4208d5:	49 01 cf             	add    %rcx,%r15
            sum2 += adler;
  4208d8:	4c 01 7c 24 e0       	add    %r15,-0x20(%rsp)
            len -= 16;
            DO16(buf);
            buf += 16;
        }
        while (len--) {
            adler += *buf++;
  4208dd:	48 83 c3 01          	add    $0x1,%rbx
  4208e1:	0f b6 53 ff          	movzbl -0x1(%rbx),%edx
  4208e5:	49 01 d7             	add    %rdx,%r15
            sum2 += adler;
  4208e8:	4c 01 7c 24 e0       	add    %r15,-0x20(%rsp)
        while (len >= 16) {
            len -= 16;
            DO16(buf);
            buf += 16;
        }
        while (len--) {
  4208ed:	4c 39 e3             	cmp    %r12,%rbx
  4208f0:	74 67                	je     420959 <adler32+0x629>
            adler += *buf++;
  4208f2:	0f b6 03             	movzbl (%rbx),%eax
  4208f5:	44 0f b6 6b 01       	movzbl 0x1(%rbx),%r13d
  4208fa:	48 83 c3 08          	add    $0x8,%rbx
  4208fe:	44 0f b6 73 fa       	movzbl -0x6(%rbx),%r14d
            sum2 += adler;
  420903:	4c 8b 4c 24 e0       	mov    -0x20(%rsp),%r9
            len -= 16;
            DO16(buf);
            buf += 16;
        }
        while (len--) {
            adler += *buf++;
  420908:	0f b6 6b fb          	movzbl -0x5(%rbx),%ebp
  42090c:	44 0f b6 5b fc       	movzbl -0x4(%rbx),%r11d
  420911:	49 01 c7             	add    %rax,%r15
  420914:	44 0f b6 53 fd       	movzbl -0x3(%rbx),%r10d
  420919:	44 0f b6 43 fe       	movzbl -0x2(%rbx),%r8d
            sum2 += adler;
  42091e:	4d 01 f9             	add    %r15,%r9
            len -= 16;
            DO16(buf);
            buf += 16;
        }
        while (len--) {
            adler += *buf++;
  420921:	4d 01 ef             	add    %r13,%r15
  420924:	0f b6 7b ff          	movzbl -0x1(%rbx),%edi
            sum2 += adler;
  420928:	4d 01 f9             	add    %r15,%r9
            len -= 16;
            DO16(buf);
            buf += 16;
        }
        while (len--) {
            adler += *buf++;
  42092b:	4d 01 f7             	add    %r14,%r15
            sum2 += adler;
  42092e:	4d 01 f9             	add    %r15,%r9
            len -= 16;
            DO16(buf);
            buf += 16;
        }
        while (len--) {
            adler += *buf++;
  420931:	49 01 ef             	add    %rbp,%r15
            sum2 += adler;
  420934:	4d 01 f9             	add    %r15,%r9
            len -= 16;
            DO16(buf);
            buf += 16;
        }
        while (len--) {
            adler += *buf++;
  420937:	4d 01 df             	add    %r11,%r15
            sum2 += adler;
  42093a:	4d 01 f9             	add    %r15,%r9
            len -= 16;
            DO16(buf);
            buf += 16;
        }
        while (len--) {
            adler += *buf++;
  42093d:	4d 01 d7             	add    %r10,%r15
            sum2 += adler;
  420940:	4d 01 f9             	add    %r15,%r9
            len -= 16;
            DO16(buf);
            buf += 16;
        }
        while (len--) {
            adler += *buf++;
  420943:	4d 01 c7             	add    %r8,%r15
            sum2 += adler;
  420946:	4d 01 f9             	add    %r15,%r9
            len -= 16;
            DO16(buf);
            buf += 16;
        }
        while (len--) {
            adler += *buf++;
  420949:	49 01 ff             	add    %rdi,%r15
            sum2 += adler;
  42094c:	4d 01 f9             	add    %r15,%r9
        while (len >= 16) {
            len -= 16;
            DO16(buf);
            buf += 16;
        }
        while (len--) {
  42094f:	4c 39 e3             	cmp    %r12,%rbx
            adler += *buf++;
            sum2 += adler;
  420952:	4c 89 4c 24 e0       	mov    %r9,-0x20(%rsp)
        while (len >= 16) {
            len -= 16;
            DO16(buf);
            buf += 16;
        }
        while (len--) {
  420957:	75 99                	jne    4208f2 <adler32+0x5c2>
            adler += *buf++;
            sum2 += adler;
        }
        MOD(adler);
  420959:	4c 89 f8             	mov    %r15,%rax
  42095c:	49 bc cd c5 2f 0d e1 	movabs $0xf00e10d2fc5cd,%r12
  420963:	00 0f 00 
  420966:	4c 89 fb             	mov    %r15,%rbx
  420969:	49 f7 e4             	mul    %r12
        MOD(sum2);
  42096c:	48 8b 44 24 e0       	mov    -0x20(%rsp),%rax
  420971:	4c 8b 4c 24 e0       	mov    -0x20(%rsp),%r9
  420976:	4d 89 cd             	mov    %r9,%r13
        }
        while (len--) {
            adler += *buf++;
            sum2 += adler;
        }
        MOD(adler);
  420979:	48 29 d3             	sub    %rdx,%rbx
  42097c:	48 d1 eb             	shr    %rbx
  42097f:	48 01 d3             	add    %rdx,%rbx
        MOD(sum2);
  420982:	49 f7 e4             	mul    %r12
        }
        while (len--) {
            adler += *buf++;
            sum2 += adler;
        }
        MOD(adler);
  420985:	48 c1 eb 0f          	shr    $0xf,%rbx
  420989:	48 89 de             	mov    %rbx,%rsi
  42098c:	48 89 d9             	mov    %rbx,%rcx
  42098f:	48 c1 e6 04          	shl    $0x4,%rsi
  420993:	48 c1 e1 10          	shl    $0x10,%rcx
  420997:	48 29 f1             	sub    %rsi,%rcx
        MOD(sum2);
  42099a:	49 29 d5             	sub    %rdx,%r13
        }
        while (len--) {
            adler += *buf++;
            sum2 += adler;
        }
        MOD(adler);
  42099d:	48 01 cb             	add    %rcx,%rbx
        MOD(sum2);
  4209a0:	49 d1 ed             	shr    %r13
        }
        while (len--) {
            adler += *buf++;
            sum2 += adler;
        }
        MOD(adler);
  4209a3:	49 29 df             	sub    %rbx,%r15
        MOD(sum2);
  4209a6:	49 01 d5             	add    %rdx,%r13
  4209a9:	49 c1 ed 0f          	shr    $0xf,%r13
  4209ad:	4d 89 ee             	mov    %r13,%r14
  4209b0:	4c 89 ed             	mov    %r13,%rbp
  4209b3:	49 c1 e6 04          	shl    $0x4,%r14
  4209b7:	48 c1 e5 10          	shl    $0x10,%rbp
  4209bb:	4c 29 f5             	sub    %r14,%rbp
  4209be:	49 01 ed             	add    %rbp,%r13
  4209c1:	4d 29 e9             	sub    %r13,%r9
  4209c4:	4c 89 4c 24 e0       	mov    %r9,-0x20(%rsp)
    }

    /* return recombined sums */
    return adler | (sum2 << 16);
  4209c9:	48 8b 44 24 e0       	mov    -0x20(%rsp),%rax
}
  4209ce:	5b                   	pop    %rbx
  4209cf:	5d                   	pop    %rbp
        MOD(adler);
        MOD(sum2);
    }

    /* return recombined sums */
    return adler | (sum2 << 16);
  4209d0:	48 c1 e0 10          	shl    $0x10,%rax
}
  4209d4:	41 5c                	pop    %r12
        MOD(adler);
        MOD(sum2);
    }

    /* return recombined sums */
    return adler | (sum2 << 16);
  4209d6:	4c 09 f8             	or     %r15,%rax
}
  4209d9:	41 5d                	pop    %r13
  4209db:	41 5e                	pop    %r14
  4209dd:	41 5f                	pop    %r15
  4209df:	c3                   	retq   
    sum2 = (adler >> 16) & 0xffff;
    adler &= 0xffff;

    /* in case user likes doing a byte at a time, keep it fast */
    if (len == 1) {
        adler += buf[0];
  4209e0:	44 0f b6 26          	movzbl (%rsi),%r12d
  4209e4:	4d 01 e7             	add    %r12,%r15
        if (adler >= BASE)
            adler -= BASE;
  4209e7:	49 8d 87 0f 00 ff ff 	lea    -0xfff1(%r15),%rax
  4209ee:	49 81 ff f1 ff 00 00 	cmp    $0xfff1,%r15
  4209f5:	49 0f 42 c7          	cmovb  %r15,%rax
        sum2 += adler;
  4209f9:	4c 8b 7c 24 e0       	mov    -0x20(%rsp),%r15
  4209fe:	49 01 c7             	add    %rax,%r15
        if (sum2 >= BASE)
            sum2 -= BASE;
  420a01:	49 8d 9f 0f 00 ff ff 	lea    -0xfff1(%r15),%rbx
  420a08:	49 81 ff f1 ff 00 00 	cmp    $0xfff1,%r15
  420a0f:	4c 0f 43 fb          	cmovae %rbx,%r15
        return adler | (sum2 << 16);
  420a13:	49 c1 e7 10          	shl    $0x10,%r15
        MOD(sum2);
    }

    /* return recombined sums */
    return adler | (sum2 << 16);
}
  420a17:	5b                   	pop    %rbx
        if (adler >= BASE)
            adler -= BASE;
        sum2 += adler;
        if (sum2 >= BASE)
            sum2 -= BASE;
        return adler | (sum2 << 16);
  420a18:	4c 09 f8             	or     %r15,%rax
        MOD(sum2);
    }

    /* return recombined sums */
    return adler | (sum2 << 16);
}
  420a1b:	5d                   	pop    %rbp
  420a1c:	41 5c                	pop    %r12
  420a1e:	41 5d                	pop    %r13
  420a20:	41 5e                	pop    %r14
  420a22:	41 5f                	pop    %r15
  420a24:	c3                   	retq   
        return adler | (sum2 << 16);
    }

    /* initial Adler-32 value (deferred check for len == 1 speed) */
    if (buf == Z_NULL)
        return 1L;
  420a25:	b8 01 00 00 00       	mov    $0x1,%eax
  420a2a:	e9 3b fb ff ff       	jmpq   42056a <adler32+0x23a>
        MOD4(sum2);             /* only added so many BASE's */
        return adler | (sum2 << 16);
    }

    /* do length NMAX blocks -- requires just one modulo operation */
    while (len >= NMAX) {
  420a2f:	48 89 74 24 e8       	mov    %rsi,-0x18(%rsp)
  420a34:	e9 d4 fc ff ff       	jmpq   42070d <adler32+0x3dd>
        while (len >= 16) {
            len -= 16;
            DO16(buf);
            buf += 16;
        }
        while (len--) {
  420a39:	44 8b 44 24 f4       	mov    -0xc(%rsp),%r8d
  420a3e:	41 83 e8 01          	sub    $0x1,%r8d
  420a42:	e9 db fd ff ff       	jmpq   420822 <adler32+0x4f2>
  420a47:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  420a4e:	00 00 

0000000000420a50 <adler32_combine>:
    unsigned long sum1;
    unsigned long sum2;
    unsigned rem;

    /* the derivation of this formula is left as an exercise for the reader */
    rem = (unsigned)(len2 % BASE);
  420a50:	49 b8 cd c5 2f 0d e1 	movabs $0xf00e10d2fc5cd,%r8
  420a57:	00 0f 00 
  420a5a:	48 89 d0             	mov    %rdx,%rax
/* ========================================================================= */
uLong ZEXPORT adler32_combine(adler1, adler2, len2)
    uLong adler1;
    uLong adler2;
    z_off_t len2;
{
  420a5d:	49 89 d1             	mov    %rdx,%r9
    unsigned long sum1;
    unsigned long sum2;
    unsigned rem;

    /* the derivation of this formula is left as an exercise for the reader */
    rem = (unsigned)(len2 % BASE);
  420a60:	49 f7 e0             	mul    %r8
  420a63:	4c 89 c9             	mov    %r9,%rcx
  420a66:	4c 89 c8             	mov    %r9,%rax
    sum1 = adler1 & 0xffff;
  420a69:	44 0f b7 cf          	movzwl %di,%r9d
    sum2 = rem * sum1;
    MOD(sum2);
    sum1 += (adler2 & 0xffff) + BASE - 1;
    sum2 += ((adler1 >> 16) & 0xffff) + ((adler2 >> 16) & 0xffff) + BASE - rem;
  420a6d:	48 c1 ef 10          	shr    $0x10,%rdi
  420a71:	0f b7 ff             	movzwl %di,%edi
    unsigned long sum1;
    unsigned long sum2;
    unsigned rem;

    /* the derivation of this formula is left as an exercise for the reader */
    rem = (unsigned)(len2 % BASE);
  420a74:	48 29 d1             	sub    %rdx,%rcx
  420a77:	48 d1 e9             	shr    %rcx
  420a7a:	48 01 d1             	add    %rdx,%rcx
  420a7d:	48 c1 e9 0f          	shr    $0xf,%rcx
  420a81:	49 89 ca             	mov    %rcx,%r10
  420a84:	49 89 cb             	mov    %rcx,%r11
  420a87:	49 c1 e2 04          	shl    $0x4,%r10
  420a8b:	49 c1 e3 10          	shl    $0x10,%r11
  420a8f:	4d 29 d3             	sub    %r10,%r11
    sum1 = adler1 & 0xffff;
    sum2 = rem * sum1;
    MOD(sum2);
    sum1 += (adler2 & 0xffff) + BASE - 1;
  420a92:	44 0f b7 d6          	movzwl %si,%r10d
    sum2 += ((adler1 >> 16) & 0xffff) + ((adler2 >> 16) & 0xffff) + BASE - rem;
  420a96:	48 c1 ee 10          	shr    $0x10,%rsi
    unsigned long sum1;
    unsigned long sum2;
    unsigned rem;

    /* the derivation of this formula is left as an exercise for the reader */
    rem = (unsigned)(len2 % BASE);
  420a9a:	4c 01 d9             	add    %r11,%rcx
    sum1 = adler1 & 0xffff;
    sum2 = rem * sum1;
    MOD(sum2);
    sum1 += (adler2 & 0xffff) + BASE - 1;
    sum2 += ((adler1 >> 16) & 0xffff) + ((adler2 >> 16) & 0xffff) + BASE - rem;
  420a9d:	0f b7 f6             	movzwl %si,%esi
    /* the derivation of this formula is left as an exercise for the reader */
    rem = (unsigned)(len2 % BASE);
    sum1 = adler1 & 0xffff;
    sum2 = rem * sum1;
    MOD(sum2);
    sum1 += (adler2 & 0xffff) + BASE - 1;
  420aa0:	4d 01 ca             	add    %r9,%r10
    unsigned long sum1;
    unsigned long sum2;
    unsigned rem;

    /* the derivation of this formula is left as an exercise for the reader */
    rem = (unsigned)(len2 % BASE);
  420aa3:	48 29 c8             	sub    %rcx,%rax
    sum1 = adler1 & 0xffff;
    sum2 = rem * sum1;
    MOD(sum2);
    sum1 += (adler2 & 0xffff) + BASE - 1;
    sum2 += ((adler1 >> 16) & 0xffff) + ((adler2 >> 16) & 0xffff) + BASE - rem;
  420aa6:	48 01 f7             	add    %rsi,%rdi
    unsigned rem;

    /* the derivation of this formula is left as an exercise for the reader */
    rem = (unsigned)(len2 % BASE);
    sum1 = adler1 & 0xffff;
    sum2 = rem * sum1;
  420aa9:	48 89 c1             	mov    %rax,%rcx
    MOD(sum2);
    sum1 += (adler2 & 0xffff) + BASE - 1;
    sum2 += ((adler1 >> 16) & 0xffff) + ((adler2 >> 16) & 0xffff) + BASE - rem;
  420aac:	49 89 fb             	mov    %rdi,%r11
    unsigned rem;

    /* the derivation of this formula is left as an exercise for the reader */
    rem = (unsigned)(len2 % BASE);
    sum1 = adler1 & 0xffff;
    sum2 = rem * sum1;
  420aaf:	49 0f af c9          	imul   %r9,%rcx
    MOD(sum2);
    sum1 += (adler2 & 0xffff) + BASE - 1;
    sum2 += ((adler1 >> 16) & 0xffff) + ((adler2 >> 16) & 0xffff) + BASE - rem;
  420ab3:	49 29 c3             	sub    %rax,%r11
    /* the derivation of this formula is left as an exercise for the reader */
    rem = (unsigned)(len2 % BASE);
    sum1 = adler1 & 0xffff;
    sum2 = rem * sum1;
    MOD(sum2);
    sum1 += (adler2 & 0xffff) + BASE - 1;
  420ab6:	4d 8d 8a f0 ff 00 00 	lea    0xfff0(%r10),%r9

    /* the derivation of this formula is left as an exercise for the reader */
    rem = (unsigned)(len2 % BASE);
    sum1 = adler1 & 0xffff;
    sum2 = rem * sum1;
    MOD(sum2);
  420abd:	48 89 c8             	mov    %rcx,%rax
  420ac0:	49 f7 e0             	mul    %r8
  420ac3:	49 89 c8             	mov    %rcx,%r8
  420ac6:	49 29 d0             	sub    %rdx,%r8
  420ac9:	49 d1 e8             	shr    %r8
  420acc:	49 01 d0             	add    %rdx,%r8
  420acf:	49 c1 e8 0f          	shr    $0xf,%r8
  420ad3:	4c 89 c7             	mov    %r8,%rdi
  420ad6:	4c 89 c6             	mov    %r8,%rsi
  420ad9:	48 c1 e7 04          	shl    $0x4,%rdi
  420add:	48 c1 e6 10          	shl    $0x10,%rsi
  420ae1:	48 29 fe             	sub    %rdi,%rsi
  420ae4:	49 01 f0             	add    %rsi,%r8
  420ae7:	4c 29 c1             	sub    %r8,%rcx
    sum1 += (adler2 & 0xffff) + BASE - 1;
    sum2 += ((adler1 >> 16) & 0xffff) + ((adler2 >> 16) & 0xffff) + BASE - rem;
    if (sum1 > BASE) sum1 -= BASE;
  420aea:	49 81 f9 f1 ff 00 00 	cmp    $0xfff1,%r9
    rem = (unsigned)(len2 % BASE);
    sum1 = adler1 & 0xffff;
    sum2 = rem * sum1;
    MOD(sum2);
    sum1 += (adler2 & 0xffff) + BASE - 1;
    sum2 += ((adler1 >> 16) & 0xffff) + ((adler2 >> 16) & 0xffff) + BASE - rem;
  420af1:	4d 8d 1c 0b          	lea    (%r11,%rcx,1),%r11
  420af5:	49 8d 8b f1 ff 00 00 	lea    0xfff1(%r11),%rcx
    if (sum1 > BASE) sum1 -= BASE;
  420afc:	76 14                	jbe    420b12 <adler32_combine+0xc2>
  420afe:	4d 8d 4a ff          	lea    -0x1(%r10),%r9
    if (sum1 > BASE) sum1 -= BASE;
  420b02:	49 81 f9 f1 ff 00 00 	cmp    $0xfff1,%r9
  420b09:	76 07                	jbe    420b12 <adler32_combine+0xc2>
  420b0b:	4d 8d 8a 0e 00 ff ff 	lea    -0xfff2(%r10),%r9
    if (sum2 > (BASE << 1)) sum2 -= (BASE << 1);
  420b12:	49 81 eb f1 ff 00 00 	sub    $0xfff1,%r11
  420b19:	48 81 f9 e3 ff 01 00 	cmp    $0x1ffe3,%rcx
  420b20:	49 0f 43 cb          	cmovae %r11,%rcx
    if (sum2 > BASE) sum2 -= BASE;
  420b24:	48 8d 81 0f 00 ff ff 	lea    -0xfff1(%rcx),%rax
  420b2b:	48 81 f9 f2 ff 00 00 	cmp    $0xfff2,%rcx
  420b32:	48 0f 42 c1          	cmovb  %rcx,%rax
    return sum1 | (sum2 << 16);
  420b36:	48 c1 e0 10          	shl    $0x10,%rax
  420b3a:	4c 09 c8             	or     %r9,%rax
}
  420b3d:	c3                   	retq   
  420b3e:	66 90                	xchg   %ax,%ax

0000000000420b40 <get_crc_table>:
#ifdef DYNAMIC_CRC_TABLE
    if (crc_table_empty)
        make_crc_table();
#endif /* DYNAMIC_CRC_TABLE */
    return (const unsigned long FAR *)crc_table;
}
  420b40:	b8 40 9f 43 00       	mov    $0x439f40,%eax
  420b45:	c3                   	retq   
  420b46:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  420b4d:	00 00 00 

0000000000420b50 <crc32>:
unsigned long ZEXPORT crc32(crc, buf, len)
    unsigned long crc;
    const unsigned char FAR *buf;
    unsigned len;
{
    if (buf == Z_NULL) return 0UL;
  420b50:	48 85 f6             	test   %rsi,%rsi
/* ========================================================================= */
unsigned long ZEXPORT crc32(crc, buf, len)
    unsigned long crc;
    const unsigned char FAR *buf;
    unsigned len;
{
  420b53:	53                   	push   %rbx
    if (buf == Z_NULL) return 0UL;
  420b54:	0f 84 c6 04 00 00    	je     421020 <crc32+0x4d0>
    register u4 c;
    register const u4 FAR *buf4;

    c = (u4)crc;
    c = ~c;
    while (len && ((ptrdiff_t)buf & 3)) {
  420b5a:	85 d2                	test   %edx,%edx
{
    register u4 c;
    register const u4 FAR *buf4;

    c = (u4)crc;
    c = ~c;
  420b5c:	f7 d7                	not    %edi
    while (len && ((ptrdiff_t)buf & 3)) {
  420b5e:	0f 84 b5 04 00 00    	je     421019 <crc32+0x4c9>
  420b64:	40 f6 c6 03          	test   $0x3,%sil
  420b68:	0f 84 22 01 00 00    	je     420c90 <crc32+0x140>
  420b6e:	8d 4a ff             	lea    -0x1(%rdx),%ecx
  420b71:	41 89 c8             	mov    %ecx,%r8d
  420b74:	41 83 e0 03          	and    $0x3,%r8d
  420b78:	74 7a                	je     420bf4 <crc32+0xa4>
        c = crc_table[0][(c ^ *buf++) & 0xff] ^ (c >> 8);
  420b7a:	48 83 c6 01          	add    $0x1,%rsi
  420b7e:	89 fa                	mov    %edi,%edx
  420b80:	c1 ef 08             	shr    $0x8,%edi
  420b83:	32 56 ff             	xor    -0x1(%rsi),%dl
  420b86:	0f b6 c2             	movzbl %dl,%eax
        len--;
  420b89:	89 ca                	mov    %ecx,%edx
    register const u4 FAR *buf4;

    c = (u4)crc;
    c = ~c;
    while (len && ((ptrdiff_t)buf & 3)) {
        c = crc_table[0][(c ^ *buf++) & 0xff] ^ (c >> 8);
  420b8b:	33 3c c5 40 9f 43 00 	xor    0x439f40(,%rax,8),%edi
    register u4 c;
    register const u4 FAR *buf4;

    c = (u4)crc;
    c = ~c;
    while (len && ((ptrdiff_t)buf & 3)) {
  420b92:	40 f6 c6 03          	test   $0x3,%sil
  420b96:	0f 84 f4 00 00 00    	je     420c90 <crc32+0x140>
  420b9c:	41 83 f8 01          	cmp    $0x1,%r8d
  420ba0:	74 52                	je     420bf4 <crc32+0xa4>
  420ba2:	41 83 f8 02          	cmp    $0x2,%r8d
  420ba6:	74 25                	je     420bcd <crc32+0x7d>
        c = crc_table[0][(c ^ *buf++) & 0xff] ^ (c >> 8);
  420ba8:	48 83 c6 01          	add    $0x1,%rsi
  420bac:	89 fb                	mov    %edi,%ebx
        len--;
  420bae:	83 ea 01             	sub    $0x1,%edx
    register const u4 FAR *buf4;

    c = (u4)crc;
    c = ~c;
    while (len && ((ptrdiff_t)buf & 3)) {
        c = crc_table[0][(c ^ *buf++) & 0xff] ^ (c >> 8);
  420bb1:	32 5e ff             	xor    -0x1(%rsi),%bl
  420bb4:	c1 ef 08             	shr    $0x8,%edi
  420bb7:	44 0f b6 cb          	movzbl %bl,%r9d
  420bbb:	42 33 3c cd 40 9f 43 	xor    0x439f40(,%r9,8),%edi
  420bc2:	00 
    register u4 c;
    register const u4 FAR *buf4;

    c = (u4)crc;
    c = ~c;
    while (len && ((ptrdiff_t)buf & 3)) {
  420bc3:	40 f6 c6 03          	test   $0x3,%sil
  420bc7:	0f 84 c3 00 00 00    	je     420c90 <crc32+0x140>
        c = crc_table[0][(c ^ *buf++) & 0xff] ^ (c >> 8);
  420bcd:	48 83 c6 01          	add    $0x1,%rsi
  420bd1:	41 89 fa             	mov    %edi,%r10d
        len--;
  420bd4:	83 ea 01             	sub    $0x1,%edx
    register const u4 FAR *buf4;

    c = (u4)crc;
    c = ~c;
    while (len && ((ptrdiff_t)buf & 3)) {
        c = crc_table[0][(c ^ *buf++) & 0xff] ^ (c >> 8);
  420bd7:	44 32 56 ff          	xor    -0x1(%rsi),%r10b
  420bdb:	c1 ef 08             	shr    $0x8,%edi
  420bde:	45 0f b6 da          	movzbl %r10b,%r11d
  420be2:	42 33 3c dd 40 9f 43 	xor    0x439f40(,%r11,8),%edi
  420be9:	00 
    register u4 c;
    register const u4 FAR *buf4;

    c = (u4)crc;
    c = ~c;
    while (len && ((ptrdiff_t)buf & 3)) {
  420bea:	40 f6 c6 03          	test   $0x3,%sil
  420bee:	0f 84 9c 00 00 00    	je     420c90 <crc32+0x140>
        c = crc_table[0][(c ^ *buf++) & 0xff] ^ (c >> 8);
  420bf4:	48 8d 4e 01          	lea    0x1(%rsi),%rcx
  420bf8:	41 89 f8             	mov    %edi,%r8d
        len--;
  420bfb:	8d 5a ff             	lea    -0x1(%rdx),%ebx
    register const u4 FAR *buf4;

    c = (u4)crc;
    c = ~c;
    while (len && ((ptrdiff_t)buf & 3)) {
        c = crc_table[0][(c ^ *buf++) & 0xff] ^ (c >> 8);
  420bfe:	c1 ef 08             	shr    $0x8,%edi
  420c01:	44 32 41 ff          	xor    -0x1(%rcx),%r8b
  420c05:	48 89 ce             	mov    %rcx,%rsi
        len--;
  420c08:	89 da                	mov    %ebx,%edx
    register const u4 FAR *buf4;

    c = (u4)crc;
    c = ~c;
    while (len && ((ptrdiff_t)buf & 3)) {
        c = crc_table[0][(c ^ *buf++) & 0xff] ^ (c >> 8);
  420c0a:	41 0f b6 c0          	movzbl %r8b,%eax
  420c0e:	33 3c c5 40 9f 43 00 	xor    0x439f40(,%rax,8),%edi
    register u4 c;
    register const u4 FAR *buf4;

    c = (u4)crc;
    c = ~c;
    while (len && ((ptrdiff_t)buf & 3)) {
  420c15:	85 db                	test   %ebx,%ebx
  420c17:	0f 84 fc 03 00 00    	je     421019 <crc32+0x4c9>
  420c1d:	f6 c1 03             	test   $0x3,%cl
  420c20:	74 6e                	je     420c90 <crc32+0x140>
        c = crc_table[0][(c ^ *buf++) & 0xff] ^ (c >> 8);
  420c22:	48 83 c6 01          	add    $0x1,%rsi
  420c26:	41 89 f9             	mov    %edi,%r9d
        len--;
  420c29:	83 ea 01             	sub    $0x1,%edx
    register const u4 FAR *buf4;

    c = (u4)crc;
    c = ~c;
    while (len && ((ptrdiff_t)buf & 3)) {
        c = crc_table[0][(c ^ *buf++) & 0xff] ^ (c >> 8);
  420c2c:	44 32 4e ff          	xor    -0x1(%rsi),%r9b
  420c30:	c1 ef 08             	shr    $0x8,%edi
  420c33:	45 0f b6 d1          	movzbl %r9b,%r10d
  420c37:	42 33 3c d5 40 9f 43 	xor    0x439f40(,%r10,8),%edi
  420c3e:	00 
    register u4 c;
    register const u4 FAR *buf4;

    c = (u4)crc;
    c = ~c;
    while (len && ((ptrdiff_t)buf & 3)) {
  420c3f:	40 f6 c6 03          	test   $0x3,%sil
  420c43:	74 4b                	je     420c90 <crc32+0x140>
        c = crc_table[0][(c ^ *buf++) & 0xff] ^ (c >> 8);
  420c45:	48 8d 71 02          	lea    0x2(%rcx),%rsi
  420c49:	89 fa                	mov    %edi,%edx
  420c4b:	c1 ef 08             	shr    $0x8,%edi
  420c4e:	32 56 ff             	xor    -0x1(%rsi),%dl
  420c51:	44 0f b6 da          	movzbl %dl,%r11d
        len--;
  420c55:	8d 53 fe             	lea    -0x2(%rbx),%edx
    register const u4 FAR *buf4;

    c = (u4)crc;
    c = ~c;
    while (len && ((ptrdiff_t)buf & 3)) {
        c = crc_table[0][(c ^ *buf++) & 0xff] ^ (c >> 8);
  420c58:	42 33 3c dd 40 9f 43 	xor    0x439f40(,%r11,8),%edi
  420c5f:	00 
    register u4 c;
    register const u4 FAR *buf4;

    c = (u4)crc;
    c = ~c;
    while (len && ((ptrdiff_t)buf & 3)) {
  420c60:	40 f6 c6 03          	test   $0x3,%sil
  420c64:	74 2a                	je     420c90 <crc32+0x140>
        c = crc_table[0][(c ^ *buf++) & 0xff] ^ (c >> 8);
  420c66:	48 8d 71 03          	lea    0x3(%rcx),%rsi
  420c6a:	89 f9                	mov    %edi,%ecx
  420c6c:	c1 ef 08             	shr    $0x8,%edi
        len--;
  420c6f:	8d 53 fd             	lea    -0x3(%rbx),%edx
    register const u4 FAR *buf4;

    c = (u4)crc;
    c = ~c;
    while (len && ((ptrdiff_t)buf & 3)) {
        c = crc_table[0][(c ^ *buf++) & 0xff] ^ (c >> 8);
  420c72:	32 4e ff             	xor    -0x1(%rsi),%cl
  420c75:	44 0f b6 c1          	movzbl %cl,%r8d
  420c79:	42 33 3c c5 40 9f 43 	xor    0x439f40(,%r8,8),%edi
  420c80:	00 
    register u4 c;
    register const u4 FAR *buf4;

    c = (u4)crc;
    c = ~c;
    while (len && ((ptrdiff_t)buf & 3)) {
  420c81:	40 f6 c6 03          	test   $0x3,%sil
  420c85:	0f 85 69 ff ff ff    	jne    420bf4 <crc32+0xa4>
  420c8b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        c = crc_table[0][(c ^ *buf++) & 0xff] ^ (c >> 8);
        len--;
    }

    buf4 = (const u4 FAR *)(const void FAR *)buf;
    while (len >= 32) {
  420c90:	83 fa 1f             	cmp    $0x1f,%edx
  420c93:	0f 86 03 02 00 00    	jbe    420e9c <crc32+0x34c>
  420c99:	44 8d 52 e0          	lea    -0x20(%rdx),%r10d
  420c9d:	4c 8d 46 44          	lea    0x44(%rsi),%r8
  420ca1:	41 c1 ea 05          	shr    $0x5,%r10d
  420ca5:	4c 89 d0             	mov    %r10,%rax
  420ca8:	48 c1 e0 05          	shl    $0x5,%rax
  420cac:	4c 8d 4c 06 64       	lea    0x64(%rsi,%rax,1),%r9
  420cb1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        DOLIT32;
  420cb8:	41 8b 58 bc          	mov    -0x44(%r8),%ebx
  420cbc:	41 0f 18 48 fc       	prefetcht0 -0x4(%r8)
  420cc1:	41 0f 18 08          	prefetcht0 (%r8)
  420cc5:	41 0f 18 48 04       	prefetcht0 0x4(%r8)
  420cca:	31 fb                	xor    %edi,%ebx
  420ccc:	89 d9                	mov    %ebx,%ecx
  420cce:	44 0f b6 db          	movzbl %bl,%r11d
  420cd2:	89 df                	mov    %ebx,%edi
  420cd4:	c1 e9 18             	shr    $0x18,%ecx
  420cd7:	c1 ef 10             	shr    $0x10,%edi
  420cda:	0f b6 df             	movzbl %bh,%ebx
  420cdd:	48 8b 0c cd 40 9f 43 	mov    0x439f40(,%rcx,8),%rcx
  420ce4:	00 
  420ce5:	42 33 0c dd 40 b7 43 	xor    0x43b740(,%r11,8),%ecx
  420cec:	00 
  420ced:	40 0f b6 c7          	movzbl %dil,%eax
  420cf1:	41 33 48 c0          	xor    -0x40(%r8),%ecx
  420cf5:	33 0c dd 40 af 43 00 	xor    0x43af40(,%rbx,8),%ecx
  420cfc:	33 0c c5 40 a7 43 00 	xor    0x43a740(,%rax,8),%ecx
  420d03:	89 c8                	mov    %ecx,%eax
  420d05:	44 0f b6 d9          	movzbl %cl,%r11d
  420d09:	89 cf                	mov    %ecx,%edi
  420d0b:	c1 e8 18             	shr    $0x18,%eax
  420d0e:	c1 ef 10             	shr    $0x10,%edi
  420d11:	0f b6 cd             	movzbl %ch,%ecx
  420d14:	48 8b 04 c5 40 9f 43 	mov    0x439f40(,%rax,8),%rax
  420d1b:	00 
  420d1c:	42 33 04 dd 40 b7 43 	xor    0x43b740(,%r11,8),%eax
  420d23:	00 
  420d24:	40 0f b6 df          	movzbl %dil,%ebx
  420d28:	41 33 40 c4          	xor    -0x3c(%r8),%eax
  420d2c:	33 04 cd 40 af 43 00 	xor    0x43af40(,%rcx,8),%eax
  420d33:	33 04 dd 40 a7 43 00 	xor    0x43a740(,%rbx,8),%eax
  420d3a:	89 c1                	mov    %eax,%ecx
  420d3c:	44 0f b6 d8          	movzbl %al,%r11d
  420d40:	89 c7                	mov    %eax,%edi
  420d42:	c1 e9 18             	shr    $0x18,%ecx
  420d45:	c1 ef 10             	shr    $0x10,%edi
  420d48:	0f b6 c4             	movzbl %ah,%eax
  420d4b:	48 8b 0c cd 40 9f 43 	mov    0x439f40(,%rcx,8),%rcx
  420d52:	00 
  420d53:	42 33 0c dd 40 b7 43 	xor    0x43b740(,%r11,8),%ecx
  420d5a:	00 
  420d5b:	40 0f b6 df          	movzbl %dil,%ebx
  420d5f:	41 33 48 c8          	xor    -0x38(%r8),%ecx
  420d63:	33 0c c5 40 af 43 00 	xor    0x43af40(,%rax,8),%ecx
  420d6a:	33 0c dd 40 a7 43 00 	xor    0x43a740(,%rbx,8),%ecx
  420d71:	89 c8                	mov    %ecx,%eax
  420d73:	44 0f b6 d9          	movzbl %cl,%r11d
  420d77:	89 cf                	mov    %ecx,%edi
  420d79:	c1 e8 18             	shr    $0x18,%eax
  420d7c:	c1 ef 10             	shr    $0x10,%edi
  420d7f:	0f b6 cd             	movzbl %ch,%ecx
  420d82:	48 8b 04 c5 40 9f 43 	mov    0x439f40(,%rax,8),%rax
  420d89:	00 
  420d8a:	42 33 04 dd 40 b7 43 	xor    0x43b740(,%r11,8),%eax
  420d91:	00 
  420d92:	40 0f b6 df          	movzbl %dil,%ebx
  420d96:	41 33 40 cc          	xor    -0x34(%r8),%eax
  420d9a:	33 04 cd 40 af 43 00 	xor    0x43af40(,%rcx,8),%eax
  420da1:	33 04 dd 40 a7 43 00 	xor    0x43a740(,%rbx,8),%eax
  420da8:	89 c1                	mov    %eax,%ecx
  420daa:	44 0f b6 d8          	movzbl %al,%r11d
  420dae:	89 c7                	mov    %eax,%edi
  420db0:	c1 e9 18             	shr    $0x18,%ecx
  420db3:	c1 ef 10             	shr    $0x10,%edi
  420db6:	0f b6 c4             	movzbl %ah,%eax
  420db9:	48 8b 0c cd 40 9f 43 	mov    0x439f40(,%rcx,8),%rcx
  420dc0:	00 
  420dc1:	42 33 0c dd 40 b7 43 	xor    0x43b740(,%r11,8),%ecx
  420dc8:	00 
  420dc9:	40 0f b6 df          	movzbl %dil,%ebx
  420dcd:	41 33 48 d0          	xor    -0x30(%r8),%ecx
  420dd1:	33 0c c5 40 af 43 00 	xor    0x43af40(,%rax,8),%ecx
  420dd8:	33 0c dd 40 a7 43 00 	xor    0x43a740(,%rbx,8),%ecx
  420ddf:	89 c8                	mov    %ecx,%eax
  420de1:	44 0f b6 d9          	movzbl %cl,%r11d
  420de5:	89 cf                	mov    %ecx,%edi
  420de7:	c1 e8 18             	shr    $0x18,%eax
  420dea:	c1 ef 10             	shr    $0x10,%edi
  420ded:	0f b6 cd             	movzbl %ch,%ecx
  420df0:	48 8b 04 c5 40 9f 43 	mov    0x439f40(,%rax,8),%rax
  420df7:	00 
  420df8:	42 33 04 dd 40 b7 43 	xor    0x43b740(,%r11,8),%eax
  420dff:	00 
  420e00:	40 0f b6 df          	movzbl %dil,%ebx
  420e04:	41 33 40 d4          	xor    -0x2c(%r8),%eax
  420e08:	49 83 c0 20          	add    $0x20,%r8
  420e0c:	33 04 cd 40 af 43 00 	xor    0x43af40(,%rcx,8),%eax
  420e13:	33 04 dd 40 a7 43 00 	xor    0x43a740(,%rbx,8),%eax
  420e1a:	89 c1                	mov    %eax,%ecx
  420e1c:	44 0f b6 d8          	movzbl %al,%r11d
  420e20:	89 c7                	mov    %eax,%edi
  420e22:	c1 e9 18             	shr    $0x18,%ecx
  420e25:	c1 ef 10             	shr    $0x10,%edi
  420e28:	0f b6 c4             	movzbl %ah,%eax
  420e2b:	48 8b 0c cd 40 9f 43 	mov    0x439f40(,%rcx,8),%rcx
  420e32:	00 
  420e33:	42 33 0c dd 40 b7 43 	xor    0x43b740(,%r11,8),%ecx
  420e3a:	00 
  420e3b:	40 0f b6 df          	movzbl %dil,%ebx
  420e3f:	41 33 48 b8          	xor    -0x48(%r8),%ecx
  420e43:	33 0c c5 40 af 43 00 	xor    0x43af40(,%rax,8),%ecx
  420e4a:	33 0c dd 40 a7 43 00 	xor    0x43a740(,%rbx,8),%ecx
  420e51:	89 cf                	mov    %ecx,%edi
  420e53:	41 89 cb             	mov    %ecx,%r11d
  420e56:	0f b6 c1             	movzbl %cl,%eax
  420e59:	c1 ef 10             	shr    $0x10,%edi
  420e5c:	41 c1 eb 18          	shr    $0x18,%r11d
  420e60:	0f b6 cd             	movzbl %ch,%ecx
  420e63:	40 0f b6 df          	movzbl %dil,%ebx
  420e67:	48 8b 3c c5 40 b7 43 	mov    0x43b740(,%rax,8),%rdi
  420e6e:	00 
  420e6f:	42 33 3c dd 40 9f 43 	xor    0x439f40(,%r11,8),%edi
  420e76:	00 
  420e77:	33 3c cd 40 af 43 00 	xor    0x43af40(,%rcx,8),%edi
  420e7e:	33 3c dd 40 a7 43 00 	xor    0x43a740(,%rbx,8),%edi
        c = crc_table[0][(c ^ *buf++) & 0xff] ^ (c >> 8);
        len--;
    }

    buf4 = (const u4 FAR *)(const void FAR *)buf;
    while (len >= 32) {
  420e85:	4d 39 c8             	cmp    %r9,%r8
  420e88:	0f 85 2a fe ff ff    	jne    420cb8 <crc32+0x168>
  420e8e:	49 83 c2 01          	add    $0x1,%r10
  420e92:	83 e2 1f             	and    $0x1f,%edx
  420e95:	49 c1 e2 05          	shl    $0x5,%r10
  420e99:	4c 01 d6             	add    %r10,%rsi
        DOLIT32;
        len -= 32;
    }
    while (len >= 4) {
  420e9c:	83 fa 03             	cmp    $0x3,%edx
  420e9f:	0f 86 7f 01 00 00    	jbe    421024 <crc32+0x4d4>
  420ea5:	44 8d 42 fc          	lea    -0x4(%rdx),%r8d
  420ea9:	41 c1 e8 02          	shr    $0x2,%r8d
  420ead:	4e 8d 4c 86 04       	lea    0x4(%rsi,%r8,4),%r9
  420eb2:	41 83 e0 01          	and    $0x1,%r8d
  420eb6:	4c 89 c3             	mov    %r8,%rbx
        DOLIT4;
  420eb9:	4c 8d 46 04          	lea    0x4(%rsi),%r8
  420ebd:	41 8b 40 fc          	mov    -0x4(%r8),%eax
  420ec1:	31 f8                	xor    %edi,%eax
  420ec3:	41 89 c3             	mov    %eax,%r11d
  420ec6:	41 89 c2             	mov    %eax,%r10d
  420ec9:	0f b6 f8             	movzbl %al,%edi
  420ecc:	41 c1 eb 18          	shr    $0x18,%r11d
  420ed0:	41 c1 ea 10          	shr    $0x10,%r10d
  420ed4:	48 8b 3c fd 40 b7 43 	mov    0x43b740(,%rdi,8),%rdi
  420edb:	00 
  420edc:	0f b6 c4             	movzbl %ah,%eax
  420edf:	42 33 3c dd 40 9f 43 	xor    0x439f40(,%r11,8),%edi
  420ee6:	00 
  420ee7:	41 0f b6 ca          	movzbl %r10b,%ecx
  420eeb:	33 3c c5 40 af 43 00 	xor    0x43af40(,%rax,8),%edi
  420ef2:	33 3c cd 40 a7 43 00 	xor    0x43a740(,%rcx,8),%edi
    buf4 = (const u4 FAR *)(const void FAR *)buf;
    while (len >= 32) {
        DOLIT32;
        len -= 32;
    }
    while (len >= 4) {
  420ef9:	4d 39 c8             	cmp    %r9,%r8
  420efc:	0f 84 c7 00 00 00    	je     420fc9 <crc32+0x479>
  420f02:	48 85 db             	test   %rbx,%rbx
  420f05:	74 49                	je     420f50 <crc32+0x400>
        DOLIT4;
  420f07:	4c 8d 46 08          	lea    0x8(%rsi),%r8
  420f0b:	41 8b 58 fc          	mov    -0x4(%r8),%ebx
  420f0f:	31 fb                	xor    %edi,%ebx
  420f11:	89 d9                	mov    %ebx,%ecx
  420f13:	89 de                	mov    %ebx,%esi
  420f15:	44 0f b6 db          	movzbl %bl,%r11d
  420f19:	c1 e9 18             	shr    $0x18,%ecx
  420f1c:	c1 ee 10             	shr    $0x10,%esi
  420f1f:	4a 8b 3c dd 40 b7 43 	mov    0x43b740(,%r11,8),%rdi
  420f26:	00 
  420f27:	0f b6 c7             	movzbl %bh,%eax
  420f2a:	33 3c cd 40 9f 43 00 	xor    0x439f40(,%rcx,8),%edi
  420f31:	44 0f b6 d6          	movzbl %sil,%r10d
  420f35:	33 3c c5 40 af 43 00 	xor    0x43af40(,%rax,8),%edi
  420f3c:	42 33 3c d5 40 a7 43 	xor    0x43a740(,%r10,8),%edi
  420f43:	00 
    buf4 = (const u4 FAR *)(const void FAR *)buf;
    while (len >= 32) {
        DOLIT32;
        len -= 32;
    }
    while (len >= 4) {
  420f44:	4d 39 c8             	cmp    %r9,%r8
  420f47:	0f 84 7c 00 00 00    	je     420fc9 <crc32+0x479>
  420f4d:	0f 1f 00             	nopl   (%rax)
        DOLIT4;
  420f50:	41 8b 18             	mov    (%r8),%ebx
  420f53:	49 83 c0 08          	add    $0x8,%r8
  420f57:	31 fb                	xor    %edi,%ebx
  420f59:	41 89 da             	mov    %ebx,%r10d
  420f5c:	89 df                	mov    %ebx,%edi
  420f5e:	0f b6 cb             	movzbl %bl,%ecx
  420f61:	41 c1 ea 18          	shr    $0x18,%r10d
  420f65:	c1 ef 10             	shr    $0x10,%edi
  420f68:	0f b6 c7             	movzbl %bh,%eax
  420f6b:	48 8b 0c cd 40 b7 43 	mov    0x43b740(,%rcx,8),%rcx
  420f72:	00 
  420f73:	42 33 0c d5 40 9f 43 	xor    0x439f40(,%r10,8),%ecx
  420f7a:	00 
  420f7b:	40 0f b6 f7          	movzbl %dil,%esi
  420f7f:	33 0c c5 40 af 43 00 	xor    0x43af40(,%rax,8),%ecx
  420f86:	33 0c f5 40 a7 43 00 	xor    0x43a740(,%rsi,8),%ecx
  420f8d:	41 33 48 fc          	xor    -0x4(%r8),%ecx
  420f91:	89 ce                	mov    %ecx,%esi
  420f93:	41 89 cb             	mov    %ecx,%r11d
  420f96:	0f b6 f9             	movzbl %cl,%edi
  420f99:	c1 ee 18             	shr    $0x18,%esi
  420f9c:	41 c1 eb 10          	shr    $0x10,%r11d
  420fa0:	48 8b 3c fd 40 b7 43 	mov    0x43b740(,%rdi,8),%rdi
  420fa7:	00 
  420fa8:	0f b6 cd             	movzbl %ch,%ecx
  420fab:	33 3c f5 40 9f 43 00 	xor    0x439f40(,%rsi,8),%edi
  420fb2:	41 0f b6 db          	movzbl %r11b,%ebx
  420fb6:	33 3c cd 40 af 43 00 	xor    0x43af40(,%rcx,8),%edi
  420fbd:	33 3c dd 40 a7 43 00 	xor    0x43a740(,%rbx,8),%edi
    buf4 = (const u4 FAR *)(const void FAR *)buf;
    while (len >= 32) {
        DOLIT32;
        len -= 32;
    }
    while (len >= 4) {
  420fc4:	4d 39 c8             	cmp    %r9,%r8
  420fc7:	75 87                	jne    420f50 <crc32+0x400>
  420fc9:	83 e2 03             	and    $0x3,%edx
        DOLIT4;
        len -= 4;
    }
    buf = (const unsigned char FAR *)buf4;

    if (len) do {
  420fcc:	85 d2                	test   %edx,%edx
  420fce:	74 49                	je     421019 <crc32+0x4c9>
        c = crc_table[0][(c ^ *buf++) & 0xff] ^ (c >> 8);
  420fd0:	41 89 f8             	mov    %edi,%r8d
  420fd3:	45 32 01             	xor    (%r9),%r8b
  420fd6:	c1 ef 08             	shr    $0x8,%edi
  420fd9:	45 0f b6 d0          	movzbl %r8b,%r10d
  420fdd:	42 33 3c d5 40 9f 43 	xor    0x439f40(,%r10,8),%edi
  420fe4:	00 
    } while (--len);
  420fe5:	83 fa 01             	cmp    $0x1,%edx
  420fe8:	74 2f                	je     421019 <crc32+0x4c9>
        len -= 4;
    }
    buf = (const unsigned char FAR *)buf4;

    if (len) do {
        c = crc_table[0][(c ^ *buf++) & 0xff] ^ (c >> 8);
  420fea:	89 f8                	mov    %edi,%eax
  420fec:	41 32 41 01          	xor    0x1(%r9),%al
  420ff0:	c1 ef 08             	shr    $0x8,%edi
  420ff3:	44 0f b6 d8          	movzbl %al,%r11d
  420ff7:	42 33 3c dd 40 9f 43 	xor    0x439f40(,%r11,8),%edi
  420ffe:	00 
    } while (--len);
  420fff:	83 fa 02             	cmp    $0x2,%edx
  421002:	74 15                	je     421019 <crc32+0x4c9>
        len -= 4;
    }
    buf = (const unsigned char FAR *)buf4;

    if (len) do {
        c = crc_table[0][(c ^ *buf++) & 0xff] ^ (c >> 8);
  421004:	89 fa                	mov    %edi,%edx
  421006:	41 32 51 02          	xor    0x2(%r9),%dl
  42100a:	c1 ef 08             	shr    $0x8,%edi
  42100d:	44 0f b6 ca          	movzbl %dl,%r9d
  421011:	42 33 3c cd 40 9f 43 	xor    0x439f40(,%r9,8),%edi
  421018:	00 
    } while (--len);
    c = ~c;
    return (unsigned long)c;
  421019:	89 f8                	mov    %edi,%eax
  42101b:	f7 d0                	not    %eax
    }
    if (len) do {
        DO1;
    } while (--len);
    return crc ^ 0xffffffffUL;
}
  42101d:	5b                   	pop    %rbx
  42101e:	c3                   	retq   
  42101f:	90                   	nop
unsigned long ZEXPORT crc32(crc, buf, len)
    unsigned long crc;
    const unsigned char FAR *buf;
    unsigned len;
{
    if (buf == Z_NULL) return 0UL;
  421020:	31 c0                	xor    %eax,%eax
    }
    if (len) do {
        DO1;
    } while (--len);
    return crc ^ 0xffffffffUL;
}
  421022:	5b                   	pop    %rbx
  421023:	c3                   	retq   
    buf4 = (const u4 FAR *)(const void FAR *)buf;
    while (len >= 32) {
        DOLIT32;
        len -= 32;
    }
    while (len >= 4) {
  421024:	49 89 f1             	mov    %rsi,%r9
  421027:	eb a3                	jmp    420fcc <crc32+0x47c>
  421029:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000421030 <crc32_combine>:
/* ========================================================================= */
uLong ZEXPORT crc32_combine(crc1, crc2, len2)
    uLong crc1;
    uLong crc2;
    z_off_t len2;
{
  421030:	48 81 ec 18 02 00 00 	sub    $0x218,%rsp
  421037:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  42103e:	00 00 
  421040:	48 89 84 24 08 02 00 	mov    %rax,0x208(%rsp)
  421047:	00 
  421048:	31 c0                	xor    %eax,%eax
    unsigned long row;
    unsigned long even[GF2_DIM];    /* even-power-of-two zeros operator */
    unsigned long odd[GF2_DIM];     /* odd-power-of-two zeros operator */

    /* degenerate case */
    if (len2 == 0)
  42104a:	48 85 d2             	test   %rdx,%rdx
        return crc1;
  42104d:	48 89 f8             	mov    %rdi,%rax
    unsigned long row;
    unsigned long even[GF2_DIM];    /* even-power-of-two zeros operator */
    unsigned long odd[GF2_DIM];     /* odd-power-of-two zeros operator */

    /* degenerate case */
    if (len2 == 0)
  421050:	0f 84 09 02 00 00    	je     42125f <crc32_combine+0x22f>
  421056:	4c 8d 94 24 00 01 00 	lea    0x100(%rsp),%r10
  42105d:	00 
        return crc1;

    /* put operator for one zero bit in odd */
    odd[0] = 0xedb88320L;           /* CRC-32 polynomial */
  42105e:	b8 20 83 b8 ed       	mov    $0xedb88320,%eax
  421063:	4c 8d 84 24 00 02 00 	lea    0x200(%rsp),%r8
  42106a:	00 
  42106b:	48 89 84 24 00 01 00 	mov    %rax,0x100(%rsp)
  421072:	00 
    row = 1;
    for (n = 1; n < GF2_DIM; n++) {
        odd[n] = row;
  421073:	48 c7 84 24 08 01 00 	movq   $0x1,0x108(%rsp)
  42107a:	00 01 00 00 00 
        row <<= 1;
  42107f:	b9 02 00 00 00       	mov    $0x2,%ecx
  421084:	49 83 c2 10          	add    $0x10,%r10
  421088:	4c 8d 0c 09          	lea    (%rcx,%rcx,1),%r9
  42108c:	4c 8d 1c 8d 00 00 00 	lea    0x0(,%rcx,4),%r11
  421093:	00 
  421094:	48 8d 04 cd 00 00 00 	lea    0x0(,%rcx,8),%rax
  42109b:	00 

    /* put operator for one zero bit in odd */
    odd[0] = 0xedb88320L;           /* CRC-32 polynomial */
    row = 1;
    for (n = 1; n < GF2_DIM; n++) {
        odd[n] = row;
  42109c:	49 89 0a             	mov    %rcx,(%r10)
  42109f:	49 83 c2 50          	add    $0x50,%r10
  4210a3:	4d 89 4a b8          	mov    %r9,-0x48(%r10)
  4210a7:	4d 89 5a c0          	mov    %r11,-0x40(%r10)
        row <<= 1;
  4210ab:	49 89 c9             	mov    %rcx,%r9

    /* put operator for one zero bit in odd */
    odd[0] = 0xedb88320L;           /* CRC-32 polynomial */
    row = 1;
    for (n = 1; n < GF2_DIM; n++) {
        odd[n] = row;
  4210ae:	49 89 42 c8          	mov    %rax,-0x38(%r10)
        row <<= 1;
  4210b2:	49 89 cb             	mov    %rcx,%r11
  4210b5:	48 89 c8             	mov    %rcx,%rax
  4210b8:	49 c1 e1 04          	shl    $0x4,%r9
  4210bc:	49 c1 e3 05          	shl    $0x5,%r11
  4210c0:	48 c1 e0 06          	shl    $0x6,%rax

    /* put operator for one zero bit in odd */
    odd[0] = 0xedb88320L;           /* CRC-32 polynomial */
    row = 1;
    for (n = 1; n < GF2_DIM; n++) {
        odd[n] = row;
  4210c4:	4d 89 4a d0          	mov    %r9,-0x30(%r10)
  4210c8:	4d 89 5a d8          	mov    %r11,-0x28(%r10)
        row <<= 1;
  4210cc:	49 89 c9             	mov    %rcx,%r9

    /* put operator for one zero bit in odd */
    odd[0] = 0xedb88320L;           /* CRC-32 polynomial */
    row = 1;
    for (n = 1; n < GF2_DIM; n++) {
        odd[n] = row;
  4210cf:	49 89 42 e0          	mov    %rax,-0x20(%r10)
        row <<= 1;
  4210d3:	49 89 cb             	mov    %rcx,%r11
  4210d6:	48 89 c8             	mov    %rcx,%rax
  4210d9:	49 c1 e1 07          	shl    $0x7,%r9
  4210dd:	49 c1 e3 08          	shl    $0x8,%r11
  4210e1:	48 c1 e0 09          	shl    $0x9,%rax

    /* put operator for one zero bit in odd */
    odd[0] = 0xedb88320L;           /* CRC-32 polynomial */
    row = 1;
    for (n = 1; n < GF2_DIM; n++) {
        odd[n] = row;
  4210e5:	4d 89 4a e8          	mov    %r9,-0x18(%r10)
  4210e9:	4d 89 5a f0          	mov    %r11,-0x10(%r10)
        row <<= 1;
  4210ed:	48 c1 e1 0a          	shl    $0xa,%rcx

    /* put operator for one zero bit in odd */
    odd[0] = 0xedb88320L;           /* CRC-32 polynomial */
    row = 1;
    for (n = 1; n < GF2_DIM; n++) {
        odd[n] = row;
  4210f1:	49 89 42 f8          	mov    %rax,-0x8(%r10)
        return crc1;

    /* put operator for one zero bit in odd */
    odd[0] = 0xedb88320L;           /* CRC-32 polynomial */
    row = 1;
    for (n = 1; n < GF2_DIM; n++) {
  4210f5:	4d 39 c2             	cmp    %r8,%r10
  4210f8:	75 8e                	jne    421088 <crc32_combine+0x58>
  4210fa:	45 31 d2             	xor    %r10d,%r10d
    unsigned long *mat;
{
    int n;

    for (n = 0; n < GF2_DIM; n++)
        square[n] = gf2_matrix_times(mat, mat[n]);
  4210fd:	4a 8b 84 14 00 01 00 	mov    0x100(%rsp,%r10,1),%rax
  421104:	00 
    unsigned long vec;
{
    unsigned long sum;

    sum = 0;
    while (vec) {
  421105:	45 31 c0             	xor    %r8d,%r8d
  421108:	48 85 c0             	test   %rax,%rax
  42110b:	74 1b                	je     421128 <crc32_combine+0xf8>
  42110d:	48 8d 8c 24 00 01 00 	lea    0x100(%rsp),%rcx
  421114:	00 
  421115:	0f 1f 00             	nopl   (%rax)
        if (vec & 1)
  421118:	a8 01                	test   $0x1,%al
  42111a:	74 03                	je     42111f <crc32_combine+0xef>
            sum ^= *mat;
  42111c:	4c 33 01             	xor    (%rcx),%r8
        vec >>= 1;
        mat++;
  42111f:	48 83 c1 08          	add    $0x8,%rcx
    unsigned long vec;
{
    unsigned long sum;

    sum = 0;
    while (vec) {
  421123:	48 d1 e8             	shr    %rax
  421126:	75 f0                	jne    421118 <crc32_combine+0xe8>
    unsigned long *mat;
{
    int n;

    for (n = 0; n < GF2_DIM; n++)
        square[n] = gf2_matrix_times(mat, mat[n]);
  421128:	4e 89 04 14          	mov    %r8,(%rsp,%r10,1)
  42112c:	49 83 c2 08          	add    $0x8,%r10
    unsigned long *square;
    unsigned long *mat;
{
    int n;

    for (n = 0; n < GF2_DIM; n++)
  421130:	49 81 fa 00 01 00 00 	cmp    $0x100,%r10
  421137:	75 c4                	jne    4210fd <crc32_combine+0xcd>
  421139:	66 45 31 d2          	xor    %r10w,%r10w
        square[n] = gf2_matrix_times(mat, mat[n]);
  42113d:	4a 8b 04 14          	mov    (%rsp,%r10,1),%rax
    unsigned long vec;
{
    unsigned long sum;

    sum = 0;
    while (vec) {
  421141:	45 31 c9             	xor    %r9d,%r9d
  421144:	48 85 c0             	test   %rax,%rax
  421147:	74 17                	je     421160 <crc32_combine+0x130>
  421149:	49 89 e3             	mov    %rsp,%r11
  42114c:	0f 1f 40 00          	nopl   0x0(%rax)
        if (vec & 1)
  421150:	a8 01                	test   $0x1,%al
  421152:	74 03                	je     421157 <crc32_combine+0x127>
            sum ^= *mat;
  421154:	4d 33 0b             	xor    (%r11),%r9
        vec >>= 1;
        mat++;
  421157:	49 83 c3 08          	add    $0x8,%r11
    unsigned long vec;
{
    unsigned long sum;

    sum = 0;
    while (vec) {
  42115b:	48 d1 e8             	shr    %rax
  42115e:	75 f0                	jne    421150 <crc32_combine+0x120>
    unsigned long *mat;
{
    int n;

    for (n = 0; n < GF2_DIM; n++)
        square[n] = gf2_matrix_times(mat, mat[n]);
  421160:	4e 89 8c 14 00 01 00 	mov    %r9,0x100(%rsp,%r10,1)
  421167:	00 
  421168:	49 83 c2 08          	add    $0x8,%r10
    unsigned long *square;
    unsigned long *mat;
{
    int n;

    for (n = 0; n < GF2_DIM; n++)
  42116c:	49 81 fa 00 01 00 00 	cmp    $0x100,%r10
  421173:	75 c8                	jne    42113d <crc32_combine+0x10d>
    unsigned long *mat;
    unsigned long vec;
{
    unsigned long sum;

    sum = 0;
  421175:	45 31 d2             	xor    %r10d,%r10d
  421178:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  42117f:	00 
    unsigned long *mat;
{
    int n;

    for (n = 0; n < GF2_DIM; n++)
        square[n] = gf2_matrix_times(mat, mat[n]);
  421180:	4a 8b 84 14 00 01 00 	mov    0x100(%rsp,%r10,1),%rax
  421187:	00 
    unsigned long vec;
{
    unsigned long sum;

    sum = 0;
    while (vec) {
  421188:	45 31 c0             	xor    %r8d,%r8d
  42118b:	48 85 c0             	test   %rax,%rax
  42118e:	74 20                	je     4211b0 <crc32_combine+0x180>
  421190:	48 8d 8c 24 00 01 00 	lea    0x100(%rsp),%rcx
  421197:	00 
  421198:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  42119f:	00 
        if (vec & 1)
  4211a0:	a8 01                	test   $0x1,%al
  4211a2:	74 03                	je     4211a7 <crc32_combine+0x177>
            sum ^= *mat;
  4211a4:	4c 33 01             	xor    (%rcx),%r8
        vec >>= 1;
        mat++;
  4211a7:	48 83 c1 08          	add    $0x8,%rcx
    unsigned long vec;
{
    unsigned long sum;

    sum = 0;
    while (vec) {
  4211ab:	48 d1 e8             	shr    %rax
  4211ae:	75 f0                	jne    4211a0 <crc32_combine+0x170>
    unsigned long *mat;
{
    int n;

    for (n = 0; n < GF2_DIM; n++)
        square[n] = gf2_matrix_times(mat, mat[n]);
  4211b0:	4e 89 04 14          	mov    %r8,(%rsp,%r10,1)
  4211b4:	49 83 c2 08          	add    $0x8,%r10
    unsigned long *square;
    unsigned long *mat;
{
    int n;

    for (n = 0; n < GF2_DIM; n++)
  4211b8:	49 81 fa 00 01 00 00 	cmp    $0x100,%r10
  4211bf:	75 bf                	jne    421180 <crc32_combine+0x150>
    /* apply len2 zeros to crc1 (first square will put the operator for one
       zero byte, eight zero bits, in even) */
    do {
        /* apply zeros operator for this bit of len2 */
        gf2_matrix_square(even, odd);
        if (len2 & 1)
  4211c1:	f6 c2 01             	test   $0x1,%dl
  4211c4:	74 22                	je     4211e8 <crc32_combine+0x1b8>
    unsigned long vec;
{
    unsigned long sum;

    sum = 0;
    while (vec) {
  4211c6:	48 85 ff             	test   %rdi,%rdi
  4211c9:	74 1d                	je     4211e8 <crc32_combine+0x1b8>
  4211cb:	48 89 f8             	mov    %rdi,%rax
  4211ce:	49 89 e1             	mov    %rsp,%r9
  4211d1:	31 ff                	xor    %edi,%edi
  4211d3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        if (vec & 1)
  4211d8:	a8 01                	test   $0x1,%al
  4211da:	74 03                	je     4211df <crc32_combine+0x1af>
            sum ^= *mat;
  4211dc:	49 33 39             	xor    (%r9),%rdi
        vec >>= 1;
        mat++;
  4211df:	49 83 c1 08          	add    $0x8,%r9
    unsigned long vec;
{
    unsigned long sum;

    sum = 0;
    while (vec) {
  4211e3:	48 d1 e8             	shr    %rax
  4211e6:	75 f0                	jne    4211d8 <crc32_combine+0x1a8>
        if (len2 & 1)
            crc1 = gf2_matrix_times(even, crc1);
        len2 >>= 1;

        /* if no more bits set, then done */
        if (len2 == 0)
  4211e8:	48 d1 fa             	sar    %rdx
  4211eb:	74 6c                	je     421259 <crc32_combine+0x229>
  4211ed:	45 31 db             	xor    %r11d,%r11d
    unsigned long *mat;
{
    int n;

    for (n = 0; n < GF2_DIM; n++)
        square[n] = gf2_matrix_times(mat, mat[n]);
  4211f0:	4a 8b 04 1c          	mov    (%rsp,%r11,1),%rax
    unsigned long vec;
{
    unsigned long sum;

    sum = 0;
    while (vec) {
  4211f4:	45 31 d2             	xor    %r10d,%r10d
  4211f7:	48 85 c0             	test   %rax,%rax
  4211fa:	74 14                	je     421210 <crc32_combine+0x1e0>
  4211fc:	49 89 e0             	mov    %rsp,%r8
  4211ff:	90                   	nop
        if (vec & 1)
  421200:	a8 01                	test   $0x1,%al
  421202:	74 03                	je     421207 <crc32_combine+0x1d7>
            sum ^= *mat;
  421204:	4d 33 10             	xor    (%r8),%r10
        vec >>= 1;
        mat++;
  421207:	49 83 c0 08          	add    $0x8,%r8
    unsigned long vec;
{
    unsigned long sum;

    sum = 0;
    while (vec) {
  42120b:	48 d1 e8             	shr    %rax
  42120e:	75 f0                	jne    421200 <crc32_combine+0x1d0>
    unsigned long *mat;
{
    int n;

    for (n = 0; n < GF2_DIM; n++)
        square[n] = gf2_matrix_times(mat, mat[n]);
  421210:	4e 89 94 1c 00 01 00 	mov    %r10,0x100(%rsp,%r11,1)
  421217:	00 
  421218:	49 83 c3 08          	add    $0x8,%r11
    unsigned long *square;
    unsigned long *mat;
{
    int n;

    for (n = 0; n < GF2_DIM; n++)
  42121c:	49 81 fb 00 01 00 00 	cmp    $0x100,%r11
  421223:	75 cb                	jne    4211f0 <crc32_combine+0x1c0>
        if (len2 == 0)
            break;

        /* another iteration of the loop with odd and even swapped */
        gf2_matrix_square(odd, even);
        if (len2 & 1)
  421225:	f6 c2 01             	test   $0x1,%dl
  421228:	74 26                	je     421250 <crc32_combine+0x220>
    unsigned long vec;
{
    unsigned long sum;

    sum = 0;
    while (vec) {
  42122a:	48 85 ff             	test   %rdi,%rdi
  42122d:	74 21                	je     421250 <crc32_combine+0x220>
  42122f:	48 8d 8c 24 00 01 00 	lea    0x100(%rsp),%rcx
  421236:	00 
  421237:	48 89 f8             	mov    %rdi,%rax
  42123a:	31 ff                	xor    %edi,%edi
  42123c:	0f 1f 40 00          	nopl   0x0(%rax)
        if (vec & 1)
  421240:	a8 01                	test   $0x1,%al
  421242:	74 03                	je     421247 <crc32_combine+0x217>
            sum ^= *mat;
  421244:	48 33 39             	xor    (%rcx),%rdi
        vec >>= 1;
        mat++;
  421247:	48 83 c1 08          	add    $0x8,%rcx
    unsigned long vec;
{
    unsigned long sum;

    sum = 0;
    while (vec) {
  42124b:	48 d1 e8             	shr    %rax
  42124e:	75 f0                	jne    421240 <crc32_combine+0x210>
        if (len2 & 1)
            crc1 = gf2_matrix_times(odd, crc1);
        len2 >>= 1;

        /* if no more bits set, then done */
    } while (len2 != 0);
  421250:	48 d1 fa             	sar    %rdx
  421253:	0f 85 1c ff ff ff    	jne    421175 <crc32_combine+0x145>

    /* return combined crc */
    crc1 ^= crc2;
    return crc1;
  421259:	48 89 f8             	mov    %rdi,%rax
  42125c:	48 31 f0             	xor    %rsi,%rax
}
  42125f:	48 8b b4 24 08 02 00 	mov    0x208(%rsp),%rsi
  421266:	00 
  421267:	64 48 33 34 25 28 00 	xor    %fs:0x28,%rsi
  42126e:	00 00 
  421270:	75 08                	jne    42127a <crc32_combine+0x24a>
  421272:	48 81 c4 18 02 00 00 	add    $0x218,%rsp
  421279:	c3                   	retq   
  42127a:	e8 41 5c fe ff       	callq  406ec0 <__stack_chk_fail@plt>
  42127f:	90                   	nop

0000000000421280 <SHA1_Update>:
  421280:	48 85 d2             	test   %rdx,%rdx
  421283:	41 56                	push   %r14
  421285:	41 55                	push   %r13
  421287:	41 54                	push   %r12
  421289:	55                   	push   %rbp
  42128a:	53                   	push   %rbx
  42128b:	48 89 d3             	mov    %rdx,%rbx
  42128e:	0f 84 0f 01 00 00    	je     4213a3 <SHA1_Update+0x123>
  421294:	8b 47 14             	mov    0x14(%rdi),%eax
  421297:	41 89 d6             	mov    %edx,%r14d
  42129a:	48 89 fd             	mov    %rdi,%rbp
  42129d:	49 89 f5             	mov    %rsi,%r13
  4212a0:	8d 14 d0             	lea    (%rax,%rdx,8),%edx
  4212a3:	39 d0                	cmp    %edx,%eax
  4212a5:	0f 87 0d 01 00 00    	ja     4213b8 <SHA1_Update+0x138>
  4212ab:	8b 4f 18             	mov    0x18(%rdi),%ecx
  4212ae:	48 89 d8             	mov    %rbx,%rax
  4212b1:	89 55 14             	mov    %edx,0x14(%rbp)
  4212b4:	48 c1 e8 1d          	shr    $0x1d,%rax
  4212b8:	01 c8                	add    %ecx,%eax
  4212ba:	89 45 18             	mov    %eax,0x18(%rbp)
  4212bd:	8b 45 5c             	mov    0x5c(%rbp),%eax
  4212c0:	48 85 c0             	test   %rax,%rax
  4212c3:	0f 84 b7 00 00 00    	je     421380 <SHA1_Update+0x100>
  4212c9:	48 83 fb 3f          	cmp    $0x3f,%rbx
  4212cd:	4c 8d 65 1c          	lea    0x1c(%rbp),%r12
  4212d1:	77 0e                	ja     4212e1 <SHA1_Update+0x61>
  4212d3:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  4212d7:	48 83 fa 3f          	cmp    $0x3f,%rdx
  4212db:	0f 86 5f 01 00 00    	jbe    421440 <SHA1_Update+0x1c0>
  4212e1:	41 be 40 00 00 00    	mov    $0x40,%r14d
  4212e7:	49 29 c6             	sub    %rax,%r14
  4212ea:	4c 01 e0             	add    %r12,%rax
  4212ed:	49 83 fe 08          	cmp    $0x8,%r14
  4212f1:	0f 83 d1 00 00 00    	jae    4213c8 <SHA1_Update+0x148>
  4212f7:	41 f6 c6 04          	test   $0x4,%r14b
  4212fb:	0f 85 5f 01 00 00    	jne    421460 <SHA1_Update+0x1e0>
  421301:	4d 85 f6             	test   %r14,%r14
  421304:	74 11                	je     421317 <SHA1_Update+0x97>
  421306:	41 0f b6 55 00       	movzbl 0x0(%r13),%edx
  42130b:	41 f6 c6 02          	test   $0x2,%r14b
  42130f:	88 10                	mov    %dl,(%rax)
  421311:	0f 85 5e 01 00 00    	jne    421475 <SHA1_Update+0x1f5>
  421317:	4c 89 e6             	mov    %r12,%rsi
  42131a:	48 89 ef             	mov    %rbp,%rdi
  42131d:	ba 01 00 00 00       	mov    $0x1,%edx
  421322:	e8 99 03 00 00       	callq  4216c0 <sha1_block_data_order>
  421327:	49 8d 7c 24 08       	lea    0x8(%r12),%rdi
  42132c:	4c 29 f3             	sub    %r14,%rbx
  42132f:	c7 45 5c 00 00 00 00 	movl   $0x0,0x5c(%rbp)
  421336:	48 c7 45 1c 00 00 00 	movq   $0x0,0x1c(%rbp)
  42133d:	00 
  42133e:	49 c7 44 24 38 00 00 	movq   $0x0,0x38(%r12)
  421345:	00 00 
  421347:	31 c0                	xor    %eax,%eax
  421349:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
  42134d:	4d 01 f5             	add    %r14,%r13
  421350:	49 29 fc             	sub    %rdi,%r12
  421353:	41 8d 4c 24 40       	lea    0x40(%r12),%ecx
  421358:	49 89 dc             	mov    %rbx,%r12
  42135b:	49 c1 ec 06          	shr    $0x6,%r12
  42135f:	c1 e9 03             	shr    $0x3,%ecx
  421362:	4d 85 e4             	test   %r12,%r12
  421365:	f3 48 ab             	rep stos %rax,%es:(%rdi)
  421368:	0f 85 b2 00 00 00    	jne    421420 <SHA1_Update+0x1a0>
  42136e:	48 85 db             	test   %rbx,%rbx
  421371:	74 30                	je     4213a3 <SHA1_Update+0x123>
  421373:	41 89 de             	mov    %ebx,%r14d
  421376:	eb 18                	jmp    421390 <SHA1_Update+0x110>
  421378:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  42137f:	00 
  421380:	49 89 dc             	mov    %rbx,%r12
  421383:	49 c1 ec 06          	shr    $0x6,%r12
  421387:	4d 85 e4             	test   %r12,%r12
  42138a:	0f 85 90 00 00 00    	jne    421420 <SHA1_Update+0x1a0>
  421390:	48 8d 7d 1c          	lea    0x1c(%rbp),%rdi
  421394:	44 89 75 5c          	mov    %r14d,0x5c(%rbp)
  421398:	48 89 da             	mov    %rbx,%rdx
  42139b:	4c 89 ee             	mov    %r13,%rsi
  42139e:	e8 4d 5c fe ff       	callq  406ff0 <memcpy@plt>
  4213a3:	5b                   	pop    %rbx
  4213a4:	b8 01 00 00 00       	mov    $0x1,%eax
  4213a9:	5d                   	pop    %rbp
  4213aa:	41 5c                	pop    %r12
  4213ac:	41 5d                	pop    %r13
  4213ae:	41 5e                	pop    %r14
  4213b0:	c3                   	retq   
  4213b1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  4213b8:	8b 47 18             	mov    0x18(%rdi),%eax
  4213bb:	8d 48 01             	lea    0x1(%rax),%ecx
  4213be:	e9 eb fe ff ff       	jmpq   4212ae <SHA1_Update+0x2e>
  4213c3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4213c8:	49 8b 55 00          	mov    0x0(%r13),%rdx
  4213cc:	48 8d 48 08          	lea    0x8(%rax),%rcx
  4213d0:	4c 89 ee             	mov    %r13,%rsi
  4213d3:	48 83 e1 f8          	and    $0xfffffffffffffff8,%rcx
  4213d7:	48 89 10             	mov    %rdx,(%rax)
  4213da:	4b 8b 54 2e f8       	mov    -0x8(%r14,%r13,1),%rdx
  4213df:	49 89 54 06 f8       	mov    %rdx,-0x8(%r14,%rax,1)
  4213e4:	48 29 c8             	sub    %rcx,%rax
  4213e7:	48 29 c6             	sub    %rax,%rsi
  4213ea:	4c 01 f0             	add    %r14,%rax
  4213ed:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
  4213f1:	48 83 f8 08          	cmp    $0x8,%rax
  4213f5:	0f 82 1c ff ff ff    	jb     421317 <SHA1_Update+0x97>
  4213fb:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
  4213ff:	31 d2                	xor    %edx,%edx
  421401:	48 8b 3c 16          	mov    (%rsi,%rdx,1),%rdi
  421405:	48 89 3c 11          	mov    %rdi,(%rcx,%rdx,1)
  421409:	48 83 c2 08          	add    $0x8,%rdx
  42140d:	48 39 c2             	cmp    %rax,%rdx
  421410:	72 ef                	jb     421401 <SHA1_Update+0x181>
  421412:	e9 00 ff ff ff       	jmpq   421317 <SHA1_Update+0x97>
  421417:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  42141e:	00 00 
  421420:	4c 89 e2             	mov    %r12,%rdx
  421423:	4c 89 ee             	mov    %r13,%rsi
  421426:	49 c1 e4 06          	shl    $0x6,%r12
  42142a:	48 89 ef             	mov    %rbp,%rdi
  42142d:	4d 01 e5             	add    %r12,%r13
  421430:	4c 29 e3             	sub    %r12,%rbx
  421433:	e8 88 02 00 00       	callq  4216c0 <sha1_block_data_order>
  421438:	e9 31 ff ff ff       	jmpq   42136e <SHA1_Update+0xee>
  42143d:	0f 1f 00             	nopl   (%rax)
  421440:	49 8d 3c 04          	lea    (%r12,%rax,1),%rdi
  421444:	48 89 da             	mov    %rbx,%rdx
  421447:	4c 89 ee             	mov    %r13,%rsi
  42144a:	e8 a1 5b fe ff       	callq  406ff0 <memcpy@plt>
  42144f:	44 01 75 5c          	add    %r14d,0x5c(%rbp)
  421453:	e9 4b ff ff ff       	jmpq   4213a3 <SHA1_Update+0x123>
  421458:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  42145f:	00 
  421460:	41 8b 55 00          	mov    0x0(%r13),%edx
  421464:	89 10                	mov    %edx,(%rax)
  421466:	43 8b 54 2e fc       	mov    -0x4(%r14,%r13,1),%edx
  42146b:	41 89 54 06 fc       	mov    %edx,-0x4(%r14,%rax,1)
  421470:	e9 a2 fe ff ff       	jmpq   421317 <SHA1_Update+0x97>
  421475:	43 0f b7 54 2e fe    	movzwl -0x2(%r14,%r13,1),%edx
  42147b:	66 41 89 54 06 fe    	mov    %dx,-0x2(%r14,%rax,1)
  421481:	e9 91 fe ff ff       	jmpq   421317 <SHA1_Update+0x97>
  421486:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  42148d:	00 00 00 

0000000000421490 <SHA1_Transform>:
  421490:	ba 01 00 00 00       	mov    $0x1,%edx
  421495:	e9 26 02 00 00       	jmpq   4216c0 <sha1_block_data_order>
  42149a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000004214a0 <SHA1_Final>:
  4214a0:	41 54                	push   %r12
  4214a2:	55                   	push   %rbp
  4214a3:	49 89 fc             	mov    %rdi,%r12
  4214a6:	53                   	push   %rbx
  4214a7:	8b 4e 5c             	mov    0x5c(%rsi),%ecx
  4214aa:	48 89 f3             	mov    %rsi,%rbx
  4214ad:	48 8d 6e 1c          	lea    0x1c(%rsi),%rbp
  4214b1:	48 8d 41 01          	lea    0x1(%rcx),%rax
  4214b5:	c6 44 0e 1c 80       	movb   $0x80,0x1c(%rsi,%rcx,1)
  4214ba:	48 83 f8 38          	cmp    $0x38,%rax
  4214be:	0f 87 0c 01 00 00    	ja     4215d0 <SHA1_Final+0x130>
  4214c4:	ba 37 00 00 00       	mov    $0x37,%edx
  4214c9:	48 29 ca             	sub    %rcx,%rdx
  4214cc:	48 01 e8             	add    %rbp,%rax
  4214cf:	83 fa 08             	cmp    $0x8,%edx
  4214d2:	89 d1                	mov    %edx,%ecx
  4214d4:	0f 83 a6 00 00 00    	jae    421580 <SHA1_Final+0xe0>
  4214da:	83 e2 04             	and    $0x4,%edx
  4214dd:	0f 85 2d 01 00 00    	jne    421610 <SHA1_Final+0x170>
  4214e3:	85 c9                	test   %ecx,%ecx
  4214e5:	74 0c                	je     4214f3 <SHA1_Final+0x53>
  4214e7:	f6 c1 02             	test   $0x2,%cl
  4214ea:	c6 00 00             	movb   $0x0,(%rax)
  4214ed:	0f 85 35 01 00 00    	jne    421628 <SHA1_Final+0x188>
  4214f3:	8b 43 18             	mov    0x18(%rbx),%eax
  4214f6:	48 89 df             	mov    %rbx,%rdi
  4214f9:	48 89 ee             	mov    %rbp,%rsi
  4214fc:	0f c8                	bswap  %eax
  4214fe:	ba 01 00 00 00       	mov    $0x1,%edx
  421503:	89 43 54             	mov    %eax,0x54(%rbx)
  421506:	8b 43 14             	mov    0x14(%rbx),%eax
  421509:	0f c8                	bswap  %eax
  42150b:	89 43 58             	mov    %eax,0x58(%rbx)
  42150e:	e8 ad 01 00 00       	callq  4216c0 <sha1_block_data_order>
  421513:	48 8d 7d 08          	lea    0x8(%rbp),%rdi
  421517:	c7 43 5c 00 00 00 00 	movl   $0x0,0x5c(%rbx)
  42151e:	48 c7 43 1c 00 00 00 	movq   $0x0,0x1c(%rbx)
  421525:	00 
  421526:	48 c7 45 38 00 00 00 	movq   $0x0,0x38(%rbp)
  42152d:	00 
  42152e:	31 c0                	xor    %eax,%eax
  421530:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
  421534:	48 29 fd             	sub    %rdi,%rbp
  421537:	8d 4d 40             	lea    0x40(%rbp),%ecx
  42153a:	c1 e9 03             	shr    $0x3,%ecx
  42153d:	f3 48 ab             	rep stos %rax,%es:(%rdi)
  421540:	8b 03                	mov    (%rbx),%eax
  421542:	0f c8                	bswap  %eax
  421544:	41 89 04 24          	mov    %eax,(%r12)
  421548:	8b 43 04             	mov    0x4(%rbx),%eax
  42154b:	0f c8                	bswap  %eax
  42154d:	41 89 44 24 04       	mov    %eax,0x4(%r12)
  421552:	8b 43 08             	mov    0x8(%rbx),%eax
  421555:	0f c8                	bswap  %eax
  421557:	41 89 44 24 08       	mov    %eax,0x8(%r12)
  42155c:	8b 43 0c             	mov    0xc(%rbx),%eax
  42155f:	0f c8                	bswap  %eax
  421561:	41 89 44 24 0c       	mov    %eax,0xc(%r12)
  421566:	8b 43 10             	mov    0x10(%rbx),%eax
  421569:	5b                   	pop    %rbx
  42156a:	0f c8                	bswap  %eax
  42156c:	5d                   	pop    %rbp
  42156d:	41 89 44 24 10       	mov    %eax,0x10(%r12)
  421572:	b8 01 00 00 00       	mov    $0x1,%eax
  421577:	41 5c                	pop    %r12
  421579:	c3                   	retq   
  42157a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  421580:	48 8d 70 08          	lea    0x8(%rax),%rsi
  421584:	89 d1                	mov    %edx,%ecx
  421586:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  42158d:	48 c7 44 08 f8 00 00 	movq   $0x0,-0x8(%rax,%rcx,1)
  421594:	00 00 
  421596:	48 83 e6 f8          	and    $0xfffffffffffffff8,%rsi
  42159a:	48 29 f0             	sub    %rsi,%rax
  42159d:	8d 0c 02             	lea    (%rdx,%rax,1),%ecx
  4215a0:	83 e1 f8             	and    $0xfffffff8,%ecx
  4215a3:	83 f9 08             	cmp    $0x8,%ecx
  4215a6:	0f 82 47 ff ff ff    	jb     4214f3 <SHA1_Final+0x53>
  4215ac:	89 c8                	mov    %ecx,%eax
  4215ae:	31 d2                	xor    %edx,%edx
  4215b0:	83 e0 f8             	and    $0xfffffff8,%eax
  4215b3:	89 d1                	mov    %edx,%ecx
  4215b5:	83 c2 08             	add    $0x8,%edx
  4215b8:	39 c2                	cmp    %eax,%edx
  4215ba:	48 c7 04 0e 00 00 00 	movq   $0x0,(%rsi,%rcx,1)
  4215c1:	00 
  4215c2:	72 ef                	jb     4215b3 <SHA1_Final+0x113>
  4215c4:	e9 2a ff ff ff       	jmpq   4214f3 <SHA1_Final+0x53>
  4215c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  4215d0:	ba 3f 00 00 00       	mov    $0x3f,%edx
  4215d5:	48 01 e8             	add    %rbp,%rax
  4215d8:	48 29 ca             	sub    %rcx,%rdx
  4215db:	74 0f                	je     4215ec <SHA1_Final+0x14c>
  4215dd:	31 c9                	xor    %ecx,%ecx
  4215df:	c6 04 08 00          	movb   $0x0,(%rax,%rcx,1)
  4215e3:	48 83 c1 01          	add    $0x1,%rcx
  4215e7:	48 39 d1             	cmp    %rdx,%rcx
  4215ea:	72 f3                	jb     4215df <SHA1_Final+0x13f>
  4215ec:	ba 01 00 00 00       	mov    $0x1,%edx
  4215f1:	48 89 ee             	mov    %rbp,%rsi
  4215f4:	48 89 df             	mov    %rbx,%rdi
  4215f7:	e8 c4 00 00 00       	callq  4216c0 <sha1_block_data_order>
  4215fc:	ba 38 00 00 00       	mov    $0x38,%edx
  421601:	31 c0                	xor    %eax,%eax
  421603:	e9 c4 fe ff ff       	jmpq   4214cc <SHA1_Final+0x2c>
  421608:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  42160f:	00 
  421610:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  421616:	c7 44 08 fc 00 00 00 	movl   $0x0,-0x4(%rax,%rcx,1)
  42161d:	00 
  42161e:	e9 d0 fe ff ff       	jmpq   4214f3 <SHA1_Final+0x53>
  421623:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  421628:	31 d2                	xor    %edx,%edx
  42162a:	66 89 54 08 fe       	mov    %dx,-0x2(%rax,%rcx,1)
  42162f:	e9 bf fe ff ff       	jmpq   4214f3 <SHA1_Final+0x53>
  421634:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
  42163b:	00 00 00 00 00 

0000000000421640 <SHA1_Init>:
  421640:	48 c7 47 58 00 00 00 	movq   $0x0,0x58(%rdi)
  421647:	00 
  421648:	48 89 fa             	mov    %rdi,%rdx
  42164b:	48 8d 7f 08          	lea    0x8(%rdi),%rdi
  42164f:	48 89 d1             	mov    %rdx,%rcx
  421652:	31 c0                	xor    %eax,%eax
  421654:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
  421658:	48 29 f9             	sub    %rdi,%rcx
  42165b:	83 c1 60             	add    $0x60,%ecx
  42165e:	c1 e9 03             	shr    $0x3,%ecx
  421661:	f3 48 ab             	rep stos %rax,%es:(%rdi)
  421664:	c7 02 01 23 45 67    	movl   $0x67452301,(%rdx)
  42166a:	c7 42 04 89 ab cd ef 	movl   $0xefcdab89,0x4(%rdx)
  421671:	b0 01                	mov    $0x1,%al
  421673:	c7 42 08 fe dc ba 98 	movl   $0x98badcfe,0x8(%rdx)
  42167a:	c7 42 0c 76 54 32 10 	movl   $0x10325476,0xc(%rdx)
  421681:	c7 42 10 f0 e1 d2 c3 	movl   $0xc3d2e1f0,0x10(%rdx)
  421688:	c3                   	retq   
  421689:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  421690:	00 00 00 
  421693:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  42169a:	00 00 00 
  42169d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4216a4:	00 00 00 
  4216a7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4216ae:	00 00 00 
  4216b1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4216b8:	00 00 00 
  4216bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000004216c0 <sha1_block_data_order>:
  4216c0:	44 8b 0d d9 93 e3 01 	mov    0x1e393d9(%rip),%r9d        # 225aaa0 <OPENSSL_ia32cap_P>
  4216c7:	44 8b 05 d6 93 e3 01 	mov    0x1e393d6(%rip),%r8d        # 225aaa4 <OPENSSL_ia32cap_P+0x4>
  4216ce:	41 f7 c0 00 02 00 00 	test   $0x200,%r8d
  4216d5:	74 29                	je     421700 <sha1_block_data_order+0x40>
  4216d7:	41 81 e0 00 00 00 10 	and    $0x10000000,%r8d
  4216de:	41 81 e1 00 00 00 40 	and    $0x40000000,%r9d
  4216e5:	45 09 c8             	or     %r9d,%r8d
  4216e8:	41 81 f8 00 00 00 50 	cmp    $0x50000000,%r8d
  4216ef:	0f 84 1b 1f 00 00    	je     423610 <sha1_block_data_order_avx>
  4216f5:	e9 b6 10 00 00       	jmpq   4227b0 <sha1_block_data_order_ssse3>
  4216fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  421700:	53                   	push   %rbx
  421701:	55                   	push   %rbp
  421702:	41 54                	push   %r12
  421704:	41 55                	push   %r13
  421706:	49 89 e3             	mov    %rsp,%r11
  421709:	49 89 f8             	mov    %rdi,%r8
  42170c:	48 83 ec 48          	sub    $0x48,%rsp
  421710:	49 89 f1             	mov    %rsi,%r9
  421713:	48 83 e4 c0          	and    $0xffffffffffffffc0,%rsp
  421717:	49 89 d2             	mov    %rdx,%r10
  42171a:	4c 89 5c 24 40       	mov    %r11,0x40(%rsp)
  42171f:	41 8b 30             	mov    (%r8),%esi
  421722:	41 8b 78 04          	mov    0x4(%r8),%edi
  421726:	45 8b 58 08          	mov    0x8(%r8),%r11d
  42172a:	45 8b 60 0c          	mov    0xc(%r8),%r12d
  42172e:	45 8b 68 10          	mov    0x10(%r8),%r13d
  421732:	eb 0c                	jmp    421740 <sha1_block_data_order+0x80>
  421734:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
  42173b:	00 00 00 00 00 
  421740:	41 8b 11             	mov    (%r9),%edx
  421743:	0f ca                	bswap  %edx
  421745:	89 14 24             	mov    %edx,(%rsp)
  421748:	44 89 d8             	mov    %r11d,%eax
  42174b:	41 8b 69 04          	mov    0x4(%r9),%ebp
  42174f:	89 f1                	mov    %esi,%ecx
  421751:	44 31 e0             	xor    %r12d,%eax
  421754:	0f cd                	bswap  %ebp
  421756:	c1 c1 05             	rol    $0x5,%ecx
  421759:	46 8d ac 2a 99 79 82 	lea    0x5a827999(%rdx,%r13,1),%r13d
  421760:	5a 
  421761:	21 f8                	and    %edi,%eax
  421763:	89 6c 24 04          	mov    %ebp,0x4(%rsp)
  421767:	41 01 cd             	add    %ecx,%r13d
  42176a:	44 31 e0             	xor    %r12d,%eax
  42176d:	c1 c7 1e             	rol    $0x1e,%edi
  421770:	41 01 c5             	add    %eax,%r13d
  421773:	89 f8                	mov    %edi,%eax
  421775:	41 8b 51 08          	mov    0x8(%r9),%edx
  421779:	44 89 e9             	mov    %r13d,%ecx
  42177c:	44 31 d8             	xor    %r11d,%eax
  42177f:	0f ca                	bswap  %edx
  421781:	c1 c1 05             	rol    $0x5,%ecx
  421784:	46 8d a4 25 99 79 82 	lea    0x5a827999(%rbp,%r12,1),%r12d
  42178b:	5a 
  42178c:	21 f0                	and    %esi,%eax
  42178e:	89 54 24 08          	mov    %edx,0x8(%rsp)
  421792:	41 01 cc             	add    %ecx,%r12d
  421795:	44 31 d8             	xor    %r11d,%eax
  421798:	c1 c6 1e             	rol    $0x1e,%esi
  42179b:	41 01 c4             	add    %eax,%r12d
  42179e:	89 f0                	mov    %esi,%eax
  4217a0:	41 8b 69 0c          	mov    0xc(%r9),%ebp
  4217a4:	44 89 e1             	mov    %r12d,%ecx
  4217a7:	31 f8                	xor    %edi,%eax
  4217a9:	0f cd                	bswap  %ebp
  4217ab:	c1 c1 05             	rol    $0x5,%ecx
  4217ae:	46 8d 9c 1a 99 79 82 	lea    0x5a827999(%rdx,%r11,1),%r11d
  4217b5:	5a 
  4217b6:	44 21 e8             	and    %r13d,%eax
  4217b9:	89 6c 24 0c          	mov    %ebp,0xc(%rsp)
  4217bd:	41 01 cb             	add    %ecx,%r11d
  4217c0:	31 f8                	xor    %edi,%eax
  4217c2:	41 c1 c5 1e          	rol    $0x1e,%r13d
  4217c6:	41 01 c3             	add    %eax,%r11d
  4217c9:	44 89 e8             	mov    %r13d,%eax
  4217cc:	41 8b 51 10          	mov    0x10(%r9),%edx
  4217d0:	44 89 d9             	mov    %r11d,%ecx
  4217d3:	31 f0                	xor    %esi,%eax
  4217d5:	0f ca                	bswap  %edx
  4217d7:	c1 c1 05             	rol    $0x5,%ecx
  4217da:	8d bc 3d 99 79 82 5a 	lea    0x5a827999(%rbp,%rdi,1),%edi
  4217e1:	44 21 e0             	and    %r12d,%eax
  4217e4:	89 54 24 10          	mov    %edx,0x10(%rsp)
  4217e8:	01 cf                	add    %ecx,%edi
  4217ea:	31 f0                	xor    %esi,%eax
  4217ec:	41 c1 c4 1e          	rol    $0x1e,%r12d
  4217f0:	01 c7                	add    %eax,%edi
  4217f2:	44 89 e0             	mov    %r12d,%eax
  4217f5:	41 8b 69 14          	mov    0x14(%r9),%ebp
  4217f9:	89 f9                	mov    %edi,%ecx
  4217fb:	44 31 e8             	xor    %r13d,%eax
  4217fe:	0f cd                	bswap  %ebp
  421800:	c1 c1 05             	rol    $0x5,%ecx
  421803:	8d b4 32 99 79 82 5a 	lea    0x5a827999(%rdx,%rsi,1),%esi
  42180a:	44 21 d8             	and    %r11d,%eax
  42180d:	89 6c 24 14          	mov    %ebp,0x14(%rsp)
  421811:	01 ce                	add    %ecx,%esi
  421813:	44 31 e8             	xor    %r13d,%eax
  421816:	41 c1 c3 1e          	rol    $0x1e,%r11d
  42181a:	01 c6                	add    %eax,%esi
  42181c:	44 89 d8             	mov    %r11d,%eax
  42181f:	41 8b 51 18          	mov    0x18(%r9),%edx
  421823:	89 f1                	mov    %esi,%ecx
  421825:	44 31 e0             	xor    %r12d,%eax
  421828:	0f ca                	bswap  %edx
  42182a:	c1 c1 05             	rol    $0x5,%ecx
  42182d:	46 8d ac 2d 99 79 82 	lea    0x5a827999(%rbp,%r13,1),%r13d
  421834:	5a 
  421835:	21 f8                	and    %edi,%eax
  421837:	89 54 24 18          	mov    %edx,0x18(%rsp)
  42183b:	41 01 cd             	add    %ecx,%r13d
  42183e:	44 31 e0             	xor    %r12d,%eax
  421841:	c1 c7 1e             	rol    $0x1e,%edi
  421844:	41 01 c5             	add    %eax,%r13d
  421847:	89 f8                	mov    %edi,%eax
  421849:	41 8b 69 1c          	mov    0x1c(%r9),%ebp
  42184d:	44 89 e9             	mov    %r13d,%ecx
  421850:	44 31 d8             	xor    %r11d,%eax
  421853:	0f cd                	bswap  %ebp
  421855:	c1 c1 05             	rol    $0x5,%ecx
  421858:	46 8d a4 22 99 79 82 	lea    0x5a827999(%rdx,%r12,1),%r12d
  42185f:	5a 
  421860:	21 f0                	and    %esi,%eax
  421862:	89 6c 24 1c          	mov    %ebp,0x1c(%rsp)
  421866:	41 01 cc             	add    %ecx,%r12d
  421869:	44 31 d8             	xor    %r11d,%eax
  42186c:	c1 c6 1e             	rol    $0x1e,%esi
  42186f:	41 01 c4             	add    %eax,%r12d
  421872:	89 f0                	mov    %esi,%eax
  421874:	41 8b 51 20          	mov    0x20(%r9),%edx
  421878:	44 89 e1             	mov    %r12d,%ecx
  42187b:	31 f8                	xor    %edi,%eax
  42187d:	0f ca                	bswap  %edx
  42187f:	c1 c1 05             	rol    $0x5,%ecx
  421882:	46 8d 9c 1d 99 79 82 	lea    0x5a827999(%rbp,%r11,1),%r11d
  421889:	5a 
  42188a:	44 21 e8             	and    %r13d,%eax
  42188d:	89 54 24 20          	mov    %edx,0x20(%rsp)
  421891:	41 01 cb             	add    %ecx,%r11d
  421894:	31 f8                	xor    %edi,%eax
  421896:	41 c1 c5 1e          	rol    $0x1e,%r13d
  42189a:	41 01 c3             	add    %eax,%r11d
  42189d:	44 89 e8             	mov    %r13d,%eax
  4218a0:	41 8b 69 24          	mov    0x24(%r9),%ebp
  4218a4:	44 89 d9             	mov    %r11d,%ecx
  4218a7:	31 f0                	xor    %esi,%eax
  4218a9:	0f cd                	bswap  %ebp
  4218ab:	c1 c1 05             	rol    $0x5,%ecx
  4218ae:	8d bc 3a 99 79 82 5a 	lea    0x5a827999(%rdx,%rdi,1),%edi
  4218b5:	44 21 e0             	and    %r12d,%eax
  4218b8:	89 6c 24 24          	mov    %ebp,0x24(%rsp)
  4218bc:	01 cf                	add    %ecx,%edi
  4218be:	31 f0                	xor    %esi,%eax
  4218c0:	41 c1 c4 1e          	rol    $0x1e,%r12d
  4218c4:	01 c7                	add    %eax,%edi
  4218c6:	44 89 e0             	mov    %r12d,%eax
  4218c9:	41 8b 51 28          	mov    0x28(%r9),%edx
  4218cd:	89 f9                	mov    %edi,%ecx
  4218cf:	44 31 e8             	xor    %r13d,%eax
  4218d2:	0f ca                	bswap  %edx
  4218d4:	c1 c1 05             	rol    $0x5,%ecx
  4218d7:	8d b4 35 99 79 82 5a 	lea    0x5a827999(%rbp,%rsi,1),%esi
  4218de:	44 21 d8             	and    %r11d,%eax
  4218e1:	89 54 24 28          	mov    %edx,0x28(%rsp)
  4218e5:	01 ce                	add    %ecx,%esi
  4218e7:	44 31 e8             	xor    %r13d,%eax
  4218ea:	41 c1 c3 1e          	rol    $0x1e,%r11d
  4218ee:	01 c6                	add    %eax,%esi
  4218f0:	44 89 d8             	mov    %r11d,%eax
  4218f3:	41 8b 69 2c          	mov    0x2c(%r9),%ebp
  4218f7:	89 f1                	mov    %esi,%ecx
  4218f9:	44 31 e0             	xor    %r12d,%eax
  4218fc:	0f cd                	bswap  %ebp
  4218fe:	c1 c1 05             	rol    $0x5,%ecx
  421901:	46 8d ac 2a 99 79 82 	lea    0x5a827999(%rdx,%r13,1),%r13d
  421908:	5a 
  421909:	21 f8                	and    %edi,%eax
  42190b:	89 6c 24 2c          	mov    %ebp,0x2c(%rsp)
  42190f:	41 01 cd             	add    %ecx,%r13d
  421912:	44 31 e0             	xor    %r12d,%eax
  421915:	c1 c7 1e             	rol    $0x1e,%edi
  421918:	41 01 c5             	add    %eax,%r13d
  42191b:	89 f8                	mov    %edi,%eax
  42191d:	41 8b 51 30          	mov    0x30(%r9),%edx
  421921:	44 89 e9             	mov    %r13d,%ecx
  421924:	44 31 d8             	xor    %r11d,%eax
  421927:	0f ca                	bswap  %edx
  421929:	c1 c1 05             	rol    $0x5,%ecx
  42192c:	46 8d a4 25 99 79 82 	lea    0x5a827999(%rbp,%r12,1),%r12d
  421933:	5a 
  421934:	21 f0                	and    %esi,%eax
  421936:	89 54 24 30          	mov    %edx,0x30(%rsp)
  42193a:	41 01 cc             	add    %ecx,%r12d
  42193d:	44 31 d8             	xor    %r11d,%eax
  421940:	c1 c6 1e             	rol    $0x1e,%esi
  421943:	41 01 c4             	add    %eax,%r12d
  421946:	89 f0                	mov    %esi,%eax
  421948:	41 8b 69 34          	mov    0x34(%r9),%ebp
  42194c:	44 89 e1             	mov    %r12d,%ecx
  42194f:	31 f8                	xor    %edi,%eax
  421951:	0f cd                	bswap  %ebp
  421953:	c1 c1 05             	rol    $0x5,%ecx
  421956:	46 8d 9c 1a 99 79 82 	lea    0x5a827999(%rdx,%r11,1),%r11d
  42195d:	5a 
  42195e:	44 21 e8             	and    %r13d,%eax
  421961:	89 6c 24 34          	mov    %ebp,0x34(%rsp)
  421965:	41 01 cb             	add    %ecx,%r11d
  421968:	31 f8                	xor    %edi,%eax
  42196a:	41 c1 c5 1e          	rol    $0x1e,%r13d
  42196e:	41 01 c3             	add    %eax,%r11d
  421971:	44 89 e8             	mov    %r13d,%eax
  421974:	41 8b 51 38          	mov    0x38(%r9),%edx
  421978:	44 89 d9             	mov    %r11d,%ecx
  42197b:	31 f0                	xor    %esi,%eax
  42197d:	0f ca                	bswap  %edx
  42197f:	c1 c1 05             	rol    $0x5,%ecx
  421982:	8d bc 3d 99 79 82 5a 	lea    0x5a827999(%rbp,%rdi,1),%edi
  421989:	44 21 e0             	and    %r12d,%eax
  42198c:	89 54 24 38          	mov    %edx,0x38(%rsp)
  421990:	01 cf                	add    %ecx,%edi
  421992:	31 f0                	xor    %esi,%eax
  421994:	41 c1 c4 1e          	rol    $0x1e,%r12d
  421998:	01 c7                	add    %eax,%edi
  42199a:	44 89 e0             	mov    %r12d,%eax
  42199d:	41 8b 69 3c          	mov    0x3c(%r9),%ebp
  4219a1:	89 f9                	mov    %edi,%ecx
  4219a3:	44 31 e8             	xor    %r13d,%eax
  4219a6:	0f cd                	bswap  %ebp
  4219a8:	c1 c1 05             	rol    $0x5,%ecx
  4219ab:	8d b4 32 99 79 82 5a 	lea    0x5a827999(%rdx,%rsi,1),%esi
  4219b2:	44 21 d8             	and    %r11d,%eax
  4219b5:	89 6c 24 3c          	mov    %ebp,0x3c(%rsp)
  4219b9:	01 ce                	add    %ecx,%esi
  4219bb:	44 31 e8             	xor    %r13d,%eax
  4219be:	41 c1 c3 1e          	rol    $0x1e,%r11d
  4219c2:	01 c6                	add    %eax,%esi
  4219c4:	8b 14 24             	mov    (%rsp),%edx
  4219c7:	44 89 d8             	mov    %r11d,%eax
  4219ca:	89 f1                	mov    %esi,%ecx
  4219cc:	33 54 24 08          	xor    0x8(%rsp),%edx
  4219d0:	44 31 e0             	xor    %r12d,%eax
  4219d3:	c1 c1 05             	rol    $0x5,%ecx
  4219d6:	33 54 24 20          	xor    0x20(%rsp),%edx
  4219da:	21 f8                	and    %edi,%eax
  4219dc:	46 8d ac 2d 99 79 82 	lea    0x5a827999(%rbp,%r13,1),%r13d
  4219e3:	5a 
  4219e4:	33 54 24 34          	xor    0x34(%rsp),%edx
  4219e8:	44 31 e0             	xor    %r12d,%eax
  4219eb:	d1 c2                	rol    %edx
  4219ed:	41 01 cd             	add    %ecx,%r13d
  4219f0:	c1 c7 1e             	rol    $0x1e,%edi
  4219f3:	89 14 24             	mov    %edx,(%rsp)
  4219f6:	41 01 c5             	add    %eax,%r13d
  4219f9:	8b 6c 24 04          	mov    0x4(%rsp),%ebp
  4219fd:	89 f8                	mov    %edi,%eax
  4219ff:	44 89 e9             	mov    %r13d,%ecx
  421a02:	33 6c 24 0c          	xor    0xc(%rsp),%ebp
  421a06:	44 31 d8             	xor    %r11d,%eax
  421a09:	c1 c1 05             	rol    $0x5,%ecx
  421a0c:	33 6c 24 24          	xor    0x24(%rsp),%ebp
  421a10:	21 f0                	and    %esi,%eax
  421a12:	46 8d a4 22 99 79 82 	lea    0x5a827999(%rdx,%r12,1),%r12d
  421a19:	5a 
  421a1a:	33 6c 24 38          	xor    0x38(%rsp),%ebp
  421a1e:	44 31 d8             	xor    %r11d,%eax
  421a21:	d1 c5                	rol    %ebp
  421a23:	41 01 cc             	add    %ecx,%r12d
  421a26:	c1 c6 1e             	rol    $0x1e,%esi
  421a29:	89 6c 24 04          	mov    %ebp,0x4(%rsp)
  421a2d:	41 01 c4             	add    %eax,%r12d
  421a30:	8b 54 24 08          	mov    0x8(%rsp),%edx
  421a34:	89 f0                	mov    %esi,%eax
  421a36:	44 89 e1             	mov    %r12d,%ecx
  421a39:	33 54 24 10          	xor    0x10(%rsp),%edx
  421a3d:	31 f8                	xor    %edi,%eax
  421a3f:	c1 c1 05             	rol    $0x5,%ecx
  421a42:	33 54 24 28          	xor    0x28(%rsp),%edx
  421a46:	44 21 e8             	and    %r13d,%eax
  421a49:	46 8d 9c 1d 99 79 82 	lea    0x5a827999(%rbp,%r11,1),%r11d
  421a50:	5a 
  421a51:	33 54 24 3c          	xor    0x3c(%rsp),%edx
  421a55:	31 f8                	xor    %edi,%eax
  421a57:	d1 c2                	rol    %edx
  421a59:	41 01 cb             	add    %ecx,%r11d
  421a5c:	41 c1 c5 1e          	rol    $0x1e,%r13d
  421a60:	89 54 24 08          	mov    %edx,0x8(%rsp)
  421a64:	41 01 c3             	add    %eax,%r11d
  421a67:	8b 6c 24 0c          	mov    0xc(%rsp),%ebp
  421a6b:	44 89 e8             	mov    %r13d,%eax
  421a6e:	44 89 d9             	mov    %r11d,%ecx
  421a71:	33 6c 24 14          	xor    0x14(%rsp),%ebp
  421a75:	31 f0                	xor    %esi,%eax
  421a77:	c1 c1 05             	rol    $0x5,%ecx
  421a7a:	33 6c 24 2c          	xor    0x2c(%rsp),%ebp
  421a7e:	44 21 e0             	and    %r12d,%eax
  421a81:	8d bc 3a 99 79 82 5a 	lea    0x5a827999(%rdx,%rdi,1),%edi
  421a88:	33 2c 24             	xor    (%rsp),%ebp
  421a8b:	31 f0                	xor    %esi,%eax
  421a8d:	d1 c5                	rol    %ebp
  421a8f:	01 cf                	add    %ecx,%edi
  421a91:	41 c1 c4 1e          	rol    $0x1e,%r12d
  421a95:	89 6c 24 0c          	mov    %ebp,0xc(%rsp)
  421a99:	01 c7                	add    %eax,%edi
  421a9b:	8b 54 24 10          	mov    0x10(%rsp),%edx
  421a9f:	44 89 e0             	mov    %r12d,%eax
  421aa2:	89 f9                	mov    %edi,%ecx
  421aa4:	33 54 24 18          	xor    0x18(%rsp),%edx
  421aa8:	44 31 e8             	xor    %r13d,%eax
  421aab:	c1 c1 05             	rol    $0x5,%ecx
  421aae:	33 54 24 30          	xor    0x30(%rsp),%edx
  421ab2:	44 21 d8             	and    %r11d,%eax
  421ab5:	8d b4 35 99 79 82 5a 	lea    0x5a827999(%rbp,%rsi,1),%esi
  421abc:	33 54 24 04          	xor    0x4(%rsp),%edx
  421ac0:	44 31 e8             	xor    %r13d,%eax
  421ac3:	d1 c2                	rol    %edx
  421ac5:	01 ce                	add    %ecx,%esi
  421ac7:	41 c1 c3 1e          	rol    $0x1e,%r11d
  421acb:	89 54 24 10          	mov    %edx,0x10(%rsp)
  421acf:	01 c6                	add    %eax,%esi
  421ad1:	8b 6c 24 14          	mov    0x14(%rsp),%ebp
  421ad5:	44 89 d8             	mov    %r11d,%eax
  421ad8:	89 f1                	mov    %esi,%ecx
  421ada:	33 6c 24 1c          	xor    0x1c(%rsp),%ebp
  421ade:	31 f8                	xor    %edi,%eax
  421ae0:	c1 c1 05             	rol    $0x5,%ecx
  421ae3:	46 8d ac 2a a1 eb d9 	lea    0x6ed9eba1(%rdx,%r13,1),%r13d
  421aea:	6e 
  421aeb:	33 6c 24 34          	xor    0x34(%rsp),%ebp
  421aef:	44 31 e0             	xor    %r12d,%eax
  421af2:	41 01 cd             	add    %ecx,%r13d
  421af5:	33 6c 24 08          	xor    0x8(%rsp),%ebp
  421af9:	c1 c7 1e             	rol    $0x1e,%edi
  421afc:	41 01 c5             	add    %eax,%r13d
  421aff:	d1 c5                	rol    %ebp
  421b01:	89 6c 24 14          	mov    %ebp,0x14(%rsp)
  421b05:	8b 54 24 18          	mov    0x18(%rsp),%edx
  421b09:	89 f8                	mov    %edi,%eax
  421b0b:	44 89 e9             	mov    %r13d,%ecx
  421b0e:	33 54 24 20          	xor    0x20(%rsp),%edx
  421b12:	31 f0                	xor    %esi,%eax
  421b14:	c1 c1 05             	rol    $0x5,%ecx
  421b17:	46 8d a4 25 a1 eb d9 	lea    0x6ed9eba1(%rbp,%r12,1),%r12d
  421b1e:	6e 
  421b1f:	33 54 24 38          	xor    0x38(%rsp),%edx
  421b23:	44 31 d8             	xor    %r11d,%eax
  421b26:	41 01 cc             	add    %ecx,%r12d
  421b29:	33 54 24 0c          	xor    0xc(%rsp),%edx
  421b2d:	c1 c6 1e             	rol    $0x1e,%esi
  421b30:	41 01 c4             	add    %eax,%r12d
  421b33:	d1 c2                	rol    %edx
  421b35:	89 54 24 18          	mov    %edx,0x18(%rsp)
  421b39:	8b 6c 24 1c          	mov    0x1c(%rsp),%ebp
  421b3d:	89 f0                	mov    %esi,%eax
  421b3f:	44 89 e1             	mov    %r12d,%ecx
  421b42:	33 6c 24 24          	xor    0x24(%rsp),%ebp
  421b46:	44 31 e8             	xor    %r13d,%eax
  421b49:	c1 c1 05             	rol    $0x5,%ecx
  421b4c:	46 8d 9c 1a a1 eb d9 	lea    0x6ed9eba1(%rdx,%r11,1),%r11d
  421b53:	6e 
  421b54:	33 6c 24 3c          	xor    0x3c(%rsp),%ebp
  421b58:	31 f8                	xor    %edi,%eax
  421b5a:	41 01 cb             	add    %ecx,%r11d
  421b5d:	33 6c 24 10          	xor    0x10(%rsp),%ebp
  421b61:	41 c1 c5 1e          	rol    $0x1e,%r13d
  421b65:	41 01 c3             	add    %eax,%r11d
  421b68:	d1 c5                	rol    %ebp
  421b6a:	89 6c 24 1c          	mov    %ebp,0x1c(%rsp)
  421b6e:	8b 54 24 20          	mov    0x20(%rsp),%edx
  421b72:	44 89 e8             	mov    %r13d,%eax
  421b75:	44 89 d9             	mov    %r11d,%ecx
  421b78:	33 54 24 28          	xor    0x28(%rsp),%edx
  421b7c:	44 31 e0             	xor    %r12d,%eax
  421b7f:	c1 c1 05             	rol    $0x5,%ecx
  421b82:	8d bc 3d a1 eb d9 6e 	lea    0x6ed9eba1(%rbp,%rdi,1),%edi
  421b89:	33 14 24             	xor    (%rsp),%edx
  421b8c:	31 f0                	xor    %esi,%eax
  421b8e:	01 cf                	add    %ecx,%edi
  421b90:	33 54 24 14          	xor    0x14(%rsp),%edx
  421b94:	41 c1 c4 1e          	rol    $0x1e,%r12d
  421b98:	01 c7                	add    %eax,%edi
  421b9a:	d1 c2                	rol    %edx
  421b9c:	89 54 24 20          	mov    %edx,0x20(%rsp)
  421ba0:	8b 6c 24 24          	mov    0x24(%rsp),%ebp
  421ba4:	44 89 e0             	mov    %r12d,%eax
  421ba7:	89 f9                	mov    %edi,%ecx
  421ba9:	33 6c 24 2c          	xor    0x2c(%rsp),%ebp
  421bad:	44 31 d8             	xor    %r11d,%eax
  421bb0:	c1 c1 05             	rol    $0x5,%ecx
  421bb3:	8d b4 32 a1 eb d9 6e 	lea    0x6ed9eba1(%rdx,%rsi,1),%esi
  421bba:	33 6c 24 04          	xor    0x4(%rsp),%ebp
  421bbe:	44 31 e8             	xor    %r13d,%eax
  421bc1:	01 ce                	add    %ecx,%esi
  421bc3:	33 6c 24 18          	xor    0x18(%rsp),%ebp
  421bc7:	41 c1 c3 1e          	rol    $0x1e,%r11d
  421bcb:	01 c6                	add    %eax,%esi
  421bcd:	d1 c5                	rol    %ebp
  421bcf:	89 6c 24 24          	mov    %ebp,0x24(%rsp)
  421bd3:	8b 54 24 28          	mov    0x28(%rsp),%edx
  421bd7:	44 89 d8             	mov    %r11d,%eax
  421bda:	89 f1                	mov    %esi,%ecx
  421bdc:	33 54 24 30          	xor    0x30(%rsp),%edx
  421be0:	31 f8                	xor    %edi,%eax
  421be2:	c1 c1 05             	rol    $0x5,%ecx
  421be5:	46 8d ac 2d a1 eb d9 	lea    0x6ed9eba1(%rbp,%r13,1),%r13d
  421bec:	6e 
  421bed:	33 54 24 08          	xor    0x8(%rsp),%edx
  421bf1:	44 31 e0             	xor    %r12d,%eax
  421bf4:	41 01 cd             	add    %ecx,%r13d
  421bf7:	33 54 24 1c          	xor    0x1c(%rsp),%edx
  421bfb:	c1 c7 1e             	rol    $0x1e,%edi
  421bfe:	41 01 c5             	add    %eax,%r13d
  421c01:	d1 c2                	rol    %edx
  421c03:	89 54 24 28          	mov    %edx,0x28(%rsp)
  421c07:	8b 6c 24 2c          	mov    0x2c(%rsp),%ebp
  421c0b:	89 f8                	mov    %edi,%eax
  421c0d:	44 89 e9             	mov    %r13d,%ecx
  421c10:	33 6c 24 34          	xor    0x34(%rsp),%ebp
  421c14:	31 f0                	xor    %esi,%eax
  421c16:	c1 c1 05             	rol    $0x5,%ecx
  421c19:	46 8d a4 22 a1 eb d9 	lea    0x6ed9eba1(%rdx,%r12,1),%r12d
  421c20:	6e 
  421c21:	33 6c 24 0c          	xor    0xc(%rsp),%ebp
  421c25:	44 31 d8             	xor    %r11d,%eax
  421c28:	41 01 cc             	add    %ecx,%r12d
  421c2b:	33 6c 24 20          	xor    0x20(%rsp),%ebp
  421c2f:	c1 c6 1e             	rol    $0x1e,%esi
  421c32:	41 01 c4             	add    %eax,%r12d
  421c35:	d1 c5                	rol    %ebp
  421c37:	89 6c 24 2c          	mov    %ebp,0x2c(%rsp)
  421c3b:	8b 54 24 30          	mov    0x30(%rsp),%edx
  421c3f:	89 f0                	mov    %esi,%eax
  421c41:	44 89 e1             	mov    %r12d,%ecx
  421c44:	33 54 24 38          	xor    0x38(%rsp),%edx
  421c48:	44 31 e8             	xor    %r13d,%eax
  421c4b:	c1 c1 05             	rol    $0x5,%ecx
  421c4e:	46 8d 9c 1d a1 eb d9 	lea    0x6ed9eba1(%rbp,%r11,1),%r11d
  421c55:	6e 
  421c56:	33 54 24 10          	xor    0x10(%rsp),%edx
  421c5a:	31 f8                	xor    %edi,%eax
  421c5c:	41 01 cb             	add    %ecx,%r11d
  421c5f:	33 54 24 24          	xor    0x24(%rsp),%edx
  421c63:	41 c1 c5 1e          	rol    $0x1e,%r13d
  421c67:	41 01 c3             	add    %eax,%r11d
  421c6a:	d1 c2                	rol    %edx
  421c6c:	89 54 24 30          	mov    %edx,0x30(%rsp)
  421c70:	8b 6c 24 34          	mov    0x34(%rsp),%ebp
  421c74:	44 89 e8             	mov    %r13d,%eax
  421c77:	44 89 d9             	mov    %r11d,%ecx
  421c7a:	33 6c 24 3c          	xor    0x3c(%rsp),%ebp
  421c7e:	44 31 e0             	xor    %r12d,%eax
  421c81:	c1 c1 05             	rol    $0x5,%ecx
  421c84:	8d bc 3a a1 eb d9 6e 	lea    0x6ed9eba1(%rdx,%rdi,1),%edi
  421c8b:	33 6c 24 14          	xor    0x14(%rsp),%ebp
  421c8f:	31 f0                	xor    %esi,%eax
  421c91:	01 cf                	add    %ecx,%edi
  421c93:	33 6c 24 28          	xor    0x28(%rsp),%ebp
  421c97:	41 c1 c4 1e          	rol    $0x1e,%r12d
  421c9b:	01 c7                	add    %eax,%edi
  421c9d:	d1 c5                	rol    %ebp
  421c9f:	89 6c 24 34          	mov    %ebp,0x34(%rsp)
  421ca3:	8b 54 24 38          	mov    0x38(%rsp),%edx
  421ca7:	44 89 e0             	mov    %r12d,%eax
  421caa:	89 f9                	mov    %edi,%ecx
  421cac:	33 14 24             	xor    (%rsp),%edx
  421caf:	44 31 d8             	xor    %r11d,%eax
  421cb2:	c1 c1 05             	rol    $0x5,%ecx
  421cb5:	8d b4 35 a1 eb d9 6e 	lea    0x6ed9eba1(%rbp,%rsi,1),%esi
  421cbc:	33 54 24 18          	xor    0x18(%rsp),%edx
  421cc0:	44 31 e8             	xor    %r13d,%eax
  421cc3:	01 ce                	add    %ecx,%esi
  421cc5:	33 54 24 2c          	xor    0x2c(%rsp),%edx
  421cc9:	41 c1 c3 1e          	rol    $0x1e,%r11d
  421ccd:	01 c6                	add    %eax,%esi
  421ccf:	d1 c2                	rol    %edx
  421cd1:	89 54 24 38          	mov    %edx,0x38(%rsp)
  421cd5:	8b 6c 24 3c          	mov    0x3c(%rsp),%ebp
  421cd9:	44 89 d8             	mov    %r11d,%eax
  421cdc:	89 f1                	mov    %esi,%ecx
  421cde:	33 6c 24 04          	xor    0x4(%rsp),%ebp
  421ce2:	31 f8                	xor    %edi,%eax
  421ce4:	c1 c1 05             	rol    $0x5,%ecx
  421ce7:	46 8d ac 2a a1 eb d9 	lea    0x6ed9eba1(%rdx,%r13,1),%r13d
  421cee:	6e 
  421cef:	33 6c 24 1c          	xor    0x1c(%rsp),%ebp
  421cf3:	44 31 e0             	xor    %r12d,%eax
  421cf6:	41 01 cd             	add    %ecx,%r13d
  421cf9:	33 6c 24 30          	xor    0x30(%rsp),%ebp
  421cfd:	c1 c7 1e             	rol    $0x1e,%edi
  421d00:	41 01 c5             	add    %eax,%r13d
  421d03:	d1 c5                	rol    %ebp
  421d05:	89 6c 24 3c          	mov    %ebp,0x3c(%rsp)
  421d09:	8b 14 24             	mov    (%rsp),%edx
  421d0c:	89 f8                	mov    %edi,%eax
  421d0e:	44 89 e9             	mov    %r13d,%ecx
  421d11:	33 54 24 08          	xor    0x8(%rsp),%edx
  421d15:	31 f0                	xor    %esi,%eax
  421d17:	c1 c1 05             	rol    $0x5,%ecx
  421d1a:	46 8d a4 25 a1 eb d9 	lea    0x6ed9eba1(%rbp,%r12,1),%r12d
  421d21:	6e 
  421d22:	33 54 24 20          	xor    0x20(%rsp),%edx
  421d26:	44 31 d8             	xor    %r11d,%eax
  421d29:	41 01 cc             	add    %ecx,%r12d
  421d2c:	33 54 24 34          	xor    0x34(%rsp),%edx
  421d30:	c1 c6 1e             	rol    $0x1e,%esi
  421d33:	41 01 c4             	add    %eax,%r12d
  421d36:	d1 c2                	rol    %edx
  421d38:	89 14 24             	mov    %edx,(%rsp)
  421d3b:	8b 6c 24 04          	mov    0x4(%rsp),%ebp
  421d3f:	89 f0                	mov    %esi,%eax
  421d41:	44 89 e1             	mov    %r12d,%ecx
  421d44:	33 6c 24 0c          	xor    0xc(%rsp),%ebp
  421d48:	44 31 e8             	xor    %r13d,%eax
  421d4b:	c1 c1 05             	rol    $0x5,%ecx
  421d4e:	46 8d 9c 1a a1 eb d9 	lea    0x6ed9eba1(%rdx,%r11,1),%r11d
  421d55:	6e 
  421d56:	33 6c 24 24          	xor    0x24(%rsp),%ebp
  421d5a:	31 f8                	xor    %edi,%eax
  421d5c:	41 01 cb             	add    %ecx,%r11d
  421d5f:	33 6c 24 38          	xor    0x38(%rsp),%ebp
  421d63:	41 c1 c5 1e          	rol    $0x1e,%r13d
  421d67:	41 01 c3             	add    %eax,%r11d
  421d6a:	d1 c5                	rol    %ebp
  421d6c:	89 6c 24 04          	mov    %ebp,0x4(%rsp)
  421d70:	8b 54 24 08          	mov    0x8(%rsp),%edx
  421d74:	44 89 e8             	mov    %r13d,%eax
  421d77:	44 89 d9             	mov    %r11d,%ecx
  421d7a:	33 54 24 10          	xor    0x10(%rsp),%edx
  421d7e:	44 31 e0             	xor    %r12d,%eax
  421d81:	c1 c1 05             	rol    $0x5,%ecx
  421d84:	8d bc 3d a1 eb d9 6e 	lea    0x6ed9eba1(%rbp,%rdi,1),%edi
  421d8b:	33 54 24 28          	xor    0x28(%rsp),%edx
  421d8f:	31 f0                	xor    %esi,%eax
  421d91:	01 cf                	add    %ecx,%edi
  421d93:	33 54 24 3c          	xor    0x3c(%rsp),%edx
  421d97:	41 c1 c4 1e          	rol    $0x1e,%r12d
  421d9b:	01 c7                	add    %eax,%edi
  421d9d:	d1 c2                	rol    %edx
  421d9f:	89 54 24 08          	mov    %edx,0x8(%rsp)
  421da3:	8b 6c 24 0c          	mov    0xc(%rsp),%ebp
  421da7:	44 89 e0             	mov    %r12d,%eax
  421daa:	89 f9                	mov    %edi,%ecx
  421dac:	33 6c 24 14          	xor    0x14(%rsp),%ebp
  421db0:	44 31 d8             	xor    %r11d,%eax
  421db3:	c1 c1 05             	rol    $0x5,%ecx
  421db6:	8d b4 32 a1 eb d9 6e 	lea    0x6ed9eba1(%rdx,%rsi,1),%esi
  421dbd:	33 6c 24 2c          	xor    0x2c(%rsp),%ebp
  421dc1:	44 31 e8             	xor    %r13d,%eax
  421dc4:	01 ce                	add    %ecx,%esi
  421dc6:	33 2c 24             	xor    (%rsp),%ebp
  421dc9:	41 c1 c3 1e          	rol    $0x1e,%r11d
  421dcd:	01 c6                	add    %eax,%esi
  421dcf:	d1 c5                	rol    %ebp
  421dd1:	89 6c 24 0c          	mov    %ebp,0xc(%rsp)
  421dd5:	8b 54 24 10          	mov    0x10(%rsp),%edx
  421dd9:	44 89 d8             	mov    %r11d,%eax
  421ddc:	89 f1                	mov    %esi,%ecx
  421dde:	33 54 24 18          	xor    0x18(%rsp),%edx
  421de2:	31 f8                	xor    %edi,%eax
  421de4:	c1 c1 05             	rol    $0x5,%ecx
  421de7:	46 8d ac 2d a1 eb d9 	lea    0x6ed9eba1(%rbp,%r13,1),%r13d
  421dee:	6e 
  421def:	33 54 24 30          	xor    0x30(%rsp),%edx
  421df3:	44 31 e0             	xor    %r12d,%eax
  421df6:	41 01 cd             	add    %ecx,%r13d
  421df9:	33 54 24 04          	xor    0x4(%rsp),%edx
  421dfd:	c1 c7 1e             	rol    $0x1e,%edi
  421e00:	41 01 c5             	add    %eax,%r13d
  421e03:	d1 c2                	rol    %edx
  421e05:	89 54 24 10          	mov    %edx,0x10(%rsp)
  421e09:	8b 6c 24 14          	mov    0x14(%rsp),%ebp
  421e0d:	89 f8                	mov    %edi,%eax
  421e0f:	44 89 e9             	mov    %r13d,%ecx
  421e12:	33 6c 24 1c          	xor    0x1c(%rsp),%ebp
  421e16:	31 f0                	xor    %esi,%eax
  421e18:	c1 c1 05             	rol    $0x5,%ecx
  421e1b:	46 8d a4 22 a1 eb d9 	lea    0x6ed9eba1(%rdx,%r12,1),%r12d
  421e22:	6e 
  421e23:	33 6c 24 34          	xor    0x34(%rsp),%ebp
  421e27:	44 31 d8             	xor    %r11d,%eax
  421e2a:	41 01 cc             	add    %ecx,%r12d
  421e2d:	33 6c 24 08          	xor    0x8(%rsp),%ebp
  421e31:	c1 c6 1e             	rol    $0x1e,%esi
  421e34:	41 01 c4             	add    %eax,%r12d
  421e37:	d1 c5                	rol    %ebp
  421e39:	89 6c 24 14          	mov    %ebp,0x14(%rsp)
  421e3d:	8b 54 24 18          	mov    0x18(%rsp),%edx
  421e41:	89 f0                	mov    %esi,%eax
  421e43:	44 89 e1             	mov    %r12d,%ecx
  421e46:	33 54 24 20          	xor    0x20(%rsp),%edx
  421e4a:	44 31 e8             	xor    %r13d,%eax
  421e4d:	c1 c1 05             	rol    $0x5,%ecx
  421e50:	46 8d 9c 1d a1 eb d9 	lea    0x6ed9eba1(%rbp,%r11,1),%r11d
  421e57:	6e 
  421e58:	33 54 24 38          	xor    0x38(%rsp),%edx
  421e5c:	31 f8                	xor    %edi,%eax
  421e5e:	41 01 cb             	add    %ecx,%r11d
  421e61:	33 54 24 0c          	xor    0xc(%rsp),%edx
  421e65:	41 c1 c5 1e          	rol    $0x1e,%r13d
  421e69:	41 01 c3             	add    %eax,%r11d
  421e6c:	d1 c2                	rol    %edx
  421e6e:	89 54 24 18          	mov    %edx,0x18(%rsp)
  421e72:	8b 6c 24 1c          	mov    0x1c(%rsp),%ebp
  421e76:	44 89 e8             	mov    %r13d,%eax
  421e79:	44 89 d9             	mov    %r11d,%ecx
  421e7c:	33 6c 24 24          	xor    0x24(%rsp),%ebp
  421e80:	44 31 e0             	xor    %r12d,%eax
  421e83:	c1 c1 05             	rol    $0x5,%ecx
  421e86:	8d bc 3a a1 eb d9 6e 	lea    0x6ed9eba1(%rdx,%rdi,1),%edi
  421e8d:	33 6c 24 3c          	xor    0x3c(%rsp),%ebp
  421e91:	31 f0                	xor    %esi,%eax
  421e93:	01 cf                	add    %ecx,%edi
  421e95:	33 6c 24 10          	xor    0x10(%rsp),%ebp
  421e99:	41 c1 c4 1e          	rol    $0x1e,%r12d
  421e9d:	01 c7                	add    %eax,%edi
  421e9f:	d1 c5                	rol    %ebp
  421ea1:	89 6c 24 1c          	mov    %ebp,0x1c(%rsp)
  421ea5:	8b 54 24 20          	mov    0x20(%rsp),%edx
  421ea9:	44 89 e0             	mov    %r12d,%eax
  421eac:	89 f9                	mov    %edi,%ecx
  421eae:	33 54 24 28          	xor    0x28(%rsp),%edx
  421eb2:	44 31 d8             	xor    %r11d,%eax
  421eb5:	c1 c1 05             	rol    $0x5,%ecx
  421eb8:	8d b4 35 a1 eb d9 6e 	lea    0x6ed9eba1(%rbp,%rsi,1),%esi
  421ebf:	33 14 24             	xor    (%rsp),%edx
  421ec2:	44 31 e8             	xor    %r13d,%eax
  421ec5:	01 ce                	add    %ecx,%esi
  421ec7:	33 54 24 14          	xor    0x14(%rsp),%edx
  421ecb:	41 c1 c3 1e          	rol    $0x1e,%r11d
  421ecf:	01 c6                	add    %eax,%esi
  421ed1:	d1 c2                	rol    %edx
  421ed3:	89 54 24 20          	mov    %edx,0x20(%rsp)
  421ed7:	8b 6c 24 24          	mov    0x24(%rsp),%ebp
  421edb:	44 89 d8             	mov    %r11d,%eax
  421ede:	44 89 db             	mov    %r11d,%ebx
  421ee1:	33 6c 24 2c          	xor    0x2c(%rsp),%ebp
  421ee5:	44 21 e0             	and    %r12d,%eax
  421ee8:	89 f1                	mov    %esi,%ecx
  421eea:	33 6c 24 04          	xor    0x4(%rsp),%ebp
  421eee:	44 31 e3             	xor    %r12d,%ebx
  421ef1:	46 8d ac 2a dc bc 1b 	lea    -0x70e44324(%rdx,%r13,1),%r13d
  421ef8:	8f 
  421ef9:	c1 c1 05             	rol    $0x5,%ecx
  421efc:	33 6c 24 18          	xor    0x18(%rsp),%ebp
  421f00:	41 01 c5             	add    %eax,%r13d
  421f03:	21 fb                	and    %edi,%ebx
  421f05:	d1 c5                	rol    %ebp
  421f07:	41 01 dd             	add    %ebx,%r13d
  421f0a:	c1 c7 1e             	rol    $0x1e,%edi
  421f0d:	89 6c 24 24          	mov    %ebp,0x24(%rsp)
  421f11:	41 01 cd             	add    %ecx,%r13d
  421f14:	8b 54 24 28          	mov    0x28(%rsp),%edx
  421f18:	89 f8                	mov    %edi,%eax
  421f1a:	89 fb                	mov    %edi,%ebx
  421f1c:	33 54 24 30          	xor    0x30(%rsp),%edx
  421f20:	44 21 d8             	and    %r11d,%eax
  421f23:	44 89 e9             	mov    %r13d,%ecx
  421f26:	33 54 24 08          	xor    0x8(%rsp),%edx
  421f2a:	44 31 db             	xor    %r11d,%ebx
  421f2d:	46 8d a4 25 dc bc 1b 	lea    -0x70e44324(%rbp,%r12,1),%r12d
  421f34:	8f 
  421f35:	c1 c1 05             	rol    $0x5,%ecx
  421f38:	33 54 24 1c          	xor    0x1c(%rsp),%edx
  421f3c:	41 01 c4             	add    %eax,%r12d
  421f3f:	21 f3                	and    %esi,%ebx
  421f41:	d1 c2                	rol    %edx
  421f43:	41 01 dc             	add    %ebx,%r12d
  421f46:	c1 c6 1e             	rol    $0x1e,%esi
  421f49:	89 54 24 28          	mov    %edx,0x28(%rsp)
  421f4d:	41 01 cc             	add    %ecx,%r12d
  421f50:	8b 6c 24 2c          	mov    0x2c(%rsp),%ebp
  421f54:	89 f0                	mov    %esi,%eax
  421f56:	89 f3                	mov    %esi,%ebx
  421f58:	33 6c 24 34          	xor    0x34(%rsp),%ebp
  421f5c:	21 f8                	and    %edi,%eax
  421f5e:	44 89 e1             	mov    %r12d,%ecx
  421f61:	33 6c 24 0c          	xor    0xc(%rsp),%ebp
  421f65:	31 fb                	xor    %edi,%ebx
  421f67:	46 8d 9c 1a dc bc 1b 	lea    -0x70e44324(%rdx,%r11,1),%r11d
  421f6e:	8f 
  421f6f:	c1 c1 05             	rol    $0x5,%ecx
  421f72:	33 6c 24 20          	xor    0x20(%rsp),%ebp
  421f76:	41 01 c3             	add    %eax,%r11d
  421f79:	44 21 eb             	and    %r13d,%ebx
  421f7c:	d1 c5                	rol    %ebp
  421f7e:	41 01 db             	add    %ebx,%r11d
  421f81:	41 c1 c5 1e          	rol    $0x1e,%r13d
  421f85:	89 6c 24 2c          	mov    %ebp,0x2c(%rsp)
  421f89:	41 01 cb             	add    %ecx,%r11d
  421f8c:	8b 54 24 30          	mov    0x30(%rsp),%edx
  421f90:	44 89 e8             	mov    %r13d,%eax
  421f93:	44 89 eb             	mov    %r13d,%ebx
  421f96:	33 54 24 38          	xor    0x38(%rsp),%edx
  421f9a:	21 f0                	and    %esi,%eax
  421f9c:	44 89 d9             	mov    %r11d,%ecx
  421f9f:	33 54 24 10          	xor    0x10(%rsp),%edx
  421fa3:	31 f3                	xor    %esi,%ebx
  421fa5:	8d bc 3d dc bc 1b 8f 	lea    -0x70e44324(%rbp,%rdi,1),%edi
  421fac:	c1 c1 05             	rol    $0x5,%ecx
  421faf:	33 54 24 24          	xor    0x24(%rsp),%edx
  421fb3:	01 c7                	add    %eax,%edi
  421fb5:	44 21 e3             	and    %r12d,%ebx
  421fb8:	d1 c2                	rol    %edx
  421fba:	01 df                	add    %ebx,%edi
  421fbc:	41 c1 c4 1e          	rol    $0x1e,%r12d
  421fc0:	89 54 24 30          	mov    %edx,0x30(%rsp)
  421fc4:	01 cf                	add    %ecx,%edi
  421fc6:	8b 6c 24 34          	mov    0x34(%rsp),%ebp
  421fca:	44 89 e0             	mov    %r12d,%eax
  421fcd:	44 89 e3             	mov    %r12d,%ebx
  421fd0:	33 6c 24 3c          	xor    0x3c(%rsp),%ebp
  421fd4:	44 21 e8             	and    %r13d,%eax
  421fd7:	89 f9                	mov    %edi,%ecx
  421fd9:	33 6c 24 14          	xor    0x14(%rsp),%ebp
  421fdd:	44 31 eb             	xor    %r13d,%ebx
  421fe0:	8d b4 32 dc bc 1b 8f 	lea    -0x70e44324(%rdx,%rsi,1),%esi
  421fe7:	c1 c1 05             	rol    $0x5,%ecx
  421fea:	33 6c 24 28          	xor    0x28(%rsp),%ebp
  421fee:	01 c6                	add    %eax,%esi
  421ff0:	44 21 db             	and    %r11d,%ebx
  421ff3:	d1 c5                	rol    %ebp
  421ff5:	01 de                	add    %ebx,%esi
  421ff7:	41 c1 c3 1e          	rol    $0x1e,%r11d
  421ffb:	89 6c 24 34          	mov    %ebp,0x34(%rsp)
  421fff:	01 ce                	add    %ecx,%esi
  422001:	8b 54 24 38          	mov    0x38(%rsp),%edx
  422005:	44 89 d8             	mov    %r11d,%eax
  422008:	44 89 db             	mov    %r11d,%ebx
  42200b:	33 14 24             	xor    (%rsp),%edx
  42200e:	44 21 e0             	and    %r12d,%eax
  422011:	89 f1                	mov    %esi,%ecx
  422013:	33 54 24 18          	xor    0x18(%rsp),%edx
  422017:	44 31 e3             	xor    %r12d,%ebx
  42201a:	46 8d ac 2d dc bc 1b 	lea    -0x70e44324(%rbp,%r13,1),%r13d
  422021:	8f 
  422022:	c1 c1 05             	rol    $0x5,%ecx
  422025:	33 54 24 2c          	xor    0x2c(%rsp),%edx
  422029:	41 01 c5             	add    %eax,%r13d
  42202c:	21 fb                	and    %edi,%ebx
  42202e:	d1 c2                	rol    %edx
  422030:	41 01 dd             	add    %ebx,%r13d
  422033:	c1 c7 1e             	rol    $0x1e,%edi
  422036:	89 54 24 38          	mov    %edx,0x38(%rsp)
  42203a:	41 01 cd             	add    %ecx,%r13d
  42203d:	8b 6c 24 3c          	mov    0x3c(%rsp),%ebp
  422041:	89 f8                	mov    %edi,%eax
  422043:	89 fb                	mov    %edi,%ebx
  422045:	33 6c 24 04          	xor    0x4(%rsp),%ebp
  422049:	44 21 d8             	and    %r11d,%eax
  42204c:	44 89 e9             	mov    %r13d,%ecx
  42204f:	33 6c 24 1c          	xor    0x1c(%rsp),%ebp
  422053:	44 31 db             	xor    %r11d,%ebx
  422056:	46 8d a4 22 dc bc 1b 	lea    -0x70e44324(%rdx,%r12,1),%r12d
  42205d:	8f 
  42205e:	c1 c1 05             	rol    $0x5,%ecx
  422061:	33 6c 24 30          	xor    0x30(%rsp),%ebp
  422065:	41 01 c4             	add    %eax,%r12d
  422068:	21 f3                	and    %esi,%ebx
  42206a:	d1 c5                	rol    %ebp
  42206c:	41 01 dc             	add    %ebx,%r12d
  42206f:	c1 c6 1e             	rol    $0x1e,%esi
  422072:	89 6c 24 3c          	mov    %ebp,0x3c(%rsp)
  422076:	41 01 cc             	add    %ecx,%r12d
  422079:	8b 14 24             	mov    (%rsp),%edx
  42207c:	89 f0                	mov    %esi,%eax
  42207e:	89 f3                	mov    %esi,%ebx
  422080:	33 54 24 08          	xor    0x8(%rsp),%edx
  422084:	21 f8                	and    %edi,%eax
  422086:	44 89 e1             	mov    %r12d,%ecx
  422089:	33 54 24 20          	xor    0x20(%rsp),%edx
  42208d:	31 fb                	xor    %edi,%ebx
  42208f:	46 8d 9c 1d dc bc 1b 	lea    -0x70e44324(%rbp,%r11,1),%r11d
  422096:	8f 
  422097:	c1 c1 05             	rol    $0x5,%ecx
  42209a:	33 54 24 34          	xor    0x34(%rsp),%edx
  42209e:	41 01 c3             	add    %eax,%r11d
  4220a1:	44 21 eb             	and    %r13d,%ebx
  4220a4:	d1 c2                	rol    %edx
  4220a6:	41 01 db             	add    %ebx,%r11d
  4220a9:	41 c1 c5 1e          	rol    $0x1e,%r13d
  4220ad:	89 14 24             	mov    %edx,(%rsp)
  4220b0:	41 01 cb             	add    %ecx,%r11d
  4220b3:	8b 6c 24 04          	mov    0x4(%rsp),%ebp
  4220b7:	44 89 e8             	mov    %r13d,%eax
  4220ba:	44 89 eb             	mov    %r13d,%ebx
  4220bd:	33 6c 24 0c          	xor    0xc(%rsp),%ebp
  4220c1:	21 f0                	and    %esi,%eax
  4220c3:	44 89 d9             	mov    %r11d,%ecx
  4220c6:	33 6c 24 24          	xor    0x24(%rsp),%ebp
  4220ca:	31 f3                	xor    %esi,%ebx
  4220cc:	8d bc 3a dc bc 1b 8f 	lea    -0x70e44324(%rdx,%rdi,1),%edi
  4220d3:	c1 c1 05             	rol    $0x5,%ecx
  4220d6:	33 6c 24 38          	xor    0x38(%rsp),%ebp
  4220da:	01 c7                	add    %eax,%edi
  4220dc:	44 21 e3             	and    %r12d,%ebx
  4220df:	d1 c5                	rol    %ebp
  4220e1:	01 df                	add    %ebx,%edi
  4220e3:	41 c1 c4 1e          	rol    $0x1e,%r12d
  4220e7:	89 6c 24 04          	mov    %ebp,0x4(%rsp)
  4220eb:	01 cf                	add    %ecx,%edi
  4220ed:	8b 54 24 08          	mov    0x8(%rsp),%edx
  4220f1:	44 89 e0             	mov    %r12d,%eax
  4220f4:	44 89 e3             	mov    %r12d,%ebx
  4220f7:	33 54 24 10          	xor    0x10(%rsp),%edx
  4220fb:	44 21 e8             	and    %r13d,%eax
  4220fe:	89 f9                	mov    %edi,%ecx
  422100:	33 54 24 28          	xor    0x28(%rsp),%edx
  422104:	44 31 eb             	xor    %r13d,%ebx
  422107:	8d b4 35 dc bc 1b 8f 	lea    -0x70e44324(%rbp,%rsi,1),%esi
  42210e:	c1 c1 05             	rol    $0x5,%ecx
  422111:	33 54 24 3c          	xor    0x3c(%rsp),%edx
  422115:	01 c6                	add    %eax,%esi
  422117:	44 21 db             	and    %r11d,%ebx
  42211a:	d1 c2                	rol    %edx
  42211c:	01 de                	add    %ebx,%esi
  42211e:	41 c1 c3 1e          	rol    $0x1e,%r11d
  422122:	89 54 24 08          	mov    %edx,0x8(%rsp)
  422126:	01 ce                	add    %ecx,%esi
  422128:	8b 6c 24 0c          	mov    0xc(%rsp),%ebp
  42212c:	44 89 d8             	mov    %r11d,%eax
  42212f:	44 89 db             	mov    %r11d,%ebx
  422132:	33 6c 24 14          	xor    0x14(%rsp),%ebp
  422136:	44 21 e0             	and    %r12d,%eax
  422139:	89 f1                	mov    %esi,%ecx
  42213b:	33 6c 24 2c          	xor    0x2c(%rsp),%ebp
  42213f:	44 31 e3             	xor    %r12d,%ebx
  422142:	46 8d ac 2a dc bc 1b 	lea    -0x70e44324(%rdx,%r13,1),%r13d
  422149:	8f 
  42214a:	c1 c1 05             	rol    $0x5,%ecx
  42214d:	33 2c 24             	xor    (%rsp),%ebp
  422150:	41 01 c5             	add    %eax,%r13d
  422153:	21 fb                	and    %edi,%ebx
  422155:	d1 c5                	rol    %ebp
  422157:	41 01 dd             	add    %ebx,%r13d
  42215a:	c1 c7 1e             	rol    $0x1e,%edi
  42215d:	89 6c 24 0c          	mov    %ebp,0xc(%rsp)
  422161:	41 01 cd             	add    %ecx,%r13d
  422164:	8b 54 24 10          	mov    0x10(%rsp),%edx
  422168:	89 f8                	mov    %edi,%eax
  42216a:	89 fb                	mov    %edi,%ebx
  42216c:	33 54 24 18          	xor    0x18(%rsp),%edx
  422170:	44 21 d8             	and    %r11d,%eax
  422173:	44 89 e9             	mov    %r13d,%ecx
  422176:	33 54 24 30          	xor    0x30(%rsp),%edx
  42217a:	44 31 db             	xor    %r11d,%ebx
  42217d:	46 8d a4 25 dc bc 1b 	lea    -0x70e44324(%rbp,%r12,1),%r12d
  422184:	8f 
  422185:	c1 c1 05             	rol    $0x5,%ecx
  422188:	33 54 24 04          	xor    0x4(%rsp),%edx
  42218c:	41 01 c4             	add    %eax,%r12d
  42218f:	21 f3                	and    %esi,%ebx
  422191:	d1 c2                	rol    %edx
  422193:	41 01 dc             	add    %ebx,%r12d
  422196:	c1 c6 1e             	rol    $0x1e,%esi
  422199:	89 54 24 10          	mov    %edx,0x10(%rsp)
  42219d:	41 01 cc             	add    %ecx,%r12d
  4221a0:	8b 6c 24 14          	mov    0x14(%rsp),%ebp
  4221a4:	89 f0                	mov    %esi,%eax
  4221a6:	89 f3                	mov    %esi,%ebx
  4221a8:	33 6c 24 1c          	xor    0x1c(%rsp),%ebp
  4221ac:	21 f8                	and    %edi,%eax
  4221ae:	44 89 e1             	mov    %r12d,%ecx
  4221b1:	33 6c 24 34          	xor    0x34(%rsp),%ebp
  4221b5:	31 fb                	xor    %edi,%ebx
  4221b7:	46 8d 9c 1a dc bc 1b 	lea    -0x70e44324(%rdx,%r11,1),%r11d
  4221be:	8f 
  4221bf:	c1 c1 05             	rol    $0x5,%ecx
  4221c2:	33 6c 24 08          	xor    0x8(%rsp),%ebp
  4221c6:	41 01 c3             	add    %eax,%r11d
  4221c9:	44 21 eb             	and    %r13d,%ebx
  4221cc:	d1 c5                	rol    %ebp
  4221ce:	41 01 db             	add    %ebx,%r11d
  4221d1:	41 c1 c5 1e          	rol    $0x1e,%r13d
  4221d5:	89 6c 24 14          	mov    %ebp,0x14(%rsp)
  4221d9:	41 01 cb             	add    %ecx,%r11d
  4221dc:	8b 54 24 18          	mov    0x18(%rsp),%edx
  4221e0:	44 89 e8             	mov    %r13d,%eax
  4221e3:	44 89 eb             	mov    %r13d,%ebx
  4221e6:	33 54 24 20          	xor    0x20(%rsp),%edx
  4221ea:	21 f0                	and    %esi,%eax
  4221ec:	44 89 d9             	mov    %r11d,%ecx
  4221ef:	33 54 24 38          	xor    0x38(%rsp),%edx
  4221f3:	31 f3                	xor    %esi,%ebx
  4221f5:	8d bc 3d dc bc 1b 8f 	lea    -0x70e44324(%rbp,%rdi,1),%edi
  4221fc:	c1 c1 05             	rol    $0x5,%ecx
  4221ff:	33 54 24 0c          	xor    0xc(%rsp),%edx
  422203:	01 c7                	add    %eax,%edi
  422205:	44 21 e3             	and    %r12d,%ebx
  422208:	d1 c2                	rol    %edx
  42220a:	01 df                	add    %ebx,%edi
  42220c:	41 c1 c4 1e          	rol    $0x1e,%r12d
  422210:	89 54 24 18          	mov    %edx,0x18(%rsp)
  422214:	01 cf                	add    %ecx,%edi
  422216:	8b 6c 24 1c          	mov    0x1c(%rsp),%ebp
  42221a:	44 89 e0             	mov    %r12d,%eax
  42221d:	44 89 e3             	mov    %r12d,%ebx
  422220:	33 6c 24 24          	xor    0x24(%rsp),%ebp
  422224:	44 21 e8             	and    %r13d,%eax
  422227:	89 f9                	mov    %edi,%ecx
  422229:	33 6c 24 3c          	xor    0x3c(%rsp),%ebp
  42222d:	44 31 eb             	xor    %r13d,%ebx
  422230:	8d b4 32 dc bc 1b 8f 	lea    -0x70e44324(%rdx,%rsi,1),%esi
  422237:	c1 c1 05             	rol    $0x5,%ecx
  42223a:	33 6c 24 10          	xor    0x10(%rsp),%ebp
  42223e:	01 c6                	add    %eax,%esi
  422240:	44 21 db             	and    %r11d,%ebx
  422243:	d1 c5                	rol    %ebp
  422245:	01 de                	add    %ebx,%esi
  422247:	41 c1 c3 1e          	rol    $0x1e,%r11d
  42224b:	89 6c 24 1c          	mov    %ebp,0x1c(%rsp)
  42224f:	01 ce                	add    %ecx,%esi
  422251:	8b 54 24 20          	mov    0x20(%rsp),%edx
  422255:	44 89 d8             	mov    %r11d,%eax
  422258:	44 89 db             	mov    %r11d,%ebx
  42225b:	33 54 24 28          	xor    0x28(%rsp),%edx
  42225f:	44 21 e0             	and    %r12d,%eax
  422262:	89 f1                	mov    %esi,%ecx
  422264:	33 14 24             	xor    (%rsp),%edx
  422267:	44 31 e3             	xor    %r12d,%ebx
  42226a:	46 8d ac 2d dc bc 1b 	lea    -0x70e44324(%rbp,%r13,1),%r13d
  422271:	8f 
  422272:	c1 c1 05             	rol    $0x5,%ecx
  422275:	33 54 24 14          	xor    0x14(%rsp),%edx
  422279:	41 01 c5             	add    %eax,%r13d
  42227c:	21 fb                	and    %edi,%ebx
  42227e:	d1 c2                	rol    %edx
  422280:	41 01 dd             	add    %ebx,%r13d
  422283:	c1 c7 1e             	rol    $0x1e,%edi
  422286:	89 54 24 20          	mov    %edx,0x20(%rsp)
  42228a:	41 01 cd             	add    %ecx,%r13d
  42228d:	8b 6c 24 24          	mov    0x24(%rsp),%ebp
  422291:	89 f8                	mov    %edi,%eax
  422293:	89 fb                	mov    %edi,%ebx
  422295:	33 6c 24 2c          	xor    0x2c(%rsp),%ebp
  422299:	44 21 d8             	and    %r11d,%eax
  42229c:	44 89 e9             	mov    %r13d,%ecx
  42229f:	33 6c 24 04          	xor    0x4(%rsp),%ebp
  4222a3:	44 31 db             	xor    %r11d,%ebx
  4222a6:	46 8d a4 22 dc bc 1b 	lea    -0x70e44324(%rdx,%r12,1),%r12d
  4222ad:	8f 
  4222ae:	c1 c1 05             	rol    $0x5,%ecx
  4222b1:	33 6c 24 18          	xor    0x18(%rsp),%ebp
  4222b5:	41 01 c4             	add    %eax,%r12d
  4222b8:	21 f3                	and    %esi,%ebx
  4222ba:	d1 c5                	rol    %ebp
  4222bc:	41 01 dc             	add    %ebx,%r12d
  4222bf:	c1 c6 1e             	rol    $0x1e,%esi
  4222c2:	89 6c 24 24          	mov    %ebp,0x24(%rsp)
  4222c6:	41 01 cc             	add    %ecx,%r12d
  4222c9:	8b 54 24 28          	mov    0x28(%rsp),%edx
  4222cd:	89 f0                	mov    %esi,%eax
  4222cf:	89 f3                	mov    %esi,%ebx
  4222d1:	33 54 24 30          	xor    0x30(%rsp),%edx
  4222d5:	21 f8                	and    %edi,%eax
  4222d7:	44 89 e1             	mov    %r12d,%ecx
  4222da:	33 54 24 08          	xor    0x8(%rsp),%edx
  4222de:	31 fb                	xor    %edi,%ebx
  4222e0:	46 8d 9c 1d dc bc 1b 	lea    -0x70e44324(%rbp,%r11,1),%r11d
  4222e7:	8f 
  4222e8:	c1 c1 05             	rol    $0x5,%ecx
  4222eb:	33 54 24 1c          	xor    0x1c(%rsp),%edx
  4222ef:	41 01 c3             	add    %eax,%r11d
  4222f2:	44 21 eb             	and    %r13d,%ebx
  4222f5:	d1 c2                	rol    %edx
  4222f7:	41 01 db             	add    %ebx,%r11d
  4222fa:	41 c1 c5 1e          	rol    $0x1e,%r13d
  4222fe:	89 54 24 28          	mov    %edx,0x28(%rsp)
  422302:	41 01 cb             	add    %ecx,%r11d
  422305:	8b 6c 24 2c          	mov    0x2c(%rsp),%ebp
  422309:	44 89 e8             	mov    %r13d,%eax
  42230c:	44 89 eb             	mov    %r13d,%ebx
  42230f:	33 6c 24 34          	xor    0x34(%rsp),%ebp
  422313:	21 f0                	and    %esi,%eax
  422315:	44 89 d9             	mov    %r11d,%ecx
  422318:	33 6c 24 0c          	xor    0xc(%rsp),%ebp
  42231c:	31 f3                	xor    %esi,%ebx
  42231e:	8d bc 3a dc bc 1b 8f 	lea    -0x70e44324(%rdx,%rdi,1),%edi
  422325:	c1 c1 05             	rol    $0x5,%ecx
  422328:	33 6c 24 20          	xor    0x20(%rsp),%ebp
  42232c:	01 c7                	add    %eax,%edi
  42232e:	44 21 e3             	and    %r12d,%ebx
  422331:	d1 c5                	rol    %ebp
  422333:	01 df                	add    %ebx,%edi
  422335:	41 c1 c4 1e          	rol    $0x1e,%r12d
  422339:	89 6c 24 2c          	mov    %ebp,0x2c(%rsp)
  42233d:	01 cf                	add    %ecx,%edi
  42233f:	8b 54 24 30          	mov    0x30(%rsp),%edx
  422343:	44 89 e0             	mov    %r12d,%eax
  422346:	44 89 e3             	mov    %r12d,%ebx
  422349:	33 54 24 38          	xor    0x38(%rsp),%edx
  42234d:	44 21 e8             	and    %r13d,%eax
  422350:	89 f9                	mov    %edi,%ecx
  422352:	33 54 24 10          	xor    0x10(%rsp),%edx
  422356:	44 31 eb             	xor    %r13d,%ebx
  422359:	8d b4 35 dc bc 1b 8f 	lea    -0x70e44324(%rbp,%rsi,1),%esi
  422360:	c1 c1 05             	rol    $0x5,%ecx
  422363:	33 54 24 24          	xor    0x24(%rsp),%edx
  422367:	01 c6                	add    %eax,%esi
  422369:	44 21 db             	and    %r11d,%ebx
  42236c:	d1 c2                	rol    %edx
  42236e:	01 de                	add    %ebx,%esi
  422370:	41 c1 c3 1e          	rol    $0x1e,%r11d
  422374:	89 54 24 30          	mov    %edx,0x30(%rsp)
  422378:	01 ce                	add    %ecx,%esi
  42237a:	8b 6c 24 34          	mov    0x34(%rsp),%ebp
  42237e:	44 89 d8             	mov    %r11d,%eax
  422381:	89 f1                	mov    %esi,%ecx
  422383:	33 6c 24 3c          	xor    0x3c(%rsp),%ebp
  422387:	31 f8                	xor    %edi,%eax
  422389:	c1 c1 05             	rol    $0x5,%ecx
  42238c:	46 8d ac 2a d6 c1 62 	lea    -0x359d3e2a(%rdx,%r13,1),%r13d
  422393:	ca 
  422394:	33 6c 24 14          	xor    0x14(%rsp),%ebp
  422398:	44 31 e0             	xor    %r12d,%eax
  42239b:	41 01 cd             	add    %ecx,%r13d
  42239e:	33 6c 24 28          	xor    0x28(%rsp),%ebp
  4223a2:	c1 c7 1e             	rol    $0x1e,%edi
  4223a5:	41 01 c5             	add    %eax,%r13d
  4223a8:	d1 c5                	rol    %ebp
  4223aa:	89 6c 24 34          	mov    %ebp,0x34(%rsp)
  4223ae:	8b 54 24 38          	mov    0x38(%rsp),%edx
  4223b2:	89 f8                	mov    %edi,%eax
  4223b4:	44 89 e9             	mov    %r13d,%ecx
  4223b7:	33 14 24             	xor    (%rsp),%edx
  4223ba:	31 f0                	xor    %esi,%eax
  4223bc:	c1 c1 05             	rol    $0x5,%ecx
  4223bf:	46 8d a4 25 d6 c1 62 	lea    -0x359d3e2a(%rbp,%r12,1),%r12d
  4223c6:	ca 
  4223c7:	33 54 24 18          	xor    0x18(%rsp),%edx
  4223cb:	44 31 d8             	xor    %r11d,%eax
  4223ce:	41 01 cc             	add    %ecx,%r12d
  4223d1:	33 54 24 2c          	xor    0x2c(%rsp),%edx
  4223d5:	c1 c6 1e             	rol    $0x1e,%esi
  4223d8:	41 01 c4             	add    %eax,%r12d
  4223db:	d1 c2                	rol    %edx
  4223dd:	89 54 24 38          	mov    %edx,0x38(%rsp)
  4223e1:	8b 6c 24 3c          	mov    0x3c(%rsp),%ebp
  4223e5:	89 f0                	mov    %esi,%eax
  4223e7:	44 89 e1             	mov    %r12d,%ecx
  4223ea:	33 6c 24 04          	xor    0x4(%rsp),%ebp
  4223ee:	44 31 e8             	xor    %r13d,%eax
  4223f1:	c1 c1 05             	rol    $0x5,%ecx
  4223f4:	46 8d 9c 1a d6 c1 62 	lea    -0x359d3e2a(%rdx,%r11,1),%r11d
  4223fb:	ca 
  4223fc:	33 6c 24 1c          	xor    0x1c(%rsp),%ebp
  422400:	31 f8                	xor    %edi,%eax
  422402:	41 01 cb             	add    %ecx,%r11d
  422405:	33 6c 24 30          	xor    0x30(%rsp),%ebp
  422409:	41 c1 c5 1e          	rol    $0x1e,%r13d
  42240d:	41 01 c3             	add    %eax,%r11d
  422410:	d1 c5                	rol    %ebp
  422412:	89 6c 24 3c          	mov    %ebp,0x3c(%rsp)
  422416:	8b 14 24             	mov    (%rsp),%edx
  422419:	44 89 e8             	mov    %r13d,%eax
  42241c:	44 89 d9             	mov    %r11d,%ecx
  42241f:	33 54 24 08          	xor    0x8(%rsp),%edx
  422423:	44 31 e0             	xor    %r12d,%eax
  422426:	c1 c1 05             	rol    $0x5,%ecx
  422429:	8d bc 3d d6 c1 62 ca 	lea    -0x359d3e2a(%rbp,%rdi,1),%edi
  422430:	33 54 24 20          	xor    0x20(%rsp),%edx
  422434:	31 f0                	xor    %esi,%eax
  422436:	01 cf                	add    %ecx,%edi
  422438:	33 54 24 34          	xor    0x34(%rsp),%edx
  42243c:	41 c1 c4 1e          	rol    $0x1e,%r12d
  422440:	01 c7                	add    %eax,%edi
  422442:	d1 c2                	rol    %edx
  422444:	89 14 24             	mov    %edx,(%rsp)
  422447:	8b 6c 24 04          	mov    0x4(%rsp),%ebp
  42244b:	44 89 e0             	mov    %r12d,%eax
  42244e:	89 f9                	mov    %edi,%ecx
  422450:	33 6c 24 0c          	xor    0xc(%rsp),%ebp
  422454:	44 31 d8             	xor    %r11d,%eax
  422457:	c1 c1 05             	rol    $0x5,%ecx
  42245a:	8d b4 32 d6 c1 62 ca 	lea    -0x359d3e2a(%rdx,%rsi,1),%esi
  422461:	33 6c 24 24          	xor    0x24(%rsp),%ebp
  422465:	44 31 e8             	xor    %r13d,%eax
  422468:	01 ce                	add    %ecx,%esi
  42246a:	33 6c 24 38          	xor    0x38(%rsp),%ebp
  42246e:	41 c1 c3 1e          	rol    $0x1e,%r11d
  422472:	01 c6                	add    %eax,%esi
  422474:	d1 c5                	rol    %ebp
  422476:	89 6c 24 04          	mov    %ebp,0x4(%rsp)
  42247a:	8b 54 24 08          	mov    0x8(%rsp),%edx
  42247e:	44 89 d8             	mov    %r11d,%eax
  422481:	89 f1                	mov    %esi,%ecx
  422483:	33 54 24 10          	xor    0x10(%rsp),%edx
  422487:	31 f8                	xor    %edi,%eax
  422489:	c1 c1 05             	rol    $0x5,%ecx
  42248c:	46 8d ac 2d d6 c1 62 	lea    -0x359d3e2a(%rbp,%r13,1),%r13d
  422493:	ca 
  422494:	33 54 24 28          	xor    0x28(%rsp),%edx
  422498:	44 31 e0             	xor    %r12d,%eax
  42249b:	41 01 cd             	add    %ecx,%r13d
  42249e:	33 54 24 3c          	xor    0x3c(%rsp),%edx
  4224a2:	c1 c7 1e             	rol    $0x1e,%edi
  4224a5:	41 01 c5             	add    %eax,%r13d
  4224a8:	d1 c2                	rol    %edx
  4224aa:	89 54 24 08          	mov    %edx,0x8(%rsp)
  4224ae:	8b 6c 24 0c          	mov    0xc(%rsp),%ebp
  4224b2:	89 f8                	mov    %edi,%eax
  4224b4:	44 89 e9             	mov    %r13d,%ecx
  4224b7:	33 6c 24 14          	xor    0x14(%rsp),%ebp
  4224bb:	31 f0                	xor    %esi,%eax
  4224bd:	c1 c1 05             	rol    $0x5,%ecx
  4224c0:	46 8d a4 22 d6 c1 62 	lea    -0x359d3e2a(%rdx,%r12,1),%r12d
  4224c7:	ca 
  4224c8:	33 6c 24 2c          	xor    0x2c(%rsp),%ebp
  4224cc:	44 31 d8             	xor    %r11d,%eax
  4224cf:	41 01 cc             	add    %ecx,%r12d
  4224d2:	33 2c 24             	xor    (%rsp),%ebp
  4224d5:	c1 c6 1e             	rol    $0x1e,%esi
  4224d8:	41 01 c4             	add    %eax,%r12d
  4224db:	d1 c5                	rol    %ebp
  4224dd:	89 6c 24 0c          	mov    %ebp,0xc(%rsp)
  4224e1:	8b 54 24 10          	mov    0x10(%rsp),%edx
  4224e5:	89 f0                	mov    %esi,%eax
  4224e7:	44 89 e1             	mov    %r12d,%ecx
  4224ea:	33 54 24 18          	xor    0x18(%rsp),%edx
  4224ee:	44 31 e8             	xor    %r13d,%eax
  4224f1:	c1 c1 05             	rol    $0x5,%ecx
  4224f4:	46 8d 9c 1d d6 c1 62 	lea    -0x359d3e2a(%rbp,%r11,1),%r11d
  4224fb:	ca 
  4224fc:	33 54 24 30          	xor    0x30(%rsp),%edx
  422500:	31 f8                	xor    %edi,%eax
  422502:	41 01 cb             	add    %ecx,%r11d
  422505:	33 54 24 04          	xor    0x4(%rsp),%edx
  422509:	41 c1 c5 1e          	rol    $0x1e,%r13d
  42250d:	41 01 c3             	add    %eax,%r11d
  422510:	d1 c2                	rol    %edx
  422512:	89 54 24 10          	mov    %edx,0x10(%rsp)
  422516:	8b 6c 24 14          	mov    0x14(%rsp),%ebp
  42251a:	44 89 e8             	mov    %r13d,%eax
  42251d:	44 89 d9             	mov    %r11d,%ecx
  422520:	33 6c 24 1c          	xor    0x1c(%rsp),%ebp
  422524:	44 31 e0             	xor    %r12d,%eax
  422527:	c1 c1 05             	rol    $0x5,%ecx
  42252a:	8d bc 3a d6 c1 62 ca 	lea    -0x359d3e2a(%rdx,%rdi,1),%edi
  422531:	33 6c 24 34          	xor    0x34(%rsp),%ebp
  422535:	31 f0                	xor    %esi,%eax
  422537:	01 cf                	add    %ecx,%edi
  422539:	33 6c 24 08          	xor    0x8(%rsp),%ebp
  42253d:	41 c1 c4 1e          	rol    $0x1e,%r12d
  422541:	01 c7                	add    %eax,%edi
  422543:	d1 c5                	rol    %ebp
  422545:	89 6c 24 14          	mov    %ebp,0x14(%rsp)
  422549:	8b 54 24 18          	mov    0x18(%rsp),%edx
  42254d:	44 89 e0             	mov    %r12d,%eax
  422550:	89 f9                	mov    %edi,%ecx
  422552:	33 54 24 20          	xor    0x20(%rsp),%edx
  422556:	44 31 d8             	xor    %r11d,%eax
  422559:	c1 c1 05             	rol    $0x5,%ecx
  42255c:	8d b4 35 d6 c1 62 ca 	lea    -0x359d3e2a(%rbp,%rsi,1),%esi
  422563:	33 54 24 38          	xor    0x38(%rsp),%edx
  422567:	44 31 e8             	xor    %r13d,%eax
  42256a:	01 ce                	add    %ecx,%esi
  42256c:	33 54 24 0c          	xor    0xc(%rsp),%edx
  422570:	41 c1 c3 1e          	rol    $0x1e,%r11d
  422574:	01 c6                	add    %eax,%esi
  422576:	d1 c2                	rol    %edx
  422578:	89 54 24 18          	mov    %edx,0x18(%rsp)
  42257c:	8b 6c 24 1c          	mov    0x1c(%rsp),%ebp
  422580:	44 89 d8             	mov    %r11d,%eax
  422583:	89 f1                	mov    %esi,%ecx
  422585:	33 6c 24 24          	xor    0x24(%rsp),%ebp
  422589:	31 f8                	xor    %edi,%eax
  42258b:	c1 c1 05             	rol    $0x5,%ecx
  42258e:	46 8d ac 2a d6 c1 62 	lea    -0x359d3e2a(%rdx,%r13,1),%r13d
  422595:	ca 
  422596:	33 6c 24 3c          	xor    0x3c(%rsp),%ebp
  42259a:	44 31 e0             	xor    %r12d,%eax
  42259d:	41 01 cd             	add    %ecx,%r13d
  4225a0:	33 6c 24 10          	xor    0x10(%rsp),%ebp
  4225a4:	c1 c7 1e             	rol    $0x1e,%edi
  4225a7:	41 01 c5             	add    %eax,%r13d
  4225aa:	d1 c5                	rol    %ebp
  4225ac:	89 6c 24 1c          	mov    %ebp,0x1c(%rsp)
  4225b0:	8b 54 24 20          	mov    0x20(%rsp),%edx
  4225b4:	89 f8                	mov    %edi,%eax
  4225b6:	44 89 e9             	mov    %r13d,%ecx
  4225b9:	33 54 24 28          	xor    0x28(%rsp),%edx
  4225bd:	31 f0                	xor    %esi,%eax
  4225bf:	c1 c1 05             	rol    $0x5,%ecx
  4225c2:	46 8d a4 25 d6 c1 62 	lea    -0x359d3e2a(%rbp,%r12,1),%r12d
  4225c9:	ca 
  4225ca:	33 14 24             	xor    (%rsp),%edx
  4225cd:	44 31 d8             	xor    %r11d,%eax
  4225d0:	41 01 cc             	add    %ecx,%r12d
  4225d3:	33 54 24 14          	xor    0x14(%rsp),%edx
  4225d7:	c1 c6 1e             	rol    $0x1e,%esi
  4225da:	41 01 c4             	add    %eax,%r12d
  4225dd:	d1 c2                	rol    %edx
  4225df:	89 54 24 20          	mov    %edx,0x20(%rsp)
  4225e3:	8b 6c 24 24          	mov    0x24(%rsp),%ebp
  4225e7:	89 f0                	mov    %esi,%eax
  4225e9:	44 89 e1             	mov    %r12d,%ecx
  4225ec:	33 6c 24 2c          	xor    0x2c(%rsp),%ebp
  4225f0:	44 31 e8             	xor    %r13d,%eax
  4225f3:	c1 c1 05             	rol    $0x5,%ecx
  4225f6:	46 8d 9c 1a d6 c1 62 	lea    -0x359d3e2a(%rdx,%r11,1),%r11d
  4225fd:	ca 
  4225fe:	33 6c 24 04          	xor    0x4(%rsp),%ebp
  422602:	31 f8                	xor    %edi,%eax
  422604:	41 01 cb             	add    %ecx,%r11d
  422607:	33 6c 24 18          	xor    0x18(%rsp),%ebp
  42260b:	41 c1 c5 1e          	rol    $0x1e,%r13d
  42260f:	41 01 c3             	add    %eax,%r11d
  422612:	d1 c5                	rol    %ebp
  422614:	89 6c 24 24          	mov    %ebp,0x24(%rsp)
  422618:	8b 54 24 28          	mov    0x28(%rsp),%edx
  42261c:	44 89 e8             	mov    %r13d,%eax
  42261f:	44 89 d9             	mov    %r11d,%ecx
  422622:	33 54 24 30          	xor    0x30(%rsp),%edx
  422626:	44 31 e0             	xor    %r12d,%eax
  422629:	c1 c1 05             	rol    $0x5,%ecx
  42262c:	8d bc 3d d6 c1 62 ca 	lea    -0x359d3e2a(%rbp,%rdi,1),%edi
  422633:	33 54 24 08          	xor    0x8(%rsp),%edx
  422637:	31 f0                	xor    %esi,%eax
  422639:	01 cf                	add    %ecx,%edi
  42263b:	33 54 24 1c          	xor    0x1c(%rsp),%edx
  42263f:	41 c1 c4 1e          	rol    $0x1e,%r12d
  422643:	01 c7                	add    %eax,%edi
  422645:	d1 c2                	rol    %edx
  422647:	89 54 24 28          	mov    %edx,0x28(%rsp)
  42264b:	8b 6c 24 2c          	mov    0x2c(%rsp),%ebp
  42264f:	44 89 e0             	mov    %r12d,%eax
  422652:	89 f9                	mov    %edi,%ecx
  422654:	33 6c 24 34          	xor    0x34(%rsp),%ebp
  422658:	44 31 d8             	xor    %r11d,%eax
  42265b:	c1 c1 05             	rol    $0x5,%ecx
  42265e:	8d b4 32 d6 c1 62 ca 	lea    -0x359d3e2a(%rdx,%rsi,1),%esi
  422665:	33 6c 24 0c          	xor    0xc(%rsp),%ebp
  422669:	44 31 e8             	xor    %r13d,%eax
  42266c:	01 ce                	add    %ecx,%esi
  42266e:	33 6c 24 20          	xor    0x20(%rsp),%ebp
  422672:	41 c1 c3 1e          	rol    $0x1e,%r11d
  422676:	01 c6                	add    %eax,%esi
  422678:	d1 c5                	rol    %ebp
  42267a:	89 6c 24 2c          	mov    %ebp,0x2c(%rsp)
  42267e:	8b 54 24 30          	mov    0x30(%rsp),%edx
  422682:	44 89 d8             	mov    %r11d,%eax
  422685:	89 f1                	mov    %esi,%ecx
  422687:	33 54 24 38          	xor    0x38(%rsp),%edx
  42268b:	31 f8                	xor    %edi,%eax
  42268d:	c1 c1 05             	rol    $0x5,%ecx
  422690:	46 8d ac 2d d6 c1 62 	lea    -0x359d3e2a(%rbp,%r13,1),%r13d
  422697:	ca 
  422698:	33 54 24 10          	xor    0x10(%rsp),%edx
  42269c:	44 31 e0             	xor    %r12d,%eax
  42269f:	41 01 cd             	add    %ecx,%r13d
  4226a2:	33 54 24 24          	xor    0x24(%rsp),%edx
  4226a6:	c1 c7 1e             	rol    $0x1e,%edi
  4226a9:	41 01 c5             	add    %eax,%r13d
  4226ac:	d1 c2                	rol    %edx
  4226ae:	89 54 24 30          	mov    %edx,0x30(%rsp)
  4226b2:	8b 6c 24 34          	mov    0x34(%rsp),%ebp
  4226b6:	89 f8                	mov    %edi,%eax
  4226b8:	44 89 e9             	mov    %r13d,%ecx
  4226bb:	33 6c 24 3c          	xor    0x3c(%rsp),%ebp
  4226bf:	31 f0                	xor    %esi,%eax
  4226c1:	c1 c1 05             	rol    $0x5,%ecx
  4226c4:	46 8d a4 22 d6 c1 62 	lea    -0x359d3e2a(%rdx,%r12,1),%r12d
  4226cb:	ca 
  4226cc:	33 6c 24 14          	xor    0x14(%rsp),%ebp
  4226d0:	44 31 d8             	xor    %r11d,%eax
  4226d3:	41 01 cc             	add    %ecx,%r12d
  4226d6:	33 6c 24 28          	xor    0x28(%rsp),%ebp
  4226da:	c1 c6 1e             	rol    $0x1e,%esi
  4226dd:	41 01 c4             	add    %eax,%r12d
  4226e0:	d1 c5                	rol    %ebp
  4226e2:	8b 54 24 38          	mov    0x38(%rsp),%edx
  4226e6:	89 f0                	mov    %esi,%eax
  4226e8:	44 89 e1             	mov    %r12d,%ecx
  4226eb:	33 14 24             	xor    (%rsp),%edx
  4226ee:	44 31 e8             	xor    %r13d,%eax
  4226f1:	c1 c1 05             	rol    $0x5,%ecx
  4226f4:	46 8d 9c 1d d6 c1 62 	lea    -0x359d3e2a(%rbp,%r11,1),%r11d
  4226fb:	ca 
  4226fc:	33 54 24 18          	xor    0x18(%rsp),%edx
  422700:	31 f8                	xor    %edi,%eax
  422702:	41 01 cb             	add    %ecx,%r11d
  422705:	33 54 24 2c          	xor    0x2c(%rsp),%edx
  422709:	41 c1 c5 1e          	rol    $0x1e,%r13d
  42270d:	41 01 c3             	add    %eax,%r11d
  422710:	d1 c2                	rol    %edx
  422712:	8b 6c 24 3c          	mov    0x3c(%rsp),%ebp
  422716:	44 89 e8             	mov    %r13d,%eax
  422719:	44 89 d9             	mov    %r11d,%ecx
  42271c:	33 6c 24 04          	xor    0x4(%rsp),%ebp
  422720:	44 31 e0             	xor    %r12d,%eax
  422723:	c1 c1 05             	rol    $0x5,%ecx
  422726:	8d bc 3a d6 c1 62 ca 	lea    -0x359d3e2a(%rdx,%rdi,1),%edi
  42272d:	33 6c 24 1c          	xor    0x1c(%rsp),%ebp
  422731:	31 f0                	xor    %esi,%eax
  422733:	01 cf                	add    %ecx,%edi
  422735:	33 6c 24 30          	xor    0x30(%rsp),%ebp
  422739:	41 c1 c4 1e          	rol    $0x1e,%r12d
  42273d:	01 c7                	add    %eax,%edi
  42273f:	d1 c5                	rol    %ebp
  422741:	44 89 e0             	mov    %r12d,%eax
  422744:	89 f9                	mov    %edi,%ecx
  422746:	44 31 d8             	xor    %r11d,%eax
  422749:	8d b4 35 d6 c1 62 ca 	lea    -0x359d3e2a(%rbp,%rsi,1),%esi
  422750:	c1 c1 05             	rol    $0x5,%ecx
  422753:	44 31 e8             	xor    %r13d,%eax
  422756:	01 ce                	add    %ecx,%esi
  422758:	41 c1 c3 1e          	rol    $0x1e,%r11d
  42275c:	01 c6                	add    %eax,%esi
  42275e:	41 03 30             	add    (%r8),%esi
  422761:	41 03 78 04          	add    0x4(%r8),%edi
  422765:	45 03 58 08          	add    0x8(%r8),%r11d
  422769:	45 03 60 0c          	add    0xc(%r8),%r12d
  42276d:	45 03 68 10          	add    0x10(%r8),%r13d
  422771:	41 89 30             	mov    %esi,(%r8)
  422774:	41 89 78 04          	mov    %edi,0x4(%r8)
  422778:	45 89 58 08          	mov    %r11d,0x8(%r8)
  42277c:	45 89 60 0c          	mov    %r12d,0xc(%r8)
  422780:	45 89 68 10          	mov    %r13d,0x10(%r8)
  422784:	49 83 ea 01          	sub    $0x1,%r10
  422788:	4d 8d 49 40          	lea    0x40(%r9),%r9
  42278c:	0f 85 ae ef ff ff    	jne    421740 <sha1_block_data_order+0x80>
  422792:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  422797:	4c 8b 2e             	mov    (%rsi),%r13
  42279a:	4c 8b 66 08          	mov    0x8(%rsi),%r12
  42279e:	48 8b 6e 10          	mov    0x10(%rsi),%rbp
  4227a2:	48 8b 5e 18          	mov    0x18(%rsi),%rbx
  4227a6:	48 8d 66 20          	lea    0x20(%rsi),%rsp
  4227aa:	f3 c3                	repz retq 
  4227ac:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004227b0 <sha1_block_data_order_ssse3>:
  4227b0:	53                   	push   %rbx
  4227b1:	55                   	push   %rbp
  4227b2:	41 54                	push   %r12
  4227b4:	48 8d 64 24 c0       	lea    -0x40(%rsp),%rsp
  4227b9:	49 89 f8             	mov    %rdi,%r8
  4227bc:	49 89 f1             	mov    %rsi,%r9
  4227bf:	49 89 d2             	mov    %rdx,%r10
  4227c2:	49 c1 e2 06          	shl    $0x6,%r10
  4227c6:	4d 01 ca             	add    %r9,%r10
  4227c9:	4c 8d 1d 70 1c 00 00 	lea    0x1c70(%rip),%r11        # 424440 <K_XX_XX>
  4227d0:	41 8b 00             	mov    (%r8),%eax
  4227d3:	41 8b 58 04          	mov    0x4(%r8),%ebx
  4227d7:	41 8b 48 08          	mov    0x8(%r8),%ecx
  4227db:	41 8b 50 0c          	mov    0xc(%r8),%edx
  4227df:	89 de                	mov    %ebx,%esi
  4227e1:	41 8b 68 10          	mov    0x10(%r8),%ebp
  4227e5:	66 41 0f 6f 73 40    	movdqa 0x40(%r11),%xmm6
  4227eb:	66 45 0f 6f 0b       	movdqa (%r11),%xmm9
  4227f0:	f3 41 0f 6f 01       	movdqu (%r9),%xmm0
  4227f5:	f3 41 0f 6f 49 10    	movdqu 0x10(%r9),%xmm1
  4227fb:	f3 41 0f 6f 51 20    	movdqu 0x20(%r9),%xmm2
  422801:	f3 41 0f 6f 59 30    	movdqu 0x30(%r9),%xmm3
  422807:	66 0f 38 00 c6       	pshufb %xmm6,%xmm0
  42280c:	49 83 c1 40          	add    $0x40,%r9
  422810:	66 0f 38 00 ce       	pshufb %xmm6,%xmm1
  422815:	66 0f 38 00 d6       	pshufb %xmm6,%xmm2
  42281a:	66 0f 38 00 de       	pshufb %xmm6,%xmm3
  42281f:	66 41 0f fe c1       	paddd  %xmm9,%xmm0
  422824:	66 41 0f fe c9       	paddd  %xmm9,%xmm1
  422829:	66 41 0f fe d1       	paddd  %xmm9,%xmm2
  42282e:	66 0f 7f 04 24       	movdqa %xmm0,(%rsp)
  422833:	66 41 0f fa c1       	psubd  %xmm9,%xmm0
  422838:	66 0f 7f 4c 24 10    	movdqa %xmm1,0x10(%rsp)
  42283e:	66 41 0f fa c9       	psubd  %xmm9,%xmm1
  422843:	66 0f 7f 54 24 20    	movdqa %xmm2,0x20(%rsp)
  422849:	66 41 0f fa d1       	psubd  %xmm9,%xmm2
  42284e:	eb 00                	jmp    422850 <sha1_block_data_order_ssse3+0xa0>
  422850:	66 0f 6f e1          	movdqa %xmm1,%xmm4
  422854:	03 2c 24             	add    (%rsp),%ebp
  422857:	31 d1                	xor    %edx,%ecx
  422859:	66 44 0f 6f c3       	movdqa %xmm3,%xmm8
  42285e:	66 0f 3a 0f e0 08    	palignr $0x8,%xmm0,%xmm4
  422864:	89 c7                	mov    %eax,%edi
  422866:	c1 c0 05             	rol    $0x5,%eax
  422869:	66 44 0f fe cb       	paddd  %xmm3,%xmm9
  42286e:	21 ce                	and    %ecx,%esi
  422870:	31 d1                	xor    %edx,%ecx
  422872:	66 41 0f 73 d8 04    	psrldq $0x4,%xmm8
  422878:	31 d6                	xor    %edx,%esi
  42287a:	01 c5                	add    %eax,%ebp
  42287c:	66 0f ef e0          	pxor   %xmm0,%xmm4
  422880:	c1 cb 02             	ror    $0x2,%ebx
  422883:	01 f5                	add    %esi,%ebp
  422885:	66 44 0f ef c2       	pxor   %xmm2,%xmm8
  42288a:	03 54 24 04          	add    0x4(%rsp),%edx
  42288e:	31 cb                	xor    %ecx,%ebx
  422890:	89 ee                	mov    %ebp,%esi
  422892:	c1 c5 05             	rol    $0x5,%ebp
  422895:	66 41 0f ef e0       	pxor   %xmm8,%xmm4
  42289a:	21 df                	and    %ebx,%edi
  42289c:	31 cb                	xor    %ecx,%ebx
  42289e:	66 44 0f 7f 4c 24 30 	movdqa %xmm9,0x30(%rsp)
  4228a5:	31 cf                	xor    %ecx,%edi
  4228a7:	01 ea                	add    %ebp,%edx
  4228a9:	66 44 0f 6f d4       	movdqa %xmm4,%xmm10
  4228ae:	66 44 0f 6f c4       	movdqa %xmm4,%xmm8
  4228b3:	c1 c8 07             	ror    $0x7,%eax
  4228b6:	01 fa                	add    %edi,%edx
  4228b8:	03 4c 24 08          	add    0x8(%rsp),%ecx
  4228bc:	31 d8                	xor    %ebx,%eax
  4228be:	66 41 0f 73 fa 0c    	pslldq $0xc,%xmm10
  4228c4:	66 0f fe e4          	paddd  %xmm4,%xmm4
  4228c8:	89 d7                	mov    %edx,%edi
  4228ca:	c1 c2 05             	rol    $0x5,%edx
  4228cd:	21 c6                	and    %eax,%esi
  4228cf:	31 d8                	xor    %ebx,%eax
  4228d1:	66 41 0f 72 d0 1f    	psrld  $0x1f,%xmm8
  4228d7:	31 de                	xor    %ebx,%esi
  4228d9:	01 d1                	add    %edx,%ecx
  4228db:	66 45 0f 6f ca       	movdqa %xmm10,%xmm9
  4228e0:	c1 cd 07             	ror    $0x7,%ebp
  4228e3:	01 f1                	add    %esi,%ecx
  4228e5:	66 41 0f 72 d2 1e    	psrld  $0x1e,%xmm10
  4228eb:	66 41 0f eb e0       	por    %xmm8,%xmm4
  4228f0:	03 5c 24 0c          	add    0xc(%rsp),%ebx
  4228f4:	31 c5                	xor    %eax,%ebp
  4228f6:	89 ce                	mov    %ecx,%esi
  4228f8:	c1 c1 05             	rol    $0x5,%ecx
  4228fb:	66 41 0f 72 f1 02    	pslld  $0x2,%xmm9
  422901:	66 41 0f ef e2       	pxor   %xmm10,%xmm4
  422906:	21 ef                	and    %ebp,%edi
  422908:	31 c5                	xor    %eax,%ebp
  42290a:	66 45 0f 6f 13       	movdqa (%r11),%xmm10
  42290f:	31 c7                	xor    %eax,%edi
  422911:	01 cb                	add    %ecx,%ebx
  422913:	66 41 0f ef e1       	pxor   %xmm9,%xmm4
  422918:	c1 ca 07             	ror    $0x7,%edx
  42291b:	01 fb                	add    %edi,%ebx
  42291d:	66 0f 6f ea          	movdqa %xmm2,%xmm5
  422921:	03 44 24 10          	add    0x10(%rsp),%eax
  422925:	31 ea                	xor    %ebp,%edx
  422927:	66 44 0f 6f cc       	movdqa %xmm4,%xmm9
  42292c:	66 0f 3a 0f e9 08    	palignr $0x8,%xmm1,%xmm5
  422932:	89 df                	mov    %ebx,%edi
  422934:	c1 c3 05             	rol    $0x5,%ebx
  422937:	66 44 0f fe d4       	paddd  %xmm4,%xmm10
  42293c:	21 d6                	and    %edx,%esi
  42293e:	31 ea                	xor    %ebp,%edx
  422940:	66 41 0f 73 d9 04    	psrldq $0x4,%xmm9
  422946:	31 ee                	xor    %ebp,%esi
  422948:	01 d8                	add    %ebx,%eax
  42294a:	66 0f ef e9          	pxor   %xmm1,%xmm5
  42294e:	c1 c9 07             	ror    $0x7,%ecx
  422951:	01 f0                	add    %esi,%eax
  422953:	66 44 0f ef cb       	pxor   %xmm3,%xmm9
  422958:	03 6c 24 14          	add    0x14(%rsp),%ebp
  42295c:	31 d1                	xor    %edx,%ecx
  42295e:	89 c6                	mov    %eax,%esi
  422960:	c1 c0 05             	rol    $0x5,%eax
  422963:	66 41 0f ef e9       	pxor   %xmm9,%xmm5
  422968:	21 cf                	and    %ecx,%edi
  42296a:	31 d1                	xor    %edx,%ecx
  42296c:	66 44 0f 7f 14 24    	movdqa %xmm10,(%rsp)
  422972:	31 d7                	xor    %edx,%edi
  422974:	01 c5                	add    %eax,%ebp
  422976:	66 44 0f 6f c5       	movdqa %xmm5,%xmm8
  42297b:	66 44 0f 6f cd       	movdqa %xmm5,%xmm9
  422980:	c1 cb 07             	ror    $0x7,%ebx
  422983:	01 fd                	add    %edi,%ebp
  422985:	03 54 24 18          	add    0x18(%rsp),%edx
  422989:	31 cb                	xor    %ecx,%ebx
  42298b:	66 41 0f 73 f8 0c    	pslldq $0xc,%xmm8
  422991:	66 0f fe ed          	paddd  %xmm5,%xmm5
  422995:	89 ef                	mov    %ebp,%edi
  422997:	c1 c5 05             	rol    $0x5,%ebp
  42299a:	21 de                	and    %ebx,%esi
  42299c:	31 cb                	xor    %ecx,%ebx
  42299e:	66 41 0f 72 d1 1f    	psrld  $0x1f,%xmm9
  4229a4:	31 ce                	xor    %ecx,%esi
  4229a6:	01 ea                	add    %ebp,%edx
  4229a8:	66 45 0f 6f d0       	movdqa %xmm8,%xmm10
  4229ad:	c1 c8 07             	ror    $0x7,%eax
  4229b0:	01 f2                	add    %esi,%edx
  4229b2:	66 41 0f 72 d0 1e    	psrld  $0x1e,%xmm8
  4229b8:	66 41 0f eb e9       	por    %xmm9,%xmm5
  4229bd:	03 4c 24 1c          	add    0x1c(%rsp),%ecx
  4229c1:	31 d8                	xor    %ebx,%eax
  4229c3:	89 d6                	mov    %edx,%esi
  4229c5:	c1 c2 05             	rol    $0x5,%edx
  4229c8:	66 41 0f 72 f2 02    	pslld  $0x2,%xmm10
  4229ce:	66 41 0f ef e8       	pxor   %xmm8,%xmm5
  4229d3:	21 c7                	and    %eax,%edi
  4229d5:	31 d8                	xor    %ebx,%eax
  4229d7:	66 45 0f 6f 43 10    	movdqa 0x10(%r11),%xmm8
  4229dd:	31 df                	xor    %ebx,%edi
  4229df:	01 d1                	add    %edx,%ecx
  4229e1:	66 41 0f ef ea       	pxor   %xmm10,%xmm5
  4229e6:	c1 cd 07             	ror    $0x7,%ebp
  4229e9:	01 f9                	add    %edi,%ecx
  4229eb:	66 0f 6f f3          	movdqa %xmm3,%xmm6
  4229ef:	03 5c 24 20          	add    0x20(%rsp),%ebx
  4229f3:	31 c5                	xor    %eax,%ebp
  4229f5:	66 44 0f 6f d5       	movdqa %xmm5,%xmm10
  4229fa:	66 0f 3a 0f f2 08    	palignr $0x8,%xmm2,%xmm6
  422a00:	89 cf                	mov    %ecx,%edi
  422a02:	c1 c1 05             	rol    $0x5,%ecx
  422a05:	66 44 0f fe c5       	paddd  %xmm5,%xmm8
  422a0a:	21 ee                	and    %ebp,%esi
  422a0c:	31 c5                	xor    %eax,%ebp
  422a0e:	66 41 0f 73 da 04    	psrldq $0x4,%xmm10
  422a14:	31 c6                	xor    %eax,%esi
  422a16:	01 cb                	add    %ecx,%ebx
  422a18:	66 0f ef f2          	pxor   %xmm2,%xmm6
  422a1c:	c1 ca 07             	ror    $0x7,%edx
  422a1f:	01 f3                	add    %esi,%ebx
  422a21:	66 44 0f ef d4       	pxor   %xmm4,%xmm10
  422a26:	03 44 24 24          	add    0x24(%rsp),%eax
  422a2a:	31 ea                	xor    %ebp,%edx
  422a2c:	89 de                	mov    %ebx,%esi
  422a2e:	c1 c3 05             	rol    $0x5,%ebx
  422a31:	66 41 0f ef f2       	pxor   %xmm10,%xmm6
  422a36:	21 d7                	and    %edx,%edi
  422a38:	31 ea                	xor    %ebp,%edx
  422a3a:	66 44 0f 7f 44 24 10 	movdqa %xmm8,0x10(%rsp)
  422a41:	31 ef                	xor    %ebp,%edi
  422a43:	01 d8                	add    %ebx,%eax
  422a45:	66 44 0f 6f ce       	movdqa %xmm6,%xmm9
  422a4a:	66 44 0f 6f d6       	movdqa %xmm6,%xmm10
  422a4f:	c1 c9 07             	ror    $0x7,%ecx
  422a52:	01 f8                	add    %edi,%eax
  422a54:	03 6c 24 28          	add    0x28(%rsp),%ebp
  422a58:	31 d1                	xor    %edx,%ecx
  422a5a:	66 41 0f 73 f9 0c    	pslldq $0xc,%xmm9
  422a60:	66 0f fe f6          	paddd  %xmm6,%xmm6
  422a64:	89 c7                	mov    %eax,%edi
  422a66:	c1 c0 05             	rol    $0x5,%eax
  422a69:	21 ce                	and    %ecx,%esi
  422a6b:	31 d1                	xor    %edx,%ecx
  422a6d:	66 41 0f 72 d2 1f    	psrld  $0x1f,%xmm10
  422a73:	31 d6                	xor    %edx,%esi
  422a75:	01 c5                	add    %eax,%ebp
  422a77:	66 45 0f 6f c1       	movdqa %xmm9,%xmm8
  422a7c:	c1 cb 07             	ror    $0x7,%ebx
  422a7f:	01 f5                	add    %esi,%ebp
  422a81:	66 41 0f 72 d1 1e    	psrld  $0x1e,%xmm9
  422a87:	66 41 0f eb f2       	por    %xmm10,%xmm6
  422a8c:	03 54 24 2c          	add    0x2c(%rsp),%edx
  422a90:	31 cb                	xor    %ecx,%ebx
  422a92:	89 ee                	mov    %ebp,%esi
  422a94:	c1 c5 05             	rol    $0x5,%ebp
  422a97:	66 41 0f 72 f0 02    	pslld  $0x2,%xmm8
  422a9d:	66 41 0f ef f1       	pxor   %xmm9,%xmm6
  422aa2:	21 df                	and    %ebx,%edi
  422aa4:	31 cb                	xor    %ecx,%ebx
  422aa6:	66 45 0f 6f 4b 10    	movdqa 0x10(%r11),%xmm9
  422aac:	31 cf                	xor    %ecx,%edi
  422aae:	01 ea                	add    %ebp,%edx
  422ab0:	66 41 0f ef f0       	pxor   %xmm8,%xmm6
  422ab5:	c1 c8 07             	ror    $0x7,%eax
  422ab8:	01 fa                	add    %edi,%edx
  422aba:	66 0f 6f fc          	movdqa %xmm4,%xmm7
  422abe:	03 4c 24 30          	add    0x30(%rsp),%ecx
  422ac2:	31 d8                	xor    %ebx,%eax
  422ac4:	66 44 0f 6f c6       	movdqa %xmm6,%xmm8
  422ac9:	66 0f 3a 0f fb 08    	palignr $0x8,%xmm3,%xmm7
  422acf:	89 d7                	mov    %edx,%edi
  422ad1:	c1 c2 05             	rol    $0x5,%edx
  422ad4:	66 44 0f fe ce       	paddd  %xmm6,%xmm9
  422ad9:	21 c6                	and    %eax,%esi
  422adb:	31 d8                	xor    %ebx,%eax
  422add:	66 41 0f 73 d8 04    	psrldq $0x4,%xmm8
  422ae3:	31 de                	xor    %ebx,%esi
  422ae5:	01 d1                	add    %edx,%ecx
  422ae7:	66 0f ef fb          	pxor   %xmm3,%xmm7
  422aeb:	c1 cd 07             	ror    $0x7,%ebp
  422aee:	01 f1                	add    %esi,%ecx
  422af0:	66 44 0f ef c5       	pxor   %xmm5,%xmm8
  422af5:	03 5c 24 34          	add    0x34(%rsp),%ebx
  422af9:	31 c5                	xor    %eax,%ebp
  422afb:	89 ce                	mov    %ecx,%esi
  422afd:	c1 c1 05             	rol    $0x5,%ecx
  422b00:	66 41 0f ef f8       	pxor   %xmm8,%xmm7
  422b05:	21 ef                	and    %ebp,%edi
  422b07:	31 c5                	xor    %eax,%ebp
  422b09:	66 44 0f 7f 4c 24 20 	movdqa %xmm9,0x20(%rsp)
  422b10:	31 c7                	xor    %eax,%edi
  422b12:	01 cb                	add    %ecx,%ebx
  422b14:	66 44 0f 6f d7       	movdqa %xmm7,%xmm10
  422b19:	66 44 0f 6f c7       	movdqa %xmm7,%xmm8
  422b1e:	c1 ca 07             	ror    $0x7,%edx
  422b21:	01 fb                	add    %edi,%ebx
  422b23:	03 44 24 38          	add    0x38(%rsp),%eax
  422b27:	31 ea                	xor    %ebp,%edx
  422b29:	66 41 0f 73 fa 0c    	pslldq $0xc,%xmm10
  422b2f:	66 0f fe ff          	paddd  %xmm7,%xmm7
  422b33:	89 df                	mov    %ebx,%edi
  422b35:	c1 c3 05             	rol    $0x5,%ebx
  422b38:	21 d6                	and    %edx,%esi
  422b3a:	31 ea                	xor    %ebp,%edx
  422b3c:	66 41 0f 72 d0 1f    	psrld  $0x1f,%xmm8
  422b42:	31 ee                	xor    %ebp,%esi
  422b44:	01 d8                	add    %ebx,%eax
  422b46:	66 45 0f 6f ca       	movdqa %xmm10,%xmm9
  422b4b:	c1 c9 07             	ror    $0x7,%ecx
  422b4e:	01 f0                	add    %esi,%eax
  422b50:	66 41 0f 72 d2 1e    	psrld  $0x1e,%xmm10
  422b56:	66 41 0f eb f8       	por    %xmm8,%xmm7
  422b5b:	03 6c 24 3c          	add    0x3c(%rsp),%ebp
  422b5f:	31 d1                	xor    %edx,%ecx
  422b61:	89 c6                	mov    %eax,%esi
  422b63:	c1 c0 05             	rol    $0x5,%eax
  422b66:	66 41 0f 72 f1 02    	pslld  $0x2,%xmm9
  422b6c:	66 41 0f ef fa       	pxor   %xmm10,%xmm7
  422b71:	21 cf                	and    %ecx,%edi
  422b73:	31 d1                	xor    %edx,%ecx
  422b75:	66 45 0f 6f 53 10    	movdqa 0x10(%r11),%xmm10
  422b7b:	31 d7                	xor    %edx,%edi
  422b7d:	01 c5                	add    %eax,%ebp
  422b7f:	66 41 0f ef f9       	pxor   %xmm9,%xmm7
  422b84:	c1 cb 07             	ror    $0x7,%ebx
  422b87:	01 fd                	add    %edi,%ebp
  422b89:	66 44 0f 6f cf       	movdqa %xmm7,%xmm9
  422b8e:	03 14 24             	add    (%rsp),%edx
  422b91:	66 0f ef c4          	pxor   %xmm4,%xmm0
  422b95:	66 44 0f 3a 0f ce 08 	palignr $0x8,%xmm6,%xmm9
  422b9c:	31 cb                	xor    %ecx,%ebx
  422b9e:	89 ef                	mov    %ebp,%edi
  422ba0:	c1 c5 05             	rol    $0x5,%ebp
  422ba3:	66 0f ef c1          	pxor   %xmm1,%xmm0
  422ba7:	21 de                	and    %ebx,%esi
  422ba9:	31 cb                	xor    %ecx,%ebx
  422bab:	66 45 0f 6f c2       	movdqa %xmm10,%xmm8
  422bb0:	66 44 0f fe d7       	paddd  %xmm7,%xmm10
  422bb5:	31 ce                	xor    %ecx,%esi
  422bb7:	01 ea                	add    %ebp,%edx
  422bb9:	66 41 0f ef c1       	pxor   %xmm9,%xmm0
  422bbe:	c1 c8 07             	ror    $0x7,%eax
  422bc1:	01 f2                	add    %esi,%edx
  422bc3:	03 4c 24 04          	add    0x4(%rsp),%ecx
  422bc7:	31 d8                	xor    %ebx,%eax
  422bc9:	66 44 0f 6f c8       	movdqa %xmm0,%xmm9
  422bce:	66 44 0f 7f 54 24 30 	movdqa %xmm10,0x30(%rsp)
  422bd5:	89 d6                	mov    %edx,%esi
  422bd7:	c1 c2 05             	rol    $0x5,%edx
  422bda:	21 c7                	and    %eax,%edi
  422bdc:	31 d8                	xor    %ebx,%eax
  422bde:	66 0f 72 f0 02       	pslld  $0x2,%xmm0
  422be3:	31 df                	xor    %ebx,%edi
  422be5:	01 d1                	add    %edx,%ecx
  422be7:	66 41 0f 72 d1 1e    	psrld  $0x1e,%xmm9
  422bed:	c1 cd 07             	ror    $0x7,%ebp
  422bf0:	01 f9                	add    %edi,%ecx
  422bf2:	03 5c 24 08          	add    0x8(%rsp),%ebx
  422bf6:	31 c5                	xor    %eax,%ebp
  422bf8:	89 cf                	mov    %ecx,%edi
  422bfa:	c1 c1 05             	rol    $0x5,%ecx
  422bfd:	66 41 0f eb c1       	por    %xmm9,%xmm0
  422c02:	21 ee                	and    %ebp,%esi
  422c04:	31 c5                	xor    %eax,%ebp
  422c06:	66 44 0f 6f d0       	movdqa %xmm0,%xmm10
  422c0b:	31 c6                	xor    %eax,%esi
  422c0d:	01 cb                	add    %ecx,%ebx
  422c0f:	c1 ca 07             	ror    $0x7,%edx
  422c12:	01 f3                	add    %esi,%ebx
  422c14:	03 44 24 0c          	add    0xc(%rsp),%eax
  422c18:	31 ea                	xor    %ebp,%edx
  422c1a:	89 de                	mov    %ebx,%esi
  422c1c:	c1 c3 05             	rol    $0x5,%ebx
  422c1f:	21 d7                	and    %edx,%edi
  422c21:	31 ea                	xor    %ebp,%edx
  422c23:	31 ef                	xor    %ebp,%edi
  422c25:	01 d8                	add    %ebx,%eax
  422c27:	c1 c9 07             	ror    $0x7,%ecx
  422c2a:	01 f8                	add    %edi,%eax
  422c2c:	03 6c 24 10          	add    0x10(%rsp),%ebp
  422c30:	66 0f ef cd          	pxor   %xmm5,%xmm1
  422c34:	66 44 0f 3a 0f d7 08 	palignr $0x8,%xmm7,%xmm10
  422c3b:	31 d6                	xor    %edx,%esi
  422c3d:	89 c7                	mov    %eax,%edi
  422c3f:	c1 c0 05             	rol    $0x5,%eax
  422c42:	66 0f ef ca          	pxor   %xmm2,%xmm1
  422c46:	31 ce                	xor    %ecx,%esi
  422c48:	01 c5                	add    %eax,%ebp
  422c4a:	66 45 0f 6f c8       	movdqa %xmm8,%xmm9
  422c4f:	66 44 0f fe c0       	paddd  %xmm0,%xmm8
  422c54:	c1 cb 07             	ror    $0x7,%ebx
  422c57:	01 f5                	add    %esi,%ebp
  422c59:	66 41 0f ef ca       	pxor   %xmm10,%xmm1
  422c5e:	03 54 24 14          	add    0x14(%rsp),%edx
  422c62:	31 cf                	xor    %ecx,%edi
  422c64:	89 ee                	mov    %ebp,%esi
  422c66:	c1 c5 05             	rol    $0x5,%ebp
  422c69:	66 44 0f 6f d1       	movdqa %xmm1,%xmm10
  422c6e:	66 44 0f 7f 04 24    	movdqa %xmm8,(%rsp)
  422c74:	31 df                	xor    %ebx,%edi
  422c76:	01 ea                	add    %ebp,%edx
  422c78:	c1 c8 07             	ror    $0x7,%eax
  422c7b:	01 fa                	add    %edi,%edx
  422c7d:	66 0f 72 f1 02       	pslld  $0x2,%xmm1
  422c82:	03 4c 24 18          	add    0x18(%rsp),%ecx
  422c86:	31 de                	xor    %ebx,%esi
  422c88:	66 41 0f 72 d2 1e    	psrld  $0x1e,%xmm10
  422c8e:	89 d7                	mov    %edx,%edi
  422c90:	c1 c2 05             	rol    $0x5,%edx
  422c93:	31 c6                	xor    %eax,%esi
  422c95:	01 d1                	add    %edx,%ecx
  422c97:	c1 cd 07             	ror    $0x7,%ebp
  422c9a:	01 f1                	add    %esi,%ecx
  422c9c:	66 41 0f eb ca       	por    %xmm10,%xmm1
  422ca1:	03 5c 24 1c          	add    0x1c(%rsp),%ebx
  422ca5:	31 c7                	xor    %eax,%edi
  422ca7:	66 44 0f 6f c1       	movdqa %xmm1,%xmm8
  422cac:	89 ce                	mov    %ecx,%esi
  422cae:	c1 c1 05             	rol    $0x5,%ecx
  422cb1:	31 ef                	xor    %ebp,%edi
  422cb3:	01 cb                	add    %ecx,%ebx
  422cb5:	c1 ca 07             	ror    $0x7,%edx
  422cb8:	01 fb                	add    %edi,%ebx
  422cba:	03 44 24 20          	add    0x20(%rsp),%eax
  422cbe:	66 0f ef d6          	pxor   %xmm6,%xmm2
  422cc2:	66 44 0f 3a 0f c0 08 	palignr $0x8,%xmm0,%xmm8
  422cc9:	31 ee                	xor    %ebp,%esi
  422ccb:	89 df                	mov    %ebx,%edi
  422ccd:	c1 c3 05             	rol    $0x5,%ebx
  422cd0:	66 0f ef d3          	pxor   %xmm3,%xmm2
  422cd4:	31 d6                	xor    %edx,%esi
  422cd6:	01 d8                	add    %ebx,%eax
  422cd8:	66 45 0f 6f 53 20    	movdqa 0x20(%r11),%xmm10
  422cde:	66 44 0f fe c9       	paddd  %xmm1,%xmm9
  422ce3:	c1 c9 07             	ror    $0x7,%ecx
  422ce6:	01 f0                	add    %esi,%eax
  422ce8:	66 41 0f ef d0       	pxor   %xmm8,%xmm2
  422ced:	03 6c 24 24          	add    0x24(%rsp),%ebp
  422cf1:	31 d7                	xor    %edx,%edi
  422cf3:	89 c6                	mov    %eax,%esi
  422cf5:	c1 c0 05             	rol    $0x5,%eax
  422cf8:	66 44 0f 6f c2       	movdqa %xmm2,%xmm8
  422cfd:	66 44 0f 7f 4c 24 10 	movdqa %xmm9,0x10(%rsp)
  422d04:	31 cf                	xor    %ecx,%edi
  422d06:	01 c5                	add    %eax,%ebp
  422d08:	c1 cb 07             	ror    $0x7,%ebx
  422d0b:	01 fd                	add    %edi,%ebp
  422d0d:	66 0f 72 f2 02       	pslld  $0x2,%xmm2
  422d12:	03 54 24 28          	add    0x28(%rsp),%edx
  422d16:	31 ce                	xor    %ecx,%esi
  422d18:	66 41 0f 72 d0 1e    	psrld  $0x1e,%xmm8
  422d1e:	89 ef                	mov    %ebp,%edi
  422d20:	c1 c5 05             	rol    $0x5,%ebp
  422d23:	31 de                	xor    %ebx,%esi
  422d25:	01 ea                	add    %ebp,%edx
  422d27:	c1 c8 07             	ror    $0x7,%eax
  422d2a:	01 f2                	add    %esi,%edx
  422d2c:	66 41 0f eb d0       	por    %xmm8,%xmm2
  422d31:	03 4c 24 2c          	add    0x2c(%rsp),%ecx
  422d35:	31 df                	xor    %ebx,%edi
  422d37:	66 44 0f 6f ca       	movdqa %xmm2,%xmm9
  422d3c:	89 d6                	mov    %edx,%esi
  422d3e:	c1 c2 05             	rol    $0x5,%edx
  422d41:	31 c7                	xor    %eax,%edi
  422d43:	01 d1                	add    %edx,%ecx
  422d45:	c1 cd 07             	ror    $0x7,%ebp
  422d48:	01 f9                	add    %edi,%ecx
  422d4a:	03 5c 24 30          	add    0x30(%rsp),%ebx
  422d4e:	66 0f ef df          	pxor   %xmm7,%xmm3
  422d52:	66 44 0f 3a 0f c9 08 	palignr $0x8,%xmm1,%xmm9
  422d59:	31 c6                	xor    %eax,%esi
  422d5b:	89 cf                	mov    %ecx,%edi
  422d5d:	c1 c1 05             	rol    $0x5,%ecx
  422d60:	66 0f ef dc          	pxor   %xmm4,%xmm3
  422d64:	31 ee                	xor    %ebp,%esi
  422d66:	01 cb                	add    %ecx,%ebx
  422d68:	66 45 0f 6f c2       	movdqa %xmm10,%xmm8
  422d6d:	66 44 0f fe d2       	paddd  %xmm2,%xmm10
  422d72:	c1 ca 07             	ror    $0x7,%edx
  422d75:	01 f3                	add    %esi,%ebx
  422d77:	66 41 0f ef d9       	pxor   %xmm9,%xmm3
  422d7c:	03 44 24 34          	add    0x34(%rsp),%eax
  422d80:	31 ef                	xor    %ebp,%edi
  422d82:	89 de                	mov    %ebx,%esi
  422d84:	c1 c3 05             	rol    $0x5,%ebx
  422d87:	66 44 0f 6f cb       	movdqa %xmm3,%xmm9
  422d8c:	66 44 0f 7f 54 24 20 	movdqa %xmm10,0x20(%rsp)
  422d93:	31 d7                	xor    %edx,%edi
  422d95:	01 d8                	add    %ebx,%eax
  422d97:	c1 c9 07             	ror    $0x7,%ecx
  422d9a:	01 f8                	add    %edi,%eax
  422d9c:	66 0f 72 f3 02       	pslld  $0x2,%xmm3
  422da1:	03 6c 24 38          	add    0x38(%rsp),%ebp
  422da5:	31 d6                	xor    %edx,%esi
  422da7:	66 41 0f 72 d1 1e    	psrld  $0x1e,%xmm9
  422dad:	89 c7                	mov    %eax,%edi
  422daf:	c1 c0 05             	rol    $0x5,%eax
  422db2:	31 ce                	xor    %ecx,%esi
  422db4:	01 c5                	add    %eax,%ebp
  422db6:	c1 cb 07             	ror    $0x7,%ebx
  422db9:	01 f5                	add    %esi,%ebp
  422dbb:	66 41 0f eb d9       	por    %xmm9,%xmm3
  422dc0:	03 54 24 3c          	add    0x3c(%rsp),%edx
  422dc4:	31 cf                	xor    %ecx,%edi
  422dc6:	66 44 0f 6f d3       	movdqa %xmm3,%xmm10
  422dcb:	89 ee                	mov    %ebp,%esi
  422dcd:	c1 c5 05             	rol    $0x5,%ebp
  422dd0:	31 df                	xor    %ebx,%edi
  422dd2:	01 ea                	add    %ebp,%edx
  422dd4:	c1 c8 07             	ror    $0x7,%eax
  422dd7:	01 fa                	add    %edi,%edx
  422dd9:	03 0c 24             	add    (%rsp),%ecx
  422ddc:	66 0f ef e0          	pxor   %xmm0,%xmm4
  422de0:	66 44 0f 3a 0f d2 08 	palignr $0x8,%xmm2,%xmm10
  422de7:	31 de                	xor    %ebx,%esi
  422de9:	89 d7                	mov    %edx,%edi
  422deb:	c1 c2 05             	rol    $0x5,%edx
  422dee:	66 0f ef e5          	pxor   %xmm5,%xmm4
  422df2:	31 c6                	xor    %eax,%esi
  422df4:	01 d1                	add    %edx,%ecx
  422df6:	66 45 0f 6f c8       	movdqa %xmm8,%xmm9
  422dfb:	66 44 0f fe c3       	paddd  %xmm3,%xmm8
  422e00:	c1 cd 07             	ror    $0x7,%ebp
  422e03:	01 f1                	add    %esi,%ecx
  422e05:	66 41 0f ef e2       	pxor   %xmm10,%xmm4
  422e0a:	03 5c 24 04          	add    0x4(%rsp),%ebx
  422e0e:	31 c7                	xor    %eax,%edi
  422e10:	89 ce                	mov    %ecx,%esi
  422e12:	c1 c1 05             	rol    $0x5,%ecx
  422e15:	66 44 0f 6f d4       	movdqa %xmm4,%xmm10
  422e1a:	66 44 0f 7f 44 24 30 	movdqa %xmm8,0x30(%rsp)
  422e21:	31 ef                	xor    %ebp,%edi
  422e23:	01 cb                	add    %ecx,%ebx
  422e25:	c1 ca 07             	ror    $0x7,%edx
  422e28:	01 fb                	add    %edi,%ebx
  422e2a:	66 0f 72 f4 02       	pslld  $0x2,%xmm4
  422e2f:	03 44 24 08          	add    0x8(%rsp),%eax
  422e33:	31 ee                	xor    %ebp,%esi
  422e35:	66 41 0f 72 d2 1e    	psrld  $0x1e,%xmm10
  422e3b:	89 df                	mov    %ebx,%edi
  422e3d:	c1 c3 05             	rol    $0x5,%ebx
  422e40:	31 d6                	xor    %edx,%esi
  422e42:	01 d8                	add    %ebx,%eax
  422e44:	c1 c9 07             	ror    $0x7,%ecx
  422e47:	01 f0                	add    %esi,%eax
  422e49:	66 41 0f eb e2       	por    %xmm10,%xmm4
  422e4e:	03 6c 24 0c          	add    0xc(%rsp),%ebp
  422e52:	31 d7                	xor    %edx,%edi
  422e54:	66 44 0f 6f c4       	movdqa %xmm4,%xmm8
  422e59:	89 c6                	mov    %eax,%esi
  422e5b:	c1 c0 05             	rol    $0x5,%eax
  422e5e:	31 cf                	xor    %ecx,%edi
  422e60:	01 c5                	add    %eax,%ebp
  422e62:	c1 cb 07             	ror    $0x7,%ebx
  422e65:	01 fd                	add    %edi,%ebp
  422e67:	03 54 24 10          	add    0x10(%rsp),%edx
  422e6b:	66 0f ef e9          	pxor   %xmm1,%xmm5
  422e6f:	66 44 0f 3a 0f c3 08 	palignr $0x8,%xmm3,%xmm8
  422e76:	31 ce                	xor    %ecx,%esi
  422e78:	89 ef                	mov    %ebp,%edi
  422e7a:	c1 c5 05             	rol    $0x5,%ebp
  422e7d:	66 0f ef ee          	pxor   %xmm6,%xmm5
  422e81:	31 de                	xor    %ebx,%esi
  422e83:	01 ea                	add    %ebp,%edx
  422e85:	66 45 0f 6f d1       	movdqa %xmm9,%xmm10
  422e8a:	66 44 0f fe cc       	paddd  %xmm4,%xmm9
  422e8f:	c1 c8 07             	ror    $0x7,%eax
  422e92:	01 f2                	add    %esi,%edx
  422e94:	66 41 0f ef e8       	pxor   %xmm8,%xmm5
  422e99:	03 4c 24 14          	add    0x14(%rsp),%ecx
  422e9d:	31 df                	xor    %ebx,%edi
  422e9f:	89 d6                	mov    %edx,%esi
  422ea1:	c1 c2 05             	rol    $0x5,%edx
  422ea4:	66 44 0f 6f c5       	movdqa %xmm5,%xmm8
  422ea9:	66 44 0f 7f 0c 24    	movdqa %xmm9,(%rsp)
  422eaf:	31 c7                	xor    %eax,%edi
  422eb1:	01 d1                	add    %edx,%ecx
  422eb3:	c1 cd 07             	ror    $0x7,%ebp
  422eb6:	01 f9                	add    %edi,%ecx
  422eb8:	66 0f 72 f5 02       	pslld  $0x2,%xmm5
  422ebd:	03 5c 24 18          	add    0x18(%rsp),%ebx
  422ec1:	31 c6                	xor    %eax,%esi
  422ec3:	66 41 0f 72 d0 1e    	psrld  $0x1e,%xmm8
  422ec9:	89 cf                	mov    %ecx,%edi
  422ecb:	c1 c1 05             	rol    $0x5,%ecx
  422ece:	31 ee                	xor    %ebp,%esi
  422ed0:	01 cb                	add    %ecx,%ebx
  422ed2:	c1 ca 07             	ror    $0x7,%edx
  422ed5:	01 f3                	add    %esi,%ebx
  422ed7:	66 41 0f eb e8       	por    %xmm8,%xmm5
  422edc:	03 44 24 1c          	add    0x1c(%rsp),%eax
  422ee0:	31 ef                	xor    %ebp,%edi
  422ee2:	66 44 0f 6f cd       	movdqa %xmm5,%xmm9
  422ee7:	89 de                	mov    %ebx,%esi
  422ee9:	c1 c3 05             	rol    $0x5,%ebx
  422eec:	31 d7                	xor    %edx,%edi
  422eee:	01 d8                	add    %ebx,%eax
  422ef0:	c1 c9 07             	ror    $0x7,%ecx
  422ef3:	01 f8                	add    %edi,%eax
  422ef5:	89 cf                	mov    %ecx,%edi
  422ef7:	66 0f ef f2          	pxor   %xmm2,%xmm6
  422efb:	66 44 0f 3a 0f cc 08 	palignr $0x8,%xmm4,%xmm9
  422f02:	31 d1                	xor    %edx,%ecx
  422f04:	03 6c 24 20          	add    0x20(%rsp),%ebp
  422f08:	21 d7                	and    %edx,%edi
  422f0a:	66 0f ef f7          	pxor   %xmm7,%xmm6
  422f0e:	21 ce                	and    %ecx,%esi
  422f10:	c1 cb 07             	ror    $0x7,%ebx
  422f13:	66 45 0f 6f c2       	movdqa %xmm10,%xmm8
  422f18:	66 44 0f fe d5       	paddd  %xmm5,%xmm10
  422f1d:	01 fd                	add    %edi,%ebp
  422f1f:	89 c7                	mov    %eax,%edi
  422f21:	66 41 0f ef f1       	pxor   %xmm9,%xmm6
  422f26:	c1 c0 05             	rol    $0x5,%eax
  422f29:	01 f5                	add    %esi,%ebp
  422f2b:	31 d1                	xor    %edx,%ecx
  422f2d:	01 c5                	add    %eax,%ebp
  422f2f:	66 44 0f 6f ce       	movdqa %xmm6,%xmm9
  422f34:	66 44 0f 7f 54 24 10 	movdqa %xmm10,0x10(%rsp)
  422f3b:	89 de                	mov    %ebx,%esi
  422f3d:	31 cb                	xor    %ecx,%ebx
  422f3f:	03 54 24 24          	add    0x24(%rsp),%edx
  422f43:	21 ce                	and    %ecx,%esi
  422f45:	66 0f 72 f6 02       	pslld  $0x2,%xmm6
  422f4a:	21 df                	and    %ebx,%edi
  422f4c:	c1 c8 07             	ror    $0x7,%eax
  422f4f:	66 41 0f 72 d1 1e    	psrld  $0x1e,%xmm9
  422f55:	01 f2                	add    %esi,%edx
  422f57:	89 ee                	mov    %ebp,%esi
  422f59:	c1 c5 05             	rol    $0x5,%ebp
  422f5c:	01 fa                	add    %edi,%edx
  422f5e:	31 cb                	xor    %ecx,%ebx
  422f60:	01 ea                	add    %ebp,%edx
  422f62:	66 41 0f eb f1       	por    %xmm9,%xmm6
  422f67:	89 c7                	mov    %eax,%edi
  422f69:	31 d8                	xor    %ebx,%eax
  422f6b:	66 44 0f 6f d6       	movdqa %xmm6,%xmm10
  422f70:	03 4c 24 28          	add    0x28(%rsp),%ecx
  422f74:	21 df                	and    %ebx,%edi
  422f76:	21 c6                	and    %eax,%esi
  422f78:	c1 cd 07             	ror    $0x7,%ebp
  422f7b:	01 f9                	add    %edi,%ecx
  422f7d:	89 d7                	mov    %edx,%edi
  422f7f:	c1 c2 05             	rol    $0x5,%edx
  422f82:	01 f1                	add    %esi,%ecx
  422f84:	31 d8                	xor    %ebx,%eax
  422f86:	01 d1                	add    %edx,%ecx
  422f88:	89 ee                	mov    %ebp,%esi
  422f8a:	31 c5                	xor    %eax,%ebp
  422f8c:	03 5c 24 2c          	add    0x2c(%rsp),%ebx
  422f90:	21 c6                	and    %eax,%esi
  422f92:	21 ef                	and    %ebp,%edi
  422f94:	c1 ca 07             	ror    $0x7,%edx
  422f97:	01 f3                	add    %esi,%ebx
  422f99:	89 ce                	mov    %ecx,%esi
  422f9b:	c1 c1 05             	rol    $0x5,%ecx
  422f9e:	01 fb                	add    %edi,%ebx
  422fa0:	31 c5                	xor    %eax,%ebp
  422fa2:	01 cb                	add    %ecx,%ebx
  422fa4:	89 d7                	mov    %edx,%edi
  422fa6:	66 0f ef fb          	pxor   %xmm3,%xmm7
  422faa:	66 44 0f 3a 0f d5 08 	palignr $0x8,%xmm5,%xmm10
  422fb1:	31 ea                	xor    %ebp,%edx
  422fb3:	03 44 24 30          	add    0x30(%rsp),%eax
  422fb7:	21 ef                	and    %ebp,%edi
  422fb9:	66 0f ef f8          	pxor   %xmm0,%xmm7
  422fbd:	21 d6                	and    %edx,%esi
  422fbf:	c1 c9 07             	ror    $0x7,%ecx
  422fc2:	66 45 0f 6f 4b 30    	movdqa 0x30(%r11),%xmm9
  422fc8:	66 44 0f fe c6       	paddd  %xmm6,%xmm8
  422fcd:	01 f8                	add    %edi,%eax
  422fcf:	89 df                	mov    %ebx,%edi
  422fd1:	66 41 0f ef fa       	pxor   %xmm10,%xmm7
  422fd6:	c1 c3 05             	rol    $0x5,%ebx
  422fd9:	01 f0                	add    %esi,%eax
  422fdb:	31 ea                	xor    %ebp,%edx
  422fdd:	01 d8                	add    %ebx,%eax
  422fdf:	66 44 0f 6f d7       	movdqa %xmm7,%xmm10
  422fe4:	66 44 0f 7f 44 24 20 	movdqa %xmm8,0x20(%rsp)
  422feb:	89 ce                	mov    %ecx,%esi
  422fed:	31 d1                	xor    %edx,%ecx
  422fef:	03 6c 24 34          	add    0x34(%rsp),%ebp
  422ff3:	21 d6                	and    %edx,%esi
  422ff5:	66 0f 72 f7 02       	pslld  $0x2,%xmm7
  422ffa:	21 cf                	and    %ecx,%edi
  422ffc:	c1 cb 07             	ror    $0x7,%ebx
  422fff:	66 41 0f 72 d2 1e    	psrld  $0x1e,%xmm10
  423005:	01 f5                	add    %esi,%ebp
  423007:	89 c6                	mov    %eax,%esi
  423009:	c1 c0 05             	rol    $0x5,%eax
  42300c:	01 fd                	add    %edi,%ebp
  42300e:	31 d1                	xor    %edx,%ecx
  423010:	01 c5                	add    %eax,%ebp
  423012:	66 41 0f eb fa       	por    %xmm10,%xmm7
  423017:	89 df                	mov    %ebx,%edi
  423019:	31 cb                	xor    %ecx,%ebx
  42301b:	66 44 0f 6f c7       	movdqa %xmm7,%xmm8
  423020:	03 54 24 38          	add    0x38(%rsp),%edx
  423024:	21 cf                	and    %ecx,%edi
  423026:	21 de                	and    %ebx,%esi
  423028:	c1 c8 07             	ror    $0x7,%eax
  42302b:	01 fa                	add    %edi,%edx
  42302d:	89 ef                	mov    %ebp,%edi
  42302f:	c1 c5 05             	rol    $0x5,%ebp
  423032:	01 f2                	add    %esi,%edx
  423034:	31 cb                	xor    %ecx,%ebx
  423036:	01 ea                	add    %ebp,%edx
  423038:	89 c6                	mov    %eax,%esi
  42303a:	31 d8                	xor    %ebx,%eax
  42303c:	03 4c 24 3c          	add    0x3c(%rsp),%ecx
  423040:	21 de                	and    %ebx,%esi
  423042:	21 c7                	and    %eax,%edi
  423044:	c1 cd 07             	ror    $0x7,%ebp
  423047:	01 f1                	add    %esi,%ecx
  423049:	89 d6                	mov    %edx,%esi
  42304b:	c1 c2 05             	rol    $0x5,%edx
  42304e:	01 f9                	add    %edi,%ecx
  423050:	31 d8                	xor    %ebx,%eax
  423052:	01 d1                	add    %edx,%ecx
  423054:	89 ef                	mov    %ebp,%edi
  423056:	66 0f ef c4          	pxor   %xmm4,%xmm0
  42305a:	66 44 0f 3a 0f c6 08 	palignr $0x8,%xmm6,%xmm8
  423061:	31 c5                	xor    %eax,%ebp
  423063:	03 1c 24             	add    (%rsp),%ebx
  423066:	21 c7                	and    %eax,%edi
  423068:	66 0f ef c1          	pxor   %xmm1,%xmm0
  42306c:	21 ee                	and    %ebp,%esi
  42306e:	c1 ca 07             	ror    $0x7,%edx
  423071:	66 45 0f 6f d1       	movdqa %xmm9,%xmm10
  423076:	66 44 0f fe cf       	paddd  %xmm7,%xmm9
  42307b:	01 fb                	add    %edi,%ebx
  42307d:	89 cf                	mov    %ecx,%edi
  42307f:	66 41 0f ef c0       	pxor   %xmm8,%xmm0
  423084:	c1 c1 05             	rol    $0x5,%ecx
  423087:	01 f3                	add    %esi,%ebx
  423089:	31 c5                	xor    %eax,%ebp
  42308b:	01 cb                	add    %ecx,%ebx
  42308d:	66 44 0f 6f c0       	movdqa %xmm0,%xmm8
  423092:	66 44 0f 7f 4c 24 30 	movdqa %xmm9,0x30(%rsp)
  423099:	89 d6                	mov    %edx,%esi
  42309b:	31 ea                	xor    %ebp,%edx
  42309d:	03 44 24 04          	add    0x4(%rsp),%eax
  4230a1:	21 ee                	and    %ebp,%esi
  4230a3:	66 0f 72 f0 02       	pslld  $0x2,%xmm0
  4230a8:	21 d7                	and    %edx,%edi
  4230aa:	c1 c9 07             	ror    $0x7,%ecx
  4230ad:	66 41 0f 72 d0 1e    	psrld  $0x1e,%xmm8
  4230b3:	01 f0                	add    %esi,%eax
  4230b5:	89 de                	mov    %ebx,%esi
  4230b7:	c1 c3 05             	rol    $0x5,%ebx
  4230ba:	01 f8                	add    %edi,%eax
  4230bc:	31 ea                	xor    %ebp,%edx
  4230be:	01 d8                	add    %ebx,%eax
  4230c0:	66 41 0f eb c0       	por    %xmm8,%xmm0
  4230c5:	89 cf                	mov    %ecx,%edi
  4230c7:	31 d1                	xor    %edx,%ecx
  4230c9:	66 44 0f 6f c8       	movdqa %xmm0,%xmm9
  4230ce:	03 6c 24 08          	add    0x8(%rsp),%ebp
  4230d2:	21 d7                	and    %edx,%edi
  4230d4:	21 ce                	and    %ecx,%esi
  4230d6:	c1 cb 07             	ror    $0x7,%ebx
  4230d9:	01 fd                	add    %edi,%ebp
  4230db:	89 c7                	mov    %eax,%edi
  4230dd:	c1 c0 05             	rol    $0x5,%eax
  4230e0:	01 f5                	add    %esi,%ebp
  4230e2:	31 d1                	xor    %edx,%ecx
  4230e4:	01 c5                	add    %eax,%ebp
  4230e6:	89 de                	mov    %ebx,%esi
  4230e8:	31 cb                	xor    %ecx,%ebx
  4230ea:	03 54 24 0c          	add    0xc(%rsp),%edx
  4230ee:	21 ce                	and    %ecx,%esi
  4230f0:	21 df                	and    %ebx,%edi
  4230f2:	c1 c8 07             	ror    $0x7,%eax
  4230f5:	01 f2                	add    %esi,%edx
  4230f7:	89 ee                	mov    %ebp,%esi
  4230f9:	c1 c5 05             	rol    $0x5,%ebp
  4230fc:	01 fa                	add    %edi,%edx
  4230fe:	31 cb                	xor    %ecx,%ebx
  423100:	01 ea                	add    %ebp,%edx
  423102:	89 c7                	mov    %eax,%edi
  423104:	66 0f ef cd          	pxor   %xmm5,%xmm1
  423108:	66 44 0f 3a 0f cf 08 	palignr $0x8,%xmm7,%xmm9
  42310f:	31 d8                	xor    %ebx,%eax
  423111:	03 4c 24 10          	add    0x10(%rsp),%ecx
  423115:	21 df                	and    %ebx,%edi
  423117:	66 0f ef ca          	pxor   %xmm2,%xmm1
  42311b:	21 c6                	and    %eax,%esi
  42311d:	c1 cd 07             	ror    $0x7,%ebp
  423120:	66 45 0f 6f c2       	movdqa %xmm10,%xmm8
  423125:	66 44 0f fe d0       	paddd  %xmm0,%xmm10
  42312a:	01 f9                	add    %edi,%ecx
  42312c:	89 d7                	mov    %edx,%edi
  42312e:	66 41 0f ef c9       	pxor   %xmm9,%xmm1
  423133:	c1 c2 05             	rol    $0x5,%edx
  423136:	01 f1                	add    %esi,%ecx
  423138:	31 d8                	xor    %ebx,%eax
  42313a:	01 d1                	add    %edx,%ecx
  42313c:	66 44 0f 6f c9       	movdqa %xmm1,%xmm9
  423141:	66 44 0f 7f 14 24    	movdqa %xmm10,(%rsp)
  423147:	89 ee                	mov    %ebp,%esi
  423149:	31 c5                	xor    %eax,%ebp
  42314b:	03 5c 24 14          	add    0x14(%rsp),%ebx
  42314f:	21 c6                	and    %eax,%esi
  423151:	66 0f 72 f1 02       	pslld  $0x2,%xmm1
  423156:	21 ef                	and    %ebp,%edi
  423158:	c1 ca 07             	ror    $0x7,%edx
  42315b:	66 41 0f 72 d1 1e    	psrld  $0x1e,%xmm9
  423161:	01 f3                	add    %esi,%ebx
  423163:	89 ce                	mov    %ecx,%esi
  423165:	c1 c1 05             	rol    $0x5,%ecx
  423168:	01 fb                	add    %edi,%ebx
  42316a:	31 c5                	xor    %eax,%ebp
  42316c:	01 cb                	add    %ecx,%ebx
  42316e:	66 41 0f eb c9       	por    %xmm9,%xmm1
  423173:	89 d7                	mov    %edx,%edi
  423175:	31 ea                	xor    %ebp,%edx
  423177:	66 44 0f 6f d1       	movdqa %xmm1,%xmm10
  42317c:	03 44 24 18          	add    0x18(%rsp),%eax
  423180:	21 ef                	and    %ebp,%edi
  423182:	21 d6                	and    %edx,%esi
  423184:	c1 c9 07             	ror    $0x7,%ecx
  423187:	01 f8                	add    %edi,%eax
  423189:	89 df                	mov    %ebx,%edi
  42318b:	c1 c3 05             	rol    $0x5,%ebx
  42318e:	01 f0                	add    %esi,%eax
  423190:	31 ea                	xor    %ebp,%edx
  423192:	01 d8                	add    %ebx,%eax
  423194:	89 ce                	mov    %ecx,%esi
  423196:	31 d1                	xor    %edx,%ecx
  423198:	03 6c 24 1c          	add    0x1c(%rsp),%ebp
  42319c:	21 d6                	and    %edx,%esi
  42319e:	21 cf                	and    %ecx,%edi
  4231a0:	c1 cb 07             	ror    $0x7,%ebx
  4231a3:	01 f5                	add    %esi,%ebp
  4231a5:	89 c6                	mov    %eax,%esi
  4231a7:	c1 c0 05             	rol    $0x5,%eax
  4231aa:	01 fd                	add    %edi,%ebp
  4231ac:	31 d1                	xor    %edx,%ecx
  4231ae:	01 c5                	add    %eax,%ebp
  4231b0:	89 df                	mov    %ebx,%edi
  4231b2:	66 0f ef d6          	pxor   %xmm6,%xmm2
  4231b6:	66 44 0f 3a 0f d0 08 	palignr $0x8,%xmm0,%xmm10
  4231bd:	31 cb                	xor    %ecx,%ebx
  4231bf:	03 54 24 20          	add    0x20(%rsp),%edx
  4231c3:	21 cf                	and    %ecx,%edi
  4231c5:	66 0f ef d3          	pxor   %xmm3,%xmm2
  4231c9:	21 de                	and    %ebx,%esi
  4231cb:	c1 c8 07             	ror    $0x7,%eax
  4231ce:	66 45 0f 6f c8       	movdqa %xmm8,%xmm9
  4231d3:	66 44 0f fe c1       	paddd  %xmm1,%xmm8
  4231d8:	01 fa                	add    %edi,%edx
  4231da:	89 ef                	mov    %ebp,%edi
  4231dc:	66 41 0f ef d2       	pxor   %xmm10,%xmm2
  4231e1:	c1 c5 05             	rol    $0x5,%ebp
  4231e4:	01 f2                	add    %esi,%edx
  4231e6:	31 cb                	xor    %ecx,%ebx
  4231e8:	01 ea                	add    %ebp,%edx
  4231ea:	66 44 0f 6f d2       	movdqa %xmm2,%xmm10
  4231ef:	66 44 0f 7f 44 24 10 	movdqa %xmm8,0x10(%rsp)
  4231f6:	89 c6                	mov    %eax,%esi
  4231f8:	31 d8                	xor    %ebx,%eax
  4231fa:	03 4c 24 24          	add    0x24(%rsp),%ecx
  4231fe:	21 de                	and    %ebx,%esi
  423200:	66 0f 72 f2 02       	pslld  $0x2,%xmm2
  423205:	21 c7                	and    %eax,%edi
  423207:	c1 cd 07             	ror    $0x7,%ebp
  42320a:	66 41 0f 72 d2 1e    	psrld  $0x1e,%xmm10
  423210:	01 f1                	add    %esi,%ecx
  423212:	89 d6                	mov    %edx,%esi
  423214:	c1 c2 05             	rol    $0x5,%edx
  423217:	01 f9                	add    %edi,%ecx
  423219:	31 d8                	xor    %ebx,%eax
  42321b:	01 d1                	add    %edx,%ecx
  42321d:	66 41 0f eb d2       	por    %xmm10,%xmm2
  423222:	89 ef                	mov    %ebp,%edi
  423224:	31 c5                	xor    %eax,%ebp
  423226:	66 44 0f 6f c2       	movdqa %xmm2,%xmm8
  42322b:	03 5c 24 28          	add    0x28(%rsp),%ebx
  42322f:	21 c7                	and    %eax,%edi
  423231:	21 ee                	and    %ebp,%esi
  423233:	c1 ca 07             	ror    $0x7,%edx
  423236:	01 fb                	add    %edi,%ebx
  423238:	89 cf                	mov    %ecx,%edi
  42323a:	c1 c1 05             	rol    $0x5,%ecx
  42323d:	01 f3                	add    %esi,%ebx
  42323f:	31 c5                	xor    %eax,%ebp
  423241:	01 cb                	add    %ecx,%ebx
  423243:	89 d6                	mov    %edx,%esi
  423245:	31 ea                	xor    %ebp,%edx
  423247:	03 44 24 2c          	add    0x2c(%rsp),%eax
  42324b:	21 ee                	and    %ebp,%esi
  42324d:	21 d7                	and    %edx,%edi
  42324f:	c1 c9 07             	ror    $0x7,%ecx
  423252:	01 f0                	add    %esi,%eax
  423254:	89 de                	mov    %ebx,%esi
  423256:	c1 c3 05             	rol    $0x5,%ebx
  423259:	01 f8                	add    %edi,%eax
  42325b:	31 ea                	xor    %ebp,%edx
  42325d:	01 d8                	add    %ebx,%eax
  42325f:	03 6c 24 30          	add    0x30(%rsp),%ebp
  423263:	66 0f ef df          	pxor   %xmm7,%xmm3
  423267:	66 44 0f 3a 0f c1 08 	palignr $0x8,%xmm1,%xmm8
  42326e:	31 d6                	xor    %edx,%esi
  423270:	89 c7                	mov    %eax,%edi
  423272:	c1 c0 05             	rol    $0x5,%eax
  423275:	66 0f ef dc          	pxor   %xmm4,%xmm3
  423279:	31 ce                	xor    %ecx,%esi
  42327b:	01 c5                	add    %eax,%ebp
  42327d:	66 45 0f 6f d1       	movdqa %xmm9,%xmm10
  423282:	66 44 0f fe ca       	paddd  %xmm2,%xmm9
  423287:	c1 cb 07             	ror    $0x7,%ebx
  42328a:	01 f5                	add    %esi,%ebp
  42328c:	66 41 0f ef d8       	pxor   %xmm8,%xmm3
  423291:	03 54 24 34          	add    0x34(%rsp),%edx
  423295:	31 cf                	xor    %ecx,%edi
  423297:	89 ee                	mov    %ebp,%esi
  423299:	c1 c5 05             	rol    $0x5,%ebp
  42329c:	66 44 0f 6f c3       	movdqa %xmm3,%xmm8
  4232a1:	66 44 0f 7f 4c 24 20 	movdqa %xmm9,0x20(%rsp)
  4232a8:	31 df                	xor    %ebx,%edi
  4232aa:	01 ea                	add    %ebp,%edx
  4232ac:	c1 c8 07             	ror    $0x7,%eax
  4232af:	01 fa                	add    %edi,%edx
  4232b1:	66 0f 72 f3 02       	pslld  $0x2,%xmm3
  4232b6:	03 4c 24 38          	add    0x38(%rsp),%ecx
  4232ba:	31 de                	xor    %ebx,%esi
  4232bc:	66 41 0f 72 d0 1e    	psrld  $0x1e,%xmm8
  4232c2:	89 d7                	mov    %edx,%edi
  4232c4:	c1 c2 05             	rol    $0x5,%edx
  4232c7:	31 c6                	xor    %eax,%esi
  4232c9:	01 d1                	add    %edx,%ecx
  4232cb:	c1 cd 07             	ror    $0x7,%ebp
  4232ce:	01 f1                	add    %esi,%ecx
  4232d0:	66 41 0f eb d8       	por    %xmm8,%xmm3
  4232d5:	03 5c 24 3c          	add    0x3c(%rsp),%ebx
  4232d9:	31 c7                	xor    %eax,%edi
  4232db:	89 ce                	mov    %ecx,%esi
  4232dd:	c1 c1 05             	rol    $0x5,%ecx
  4232e0:	31 ef                	xor    %ebp,%edi
  4232e2:	01 cb                	add    %ecx,%ebx
  4232e4:	c1 ca 07             	ror    $0x7,%edx
  4232e7:	01 fb                	add    %edi,%ebx
  4232e9:	03 04 24             	add    (%rsp),%eax
  4232ec:	66 44 0f fe d3       	paddd  %xmm3,%xmm10
  4232f1:	31 ee                	xor    %ebp,%esi
  4232f3:	89 df                	mov    %ebx,%edi
  4232f5:	c1 c3 05             	rol    $0x5,%ebx
  4232f8:	31 d6                	xor    %edx,%esi
  4232fa:	66 44 0f 7f 54 24 30 	movdqa %xmm10,0x30(%rsp)
  423301:	01 d8                	add    %ebx,%eax
  423303:	c1 c9 07             	ror    $0x7,%ecx
  423306:	01 f0                	add    %esi,%eax
  423308:	03 6c 24 04          	add    0x4(%rsp),%ebp
  42330c:	31 d7                	xor    %edx,%edi
  42330e:	89 c6                	mov    %eax,%esi
  423310:	c1 c0 05             	rol    $0x5,%eax
  423313:	31 cf                	xor    %ecx,%edi
  423315:	01 c5                	add    %eax,%ebp
  423317:	c1 cb 07             	ror    $0x7,%ebx
  42331a:	01 fd                	add    %edi,%ebp
  42331c:	03 54 24 08          	add    0x8(%rsp),%edx
  423320:	31 ce                	xor    %ecx,%esi
  423322:	89 ef                	mov    %ebp,%edi
  423324:	c1 c5 05             	rol    $0x5,%ebp
  423327:	31 de                	xor    %ebx,%esi
  423329:	01 ea                	add    %ebp,%edx
  42332b:	c1 c8 07             	ror    $0x7,%eax
  42332e:	01 f2                	add    %esi,%edx
  423330:	03 4c 24 0c          	add    0xc(%rsp),%ecx
  423334:	31 df                	xor    %ebx,%edi
  423336:	89 d6                	mov    %edx,%esi
  423338:	c1 c2 05             	rol    $0x5,%edx
  42333b:	31 c7                	xor    %eax,%edi
  42333d:	01 d1                	add    %edx,%ecx
  42333f:	c1 cd 07             	ror    $0x7,%ebp
  423342:	01 f9                	add    %edi,%ecx
  423344:	4d 39 d1             	cmp    %r10,%r9
  423347:	0f 84 93 01 00 00    	je     4234e0 <sha1_block_data_order_ssse3+0xd30>
  42334d:	66 41 0f 6f 73 40    	movdqa 0x40(%r11),%xmm6
  423353:	66 45 0f 6f 0b       	movdqa (%r11),%xmm9
  423358:	f3 41 0f 6f 01       	movdqu (%r9),%xmm0
  42335d:	f3 41 0f 6f 49 10    	movdqu 0x10(%r9),%xmm1
  423363:	f3 41 0f 6f 51 20    	movdqu 0x20(%r9),%xmm2
  423369:	f3 41 0f 6f 59 30    	movdqu 0x30(%r9),%xmm3
  42336f:	66 0f 38 00 c6       	pshufb %xmm6,%xmm0
  423374:	49 83 c1 40          	add    $0x40,%r9
  423378:	03 5c 24 10          	add    0x10(%rsp),%ebx
  42337c:	31 c6                	xor    %eax,%esi
  42337e:	66 0f 38 00 ce       	pshufb %xmm6,%xmm1
  423383:	89 cf                	mov    %ecx,%edi
  423385:	c1 c1 05             	rol    $0x5,%ecx
  423388:	66 41 0f fe c1       	paddd  %xmm9,%xmm0
  42338d:	31 ee                	xor    %ebp,%esi
  42338f:	01 cb                	add    %ecx,%ebx
  423391:	c1 ca 07             	ror    $0x7,%edx
  423394:	01 f3                	add    %esi,%ebx
  423396:	66 0f 7f 04 24       	movdqa %xmm0,(%rsp)
  42339b:	03 44 24 14          	add    0x14(%rsp),%eax
  42339f:	31 ef                	xor    %ebp,%edi
  4233a1:	66 41 0f fa c1       	psubd  %xmm9,%xmm0
  4233a6:	89 de                	mov    %ebx,%esi
  4233a8:	c1 c3 05             	rol    $0x5,%ebx
  4233ab:	31 d7                	xor    %edx,%edi
  4233ad:	01 d8                	add    %ebx,%eax
  4233af:	c1 c9 07             	ror    $0x7,%ecx
  4233b2:	01 f8                	add    %edi,%eax
  4233b4:	03 6c 24 18          	add    0x18(%rsp),%ebp
  4233b8:	31 d6                	xor    %edx,%esi
  4233ba:	89 c7                	mov    %eax,%edi
  4233bc:	c1 c0 05             	rol    $0x5,%eax
  4233bf:	31 ce                	xor    %ecx,%esi
  4233c1:	01 c5                	add    %eax,%ebp
  4233c3:	c1 cb 07             	ror    $0x7,%ebx
  4233c6:	01 f5                	add    %esi,%ebp
  4233c8:	03 54 24 1c          	add    0x1c(%rsp),%edx
  4233cc:	31 cf                	xor    %ecx,%edi
  4233ce:	89 ee                	mov    %ebp,%esi
  4233d0:	c1 c5 05             	rol    $0x5,%ebp
  4233d3:	31 df                	xor    %ebx,%edi
  4233d5:	01 ea                	add    %ebp,%edx
  4233d7:	c1 c8 07             	ror    $0x7,%eax
  4233da:	01 fa                	add    %edi,%edx
  4233dc:	03 4c 24 20          	add    0x20(%rsp),%ecx
  4233e0:	31 de                	xor    %ebx,%esi
  4233e2:	66 0f 38 00 d6       	pshufb %xmm6,%xmm2
  4233e7:	89 d7                	mov    %edx,%edi
  4233e9:	c1 c2 05             	rol    $0x5,%edx
  4233ec:	66 41 0f fe c9       	paddd  %xmm9,%xmm1
  4233f1:	31 c6                	xor    %eax,%esi
  4233f3:	01 d1                	add    %edx,%ecx
  4233f5:	c1 cd 07             	ror    $0x7,%ebp
  4233f8:	01 f1                	add    %esi,%ecx
  4233fa:	66 0f 7f 4c 24 10    	movdqa %xmm1,0x10(%rsp)
  423400:	03 5c 24 24          	add    0x24(%rsp),%ebx
  423404:	31 c7                	xor    %eax,%edi
  423406:	66 41 0f fa c9       	psubd  %xmm9,%xmm1
  42340b:	89 ce                	mov    %ecx,%esi
  42340d:	c1 c1 05             	rol    $0x5,%ecx
  423410:	31 ef                	xor    %ebp,%edi
  423412:	01 cb                	add    %ecx,%ebx
  423414:	c1 ca 07             	ror    $0x7,%edx
  423417:	01 fb                	add    %edi,%ebx
  423419:	03 44 24 28          	add    0x28(%rsp),%eax
  42341d:	31 ee                	xor    %ebp,%esi
  42341f:	89 df                	mov    %ebx,%edi
  423421:	c1 c3 05             	rol    $0x5,%ebx
  423424:	31 d6                	xor    %edx,%esi
  423426:	01 d8                	add    %ebx,%eax
  423428:	c1 c9 07             	ror    $0x7,%ecx
  42342b:	01 f0                	add    %esi,%eax
  42342d:	03 6c 24 2c          	add    0x2c(%rsp),%ebp
  423431:	31 d7                	xor    %edx,%edi
  423433:	89 c6                	mov    %eax,%esi
  423435:	c1 c0 05             	rol    $0x5,%eax
  423438:	31 cf                	xor    %ecx,%edi
  42343a:	01 c5                	add    %eax,%ebp
  42343c:	c1 cb 07             	ror    $0x7,%ebx
  42343f:	01 fd                	add    %edi,%ebp
  423441:	03 54 24 30          	add    0x30(%rsp),%edx
  423445:	31 ce                	xor    %ecx,%esi
  423447:	66 0f 38 00 de       	pshufb %xmm6,%xmm3
  42344c:	89 ef                	mov    %ebp,%edi
  42344e:	c1 c5 05             	rol    $0x5,%ebp
  423451:	66 41 0f fe d1       	paddd  %xmm9,%xmm2
  423456:	31 de                	xor    %ebx,%esi
  423458:	01 ea                	add    %ebp,%edx
  42345a:	c1 c8 07             	ror    $0x7,%eax
  42345d:	01 f2                	add    %esi,%edx
  42345f:	66 0f 7f 54 24 20    	movdqa %xmm2,0x20(%rsp)
  423465:	03 4c 24 34          	add    0x34(%rsp),%ecx
  423469:	31 df                	xor    %ebx,%edi
  42346b:	66 41 0f fa d1       	psubd  %xmm9,%xmm2
  423470:	89 d6                	mov    %edx,%esi
  423472:	c1 c2 05             	rol    $0x5,%edx
  423475:	31 c7                	xor    %eax,%edi
  423477:	01 d1                	add    %edx,%ecx
  423479:	c1 cd 07             	ror    $0x7,%ebp
  42347c:	01 f9                	add    %edi,%ecx
  42347e:	03 5c 24 38          	add    0x38(%rsp),%ebx
  423482:	31 c6                	xor    %eax,%esi
  423484:	89 cf                	mov    %ecx,%edi
  423486:	c1 c1 05             	rol    $0x5,%ecx
  423489:	31 ee                	xor    %ebp,%esi
  42348b:	01 cb                	add    %ecx,%ebx
  42348d:	c1 ca 07             	ror    $0x7,%edx
  423490:	01 f3                	add    %esi,%ebx
  423492:	03 44 24 3c          	add    0x3c(%rsp),%eax
  423496:	31 ef                	xor    %ebp,%edi
  423498:	89 de                	mov    %ebx,%esi
  42349a:	c1 c3 05             	rol    $0x5,%ebx
  42349d:	31 d7                	xor    %edx,%edi
  42349f:	01 d8                	add    %ebx,%eax
  4234a1:	c1 c9 07             	ror    $0x7,%ecx
  4234a4:	01 f8                	add    %edi,%eax
  4234a6:	41 03 00             	add    (%r8),%eax
  4234a9:	41 03 70 04          	add    0x4(%r8),%esi
  4234ad:	41 03 48 08          	add    0x8(%r8),%ecx
  4234b1:	41 03 50 0c          	add    0xc(%r8),%edx
  4234b5:	41 89 00             	mov    %eax,(%r8)
  4234b8:	41 03 68 10          	add    0x10(%r8),%ebp
  4234bc:	41 89 70 04          	mov    %esi,0x4(%r8)
  4234c0:	89 f3                	mov    %esi,%ebx
  4234c2:	41 89 48 08          	mov    %ecx,0x8(%r8)
  4234c6:	41 89 50 0c          	mov    %edx,0xc(%r8)
  4234ca:	41 89 68 10          	mov    %ebp,0x10(%r8)
  4234ce:	e9 7d f3 ff ff       	jmpq   422850 <sha1_block_data_order_ssse3+0xa0>
  4234d3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  4234da:	84 00 00 00 00 00 
  4234e0:	03 5c 24 10          	add    0x10(%rsp),%ebx
  4234e4:	31 c6                	xor    %eax,%esi
  4234e6:	89 cf                	mov    %ecx,%edi
  4234e8:	c1 c1 05             	rol    $0x5,%ecx
  4234eb:	31 ee                	xor    %ebp,%esi
  4234ed:	01 cb                	add    %ecx,%ebx
  4234ef:	c1 ca 07             	ror    $0x7,%edx
  4234f2:	01 f3                	add    %esi,%ebx
  4234f4:	03 44 24 14          	add    0x14(%rsp),%eax
  4234f8:	31 ef                	xor    %ebp,%edi
  4234fa:	89 de                	mov    %ebx,%esi
  4234fc:	c1 c3 05             	rol    $0x5,%ebx
  4234ff:	31 d7                	xor    %edx,%edi
  423501:	01 d8                	add    %ebx,%eax
  423503:	c1 c9 07             	ror    $0x7,%ecx
  423506:	01 f8                	add    %edi,%eax
  423508:	03 6c 24 18          	add    0x18(%rsp),%ebp
  42350c:	31 d6                	xor    %edx,%esi
  42350e:	89 c7                	mov    %eax,%edi
  423510:	c1 c0 05             	rol    $0x5,%eax
  423513:	31 ce                	xor    %ecx,%esi
  423515:	01 c5                	add    %eax,%ebp
  423517:	c1 cb 07             	ror    $0x7,%ebx
  42351a:	01 f5                	add    %esi,%ebp
  42351c:	03 54 24 1c          	add    0x1c(%rsp),%edx
  423520:	31 cf                	xor    %ecx,%edi
  423522:	89 ee                	mov    %ebp,%esi
  423524:	c1 c5 05             	rol    $0x5,%ebp
  423527:	31 df                	xor    %ebx,%edi
  423529:	01 ea                	add    %ebp,%edx
  42352b:	c1 c8 07             	ror    $0x7,%eax
  42352e:	01 fa                	add    %edi,%edx
  423530:	03 4c 24 20          	add    0x20(%rsp),%ecx
  423534:	31 de                	xor    %ebx,%esi
  423536:	89 d7                	mov    %edx,%edi
  423538:	c1 c2 05             	rol    $0x5,%edx
  42353b:	31 c6                	xor    %eax,%esi
  42353d:	01 d1                	add    %edx,%ecx
  42353f:	c1 cd 07             	ror    $0x7,%ebp
  423542:	01 f1                	add    %esi,%ecx
  423544:	03 5c 24 24          	add    0x24(%rsp),%ebx
  423548:	31 c7                	xor    %eax,%edi
  42354a:	89 ce                	mov    %ecx,%esi
  42354c:	c1 c1 05             	rol    $0x5,%ecx
  42354f:	31 ef                	xor    %ebp,%edi
  423551:	01 cb                	add    %ecx,%ebx
  423553:	c1 ca 07             	ror    $0x7,%edx
  423556:	01 fb                	add    %edi,%ebx
  423558:	03 44 24 28          	add    0x28(%rsp),%eax
  42355c:	31 ee                	xor    %ebp,%esi
  42355e:	89 df                	mov    %ebx,%edi
  423560:	c1 c3 05             	rol    $0x5,%ebx
  423563:	31 d6                	xor    %edx,%esi
  423565:	01 d8                	add    %ebx,%eax
  423567:	c1 c9 07             	ror    $0x7,%ecx
  42356a:	01 f0                	add    %esi,%eax
  42356c:	03 6c 24 2c          	add    0x2c(%rsp),%ebp
  423570:	31 d7                	xor    %edx,%edi
  423572:	89 c6                	mov    %eax,%esi
  423574:	c1 c0 05             	rol    $0x5,%eax
  423577:	31 cf                	xor    %ecx,%edi
  423579:	01 c5                	add    %eax,%ebp
  42357b:	c1 cb 07             	ror    $0x7,%ebx
  42357e:	01 fd                	add    %edi,%ebp
  423580:	03 54 24 30          	add    0x30(%rsp),%edx
  423584:	31 ce                	xor    %ecx,%esi
  423586:	89 ef                	mov    %ebp,%edi
  423588:	c1 c5 05             	rol    $0x5,%ebp
  42358b:	31 de                	xor    %ebx,%esi
  42358d:	01 ea                	add    %ebp,%edx
  42358f:	c1 c8 07             	ror    $0x7,%eax
  423592:	01 f2                	add    %esi,%edx
  423594:	03 4c 24 34          	add    0x34(%rsp),%ecx
  423598:	31 df                	xor    %ebx,%edi
  42359a:	89 d6                	mov    %edx,%esi
  42359c:	c1 c2 05             	rol    $0x5,%edx
  42359f:	31 c7                	xor    %eax,%edi
  4235a1:	01 d1                	add    %edx,%ecx
  4235a3:	c1 cd 07             	ror    $0x7,%ebp
  4235a6:	01 f9                	add    %edi,%ecx
  4235a8:	03 5c 24 38          	add    0x38(%rsp),%ebx
  4235ac:	31 c6                	xor    %eax,%esi
  4235ae:	89 cf                	mov    %ecx,%edi
  4235b0:	c1 c1 05             	rol    $0x5,%ecx
  4235b3:	31 ee                	xor    %ebp,%esi
  4235b5:	01 cb                	add    %ecx,%ebx
  4235b7:	c1 ca 07             	ror    $0x7,%edx
  4235ba:	01 f3                	add    %esi,%ebx
  4235bc:	03 44 24 3c          	add    0x3c(%rsp),%eax
  4235c0:	31 ef                	xor    %ebp,%edi
  4235c2:	89 de                	mov    %ebx,%esi
  4235c4:	c1 c3 05             	rol    $0x5,%ebx
  4235c7:	31 d7                	xor    %edx,%edi
  4235c9:	01 d8                	add    %ebx,%eax
  4235cb:	c1 c9 07             	ror    $0x7,%ecx
  4235ce:	01 f8                	add    %edi,%eax
  4235d0:	41 03 00             	add    (%r8),%eax
  4235d3:	41 03 70 04          	add    0x4(%r8),%esi
  4235d7:	41 03 48 08          	add    0x8(%r8),%ecx
  4235db:	41 89 00             	mov    %eax,(%r8)
  4235de:	41 03 50 0c          	add    0xc(%r8),%edx
  4235e2:	41 89 70 04          	mov    %esi,0x4(%r8)
  4235e6:	41 03 68 10          	add    0x10(%r8),%ebp
  4235ea:	41 89 48 08          	mov    %ecx,0x8(%r8)
  4235ee:	41 89 50 0c          	mov    %edx,0xc(%r8)
  4235f2:	41 89 68 10          	mov    %ebp,0x10(%r8)
  4235f6:	48 8d 74 24 40       	lea    0x40(%rsp),%rsi
  4235fb:	4c 8b 26             	mov    (%rsi),%r12
  4235fe:	48 8b 6e 08          	mov    0x8(%rsi),%rbp
  423602:	48 8b 5e 10          	mov    0x10(%rsi),%rbx
  423606:	48 8d 66 18          	lea    0x18(%rsi),%rsp
  42360a:	f3 c3                	repz retq 
  42360c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000423610 <sha1_block_data_order_avx>:
  423610:	53                   	push   %rbx
  423611:	55                   	push   %rbp
  423612:	41 54                	push   %r12
  423614:	48 8d 64 24 c0       	lea    -0x40(%rsp),%rsp
  423619:	49 89 f8             	mov    %rdi,%r8
  42361c:	49 89 f1             	mov    %rsi,%r9
  42361f:	49 89 d2             	mov    %rdx,%r10
  423622:	c5 fc 77             	vzeroall 
  423625:	49 c1 e2 06          	shl    $0x6,%r10
  423629:	4d 01 ca             	add    %r9,%r10
  42362c:	4c 8d 1d 0d 0e 00 00 	lea    0xe0d(%rip),%r11        # 424440 <K_XX_XX>
  423633:	41 8b 00             	mov    (%r8),%eax
  423636:	41 8b 58 04          	mov    0x4(%r8),%ebx
  42363a:	41 8b 48 08          	mov    0x8(%r8),%ecx
  42363e:	41 8b 50 0c          	mov    0xc(%r8),%edx
  423642:	89 de                	mov    %ebx,%esi
  423644:	41 8b 68 10          	mov    0x10(%r8),%ebp
  423648:	c4 c1 79 6f 73 40    	vmovdqa 0x40(%r11),%xmm6
  42364e:	c4 41 79 6f 0b       	vmovdqa (%r11),%xmm9
  423653:	c4 c1 7a 6f 01       	vmovdqu (%r9),%xmm0
  423658:	c4 c1 7a 6f 49 10    	vmovdqu 0x10(%r9),%xmm1
  42365e:	c4 c1 7a 6f 51 20    	vmovdqu 0x20(%r9),%xmm2
  423664:	c4 c1 7a 6f 59 30    	vmovdqu 0x30(%r9),%xmm3
  42366a:	c4 e2 79 00 c6       	vpshufb %xmm6,%xmm0,%xmm0
  42366f:	49 83 c1 40          	add    $0x40,%r9
  423673:	c4 e2 71 00 ce       	vpshufb %xmm6,%xmm1,%xmm1
  423678:	c4 e2 69 00 d6       	vpshufb %xmm6,%xmm2,%xmm2
  42367d:	c4 e2 61 00 de       	vpshufb %xmm6,%xmm3,%xmm3
  423682:	c4 c1 79 fe e1       	vpaddd %xmm9,%xmm0,%xmm4
  423687:	c4 c1 71 fe e9       	vpaddd %xmm9,%xmm1,%xmm5
  42368c:	c4 c1 69 fe f1       	vpaddd %xmm9,%xmm2,%xmm6
  423691:	c5 f9 7f 24 24       	vmovdqa %xmm4,(%rsp)
  423696:	c5 f9 7f 6c 24 10    	vmovdqa %xmm5,0x10(%rsp)
  42369c:	c5 f9 7f 74 24 20    	vmovdqa %xmm6,0x20(%rsp)
  4236a2:	eb 0c                	jmp    4236b0 <sha1_block_data_order_avx+0xa0>
  4236a4:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
  4236ab:	00 00 00 00 00 
  4236b0:	03 2c 24             	add    (%rsp),%ebp
  4236b3:	31 d1                	xor    %edx,%ecx
  4236b5:	c4 e3 71 0f e0 08    	vpalignr $0x8,%xmm0,%xmm1,%xmm4
  4236bb:	89 c7                	mov    %eax,%edi
  4236bd:	0f a4 c0 05          	shld   $0x5,%eax,%eax
  4236c1:	c5 31 fe cb          	vpaddd %xmm3,%xmm9,%xmm9
  4236c5:	21 ce                	and    %ecx,%esi
  4236c7:	31 d1                	xor    %edx,%ecx
  4236c9:	c5 b9 73 db 04       	vpsrldq $0x4,%xmm3,%xmm8
  4236ce:	31 d6                	xor    %edx,%esi
  4236d0:	01 c5                	add    %eax,%ebp
  4236d2:	c5 d9 ef e0          	vpxor  %xmm0,%xmm4,%xmm4
  4236d6:	0f ac db 02          	shrd   $0x2,%ebx,%ebx
  4236da:	01 f5                	add    %esi,%ebp
  4236dc:	c5 39 ef c2          	vpxor  %xmm2,%xmm8,%xmm8
  4236e0:	03 54 24 04          	add    0x4(%rsp),%edx
  4236e4:	31 cb                	xor    %ecx,%ebx
  4236e6:	89 ee                	mov    %ebp,%esi
  4236e8:	0f a4 ed 05          	shld   $0x5,%ebp,%ebp
  4236ec:	c4 c1 59 ef e0       	vpxor  %xmm8,%xmm4,%xmm4
  4236f1:	21 df                	and    %ebx,%edi
  4236f3:	31 cb                	xor    %ecx,%ebx
  4236f5:	c5 79 7f 4c 24 30    	vmovdqa %xmm9,0x30(%rsp)
  4236fb:	31 cf                	xor    %ecx,%edi
  4236fd:	01 ea                	add    %ebp,%edx
  4236ff:	c5 b9 72 d4 1f       	vpsrld $0x1f,%xmm4,%xmm8
  423704:	0f ac c0 07          	shrd   $0x7,%eax,%eax
  423708:	01 fa                	add    %edi,%edx
  42370a:	03 4c 24 08          	add    0x8(%rsp),%ecx
  42370e:	31 d8                	xor    %ebx,%eax
  423710:	c5 a9 73 fc 0c       	vpslldq $0xc,%xmm4,%xmm10
  423715:	c5 d9 fe e4          	vpaddd %xmm4,%xmm4,%xmm4
  423719:	89 d7                	mov    %edx,%edi
  42371b:	0f a4 d2 05          	shld   $0x5,%edx,%edx
  42371f:	21 c6                	and    %eax,%esi
  423721:	31 d8                	xor    %ebx,%eax
  423723:	c4 c1 31 72 d2 1e    	vpsrld $0x1e,%xmm10,%xmm9
  423729:	c4 c1 59 eb e0       	vpor   %xmm8,%xmm4,%xmm4
  42372e:	31 de                	xor    %ebx,%esi
  423730:	01 d1                	add    %edx,%ecx
  423732:	0f ac ed 07          	shrd   $0x7,%ebp,%ebp
  423736:	01 f1                	add    %esi,%ecx
  423738:	c4 c1 29 72 f2 02    	vpslld $0x2,%xmm10,%xmm10
  42373e:	c4 c1 59 ef e1       	vpxor  %xmm9,%xmm4,%xmm4
  423743:	03 5c 24 0c          	add    0xc(%rsp),%ebx
  423747:	31 c5                	xor    %eax,%ebp
  423749:	89 ce                	mov    %ecx,%esi
  42374b:	0f a4 c9 05          	shld   $0x5,%ecx,%ecx
  42374f:	c4 c1 59 ef e2       	vpxor  %xmm10,%xmm4,%xmm4
  423754:	21 ef                	and    %ebp,%edi
  423756:	31 c5                	xor    %eax,%ebp
  423758:	c4 41 79 6f 13       	vmovdqa (%r11),%xmm10
  42375d:	31 c7                	xor    %eax,%edi
  42375f:	01 cb                	add    %ecx,%ebx
  423761:	0f ac d2 07          	shrd   $0x7,%edx,%edx
  423765:	01 fb                	add    %edi,%ebx
  423767:	03 44 24 10          	add    0x10(%rsp),%eax
  42376b:	31 ea                	xor    %ebp,%edx
  42376d:	c4 e3 69 0f e9 08    	vpalignr $0x8,%xmm1,%xmm2,%xmm5
  423773:	89 df                	mov    %ebx,%edi
  423775:	0f a4 db 05          	shld   $0x5,%ebx,%ebx
  423779:	c5 29 fe d4          	vpaddd %xmm4,%xmm10,%xmm10
  42377d:	21 d6                	and    %edx,%esi
  42377f:	31 ea                	xor    %ebp,%edx
  423781:	c5 b1 73 dc 04       	vpsrldq $0x4,%xmm4,%xmm9
  423786:	31 ee                	xor    %ebp,%esi
  423788:	01 d8                	add    %ebx,%eax
  42378a:	c5 d1 ef e9          	vpxor  %xmm1,%xmm5,%xmm5
  42378e:	0f ac c9 07          	shrd   $0x7,%ecx,%ecx
  423792:	01 f0                	add    %esi,%eax
  423794:	c5 31 ef cb          	vpxor  %xmm3,%xmm9,%xmm9
  423798:	03 6c 24 14          	add    0x14(%rsp),%ebp
  42379c:	31 d1                	xor    %edx,%ecx
  42379e:	89 c6                	mov    %eax,%esi
  4237a0:	0f a4 c0 05          	shld   $0x5,%eax,%eax
  4237a4:	c4 c1 51 ef e9       	vpxor  %xmm9,%xmm5,%xmm5
  4237a9:	21 cf                	and    %ecx,%edi
  4237ab:	31 d1                	xor    %edx,%ecx
  4237ad:	c5 79 7f 14 24       	vmovdqa %xmm10,(%rsp)
  4237b2:	31 d7                	xor    %edx,%edi
  4237b4:	01 c5                	add    %eax,%ebp
  4237b6:	c5 b1 72 d5 1f       	vpsrld $0x1f,%xmm5,%xmm9
  4237bb:	0f ac db 07          	shrd   $0x7,%ebx,%ebx
  4237bf:	01 fd                	add    %edi,%ebp
  4237c1:	03 54 24 18          	add    0x18(%rsp),%edx
  4237c5:	31 cb                	xor    %ecx,%ebx
  4237c7:	c5 b9 73 fd 0c       	vpslldq $0xc,%xmm5,%xmm8
  4237cc:	c5 d1 fe ed          	vpaddd %xmm5,%xmm5,%xmm5
  4237d0:	89 ef                	mov    %ebp,%edi
  4237d2:	0f a4 ed 05          	shld   $0x5,%ebp,%ebp
  4237d6:	21 de                	and    %ebx,%esi
  4237d8:	31 cb                	xor    %ecx,%ebx
  4237da:	c4 c1 29 72 d0 1e    	vpsrld $0x1e,%xmm8,%xmm10
  4237e0:	c4 c1 51 eb e9       	vpor   %xmm9,%xmm5,%xmm5
  4237e5:	31 ce                	xor    %ecx,%esi
  4237e7:	01 ea                	add    %ebp,%edx
  4237e9:	0f ac c0 07          	shrd   $0x7,%eax,%eax
  4237ed:	01 f2                	add    %esi,%edx
  4237ef:	c4 c1 39 72 f0 02    	vpslld $0x2,%xmm8,%xmm8
  4237f5:	c4 c1 51 ef ea       	vpxor  %xmm10,%xmm5,%xmm5
  4237fa:	03 4c 24 1c          	add    0x1c(%rsp),%ecx
  4237fe:	31 d8                	xor    %ebx,%eax
  423800:	89 d6                	mov    %edx,%esi
  423802:	0f a4 d2 05          	shld   $0x5,%edx,%edx
  423806:	c4 c1 51 ef e8       	vpxor  %xmm8,%xmm5,%xmm5
  42380b:	21 c7                	and    %eax,%edi
  42380d:	31 d8                	xor    %ebx,%eax
  42380f:	c4 41 79 6f 43 10    	vmovdqa 0x10(%r11),%xmm8
  423815:	31 df                	xor    %ebx,%edi
  423817:	01 d1                	add    %edx,%ecx
  423819:	0f ac ed 07          	shrd   $0x7,%ebp,%ebp
  42381d:	01 f9                	add    %edi,%ecx
  42381f:	03 5c 24 20          	add    0x20(%rsp),%ebx
  423823:	31 c5                	xor    %eax,%ebp
  423825:	c4 e3 61 0f f2 08    	vpalignr $0x8,%xmm2,%xmm3,%xmm6
  42382b:	89 cf                	mov    %ecx,%edi
  42382d:	0f a4 c9 05          	shld   $0x5,%ecx,%ecx
  423831:	c5 39 fe c5          	vpaddd %xmm5,%xmm8,%xmm8
  423835:	21 ee                	and    %ebp,%esi
  423837:	31 c5                	xor    %eax,%ebp
  423839:	c5 a9 73 dd 04       	vpsrldq $0x4,%xmm5,%xmm10
  42383e:	31 c6                	xor    %eax,%esi
  423840:	01 cb                	add    %ecx,%ebx
  423842:	c5 c9 ef f2          	vpxor  %xmm2,%xmm6,%xmm6
  423846:	0f ac d2 07          	shrd   $0x7,%edx,%edx
  42384a:	01 f3                	add    %esi,%ebx
  42384c:	c5 29 ef d4          	vpxor  %xmm4,%xmm10,%xmm10
  423850:	03 44 24 24          	add    0x24(%rsp),%eax
  423854:	31 ea                	xor    %ebp,%edx
  423856:	89 de                	mov    %ebx,%esi
  423858:	0f a4 db 05          	shld   $0x5,%ebx,%ebx
  42385c:	c4 c1 49 ef f2       	vpxor  %xmm10,%xmm6,%xmm6
  423861:	21 d7                	and    %edx,%edi
  423863:	31 ea                	xor    %ebp,%edx
  423865:	c5 79 7f 44 24 10    	vmovdqa %xmm8,0x10(%rsp)
  42386b:	31 ef                	xor    %ebp,%edi
  42386d:	01 d8                	add    %ebx,%eax
  42386f:	c5 a9 72 d6 1f       	vpsrld $0x1f,%xmm6,%xmm10
  423874:	0f ac c9 07          	shrd   $0x7,%ecx,%ecx
  423878:	01 f8                	add    %edi,%eax
  42387a:	03 6c 24 28          	add    0x28(%rsp),%ebp
  42387e:	31 d1                	xor    %edx,%ecx
  423880:	c5 b1 73 fe 0c       	vpslldq $0xc,%xmm6,%xmm9
  423885:	c5 c9 fe f6          	vpaddd %xmm6,%xmm6,%xmm6
  423889:	89 c7                	mov    %eax,%edi
  42388b:	0f a4 c0 05          	shld   $0x5,%eax,%eax
  42388f:	21 ce                	and    %ecx,%esi
  423891:	31 d1                	xor    %edx,%ecx
  423893:	c4 c1 39 72 d1 1e    	vpsrld $0x1e,%xmm9,%xmm8
  423899:	c4 c1 49 eb f2       	vpor   %xmm10,%xmm6,%xmm6
  42389e:	31 d6                	xor    %edx,%esi
  4238a0:	01 c5                	add    %eax,%ebp
  4238a2:	0f ac db 07          	shrd   $0x7,%ebx,%ebx
  4238a6:	01 f5                	add    %esi,%ebp
  4238a8:	c4 c1 31 72 f1 02    	vpslld $0x2,%xmm9,%xmm9
  4238ae:	c4 c1 49 ef f0       	vpxor  %xmm8,%xmm6,%xmm6
  4238b3:	03 54 24 2c          	add    0x2c(%rsp),%edx
  4238b7:	31 cb                	xor    %ecx,%ebx
  4238b9:	89 ee                	mov    %ebp,%esi
  4238bb:	0f a4 ed 05          	shld   $0x5,%ebp,%ebp
  4238bf:	c4 c1 49 ef f1       	vpxor  %xmm9,%xmm6,%xmm6
  4238c4:	21 df                	and    %ebx,%edi
  4238c6:	31 cb                	xor    %ecx,%ebx
  4238c8:	c4 41 79 6f 4b 10    	vmovdqa 0x10(%r11),%xmm9
  4238ce:	31 cf                	xor    %ecx,%edi
  4238d0:	01 ea                	add    %ebp,%edx
  4238d2:	0f ac c0 07          	shrd   $0x7,%eax,%eax
  4238d6:	01 fa                	add    %edi,%edx
  4238d8:	03 4c 24 30          	add    0x30(%rsp),%ecx
  4238dc:	31 d8                	xor    %ebx,%eax
  4238de:	c4 e3 59 0f fb 08    	vpalignr $0x8,%xmm3,%xmm4,%xmm7
  4238e4:	89 d7                	mov    %edx,%edi
  4238e6:	0f a4 d2 05          	shld   $0x5,%edx,%edx
  4238ea:	c5 31 fe ce          	vpaddd %xmm6,%xmm9,%xmm9
  4238ee:	21 c6                	and    %eax,%esi
  4238f0:	31 d8                	xor    %ebx,%eax
  4238f2:	c5 b9 73 de 04       	vpsrldq $0x4,%xmm6,%xmm8
  4238f7:	31 de                	xor    %ebx,%esi
  4238f9:	01 d1                	add    %edx,%ecx
  4238fb:	c5 c1 ef fb          	vpxor  %xmm3,%xmm7,%xmm7
  4238ff:	0f ac ed 07          	shrd   $0x7,%ebp,%ebp
  423903:	01 f1                	add    %esi,%ecx
  423905:	c5 39 ef c5          	vpxor  %xmm5,%xmm8,%xmm8
  423909:	03 5c 24 34          	add    0x34(%rsp),%ebx
  42390d:	31 c5                	xor    %eax,%ebp
  42390f:	89 ce                	mov    %ecx,%esi
  423911:	0f a4 c9 05          	shld   $0x5,%ecx,%ecx
  423915:	c4 c1 41 ef f8       	vpxor  %xmm8,%xmm7,%xmm7
  42391a:	21 ef                	and    %ebp,%edi
  42391c:	31 c5                	xor    %eax,%ebp
  42391e:	c5 79 7f 4c 24 20    	vmovdqa %xmm9,0x20(%rsp)
  423924:	31 c7                	xor    %eax,%edi
  423926:	01 cb                	add    %ecx,%ebx
  423928:	c5 b9 72 d7 1f       	vpsrld $0x1f,%xmm7,%xmm8
  42392d:	0f ac d2 07          	shrd   $0x7,%edx,%edx
  423931:	01 fb                	add    %edi,%ebx
  423933:	03 44 24 38          	add    0x38(%rsp),%eax
  423937:	31 ea                	xor    %ebp,%edx
  423939:	c5 a9 73 ff 0c       	vpslldq $0xc,%xmm7,%xmm10
  42393e:	c5 c1 fe ff          	vpaddd %xmm7,%xmm7,%xmm7
  423942:	89 df                	mov    %ebx,%edi
  423944:	0f a4 db 05          	shld   $0x5,%ebx,%ebx
  423948:	21 d6                	and    %edx,%esi
  42394a:	31 ea                	xor    %ebp,%edx
  42394c:	c4 c1 31 72 d2 1e    	vpsrld $0x1e,%xmm10,%xmm9
  423952:	c4 c1 41 eb f8       	vpor   %xmm8,%xmm7,%xmm7
  423957:	31 ee                	xor    %ebp,%esi
  423959:	01 d8                	add    %ebx,%eax
  42395b:	0f ac c9 07          	shrd   $0x7,%ecx,%ecx
  42395f:	01 f0                	add    %esi,%eax
  423961:	c4 c1 29 72 f2 02    	vpslld $0x2,%xmm10,%xmm10
  423967:	c4 c1 41 ef f9       	vpxor  %xmm9,%xmm7,%xmm7
  42396c:	03 6c 24 3c          	add    0x3c(%rsp),%ebp
  423970:	31 d1                	xor    %edx,%ecx
  423972:	89 c6                	mov    %eax,%esi
  423974:	0f a4 c0 05          	shld   $0x5,%eax,%eax
  423978:	c4 c1 41 ef fa       	vpxor  %xmm10,%xmm7,%xmm7
  42397d:	21 cf                	and    %ecx,%edi
  42397f:	31 d1                	xor    %edx,%ecx
  423981:	c4 41 79 6f 53 10    	vmovdqa 0x10(%r11),%xmm10
  423987:	31 d7                	xor    %edx,%edi
  423989:	01 c5                	add    %eax,%ebp
  42398b:	0f ac db 07          	shrd   $0x7,%ebx,%ebx
  42398f:	01 fd                	add    %edi,%ebp
  423991:	c4 63 41 0f ce 08    	vpalignr $0x8,%xmm6,%xmm7,%xmm9
  423997:	c5 f9 ef c4          	vpxor  %xmm4,%xmm0,%xmm0
  42399b:	03 14 24             	add    (%rsp),%edx
  42399e:	31 cb                	xor    %ecx,%ebx
  4239a0:	89 ef                	mov    %ebp,%edi
  4239a2:	0f a4 ed 05          	shld   $0x5,%ebp,%ebp
  4239a6:	c5 f9 ef c1          	vpxor  %xmm1,%xmm0,%xmm0
  4239aa:	21 de                	and    %ebx,%esi
  4239ac:	31 cb                	xor    %ecx,%ebx
  4239ae:	c4 41 79 6f c2       	vmovdqa %xmm10,%xmm8
  4239b3:	c5 29 fe d7          	vpaddd %xmm7,%xmm10,%xmm10
  4239b7:	31 ce                	xor    %ecx,%esi
  4239b9:	01 ea                	add    %ebp,%edx
  4239bb:	c4 c1 79 ef c1       	vpxor  %xmm9,%xmm0,%xmm0
  4239c0:	0f ac c0 07          	shrd   $0x7,%eax,%eax
  4239c4:	01 f2                	add    %esi,%edx
  4239c6:	03 4c 24 04          	add    0x4(%rsp),%ecx
  4239ca:	31 d8                	xor    %ebx,%eax
  4239cc:	c5 b1 72 d0 1e       	vpsrld $0x1e,%xmm0,%xmm9
  4239d1:	c5 79 7f 54 24 30    	vmovdqa %xmm10,0x30(%rsp)
  4239d7:	89 d6                	mov    %edx,%esi
  4239d9:	0f a4 d2 05          	shld   $0x5,%edx,%edx
  4239dd:	21 c7                	and    %eax,%edi
  4239df:	31 d8                	xor    %ebx,%eax
  4239e1:	c5 f9 72 f0 02       	vpslld $0x2,%xmm0,%xmm0
  4239e6:	31 df                	xor    %ebx,%edi
  4239e8:	01 d1                	add    %edx,%ecx
  4239ea:	0f ac ed 07          	shrd   $0x7,%ebp,%ebp
  4239ee:	01 f9                	add    %edi,%ecx
  4239f0:	03 5c 24 08          	add    0x8(%rsp),%ebx
  4239f4:	31 c5                	xor    %eax,%ebp
  4239f6:	89 cf                	mov    %ecx,%edi
  4239f8:	0f a4 c9 05          	shld   $0x5,%ecx,%ecx
  4239fc:	c4 c1 79 eb c1       	vpor   %xmm9,%xmm0,%xmm0
  423a01:	21 ee                	and    %ebp,%esi
  423a03:	31 c5                	xor    %eax,%ebp
  423a05:	c5 79 6f d0          	vmovdqa %xmm0,%xmm10
  423a09:	31 c6                	xor    %eax,%esi
  423a0b:	01 cb                	add    %ecx,%ebx
  423a0d:	0f ac d2 07          	shrd   $0x7,%edx,%edx
  423a11:	01 f3                	add    %esi,%ebx
  423a13:	03 44 24 0c          	add    0xc(%rsp),%eax
  423a17:	31 ea                	xor    %ebp,%edx
  423a19:	89 de                	mov    %ebx,%esi
  423a1b:	0f a4 db 05          	shld   $0x5,%ebx,%ebx
  423a1f:	21 d7                	and    %edx,%edi
  423a21:	31 ea                	xor    %ebp,%edx
  423a23:	31 ef                	xor    %ebp,%edi
  423a25:	01 d8                	add    %ebx,%eax
  423a27:	0f ac c9 07          	shrd   $0x7,%ecx,%ecx
  423a2b:	01 f8                	add    %edi,%eax
  423a2d:	c4 63 79 0f d7 08    	vpalignr $0x8,%xmm7,%xmm0,%xmm10
  423a33:	c5 f1 ef cd          	vpxor  %xmm5,%xmm1,%xmm1
  423a37:	03 6c 24 10          	add    0x10(%rsp),%ebp
  423a3b:	31 d6                	xor    %edx,%esi
  423a3d:	89 c7                	mov    %eax,%edi
  423a3f:	0f a4 c0 05          	shld   $0x5,%eax,%eax
  423a43:	c5 f1 ef ca          	vpxor  %xmm2,%xmm1,%xmm1
  423a47:	31 ce                	xor    %ecx,%esi
  423a49:	01 c5                	add    %eax,%ebp
  423a4b:	c4 41 79 6f c8       	vmovdqa %xmm8,%xmm9
  423a50:	c5 39 fe c0          	vpaddd %xmm0,%xmm8,%xmm8
  423a54:	0f ac db 07          	shrd   $0x7,%ebx,%ebx
  423a58:	01 f5                	add    %esi,%ebp
  423a5a:	c4 c1 71 ef ca       	vpxor  %xmm10,%xmm1,%xmm1
  423a5f:	03 54 24 14          	add    0x14(%rsp),%edx
  423a63:	31 cf                	xor    %ecx,%edi
  423a65:	89 ee                	mov    %ebp,%esi
  423a67:	0f a4 ed 05          	shld   $0x5,%ebp,%ebp
  423a6b:	c5 a9 72 d1 1e       	vpsrld $0x1e,%xmm1,%xmm10
  423a70:	c5 79 7f 04 24       	vmovdqa %xmm8,(%rsp)
  423a75:	31 df                	xor    %ebx,%edi
  423a77:	01 ea                	add    %ebp,%edx
  423a79:	0f ac c0 07          	shrd   $0x7,%eax,%eax
  423a7d:	01 fa                	add    %edi,%edx
  423a7f:	c5 f1 72 f1 02       	vpslld $0x2,%xmm1,%xmm1
  423a84:	03 4c 24 18          	add    0x18(%rsp),%ecx
  423a88:	31 de                	xor    %ebx,%esi
  423a8a:	89 d7                	mov    %edx,%edi
  423a8c:	0f a4 d2 05          	shld   $0x5,%edx,%edx
  423a90:	31 c6                	xor    %eax,%esi
  423a92:	01 d1                	add    %edx,%ecx
  423a94:	0f ac ed 07          	shrd   $0x7,%ebp,%ebp
  423a98:	01 f1                	add    %esi,%ecx
  423a9a:	c4 c1 71 eb ca       	vpor   %xmm10,%xmm1,%xmm1
  423a9f:	03 5c 24 1c          	add    0x1c(%rsp),%ebx
  423aa3:	31 c7                	xor    %eax,%edi
  423aa5:	c5 79 6f c1          	vmovdqa %xmm1,%xmm8
  423aa9:	89 ce                	mov    %ecx,%esi
  423aab:	0f a4 c9 05          	shld   $0x5,%ecx,%ecx
  423aaf:	31 ef                	xor    %ebp,%edi
  423ab1:	01 cb                	add    %ecx,%ebx
  423ab3:	0f ac d2 07          	shrd   $0x7,%edx,%edx
  423ab7:	01 fb                	add    %edi,%ebx
  423ab9:	c4 63 71 0f c0 08    	vpalignr $0x8,%xmm0,%xmm1,%xmm8
  423abf:	c5 e9 ef d6          	vpxor  %xmm6,%xmm2,%xmm2
  423ac3:	03 44 24 20          	add    0x20(%rsp),%eax
  423ac7:	31 ee                	xor    %ebp,%esi
  423ac9:	89 df                	mov    %ebx,%edi
  423acb:	0f a4 db 05          	shld   $0x5,%ebx,%ebx
  423acf:	c5 e9 ef d3          	vpxor  %xmm3,%xmm2,%xmm2
  423ad3:	31 d6                	xor    %edx,%esi
  423ad5:	01 d8                	add    %ebx,%eax
  423ad7:	c4 41 79 6f 53 20    	vmovdqa 0x20(%r11),%xmm10
  423add:	c5 31 fe c9          	vpaddd %xmm1,%xmm9,%xmm9
  423ae1:	0f ac c9 07          	shrd   $0x7,%ecx,%ecx
  423ae5:	01 f0                	add    %esi,%eax
  423ae7:	c4 c1 69 ef d0       	vpxor  %xmm8,%xmm2,%xmm2
  423aec:	03 6c 24 24          	add    0x24(%rsp),%ebp
  423af0:	31 d7                	xor    %edx,%edi
  423af2:	89 c6                	mov    %eax,%esi
  423af4:	0f a4 c0 05          	shld   $0x5,%eax,%eax
  423af8:	c5 b9 72 d2 1e       	vpsrld $0x1e,%xmm2,%xmm8
  423afd:	c5 79 7f 4c 24 10    	vmovdqa %xmm9,0x10(%rsp)
  423b03:	31 cf                	xor    %ecx,%edi
  423b05:	01 c5                	add    %eax,%ebp
  423b07:	0f ac db 07          	shrd   $0x7,%ebx,%ebx
  423b0b:	01 fd                	add    %edi,%ebp
  423b0d:	c5 e9 72 f2 02       	vpslld $0x2,%xmm2,%xmm2
  423b12:	03 54 24 28          	add    0x28(%rsp),%edx
  423b16:	31 ce                	xor    %ecx,%esi
  423b18:	89 ef                	mov    %ebp,%edi
  423b1a:	0f a4 ed 05          	shld   $0x5,%ebp,%ebp
  423b1e:	31 de                	xor    %ebx,%esi
  423b20:	01 ea                	add    %ebp,%edx
  423b22:	0f ac c0 07          	shrd   $0x7,%eax,%eax
  423b26:	01 f2                	add    %esi,%edx
  423b28:	c4 c1 69 eb d0       	vpor   %xmm8,%xmm2,%xmm2
  423b2d:	03 4c 24 2c          	add    0x2c(%rsp),%ecx
  423b31:	31 df                	xor    %ebx,%edi
  423b33:	c5 79 6f ca          	vmovdqa %xmm2,%xmm9
  423b37:	89 d6                	mov    %edx,%esi
  423b39:	0f a4 d2 05          	shld   $0x5,%edx,%edx
  423b3d:	31 c7                	xor    %eax,%edi
  423b3f:	01 d1                	add    %edx,%ecx
  423b41:	0f ac ed 07          	shrd   $0x7,%ebp,%ebp
  423b45:	01 f9                	add    %edi,%ecx
  423b47:	c4 63 69 0f c9 08    	vpalignr $0x8,%xmm1,%xmm2,%xmm9
  423b4d:	c5 e1 ef df          	vpxor  %xmm7,%xmm3,%xmm3
  423b51:	03 5c 24 30          	add    0x30(%rsp),%ebx
  423b55:	31 c6                	xor    %eax,%esi
  423b57:	89 cf                	mov    %ecx,%edi
  423b59:	0f a4 c9 05          	shld   $0x5,%ecx,%ecx
  423b5d:	c5 e1 ef dc          	vpxor  %xmm4,%xmm3,%xmm3
  423b61:	31 ee                	xor    %ebp,%esi
  423b63:	01 cb                	add    %ecx,%ebx
  423b65:	c4 41 79 6f c2       	vmovdqa %xmm10,%xmm8
  423b6a:	c5 29 fe d2          	vpaddd %xmm2,%xmm10,%xmm10
  423b6e:	0f ac d2 07          	shrd   $0x7,%edx,%edx
  423b72:	01 f3                	add    %esi,%ebx
  423b74:	c4 c1 61 ef d9       	vpxor  %xmm9,%xmm3,%xmm3
  423b79:	03 44 24 34          	add    0x34(%rsp),%eax
  423b7d:	31 ef                	xor    %ebp,%edi
  423b7f:	89 de                	mov    %ebx,%esi
  423b81:	0f a4 db 05          	shld   $0x5,%ebx,%ebx
  423b85:	c5 b1 72 d3 1e       	vpsrld $0x1e,%xmm3,%xmm9
  423b8a:	c5 79 7f 54 24 20    	vmovdqa %xmm10,0x20(%rsp)
  423b90:	31 d7                	xor    %edx,%edi
  423b92:	01 d8                	add    %ebx,%eax
  423b94:	0f ac c9 07          	shrd   $0x7,%ecx,%ecx
  423b98:	01 f8                	add    %edi,%eax
  423b9a:	c5 e1 72 f3 02       	vpslld $0x2,%xmm3,%xmm3
  423b9f:	03 6c 24 38          	add    0x38(%rsp),%ebp
  423ba3:	31 d6                	xor    %edx,%esi
  423ba5:	89 c7                	mov    %eax,%edi
  423ba7:	0f a4 c0 05          	shld   $0x5,%eax,%eax
  423bab:	31 ce                	xor    %ecx,%esi
  423bad:	01 c5                	add    %eax,%ebp
  423baf:	0f ac db 07          	shrd   $0x7,%ebx,%ebx
  423bb3:	01 f5                	add    %esi,%ebp
  423bb5:	c4 c1 61 eb d9       	vpor   %xmm9,%xmm3,%xmm3
  423bba:	03 54 24 3c          	add    0x3c(%rsp),%edx
  423bbe:	31 cf                	xor    %ecx,%edi
  423bc0:	c5 79 6f d3          	vmovdqa %xmm3,%xmm10
  423bc4:	89 ee                	mov    %ebp,%esi
  423bc6:	0f a4 ed 05          	shld   $0x5,%ebp,%ebp
  423bca:	31 df                	xor    %ebx,%edi
  423bcc:	01 ea                	add    %ebp,%edx
  423bce:	0f ac c0 07          	shrd   $0x7,%eax,%eax
  423bd2:	01 fa                	add    %edi,%edx
  423bd4:	c4 63 61 0f d2 08    	vpalignr $0x8,%xmm2,%xmm3,%xmm10
  423bda:	c5 d9 ef e0          	vpxor  %xmm0,%xmm4,%xmm4
  423bde:	03 0c 24             	add    (%rsp),%ecx
  423be1:	31 de                	xor    %ebx,%esi
  423be3:	89 d7                	mov    %edx,%edi
  423be5:	0f a4 d2 05          	shld   $0x5,%edx,%edx
  423be9:	c5 d9 ef e5          	vpxor  %xmm5,%xmm4,%xmm4
  423bed:	31 c6                	xor    %eax,%esi
  423bef:	01 d1                	add    %edx,%ecx
  423bf1:	c4 41 79 6f c8       	vmovdqa %xmm8,%xmm9
  423bf6:	c5 39 fe c3          	vpaddd %xmm3,%xmm8,%xmm8
  423bfa:	0f ac ed 07          	shrd   $0x7,%ebp,%ebp
  423bfe:	01 f1                	add    %esi,%ecx
  423c00:	c4 c1 59 ef e2       	vpxor  %xmm10,%xmm4,%xmm4
  423c05:	03 5c 24 04          	add    0x4(%rsp),%ebx
  423c09:	31 c7                	xor    %eax,%edi
  423c0b:	89 ce                	mov    %ecx,%esi
  423c0d:	0f a4 c9 05          	shld   $0x5,%ecx,%ecx
  423c11:	c5 a9 72 d4 1e       	vpsrld $0x1e,%xmm4,%xmm10
  423c16:	c5 79 7f 44 24 30    	vmovdqa %xmm8,0x30(%rsp)
  423c1c:	31 ef                	xor    %ebp,%edi
  423c1e:	01 cb                	add    %ecx,%ebx
  423c20:	0f ac d2 07          	shrd   $0x7,%edx,%edx
  423c24:	01 fb                	add    %edi,%ebx
  423c26:	c5 d9 72 f4 02       	vpslld $0x2,%xmm4,%xmm4
  423c2b:	03 44 24 08          	add    0x8(%rsp),%eax
  423c2f:	31 ee                	xor    %ebp,%esi
  423c31:	89 df                	mov    %ebx,%edi
  423c33:	0f a4 db 05          	shld   $0x5,%ebx,%ebx
  423c37:	31 d6                	xor    %edx,%esi
  423c39:	01 d8                	add    %ebx,%eax
  423c3b:	0f ac c9 07          	shrd   $0x7,%ecx,%ecx
  423c3f:	01 f0                	add    %esi,%eax
  423c41:	c4 c1 59 eb e2       	vpor   %xmm10,%xmm4,%xmm4
  423c46:	03 6c 24 0c          	add    0xc(%rsp),%ebp
  423c4a:	31 d7                	xor    %edx,%edi
  423c4c:	c5 79 6f c4          	vmovdqa %xmm4,%xmm8
  423c50:	89 c6                	mov    %eax,%esi
  423c52:	0f a4 c0 05          	shld   $0x5,%eax,%eax
  423c56:	31 cf                	xor    %ecx,%edi
  423c58:	01 c5                	add    %eax,%ebp
  423c5a:	0f ac db 07          	shrd   $0x7,%ebx,%ebx
  423c5e:	01 fd                	add    %edi,%ebp
  423c60:	c4 63 59 0f c3 08    	vpalignr $0x8,%xmm3,%xmm4,%xmm8
  423c66:	c5 d1 ef e9          	vpxor  %xmm1,%xmm5,%xmm5
  423c6a:	03 54 24 10          	add    0x10(%rsp),%edx
  423c6e:	31 ce                	xor    %ecx,%esi
  423c70:	89 ef                	mov    %ebp,%edi
  423c72:	0f a4 ed 05          	shld   $0x5,%ebp,%ebp
  423c76:	c5 d1 ef ee          	vpxor  %xmm6,%xmm5,%xmm5
  423c7a:	31 de                	xor    %ebx,%esi
  423c7c:	01 ea                	add    %ebp,%edx
  423c7e:	c4 41 79 6f d1       	vmovdqa %xmm9,%xmm10
  423c83:	c5 31 fe cc          	vpaddd %xmm4,%xmm9,%xmm9
  423c87:	0f ac c0 07          	shrd   $0x7,%eax,%eax
  423c8b:	01 f2                	add    %esi,%edx
  423c8d:	c4 c1 51 ef e8       	vpxor  %xmm8,%xmm5,%xmm5
  423c92:	03 4c 24 14          	add    0x14(%rsp),%ecx
  423c96:	31 df                	xor    %ebx,%edi
  423c98:	89 d6                	mov    %edx,%esi
  423c9a:	0f a4 d2 05          	shld   $0x5,%edx,%edx
  423c9e:	c5 b9 72 d5 1e       	vpsrld $0x1e,%xmm5,%xmm8
  423ca3:	c5 79 7f 0c 24       	vmovdqa %xmm9,(%rsp)
  423ca8:	31 c7                	xor    %eax,%edi
  423caa:	01 d1                	add    %edx,%ecx
  423cac:	0f ac ed 07          	shrd   $0x7,%ebp,%ebp
  423cb0:	01 f9                	add    %edi,%ecx
  423cb2:	c5 d1 72 f5 02       	vpslld $0x2,%xmm5,%xmm5
  423cb7:	03 5c 24 18          	add    0x18(%rsp),%ebx
  423cbb:	31 c6                	xor    %eax,%esi
  423cbd:	89 cf                	mov    %ecx,%edi
  423cbf:	0f a4 c9 05          	shld   $0x5,%ecx,%ecx
  423cc3:	31 ee                	xor    %ebp,%esi
  423cc5:	01 cb                	add    %ecx,%ebx
  423cc7:	0f ac d2 07          	shrd   $0x7,%edx,%edx
  423ccb:	01 f3                	add    %esi,%ebx
  423ccd:	c4 c1 51 eb e8       	vpor   %xmm8,%xmm5,%xmm5
  423cd2:	03 44 24 1c          	add    0x1c(%rsp),%eax
  423cd6:	31 ef                	xor    %ebp,%edi
  423cd8:	c5 79 6f cd          	vmovdqa %xmm5,%xmm9
  423cdc:	89 de                	mov    %ebx,%esi
  423cde:	0f a4 db 05          	shld   $0x5,%ebx,%ebx
  423ce2:	31 d7                	xor    %edx,%edi
  423ce4:	01 d8                	add    %ebx,%eax
  423ce6:	0f ac c9 07          	shrd   $0x7,%ecx,%ecx
  423cea:	01 f8                	add    %edi,%eax
  423cec:	c4 63 51 0f cc 08    	vpalignr $0x8,%xmm4,%xmm5,%xmm9
  423cf2:	c5 c9 ef f2          	vpxor  %xmm2,%xmm6,%xmm6
  423cf6:	89 cf                	mov    %ecx,%edi
  423cf8:	31 d1                	xor    %edx,%ecx
  423cfa:	03 6c 24 20          	add    0x20(%rsp),%ebp
  423cfe:	21 d7                	and    %edx,%edi
  423d00:	c5 c9 ef f7          	vpxor  %xmm7,%xmm6,%xmm6
  423d04:	21 ce                	and    %ecx,%esi
  423d06:	0f ac db 07          	shrd   $0x7,%ebx,%ebx
  423d0a:	c4 41 79 6f c2       	vmovdqa %xmm10,%xmm8
  423d0f:	c5 29 fe d5          	vpaddd %xmm5,%xmm10,%xmm10
  423d13:	01 fd                	add    %edi,%ebp
  423d15:	89 c7                	mov    %eax,%edi
  423d17:	c4 c1 49 ef f1       	vpxor  %xmm9,%xmm6,%xmm6
  423d1c:	0f a4 c0 05          	shld   $0x5,%eax,%eax
  423d20:	01 f5                	add    %esi,%ebp
  423d22:	31 d1                	xor    %edx,%ecx
  423d24:	01 c5                	add    %eax,%ebp
  423d26:	c5 b1 72 d6 1e       	vpsrld $0x1e,%xmm6,%xmm9
  423d2b:	c5 79 7f 54 24 10    	vmovdqa %xmm10,0x10(%rsp)
  423d31:	89 de                	mov    %ebx,%esi
  423d33:	31 cb                	xor    %ecx,%ebx
  423d35:	03 54 24 24          	add    0x24(%rsp),%edx
  423d39:	21 ce                	and    %ecx,%esi
  423d3b:	c5 c9 72 f6 02       	vpslld $0x2,%xmm6,%xmm6
  423d40:	21 df                	and    %ebx,%edi
  423d42:	0f ac c0 07          	shrd   $0x7,%eax,%eax
  423d46:	01 f2                	add    %esi,%edx
  423d48:	89 ee                	mov    %ebp,%esi
  423d4a:	0f a4 ed 05          	shld   $0x5,%ebp,%ebp
  423d4e:	01 fa                	add    %edi,%edx
  423d50:	31 cb                	xor    %ecx,%ebx
  423d52:	01 ea                	add    %ebp,%edx
  423d54:	c4 c1 49 eb f1       	vpor   %xmm9,%xmm6,%xmm6
  423d59:	89 c7                	mov    %eax,%edi
  423d5b:	31 d8                	xor    %ebx,%eax
  423d5d:	c5 79 6f d6          	vmovdqa %xmm6,%xmm10
  423d61:	03 4c 24 28          	add    0x28(%rsp),%ecx
  423d65:	21 df                	and    %ebx,%edi
  423d67:	21 c6                	and    %eax,%esi
  423d69:	0f ac ed 07          	shrd   $0x7,%ebp,%ebp
  423d6d:	01 f9                	add    %edi,%ecx
  423d6f:	89 d7                	mov    %edx,%edi
  423d71:	0f a4 d2 05          	shld   $0x5,%edx,%edx
  423d75:	01 f1                	add    %esi,%ecx
  423d77:	31 d8                	xor    %ebx,%eax
  423d79:	01 d1                	add    %edx,%ecx
  423d7b:	89 ee                	mov    %ebp,%esi
  423d7d:	31 c5                	xor    %eax,%ebp
  423d7f:	03 5c 24 2c          	add    0x2c(%rsp),%ebx
  423d83:	21 c6                	and    %eax,%esi
  423d85:	21 ef                	and    %ebp,%edi
  423d87:	0f ac d2 07          	shrd   $0x7,%edx,%edx
  423d8b:	01 f3                	add    %esi,%ebx
  423d8d:	89 ce                	mov    %ecx,%esi
  423d8f:	0f a4 c9 05          	shld   $0x5,%ecx,%ecx
  423d93:	01 fb                	add    %edi,%ebx
  423d95:	31 c5                	xor    %eax,%ebp
  423d97:	01 cb                	add    %ecx,%ebx
  423d99:	c4 63 49 0f d5 08    	vpalignr $0x8,%xmm5,%xmm6,%xmm10
  423d9f:	c5 c1 ef fb          	vpxor  %xmm3,%xmm7,%xmm7
  423da3:	89 d7                	mov    %edx,%edi
  423da5:	31 ea                	xor    %ebp,%edx
  423da7:	03 44 24 30          	add    0x30(%rsp),%eax
  423dab:	21 ef                	and    %ebp,%edi
  423dad:	c5 c1 ef f8          	vpxor  %xmm0,%xmm7,%xmm7
  423db1:	21 d6                	and    %edx,%esi
  423db3:	0f ac c9 07          	shrd   $0x7,%ecx,%ecx
  423db7:	c4 41 79 6f 4b 30    	vmovdqa 0x30(%r11),%xmm9
  423dbd:	c5 39 fe c6          	vpaddd %xmm6,%xmm8,%xmm8
  423dc1:	01 f8                	add    %edi,%eax
  423dc3:	89 df                	mov    %ebx,%edi
  423dc5:	c4 c1 41 ef fa       	vpxor  %xmm10,%xmm7,%xmm7
  423dca:	0f a4 db 05          	shld   $0x5,%ebx,%ebx
  423dce:	01 f0                	add    %esi,%eax
  423dd0:	31 ea                	xor    %ebp,%edx
  423dd2:	01 d8                	add    %ebx,%eax
  423dd4:	c5 a9 72 d7 1e       	vpsrld $0x1e,%xmm7,%xmm10
  423dd9:	c5 79 7f 44 24 20    	vmovdqa %xmm8,0x20(%rsp)
  423ddf:	89 ce                	mov    %ecx,%esi
  423de1:	31 d1                	xor    %edx,%ecx
  423de3:	03 6c 24 34          	add    0x34(%rsp),%ebp
  423de7:	21 d6                	and    %edx,%esi
  423de9:	c5 c1 72 f7 02       	vpslld $0x2,%xmm7,%xmm7
  423dee:	21 cf                	and    %ecx,%edi
  423df0:	0f ac db 07          	shrd   $0x7,%ebx,%ebx
  423df4:	01 f5                	add    %esi,%ebp
  423df6:	89 c6                	mov    %eax,%esi
  423df8:	0f a4 c0 05          	shld   $0x5,%eax,%eax
  423dfc:	01 fd                	add    %edi,%ebp
  423dfe:	31 d1                	xor    %edx,%ecx
  423e00:	01 c5                	add    %eax,%ebp
  423e02:	c4 c1 41 eb fa       	vpor   %xmm10,%xmm7,%xmm7
  423e07:	89 df                	mov    %ebx,%edi
  423e09:	31 cb                	xor    %ecx,%ebx
  423e0b:	c5 79 6f c7          	vmovdqa %xmm7,%xmm8
  423e0f:	03 54 24 38          	add    0x38(%rsp),%edx
  423e13:	21 cf                	and    %ecx,%edi
  423e15:	21 de                	and    %ebx,%esi
  423e17:	0f ac c0 07          	shrd   $0x7,%eax,%eax
  423e1b:	01 fa                	add    %edi,%edx
  423e1d:	89 ef                	mov    %ebp,%edi
  423e1f:	0f a4 ed 05          	shld   $0x5,%ebp,%ebp
  423e23:	01 f2                	add    %esi,%edx
  423e25:	31 cb                	xor    %ecx,%ebx
  423e27:	01 ea                	add    %ebp,%edx
  423e29:	89 c6                	mov    %eax,%esi
  423e2b:	31 d8                	xor    %ebx,%eax
  423e2d:	03 4c 24 3c          	add    0x3c(%rsp),%ecx
  423e31:	21 de                	and    %ebx,%esi
  423e33:	21 c7                	and    %eax,%edi
  423e35:	0f ac ed 07          	shrd   $0x7,%ebp,%ebp
  423e39:	01 f1                	add    %esi,%ecx
  423e3b:	89 d6                	mov    %edx,%esi
  423e3d:	0f a4 d2 05          	shld   $0x5,%edx,%edx
  423e41:	01 f9                	add    %edi,%ecx
  423e43:	31 d8                	xor    %ebx,%eax
  423e45:	01 d1                	add    %edx,%ecx
  423e47:	c4 63 41 0f c6 08    	vpalignr $0x8,%xmm6,%xmm7,%xmm8
  423e4d:	c5 f9 ef c4          	vpxor  %xmm4,%xmm0,%xmm0
  423e51:	89 ef                	mov    %ebp,%edi
  423e53:	31 c5                	xor    %eax,%ebp
  423e55:	03 1c 24             	add    (%rsp),%ebx
  423e58:	21 c7                	and    %eax,%edi
  423e5a:	c5 f9 ef c1          	vpxor  %xmm1,%xmm0,%xmm0
  423e5e:	21 ee                	and    %ebp,%esi
  423e60:	0f ac d2 07          	shrd   $0x7,%edx,%edx
  423e64:	c4 41 79 6f d1       	vmovdqa %xmm9,%xmm10
  423e69:	c5 31 fe cf          	vpaddd %xmm7,%xmm9,%xmm9
  423e6d:	01 fb                	add    %edi,%ebx
  423e6f:	89 cf                	mov    %ecx,%edi
  423e71:	c4 c1 79 ef c0       	vpxor  %xmm8,%xmm0,%xmm0
  423e76:	0f a4 c9 05          	shld   $0x5,%ecx,%ecx
  423e7a:	01 f3                	add    %esi,%ebx
  423e7c:	31 c5                	xor    %eax,%ebp
  423e7e:	01 cb                	add    %ecx,%ebx
  423e80:	c5 b9 72 d0 1e       	vpsrld $0x1e,%xmm0,%xmm8
  423e85:	c5 79 7f 4c 24 30    	vmovdqa %xmm9,0x30(%rsp)
  423e8b:	89 d6                	mov    %edx,%esi
  423e8d:	31 ea                	xor    %ebp,%edx
  423e8f:	03 44 24 04          	add    0x4(%rsp),%eax
  423e93:	21 ee                	and    %ebp,%esi
  423e95:	c5 f9 72 f0 02       	vpslld $0x2,%xmm0,%xmm0
  423e9a:	21 d7                	and    %edx,%edi
  423e9c:	0f ac c9 07          	shrd   $0x7,%ecx,%ecx
  423ea0:	01 f0                	add    %esi,%eax
  423ea2:	89 de                	mov    %ebx,%esi
  423ea4:	0f a4 db 05          	shld   $0x5,%ebx,%ebx
  423ea8:	01 f8                	add    %edi,%eax
  423eaa:	31 ea                	xor    %ebp,%edx
  423eac:	01 d8                	add    %ebx,%eax
  423eae:	c4 c1 79 eb c0       	vpor   %xmm8,%xmm0,%xmm0
  423eb3:	89 cf                	mov    %ecx,%edi
  423eb5:	31 d1                	xor    %edx,%ecx
  423eb7:	c5 79 6f c8          	vmovdqa %xmm0,%xmm9
  423ebb:	03 6c 24 08          	add    0x8(%rsp),%ebp
  423ebf:	21 d7                	and    %edx,%edi
  423ec1:	21 ce                	and    %ecx,%esi
  423ec3:	0f ac db 07          	shrd   $0x7,%ebx,%ebx
  423ec7:	01 fd                	add    %edi,%ebp
  423ec9:	89 c7                	mov    %eax,%edi
  423ecb:	0f a4 c0 05          	shld   $0x5,%eax,%eax
  423ecf:	01 f5                	add    %esi,%ebp
  423ed1:	31 d1                	xor    %edx,%ecx
  423ed3:	01 c5                	add    %eax,%ebp
  423ed5:	89 de                	mov    %ebx,%esi
  423ed7:	31 cb                	xor    %ecx,%ebx
  423ed9:	03 54 24 0c          	add    0xc(%rsp),%edx
  423edd:	21 ce                	and    %ecx,%esi
  423edf:	21 df                	and    %ebx,%edi
  423ee1:	0f ac c0 07          	shrd   $0x7,%eax,%eax
  423ee5:	01 f2                	add    %esi,%edx
  423ee7:	89 ee                	mov    %ebp,%esi
  423ee9:	0f a4 ed 05          	shld   $0x5,%ebp,%ebp
  423eed:	01 fa                	add    %edi,%edx
  423eef:	31 cb                	xor    %ecx,%ebx
  423ef1:	01 ea                	add    %ebp,%edx
  423ef3:	c4 63 79 0f cf 08    	vpalignr $0x8,%xmm7,%xmm0,%xmm9
  423ef9:	c5 f1 ef cd          	vpxor  %xmm5,%xmm1,%xmm1
  423efd:	89 c7                	mov    %eax,%edi
  423eff:	31 d8                	xor    %ebx,%eax
  423f01:	03 4c 24 10          	add    0x10(%rsp),%ecx
  423f05:	21 df                	and    %ebx,%edi
  423f07:	c5 f1 ef ca          	vpxor  %xmm2,%xmm1,%xmm1
  423f0b:	21 c6                	and    %eax,%esi
  423f0d:	0f ac ed 07          	shrd   $0x7,%ebp,%ebp
  423f11:	c4 41 79 6f c2       	vmovdqa %xmm10,%xmm8
  423f16:	c5 29 fe d0          	vpaddd %xmm0,%xmm10,%xmm10
  423f1a:	01 f9                	add    %edi,%ecx
  423f1c:	89 d7                	mov    %edx,%edi
  423f1e:	c4 c1 71 ef c9       	vpxor  %xmm9,%xmm1,%xmm1
  423f23:	0f a4 d2 05          	shld   $0x5,%edx,%edx
  423f27:	01 f1                	add    %esi,%ecx
  423f29:	31 d8                	xor    %ebx,%eax
  423f2b:	01 d1                	add    %edx,%ecx
  423f2d:	c5 b1 72 d1 1e       	vpsrld $0x1e,%xmm1,%xmm9
  423f32:	c5 79 7f 14 24       	vmovdqa %xmm10,(%rsp)
  423f37:	89 ee                	mov    %ebp,%esi
  423f39:	31 c5                	xor    %eax,%ebp
  423f3b:	03 5c 24 14          	add    0x14(%rsp),%ebx
  423f3f:	21 c6                	and    %eax,%esi
  423f41:	c5 f1 72 f1 02       	vpslld $0x2,%xmm1,%xmm1
  423f46:	21 ef                	and    %ebp,%edi
  423f48:	0f ac d2 07          	shrd   $0x7,%edx,%edx
  423f4c:	01 f3                	add    %esi,%ebx
  423f4e:	89 ce                	mov    %ecx,%esi
  423f50:	0f a4 c9 05          	shld   $0x5,%ecx,%ecx
  423f54:	01 fb                	add    %edi,%ebx
  423f56:	31 c5                	xor    %eax,%ebp
  423f58:	01 cb                	add    %ecx,%ebx
  423f5a:	c4 c1 71 eb c9       	vpor   %xmm9,%xmm1,%xmm1
  423f5f:	89 d7                	mov    %edx,%edi
  423f61:	31 ea                	xor    %ebp,%edx
  423f63:	c5 79 6f d1          	vmovdqa %xmm1,%xmm10
  423f67:	03 44 24 18          	add    0x18(%rsp),%eax
  423f6b:	21 ef                	and    %ebp,%edi
  423f6d:	21 d6                	and    %edx,%esi
  423f6f:	0f ac c9 07          	shrd   $0x7,%ecx,%ecx
  423f73:	01 f8                	add    %edi,%eax
  423f75:	89 df                	mov    %ebx,%edi
  423f77:	0f a4 db 05          	shld   $0x5,%ebx,%ebx
  423f7b:	01 f0                	add    %esi,%eax
  423f7d:	31 ea                	xor    %ebp,%edx
  423f7f:	01 d8                	add    %ebx,%eax
  423f81:	89 ce                	mov    %ecx,%esi
  423f83:	31 d1                	xor    %edx,%ecx
  423f85:	03 6c 24 1c          	add    0x1c(%rsp),%ebp
  423f89:	21 d6                	and    %edx,%esi
  423f8b:	21 cf                	and    %ecx,%edi
  423f8d:	0f ac db 07          	shrd   $0x7,%ebx,%ebx
  423f91:	01 f5                	add    %esi,%ebp
  423f93:	89 c6                	mov    %eax,%esi
  423f95:	0f a4 c0 05          	shld   $0x5,%eax,%eax
  423f99:	01 fd                	add    %edi,%ebp
  423f9b:	31 d1                	xor    %edx,%ecx
  423f9d:	01 c5                	add    %eax,%ebp
  423f9f:	c4 63 71 0f d0 08    	vpalignr $0x8,%xmm0,%xmm1,%xmm10
  423fa5:	c5 e9 ef d6          	vpxor  %xmm6,%xmm2,%xmm2
  423fa9:	89 df                	mov    %ebx,%edi
  423fab:	31 cb                	xor    %ecx,%ebx
  423fad:	03 54 24 20          	add    0x20(%rsp),%edx
  423fb1:	21 cf                	and    %ecx,%edi
  423fb3:	c5 e9 ef d3          	vpxor  %xmm3,%xmm2,%xmm2
  423fb7:	21 de                	and    %ebx,%esi
  423fb9:	0f ac c0 07          	shrd   $0x7,%eax,%eax
  423fbd:	c4 41 79 6f c8       	vmovdqa %xmm8,%xmm9
  423fc2:	c5 39 fe c1          	vpaddd %xmm1,%xmm8,%xmm8
  423fc6:	01 fa                	add    %edi,%edx
  423fc8:	89 ef                	mov    %ebp,%edi
  423fca:	c4 c1 69 ef d2       	vpxor  %xmm10,%xmm2,%xmm2
  423fcf:	0f a4 ed 05          	shld   $0x5,%ebp,%ebp
  423fd3:	01 f2                	add    %esi,%edx
  423fd5:	31 cb                	xor    %ecx,%ebx
  423fd7:	01 ea                	add    %ebp,%edx
  423fd9:	c5 a9 72 d2 1e       	vpsrld $0x1e,%xmm2,%xmm10
  423fde:	c5 79 7f 44 24 10    	vmovdqa %xmm8,0x10(%rsp)
  423fe4:	89 c6                	mov    %eax,%esi
  423fe6:	31 d8                	xor    %ebx,%eax
  423fe8:	03 4c 24 24          	add    0x24(%rsp),%ecx
  423fec:	21 de                	and    %ebx,%esi
  423fee:	c5 e9 72 f2 02       	vpslld $0x2,%xmm2,%xmm2
  423ff3:	21 c7                	and    %eax,%edi
  423ff5:	0f ac ed 07          	shrd   $0x7,%ebp,%ebp
  423ff9:	01 f1                	add    %esi,%ecx
  423ffb:	89 d6                	mov    %edx,%esi
  423ffd:	0f a4 d2 05          	shld   $0x5,%edx,%edx
  424001:	01 f9                	add    %edi,%ecx
  424003:	31 d8                	xor    %ebx,%eax
  424005:	01 d1                	add    %edx,%ecx
  424007:	c4 c1 69 eb d2       	vpor   %xmm10,%xmm2,%xmm2
  42400c:	89 ef                	mov    %ebp,%edi
  42400e:	31 c5                	xor    %eax,%ebp
  424010:	c5 79 6f c2          	vmovdqa %xmm2,%xmm8
  424014:	03 5c 24 28          	add    0x28(%rsp),%ebx
  424018:	21 c7                	and    %eax,%edi
  42401a:	21 ee                	and    %ebp,%esi
  42401c:	0f ac d2 07          	shrd   $0x7,%edx,%edx
  424020:	01 fb                	add    %edi,%ebx
  424022:	89 cf                	mov    %ecx,%edi
  424024:	0f a4 c9 05          	shld   $0x5,%ecx,%ecx
  424028:	01 f3                	add    %esi,%ebx
  42402a:	31 c5                	xor    %eax,%ebp
  42402c:	01 cb                	add    %ecx,%ebx
  42402e:	89 d6                	mov    %edx,%esi
  424030:	31 ea                	xor    %ebp,%edx
  424032:	03 44 24 2c          	add    0x2c(%rsp),%eax
  424036:	21 ee                	and    %ebp,%esi
  424038:	21 d7                	and    %edx,%edi
  42403a:	0f ac c9 07          	shrd   $0x7,%ecx,%ecx
  42403e:	01 f0                	add    %esi,%eax
  424040:	89 de                	mov    %ebx,%esi
  424042:	0f a4 db 05          	shld   $0x5,%ebx,%ebx
  424046:	01 f8                	add    %edi,%eax
  424048:	31 ea                	xor    %ebp,%edx
  42404a:	01 d8                	add    %ebx,%eax
  42404c:	c4 63 69 0f c1 08    	vpalignr $0x8,%xmm1,%xmm2,%xmm8
  424052:	c5 e1 ef df          	vpxor  %xmm7,%xmm3,%xmm3
  424056:	03 6c 24 30          	add    0x30(%rsp),%ebp
  42405a:	31 d6                	xor    %edx,%esi
  42405c:	89 c7                	mov    %eax,%edi
  42405e:	0f a4 c0 05          	shld   $0x5,%eax,%eax
  424062:	c5 e1 ef dc          	vpxor  %xmm4,%xmm3,%xmm3
  424066:	31 ce                	xor    %ecx,%esi
  424068:	01 c5                	add    %eax,%ebp
  42406a:	c4 41 79 6f d1       	vmovdqa %xmm9,%xmm10
  42406f:	c5 31 fe ca          	vpaddd %xmm2,%xmm9,%xmm9
  424073:	0f ac db 07          	shrd   $0x7,%ebx,%ebx
  424077:	01 f5                	add    %esi,%ebp
  424079:	c4 c1 61 ef d8       	vpxor  %xmm8,%xmm3,%xmm3
  42407e:	03 54 24 34          	add    0x34(%rsp),%edx
  424082:	31 cf                	xor    %ecx,%edi
  424084:	89 ee                	mov    %ebp,%esi
  424086:	0f a4 ed 05          	shld   $0x5,%ebp,%ebp
  42408a:	c5 b9 72 d3 1e       	vpsrld $0x1e,%xmm3,%xmm8
  42408f:	c5 79 7f 4c 24 20    	vmovdqa %xmm9,0x20(%rsp)
  424095:	31 df                	xor    %ebx,%edi
  424097:	01 ea                	add    %ebp,%edx
  424099:	0f ac c0 07          	shrd   $0x7,%eax,%eax
  42409d:	01 fa                	add    %edi,%edx
  42409f:	c5 e1 72 f3 02       	vpslld $0x2,%xmm3,%xmm3
  4240a4:	03 4c 24 38          	add    0x38(%rsp),%ecx
  4240a8:	31 de                	xor    %ebx,%esi
  4240aa:	89 d7                	mov    %edx,%edi
  4240ac:	0f a4 d2 05          	shld   $0x5,%edx,%edx
  4240b0:	31 c6                	xor    %eax,%esi
  4240b2:	01 d1                	add    %edx,%ecx
  4240b4:	0f ac ed 07          	shrd   $0x7,%ebp,%ebp
  4240b8:	01 f1                	add    %esi,%ecx
  4240ba:	c4 c1 61 eb d8       	vpor   %xmm8,%xmm3,%xmm3
  4240bf:	03 5c 24 3c          	add    0x3c(%rsp),%ebx
  4240c3:	31 c7                	xor    %eax,%edi
  4240c5:	89 ce                	mov    %ecx,%esi
  4240c7:	0f a4 c9 05          	shld   $0x5,%ecx,%ecx
  4240cb:	31 ef                	xor    %ebp,%edi
  4240cd:	01 cb                	add    %ecx,%ebx
  4240cf:	0f ac d2 07          	shrd   $0x7,%edx,%edx
  4240d3:	01 fb                	add    %edi,%ebx
  4240d5:	03 04 24             	add    (%rsp),%eax
  4240d8:	c5 29 fe d3          	vpaddd %xmm3,%xmm10,%xmm10
  4240dc:	31 ee                	xor    %ebp,%esi
  4240de:	89 df                	mov    %ebx,%edi
  4240e0:	0f a4 db 05          	shld   $0x5,%ebx,%ebx
  4240e4:	31 d6                	xor    %edx,%esi
  4240e6:	66 44 0f 7f 54 24 30 	movdqa %xmm10,0x30(%rsp)
  4240ed:	01 d8                	add    %ebx,%eax
  4240ef:	0f ac c9 07          	shrd   $0x7,%ecx,%ecx
  4240f3:	01 f0                	add    %esi,%eax
  4240f5:	03 6c 24 04          	add    0x4(%rsp),%ebp
  4240f9:	31 d7                	xor    %edx,%edi
  4240fb:	89 c6                	mov    %eax,%esi
  4240fd:	0f a4 c0 05          	shld   $0x5,%eax,%eax
  424101:	31 cf                	xor    %ecx,%edi
  424103:	01 c5                	add    %eax,%ebp
  424105:	0f ac db 07          	shrd   $0x7,%ebx,%ebx
  424109:	01 fd                	add    %edi,%ebp
  42410b:	03 54 24 08          	add    0x8(%rsp),%edx
  42410f:	31 ce                	xor    %ecx,%esi
  424111:	89 ef                	mov    %ebp,%edi
  424113:	0f a4 ed 05          	shld   $0x5,%ebp,%ebp
  424117:	31 de                	xor    %ebx,%esi
  424119:	01 ea                	add    %ebp,%edx
  42411b:	0f ac c0 07          	shrd   $0x7,%eax,%eax
  42411f:	01 f2                	add    %esi,%edx
  424121:	03 4c 24 0c          	add    0xc(%rsp),%ecx
  424125:	31 df                	xor    %ebx,%edi
  424127:	89 d6                	mov    %edx,%esi
  424129:	0f a4 d2 05          	shld   $0x5,%edx,%edx
  42412d:	31 c7                	xor    %eax,%edi
  42412f:	01 d1                	add    %edx,%ecx
  424131:	0f ac ed 07          	shrd   $0x7,%ebp,%ebp
  424135:	01 f9                	add    %edi,%ecx
  424137:	4d 39 d1             	cmp    %r10,%r9
  42413a:	0f 84 90 01 00 00    	je     4242d0 <sha1_block_data_order_avx+0xcc0>
  424140:	c4 c1 79 6f 73 40    	vmovdqa 0x40(%r11),%xmm6
  424146:	c4 41 79 6f 0b       	vmovdqa (%r11),%xmm9
  42414b:	c4 c1 7a 6f 01       	vmovdqu (%r9),%xmm0
  424150:	c4 c1 7a 6f 49 10    	vmovdqu 0x10(%r9),%xmm1
  424156:	c4 c1 7a 6f 51 20    	vmovdqu 0x20(%r9),%xmm2
  42415c:	c4 c1 7a 6f 59 30    	vmovdqu 0x30(%r9),%xmm3
  424162:	c4 e2 79 00 c6       	vpshufb %xmm6,%xmm0,%xmm0
  424167:	49 83 c1 40          	add    $0x40,%r9
  42416b:	03 5c 24 10          	add    0x10(%rsp),%ebx
  42416f:	31 c6                	xor    %eax,%esi
  424171:	c4 e2 71 00 ce       	vpshufb %xmm6,%xmm1,%xmm1
  424176:	89 cf                	mov    %ecx,%edi
  424178:	0f a4 c9 05          	shld   $0x5,%ecx,%ecx
  42417c:	c4 c1 79 fe e1       	vpaddd %xmm9,%xmm0,%xmm4
  424181:	31 ee                	xor    %ebp,%esi
  424183:	01 cb                	add    %ecx,%ebx
  424185:	0f ac d2 07          	shrd   $0x7,%edx,%edx
  424189:	01 f3                	add    %esi,%ebx
  42418b:	c5 f9 7f 24 24       	vmovdqa %xmm4,(%rsp)
  424190:	03 44 24 14          	add    0x14(%rsp),%eax
  424194:	31 ef                	xor    %ebp,%edi
  424196:	89 de                	mov    %ebx,%esi
  424198:	0f a4 db 05          	shld   $0x5,%ebx,%ebx
  42419c:	31 d7                	xor    %edx,%edi
  42419e:	01 d8                	add    %ebx,%eax
  4241a0:	0f ac c9 07          	shrd   $0x7,%ecx,%ecx
  4241a4:	01 f8                	add    %edi,%eax
  4241a6:	03 6c 24 18          	add    0x18(%rsp),%ebp
  4241aa:	31 d6                	xor    %edx,%esi
  4241ac:	89 c7                	mov    %eax,%edi
  4241ae:	0f a4 c0 05          	shld   $0x5,%eax,%eax
  4241b2:	31 ce                	xor    %ecx,%esi
  4241b4:	01 c5                	add    %eax,%ebp
  4241b6:	0f ac db 07          	shrd   $0x7,%ebx,%ebx
  4241ba:	01 f5                	add    %esi,%ebp
  4241bc:	03 54 24 1c          	add    0x1c(%rsp),%edx
  4241c0:	31 cf                	xor    %ecx,%edi
  4241c2:	89 ee                	mov    %ebp,%esi
  4241c4:	0f a4 ed 05          	shld   $0x5,%ebp,%ebp
  4241c8:	31 df                	xor    %ebx,%edi
  4241ca:	01 ea                	add    %ebp,%edx
  4241cc:	0f ac c0 07          	shrd   $0x7,%eax,%eax
  4241d0:	01 fa                	add    %edi,%edx
  4241d2:	03 4c 24 20          	add    0x20(%rsp),%ecx
  4241d6:	31 de                	xor    %ebx,%esi
  4241d8:	c4 e2 69 00 d6       	vpshufb %xmm6,%xmm2,%xmm2
  4241dd:	89 d7                	mov    %edx,%edi
  4241df:	0f a4 d2 05          	shld   $0x5,%edx,%edx
  4241e3:	c4 c1 71 fe e9       	vpaddd %xmm9,%xmm1,%xmm5
  4241e8:	31 c6                	xor    %eax,%esi
  4241ea:	01 d1                	add    %edx,%ecx
  4241ec:	0f ac ed 07          	shrd   $0x7,%ebp,%ebp
  4241f0:	01 f1                	add    %esi,%ecx
  4241f2:	c5 f9 7f 6c 24 10    	vmovdqa %xmm5,0x10(%rsp)
  4241f8:	03 5c 24 24          	add    0x24(%rsp),%ebx
  4241fc:	31 c7                	xor    %eax,%edi
  4241fe:	89 ce                	mov    %ecx,%esi
  424200:	0f a4 c9 05          	shld   $0x5,%ecx,%ecx
  424204:	31 ef                	xor    %ebp,%edi
  424206:	01 cb                	add    %ecx,%ebx
  424208:	0f ac d2 07          	shrd   $0x7,%edx,%edx
  42420c:	01 fb                	add    %edi,%ebx
  42420e:	03 44 24 28          	add    0x28(%rsp),%eax
  424212:	31 ee                	xor    %ebp,%esi
  424214:	89 df                	mov    %ebx,%edi
  424216:	0f a4 db 05          	shld   $0x5,%ebx,%ebx
  42421a:	31 d6                	xor    %edx,%esi
  42421c:	01 d8                	add    %ebx,%eax
  42421e:	0f ac c9 07          	shrd   $0x7,%ecx,%ecx
  424222:	01 f0                	add    %esi,%eax
  424224:	03 6c 24 2c          	add    0x2c(%rsp),%ebp
  424228:	31 d7                	xor    %edx,%edi
  42422a:	89 c6                	mov    %eax,%esi
  42422c:	0f a4 c0 05          	shld   $0x5,%eax,%eax
  424230:	31 cf                	xor    %ecx,%edi
  424232:	01 c5                	add    %eax,%ebp
  424234:	0f ac db 07          	shrd   $0x7,%ebx,%ebx
  424238:	01 fd                	add    %edi,%ebp
  42423a:	03 54 24 30          	add    0x30(%rsp),%edx
  42423e:	31 ce                	xor    %ecx,%esi
  424240:	c4 e2 61 00 de       	vpshufb %xmm6,%xmm3,%xmm3
  424245:	89 ef                	mov    %ebp,%edi
  424247:	0f a4 ed 05          	shld   $0x5,%ebp,%ebp
  42424b:	c4 c1 69 fe f1       	vpaddd %xmm9,%xmm2,%xmm6
  424250:	31 de                	xor    %ebx,%esi
  424252:	01 ea                	add    %ebp,%edx
  424254:	0f ac c0 07          	shrd   $0x7,%eax,%eax
  424258:	01 f2                	add    %esi,%edx
  42425a:	c5 f9 7f 74 24 20    	vmovdqa %xmm6,0x20(%rsp)
  424260:	03 4c 24 34          	add    0x34(%rsp),%ecx
  424264:	31 df                	xor    %ebx,%edi
  424266:	89 d6                	mov    %edx,%esi
  424268:	0f a4 d2 05          	shld   $0x5,%edx,%edx
  42426c:	31 c7                	xor    %eax,%edi
  42426e:	01 d1                	add    %edx,%ecx
  424270:	0f ac ed 07          	shrd   $0x7,%ebp,%ebp
  424274:	01 f9                	add    %edi,%ecx
  424276:	03 5c 24 38          	add    0x38(%rsp),%ebx
  42427a:	31 c6                	xor    %eax,%esi
  42427c:	89 cf                	mov    %ecx,%edi
  42427e:	0f a4 c9 05          	shld   $0x5,%ecx,%ecx
  424282:	31 ee                	xor    %ebp,%esi
  424284:	01 cb                	add    %ecx,%ebx
  424286:	0f ac d2 07          	shrd   $0x7,%edx,%edx
  42428a:	01 f3                	add    %esi,%ebx
  42428c:	03 44 24 3c          	add    0x3c(%rsp),%eax
  424290:	31 ef                	xor    %ebp,%edi
  424292:	89 de                	mov    %ebx,%esi
  424294:	0f a4 db 05          	shld   $0x5,%ebx,%ebx
  424298:	31 d7                	xor    %edx,%edi
  42429a:	01 d8                	add    %ebx,%eax
  42429c:	0f ac c9 07          	shrd   $0x7,%ecx,%ecx
  4242a0:	01 f8                	add    %edi,%eax
  4242a2:	41 03 00             	add    (%r8),%eax
  4242a5:	41 03 70 04          	add    0x4(%r8),%esi
  4242a9:	41 03 48 08          	add    0x8(%r8),%ecx
  4242ad:	41 03 50 0c          	add    0xc(%r8),%edx
  4242b1:	41 89 00             	mov    %eax,(%r8)
  4242b4:	41 03 68 10          	add    0x10(%r8),%ebp
  4242b8:	41 89 70 04          	mov    %esi,0x4(%r8)
  4242bc:	89 f3                	mov    %esi,%ebx
  4242be:	41 89 48 08          	mov    %ecx,0x8(%r8)
  4242c2:	41 89 50 0c          	mov    %edx,0xc(%r8)
  4242c6:	41 89 68 10          	mov    %ebp,0x10(%r8)
  4242ca:	e9 e1 f3 ff ff       	jmpq   4236b0 <sha1_block_data_order_avx+0xa0>
  4242cf:	90                   	nop
  4242d0:	03 5c 24 10          	add    0x10(%rsp),%ebx
  4242d4:	31 c6                	xor    %eax,%esi
  4242d6:	89 cf                	mov    %ecx,%edi
  4242d8:	0f a4 c9 05          	shld   $0x5,%ecx,%ecx
  4242dc:	31 ee                	xor    %ebp,%esi
  4242de:	01 cb                	add    %ecx,%ebx
  4242e0:	0f ac d2 07          	shrd   $0x7,%edx,%edx
  4242e4:	01 f3                	add    %esi,%ebx
  4242e6:	03 44 24 14          	add    0x14(%rsp),%eax
  4242ea:	31 ef                	xor    %ebp,%edi
  4242ec:	89 de                	mov    %ebx,%esi
  4242ee:	0f a4 db 05          	shld   $0x5,%ebx,%ebx
  4242f2:	31 d7                	xor    %edx,%edi
  4242f4:	01 d8                	add    %ebx,%eax
  4242f6:	0f ac c9 07          	shrd   $0x7,%ecx,%ecx
  4242fa:	01 f8                	add    %edi,%eax
  4242fc:	03 6c 24 18          	add    0x18(%rsp),%ebp
  424300:	31 d6                	xor    %edx,%esi
  424302:	89 c7                	mov    %eax,%edi
  424304:	0f a4 c0 05          	shld   $0x5,%eax,%eax
  424308:	31 ce                	xor    %ecx,%esi
  42430a:	01 c5                	add    %eax,%ebp
  42430c:	0f ac db 07          	shrd   $0x7,%ebx,%ebx
  424310:	01 f5                	add    %esi,%ebp
  424312:	03 54 24 1c          	add    0x1c(%rsp),%edx
  424316:	31 cf                	xor    %ecx,%edi
  424318:	89 ee                	mov    %ebp,%esi
  42431a:	0f a4 ed 05          	shld   $0x5,%ebp,%ebp
  42431e:	31 df                	xor    %ebx,%edi
  424320:	01 ea                	add    %ebp,%edx
  424322:	0f ac c0 07          	shrd   $0x7,%eax,%eax
  424326:	01 fa                	add    %edi,%edx
  424328:	03 4c 24 20          	add    0x20(%rsp),%ecx
  42432c:	31 de                	xor    %ebx,%esi
  42432e:	89 d7                	mov    %edx,%edi
  424330:	0f a4 d2 05          	shld   $0x5,%edx,%edx
  424334:	31 c6                	xor    %eax,%esi
  424336:	01 d1                	add    %edx,%ecx
  424338:	0f ac ed 07          	shrd   $0x7,%ebp,%ebp
  42433c:	01 f1                	add    %esi,%ecx
  42433e:	03 5c 24 24          	add    0x24(%rsp),%ebx
  424342:	31 c7                	xor    %eax,%edi
  424344:	89 ce                	mov    %ecx,%esi
  424346:	0f a4 c9 05          	shld   $0x5,%ecx,%ecx
  42434a:	31 ef                	xor    %ebp,%edi
  42434c:	01 cb                	add    %ecx,%ebx
  42434e:	0f ac d2 07          	shrd   $0x7,%edx,%edx
  424352:	01 fb                	add    %edi,%ebx
  424354:	03 44 24 28          	add    0x28(%rsp),%eax
  424358:	31 ee                	xor    %ebp,%esi
  42435a:	89 df                	mov    %ebx,%edi
  42435c:	0f a4 db 05          	shld   $0x5,%ebx,%ebx
  424360:	31 d6                	xor    %edx,%esi
  424362:	01 d8                	add    %ebx,%eax
  424364:	0f ac c9 07          	shrd   $0x7,%ecx,%ecx
  424368:	01 f0                	add    %esi,%eax
  42436a:	03 6c 24 2c          	add    0x2c(%rsp),%ebp
  42436e:	31 d7                	xor    %edx,%edi
  424370:	89 c6                	mov    %eax,%esi
  424372:	0f a4 c0 05          	shld   $0x5,%eax,%eax
  424376:	31 cf                	xor    %ecx,%edi
  424378:	01 c5                	add    %eax,%ebp
  42437a:	0f ac db 07          	shrd   $0x7,%ebx,%ebx
  42437e:	01 fd                	add    %edi,%ebp
  424380:	03 54 24 30          	add    0x30(%rsp),%edx
  424384:	31 ce                	xor    %ecx,%esi
  424386:	89 ef                	mov    %ebp,%edi
  424388:	0f a4 ed 05          	shld   $0x5,%ebp,%ebp
  42438c:	31 de                	xor    %ebx,%esi
  42438e:	01 ea                	add    %ebp,%edx
  424390:	0f ac c0 07          	shrd   $0x7,%eax,%eax
  424394:	01 f2                	add    %esi,%edx
  424396:	03 4c 24 34          	add    0x34(%rsp),%ecx
  42439a:	31 df                	xor    %ebx,%edi
  42439c:	89 d6                	mov    %edx,%esi
  42439e:	0f a4 d2 05          	shld   $0x5,%edx,%edx
  4243a2:	31 c7                	xor    %eax,%edi
  4243a4:	01 d1                	add    %edx,%ecx
  4243a6:	0f ac ed 07          	shrd   $0x7,%ebp,%ebp
  4243aa:	01 f9                	add    %edi,%ecx
  4243ac:	03 5c 24 38          	add    0x38(%rsp),%ebx
  4243b0:	31 c6                	xor    %eax,%esi
  4243b2:	89 cf                	mov    %ecx,%edi
  4243b4:	0f a4 c9 05          	shld   $0x5,%ecx,%ecx
  4243b8:	31 ee                	xor    %ebp,%esi
  4243ba:	01 cb                	add    %ecx,%ebx
  4243bc:	0f ac d2 07          	shrd   $0x7,%edx,%edx
  4243c0:	01 f3                	add    %esi,%ebx
  4243c2:	03 44 24 3c          	add    0x3c(%rsp),%eax
  4243c6:	31 ef                	xor    %ebp,%edi
  4243c8:	89 de                	mov    %ebx,%esi
  4243ca:	0f a4 db 05          	shld   $0x5,%ebx,%ebx
  4243ce:	31 d7                	xor    %edx,%edi
  4243d0:	01 d8                	add    %ebx,%eax
  4243d2:	0f ac c9 07          	shrd   $0x7,%ecx,%ecx
  4243d6:	01 f8                	add    %edi,%eax
  4243d8:	c5 fc 77             	vzeroall 
  4243db:	41 03 00             	add    (%r8),%eax
  4243de:	41 03 70 04          	add    0x4(%r8),%esi
  4243e2:	41 03 48 08          	add    0x8(%r8),%ecx
  4243e6:	41 89 00             	mov    %eax,(%r8)
  4243e9:	41 03 50 0c          	add    0xc(%r8),%edx
  4243ed:	41 89 70 04          	mov    %esi,0x4(%r8)
  4243f1:	41 03 68 10          	add    0x10(%r8),%ebp
  4243f5:	41 89 48 08          	mov    %ecx,0x8(%r8)
  4243f9:	41 89 50 0c          	mov    %edx,0xc(%r8)
  4243fd:	41 89 68 10          	mov    %ebp,0x10(%r8)
  424401:	48 8d 74 24 40       	lea    0x40(%rsp),%rsi
  424406:	4c 8b 26             	mov    (%rsi),%r12
  424409:	48 8b 6e 08          	mov    0x8(%rsi),%rbp
  42440d:	48 8b 5e 10          	mov    0x10(%rsi),%rbx
  424411:	48 8d 66 18          	lea    0x18(%rsi),%rsp
  424415:	f3 c3                	repz retq 
  424417:	90                   	nop
  424418:	90                   	nop
  424419:	90                   	nop
  42441a:	90                   	nop
  42441b:	90                   	nop
  42441c:	90                   	nop
  42441d:	90                   	nop
  42441e:	90                   	nop
  42441f:	90                   	nop
  424420:	90                   	nop
  424421:	90                   	nop
  424422:	90                   	nop
  424423:	90                   	nop
  424424:	90                   	nop
  424425:	90                   	nop
  424426:	90                   	nop
  424427:	90                   	nop
  424428:	90                   	nop
  424429:	90                   	nop
  42442a:	90                   	nop
  42442b:	90                   	nop
  42442c:	90                   	nop
  42442d:	90                   	nop
  42442e:	90                   	nop
  42442f:	90                   	nop
  424430:	90                   	nop
  424431:	90                   	nop
  424432:	90                   	nop
  424433:	90                   	nop
  424434:	90                   	nop
  424435:	90                   	nop
  424436:	90                   	nop
  424437:	90                   	nop
  424438:	90                   	nop
  424439:	90                   	nop
  42443a:	90                   	nop
  42443b:	90                   	nop
  42443c:	90                   	nop
  42443d:	90                   	nop
  42443e:	90                   	nop
  42443f:	90                   	nop

0000000000424440 <K_XX_XX>:
  424440:	99                   	cltd   
  424441:	79 82                	jns    4243c5 <sha1_block_data_order_avx+0xdb5>
  424443:	5a                   	pop    %rdx
  424444:	99                   	cltd   
  424445:	79 82                	jns    4243c9 <sha1_block_data_order_avx+0xdb9>
  424447:	5a                   	pop    %rdx
  424448:	99                   	cltd   
  424449:	79 82                	jns    4243cd <sha1_block_data_order_avx+0xdbd>
  42444b:	5a                   	pop    %rdx
  42444c:	99                   	cltd   
  42444d:	79 82                	jns    4243d1 <sha1_block_data_order_avx+0xdc1>
  42444f:	5a                   	pop    %rdx
  424450:	a1 eb d9 6e a1 eb d9 	movabs 0xa16ed9eba16ed9eb,%eax
  424457:	6e a1 
  424459:	eb d9                	jmp    424434 <sha1_block_data_order_avx+0xe24>
  42445b:	6e                   	outsb  %ds:(%rsi),(%dx)
  42445c:	a1 eb d9 6e dc bc 1b 	movabs 0xdc8f1bbcdc6ed9eb,%eax
  424463:	8f dc 
  424465:	bc 1b 8f dc bc       	mov    $0xbcdc8f1b,%esp
  42446a:	1b 8f dc bc 1b 8f    	sbb    -0x70e44324(%rdi),%ecx
  424470:	d6                   	(bad)  
  424471:	c1 62 ca d6          	shll   $0xd6,-0x36(%rdx)
  424475:	c1 62 ca d6          	shll   $0xd6,-0x36(%rdx)
  424479:	c1 62 ca d6          	shll   $0xd6,-0x36(%rdx)
  42447d:	c1 62 ca 03          	shll   $0x3,-0x36(%rdx)
  424481:	02 01                	add    (%rcx),%al
  424483:	00 07                	add    %al,(%rdi)
  424485:	06                   	(bad)  
  424486:	05 04 0b 0a 09       	add    $0x90a0b04,%eax
  42448b:	08 0f                	or     %cl,(%rdi)
  42448d:	0e                   	(bad)  
  42448e:	0d 0c 53 48 41       	or     $0x4148530c,%eax
  424493:	31 20                	xor    %esp,(%rax)
  424495:	62                   	(bad)  
  424496:	6c                   	insb   (%dx),%es:(%rdi)
  424497:	6f                   	outsl  %ds:(%rsi),(%dx)
  424498:	63 6b 20             	movslq 0x20(%rbx),%ebp
  42449b:	74 72                	je     42450f <CRYPTO_get_new_lockid+0xf>
  42449d:	61                   	(bad)  
  42449e:	6e                   	outsb  %ds:(%rsi),(%dx)
  42449f:	73 66                	jae    424507 <CRYPTO_get_new_lockid+0x7>
  4244a1:	6f                   	outsl  %ds:(%rsi),(%dx)
  4244a2:	72 6d                	jb     424511 <CRYPTO_get_new_lockid+0x11>
  4244a4:	20 66 6f             	and    %ah,0x6f(%rsi)
  4244a7:	72 20                	jb     4244c9 <K_XX_XX+0x89>
  4244a9:	78 38                	js     4244e3 <K_XX_XX+0xa3>
  4244ab:	36 5f                	ss pop %rdi
  4244ad:	36 34 2c             	ss xor $0x2c,%al
  4244b0:	20 43 52             	and    %al,0x52(%rbx)
  4244b3:	59                   	pop    %rcx
  4244b4:	50                   	push   %rax
  4244b5:	54                   	push   %rsp
  4244b6:	4f                   	rex.WRXB
  4244b7:	47                   	rex.RXB
  4244b8:	41                   	rex.B
  4244b9:	4d 53                	rex.WRB push %r11
  4244bb:	20 62 79             	and    %ah,0x79(%rdx)
  4244be:	20 3c 61             	and    %bh,(%rcx,%riz,2)
  4244c1:	70 70                	jo     424533 <CRYPTO_get_new_lockid+0x33>
  4244c3:	72 6f                	jb     424534 <CRYPTO_get_new_lockid+0x34>
  4244c5:	40 6f                	rex outsl %ds:(%rsi),(%dx)
  4244c7:	70 65                	jo     42452e <CRYPTO_get_new_lockid+0x2e>
  4244c9:	6e                   	outsb  %ds:(%rsi),(%dx)
  4244ca:	73 73                	jae    42453f <CRYPTO_get_new_lockid+0x3f>
  4244cc:	6c                   	insb   (%dx),%es:(%rdi)
  4244cd:	2e 6f                	outsl  %cs:(%rsi),(%dx)
  4244cf:	72 67                	jb     424538 <CRYPTO_get_new_lockid+0x38>
  4244d1:	3e 00 90 90 90 90 90 	add    %dl,%ds:-0x6f6f6f70(%rax)
  4244d8:	90                   	nop
  4244d9:	90                   	nop
  4244da:	90                   	nop
  4244db:	90                   	nop
  4244dc:	90                   	nop
  4244dd:	90                   	nop
  4244de:	90                   	nop
  4244df:	90                   	nop
  4244e0:	90                   	nop
  4244e1:	90                   	nop
  4244e2:	90                   	nop
  4244e3:	90                   	nop
  4244e4:	90                   	nop
  4244e5:	90                   	nop
  4244e6:	90                   	nop
  4244e7:	90                   	nop
  4244e8:	90                   	nop
  4244e9:	90                   	nop
  4244ea:	90                   	nop
  4244eb:	90                   	nop
  4244ec:	90                   	nop
  4244ed:	90                   	nop
  4244ee:	90                   	nop
  4244ef:	90                   	nop
  4244f0:	90                   	nop
  4244f1:	90                   	nop
  4244f2:	90                   	nop
  4244f3:	90                   	nop
  4244f4:	90                   	nop
  4244f5:	90                   	nop
  4244f6:	90                   	nop
  4244f7:	90                   	nop
  4244f8:	90                   	nop
  4244f9:	90                   	nop
  4244fa:	90                   	nop
  4244fb:	90                   	nop
  4244fc:	90                   	nop
  4244fd:	90                   	nop
  4244fe:	90                   	nop
  4244ff:	90                   	nop

0000000000424500 <CRYPTO_get_new_lockid>:
  424500:	53                   	push   %rbx
  424501:	48 83 ec 10          	sub    $0x10,%rsp
  424505:	48 83 3d 1b 48 23 00 	cmpq   $0x0,0x23481b(%rip)        # 658d28 <app_locks>
  42450c:	00 
  42450d:	74 41                	je     424550 <CRYPTO_get_new_lockid+0x50>
  42450f:	e8 4c 16 00 00       	callq  425b60 <BUF_strdup>
  424514:	48 85 c0             	test   %rax,%rax
  424517:	48 89 c3             	mov    %rax,%rbx
  42451a:	0f 84 80 00 00 00    	je     4245a0 <CRYPTO_get_new_lockid+0xa0>
  424520:	48 8b 3d 01 48 23 00 	mov    0x234801(%rip),%rdi        # 658d28 <app_locks>
  424527:	48 89 c6             	mov    %rax,%rsi
  42452a:	e8 a1 1f 00 00       	callq  4264d0 <sk_push>
  42452f:	89 c2                	mov    %eax,%edx
  424531:	8d 40 29             	lea    0x29(%rax),%eax
  424534:	85 d2                	test   %edx,%edx
  424536:	74 08                	je     424540 <CRYPTO_get_new_lockid+0x40>
  424538:	48 83 c4 10          	add    $0x10,%rsp
  42453c:	5b                   	pop    %rbx
  42453d:	c3                   	retq   
  42453e:	66 90                	xchg   %ax,%ax
  424540:	48 89 df             	mov    %rbx,%rdi
  424543:	e8 18 12 00 00       	callq  425760 <CRYPTO_free>
  424548:	48 83 c4 10          	add    $0x10,%rsp
  42454c:	31 c0                	xor    %eax,%eax
  42454e:	5b                   	pop    %rbx
  42454f:	c3                   	retq   
  424550:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  424555:	e8 46 1a 00 00       	callq  425fa0 <sk_new_null>
  42455a:	48 85 c0             	test   %rax,%rax
  42455d:	48 89 05 c4 47 23 00 	mov    %rax,0x2347c4(%rip)        # 658d28 <app_locks>
  424564:	41 b8 d7 00 00 00    	mov    $0xd7,%r8d
  42456a:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  42456f:	75 9e                	jne    42450f <CRYPTO_get_new_lockid+0xf>
  424571:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  424578:	b9 68 df 43 00       	mov    $0x43df68,%ecx
  42457d:	ba 41 00 00 00       	mov    $0x41,%edx
  424582:	be 65 00 00 00       	mov    $0x65,%esi
  424587:	bf 0f 00 00 00       	mov    $0xf,%edi
  42458c:	e8 bf 3d 00 00       	callq  428350 <ERR_put_error>
  424591:	48 83 c4 10          	add    $0x10,%rsp
  424595:	31 c0                	xor    %eax,%eax
  424597:	5b                   	pop    %rbx
  424598:	c3                   	retq   
  424599:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  4245a0:	41 b8 dc 00 00 00    	mov    $0xdc,%r8d
  4245a6:	eb d0                	jmp    424578 <CRYPTO_get_new_lockid+0x78>
  4245a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4245af:	00 

00000000004245b0 <CRYPTO_num_locks>:
  4245b0:	b8 29 00 00 00       	mov    $0x29,%eax
  4245b5:	c3                   	retq   
  4245b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4245bd:	00 00 00 

00000000004245c0 <CRYPTO_get_new_dynlockid>:
  4245c0:	55                   	push   %rbp
  4245c1:	53                   	push   %rbx
  4245c2:	48 83 ec 08          	sub    $0x8,%rsp
  4245c6:	48 83 3d 2a 47 23 00 	cmpq   $0x0,0x23472a(%rip)        # 658cf8 <dynlock_create_callback>
  4245cd:	00 
  4245ce:	0f 84 c4 01 00 00    	je     424798 <CRYPTO_get_new_dynlockid+0x1d8>
  4245d4:	48 8b 05 3d 47 23 00 	mov    0x23473d(%rip),%rax        # 658d18 <locking_callback>
  4245db:	48 85 c0             	test   %rax,%rax
  4245de:	0f 84 3c 01 00 00    	je     424720 <CRYPTO_get_new_dynlockid+0x160>
  4245e4:	b9 f6 00 00 00       	mov    $0xf6,%ecx
  4245e9:	ba 68 df 43 00       	mov    $0x43df68,%edx
  4245ee:	be 1d 00 00 00       	mov    $0x1d,%esi
  4245f3:	bf 09 00 00 00       	mov    $0x9,%edi
  4245f8:	ff d0                	callq  *%rax
  4245fa:	48 83 3d 1e 47 23 00 	cmpq   $0x0,0x23471e(%rip)        # 658d20 <dyn_locks>
  424601:	00 
  424602:	0f 84 26 01 00 00    	je     42472e <CRYPTO_get_new_dynlockid+0x16e>
  424608:	48 8b 05 09 47 23 00 	mov    0x234709(%rip),%rax        # 658d18 <locking_callback>
  42460f:	48 85 c0             	test   %rax,%rax
  424612:	74 16                	je     42462a <CRYPTO_get_new_dynlockid+0x6a>
  424614:	b9 fe 00 00 00       	mov    $0xfe,%ecx
  424619:	ba 68 df 43 00       	mov    $0x43df68,%edx
  42461e:	be 1d 00 00 00       	mov    $0x1d,%esi
  424623:	bf 0a 00 00 00       	mov    $0xa,%edi
  424628:	ff d0                	callq  *%rax
  42462a:	ba 00 01 00 00       	mov    $0x100,%edx
  42462f:	be 68 df 43 00       	mov    $0x43df68,%esi
  424634:	bf 10 00 00 00       	mov    $0x10,%edi
  424639:	e8 c2 0d 00 00       	callq  425400 <CRYPTO_malloc>
  42463e:	48 85 c0             	test   %rax,%rax
  424641:	48 89 c5             	mov    %rax,%rbp
  424644:	41 b8 03 01 00 00    	mov    $0x103,%r8d
  42464a:	0f 84 20 01 00 00    	je     424770 <CRYPTO_get_new_dynlockid+0x1b0>
  424650:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
  424656:	be 07 01 00 00       	mov    $0x107,%esi
  42465b:	bf 68 df 43 00       	mov    $0x43df68,%edi
  424660:	ff 15 92 46 23 00    	callq  *0x234692(%rip)        # 658cf8 <dynlock_create_callback>
  424666:	48 85 c0             	test   %rax,%rax
  424669:	48 89 45 08          	mov    %rax,0x8(%rbp)
  42466d:	0f 84 7d 01 00 00    	je     4247f0 <CRYPTO_get_new_dynlockid+0x230>
  424673:	48 8b 05 9e 46 23 00 	mov    0x23469e(%rip),%rax        # 658d18 <locking_callback>
  42467a:	48 85 c0             	test   %rax,%rax
  42467d:	74 16                	je     424695 <CRYPTO_get_new_dynlockid+0xd5>
  42467f:	b9 0f 01 00 00       	mov    $0x10f,%ecx
  424684:	ba 68 df 43 00       	mov    $0x43df68,%edx
  424689:	be 1d 00 00 00       	mov    $0x1d,%esi
  42468e:	bf 09 00 00 00       	mov    $0x9,%edi
  424693:	ff d0                	callq  *%rax
  424695:	48 8b 3d 84 46 23 00 	mov    0x234684(%rip),%rdi        # 658d20 <dyn_locks>
  42469c:	31 f6                	xor    %esi,%esi
  42469e:	e8 4d 1c 00 00       	callq  4262f0 <sk_find>
  4246a3:	83 f8 ff             	cmp    $0xffffffff,%eax
  4246a6:	89 c3                	mov    %eax,%ebx
  4246a8:	74 4e                	je     4246f8 <CRYPTO_get_new_dynlockid+0x138>
  4246aa:	48 8b 3d 6f 46 23 00 	mov    0x23466f(%rip),%rdi        # 658d20 <dyn_locks>
  4246b1:	48 89 ea             	mov    %rbp,%rdx
  4246b4:	89 c6                	mov    %eax,%esi
  4246b6:	e8 45 21 00 00       	callq  426800 <sk_set>
  4246bb:	48 8b 05 56 46 23 00 	mov    0x234656(%rip),%rax        # 658d18 <locking_callback>
  4246c2:	48 85 c0             	test   %rax,%rax
  4246c5:	74 1f                	je     4246e6 <CRYPTO_get_new_dynlockid+0x126>
  4246c7:	b9 1d 01 00 00       	mov    $0x11d,%ecx
  4246cc:	ba 68 df 43 00       	mov    $0x43df68,%edx
  4246d1:	be 1d 00 00 00       	mov    $0x1d,%esi
  4246d6:	bf 0a 00 00 00       	mov    $0xa,%edi
  4246db:	ff d0                	callq  *%rax
  4246dd:	83 fb ff             	cmp    $0xffffffff,%ebx
  4246e0:	0f 84 da 00 00 00    	je     4247c0 <CRYPTO_get_new_dynlockid+0x200>
  4246e6:	89 d8                	mov    %ebx,%eax
  4246e8:	f7 d0                	not    %eax
  4246ea:	48 83 c4 08          	add    $0x8,%rsp
  4246ee:	5b                   	pop    %rbx
  4246ef:	5d                   	pop    %rbp
  4246f0:	c3                   	retq   
  4246f1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  4246f8:	48 8b 3d 21 46 23 00 	mov    0x234621(%rip),%rdi        # 658d20 <dyn_locks>
  4246ff:	48 89 ee             	mov    %rbp,%rsi
  424702:	e8 c9 1d 00 00       	callq  4264d0 <sk_push>
  424707:	8d 58 ff             	lea    -0x1(%rax),%ebx
  42470a:	48 8b 05 07 46 23 00 	mov    0x234607(%rip),%rax        # 658d18 <locking_callback>
  424711:	48 85 c0             	test   %rax,%rax
  424714:	75 b1                	jne    4246c7 <CRYPTO_get_new_dynlockid+0x107>
  424716:	eb c5                	jmp    4246dd <CRYPTO_get_new_dynlockid+0x11d>
  424718:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  42471f:	00 
  424720:	48 83 3d f8 45 23 00 	cmpq   $0x0,0x2345f8(%rip)        # 658d20 <dyn_locks>
  424727:	00 
  424728:	0f 85 fc fe ff ff    	jne    42462a <CRYPTO_get_new_dynlockid+0x6a>
  42472e:	e8 6d 18 00 00       	callq  425fa0 <sk_new_null>
  424733:	48 85 c0             	test   %rax,%rax
  424736:	48 89 05 e3 45 23 00 	mov    %rax,0x2345e3(%rip)        # 658d20 <dyn_locks>
  42473d:	0f 85 c5 fe ff ff    	jne    424608 <CRYPTO_get_new_dynlockid+0x48>
  424743:	48 8b 05 ce 45 23 00 	mov    0x2345ce(%rip),%rax        # 658d18 <locking_callback>
  42474a:	48 85 c0             	test   %rax,%rax
  42474d:	74 16                	je     424765 <CRYPTO_get_new_dynlockid+0x1a5>
  42474f:	b9 fa 00 00 00       	mov    $0xfa,%ecx
  424754:	ba 68 df 43 00       	mov    $0x43df68,%edx
  424759:	be 1d 00 00 00       	mov    $0x1d,%esi
  42475e:	bf 0a 00 00 00       	mov    $0xa,%edi
  424763:	ff d0                	callq  *%rax
  424765:	41 b8 fb 00 00 00    	mov    $0xfb,%r8d
  42476b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  424770:	b9 68 df 43 00       	mov    $0x43df68,%ecx
  424775:	ba 41 00 00 00       	mov    $0x41,%edx
  42477a:	be 67 00 00 00       	mov    $0x67,%esi
  42477f:	bf 0f 00 00 00       	mov    $0xf,%edi
  424784:	e8 c7 3b 00 00       	callq  428350 <ERR_put_error>
  424789:	48 83 c4 08          	add    $0x8,%rsp
  42478d:	31 c0                	xor    %eax,%eax
  42478f:	5b                   	pop    %rbx
  424790:	5d                   	pop    %rbp
  424791:	c3                   	retq   
  424792:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  424798:	41 b8 f3 00 00 00    	mov    $0xf3,%r8d
  42479e:	b9 68 df 43 00       	mov    $0x43df68,%ecx
  4247a3:	ba 64 00 00 00       	mov    $0x64,%edx
  4247a8:	be 67 00 00 00       	mov    $0x67,%esi
  4247ad:	bf 0f 00 00 00       	mov    $0xf,%edi
  4247b2:	e8 99 3b 00 00       	callq  428350 <ERR_put_error>
  4247b7:	48 83 c4 08          	add    $0x8,%rsp
  4247bb:	31 c0                	xor    %eax,%eax
  4247bd:	5b                   	pop    %rbx
  4247be:	5d                   	pop    %rbp
  4247bf:	c3                   	retq   
  4247c0:	48 8b 7d 08          	mov    0x8(%rbp),%rdi
  4247c4:	ba 21 01 00 00       	mov    $0x121,%edx
  4247c9:	be 68 df 43 00       	mov    $0x43df68,%esi
  4247ce:	ff 15 14 45 23 00    	callq  *0x234514(%rip)        # 658ce8 <dynlock_destroy_callback>
  4247d4:	48 89 ef             	mov    %rbp,%rdi
  4247d7:	e8 84 0f 00 00       	callq  425760 <CRYPTO_free>
  4247dc:	b8 01 00 00 00       	mov    $0x1,%eax
  4247e1:	e9 04 ff ff ff       	jmpq   4246ea <CRYPTO_get_new_dynlockid+0x12a>
  4247e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4247ed:	00 00 00 
  4247f0:	48 89 ef             	mov    %rbp,%rdi
  4247f3:	e8 68 0f 00 00       	callq  425760 <CRYPTO_free>
  4247f8:	41 b8 0b 01 00 00    	mov    $0x10b,%r8d
  4247fe:	e9 6d ff ff ff       	jmpq   424770 <CRYPTO_get_new_dynlockid+0x1b0>
  424803:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  42480a:	84 00 00 00 00 00 

0000000000424810 <CRYPTO_destroy_dynlockid>:
  424810:	55                   	push   %rbp
  424811:	53                   	push   %rbx
  424812:	89 f8                	mov    %edi,%eax
  424814:	89 fb                	mov    %edi,%ebx
  424816:	f7 d0                	not    %eax
  424818:	48 83 ec 08          	sub    $0x8,%rsp
  42481c:	85 ff                	test   %edi,%edi
  42481e:	0f 45 d8             	cmovne %eax,%ebx
  424821:	48 83 3d bf 44 23 00 	cmpq   $0x0,0x2344bf(%rip)        # 658ce8 <dynlock_destroy_callback>
  424828:	00 
  424829:	0f 84 a1 00 00 00    	je     4248d0 <CRYPTO_destroy_dynlockid+0xc0>
  42482f:	48 8b 05 e2 44 23 00 	mov    0x2344e2(%rip),%rax        # 658d18 <locking_callback>
  424836:	48 85 c0             	test   %rax,%rax
  424839:	0f 84 a1 00 00 00    	je     4248e0 <CRYPTO_destroy_dynlockid+0xd0>
  42483f:	bf 09 00 00 00       	mov    $0x9,%edi
  424844:	b9 31 01 00 00       	mov    $0x131,%ecx
  424849:	ba 68 df 43 00       	mov    $0x43df68,%edx
  42484e:	be 1d 00 00 00       	mov    $0x1d,%esi
  424853:	ff d0                	callq  *%rax
  424855:	48 8b 3d c4 44 23 00 	mov    0x2344c4(%rip),%rdi        # 658d20 <dyn_locks>
  42485c:	48 85 ff             	test   %rdi,%rdi
  42485f:	74 09                	je     42486a <CRYPTO_destroy_dynlockid+0x5a>
  424861:	e8 5a 1f 00 00       	callq  4267c0 <sk_num>
  424866:	39 c3                	cmp    %eax,%ebx
  424868:	7c 2e                	jl     424898 <CRYPTO_destroy_dynlockid+0x88>
  42486a:	48 8b 05 a7 44 23 00 	mov    0x2344a7(%rip),%rax        # 658d18 <locking_callback>
  424871:	b9 35 01 00 00       	mov    $0x135,%ecx
  424876:	48 85 c0             	test   %rax,%rax
  424879:	74 55                	je     4248d0 <CRYPTO_destroy_dynlockid+0xc0>
  42487b:	48 83 c4 08          	add    $0x8,%rsp
  42487f:	ba 68 df 43 00       	mov    $0x43df68,%edx
  424884:	be 1d 00 00 00       	mov    $0x1d,%esi
  424889:	5b                   	pop    %rbx
  42488a:	5d                   	pop    %rbp
  42488b:	bf 0a 00 00 00       	mov    $0xa,%edi
  424890:	ff e0                	jmpq   *%rax
  424892:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  424898:	48 8b 3d 81 44 23 00 	mov    0x234481(%rip),%rdi        # 658d20 <dyn_locks>
  42489f:	89 de                	mov    %ebx,%esi
  4248a1:	e8 2a 1f 00 00       	callq  4267d0 <sk_value>
  4248a6:	48 85 c0             	test   %rax,%rax
  4248a9:	48 89 c5             	mov    %rax,%rbp
  4248ac:	74 0c                	je     4248ba <CRYPTO_destroy_dynlockid+0xaa>
  4248ae:	8b 00                	mov    (%rax),%eax
  4248b0:	83 e8 01             	sub    $0x1,%eax
  4248b3:	85 c0                	test   %eax,%eax
  4248b5:	89 45 00             	mov    %eax,0x0(%rbp)
  4248b8:	7e 3e                	jle    4248f8 <CRYPTO_destroy_dynlockid+0xe8>
  4248ba:	48 8b 05 57 44 23 00 	mov    0x234457(%rip),%rax        # 658d18 <locking_callback>
  4248c1:	b9 4b 01 00 00       	mov    $0x14b,%ecx
  4248c6:	48 85 c0             	test   %rax,%rax
  4248c9:	75 b0                	jne    42487b <CRYPTO_destroy_dynlockid+0x6b>
  4248cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4248d0:	48 83 c4 08          	add    $0x8,%rsp
  4248d4:	5b                   	pop    %rbx
  4248d5:	5d                   	pop    %rbp
  4248d6:	c3                   	retq   
  4248d7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4248de:	00 00 
  4248e0:	48 8b 3d 39 44 23 00 	mov    0x234439(%rip),%rdi        # 658d20 <dyn_locks>
  4248e7:	48 85 ff             	test   %rdi,%rdi
  4248ea:	0f 85 71 ff ff ff    	jne    424861 <CRYPTO_destroy_dynlockid+0x51>
  4248f0:	eb de                	jmp    4248d0 <CRYPTO_destroy_dynlockid+0xc0>
  4248f2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  4248f8:	48 8b 3d 21 44 23 00 	mov    0x234421(%rip),%rdi        # 658d20 <dyn_locks>
  4248ff:	31 d2                	xor    %edx,%edx
  424901:	89 de                	mov    %ebx,%esi
  424903:	e8 f8 1e 00 00       	callq  426800 <sk_set>
  424908:	48 8b 05 09 44 23 00 	mov    0x234409(%rip),%rax        # 658d18 <locking_callback>
  42490f:	48 85 c0             	test   %rax,%rax
  424912:	74 16                	je     42492a <CRYPTO_destroy_dynlockid+0x11a>
  424914:	b9 4b 01 00 00       	mov    $0x14b,%ecx
  424919:	ba 68 df 43 00       	mov    $0x43df68,%edx
  42491e:	be 1d 00 00 00       	mov    $0x1d,%esi
  424923:	bf 0a 00 00 00       	mov    $0xa,%edi
  424928:	ff d0                	callq  *%rax
  42492a:	48 8b 7d 08          	mov    0x8(%rbp),%rdi
  42492e:	ba 4f 01 00 00       	mov    $0x14f,%edx
  424933:	be 68 df 43 00       	mov    $0x43df68,%esi
  424938:	ff 15 aa 43 23 00    	callq  *0x2343aa(%rip)        # 658ce8 <dynlock_destroy_callback>
  42493e:	48 83 c4 08          	add    $0x8,%rsp
  424942:	48 89 ef             	mov    %rbp,%rdi
  424945:	5b                   	pop    %rbx
  424946:	5d                   	pop    %rbp
  424947:	e9 14 0e 00 00       	jmpq   425760 <CRYPTO_free>
  42494c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000424950 <CRYPTO_get_dynlock_value>:
  424950:	89 f8                	mov    %edi,%eax
  424952:	85 ff                	test   %edi,%edi
  424954:	53                   	push   %rbx
  424955:	f7 d0                	not    %eax
  424957:	89 fb                	mov    %edi,%ebx
  424959:	0f 45 d8             	cmovne %eax,%ebx
  42495c:	48 8b 05 b5 43 23 00 	mov    0x2343b5(%rip),%rax        # 658d18 <locking_callback>
  424963:	48 85 c0             	test   %rax,%rax
  424966:	74 16                	je     42497e <CRYPTO_get_dynlock_value+0x2e>
  424968:	b9 5a 01 00 00       	mov    $0x15a,%ecx
  42496d:	ba 68 df 43 00       	mov    $0x43df68,%edx
  424972:	be 1d 00 00 00       	mov    $0x1d,%esi
  424977:	bf 09 00 00 00       	mov    $0x9,%edi
  42497c:	ff d0                	callq  *%rax
  42497e:	48 8b 3d 9b 43 23 00 	mov    0x23439b(%rip),%rdi        # 658d20 <dyn_locks>
  424985:	48 85 ff             	test   %rdi,%rdi
  424988:	74 09                	je     424993 <CRYPTO_get_dynlock_value+0x43>
  42498a:	e8 31 1e 00 00       	callq  4267c0 <sk_num>
  42498f:	39 c3                	cmp    %eax,%ebx
  424991:	7c 2d                	jl     4249c0 <CRYPTO_get_dynlock_value+0x70>
  424993:	48 8b 05 7e 43 23 00 	mov    0x23437e(%rip),%rax        # 658d18 <locking_callback>
  42499a:	48 85 c0             	test   %rax,%rax
  42499d:	74 16                	je     4249b5 <CRYPTO_get_dynlock_value+0x65>
  42499f:	b9 61 01 00 00       	mov    $0x161,%ecx
  4249a4:	ba 68 df 43 00       	mov    $0x43df68,%edx
  4249a9:	be 1d 00 00 00       	mov    $0x1d,%esi
  4249ae:	bf 0a 00 00 00       	mov    $0xa,%edi
  4249b3:	ff d0                	callq  *%rax
  4249b5:	31 c0                	xor    %eax,%eax
  4249b7:	5b                   	pop    %rbx
  4249b8:	c3                   	retq   
  4249b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  4249c0:	48 8b 3d 59 43 23 00 	mov    0x234359(%rip),%rdi        # 658d20 <dyn_locks>
  4249c7:	89 de                	mov    %ebx,%esi
  4249c9:	e8 02 1e 00 00       	callq  4267d0 <sk_value>
  4249ce:	48 85 c0             	test   %rax,%rax
  4249d1:	48 89 c3             	mov    %rax,%rbx
  4249d4:	74 bd                	je     424993 <CRYPTO_get_dynlock_value+0x43>
  4249d6:	83 00 01             	addl   $0x1,(%rax)
  4249d9:	48 8b 05 38 43 23 00 	mov    0x234338(%rip),%rax        # 658d18 <locking_callback>
  4249e0:	48 85 c0             	test   %rax,%rax
  4249e3:	74 16                	je     4249fb <CRYPTO_get_dynlock_value+0xab>
  4249e5:	b9 61 01 00 00       	mov    $0x161,%ecx
  4249ea:	ba 68 df 43 00       	mov    $0x43df68,%edx
  4249ef:	be 1d 00 00 00       	mov    $0x1d,%esi
  4249f4:	bf 0a 00 00 00       	mov    $0xa,%edi
  4249f9:	ff d0                	callq  *%rax
  4249fb:	48 8b 43 08          	mov    0x8(%rbx),%rax
  4249ff:	5b                   	pop    %rbx
  424a00:	c3                   	retq   
  424a01:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  424a08:	0f 1f 84 00 00 00 00 
  424a0f:	00 

0000000000424a10 <CRYPTO_get_dynlock_create_callback>:
  424a10:	48 8b 05 e1 42 23 00 	mov    0x2342e1(%rip),%rax        # 658cf8 <dynlock_create_callback>
  424a17:	c3                   	retq   
  424a18:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  424a1f:	00 

0000000000424a20 <CRYPTO_get_dynlock_lock_callback>:
  424a20:	48 8b 05 c9 42 23 00 	mov    0x2342c9(%rip),%rax        # 658cf0 <dynlock_lock_callback>
  424a27:	c3                   	retq   
  424a28:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  424a2f:	00 

0000000000424a30 <CRYPTO_get_dynlock_destroy_callback>:
  424a30:	48 8b 05 b1 42 23 00 	mov    0x2342b1(%rip),%rax        # 658ce8 <dynlock_destroy_callback>
  424a37:	c3                   	retq   
  424a38:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  424a3f:	00 

0000000000424a40 <CRYPTO_set_dynlock_create_callback>:
  424a40:	48 89 3d b1 42 23 00 	mov    %rdi,0x2342b1(%rip)        # 658cf8 <dynlock_create_callback>
  424a47:	c3                   	retq   
  424a48:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  424a4f:	00 

0000000000424a50 <CRYPTO_set_dynlock_lock_callback>:
  424a50:	48 89 3d 99 42 23 00 	mov    %rdi,0x234299(%rip)        # 658cf0 <dynlock_lock_callback>
  424a57:	c3                   	retq   
  424a58:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  424a5f:	00 

0000000000424a60 <CRYPTO_set_dynlock_destroy_callback>:
  424a60:	48 89 3d 81 42 23 00 	mov    %rdi,0x234281(%rip)        # 658ce8 <dynlock_destroy_callback>
  424a67:	c3                   	retq   
  424a68:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  424a6f:	00 

0000000000424a70 <CRYPTO_get_locking_callback>:
  424a70:	48 8b 05 a1 42 23 00 	mov    0x2342a1(%rip),%rax        # 658d18 <locking_callback>
  424a77:	c3                   	retq   
  424a78:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  424a7f:	00 

0000000000424a80 <CRYPTO_get_add_lock_callback>:
  424a80:	48 8b 05 89 42 23 00 	mov    0x234289(%rip),%rax        # 658d10 <add_lock_callback>
  424a87:	c3                   	retq   
  424a88:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  424a8f:	00 

0000000000424a90 <CRYPTO_set_locking_callback>:
  424a90:	53                   	push   %rbx
  424a91:	48 89 fb             	mov    %rdi,%rbx
  424a94:	e8 17 0e 00 00       	callq  4258b0 <OPENSSL_init>
  424a99:	48 89 1d 78 42 23 00 	mov    %rbx,0x234278(%rip)        # 658d18 <locking_callback>
  424aa0:	5b                   	pop    %rbx
  424aa1:	c3                   	retq   
  424aa2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  424aa9:	1f 84 00 00 00 00 00 

0000000000424ab0 <CRYPTO_set_add_lock_callback>:
  424ab0:	48 89 3d 59 42 23 00 	mov    %rdi,0x234259(%rip)        # 658d10 <add_lock_callback>
  424ab7:	c3                   	retq   
  424ab8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  424abf:	00 

0000000000424ac0 <CRYPTO_THREADID_set_numeric>:
  424ac0:	48 c7 07 00 00 00 00 	movq   $0x0,(%rdi)
  424ac7:	48 89 77 08          	mov    %rsi,0x8(%rdi)
  424acb:	c3                   	retq   
  424acc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000424ad0 <CRYPTO_THREADID_set_pointer>:
  424ad0:	48 89 37             	mov    %rsi,(%rdi)
  424ad3:	48 89 77 08          	mov    %rsi,0x8(%rdi)
  424ad7:	c3                   	retq   
  424ad8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  424adf:	00 

0000000000424ae0 <CRYPTO_THREADID_set_callback>:
  424ae0:	31 c0                	xor    %eax,%eax
  424ae2:	48 83 3d 16 42 23 00 	cmpq   $0x0,0x234216(%rip)        # 658d00 <threadid_callback>
  424ae9:	00 
  424aea:	74 04                	je     424af0 <CRYPTO_THREADID_set_callback+0x10>
  424aec:	f3 c3                	repz retq 
  424aee:	66 90                	xchg   %ax,%ax
  424af0:	48 89 3d 09 42 23 00 	mov    %rdi,0x234209(%rip)        # 658d00 <threadid_callback>
  424af7:	b0 01                	mov    $0x1,%al
  424af9:	c3                   	retq   
  424afa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000424b00 <CRYPTO_THREADID_get_callback>:
  424b00:	48 8b 05 f9 41 23 00 	mov    0x2341f9(%rip),%rax        # 658d00 <threadid_callback>
  424b07:	c3                   	retq   
  424b08:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  424b0f:	00 

0000000000424b10 <CRYPTO_THREADID_current>:
  424b10:	48 8b 05 e9 41 23 00 	mov    0x2341e9(%rip),%rax        # 658d00 <threadid_callback>
  424b17:	48 85 c0             	test   %rax,%rax
  424b1a:	74 04                	je     424b20 <CRYPTO_THREADID_current+0x10>
  424b1c:	ff e0                	jmpq   *%rax
  424b1e:	66 90                	xchg   %ax,%ax
  424b20:	48 8b 05 e1 41 23 00 	mov    0x2341e1(%rip),%rax        # 658d08 <id_callback>
  424b27:	53                   	push   %rbx
  424b28:	48 89 fb             	mov    %rdi,%rbx
  424b2b:	48 85 c0             	test   %rax,%rax
  424b2e:	74 10                	je     424b40 <CRYPTO_THREADID_current+0x30>
  424b30:	ff d0                	callq  *%rax
  424b32:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
  424b39:	48 89 43 08          	mov    %rax,0x8(%rbx)
  424b3d:	5b                   	pop    %rbx
  424b3e:	c3                   	retq   
  424b3f:	90                   	nop
  424b40:	e8 5b 23 fe ff       	callq  406ea0 <__errno_location@plt>
  424b45:	48 89 03             	mov    %rax,(%rbx)
  424b48:	48 89 43 08          	mov    %rax,0x8(%rbx)
  424b4c:	5b                   	pop    %rbx
  424b4d:	c3                   	retq   
  424b4e:	66 90                	xchg   %ax,%ax

0000000000424b50 <CRYPTO_THREADID_cmp>:
  424b50:	ba 10 00 00 00       	mov    $0x10,%edx
  424b55:	e9 a6 23 fe ff       	jmpq   406f00 <memcmp@plt>
  424b5a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000424b60 <CRYPTO_THREADID_cpy>:
  424b60:	48 8b 06             	mov    (%rsi),%rax
  424b63:	48 89 07             	mov    %rax,(%rdi)
  424b66:	48 8b 46 08          	mov    0x8(%rsi),%rax
  424b6a:	48 89 47 08          	mov    %rax,0x8(%rdi)
  424b6e:	c3                   	retq   
  424b6f:	90                   	nop

0000000000424b70 <CRYPTO_THREADID_hash>:
  424b70:	48 8b 47 08          	mov    0x8(%rdi),%rax
  424b74:	c3                   	retq   
  424b75:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  424b7c:	00 00 00 00 

0000000000424b80 <CRYPTO_get_id_callback>:
  424b80:	48 8b 05 81 41 23 00 	mov    0x234181(%rip),%rax        # 658d08 <id_callback>
  424b87:	c3                   	retq   
  424b88:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  424b8f:	00 

0000000000424b90 <CRYPTO_set_id_callback>:
  424b90:	48 89 3d 71 41 23 00 	mov    %rdi,0x234171(%rip)        # 658d08 <id_callback>
  424b97:	c3                   	retq   
  424b98:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  424b9f:	00 

0000000000424ba0 <CRYPTO_thread_id>:
  424ba0:	48 8b 05 61 41 23 00 	mov    0x234161(%rip),%rax        # 658d08 <id_callback>
  424ba7:	48 85 c0             	test   %rax,%rax
  424baa:	74 04                	je     424bb0 <CRYPTO_thread_id+0x10>
  424bac:	ff e0                	jmpq   *%rax
  424bae:	66 90                	xchg   %ax,%ax
  424bb0:	48 83 ec 08          	sub    $0x8,%rsp
  424bb4:	e8 b7 21 fe ff       	callq  406d70 <getpid@plt>
  424bb9:	48 83 c4 08          	add    $0x8,%rsp
  424bbd:	48 98                	cltq   
  424bbf:	c3                   	retq   

0000000000424bc0 <CRYPTO_get_lock_name>:
  424bc0:	85 ff                	test   %edi,%edi
  424bc2:	78 4c                	js     424c10 <CRYPTO_get_lock_name+0x50>
  424bc4:	83 ff 28             	cmp    $0x28,%edi
  424bc7:	7f 0f                	jg     424bd8 <CRYPTO_get_lock_name+0x18>
  424bc9:	48 63 ff             	movslq %edi,%rdi
  424bcc:	48 8b 04 fd 40 e1 43 	mov    0x43e140(,%rdi,8),%rax
  424bd3:	00 
  424bd4:	c3                   	retq   
  424bd5:	0f 1f 00             	nopl   (%rax)
  424bd8:	53                   	push   %rbx
  424bd9:	8d 5f d7             	lea    -0x29(%rdi),%ebx
  424bdc:	48 8b 3d 45 41 23 00 	mov    0x234145(%rip),%rdi        # 658d28 <app_locks>
  424be3:	e8 d8 1b 00 00       	callq  4267c0 <sk_num>
  424be8:	89 c2                	mov    %eax,%edx
  424bea:	b8 7b df 43 00       	mov    $0x43df7b,%eax
  424bef:	39 d3                	cmp    %edx,%ebx
  424bf1:	7e 05                	jle    424bf8 <CRYPTO_get_lock_name+0x38>
  424bf3:	5b                   	pop    %rbx
  424bf4:	c3                   	retq   
  424bf5:	0f 1f 00             	nopl   (%rax)
  424bf8:	89 de                	mov    %ebx,%esi
  424bfa:	48 8b 3d 27 41 23 00 	mov    0x234127(%rip),%rdi        # 658d28 <app_locks>
  424c01:	5b                   	pop    %rbx
  424c02:	e9 c9 1b 00 00       	jmpq   4267d0 <sk_value>
  424c07:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  424c0e:	00 00 
  424c10:	b8 73 df 43 00       	mov    $0x43df73,%eax
  424c15:	c3                   	retq   
  424c16:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  424c1d:	00 00 00 

0000000000424c20 <OPENSSL_ia32cap_loc>:
  424c20:	b8 a0 aa 25 02       	mov    $0x225aaa0,%eax
  424c25:	c3                   	retq   
  424c26:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  424c2d:	00 00 00 

0000000000424c30 <OPENSSL_cpuid_setup>:
  424c30:	55                   	push   %rbp
  424c31:	53                   	push   %rbx
  424c32:	48 83 ec 18          	sub    $0x18,%rsp
  424c36:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  424c3d:	00 00 
  424c3f:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  424c44:	31 c0                	xor    %eax,%eax
  424c46:	8b 05 98 40 23 00    	mov    0x234098(%rip),%eax        # 658ce4 <trigger.5680>
  424c4c:	85 c0                	test   %eax,%eax
  424c4e:	74 20                	je     424c70 <OPENSSL_cpuid_setup+0x40>
  424c50:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  424c55:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  424c5c:	00 00 
  424c5e:	0f 85 a3 00 00 00    	jne    424d07 <OPENSSL_cpuid_setup+0xd7>
  424c64:	48 83 c4 18          	add    $0x18,%rsp
  424c68:	5b                   	pop    %rbx
  424c69:	5d                   	pop    %rbp
  424c6a:	c3                   	retq   
  424c6b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  424c70:	bf 81 df 43 00       	mov    $0x43df81,%edi
  424c75:	c7 05 65 40 23 00 01 	movl   $0x1,0x234065(%rip)        # 658ce4 <trigger.5680>
  424c7c:	00 00 00 
  424c7f:	e8 0c 22 fe ff       	callq  406e90 <getenv@plt>
  424c84:	48 85 c0             	test   %rax,%rax
  424c87:	74 77                	je     424d00 <OPENSSL_cpuid_setup+0xd0>
  424c89:	80 38 7e             	cmpb   $0x7e,(%rax)
  424c8c:	48 89 e2             	mov    %rsp,%rdx
  424c8f:	be 91 df 43 00       	mov    $0x43df91,%esi
  424c94:	40 0f 94 c5          	sete   %bpl
  424c98:	40 0f b6 dd          	movzbl %bpl,%ebx
  424c9c:	48 01 c3             	add    %rax,%rbx
  424c9f:	31 c0                	xor    %eax,%eax
  424ca1:	48 89 df             	mov    %rbx,%rdi
  424ca4:	e8 57 20 fe ff       	callq  406d00 <__isoc99_sscanf@plt>
  424ca9:	85 c0                	test   %eax,%eax
  424cab:	74 3b                	je     424ce8 <OPENSSL_cpuid_setup+0xb8>
  424cad:	40 84 ed             	test   %bpl,%bpl
  424cb0:	48 8b 04 24          	mov    (%rsp),%rax
  424cb4:	75 1a                	jne    424cd0 <OPENSSL_cpuid_setup+0xa0>
  424cb6:	89 c2                	mov    %eax,%edx
  424cb8:	48 c1 e8 20          	shr    $0x20,%rax
  424cbc:	80 ce 04             	or     $0x4,%dh
  424cbf:	89 05 df 5d e3 01    	mov    %eax,0x1e35ddf(%rip)        # 225aaa4 <OPENSSL_ia32cap_P+0x4>
  424cc5:	89 15 d5 5d e3 01    	mov    %edx,0x1e35dd5(%rip)        # 225aaa0 <OPENSSL_ia32cap_P>
  424ccb:	eb 83                	jmp    424c50 <OPENSSL_cpuid_setup+0x20>
  424ccd:	0f 1f 00             	nopl   (%rax)
  424cd0:	e8 2b 0c 00 00       	callq  425900 <OPENSSL_ia32_cpuid>
  424cd5:	48 8b 14 24          	mov    (%rsp),%rdx
  424cd9:	48 f7 d2             	not    %rdx
  424cdc:	48 21 d0             	and    %rdx,%rax
  424cdf:	eb d5                	jmp    424cb6 <OPENSSL_cpuid_setup+0x86>
  424ce1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  424ce8:	31 d2                	xor    %edx,%edx
  424cea:	31 f6                	xor    %esi,%esi
  424cec:	48 89 df             	mov    %rbx,%rdi
  424cef:	e8 ec 22 fe ff       	callq  406fe0 <strtoul@plt>
  424cf4:	48 89 04 24          	mov    %rax,(%rsp)
  424cf8:	eb b3                	jmp    424cad <OPENSSL_cpuid_setup+0x7d>
  424cfa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  424d00:	e8 fb 0b 00 00       	callq  425900 <OPENSSL_ia32_cpuid>
  424d05:	eb af                	jmp    424cb6 <OPENSSL_cpuid_setup+0x86>
  424d07:	e8 b4 21 fe ff       	callq  406ec0 <__stack_chk_fail@plt>
  424d0c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000424d10 <OPENSSL_showfatal>:
  424d10:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
  424d17:	84 c0                	test   %al,%al
  424d19:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  424d1e:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  424d23:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  424d28:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
  424d2d:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
  424d32:	74 37                	je     424d6b <OPENSSL_showfatal+0x5b>
  424d34:	0f 29 44 24 50       	movaps %xmm0,0x50(%rsp)
  424d39:	0f 29 4c 24 60       	movaps %xmm1,0x60(%rsp)
  424d3e:	0f 29 54 24 70       	movaps %xmm2,0x70(%rsp)
  424d43:	0f 29 9c 24 80 00 00 	movaps %xmm3,0x80(%rsp)
  424d4a:	00 
  424d4b:	0f 29 a4 24 90 00 00 	movaps %xmm4,0x90(%rsp)
  424d52:	00 
  424d53:	0f 29 ac 24 a0 00 00 	movaps %xmm5,0xa0(%rsp)
  424d5a:	00 
  424d5b:	0f 29 b4 24 b0 00 00 	movaps %xmm6,0xb0(%rsp)
  424d62:	00 
  424d63:	0f 29 bc 24 c0 00 00 	movaps %xmm7,0xc0(%rsp)
  424d6a:	00 
  424d6b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  424d72:	00 00 
  424d74:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  424d79:	31 c0                	xor    %eax,%eax
  424d7b:	48 8d 84 24 e0 00 00 	lea    0xe0(%rsp),%rax
  424d82:	00 
  424d83:	48 89 fa             	mov    %rdi,%rdx
  424d86:	48 89 e1             	mov    %rsp,%rcx
  424d89:	be 01 00 00 00       	mov    $0x1,%esi
  424d8e:	48 8b 3d eb 3b 23 00 	mov    0x233beb(%rip),%rdi        # 658980 <stderr@@GLIBC_2.2.5>
  424d95:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  424d9a:	48 8d 44 24 20       	lea    0x20(%rsp),%rax
  424d9f:	c7 04 24 08 00 00 00 	movl   $0x8,(%rsp)
  424da6:	c7 44 24 04 30 00 00 	movl   $0x30,0x4(%rsp)
  424dad:	00 
  424dae:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  424db3:	e8 38 20 fe ff       	callq  406df0 <__vfprintf_chk@plt>
  424db8:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  424dbd:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  424dc4:	00 00 
  424dc6:	75 08                	jne    424dd0 <OPENSSL_showfatal+0xc0>
  424dc8:	48 81 c4 d8 00 00 00 	add    $0xd8,%rsp
  424dcf:	c3                   	retq   
  424dd0:	e8 eb 20 fe ff       	callq  406ec0 <__stack_chk_fail@plt>
  424dd5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  424ddc:	00 00 00 00 

0000000000424de0 <OPENSSL_isservice>:
  424de0:	31 c0                	xor    %eax,%eax
  424de2:	c3                   	retq   
  424de3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  424dea:	84 00 00 00 00 00 

0000000000424df0 <OpenSSLDie>:
  424df0:	48 89 d1             	mov    %rdx,%rcx
  424df3:	48 83 ec 08          	sub    $0x8,%rsp
  424df7:	89 f2                	mov    %esi,%edx
  424df9:	31 c0                	xor    %eax,%eax
  424dfb:	48 89 fe             	mov    %rdi,%rsi
  424dfe:	bf d0 e0 43 00       	mov    $0x43e0d0,%edi
  424e03:	e8 08 ff ff ff       	callq  424d10 <OPENSSL_showfatal>
  424e08:	e8 a3 1e fe ff       	callq  406cb0 <abort@plt>
  424e0d:	0f 1f 00             	nopl   (%rax)

0000000000424e10 <CRYPTO_lock>:
  424e10:	85 f6                	test   %esi,%esi
  424e12:	78 14                	js     424e28 <CRYPTO_lock+0x18>
  424e14:	48 8b 05 fd 3e 23 00 	mov    0x233efd(%rip),%rax        # 658d18 <locking_callback>
  424e1b:	48 85 c0             	test   %rax,%rax
  424e1e:	74 58                	je     424e78 <CRYPTO_lock+0x68>
  424e20:	ff e0                	jmpq   *%rax
  424e22:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  424e28:	48 83 3d c0 3e 23 00 	cmpq   $0x0,0x233ec0(%rip)        # 658cf0 <dynlock_lock_callback>
  424e2f:	00 
  424e30:	74 46                	je     424e78 <CRYPTO_lock+0x68>
  424e32:	41 55                	push   %r13
  424e34:	41 54                	push   %r12
  424e36:	41 89 cd             	mov    %ecx,%r13d
  424e39:	55                   	push   %rbp
  424e3a:	53                   	push   %rbx
  424e3b:	89 fd                	mov    %edi,%ebp
  424e3d:	89 f7                	mov    %esi,%edi
  424e3f:	49 89 d4             	mov    %rdx,%r12
  424e42:	89 f3                	mov    %esi,%ebx
  424e44:	48 83 ec 08          	sub    $0x8,%rsp
  424e48:	e8 03 fb ff ff       	callq  424950 <CRYPTO_get_dynlock_value>
  424e4d:	48 85 c0             	test   %rax,%rax
  424e50:	74 28                	je     424e7a <CRYPTO_lock+0x6a>
  424e52:	89 ef                	mov    %ebp,%edi
  424e54:	44 89 e9             	mov    %r13d,%ecx
  424e57:	4c 89 e2             	mov    %r12,%rdx
  424e5a:	48 89 c6             	mov    %rax,%rsi
  424e5d:	ff 15 8d 3e 23 00    	callq  *0x233e8d(%rip)        # 658cf0 <dynlock_lock_callback>
  424e63:	48 83 c4 08          	add    $0x8,%rsp
  424e67:	89 df                	mov    %ebx,%edi
  424e69:	5b                   	pop    %rbx
  424e6a:	5d                   	pop    %rbp
  424e6b:	41 5c                	pop    %r12
  424e6d:	41 5d                	pop    %r13
  424e6f:	e9 9c f9 ff ff       	jmpq   424810 <CRYPTO_destroy_dynlockid>
  424e74:	0f 1f 40 00          	nopl   0x0(%rax)
  424e78:	f3 c3                	repz retq 
  424e7a:	e8 c1 21 fe ff       	callq  407040 <CRYPTO_lock.part.0>
  424e7f:	90                   	nop

0000000000424e80 <CRYPTO_add_lock>:
  424e80:	48 8b 05 89 3e 23 00 	mov    0x233e89(%rip),%rax        # 658d10 <add_lock_callback>
  424e87:	48 85 c0             	test   %rax,%rax
  424e8a:	74 04                	je     424e90 <CRYPTO_add_lock+0x10>
  424e8c:	ff e0                	jmpq   *%rax
  424e8e:	66 90                	xchg   %ax,%ax
  424e90:	85 d2                	test   %edx,%edx
  424e92:	41 56                	push   %r14
  424e94:	41 89 d6             	mov    %edx,%r14d
  424e97:	41 55                	push   %r13
  424e99:	49 89 fd             	mov    %rdi,%r13
  424e9c:	41 54                	push   %r12
  424e9e:	45 89 c4             	mov    %r8d,%r12d
  424ea1:	55                   	push   %rbp
  424ea2:	48 89 cd             	mov    %rcx,%rbp
  424ea5:	53                   	push   %rbx
  424ea6:	89 f3                	mov    %esi,%ebx
  424ea8:	78 56                	js     424f00 <CRYPTO_add_lock+0x80>
  424eaa:	48 8b 05 67 3e 23 00 	mov    0x233e67(%rip),%rax        # 658d18 <locking_callback>
  424eb1:	48 85 c0             	test   %rax,%rax
  424eb4:	0f 84 be 00 00 00    	je     424f78 <CRYPTO_add_lock+0xf8>
  424eba:	44 89 c1             	mov    %r8d,%ecx
  424ebd:	48 89 ea             	mov    %rbp,%rdx
  424ec0:	44 89 f6             	mov    %r14d,%esi
  424ec3:	bf 09 00 00 00       	mov    $0x9,%edi
  424ec8:	ff d0                	callq  *%rax
  424eca:	41 03 5d 00          	add    0x0(%r13),%ebx
  424ece:	48 8b 05 43 3e 23 00 	mov    0x233e43(%rip),%rax        # 658d18 <locking_callback>
  424ed5:	48 85 c0             	test   %rax,%rax
  424ed8:	41 89 5d 00          	mov    %ebx,0x0(%r13)
  424edc:	74 10                	je     424eee <CRYPTO_add_lock+0x6e>
  424ede:	44 89 e1             	mov    %r12d,%ecx
  424ee1:	48 89 ea             	mov    %rbp,%rdx
  424ee4:	44 89 f6             	mov    %r14d,%esi
  424ee7:	bf 0a 00 00 00       	mov    $0xa,%edi
  424eec:	ff d0                	callq  *%rax
  424eee:	89 d8                	mov    %ebx,%eax
  424ef0:	5b                   	pop    %rbx
  424ef1:	5d                   	pop    %rbp
  424ef2:	41 5c                	pop    %r12
  424ef4:	41 5d                	pop    %r13
  424ef6:	41 5e                	pop    %r14
  424ef8:	c3                   	retq   
  424ef9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  424f00:	48 83 3d e8 3d 23 00 	cmpq   $0x0,0x233de8(%rip)        # 658cf0 <dynlock_lock_callback>
  424f07:	00 
  424f08:	74 6e                	je     424f78 <CRYPTO_add_lock+0xf8>
  424f0a:	89 d7                	mov    %edx,%edi
  424f0c:	e8 3f fa ff ff       	callq  424950 <CRYPTO_get_dynlock_value>
  424f11:	48 85 c0             	test   %rax,%rax
  424f14:	74 6f                	je     424f85 <CRYPTO_add_lock+0x105>
  424f16:	44 89 e1             	mov    %r12d,%ecx
  424f19:	48 89 ea             	mov    %rbp,%rdx
  424f1c:	48 89 c6             	mov    %rax,%rsi
  424f1f:	bf 09 00 00 00       	mov    $0x9,%edi
  424f24:	ff 15 c6 3d 23 00    	callq  *0x233dc6(%rip)        # 658cf0 <dynlock_lock_callback>
  424f2a:	44 89 f7             	mov    %r14d,%edi
  424f2d:	e8 de f8 ff ff       	callq  424810 <CRYPTO_destroy_dynlockid>
  424f32:	41 03 5d 00          	add    0x0(%r13),%ebx
  424f36:	48 83 3d b2 3d 23 00 	cmpq   $0x0,0x233db2(%rip)        # 658cf0 <dynlock_lock_callback>
  424f3d:	00 
  424f3e:	41 89 5d 00          	mov    %ebx,0x0(%r13)
  424f42:	74 aa                	je     424eee <CRYPTO_add_lock+0x6e>
  424f44:	44 89 f7             	mov    %r14d,%edi
  424f47:	e8 04 fa ff ff       	callq  424950 <CRYPTO_get_dynlock_value>
  424f4c:	48 85 c0             	test   %rax,%rax
  424f4f:	74 34                	je     424f85 <CRYPTO_add_lock+0x105>
  424f51:	44 89 e1             	mov    %r12d,%ecx
  424f54:	48 89 ea             	mov    %rbp,%rdx
  424f57:	48 89 c6             	mov    %rax,%rsi
  424f5a:	bf 0a 00 00 00       	mov    $0xa,%edi
  424f5f:	ff 15 8b 3d 23 00    	callq  *0x233d8b(%rip)        # 658cf0 <dynlock_lock_callback>
  424f65:	44 89 f7             	mov    %r14d,%edi
  424f68:	e8 a3 f8 ff ff       	callq  424810 <CRYPTO_destroy_dynlockid>
  424f6d:	e9 7c ff ff ff       	jmpq   424eee <CRYPTO_add_lock+0x6e>
  424f72:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  424f78:	41 03 5d 00          	add    0x0(%r13),%ebx
  424f7c:	41 89 5d 00          	mov    %ebx,0x0(%r13)
  424f80:	e9 69 ff ff ff       	jmpq   424eee <CRYPTO_add_lock+0x6e>
  424f85:	e8 b6 20 fe ff       	callq  407040 <CRYPTO_lock.part.0>
  424f8a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000424f90 <OPENSSL_stderr>:
  424f90:	48 8b 05 e9 39 23 00 	mov    0x2339e9(%rip),%rax        # 658980 <stderr@@GLIBC_2.2.5>
  424f97:	c3                   	retq   
  424f98:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  424f9f:	00 

0000000000424fa0 <default_malloc_ex>:
  424fa0:	48 8b 05 11 33 23 00 	mov    0x233311(%rip),%rax        # 6582b8 <malloc_func>
  424fa7:	ff e0                	jmpq   *%rax
  424fa9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000424fb0 <default_realloc_ex>:
  424fb0:	48 8b 05 f1 32 23 00 	mov    0x2332f1(%rip),%rax        # 6582a8 <realloc_func>
  424fb7:	ff e0                	jmpq   *%rax
  424fb9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000424fc0 <default_malloc_locked_ex>:
  424fc0:	48 8b 05 c9 32 23 00 	mov    0x2332c9(%rip),%rax        # 658290 <malloc_locked_func>
  424fc7:	ff e0                	jmpq   *%rax
  424fc9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000424fd0 <CRYPTO_set_mem_functions>:
  424fd0:	41 54                	push   %r12
  424fd2:	55                   	push   %rbp
  424fd3:	49 89 f4             	mov    %rsi,%r12
  424fd6:	53                   	push   %rbx
  424fd7:	48 89 d5             	mov    %rdx,%rbp
  424fda:	48 89 fb             	mov    %rdi,%rbx
  424fdd:	e8 ce 08 00 00       	callq  4258b0 <OPENSSL_init>
  424fe2:	8b 05 dc 32 23 00    	mov    0x2332dc(%rip),%eax        # 6582c4 <allow_customize>
  424fe8:	85 c0                	test   %eax,%eax
  424fea:	74 5e                	je     42504a <CRYPTO_set_mem_functions+0x7a>
  424fec:	48 85 db             	test   %rbx,%rbx
  424fef:	0f 94 c2             	sete   %dl
  424ff2:	4d 85 e4             	test   %r12,%r12
  424ff5:	0f 94 c0             	sete   %al
  424ff8:	08 c2                	or     %al,%dl
  424ffa:	75 54                	jne    425050 <CRYPTO_set_mem_functions+0x80>
  424ffc:	48 85 ed             	test   %rbp,%rbp
  424fff:	74 4f                	je     425050 <CRYPTO_set_mem_functions+0x80>
  425001:	48 89 1d b0 32 23 00 	mov    %rbx,0x2332b0(%rip)        # 6582b8 <malloc_func>
  425008:	48 c7 05 9d 32 23 00 	movq   $0x424fa0,0x23329d(%rip)        # 6582b0 <malloc_ex_func>
  42500f:	a0 4f 42 00 
  425013:	b8 01 00 00 00       	mov    $0x1,%eax
  425018:	4c 89 25 89 32 23 00 	mov    %r12,0x233289(%rip)        # 6582a8 <realloc_func>
  42501f:	48 c7 05 76 32 23 00 	movq   $0x424fb0,0x233276(%rip)        # 6582a0 <realloc_ex_func>
  425026:	b0 4f 42 00 
  42502a:	48 89 2d 67 32 23 00 	mov    %rbp,0x233267(%rip)        # 658298 <free_func>
  425031:	48 89 1d 58 32 23 00 	mov    %rbx,0x233258(%rip)        # 658290 <malloc_locked_func>
  425038:	48 c7 05 45 32 23 00 	movq   $0x424fc0,0x233245(%rip)        # 658288 <malloc_locked_ex_func>
  42503f:	c0 4f 42 00 
  425043:	48 89 2d 36 32 23 00 	mov    %rbp,0x233236(%rip)        # 658280 <free_locked_func>
  42504a:	5b                   	pop    %rbx
  42504b:	5d                   	pop    %rbp
  42504c:	41 5c                	pop    %r12
  42504e:	c3                   	retq   
  42504f:	90                   	nop
  425050:	31 c0                	xor    %eax,%eax
  425052:	eb f6                	jmp    42504a <CRYPTO_set_mem_functions+0x7a>
  425054:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
  42505b:	00 00 00 00 00 

0000000000425060 <CRYPTO_set_mem_ex_functions>:
  425060:	8b 05 5e 32 23 00    	mov    0x23325e(%rip),%eax        # 6582c4 <allow_customize>
  425066:	85 c0                	test   %eax,%eax
  425068:	74 6e                	je     4250d8 <CRYPTO_set_mem_ex_functions+0x78>
  42506a:	48 85 ff             	test   %rdi,%rdi
  42506d:	0f 94 c1             	sete   %cl
  425070:	48 85 f6             	test   %rsi,%rsi
  425073:	0f 94 c0             	sete   %al
  425076:	08 c1                	or     %al,%cl
  425078:	75 56                	jne    4250d0 <CRYPTO_set_mem_ex_functions+0x70>
  42507a:	48 85 d2             	test   %rdx,%rdx
  42507d:	74 51                	je     4250d0 <CRYPTO_set_mem_ex_functions+0x70>
  42507f:	48 c7 05 2e 32 23 00 	movq   $0x0,0x23322e(%rip)        # 6582b8 <malloc_func>
  425086:	00 00 00 00 
  42508a:	48 89 3d 1f 32 23 00 	mov    %rdi,0x23321f(%rip)        # 6582b0 <malloc_ex_func>
  425091:	b8 01 00 00 00       	mov    $0x1,%eax
  425096:	48 c7 05 07 32 23 00 	movq   $0x0,0x233207(%rip)        # 6582a8 <realloc_func>
  42509d:	00 00 00 00 
  4250a1:	48 89 35 f8 31 23 00 	mov    %rsi,0x2331f8(%rip)        # 6582a0 <realloc_ex_func>
  4250a8:	48 89 15 e9 31 23 00 	mov    %rdx,0x2331e9(%rip)        # 658298 <free_func>
  4250af:	48 c7 05 d6 31 23 00 	movq   $0x0,0x2331d6(%rip)        # 658290 <malloc_locked_func>
  4250b6:	00 00 00 00 
  4250ba:	48 89 3d c7 31 23 00 	mov    %rdi,0x2331c7(%rip)        # 658288 <malloc_locked_ex_func>
  4250c1:	48 89 15 b8 31 23 00 	mov    %rdx,0x2331b8(%rip)        # 658280 <free_locked_func>
  4250c8:	c3                   	retq   
  4250c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  4250d0:	31 c0                	xor    %eax,%eax
  4250d2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  4250d8:	f3 c3                	repz retq 
  4250da:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000004250e0 <CRYPTO_set_locked_mem_functions>:
  4250e0:	8b 05 de 31 23 00    	mov    0x2331de(%rip),%eax        # 6582c4 <allow_customize>
  4250e6:	85 c0                	test   %eax,%eax
  4250e8:	74 30                	je     42511a <CRYPTO_set_locked_mem_functions+0x3a>
  4250ea:	48 85 ff             	test   %rdi,%rdi
  4250ed:	74 29                	je     425118 <CRYPTO_set_locked_mem_functions+0x38>
  4250ef:	48 85 f6             	test   %rsi,%rsi
  4250f2:	74 24                	je     425118 <CRYPTO_set_locked_mem_functions+0x38>
  4250f4:	48 89 3d 95 31 23 00 	mov    %rdi,0x233195(%rip)        # 658290 <malloc_locked_func>
  4250fb:	48 c7 05 82 31 23 00 	movq   $0x424fc0,0x233182(%rip)        # 658288 <malloc_locked_ex_func>
  425102:	c0 4f 42 00 
  425106:	b8 01 00 00 00       	mov    $0x1,%eax
  42510b:	48 89 35 6e 31 23 00 	mov    %rsi,0x23316e(%rip)        # 658280 <free_locked_func>
  425112:	c3                   	retq   
  425113:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  425118:	31 c0                	xor    %eax,%eax
  42511a:	f3 c3                	repz retq 
  42511c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000425120 <CRYPTO_set_locked_mem_ex_functions>:
  425120:	8b 05 9e 31 23 00    	mov    0x23319e(%rip),%eax        # 6582c4 <allow_customize>
  425126:	85 c0                	test   %eax,%eax
  425128:	74 30                	je     42515a <CRYPTO_set_locked_mem_ex_functions+0x3a>
  42512a:	48 85 ff             	test   %rdi,%rdi
  42512d:	74 29                	je     425158 <CRYPTO_set_locked_mem_ex_functions+0x38>
  42512f:	48 85 f6             	test   %rsi,%rsi
  425132:	74 24                	je     425158 <CRYPTO_set_locked_mem_ex_functions+0x38>
  425134:	48 c7 05 51 31 23 00 	movq   $0x0,0x233151(%rip)        # 658290 <malloc_locked_func>
  42513b:	00 00 00 00 
  42513f:	48 89 3d 42 31 23 00 	mov    %rdi,0x233142(%rip)        # 658288 <malloc_locked_ex_func>
  425146:	b8 01 00 00 00       	mov    $0x1,%eax
  42514b:	48 89 35 46 31 23 00 	mov    %rsi,0x233146(%rip)        # 658298 <free_func>
  425152:	c3                   	retq   
  425153:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  425158:	31 c0                	xor    %eax,%eax
  42515a:	f3 c3                	repz retq 
  42515c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000425160 <CRYPTO_set_mem_debug_functions>:
  425160:	8b 05 5a 31 23 00    	mov    0x23315a(%rip),%eax        # 6582c0 <allow_customize_debug>
  425166:	85 c0                	test   %eax,%eax
  425168:	75 06                	jne    425170 <CRYPTO_set_mem_debug_functions+0x10>
  42516a:	c3                   	retq   
  42516b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  425170:	41 56                	push   %r14
  425172:	41 55                	push   %r13
  425174:	49 89 fe             	mov    %rdi,%r14
  425177:	41 54                	push   %r12
  425179:	55                   	push   %rbp
  42517a:	49 89 d4             	mov    %rdx,%r12
  42517d:	53                   	push   %rbx
  42517e:	48 89 cd             	mov    %rcx,%rbp
  425181:	4c 89 c3             	mov    %r8,%rbx
  425184:	49 89 f5             	mov    %rsi,%r13
  425187:	e8 24 07 00 00       	callq  4258b0 <OPENSSL_init>
  42518c:	4c 89 35 bd 3b 23 00 	mov    %r14,0x233bbd(%rip)        # 658d50 <malloc_debug_func>
  425193:	4c 89 2d ae 3b 23 00 	mov    %r13,0x233bae(%rip)        # 658d48 <realloc_debug_func>
  42519a:	b8 01 00 00 00       	mov    $0x1,%eax
  42519f:	4c 89 25 9a 3b 23 00 	mov    %r12,0x233b9a(%rip)        # 658d40 <free_debug_func>
  4251a6:	48 89 2d 8b 3b 23 00 	mov    %rbp,0x233b8b(%rip)        # 658d38 <set_debug_options_func>
  4251ad:	48 89 1d 7c 3b 23 00 	mov    %rbx,0x233b7c(%rip)        # 658d30 <get_debug_options_func>
  4251b4:	5b                   	pop    %rbx
  4251b5:	5d                   	pop    %rbp
  4251b6:	41 5c                	pop    %r12
  4251b8:	41 5d                	pop    %r13
  4251ba:	41 5e                	pop    %r14
  4251bc:	c3                   	retq   
  4251bd:	0f 1f 00             	nopl   (%rax)

00000000004251c0 <CRYPTO_get_mem_functions>:
  4251c0:	48 85 ff             	test   %rdi,%rdi
  4251c3:	74 1b                	je     4251e0 <CRYPTO_get_mem_functions+0x20>
  4251c5:	48 81 3d e0 30 23 00 	cmpq   $0x424fa0,0x2330e0(%rip)        # 6582b0 <malloc_ex_func>
  4251cc:	a0 4f 42 00 
  4251d0:	b8 00 00 00 00       	mov    $0x0,%eax
  4251d5:	48 0f 44 05 db 30 23 	cmove  0x2330db(%rip),%rax        # 6582b8 <malloc_func>
  4251dc:	00 
  4251dd:	48 89 07             	mov    %rax,(%rdi)
  4251e0:	48 85 f6             	test   %rsi,%rsi
  4251e3:	74 1b                	je     425200 <CRYPTO_get_mem_functions+0x40>
  4251e5:	48 81 3d b0 30 23 00 	cmpq   $0x424fb0,0x2330b0(%rip)        # 6582a0 <realloc_ex_func>
  4251ec:	b0 4f 42 00 
  4251f0:	b8 00 00 00 00       	mov    $0x0,%eax
  4251f5:	48 0f 44 05 ab 30 23 	cmove  0x2330ab(%rip),%rax        # 6582a8 <realloc_func>
  4251fc:	00 
  4251fd:	48 89 06             	mov    %rax,(%rsi)
  425200:	48 85 d2             	test   %rdx,%rdx
  425203:	74 0a                	je     42520f <CRYPTO_get_mem_functions+0x4f>
  425205:	48 8b 05 8c 30 23 00 	mov    0x23308c(%rip),%rax        # 658298 <free_func>
  42520c:	48 89 02             	mov    %rax,(%rdx)
  42520f:	f3 c3                	repz retq 
  425211:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  425218:	0f 1f 84 00 00 00 00 
  42521f:	00 

0000000000425220 <CRYPTO_get_mem_ex_functions>:
  425220:	48 85 ff             	test   %rdi,%rdi
  425223:	74 19                	je     42523e <CRYPTO_get_mem_ex_functions+0x1e>
  425225:	48 8b 05 84 30 23 00 	mov    0x233084(%rip),%rax        # 6582b0 <malloc_ex_func>
  42522c:	b9 00 00 00 00       	mov    $0x0,%ecx
  425231:	48 3d a0 4f 42 00    	cmp    $0x424fa0,%rax
  425237:	48 0f 44 c1          	cmove  %rcx,%rax
  42523b:	48 89 07             	mov    %rax,(%rdi)
  42523e:	48 85 f6             	test   %rsi,%rsi
  425241:	74 19                	je     42525c <CRYPTO_get_mem_ex_functions+0x3c>
  425243:	48 8b 05 56 30 23 00 	mov    0x233056(%rip),%rax        # 6582a0 <realloc_ex_func>
  42524a:	b9 00 00 00 00       	mov    $0x0,%ecx
  42524f:	48 3d b0 4f 42 00    	cmp    $0x424fb0,%rax
  425255:	48 0f 44 c1          	cmove  %rcx,%rax
  425259:	48 89 06             	mov    %rax,(%rsi)
  42525c:	48 85 d2             	test   %rdx,%rdx
  42525f:	74 0a                	je     42526b <CRYPTO_get_mem_ex_functions+0x4b>
  425261:	48 8b 05 30 30 23 00 	mov    0x233030(%rip),%rax        # 658298 <free_func>
  425268:	48 89 02             	mov    %rax,(%rdx)
  42526b:	f3 c3                	repz retq 
  42526d:	0f 1f 00             	nopl   (%rax)

0000000000425270 <CRYPTO_get_locked_mem_functions>:
  425270:	48 85 ff             	test   %rdi,%rdi
  425273:	74 1b                	je     425290 <CRYPTO_get_locked_mem_functions+0x20>
  425275:	48 81 3d 08 30 23 00 	cmpq   $0x424fc0,0x233008(%rip)        # 658288 <malloc_locked_ex_func>
  42527c:	c0 4f 42 00 
  425280:	b8 00 00 00 00       	mov    $0x0,%eax
  425285:	48 0f 44 05 03 30 23 	cmove  0x233003(%rip),%rax        # 658290 <malloc_locked_func>
  42528c:	00 
  42528d:	48 89 07             	mov    %rax,(%rdi)
  425290:	48 85 f6             	test   %rsi,%rsi
  425293:	74 0a                	je     42529f <CRYPTO_get_locked_mem_functions+0x2f>
  425295:	48 8b 05 e4 2f 23 00 	mov    0x232fe4(%rip),%rax        # 658280 <free_locked_func>
  42529c:	48 89 06             	mov    %rax,(%rsi)
  42529f:	f3 c3                	repz retq 
  4252a1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  4252a8:	0f 1f 84 00 00 00 00 
  4252af:	00 

00000000004252b0 <CRYPTO_get_locked_mem_ex_functions>:
  4252b0:	48 85 ff             	test   %rdi,%rdi
  4252b3:	74 19                	je     4252ce <CRYPTO_get_locked_mem_ex_functions+0x1e>
  4252b5:	48 8b 05 cc 2f 23 00 	mov    0x232fcc(%rip),%rax        # 658288 <malloc_locked_ex_func>
  4252bc:	ba 00 00 00 00       	mov    $0x0,%edx
  4252c1:	48 3d c0 4f 42 00    	cmp    $0x424fc0,%rax
  4252c7:	48 0f 44 c2          	cmove  %rdx,%rax
  4252cb:	48 89 07             	mov    %rax,(%rdi)
  4252ce:	48 85 f6             	test   %rsi,%rsi
  4252d1:	74 0a                	je     4252dd <CRYPTO_get_locked_mem_ex_functions+0x2d>
  4252d3:	48 8b 05 a6 2f 23 00 	mov    0x232fa6(%rip),%rax        # 658280 <free_locked_func>
  4252da:	48 89 06             	mov    %rax,(%rsi)
  4252dd:	f3 c3                	repz retq 
  4252df:	90                   	nop

00000000004252e0 <CRYPTO_get_mem_debug_functions>:
  4252e0:	48 85 ff             	test   %rdi,%rdi
  4252e3:	74 0a                	je     4252ef <CRYPTO_get_mem_debug_functions+0xf>
  4252e5:	48 8b 05 64 3a 23 00 	mov    0x233a64(%rip),%rax        # 658d50 <malloc_debug_func>
  4252ec:	48 89 07             	mov    %rax,(%rdi)
  4252ef:	48 85 f6             	test   %rsi,%rsi
  4252f2:	74 0a                	je     4252fe <CRYPTO_get_mem_debug_functions+0x1e>
  4252f4:	48 8b 05 4d 3a 23 00 	mov    0x233a4d(%rip),%rax        # 658d48 <realloc_debug_func>
  4252fb:	48 89 06             	mov    %rax,(%rsi)
  4252fe:	48 85 d2             	test   %rdx,%rdx
  425301:	74 0a                	je     42530d <CRYPTO_get_mem_debug_functions+0x2d>
  425303:	48 8b 05 36 3a 23 00 	mov    0x233a36(%rip),%rax        # 658d40 <free_debug_func>
  42530a:	48 89 02             	mov    %rax,(%rdx)
  42530d:	48 85 c9             	test   %rcx,%rcx
  425310:	74 0a                	je     42531c <CRYPTO_get_mem_debug_functions+0x3c>
  425312:	48 8b 05 1f 3a 23 00 	mov    0x233a1f(%rip),%rax        # 658d38 <set_debug_options_func>
  425319:	48 89 01             	mov    %rax,(%rcx)
  42531c:	4d 85 c0             	test   %r8,%r8
  42531f:	74 0a                	je     42532b <CRYPTO_get_mem_debug_functions+0x4b>
  425321:	48 8b 05 08 3a 23 00 	mov    0x233a08(%rip),%rax        # 658d30 <get_debug_options_func>
  425328:	49 89 00             	mov    %rax,(%r8)
  42532b:	f3 c3                	repz retq 
  42532d:	0f 1f 00             	nopl   (%rax)

0000000000425330 <CRYPTO_malloc_locked>:
  425330:	41 55                	push   %r13
  425332:	41 54                	push   %r12
  425334:	55                   	push   %rbp
  425335:	53                   	push   %rbx
  425336:	48 83 ec 08          	sub    $0x8,%rsp
  42533a:	85 ff                	test   %edi,%edi
  42533c:	7e 7a                	jle    4253b8 <CRYPTO_malloc_locked+0x88>
  42533e:	48 8b 05 0b 3a 23 00 	mov    0x233a0b(%rip),%rax        # 658d50 <malloc_debug_func>
  425345:	41 89 d4             	mov    %edx,%r12d
  425348:	48 89 f5             	mov    %rsi,%rbp
  42534b:	89 fb                	mov    %edi,%ebx
  42534d:	c7 05 6d 2f 23 00 00 	movl   $0x0,0x232f6d(%rip)        # 6582c4 <allow_customize>
  425354:	00 00 00 
  425357:	48 85 c0             	test   %rax,%rax
  42535a:	74 18                	je     425374 <CRYPTO_malloc_locked+0x44>
  42535c:	89 d1                	mov    %edx,%ecx
  42535e:	c7 05 58 2f 23 00 00 	movl   $0x0,0x232f58(%rip)        # 6582c0 <allow_customize_debug>
  425365:	00 00 00 
  425368:	48 89 f2             	mov    %rsi,%rdx
  42536b:	45 31 c0             	xor    %r8d,%r8d
  42536e:	89 fe                	mov    %edi,%esi
  425370:	31 ff                	xor    %edi,%edi
  425372:	ff d0                	callq  *%rax
  425374:	48 63 fb             	movslq %ebx,%rdi
  425377:	44 89 e2             	mov    %r12d,%edx
  42537a:	48 89 ee             	mov    %rbp,%rsi
  42537d:	ff 15 05 2f 23 00    	callq  *0x232f05(%rip)        # 658288 <malloc_locked_ex_func>
  425383:	4c 8b 0d c6 39 23 00 	mov    0x2339c6(%rip),%r9        # 658d50 <malloc_debug_func>
  42538a:	49 89 c5             	mov    %rax,%r13
  42538d:	4d 85 c9             	test   %r9,%r9
  425390:	74 14                	je     4253a6 <CRYPTO_malloc_locked+0x76>
  425392:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  425398:	44 89 e1             	mov    %r12d,%ecx
  42539b:	48 89 ea             	mov    %rbp,%rdx
  42539e:	89 de                	mov    %ebx,%esi
  4253a0:	48 89 c7             	mov    %rax,%rdi
  4253a3:	41 ff d1             	callq  *%r9
  4253a6:	48 83 c4 08          	add    $0x8,%rsp
  4253aa:	4c 89 e8             	mov    %r13,%rax
  4253ad:	5b                   	pop    %rbx
  4253ae:	5d                   	pop    %rbp
  4253af:	41 5c                	pop    %r12
  4253b1:	41 5d                	pop    %r13
  4253b3:	c3                   	retq   
  4253b4:	0f 1f 40 00          	nopl   0x0(%rax)
  4253b8:	45 31 ed             	xor    %r13d,%r13d
  4253bb:	eb e9                	jmp    4253a6 <CRYPTO_malloc_locked+0x76>
  4253bd:	0f 1f 00             	nopl   (%rax)

00000000004253c0 <CRYPTO_free_locked>:
  4253c0:	48 8b 05 79 39 23 00 	mov    0x233979(%rip),%rax        # 658d40 <free_debug_func>
  4253c7:	53                   	push   %rbx
  4253c8:	48 89 fb             	mov    %rdi,%rbx
  4253cb:	48 85 c0             	test   %rax,%rax
  4253ce:	74 04                	je     4253d4 <CRYPTO_free_locked+0x14>
  4253d0:	31 f6                	xor    %esi,%esi
  4253d2:	ff d0                	callq  *%rax
  4253d4:	48 89 df             	mov    %rbx,%rdi
  4253d7:	ff 15 a3 2e 23 00    	callq  *0x232ea3(%rip)        # 658280 <free_locked_func>
  4253dd:	48 8b 05 5c 39 23 00 	mov    0x23395c(%rip),%rax        # 658d40 <free_debug_func>
  4253e4:	48 85 c0             	test   %rax,%rax
  4253e7:	74 0f                	je     4253f8 <CRYPTO_free_locked+0x38>
  4253e9:	5b                   	pop    %rbx
  4253ea:	be 01 00 00 00       	mov    $0x1,%esi
  4253ef:	31 ff                	xor    %edi,%edi
  4253f1:	ff e0                	jmpq   *%rax
  4253f3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4253f8:	5b                   	pop    %rbx
  4253f9:	c3                   	retq   
  4253fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000425400 <CRYPTO_malloc>:
  425400:	41 55                	push   %r13
  425402:	41 54                	push   %r12
  425404:	55                   	push   %rbp
  425405:	53                   	push   %rbx
  425406:	48 83 ec 08          	sub    $0x8,%rsp
  42540a:	85 ff                	test   %edi,%edi
  42540c:	7e 7a                	jle    425488 <CRYPTO_malloc+0x88>
  42540e:	48 8b 05 3b 39 23 00 	mov    0x23393b(%rip),%rax        # 658d50 <malloc_debug_func>
  425415:	41 89 d4             	mov    %edx,%r12d
  425418:	48 89 f5             	mov    %rsi,%rbp
  42541b:	89 fb                	mov    %edi,%ebx
  42541d:	c7 05 9d 2e 23 00 00 	movl   $0x0,0x232e9d(%rip)        # 6582c4 <allow_customize>
  425424:	00 00 00 
  425427:	48 85 c0             	test   %rax,%rax
  42542a:	74 18                	je     425444 <CRYPTO_malloc+0x44>
  42542c:	89 d1                	mov    %edx,%ecx
  42542e:	c7 05 88 2e 23 00 00 	movl   $0x0,0x232e88(%rip)        # 6582c0 <allow_customize_debug>
  425435:	00 00 00 
  425438:	48 89 f2             	mov    %rsi,%rdx
  42543b:	45 31 c0             	xor    %r8d,%r8d
  42543e:	89 fe                	mov    %edi,%esi
  425440:	31 ff                	xor    %edi,%edi
  425442:	ff d0                	callq  *%rax
  425444:	48 63 fb             	movslq %ebx,%rdi
  425447:	44 89 e2             	mov    %r12d,%edx
  42544a:	48 89 ee             	mov    %rbp,%rsi
  42544d:	ff 15 5d 2e 23 00    	callq  *0x232e5d(%rip)        # 6582b0 <malloc_ex_func>
  425453:	4c 8b 0d f6 38 23 00 	mov    0x2338f6(%rip),%r9        # 658d50 <malloc_debug_func>
  42545a:	49 89 c5             	mov    %rax,%r13
  42545d:	4d 85 c9             	test   %r9,%r9
  425460:	74 14                	je     425476 <CRYPTO_malloc+0x76>
  425462:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  425468:	44 89 e1             	mov    %r12d,%ecx
  42546b:	48 89 ea             	mov    %rbp,%rdx
  42546e:	89 de                	mov    %ebx,%esi
  425470:	48 89 c7             	mov    %rax,%rdi
  425473:	41 ff d1             	callq  *%r9
  425476:	48 83 c4 08          	add    $0x8,%rsp
  42547a:	4c 89 e8             	mov    %r13,%rax
  42547d:	5b                   	pop    %rbx
  42547e:	5d                   	pop    %rbp
  42547f:	41 5c                	pop    %r12
  425481:	41 5d                	pop    %r13
  425483:	c3                   	retq   
  425484:	0f 1f 40 00          	nopl   0x0(%rax)
  425488:	45 31 ed             	xor    %r13d,%r13d
  42548b:	eb e9                	jmp    425476 <CRYPTO_malloc+0x76>
  42548d:	0f 1f 00             	nopl   (%rax)

0000000000425490 <CRYPTO_strdup>:
  425490:	41 56                	push   %r14
  425492:	41 55                	push   %r13
  425494:	49 89 fe             	mov    %rdi,%r14
  425497:	41 54                	push   %r12
  425499:	55                   	push   %rbp
  42549a:	49 89 f4             	mov    %rsi,%r12
  42549d:	53                   	push   %rbx
  42549e:	41 89 d5             	mov    %edx,%r13d
  4254a1:	e8 0a 19 fe ff       	callq  406db0 <strlen@plt>
  4254a6:	8d 58 01             	lea    0x1(%rax),%ebx
  4254a9:	85 db                	test   %ebx,%ebx
  4254ab:	7e 7b                	jle    425528 <CRYPTO_strdup+0x98>
  4254ad:	48 8b 05 9c 38 23 00 	mov    0x23389c(%rip),%rax        # 658d50 <malloc_debug_func>
  4254b4:	c7 05 06 2e 23 00 00 	movl   $0x0,0x232e06(%rip)        # 6582c4 <allow_customize>
  4254bb:	00 00 00 
  4254be:	48 85 c0             	test   %rax,%rax
  4254c1:	74 19                	je     4254dc <CRYPTO_strdup+0x4c>
  4254c3:	c7 05 f3 2d 23 00 00 	movl   $0x0,0x232df3(%rip)        # 6582c0 <allow_customize_debug>
  4254ca:	00 00 00 
  4254cd:	45 31 c0             	xor    %r8d,%r8d
  4254d0:	44 89 e9             	mov    %r13d,%ecx
  4254d3:	4c 89 e2             	mov    %r12,%rdx
  4254d6:	89 de                	mov    %ebx,%esi
  4254d8:	31 ff                	xor    %edi,%edi
  4254da:	ff d0                	callq  *%rax
  4254dc:	48 63 fb             	movslq %ebx,%rdi
  4254df:	44 89 ea             	mov    %r13d,%edx
  4254e2:	4c 89 e6             	mov    %r12,%rsi
  4254e5:	ff 15 c5 2d 23 00    	callq  *0x232dc5(%rip)        # 6582b0 <malloc_ex_func>
  4254eb:	4c 8b 0d 5e 38 23 00 	mov    0x23385e(%rip),%r9        # 658d50 <malloc_debug_func>
  4254f2:	48 89 c5             	mov    %rax,%rbp
  4254f5:	4d 85 c9             	test   %r9,%r9
  4254f8:	74 14                	je     42550e <CRYPTO_strdup+0x7e>
  4254fa:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  425500:	44 89 e9             	mov    %r13d,%ecx
  425503:	4c 89 e2             	mov    %r12,%rdx
  425506:	89 de                	mov    %ebx,%esi
  425508:	48 89 c7             	mov    %rax,%rdi
  42550b:	41 ff d1             	callq  *%r9
  42550e:	4c 89 f6             	mov    %r14,%rsi
  425511:	48 89 ef             	mov    %rbp,%rdi
  425514:	e8 d7 19 fe ff       	callq  406ef0 <strcpy@plt>
  425519:	5b                   	pop    %rbx
  42551a:	48 89 e8             	mov    %rbp,%rax
  42551d:	5d                   	pop    %rbp
  42551e:	41 5c                	pop    %r12
  425520:	41 5d                	pop    %r13
  425522:	41 5e                	pop    %r14
  425524:	c3                   	retq   
  425525:	0f 1f 00             	nopl   (%rax)
  425528:	31 ed                	xor    %ebp,%ebp
  42552a:	eb e2                	jmp    42550e <CRYPTO_strdup+0x7e>
  42552c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000425530 <CRYPTO_realloc>:
  425530:	48 85 ff             	test   %rdi,%rdi
  425533:	41 56                	push   %r14
  425535:	49 89 fe             	mov    %rdi,%r14
  425538:	41 55                	push   %r13
  42553a:	41 89 cd             	mov    %ecx,%r13d
  42553d:	41 54                	push   %r12
  42553f:	49 89 d4             	mov    %rdx,%r12
  425542:	55                   	push   %rbp
  425543:	89 f5                	mov    %esi,%ebp
  425545:	53                   	push   %rbx
  425546:	74 68                	je     4255b0 <CRYPTO_realloc+0x80>
  425548:	85 f6                	test   %esi,%esi
  42554a:	0f 8e c0 00 00 00    	jle    425610 <CRYPTO_realloc+0xe0>
  425550:	48 8b 05 f1 37 23 00 	mov    0x2337f1(%rip),%rax        # 658d48 <realloc_debug_func>
  425557:	48 85 c0             	test   %rax,%rax
  42555a:	74 0f                	je     42556b <CRYPTO_realloc+0x3b>
  42555c:	41 89 c8             	mov    %ecx,%r8d
  42555f:	45 31 c9             	xor    %r9d,%r9d
  425562:	48 89 d1             	mov    %rdx,%rcx
  425565:	89 f2                	mov    %esi,%edx
  425567:	31 f6                	xor    %esi,%esi
  425569:	ff d0                	callq  *%rax
  42556b:	48 63 f5             	movslq %ebp,%rsi
  42556e:	44 89 e9             	mov    %r13d,%ecx
  425571:	4c 89 e2             	mov    %r12,%rdx
  425574:	4c 89 f7             	mov    %r14,%rdi
  425577:	ff 15 23 2d 23 00    	callq  *0x232d23(%rip)        # 6582a0 <realloc_ex_func>
  42557d:	4c 8b 15 c4 37 23 00 	mov    0x2337c4(%rip),%r10        # 658d48 <realloc_debug_func>
  425584:	48 89 c3             	mov    %rax,%rbx
  425587:	4d 85 d2             	test   %r10,%r10
  42558a:	74 17                	je     4255a3 <CRYPTO_realloc+0x73>
  42558c:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  425592:	45 89 e8             	mov    %r13d,%r8d
  425595:	4c 89 e1             	mov    %r12,%rcx
  425598:	89 ea                	mov    %ebp,%edx
  42559a:	48 89 c6             	mov    %rax,%rsi
  42559d:	4c 89 f7             	mov    %r14,%rdi
  4255a0:	41 ff d2             	callq  *%r10
  4255a3:	48 89 d8             	mov    %rbx,%rax
  4255a6:	5b                   	pop    %rbx
  4255a7:	5d                   	pop    %rbp
  4255a8:	41 5c                	pop    %r12
  4255aa:	41 5d                	pop    %r13
  4255ac:	41 5e                	pop    %r14
  4255ae:	c3                   	retq   
  4255af:	90                   	nop
  4255b0:	85 f6                	test   %esi,%esi
  4255b2:	7e 5c                	jle    425610 <CRYPTO_realloc+0xe0>
  4255b4:	48 8b 05 95 37 23 00 	mov    0x233795(%rip),%rax        # 658d50 <malloc_debug_func>
  4255bb:	c7 05 ff 2c 23 00 00 	movl   $0x0,0x232cff(%rip)        # 6582c4 <allow_customize>
  4255c2:	00 00 00 
  4255c5:	48 85 c0             	test   %rax,%rax
  4255c8:	74 11                	je     4255db <CRYPTO_realloc+0xab>
  4255ca:	c7 05 ec 2c 23 00 00 	movl   $0x0,0x232cec(%rip)        # 6582c0 <allow_customize_debug>
  4255d1:	00 00 00 
  4255d4:	45 31 c0             	xor    %r8d,%r8d
  4255d7:	31 ff                	xor    %edi,%edi
  4255d9:	ff d0                	callq  *%rax
  4255db:	48 63 fd             	movslq %ebp,%rdi
  4255de:	44 89 ea             	mov    %r13d,%edx
  4255e1:	4c 89 e6             	mov    %r12,%rsi
  4255e4:	ff 15 c6 2c 23 00    	callq  *0x232cc6(%rip)        # 6582b0 <malloc_ex_func>
  4255ea:	4c 8b 0d 5f 37 23 00 	mov    0x23375f(%rip),%r9        # 658d50 <malloc_debug_func>
  4255f1:	48 89 c3             	mov    %rax,%rbx
  4255f4:	4d 85 c9             	test   %r9,%r9
  4255f7:	74 aa                	je     4255a3 <CRYPTO_realloc+0x73>
  4255f9:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  4255ff:	44 89 e9             	mov    %r13d,%ecx
  425602:	4c 89 e2             	mov    %r12,%rdx
  425605:	89 ee                	mov    %ebp,%esi
  425607:	48 89 c7             	mov    %rax,%rdi
  42560a:	41 ff d1             	callq  *%r9
  42560d:	eb 94                	jmp    4255a3 <CRYPTO_realloc+0x73>
  42560f:	90                   	nop
  425610:	31 db                	xor    %ebx,%ebx
  425612:	eb 8f                	jmp    4255a3 <CRYPTO_realloc+0x73>
  425614:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
  42561b:	00 00 00 00 00 

0000000000425620 <CRYPTO_realloc_clean>:
  425620:	41 57                	push   %r15
  425622:	41 56                	push   %r14
  425624:	4c 63 fe             	movslq %esi,%r15
  425627:	41 55                	push   %r13
  425629:	41 54                	push   %r12
  42562b:	49 89 fe             	mov    %rdi,%r14
  42562e:	55                   	push   %rbp
  42562f:	53                   	push   %rbx
  425630:	89 d5                	mov    %edx,%ebp
  425632:	49 89 cc             	mov    %rcx,%r12
  425635:	45 89 c5             	mov    %r8d,%r13d
  425638:	48 83 ec 08          	sub    $0x8,%rsp
  42563c:	48 85 ff             	test   %rdi,%rdi
  42563f:	0f 84 a3 00 00 00    	je     4256e8 <CRYPTO_realloc_clean+0xc8>
  425645:	85 d2                	test   %edx,%edx
  425647:	0f 8e 93 00 00 00    	jle    4256e0 <CRYPTO_realloc_clean+0xc0>
  42564d:	44 39 fa             	cmp    %r15d,%edx
  425650:	0f 8c 8a 00 00 00    	jl     4256e0 <CRYPTO_realloc_clean+0xc0>
  425656:	48 8b 05 eb 36 23 00 	mov    0x2336eb(%rip),%rax        # 658d48 <realloc_debug_func>
  42565d:	48 85 c0             	test   %rax,%rax
  425660:	74 07                	je     425669 <CRYPTO_realloc_clean+0x49>
  425662:	45 31 c9             	xor    %r9d,%r9d
  425665:	31 f6                	xor    %esi,%esi
  425667:	ff d0                	callq  *%rax
  425669:	48 63 fd             	movslq %ebp,%rdi
  42566c:	44 89 ea             	mov    %r13d,%edx
  42566f:	4c 89 e6             	mov    %r12,%rsi
  425672:	ff 15 38 2c 23 00    	callq  *0x232c38(%rip)        # 6582b0 <malloc_ex_func>
  425678:	48 85 c0             	test   %rax,%rax
  42567b:	48 89 c3             	mov    %rax,%rbx
  42567e:	74 22                	je     4256a2 <CRYPTO_realloc_clean+0x82>
  425680:	4c 89 fa             	mov    %r15,%rdx
  425683:	4c 89 f6             	mov    %r14,%rsi
  425686:	48 89 c7             	mov    %rax,%rdi
  425689:	e8 62 19 fe ff       	callq  406ff0 <memcpy@plt>
  42568e:	4c 89 f7             	mov    %r14,%rdi
  425691:	4c 89 fe             	mov    %r15,%rsi
  425694:	e8 d7 03 00 00       	callq  425a70 <OPENSSL_cleanse>
  425699:	4c 89 f7             	mov    %r14,%rdi
  42569c:	ff 15 f6 2b 23 00    	callq  *0x232bf6(%rip)        # 658298 <free_func>
  4256a2:	48 8b 05 9f 36 23 00 	mov    0x23369f(%rip),%rax        # 658d48 <realloc_debug_func>
  4256a9:	48 85 c0             	test   %rax,%rax
  4256ac:	74 16                	je     4256c4 <CRYPTO_realloc_clean+0xa4>
  4256ae:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  4256b4:	45 89 e8             	mov    %r13d,%r8d
  4256b7:	4c 89 e1             	mov    %r12,%rcx
  4256ba:	89 ea                	mov    %ebp,%edx
  4256bc:	48 89 de             	mov    %rbx,%rsi
  4256bf:	4c 89 f7             	mov    %r14,%rdi
  4256c2:	ff d0                	callq  *%rax
  4256c4:	48 83 c4 08          	add    $0x8,%rsp
  4256c8:	48 89 d8             	mov    %rbx,%rax
  4256cb:	5b                   	pop    %rbx
  4256cc:	5d                   	pop    %rbp
  4256cd:	41 5c                	pop    %r12
  4256cf:	41 5d                	pop    %r13
  4256d1:	41 5e                	pop    %r14
  4256d3:	41 5f                	pop    %r15
  4256d5:	c3                   	retq   
  4256d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4256dd:	00 00 00 
  4256e0:	31 db                	xor    %ebx,%ebx
  4256e2:	eb e0                	jmp    4256c4 <CRYPTO_realloc_clean+0xa4>
  4256e4:	0f 1f 40 00          	nopl   0x0(%rax)
  4256e8:	85 d2                	test   %edx,%edx
  4256ea:	7e f4                	jle    4256e0 <CRYPTO_realloc_clean+0xc0>
  4256ec:	48 8b 05 5d 36 23 00 	mov    0x23365d(%rip),%rax        # 658d50 <malloc_debug_func>
  4256f3:	c7 05 c7 2b 23 00 00 	movl   $0x0,0x232bc7(%rip)        # 6582c4 <allow_customize>
  4256fa:	00 00 00 
  4256fd:	48 85 c0             	test   %rax,%rax
  425700:	74 19                	je     42571b <CRYPTO_realloc_clean+0xfb>
  425702:	c7 05 b4 2b 23 00 00 	movl   $0x0,0x232bb4(%rip)        # 6582c0 <allow_customize_debug>
  425709:	00 00 00 
  42570c:	45 31 c0             	xor    %r8d,%r8d
  42570f:	44 89 e9             	mov    %r13d,%ecx
  425712:	4c 89 e2             	mov    %r12,%rdx
  425715:	89 ee                	mov    %ebp,%esi
  425717:	31 ff                	xor    %edi,%edi
  425719:	ff d0                	callq  *%rax
  42571b:	48 63 fd             	movslq %ebp,%rdi
  42571e:	44 89 ea             	mov    %r13d,%edx
  425721:	4c 89 e6             	mov    %r12,%rsi
  425724:	ff 15 86 2b 23 00    	callq  *0x232b86(%rip)        # 6582b0 <malloc_ex_func>
  42572a:	48 89 c3             	mov    %rax,%rbx
  42572d:	48 8b 05 1c 36 23 00 	mov    0x23361c(%rip),%rax        # 658d50 <malloc_debug_func>
  425734:	48 85 c0             	test   %rax,%rax
  425737:	74 8b                	je     4256c4 <CRYPTO_realloc_clean+0xa4>
  425739:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  42573f:	44 89 e9             	mov    %r13d,%ecx
  425742:	4c 89 e2             	mov    %r12,%rdx
  425745:	89 ee                	mov    %ebp,%esi
  425747:	48 89 df             	mov    %rbx,%rdi
  42574a:	ff d0                	callq  *%rax
  42574c:	e9 73 ff ff ff       	jmpq   4256c4 <CRYPTO_realloc_clean+0xa4>
  425751:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  425758:	0f 1f 84 00 00 00 00 
  42575f:	00 

0000000000425760 <CRYPTO_free>:
  425760:	48 8b 05 d9 35 23 00 	mov    0x2335d9(%rip),%rax        # 658d40 <free_debug_func>
  425767:	53                   	push   %rbx
  425768:	48 89 fb             	mov    %rdi,%rbx
  42576b:	48 85 c0             	test   %rax,%rax
  42576e:	74 04                	je     425774 <CRYPTO_free+0x14>
  425770:	31 f6                	xor    %esi,%esi
  425772:	ff d0                	callq  *%rax
  425774:	48 89 df             	mov    %rbx,%rdi
  425777:	ff 15 1b 2b 23 00    	callq  *0x232b1b(%rip)        # 658298 <free_func>
  42577d:	48 8b 05 bc 35 23 00 	mov    0x2335bc(%rip),%rax        # 658d40 <free_debug_func>
  425784:	48 85 c0             	test   %rax,%rax
  425787:	74 0f                	je     425798 <CRYPTO_free+0x38>
  425789:	5b                   	pop    %rbx
  42578a:	be 01 00 00 00       	mov    $0x1,%esi
  42578f:	31 ff                	xor    %edi,%edi
  425791:	ff e0                	jmpq   *%rax
  425793:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  425798:	5b                   	pop    %rbx
  425799:	c3                   	retq   
  42579a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000004257a0 <CRYPTO_remalloc>:
  4257a0:	55                   	push   %rbp
  4257a1:	53                   	push   %rbx
  4257a2:	89 f5                	mov    %esi,%ebp
  4257a4:	48 89 fb             	mov    %rdi,%rbx
  4257a7:	48 83 ec 08          	sub    $0x8,%rsp
  4257ab:	48 85 ff             	test   %rdi,%rdi
  4257ae:	74 2e                	je     4257de <CRYPTO_remalloc+0x3e>
  4257b0:	48 8b 05 89 35 23 00 	mov    0x233589(%rip),%rax        # 658d40 <free_debug_func>
  4257b7:	48 85 c0             	test   %rax,%rax
  4257ba:	74 04                	je     4257c0 <CRYPTO_remalloc+0x20>
  4257bc:	31 f6                	xor    %esi,%esi
  4257be:	ff d0                	callq  *%rax
  4257c0:	48 89 df             	mov    %rbx,%rdi
  4257c3:	ff 15 cf 2a 23 00    	callq  *0x232acf(%rip)        # 658298 <free_func>
  4257c9:	48 8b 05 70 35 23 00 	mov    0x233570(%rip),%rax        # 658d40 <free_debug_func>
  4257d0:	48 85 c0             	test   %rax,%rax
  4257d3:	74 09                	je     4257de <CRYPTO_remalloc+0x3e>
  4257d5:	be 01 00 00 00       	mov    $0x1,%esi
  4257da:	31 ff                	xor    %edi,%edi
  4257dc:	ff d0                	callq  *%rax
  4257de:	85 ed                	test   %ebp,%ebp
  4257e0:	7e 7e                	jle    425860 <CRYPTO_remalloc+0xc0>
  4257e2:	48 8b 05 67 35 23 00 	mov    0x233567(%rip),%rax        # 658d50 <malloc_debug_func>
  4257e9:	c7 05 d1 2a 23 00 00 	movl   $0x0,0x232ad1(%rip)        # 6582c4 <allow_customize>
  4257f0:	00 00 00 
  4257f3:	48 85 c0             	test   %rax,%rax
  4257f6:	74 1d                	je     425815 <CRYPTO_remalloc+0x75>
  4257f8:	c7 05 be 2a 23 00 00 	movl   $0x0,0x232abe(%rip)        # 6582c0 <allow_customize_debug>
  4257ff:	00 00 00 
  425802:	45 31 c0             	xor    %r8d,%r8d
  425805:	b9 95 01 00 00       	mov    $0x195,%ecx
  42580a:	ba 88 e2 43 00       	mov    $0x43e288,%edx
  42580f:	89 ee                	mov    %ebp,%esi
  425811:	31 ff                	xor    %edi,%edi
  425813:	ff d0                	callq  *%rax
  425815:	48 63 fd             	movslq %ebp,%rdi
  425818:	ba 95 01 00 00       	mov    $0x195,%edx
  42581d:	be 88 e2 43 00       	mov    $0x43e288,%esi
  425822:	ff 15 88 2a 23 00    	callq  *0x232a88(%rip)        # 6582b0 <malloc_ex_func>
  425828:	4c 8b 0d 21 35 23 00 	mov    0x233521(%rip),%r9        # 658d50 <malloc_debug_func>
  42582f:	48 89 c3             	mov    %rax,%rbx
  425832:	4d 85 c9             	test   %r9,%r9
  425835:	74 18                	je     42584f <CRYPTO_remalloc+0xaf>
  425837:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  42583d:	b9 95 01 00 00       	mov    $0x195,%ecx
  425842:	ba 88 e2 43 00       	mov    $0x43e288,%edx
  425847:	89 ee                	mov    %ebp,%esi
  425849:	48 89 c7             	mov    %rax,%rdi
  42584c:	41 ff d1             	callq  *%r9
  42584f:	48 83 c4 08          	add    $0x8,%rsp
  425853:	48 89 d8             	mov    %rbx,%rax
  425856:	5b                   	pop    %rbx
  425857:	5d                   	pop    %rbp
  425858:	c3                   	retq   
  425859:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  425860:	31 db                	xor    %ebx,%ebx
  425862:	eb eb                	jmp    42584f <CRYPTO_remalloc+0xaf>
  425864:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
  42586b:	00 00 00 00 00 

0000000000425870 <CRYPTO_set_mem_debug_options>:
  425870:	48 8b 05 c1 34 23 00 	mov    0x2334c1(%rip),%rax        # 658d38 <set_debug_options_func>
  425877:	48 85 c0             	test   %rax,%rax
  42587a:	74 04                	je     425880 <CRYPTO_set_mem_debug_options+0x10>
  42587c:	ff e0                	jmpq   *%rax
  42587e:	66 90                	xchg   %ax,%ax
  425880:	f3 c3                	repz retq 
  425882:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  425889:	1f 84 00 00 00 00 00 

0000000000425890 <CRYPTO_get_mem_debug_options>:
  425890:	48 8b 05 99 34 23 00 	mov    0x233499(%rip),%rax        # 658d30 <get_debug_options_func>
  425897:	48 85 c0             	test   %rax,%rax
  42589a:	74 04                	je     4258a0 <CRYPTO_get_mem_debug_options+0x10>
  42589c:	ff e0                	jmpq   *%rax
  42589e:	66 90                	xchg   %ax,%ax
  4258a0:	31 c0                	xor    %eax,%eax
  4258a2:	c3                   	retq   
  4258a3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4258aa:	00 00 00 
  4258ad:	0f 1f 00             	nopl   (%rax)

00000000004258b0 <OPENSSL_init>:
  4258b0:	8b 05 a2 34 23 00    	mov    0x2334a2(%rip),%eax        # 658d58 <done.5048>
  4258b6:	85 c0                	test   %eax,%eax
  4258b8:	75 0a                	jne    4258c4 <OPENSSL_init+0x14>
  4258ba:	c7 05 94 34 23 00 01 	movl   $0x1,0x233494(%rip)        # 658d58 <done.5048>
  4258c1:	00 00 00 
  4258c4:	f3 c3                	repz retq 
  4258c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4258cd:	00 00 00 

00000000004258d0 <OPENSSL_atomic_add>:
  4258d0:	8b 07                	mov    (%rdi),%eax
  4258d2:	4c 8d 04 06          	lea    (%rsi,%rax,1),%r8
  4258d6:	f0 44 0f b1 07       	lock cmpxchg %r8d,(%rdi)
  4258db:	75 f5                	jne    4258d2 <OPENSSL_atomic_add+0x2>
  4258dd:	44 89 c0             	mov    %r8d,%eax
  4258e0:	48 98                	cltq   
  4258e2:	f3 c3                	repz retq 
  4258e4:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
  4258eb:	00 00 00 00 00 

00000000004258f0 <OPENSSL_rdtsc>:
  4258f0:	0f 31                	rdtsc  
  4258f2:	48 c1 e2 20          	shl    $0x20,%rdx
  4258f6:	48 09 d0             	or     %rdx,%rax
  4258f9:	f3 c3                	repz retq 
  4258fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000425900 <OPENSSL_ia32_cpuid>:
  425900:	49 89 d8             	mov    %rbx,%r8
  425903:	31 c0                	xor    %eax,%eax
  425905:	0f a2                	cpuid  
  425907:	41 89 c3             	mov    %eax,%r11d
  42590a:	31 c0                	xor    %eax,%eax
  42590c:	81 fb 47 65 6e 75    	cmp    $0x756e6547,%ebx
  425912:	0f 95 c0             	setne  %al
  425915:	41 89 c1             	mov    %eax,%r9d
  425918:	81 fa 69 6e 65 49    	cmp    $0x49656e69,%edx
  42591e:	0f 95 c0             	setne  %al
  425921:	41 09 c1             	or     %eax,%r9d
  425924:	81 f9 6e 74 65 6c    	cmp    $0x6c65746e,%ecx
  42592a:	0f 95 c0             	setne  %al
  42592d:	41 09 c1             	or     %eax,%r9d
  425930:	0f 84 80 00 00 00    	je     4259b6 <OPENSSL_ia32_cpuid+0xb6>
  425936:	81 fb 41 75 74 68    	cmp    $0x68747541,%ebx
  42593c:	0f 95 c0             	setne  %al
  42593f:	41 89 c2             	mov    %eax,%r10d
  425942:	81 fa 65 6e 74 69    	cmp    $0x69746e65,%edx
  425948:	0f 95 c0             	setne  %al
  42594b:	41 09 c2             	or     %eax,%r10d
  42594e:	81 f9 63 41 4d 44    	cmp    $0x444d4163,%ecx
  425954:	0f 95 c0             	setne  %al
  425957:	41 09 c2             	or     %eax,%r10d
  42595a:	75 5a                	jne    4259b6 <OPENSSL_ia32_cpuid+0xb6>
  42595c:	b8 00 00 00 80       	mov    $0x80000000,%eax
  425961:	0f a2                	cpuid  
  425963:	3d 01 00 00 80       	cmp    $0x80000001,%eax
  425968:	72 4c                	jb     4259b6 <OPENSSL_ia32_cpuid+0xb6>
  42596a:	41 89 c2             	mov    %eax,%r10d
  42596d:	b8 01 00 00 80       	mov    $0x80000001,%eax
  425972:	0f a2                	cpuid  
  425974:	41 09 c9             	or     %ecx,%r9d
  425977:	41 81 e1 01 08 00 00 	and    $0x801,%r9d
  42597e:	41 81 fa 08 00 00 80 	cmp    $0x80000008,%r10d
  425985:	72 2f                	jb     4259b6 <OPENSSL_ia32_cpuid+0xb6>
  425987:	b8 08 00 00 80       	mov    $0x80000008,%eax
  42598c:	0f a2                	cpuid  
  42598e:	4c 0f b6 d1          	movzbq %cl,%r10
  425992:	49 ff c2             	inc    %r10
  425995:	b8 01 00 00 00       	mov    $0x1,%eax
  42599a:	0f a2                	cpuid  
  42599c:	0f ba e2 1c          	bt     $0x1c,%edx
  4259a0:	0f 83 83 00 00 00    	jae    425a29 <OPENSSL_ia32_cpuid+0x129>
  4259a6:	c1 eb 10             	shr    $0x10,%ebx
  4259a9:	44 38 d3             	cmp    %r10b,%bl
  4259ac:	77 7b                	ja     425a29 <OPENSSL_ia32_cpuid+0x129>
  4259ae:	81 e2 ff ff ff ef    	and    $0xefffffff,%edx
  4259b4:	eb 73                	jmp    425a29 <OPENSSL_ia32_cpuid+0x129>
  4259b6:	41 83 fb 04          	cmp    $0x4,%r11d
  4259ba:	41 ba ff ff ff ff    	mov    $0xffffffff,%r10d
  4259c0:	72 1a                	jb     4259dc <OPENSSL_ia32_cpuid+0xdc>
  4259c2:	b8 04 00 00 00       	mov    $0x4,%eax
  4259c7:	b9 00 00 00 00       	mov    $0x0,%ecx
  4259cc:	0f a2                	cpuid  
  4259ce:	41 89 c2             	mov    %eax,%r10d
  4259d1:	41 c1 ea 0e          	shr    $0xe,%r10d
  4259d5:	41 81 e2 ff 0f 00 00 	and    $0xfff,%r10d
  4259dc:	b8 01 00 00 00       	mov    $0x1,%eax
  4259e1:	0f a2                	cpuid  
  4259e3:	81 e2 ff ff ef bf    	and    $0xbfefffff,%edx
  4259e9:	41 83 f9 00          	cmp    $0x0,%r9d
  4259ed:	75 14                	jne    425a03 <OPENSSL_ia32_cpuid+0x103>
  4259ef:	81 ca 00 00 00 40    	or     $0x40000000,%edx
  4259f5:	80 e4 0f             	and    $0xf,%ah
  4259f8:	80 fc 0f             	cmp    $0xf,%ah
  4259fb:	75 06                	jne    425a03 <OPENSSL_ia32_cpuid+0x103>
  4259fd:	81 ca 00 00 10 00    	or     $0x100000,%edx
  425a03:	0f ba e2 1c          	bt     $0x1c,%edx
  425a07:	73 20                	jae    425a29 <OPENSSL_ia32_cpuid+0x129>
  425a09:	81 e2 ff ff ff ef    	and    $0xefffffff,%edx
  425a0f:	41 83 fa 00          	cmp    $0x0,%r10d
  425a13:	74 14                	je     425a29 <OPENSSL_ia32_cpuid+0x129>
  425a15:	81 ca 00 00 00 10    	or     $0x10000000,%edx
  425a1b:	c1 eb 10             	shr    $0x10,%ebx
  425a1e:	80 fb 01             	cmp    $0x1,%bl
  425a21:	77 06                	ja     425a29 <OPENSSL_ia32_cpuid+0x129>
  425a23:	81 e2 ff ff ff ef    	and    $0xefffffff,%edx
  425a29:	41 81 e1 00 08 00 00 	and    $0x800,%r9d
  425a30:	81 e1 ff f7 ff ff    	and    $0xfffff7ff,%ecx
  425a36:	41 09 c9             	or     %ecx,%r9d
  425a39:	41 89 d2             	mov    %edx,%r10d
  425a3c:	41 0f ba e1 1b       	bt     $0x1b,%r9d
  425a41:	73 0d                	jae    425a50 <OPENSSL_ia32_cpuid+0x150>
  425a43:	31 c9                	xor    %ecx,%ecx
  425a45:	0f 01 d0             	xgetbv 
  425a48:	83 e0 06             	and    $0x6,%eax
  425a4b:	83 f8 06             	cmp    $0x6,%eax
  425a4e:	74 08                	je     425a58 <OPENSSL_ia32_cpuid+0x158>
  425a50:	b8 ff e7 ff ef       	mov    $0xefffe7ff,%eax
  425a55:	41 21 c1             	and    %eax,%r9d
  425a58:	49 c1 e1 20          	shl    $0x20,%r9
  425a5c:	44 89 d0             	mov    %r10d,%eax
  425a5f:	4c 89 c3             	mov    %r8,%rbx
  425a62:	4c 09 c8             	or     %r9,%rax
  425a65:	f3 c3                	repz retq 
  425a67:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  425a6e:	00 00 

0000000000425a70 <OPENSSL_cleanse>:
  425a70:	48 31 c0             	xor    %rax,%rax
  425a73:	48 83 fe 0f          	cmp    $0xf,%rsi
  425a77:	73 17                	jae    425a90 <OPENSSL_cleanse+0x20>
  425a79:	48 83 fe 00          	cmp    $0x0,%rsi
  425a7d:	74 0c                	je     425a8b <OPENSSL_cleanse+0x1b>
  425a7f:	88 07                	mov    %al,(%rdi)
  425a81:	48 83 ee 01          	sub    $0x1,%rsi
  425a85:	48 8d 7f 01          	lea    0x1(%rdi),%rdi
  425a89:	75 f4                	jne    425a7f <OPENSSL_cleanse+0xf>
  425a8b:	f3 c3                	repz retq 
  425a8d:	0f 1f 00             	nopl   (%rax)
  425a90:	48 f7 c7 07 00 00 00 	test   $0x7,%rdi
  425a97:	74 0c                	je     425aa5 <OPENSSL_cleanse+0x35>
  425a99:	88 07                	mov    %al,(%rdi)
  425a9b:	48 8d 76 ff          	lea    -0x1(%rsi),%rsi
  425a9f:	48 8d 7f 01          	lea    0x1(%rdi),%rdi
  425aa3:	eb eb                	jmp    425a90 <OPENSSL_cleanse+0x20>
  425aa5:	48 89 07             	mov    %rax,(%rdi)
  425aa8:	48 8d 76 f8          	lea    -0x8(%rsi),%rsi
  425aac:	48 f7 c6 f8 ff ff ff 	test   $0xfffffffffffffff8,%rsi
  425ab3:	48 8d 7f 08          	lea    0x8(%rdi),%rdi
  425ab7:	75 ec                	jne    425aa5 <OPENSSL_cleanse+0x35>
  425ab9:	48 83 fe 00          	cmp    $0x0,%rsi
  425abd:	75 c0                	jne    425a7f <OPENSSL_cleanse+0xf>
  425abf:	f3 c3                	repz retq 
  425ac1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  425ac8:	0f 1f 84 00 00 00 00 
  425acf:	00 

0000000000425ad0 <OPENSSL_wipe_cpu>:
  425ad0:	66 0f ef c0          	pxor   %xmm0,%xmm0
  425ad4:	66 0f ef c9          	pxor   %xmm1,%xmm1
  425ad8:	66 0f ef d2          	pxor   %xmm2,%xmm2
  425adc:	66 0f ef db          	pxor   %xmm3,%xmm3
  425ae0:	66 0f ef e4          	pxor   %xmm4,%xmm4
  425ae4:	66 0f ef ed          	pxor   %xmm5,%xmm5
  425ae8:	66 0f ef f6          	pxor   %xmm6,%xmm6
  425aec:	66 0f ef ff          	pxor   %xmm7,%xmm7
  425af0:	66 45 0f ef c0       	pxor   %xmm8,%xmm8
  425af5:	66 45 0f ef c9       	pxor   %xmm9,%xmm9
  425afa:	66 45 0f ef d2       	pxor   %xmm10,%xmm10
  425aff:	66 45 0f ef db       	pxor   %xmm11,%xmm11
  425b04:	66 45 0f ef e4       	pxor   %xmm12,%xmm12
  425b09:	66 45 0f ef ed       	pxor   %xmm13,%xmm13
  425b0e:	66 45 0f ef f6       	pxor   %xmm14,%xmm14
  425b13:	66 45 0f ef ff       	pxor   %xmm15,%xmm15
  425b18:	48 31 c9             	xor    %rcx,%rcx
  425b1b:	48 31 d2             	xor    %rdx,%rdx
  425b1e:	48 31 f6             	xor    %rsi,%rsi
  425b21:	48 31 ff             	xor    %rdi,%rdi
  425b24:	4d 31 c0             	xor    %r8,%r8
  425b27:	4d 31 c9             	xor    %r9,%r9
  425b2a:	4d 31 d2             	xor    %r10,%r10
  425b2d:	4d 31 db             	xor    %r11,%r11
  425b30:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
  425b35:	f3 c3                	repz retq 
  425b37:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  425b3e:	00 00 

0000000000425b40 <OPENSSL_ia32_rdrand>:
  425b40:	b9 08 00 00 00       	mov    $0x8,%ecx
  425b45:	48 0f c7 f0          	rdrand %rax
  425b49:	72 02                	jb     425b4d <OPENSSL_ia32_rdrand+0xd>
  425b4b:	e2 f8                	loop   425b45 <OPENSSL_ia32_rdrand+0x5>
  425b4d:	48 83 f8 00          	cmp    $0x0,%rax
  425b51:	48 0f 44 c1          	cmove  %rcx,%rax
  425b55:	f3 c3                	repz retq 
  425b57:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  425b5e:	00 00 

0000000000425b60 <BUF_strdup>:
  425b60:	55                   	push   %rbp
  425b61:	53                   	push   %rbx
  425b62:	48 89 fb             	mov    %rdi,%rbx
  425b65:	48 83 ec 08          	sub    $0x8,%rsp
  425b69:	48 85 ff             	test   %rdi,%rdi
  425b6c:	74 7f                	je     425bed <BUF_strdup+0x8d>
  425b6e:	e8 3d 12 fe ff       	callq  406db0 <strlen@plt>
  425b73:	8d 78 01             	lea    0x1(%rax),%edi
  425b76:	ba 4b 00 00 00       	mov    $0x4b,%edx
  425b7b:	be 8e e2 43 00       	mov    $0x43e28e,%esi
  425b80:	48 89 c5             	mov    %rax,%rbp
  425b83:	e8 78 f8 ff ff       	callq  425400 <CRYPTO_malloc>
  425b88:	48 85 c0             	test   %rax,%rax
  425b8b:	49 89 c0             	mov    %rax,%r8
  425b8e:	74 6b                	je     425bfb <BUF_strdup+0x9b>
  425b90:	48 8d 75 01          	lea    0x1(%rbp),%rsi
  425b94:	48 83 fe 01          	cmp    $0x1,%rsi
  425b98:	76 57                	jbe    425bf1 <BUF_strdup+0x91>
  425b9a:	0f b6 0b             	movzbl (%rbx),%ecx
  425b9d:	84 c9                	test   %cl,%cl
  425b9f:	74 55                	je     425bf6 <BUF_strdup+0x96>
  425ba1:	48 8d 3c 28          	lea    (%rax,%rbp,1),%rdi
  425ba5:	48 89 c2             	mov    %rax,%rdx
  425ba8:	eb 0d                	jmp    425bb7 <BUF_strdup+0x57>
  425baa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  425bb0:	0f b6 0b             	movzbl (%rbx),%ecx
  425bb3:	84 c9                	test   %cl,%cl
  425bb5:	74 29                	je     425be0 <BUF_strdup+0x80>
  425bb7:	48 83 c2 01          	add    $0x1,%rdx
  425bbb:	48 83 c3 01          	add    $0x1,%rbx
  425bbf:	48 83 ee 01          	sub    $0x1,%rsi
  425bc3:	48 39 fa             	cmp    %rdi,%rdx
  425bc6:	88 4a ff             	mov    %cl,-0x1(%rdx)
  425bc9:	75 e5                	jne    425bb0 <BUF_strdup+0x50>
  425bcb:	48 85 f6             	test   %rsi,%rsi
  425bce:	4c 89 c0             	mov    %r8,%rax
  425bd1:	74 13                	je     425be6 <BUF_strdup+0x86>
  425bd3:	48 89 fa             	mov    %rdi,%rdx
  425bd6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  425bdd:	00 00 00 
  425be0:	c6 02 00             	movb   $0x0,(%rdx)
  425be3:	4c 89 c0             	mov    %r8,%rax
  425be6:	48 83 c4 08          	add    $0x8,%rsp
  425bea:	5b                   	pop    %rbx
  425beb:	5d                   	pop    %rbp
  425bec:	c3                   	retq   
  425bed:	31 c0                	xor    %eax,%eax
  425bef:	eb f5                	jmp    425be6 <BUF_strdup+0x86>
  425bf1:	48 89 c7             	mov    %rax,%rdi
  425bf4:	eb d5                	jmp    425bcb <BUF_strdup+0x6b>
  425bf6:	48 89 c2             	mov    %rax,%rdx
  425bf9:	eb e5                	jmp    425be0 <BUF_strdup+0x80>
  425bfb:	41 b0 4e             	mov    $0x4e,%r8b
  425bfe:	b9 8e e2 43 00       	mov    $0x43e28e,%ecx
  425c03:	ba 41 00 00 00       	mov    $0x41,%edx
  425c08:	be 68 00 00 00       	mov    $0x68,%esi
  425c0d:	bf 07 00 00 00       	mov    $0x7,%edi
  425c12:	e8 39 27 00 00       	callq  428350 <ERR_put_error>
  425c17:	31 c0                	xor    %eax,%eax
  425c19:	eb cb                	jmp    425be6 <BUF_strdup+0x86>
  425c1b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000425c20 <BUF_strndup>:
  425c20:	55                   	push   %rbp
  425c21:	53                   	push   %rbx
  425c22:	48 89 fb             	mov    %rdi,%rbx
  425c25:	48 83 ec 08          	sub    $0x8,%rsp
  425c29:	48 85 ff             	test   %rdi,%rdi
  425c2c:	74 6f                	je     425c9d <BUF_strndup+0x7d>
  425c2e:	8d 7e 01             	lea    0x1(%rsi),%edi
  425c31:	48 89 f5             	mov    %rsi,%rbp
  425c34:	ba 4b 00 00 00       	mov    $0x4b,%edx
  425c39:	be 8e e2 43 00       	mov    $0x43e28e,%esi
  425c3e:	e8 bd f7 ff ff       	callq  425400 <CRYPTO_malloc>
  425c43:	48 85 c0             	test   %rax,%rax
  425c46:	49 89 c0             	mov    %rax,%r8
  425c49:	74 60                	je     425cab <BUF_strndup+0x8b>
  425c4b:	48 8d 7d 01          	lea    0x1(%rbp),%rdi
  425c4f:	48 83 ff 01          	cmp    $0x1,%rdi
  425c53:	76 4c                	jbe    425ca1 <BUF_strndup+0x81>
  425c55:	0f b6 0b             	movzbl (%rbx),%ecx
  425c58:	84 c9                	test   %cl,%cl
  425c5a:	74 4a                	je     425ca6 <BUF_strndup+0x86>
  425c5c:	48 8d 34 28          	lea    (%rax,%rbp,1),%rsi
  425c60:	48 89 c2             	mov    %rax,%rdx
  425c63:	eb 0a                	jmp    425c6f <BUF_strndup+0x4f>
  425c65:	0f 1f 00             	nopl   (%rax)
  425c68:	0f b6 0b             	movzbl (%rbx),%ecx
  425c6b:	84 c9                	test   %cl,%cl
  425c6d:	74 21                	je     425c90 <BUF_strndup+0x70>
  425c6f:	48 83 c2 01          	add    $0x1,%rdx
  425c73:	48 83 c3 01          	add    $0x1,%rbx
  425c77:	48 83 ef 01          	sub    $0x1,%rdi
  425c7b:	48 39 f2             	cmp    %rsi,%rdx
  425c7e:	88 4a ff             	mov    %cl,-0x1(%rdx)
  425c81:	75 e5                	jne    425c68 <BUF_strndup+0x48>
  425c83:	48 85 ff             	test   %rdi,%rdi
  425c86:	4c 89 c0             	mov    %r8,%rax
  425c89:	74 0b                	je     425c96 <BUF_strndup+0x76>
  425c8b:	48 89 f2             	mov    %rsi,%rdx
  425c8e:	66 90                	xchg   %ax,%ax
  425c90:	c6 02 00             	movb   $0x0,(%rdx)
  425c93:	4c 89 c0             	mov    %r8,%rax
  425c96:	48 83 c4 08          	add    $0x8,%rsp
  425c9a:	5b                   	pop    %rbx
  425c9b:	5d                   	pop    %rbp
  425c9c:	c3                   	retq   
  425c9d:	31 c0                	xor    %eax,%eax
  425c9f:	eb f5                	jmp    425c96 <BUF_strndup+0x76>
  425ca1:	48 89 c6             	mov    %rax,%rsi
  425ca4:	eb dd                	jmp    425c83 <BUF_strndup+0x63>
  425ca6:	48 89 c2             	mov    %rax,%rdx
  425ca9:	eb e5                	jmp    425c90 <BUF_strndup+0x70>
  425cab:	41 b0 4e             	mov    $0x4e,%r8b
  425cae:	b9 8e e2 43 00       	mov    $0x43e28e,%ecx
  425cb3:	ba 41 00 00 00       	mov    $0x41,%edx
  425cb8:	be 68 00 00 00       	mov    $0x68,%esi
  425cbd:	bf 07 00 00 00       	mov    $0x7,%edi
  425cc2:	e8 89 26 00 00       	callq  428350 <ERR_put_error>
  425cc7:	31 c0                	xor    %eax,%eax
  425cc9:	eb cb                	jmp    425c96 <BUF_strndup+0x76>
  425ccb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000425cd0 <BUF_memdup>:
  425cd0:	55                   	push   %rbp
  425cd1:	53                   	push   %rbx
  425cd2:	48 89 fb             	mov    %rdi,%rbx
  425cd5:	48 83 ec 08          	sub    $0x8,%rsp
  425cd9:	48 85 ff             	test   %rdi,%rdi
  425cdc:	74 51                	je     425d2f <BUF_memdup+0x5f>
  425cde:	48 89 f5             	mov    %rsi,%rbp
  425ce1:	ba 5b 00 00 00       	mov    $0x5b,%edx
  425ce6:	be 8e e2 43 00       	mov    $0x43e28e,%esi
  425ceb:	89 ef                	mov    %ebp,%edi
  425ced:	e8 0e f7 ff ff       	callq  425400 <CRYPTO_malloc>
  425cf2:	48 85 c0             	test   %rax,%rax
  425cf5:	74 19                	je     425d10 <BUF_memdup+0x40>
  425cf7:	48 83 c4 08          	add    $0x8,%rsp
  425cfb:	48 89 ea             	mov    %rbp,%rdx
  425cfe:	48 89 de             	mov    %rbx,%rsi
  425d01:	5b                   	pop    %rbx
  425d02:	5d                   	pop    %rbp
  425d03:	48 89 c7             	mov    %rax,%rdi
  425d06:	e9 e5 12 fe ff       	jmpq   406ff0 <memcpy@plt>
  425d0b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  425d10:	41 b8 5e 00 00 00    	mov    $0x5e,%r8d
  425d16:	b9 8e e2 43 00       	mov    $0x43e28e,%ecx
  425d1b:	ba 41 00 00 00       	mov    $0x41,%edx
  425d20:	be 67 00 00 00       	mov    $0x67,%esi
  425d25:	bf 07 00 00 00       	mov    $0x7,%edi
  425d2a:	e8 21 26 00 00       	callq  428350 <ERR_put_error>
  425d2f:	48 83 c4 08          	add    $0x8,%rsp
  425d33:	31 c0                	xor    %eax,%eax
  425d35:	5b                   	pop    %rbx
  425d36:	5d                   	pop    %rbp
  425d37:	c3                   	retq   
  425d38:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  425d3f:	00 

0000000000425d40 <BUF_strlcpy>:
  425d40:	48 83 fa 01          	cmp    $0x1,%rdx
  425d44:	53                   	push   %rbx
  425d45:	76 6c                	jbe    425db3 <BUF_strlcpy+0x73>
  425d47:	44 0f b6 06          	movzbl (%rsi),%r8d
  425d4b:	45 84 c0             	test   %r8b,%r8b
  425d4e:	74 46                	je     425d96 <BUF_strlcpy+0x56>
  425d50:	48 8d 5a ff          	lea    -0x1(%rdx),%rbx
  425d54:	31 c9                	xor    %ecx,%ecx
  425d56:	eb 11                	jmp    425d69 <BUF_strlcpy+0x29>
  425d58:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  425d5f:	00 
  425d60:	44 0f b6 06          	movzbl (%rsi),%r8d
  425d64:	45 84 c0             	test   %r8b,%r8b
  425d67:	74 37                	je     425da0 <BUF_strlcpy+0x60>
  425d69:	48 83 c1 01          	add    $0x1,%rcx
  425d6d:	48 89 d0             	mov    %rdx,%rax
  425d70:	48 83 c7 01          	add    $0x1,%rdi
  425d74:	48 83 c6 01          	add    $0x1,%rsi
  425d78:	48 29 c8             	sub    %rcx,%rax
  425d7b:	48 39 d9             	cmp    %rbx,%rcx
  425d7e:	44 88 47 ff          	mov    %r8b,-0x1(%rdi)
  425d82:	75 dc                	jne    425d60 <BUF_strlcpy+0x20>
  425d84:	48 85 c0             	test   %rax,%rax
  425d87:	75 1a                	jne    425da3 <BUF_strlcpy+0x63>
  425d89:	48 89 f7             	mov    %rsi,%rdi
  425d8c:	e8 1f 10 fe ff       	callq  406db0 <strlen@plt>
  425d91:	48 01 d8             	add    %rbx,%rax
  425d94:	5b                   	pop    %rbx
  425d95:	c3                   	retq   
  425d96:	31 c9                	xor    %ecx,%ecx
  425d98:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  425d9f:	00 
  425da0:	48 89 cb             	mov    %rcx,%rbx
  425da3:	c6 07 00             	movb   $0x0,(%rdi)
  425da6:	48 89 f7             	mov    %rsi,%rdi
  425da9:	e8 02 10 fe ff       	callq  406db0 <strlen@plt>
  425dae:	48 01 d8             	add    %rbx,%rax
  425db1:	5b                   	pop    %rbx
  425db2:	c3                   	retq   
  425db3:	48 89 d0             	mov    %rdx,%rax
  425db6:	31 db                	xor    %ebx,%ebx
  425db8:	eb ca                	jmp    425d84 <BUF_strlcpy+0x44>
  425dba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000425dc0 <BUF_strlcat>:
  425dc0:	48 85 d2             	test   %rdx,%rdx
  425dc3:	53                   	push   %rbx
  425dc4:	0f 84 96 00 00 00    	je     425e60 <BUF_strlcat+0xa0>
  425dca:	31 c0                	xor    %eax,%eax
  425dcc:	eb 10                	jmp    425dde <BUF_strlcat+0x1e>
  425dce:	66 90                	xchg   %ax,%ax
  425dd0:	48 83 c0 01          	add    $0x1,%rax
  425dd4:	48 83 c7 01          	add    $0x1,%rdi
  425dd8:	48 83 ea 01          	sub    $0x1,%rdx
  425ddc:	74 72                	je     425e50 <BUF_strlcat+0x90>
  425dde:	80 3f 00             	cmpb   $0x0,(%rdi)
  425de1:	75 ed                	jne    425dd0 <BUF_strlcat+0x10>
  425de3:	48 83 fa 01          	cmp    $0x1,%rdx
  425de7:	76 7b                	jbe    425e64 <BUF_strlcat+0xa4>
  425de9:	44 0f b6 06          	movzbl (%rsi),%r8d
  425ded:	45 84 c0             	test   %r8b,%r8b
  425df0:	74 4b                	je     425e3d <BUF_strlcat+0x7d>
  425df2:	4c 8d 4a ff          	lea    -0x1(%rdx),%r9
  425df6:	31 c9                	xor    %ecx,%ecx
  425df8:	eb 0f                	jmp    425e09 <BUF_strlcat+0x49>
  425dfa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  425e00:	44 0f b6 06          	movzbl (%rsi),%r8d
  425e04:	45 84 c0             	test   %r8b,%r8b
  425e07:	74 37                	je     425e40 <BUF_strlcat+0x80>
  425e09:	48 83 c7 01          	add    $0x1,%rdi
  425e0d:	48 83 c1 01          	add    $0x1,%rcx
  425e11:	44 88 47 ff          	mov    %r8b,-0x1(%rdi)
  425e15:	49 89 d0             	mov    %rdx,%r8
  425e18:	48 83 c6 01          	add    $0x1,%rsi
  425e1c:	49 29 c8             	sub    %rcx,%r8
  425e1f:	4c 39 c9             	cmp    %r9,%rcx
  425e22:	75 dc                	jne    425e00 <BUF_strlcat+0x40>
  425e24:	4d 85 c0             	test   %r8,%r8
  425e27:	48 8d 1c 01          	lea    (%rcx,%rax,1),%rbx
  425e2b:	74 03                	je     425e30 <BUF_strlcat+0x70>
  425e2d:	c6 07 00             	movb   $0x0,(%rdi)
  425e30:	48 89 f7             	mov    %rsi,%rdi
  425e33:	e8 78 0f fe ff       	callq  406db0 <strlen@plt>
  425e38:	48 01 d8             	add    %rbx,%rax
  425e3b:	5b                   	pop    %rbx
  425e3c:	c3                   	retq   
  425e3d:	31 c9                	xor    %ecx,%ecx
  425e3f:	90                   	nop
  425e40:	48 8d 1c 01          	lea    (%rcx,%rax,1),%rbx
  425e44:	eb e7                	jmp    425e2d <BUF_strlcat+0x6d>
  425e46:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  425e4d:	00 00 00 
  425e50:	48 89 c3             	mov    %rax,%rbx
  425e53:	48 89 f7             	mov    %rsi,%rdi
  425e56:	e8 55 0f fe ff       	callq  406db0 <strlen@plt>
  425e5b:	48 01 d8             	add    %rbx,%rax
  425e5e:	5b                   	pop    %rbx
  425e5f:	c3                   	retq   
  425e60:	31 db                	xor    %ebx,%ebx
  425e62:	eb cc                	jmp    425e30 <BUF_strlcat+0x70>
  425e64:	48 89 c3             	mov    %rax,%rbx
  425e67:	eb c4                	jmp    425e2d <BUF_strlcat+0x6d>
  425e69:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000425e70 <sk_set_cmp_func>:
  425e70:	48 8b 47 18          	mov    0x18(%rdi),%rax
  425e74:	48 39 f0             	cmp    %rsi,%rax
  425e77:	74 07                	je     425e80 <sk_set_cmp_func+0x10>
  425e79:	c7 47 10 00 00 00 00 	movl   $0x0,0x10(%rdi)
  425e80:	48 89 77 18          	mov    %rsi,0x18(%rdi)
  425e84:	c3                   	retq   
  425e85:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  425e8c:	00 00 00 00 

0000000000425e90 <sk_dup>:
  425e90:	41 54                	push   %r12
  425e92:	55                   	push   %rbp
  425e93:	ba 7d 00 00 00       	mov    $0x7d,%edx
  425e98:	53                   	push   %rbx
  425e99:	48 89 fd             	mov    %rdi,%rbp
  425e9c:	4c 8b 67 18          	mov    0x18(%rdi),%r12
  425ea0:	be 98 e2 43 00       	mov    $0x43e298,%esi
  425ea5:	bf 20 00 00 00       	mov    $0x20,%edi
  425eaa:	e8 51 f5 ff ff       	callq  425400 <CRYPTO_malloc>
  425eaf:	48 85 c0             	test   %rax,%rax
  425eb2:	48 89 c3             	mov    %rax,%rbx
  425eb5:	0f 84 db 00 00 00    	je     425f96 <sk_dup+0x106>
  425ebb:	ba 7f 00 00 00       	mov    $0x7f,%edx
  425ec0:	be 98 e2 43 00       	mov    $0x43e298,%esi
  425ec5:	bf 20 00 00 00       	mov    $0x20,%edi
  425eca:	e8 31 f5 ff ff       	callq  425400 <CRYPTO_malloc>
  425ecf:	48 85 c0             	test   %rax,%rax
  425ed2:	48 89 43 08          	mov    %rax,0x8(%rbx)
  425ed6:	0f 84 b2 00 00 00    	je     425f8e <sk_dup+0xfe>
  425edc:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  425ee3:	48 8b 43 08          	mov    0x8(%rbx),%rax
  425ee7:	b9 63 00 00 00       	mov    $0x63,%ecx
  425eec:	ba 98 e2 43 00       	mov    $0x43e298,%edx
  425ef1:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  425ef8:	00 
  425ef9:	48 8b 43 08          	mov    0x8(%rbx),%rax
  425efd:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  425f04:	00 
  425f05:	48 8b 43 08          	mov    0x8(%rbx),%rax
  425f09:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  425f10:	00 
  425f11:	c7 43 14 04 00 00 00 	movl   $0x4,0x14(%rbx)
  425f18:	8b 45 14             	mov    0x14(%rbp),%eax
  425f1b:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
  425f1f:	4c 89 63 18          	mov    %r12,0x18(%rbx)
  425f23:	c7 03 00 00 00 00    	movl   $0x0,(%rbx)
  425f29:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%rbx)
  425f30:	8d 34 c5 00 00 00 00 	lea    0x0(,%rax,8),%esi
  425f37:	e8 f4 f5 ff ff       	callq  425530 <CRYPTO_realloc>
  425f3c:	48 85 c0             	test   %rax,%rax
  425f3f:	74 3f                	je     425f80 <sk_dup+0xf0>
  425f41:	8b 55 00             	mov    0x0(%rbp),%edx
  425f44:	48 89 43 08          	mov    %rax,0x8(%rbx)
  425f48:	48 89 c7             	mov    %rax,%rdi
  425f4b:	48 8b 75 08          	mov    0x8(%rbp),%rsi
  425f4f:	89 13                	mov    %edx,(%rbx)
  425f51:	48 63 55 00          	movslq 0x0(%rbp),%rdx
  425f55:	48 c1 e2 03          	shl    $0x3,%rdx
  425f59:	e8 92 10 fe ff       	callq  406ff0 <memcpy@plt>
  425f5e:	8b 45 10             	mov    0x10(%rbp),%eax
  425f61:	89 43 10             	mov    %eax,0x10(%rbx)
  425f64:	8b 45 14             	mov    0x14(%rbp),%eax
  425f67:	89 43 14             	mov    %eax,0x14(%rbx)
  425f6a:	48 8b 45 18          	mov    0x18(%rbp),%rax
  425f6e:	48 89 43 18          	mov    %rax,0x18(%rbx)
  425f72:	48 89 d8             	mov    %rbx,%rax
  425f75:	5b                   	pop    %rbx
  425f76:	5d                   	pop    %rbp
  425f77:	41 5c                	pop    %r12
  425f79:	c3                   	retq   
  425f7a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  425f80:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
  425f84:	48 85 ff             	test   %rdi,%rdi
  425f87:	74 05                	je     425f8e <sk_dup+0xfe>
  425f89:	e8 d2 f7 ff ff       	callq  425760 <CRYPTO_free>
  425f8e:	48 89 df             	mov    %rbx,%rdi
  425f91:	e8 ca f7 ff ff       	callq  425760 <CRYPTO_free>
  425f96:	5b                   	pop    %rbx
  425f97:	31 c0                	xor    %eax,%eax
  425f99:	5d                   	pop    %rbp
  425f9a:	41 5c                	pop    %r12
  425f9c:	c3                   	retq   
  425f9d:	0f 1f 00             	nopl   (%rax)

0000000000425fa0 <sk_new_null>:
  425fa0:	55                   	push   %rbp
  425fa1:	53                   	push   %rbx
  425fa2:	ba 7d 00 00 00       	mov    $0x7d,%edx
  425fa7:	be 98 e2 43 00       	mov    $0x43e298,%esi
  425fac:	bf 20 00 00 00       	mov    $0x20,%edi
  425fb1:	31 ed                	xor    %ebp,%ebp
  425fb3:	48 83 ec 08          	sub    $0x8,%rsp
  425fb7:	e8 44 f4 ff ff       	callq  425400 <CRYPTO_malloc>
  425fbc:	48 85 c0             	test   %rax,%rax
  425fbf:	48 89 c3             	mov    %rax,%rbx
  425fc2:	74 67                	je     42602b <sk_new_null+0x8b>
  425fc4:	ba 7f 00 00 00       	mov    $0x7f,%edx
  425fc9:	be 98 e2 43 00       	mov    $0x43e298,%esi
  425fce:	bf 20 00 00 00       	mov    $0x20,%edi
  425fd3:	e8 28 f4 ff ff       	callq  425400 <CRYPTO_malloc>
  425fd8:	48 85 c0             	test   %rax,%rax
  425fdb:	48 89 43 08          	mov    %rax,0x8(%rbx)
  425fdf:	74 57                	je     426038 <sk_new_null+0x98>
  425fe1:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  425fe8:	48 8b 43 08          	mov    0x8(%rbx),%rax
  425fec:	48 89 dd             	mov    %rbx,%rbp
  425fef:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  425ff6:	00 
  425ff7:	48 8b 43 08          	mov    0x8(%rbx),%rax
  425ffb:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  426002:	00 
  426003:	48 8b 43 08          	mov    0x8(%rbx),%rax
  426007:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  42600e:	00 
  42600f:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
  426016:	00 
  426017:	c7 43 14 04 00 00 00 	movl   $0x4,0x14(%rbx)
  42601e:	c7 03 00 00 00 00    	movl   $0x0,(%rbx)
  426024:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%rbx)
  42602b:	48 83 c4 08          	add    $0x8,%rsp
  42602f:	48 89 e8             	mov    %rbp,%rax
  426032:	5b                   	pop    %rbx
  426033:	5d                   	pop    %rbp
  426034:	c3                   	retq   
  426035:	0f 1f 00             	nopl   (%rax)
  426038:	48 89 df             	mov    %rbx,%rdi
  42603b:	e8 20 f7 ff ff       	callq  425760 <CRYPTO_free>
  426040:	48 83 c4 08          	add    $0x8,%rsp
  426044:	48 89 e8             	mov    %rbp,%rax
  426047:	5b                   	pop    %rbx
  426048:	5d                   	pop    %rbp
  426049:	c3                   	retq   
  42604a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000426050 <sk_new>:
  426050:	41 54                	push   %r12
  426052:	55                   	push   %rbp
  426053:	49 89 fc             	mov    %rdi,%r12
  426056:	53                   	push   %rbx
  426057:	ba 7d 00 00 00       	mov    $0x7d,%edx
  42605c:	be 98 e2 43 00       	mov    $0x43e298,%esi
  426061:	bf 20 00 00 00       	mov    $0x20,%edi
  426066:	31 ed                	xor    %ebp,%ebp
  426068:	e8 93 f3 ff ff       	callq  425400 <CRYPTO_malloc>
  42606d:	48 85 c0             	test   %rax,%rax
  426070:	48 89 c3             	mov    %rax,%rbx
  426073:	74 63                	je     4260d8 <sk_new+0x88>
  426075:	ba 7f 00 00 00       	mov    $0x7f,%edx
  42607a:	be 98 e2 43 00       	mov    $0x43e298,%esi
  42607f:	bf 20 00 00 00       	mov    $0x20,%edi
  426084:	e8 77 f3 ff ff       	callq  425400 <CRYPTO_malloc>
  426089:	48 85 c0             	test   %rax,%rax
  42608c:	48 89 43 08          	mov    %rax,0x8(%rbx)
  426090:	74 4e                	je     4260e0 <sk_new+0x90>
  426092:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  426099:	48 8b 43 08          	mov    0x8(%rbx),%rax
  42609d:	48 89 dd             	mov    %rbx,%rbp
  4260a0:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  4260a7:	00 
  4260a8:	48 8b 43 08          	mov    0x8(%rbx),%rax
  4260ac:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  4260b3:	00 
  4260b4:	48 8b 43 08          	mov    0x8(%rbx),%rax
  4260b8:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  4260bf:	00 
  4260c0:	4c 89 63 18          	mov    %r12,0x18(%rbx)
  4260c4:	c7 43 14 04 00 00 00 	movl   $0x4,0x14(%rbx)
  4260cb:	c7 03 00 00 00 00    	movl   $0x0,(%rbx)
  4260d1:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%rbx)
  4260d8:	48 89 e8             	mov    %rbp,%rax
  4260db:	5b                   	pop    %rbx
  4260dc:	5d                   	pop    %rbp
  4260dd:	41 5c                	pop    %r12
  4260df:	c3                   	retq   
  4260e0:	48 89 df             	mov    %rbx,%rdi
  4260e3:	e8 78 f6 ff ff       	callq  425760 <CRYPTO_free>
  4260e8:	48 89 e8             	mov    %rbp,%rax
  4260eb:	5b                   	pop    %rbx
  4260ec:	5d                   	pop    %rbp
  4260ed:	41 5c                	pop    %r12
  4260ef:	c3                   	retq   

00000000004260f0 <sk_insert>:
  4260f0:	41 55                	push   %r13
  4260f2:	41 54                	push   %r12
  4260f4:	55                   	push   %rbp
  4260f5:	53                   	push   %rbx
  4260f6:	48 83 ec 08          	sub    $0x8,%rsp
  4260fa:	48 85 ff             	test   %rdi,%rdi
  4260fd:	0f 84 bd 00 00 00    	je     4261c0 <sk_insert+0xd0>
  426103:	48 63 0f             	movslq (%rdi),%rcx
  426106:	49 89 f4             	mov    %rsi,%r12
  426109:	8b 77 14             	mov    0x14(%rdi),%esi
  42610c:	48 63 ea             	movslq %edx,%rbp
  42610f:	48 89 fb             	mov    %rdi,%rbx
  426112:	44 8d 69 01          	lea    0x1(%rcx),%r13d
  426116:	44 39 ee             	cmp    %r13d,%esi
  426119:	7e 75                	jle    426190 <sk_insert+0xa0>
  42611b:	48 8b 47 08          	mov    0x8(%rdi),%rax
  42611f:	39 cd                	cmp    %ecx,%ebp
  426121:	7d 65                	jge    426188 <sk_insert+0x98>
  426123:	89 ea                	mov    %ebp,%edx
  426125:	c1 ea 1f             	shr    $0x1f,%edx
  426128:	84 d2                	test   %dl,%dl
  42612a:	75 5c                	jne    426188 <sk_insert+0x98>
  42612c:	89 ca                	mov    %ecx,%edx
  42612e:	be 08 00 00 00       	mov    $0x8,%esi
  426133:	29 ea                	sub    %ebp,%edx
  426135:	39 cd                	cmp    %ecx,%ebp
  426137:	48 8d 14 d5 08 00 00 	lea    0x8(,%rdx,8),%rdx
  42613e:	00 
  42613f:	48 0f 4f d6          	cmovg  %rsi,%rdx
  426143:	48 c1 e1 03          	shl    $0x3,%rcx
  426147:	48 8d 79 10          	lea    0x10(%rcx),%rdi
  42614b:	48 83 c1 08          	add    $0x8,%rcx
  42614f:	48 29 d1             	sub    %rdx,%rcx
  426152:	48 29 d7             	sub    %rdx,%rdi
  426155:	48 8d 34 08          	lea    (%rax,%rcx,1),%rsi
  426159:	48 01 c7             	add    %rax,%rdi
  42615c:	e8 ff 0c fe ff       	callq  406e60 <memmove@plt>
  426161:	48 8b 43 08          	mov    0x8(%rbx),%rax
  426165:	4c 89 24 e8          	mov    %r12,(%rax,%rbp,8)
  426169:	44 89 2b             	mov    %r13d,(%rbx)
  42616c:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%rbx)
  426173:	48 83 c4 08          	add    $0x8,%rsp
  426177:	5b                   	pop    %rbx
  426178:	44 89 e8             	mov    %r13d,%eax
  42617b:	5d                   	pop    %rbp
  42617c:	41 5c                	pop    %r12
  42617e:	41 5d                	pop    %r13
  426180:	c3                   	retq   
  426181:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  426188:	4c 89 24 c8          	mov    %r12,(%rax,%rcx,8)
  42618c:	eb db                	jmp    426169 <sk_insert+0x79>
  42618e:	66 90                	xchg   %ax,%ax
  426190:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  426194:	c1 e6 04             	shl    $0x4,%esi
  426197:	b9 96 00 00 00       	mov    $0x96,%ecx
  42619c:	ba 98 e2 43 00       	mov    $0x43e298,%edx
  4261a1:	e8 8a f3 ff ff       	callq  425530 <CRYPTO_realloc>
  4261a6:	48 85 c0             	test   %rax,%rax
  4261a9:	74 15                	je     4261c0 <sk_insert+0xd0>
  4261ab:	48 63 0b             	movslq (%rbx),%rcx
  4261ae:	48 89 43 08          	mov    %rax,0x8(%rbx)
  4261b2:	d1 63 14             	shll   0x14(%rbx)
  4261b5:	44 8d 69 01          	lea    0x1(%rcx),%r13d
  4261b9:	e9 61 ff ff ff       	jmpq   42611f <sk_insert+0x2f>
  4261be:	66 90                	xchg   %ax,%ax
  4261c0:	48 83 c4 08          	add    $0x8,%rsp
  4261c4:	45 31 ed             	xor    %r13d,%r13d
  4261c7:	5b                   	pop    %rbx
  4261c8:	44 89 e8             	mov    %r13d,%eax
  4261cb:	5d                   	pop    %rbp
  4261cc:	41 5c                	pop    %r12
  4261ce:	41 5d                	pop    %r13
  4261d0:	c3                   	retq   
  4261d1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  4261d8:	0f 1f 84 00 00 00 00 
  4261df:	00 

00000000004261e0 <sk_delete_ptr>:
  4261e0:	8b 07                	mov    (%rdi),%eax
  4261e2:	85 c0                	test   %eax,%eax
  4261e4:	7e 2b                	jle    426211 <sk_delete_ptr+0x31>
  4261e6:	4c 8b 47 08          	mov    0x8(%rdi),%r8
  4261ea:	31 d2                	xor    %edx,%edx
  4261ec:	49 39 30             	cmp    %rsi,(%r8)
  4261ef:	49 8d 48 08          	lea    0x8(%r8),%rcx
  4261f3:	75 15                	jne    42620a <sk_delete_ptr+0x2a>
  4261f5:	eb 71                	jmp    426268 <sk_delete_ptr+0x88>
  4261f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4261fe:	00 00 
  426200:	48 83 c1 08          	add    $0x8,%rcx
  426204:	48 39 71 f8          	cmp    %rsi,-0x8(%rcx)
  426208:	74 0e                	je     426218 <sk_delete_ptr+0x38>
  42620a:	83 c2 01             	add    $0x1,%edx
  42620d:	39 c2                	cmp    %eax,%edx
  42620f:	75 ef                	jne    426200 <sk_delete_ptr+0x20>
  426211:	31 c0                	xor    %eax,%eax
  426213:	c3                   	retq   
  426214:	0f 1f 40 00          	nopl   0x0(%rax)
  426218:	85 d2                	test   %edx,%edx
  42621a:	78 f5                	js     426211 <sk_delete_ptr+0x31>
  42621c:	44 8d 50 ff          	lea    -0x1(%rax),%r10d
  426220:	44 39 d2             	cmp    %r10d,%edx
  426223:	74 3c                	je     426261 <sk_delete_ptr+0x81>
  426225:	41 39 d2             	cmp    %edx,%r10d
  426228:	7e 37                	jle    426261 <sk_delete_ptr+0x81>
  42622a:	83 e8 02             	sub    $0x2,%eax
  42622d:	4c 63 ca             	movslq %edx,%r9
  426230:	29 d0                	sub    %edx,%eax
  426232:	4a 8d 0c cd 00 00 00 	lea    0x0(,%r9,8),%rcx
  426239:	00 
  42623a:	4d 8d 4c 01 01       	lea    0x1(%r9,%rax,1),%r9
  42623f:	49 c1 e1 03          	shl    $0x3,%r9
  426243:	eb 0a                	jmp    42624f <sk_delete_ptr+0x6f>
  426245:	0f 1f 00             	nopl   (%rax)
  426248:	4c 8b 47 08          	mov    0x8(%rdi),%r8
  42624c:	48 89 c1             	mov    %rax,%rcx
  42624f:	48 8d 41 08          	lea    0x8(%rcx),%rax
  426253:	49 8b 54 08 08       	mov    0x8(%r8,%rcx,1),%rdx
  426258:	49 39 c1             	cmp    %rax,%r9
  42625b:	49 89 14 08          	mov    %rdx,(%r8,%rcx,1)
  42625f:	75 e7                	jne    426248 <sk_delete_ptr+0x68>
  426261:	44 89 17             	mov    %r10d,(%rdi)
  426264:	48 89 f0             	mov    %rsi,%rax
  426267:	c3                   	retq   
  426268:	31 d2                	xor    %edx,%edx
  42626a:	eb b0                	jmp    42621c <sk_delete_ptr+0x3c>
  42626c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000426270 <sk_delete>:
  426270:	48 85 ff             	test   %rdi,%rdi
  426273:	74 6b                	je     4262e0 <sk_delete+0x70>
  426275:	89 f0                	mov    %esi,%eax
  426277:	c1 e8 1f             	shr    $0x1f,%eax
  42627a:	84 c0                	test   %al,%al
  42627c:	75 62                	jne    4262e0 <sk_delete+0x70>
  42627e:	44 8b 07             	mov    (%rdi),%r8d
  426281:	44 39 c6             	cmp    %r8d,%esi
  426284:	7d 5a                	jge    4262e0 <sk_delete+0x70>
  426286:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
  42628a:	45 8d 50 ff          	lea    -0x1(%r8),%r10d
  42628e:	4c 63 ce             	movslq %esi,%r9
  426291:	4a 8d 14 cd 00 00 00 	lea    0x0(,%r9,8),%rdx
  426298:	00 
  426299:	41 39 f2             	cmp    %esi,%r10d
  42629c:	4a 8b 04 c9          	mov    (%rcx,%r9,8),%rax
  4262a0:	74 37                	je     4262d9 <sk_delete+0x69>
  4262a2:	44 39 d6             	cmp    %r10d,%esi
  4262a5:	7d 32                	jge    4262d9 <sk_delete+0x69>
  4262a7:	41 83 e8 02          	sub    $0x2,%r8d
  4262ab:	41 29 f0             	sub    %esi,%r8d
  4262ae:	4f 8d 4c 01 01       	lea    0x1(%r9,%r8,1),%r9
  4262b3:	49 c1 e1 03          	shl    $0x3,%r9
  4262b7:	eb 0e                	jmp    4262c7 <sk_delete+0x57>
  4262b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  4262c0:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
  4262c4:	48 89 f2             	mov    %rsi,%rdx
  4262c7:	48 8d 72 08          	lea    0x8(%rdx),%rsi
  4262cb:	4c 8b 44 11 08       	mov    0x8(%rcx,%rdx,1),%r8
  4262d0:	4c 39 ce             	cmp    %r9,%rsi
  4262d3:	4c 89 04 11          	mov    %r8,(%rcx,%rdx,1)
  4262d7:	75 e7                	jne    4262c0 <sk_delete+0x50>
  4262d9:	44 89 17             	mov    %r10d,(%rdi)
  4262dc:	c3                   	retq   
  4262dd:	0f 1f 00             	nopl   (%rax)
  4262e0:	31 c0                	xor    %eax,%eax
  4262e2:	c3                   	retq   
  4262e3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  4262ea:	84 00 00 00 00 00 

00000000004262f0 <sk_find>:
  4262f0:	53                   	push   %rbx
  4262f1:	48 89 fb             	mov    %rdi,%rbx
  4262f4:	48 83 ec 10          	sub    $0x10,%rsp
  4262f8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  4262ff:	00 00 
  426301:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  426306:	31 c0                	xor    %eax,%eax
  426308:	48 85 ff             	test   %rdi,%rdi
  42630b:	48 89 34 24          	mov    %rsi,(%rsp)
  42630f:	0f 84 ac 00 00 00    	je     4263c1 <sk_find+0xd1>
  426315:	48 8b 4f 18          	mov    0x18(%rdi),%rcx
  426319:	48 85 c9             	test   %rcx,%rcx
  42631c:	74 72                	je     426390 <sk_find+0xa0>
  42631e:	8b 47 10             	mov    0x10(%rdi),%eax
  426321:	85 c0                	test   %eax,%eax
  426323:	74 4b                	je     426370 <sk_find+0x80>
  426325:	48 85 f6             	test   %rsi,%rsi
  426328:	0f 84 93 00 00 00    	je     4263c1 <sk_find+0xd1>
  42632e:	48 8b 73 08          	mov    0x8(%rbx),%rsi
  426332:	4c 8b 43 18          	mov    0x18(%rbx),%r8
  426336:	41 b9 02 00 00 00    	mov    $0x2,%r9d
  42633c:	8b 13                	mov    (%rbx),%edx
  42633e:	b9 08 00 00 00       	mov    $0x8,%ecx
  426343:	48 89 e7             	mov    %rsp,%rdi
  426346:	e8 35 58 00 00       	callq  42bb80 <OBJ_bsearch_ex_>
  42634b:	48 85 c0             	test   %rax,%rax
  42634e:	74 71                	je     4263c1 <sk_find+0xd1>
  426350:	48 2b 43 08          	sub    0x8(%rbx),%rax
  426354:	48 c1 e8 03          	shr    $0x3,%rax
  426358:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  42635d:	64 48 33 3c 25 28 00 	xor    %fs:0x28,%rdi
  426364:	00 00 
  426366:	75 64                	jne    4263cc <sk_find+0xdc>
  426368:	48 83 c4 10          	add    $0x10,%rsp
  42636c:	5b                   	pop    %rbx
  42636d:	c3                   	retq   
  42636e:	66 90                	xchg   %ax,%ax
  426370:	48 63 37             	movslq (%rdi),%rsi
  426373:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  426377:	ba 08 00 00 00       	mov    $0x8,%edx
  42637c:	e8 2f 0b fe ff       	callq  406eb0 <qsort@plt>
  426381:	c7 43 10 01 00 00 00 	movl   $0x1,0x10(%rbx)
  426388:	48 8b 34 24          	mov    (%rsp),%rsi
  42638c:	eb 97                	jmp    426325 <sk_find+0x35>
  42638e:	66 90                	xchg   %ax,%ax
  426390:	8b 0f                	mov    (%rdi),%ecx
  426392:	85 c9                	test   %ecx,%ecx
  426394:	7e 2b                	jle    4263c1 <sk_find+0xd1>
  426396:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  42639a:	48 3b 32             	cmp    (%rdx),%rsi
  42639d:	74 29                	je     4263c8 <sk_find+0xd8>
  42639f:	48 83 c2 08          	add    $0x8,%rdx
  4263a3:	31 c0                	xor    %eax,%eax
  4263a5:	eb 13                	jmp    4263ba <sk_find+0xca>
  4263a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4263ae:	00 00 
  4263b0:	48 83 c2 08          	add    $0x8,%rdx
  4263b4:	48 3b 72 f8          	cmp    -0x8(%rdx),%rsi
  4263b8:	74 9e                	je     426358 <sk_find+0x68>
  4263ba:	83 c0 01             	add    $0x1,%eax
  4263bd:	39 c8                	cmp    %ecx,%eax
  4263bf:	75 ef                	jne    4263b0 <sk_find+0xc0>
  4263c1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  4263c6:	eb 90                	jmp    426358 <sk_find+0x68>
  4263c8:	31 c0                	xor    %eax,%eax
  4263ca:	eb 8c                	jmp    426358 <sk_find+0x68>
  4263cc:	e8 ef 0a fe ff       	callq  406ec0 <__stack_chk_fail@plt>
  4263d1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  4263d8:	0f 1f 84 00 00 00 00 
  4263df:	00 

00000000004263e0 <sk_find_ex>:
  4263e0:	53                   	push   %rbx
  4263e1:	48 89 fb             	mov    %rdi,%rbx
  4263e4:	48 83 ec 10          	sub    $0x10,%rsp
  4263e8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  4263ef:	00 00 
  4263f1:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  4263f6:	31 c0                	xor    %eax,%eax
  4263f8:	48 85 ff             	test   %rdi,%rdi
  4263fb:	48 89 34 24          	mov    %rsi,(%rsp)
  4263ff:	0f 84 ac 00 00 00    	je     4264b1 <sk_find_ex+0xd1>
  426405:	48 8b 4f 18          	mov    0x18(%rdi),%rcx
  426409:	48 85 c9             	test   %rcx,%rcx
  42640c:	74 72                	je     426480 <sk_find_ex+0xa0>
  42640e:	8b 47 10             	mov    0x10(%rdi),%eax
  426411:	85 c0                	test   %eax,%eax
  426413:	74 4b                	je     426460 <sk_find_ex+0x80>
  426415:	48 85 f6             	test   %rsi,%rsi
  426418:	0f 84 93 00 00 00    	je     4264b1 <sk_find_ex+0xd1>
  42641e:	48 8b 73 08          	mov    0x8(%rbx),%rsi
  426422:	4c 8b 43 18          	mov    0x18(%rbx),%r8
  426426:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  42642c:	8b 13                	mov    (%rbx),%edx
  42642e:	b9 08 00 00 00       	mov    $0x8,%ecx
  426433:	48 89 e7             	mov    %rsp,%rdi
  426436:	e8 45 57 00 00       	callq  42bb80 <OBJ_bsearch_ex_>
  42643b:	48 85 c0             	test   %rax,%rax
  42643e:	74 71                	je     4264b1 <sk_find_ex+0xd1>
  426440:	48 2b 43 08          	sub    0x8(%rbx),%rax
  426444:	48 c1 e8 03          	shr    $0x3,%rax
  426448:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  42644d:	64 48 33 3c 25 28 00 	xor    %fs:0x28,%rdi
  426454:	00 00 
  426456:	75 64                	jne    4264bc <sk_find_ex+0xdc>
  426458:	48 83 c4 10          	add    $0x10,%rsp
  42645c:	5b                   	pop    %rbx
  42645d:	c3                   	retq   
  42645e:	66 90                	xchg   %ax,%ax
  426460:	48 63 37             	movslq (%rdi),%rsi
  426463:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  426467:	ba 08 00 00 00       	mov    $0x8,%edx
  42646c:	e8 3f 0a fe ff       	callq  406eb0 <qsort@plt>
  426471:	c7 43 10 01 00 00 00 	movl   $0x1,0x10(%rbx)
  426478:	48 8b 34 24          	mov    (%rsp),%rsi
  42647c:	eb 97                	jmp    426415 <sk_find_ex+0x35>
  42647e:	66 90                	xchg   %ax,%ax
  426480:	8b 0f                	mov    (%rdi),%ecx
  426482:	85 c9                	test   %ecx,%ecx
  426484:	7e 2b                	jle    4264b1 <sk_find_ex+0xd1>
  426486:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  42648a:	48 3b 32             	cmp    (%rdx),%rsi
  42648d:	74 29                	je     4264b8 <sk_find_ex+0xd8>
  42648f:	48 83 c2 08          	add    $0x8,%rdx
  426493:	31 c0                	xor    %eax,%eax
  426495:	eb 13                	jmp    4264aa <sk_find_ex+0xca>
  426497:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  42649e:	00 00 
  4264a0:	48 83 c2 08          	add    $0x8,%rdx
  4264a4:	48 3b 72 f8          	cmp    -0x8(%rdx),%rsi
  4264a8:	74 9e                	je     426448 <sk_find_ex+0x68>
  4264aa:	83 c0 01             	add    $0x1,%eax
  4264ad:	39 c8                	cmp    %ecx,%eax
  4264af:	75 ef                	jne    4264a0 <sk_find_ex+0xc0>
  4264b1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  4264b6:	eb 90                	jmp    426448 <sk_find_ex+0x68>
  4264b8:	31 c0                	xor    %eax,%eax
  4264ba:	eb 8c                	jmp    426448 <sk_find_ex+0x68>
  4264bc:	e8 ff 09 fe ff       	callq  406ec0 <__stack_chk_fail@plt>
  4264c1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  4264c8:	0f 1f 84 00 00 00 00 
  4264cf:	00 

00000000004264d0 <sk_push>:
  4264d0:	41 55                	push   %r13
  4264d2:	41 54                	push   %r12
  4264d4:	49 89 f4             	mov    %rsi,%r12
  4264d7:	55                   	push   %rbp
  4264d8:	53                   	push   %rbx
  4264d9:	48 89 fb             	mov    %rdi,%rbx
  4264dc:	48 83 ec 08          	sub    $0x8,%rsp
  4264e0:	48 63 2f             	movslq (%rdi),%rbp
  4264e3:	8b 77 14             	mov    0x14(%rdi),%esi
  4264e6:	8d 45 01             	lea    0x1(%rbp),%eax
  4264e9:	39 c6                	cmp    %eax,%esi
  4264eb:	7e 23                	jle    426510 <sk_push+0x40>
  4264ed:	48 8b 53 08          	mov    0x8(%rbx),%rdx
  4264f1:	4c 89 24 ea          	mov    %r12,(%rdx,%rbp,8)
  4264f5:	89 03                	mov    %eax,(%rbx)
  4264f7:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%rbx)
  4264fe:	48 83 c4 08          	add    $0x8,%rsp
  426502:	5b                   	pop    %rbx
  426503:	5d                   	pop    %rbp
  426504:	41 5c                	pop    %r12
  426506:	41 5d                	pop    %r13
  426508:	c3                   	retq   
  426509:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  426510:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  426514:	c1 e6 04             	shl    $0x4,%esi
  426517:	b9 96 00 00 00       	mov    $0x96,%ecx
  42651c:	ba 98 e2 43 00       	mov    $0x43e298,%edx
  426521:	e8 0a f0 ff ff       	callq  425530 <CRYPTO_realloc>
  426526:	48 85 c0             	test   %rax,%rax
  426529:	74 65                	je     426590 <sk_push+0xc0>
  42652b:	44 8b 2b             	mov    (%rbx),%r13d
  42652e:	d1 63 14             	shll   0x14(%rbx)
  426531:	48 89 43 08          	mov    %rax,0x8(%rbx)
  426535:	44 39 ed             	cmp    %r13d,%ebp
  426538:	7d 5d                	jge    426597 <sk_push+0xc7>
  42653a:	89 ea                	mov    %ebp,%edx
  42653c:	c1 ea 1f             	shr    $0x1f,%edx
  42653f:	84 d2                	test   %dl,%dl
  426541:	75 54                	jne    426597 <sk_push+0xc7>
  426543:	44 89 ea             	mov    %r13d,%edx
  426546:	b9 08 00 00 00       	mov    $0x8,%ecx
  42654b:	29 ea                	sub    %ebp,%edx
  42654d:	44 39 ed             	cmp    %r13d,%ebp
  426550:	48 8d 14 d5 08 00 00 	lea    0x8(,%rdx,8),%rdx
  426557:	00 
  426558:	48 0f 4f d1          	cmovg  %rcx,%rdx
  42655c:	49 63 cd             	movslq %r13d,%rcx
  42655f:	48 c1 e1 03          	shl    $0x3,%rcx
  426563:	48 8d 79 10          	lea    0x10(%rcx),%rdi
  426567:	48 83 c1 08          	add    $0x8,%rcx
  42656b:	48 29 d1             	sub    %rdx,%rcx
  42656e:	48 29 d7             	sub    %rdx,%rdi
  426571:	48 8d 34 08          	lea    (%rax,%rcx,1),%rsi
  426575:	48 01 c7             	add    %rax,%rdi
  426578:	e8 e3 08 fe ff       	callq  406e60 <memmove@plt>
  42657d:	48 8b 43 08          	mov    0x8(%rbx),%rax
  426581:	4c 89 24 e8          	mov    %r12,(%rax,%rbp,8)
  426585:	41 8d 45 01          	lea    0x1(%r13),%eax
  426589:	e9 67 ff ff ff       	jmpq   4264f5 <sk_push+0x25>
  42658e:	66 90                	xchg   %ax,%ax
  426590:	31 c0                	xor    %eax,%eax
  426592:	e9 67 ff ff ff       	jmpq   4264fe <sk_push+0x2e>
  426597:	41 8d 45 01          	lea    0x1(%r13),%eax
  42659b:	49 63 ed             	movslq %r13d,%rbp
  42659e:	e9 4a ff ff ff       	jmpq   4264ed <sk_push+0x1d>
  4265a3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  4265aa:	84 00 00 00 00 00 

00000000004265b0 <sk_unshift>:
  4265b0:	48 85 ff             	test   %rdi,%rdi
  4265b3:	41 54                	push   %r12
  4265b5:	55                   	push   %rbp
  4265b6:	53                   	push   %rbx
  4265b7:	0f 84 a3 00 00 00    	je     426660 <sk_unshift+0xb0>
  4265bd:	48 63 17             	movslq (%rdi),%rdx
  4265c0:	49 89 f4             	mov    %rsi,%r12
  4265c3:	8b 77 14             	mov    0x14(%rdi),%esi
  4265c6:	48 89 fb             	mov    %rdi,%rbx
  4265c9:	8d 6a 01             	lea    0x1(%rdx),%ebp
  4265cc:	39 ee                	cmp    %ebp,%esi
  4265ce:	7e 60                	jle    426630 <sk_unshift+0x80>
  4265d0:	48 8b 47 08          	mov    0x8(%rdi),%rax
  4265d4:	85 d2                	test   %edx,%edx
  4265d6:	7e 48                	jle    426620 <sk_unshift+0x70>
  4265d8:	48 63 ca             	movslq %edx,%rcx
  4265db:	48 8d 14 cd 08 00 00 	lea    0x8(,%rcx,8),%rdx
  4265e2:	00 
  4265e3:	48 c1 e1 03          	shl    $0x3,%rcx
  4265e7:	48 8d 79 10          	lea    0x10(%rcx),%rdi
  4265eb:	48 83 c1 08          	add    $0x8,%rcx
  4265ef:	48 29 d1             	sub    %rdx,%rcx
  4265f2:	48 29 d7             	sub    %rdx,%rdi
  4265f5:	48 8d 34 08          	lea    (%rax,%rcx,1),%rsi
  4265f9:	48 01 c7             	add    %rax,%rdi
  4265fc:	e8 5f 08 fe ff       	callq  406e60 <memmove@plt>
  426601:	48 8b 43 08          	mov    0x8(%rbx),%rax
  426605:	4c 89 20             	mov    %r12,(%rax)
  426608:	89 2b                	mov    %ebp,(%rbx)
  42660a:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%rbx)
  426611:	89 e8                	mov    %ebp,%eax
  426613:	5b                   	pop    %rbx
  426614:	5d                   	pop    %rbp
  426615:	41 5c                	pop    %r12
  426617:	c3                   	retq   
  426618:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  42661f:	00 
  426620:	4c 89 24 d0          	mov    %r12,(%rax,%rdx,8)
  426624:	eb e2                	jmp    426608 <sk_unshift+0x58>
  426626:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  42662d:	00 00 00 
  426630:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  426634:	c1 e6 04             	shl    $0x4,%esi
  426637:	b9 96 00 00 00       	mov    $0x96,%ecx
  42663c:	ba 98 e2 43 00       	mov    $0x43e298,%edx
  426641:	e8 ea ee ff ff       	callq  425530 <CRYPTO_realloc>
  426646:	48 85 c0             	test   %rax,%rax
  426649:	74 15                	je     426660 <sk_unshift+0xb0>
  42664b:	48 63 13             	movslq (%rbx),%rdx
  42664e:	48 89 43 08          	mov    %rax,0x8(%rbx)
  426652:	d1 63 14             	shll   0x14(%rbx)
  426655:	8d 6a 01             	lea    0x1(%rdx),%ebp
  426658:	e9 77 ff ff ff       	jmpq   4265d4 <sk_unshift+0x24>
  42665d:	0f 1f 00             	nopl   (%rax)
  426660:	31 ed                	xor    %ebp,%ebp
  426662:	89 e8                	mov    %ebp,%eax
  426664:	5b                   	pop    %rbx
  426665:	5d                   	pop    %rbp
  426666:	41 5c                	pop    %r12
  426668:	c3                   	retq   
  426669:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000426670 <sk_shift>:
  426670:	48 85 ff             	test   %rdi,%rdi
  426673:	74 3b                	je     4266b0 <sk_shift+0x40>
  426675:	44 8b 0f             	mov    (%rdi),%r9d
  426678:	45 85 c9             	test   %r9d,%r9d
  42667b:	7e 33                	jle    4266b0 <sk_shift+0x40>
  42667d:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
  426681:	41 83 e9 01          	sub    $0x1,%r9d
  426685:	48 8b 01             	mov    (%rcx),%rax
  426688:	74 22                	je     4266ac <sk_shift+0x3c>
  42668a:	31 d2                	xor    %edx,%edx
  42668c:	31 f6                	xor    %esi,%esi
  42668e:	eb 07                	jmp    426697 <sk_shift+0x27>
  426690:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
  426694:	4c 89 d2             	mov    %r10,%rdx
  426697:	4c 8b 44 11 08       	mov    0x8(%rcx,%rdx,1),%r8
  42669c:	83 c6 01             	add    $0x1,%esi
  42669f:	4c 8d 52 08          	lea    0x8(%rdx),%r10
  4266a3:	41 39 f1             	cmp    %esi,%r9d
  4266a6:	4c 89 04 11          	mov    %r8,(%rcx,%rdx,1)
  4266aa:	7f e4                	jg     426690 <sk_shift+0x20>
  4266ac:	44 89 0f             	mov    %r9d,(%rdi)
  4266af:	c3                   	retq   
  4266b0:	31 c0                	xor    %eax,%eax
  4266b2:	c3                   	retq   
  4266b3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  4266ba:	84 00 00 00 00 00 

00000000004266c0 <sk_pop>:
  4266c0:	48 85 ff             	test   %rdi,%rdi
  4266c3:	74 1b                	je     4266e0 <sk_pop+0x20>
  4266c5:	8b 07                	mov    (%rdi),%eax
  4266c7:	85 c0                	test   %eax,%eax
  4266c9:	7e 15                	jle    4266e0 <sk_pop+0x20>
  4266cb:	8d 50 ff             	lea    -0x1(%rax),%edx
  4266ce:	48 8b 47 08          	mov    0x8(%rdi),%rax
  4266d2:	48 63 ca             	movslq %edx,%rcx
  4266d5:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
  4266d9:	89 17                	mov    %edx,(%rdi)
  4266db:	c3                   	retq   
  4266dc:	0f 1f 40 00          	nopl   0x0(%rax)
  4266e0:	31 c0                	xor    %eax,%eax
  4266e2:	c3                   	retq   
  4266e3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  4266ea:	84 00 00 00 00 00 

00000000004266f0 <sk_zero>:
  4266f0:	48 85 ff             	test   %rdi,%rdi
  4266f3:	74 21                	je     426716 <sk_zero+0x26>
  4266f5:	48 63 17             	movslq (%rdi),%rdx
  4266f8:	85 d2                	test   %edx,%edx
  4266fa:	7e 1a                	jle    426716 <sk_zero+0x26>
  4266fc:	53                   	push   %rbx
  4266fd:	48 89 fb             	mov    %rdi,%rbx
  426700:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  426704:	48 c1 e2 03          	shl    $0x3,%rdx
  426708:	31 f6                	xor    %esi,%esi
  42670a:	e8 71 05 fe ff       	callq  406c80 <memset@plt>
  42670f:	c7 03 00 00 00 00    	movl   $0x0,(%rbx)
  426715:	5b                   	pop    %rbx
  426716:	f3 c3                	repz retq 
  426718:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  42671f:	00 

0000000000426720 <sk_pop_free>:
  426720:	48 85 ff             	test   %rdi,%rdi
  426723:	74 5b                	je     426780 <sk_pop_free+0x60>
  426725:	41 54                	push   %r12
  426727:	55                   	push   %rbp
  426728:	49 89 f4             	mov    %rsi,%r12
  42672b:	53                   	push   %rbx
  42672c:	8b 17                	mov    (%rdi),%edx
  42672e:	31 db                	xor    %ebx,%ebx
  426730:	48 89 fd             	mov    %rdi,%rbp
  426733:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  426737:	85 d2                	test   %edx,%edx
  426739:	7e 26                	jle    426761 <sk_pop_free+0x41>
  42673b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  426740:	48 8b 04 df          	mov    (%rdi,%rbx,8),%rax
  426744:	48 85 c0             	test   %rax,%rax
  426747:	74 0d                	je     426756 <sk_pop_free+0x36>
  426749:	48 89 c7             	mov    %rax,%rdi
  42674c:	41 ff d4             	callq  *%r12
  42674f:	48 8b 7d 08          	mov    0x8(%rbp),%rdi
  426753:	8b 55 00             	mov    0x0(%rbp),%edx
  426756:	8d 43 01             	lea    0x1(%rbx),%eax
  426759:	48 83 c3 01          	add    $0x1,%rbx
  42675d:	39 d0                	cmp    %edx,%eax
  42675f:	7c df                	jl     426740 <sk_pop_free+0x20>
  426761:	48 85 ff             	test   %rdi,%rdi
  426764:	74 05                	je     42676b <sk_pop_free+0x4b>
  426766:	e8 f5 ef ff ff       	callq  425760 <CRYPTO_free>
  42676b:	5b                   	pop    %rbx
  42676c:	48 89 ef             	mov    %rbp,%rdi
  42676f:	5d                   	pop    %rbp
  426770:	41 5c                	pop    %r12
  426772:	e9 e9 ef ff ff       	jmpq   425760 <CRYPTO_free>
  426777:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  42677e:	00 00 
  426780:	f3 c3                	repz retq 
  426782:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  426789:	1f 84 00 00 00 00 00 

0000000000426790 <sk_free>:
  426790:	48 85 ff             	test   %rdi,%rdi
  426793:	74 1b                	je     4267b0 <sk_free+0x20>
  426795:	53                   	push   %rbx
  426796:	48 89 fb             	mov    %rdi,%rbx
  426799:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  42679d:	48 85 ff             	test   %rdi,%rdi
  4267a0:	74 05                	je     4267a7 <sk_free+0x17>
  4267a2:	e8 b9 ef ff ff       	callq  425760 <CRYPTO_free>
  4267a7:	48 89 df             	mov    %rbx,%rdi
  4267aa:	5b                   	pop    %rbx
  4267ab:	e9 b0 ef ff ff       	jmpq   425760 <CRYPTO_free>
  4267b0:	f3 c3                	repz retq 
  4267b2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  4267b9:	1f 84 00 00 00 00 00 

00000000004267c0 <sk_num>:
  4267c0:	48 85 ff             	test   %rdi,%rdi
  4267c3:	74 03                	je     4267c8 <sk_num+0x8>
  4267c5:	8b 07                	mov    (%rdi),%eax
  4267c7:	c3                   	retq   
  4267c8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  4267cd:	c3                   	retq   
  4267ce:	66 90                	xchg   %ax,%ax

00000000004267d0 <sk_value>:
  4267d0:	48 85 ff             	test   %rdi,%rdi
  4267d3:	74 1b                	je     4267f0 <sk_value+0x20>
  4267d5:	89 f0                	mov    %esi,%eax
  4267d7:	c1 e8 1f             	shr    $0x1f,%eax
  4267da:	84 c0                	test   %al,%al
  4267dc:	75 12                	jne    4267f0 <sk_value+0x20>
  4267de:	3b 37                	cmp    (%rdi),%esi
  4267e0:	7d 0e                	jge    4267f0 <sk_value+0x20>
  4267e2:	48 8b 47 08          	mov    0x8(%rdi),%rax
  4267e6:	48 63 f6             	movslq %esi,%rsi
  4267e9:	48 8b 04 f0          	mov    (%rax,%rsi,8),%rax
  4267ed:	c3                   	retq   
  4267ee:	66 90                	xchg   %ax,%ax
  4267f0:	31 c0                	xor    %eax,%eax
  4267f2:	c3                   	retq   
  4267f3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  4267fa:	84 00 00 00 00 00 

0000000000426800 <sk_set>:
  426800:	48 85 ff             	test   %rdi,%rdi
  426803:	74 23                	je     426828 <sk_set+0x28>
  426805:	89 f0                	mov    %esi,%eax
  426807:	c1 e8 1f             	shr    $0x1f,%eax
  42680a:	84 c0                	test   %al,%al
  42680c:	75 1a                	jne    426828 <sk_set+0x28>
  42680e:	3b 37                	cmp    (%rdi),%esi
  426810:	7d 16                	jge    426828 <sk_set+0x28>
  426812:	48 8b 47 08          	mov    0x8(%rdi),%rax
  426816:	48 63 f6             	movslq %esi,%rsi
  426819:	48 89 14 f0          	mov    %rdx,(%rax,%rsi,8)
  42681d:	48 89 d0             	mov    %rdx,%rax
  426820:	c3                   	retq   
  426821:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  426828:	31 c0                	xor    %eax,%eax
  42682a:	c3                   	retq   
  42682b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000426830 <sk_sort>:
  426830:	48 85 ff             	test   %rdi,%rdi
  426833:	74 07                	je     42683c <sk_sort+0xc>
  426835:	8b 47 10             	mov    0x10(%rdi),%eax
  426838:	85 c0                	test   %eax,%eax
  42683a:	74 04                	je     426840 <sk_sort+0x10>
  42683c:	c3                   	retq   
  42683d:	0f 1f 00             	nopl   (%rax)
  426840:	53                   	push   %rbx
  426841:	48 63 37             	movslq (%rdi),%rsi
  426844:	48 89 fb             	mov    %rdi,%rbx
  426847:	48 8b 4f 18          	mov    0x18(%rdi),%rcx
  42684b:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  42684f:	ba 08 00 00 00       	mov    $0x8,%edx
  426854:	e8 57 06 fe ff       	callq  406eb0 <qsort@plt>
  426859:	c7 43 10 01 00 00 00 	movl   $0x1,0x10(%rbx)
  426860:	5b                   	pop    %rbx
  426861:	c3                   	retq   
  426862:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  426869:	1f 84 00 00 00 00 00 

0000000000426870 <sk_is_sorted>:
  426870:	48 85 ff             	test   %rdi,%rdi
  426873:	74 0b                	je     426880 <sk_is_sorted+0x10>
  426875:	8b 47 10             	mov    0x10(%rdi),%eax
  426878:	c3                   	retq   
  426879:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  426880:	b8 01 00 00 00       	mov    $0x1,%eax
  426885:	c3                   	retq   
  426886:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  42688d:	00 00 00 

0000000000426890 <err_string_data_LHASH_HASH>:
  426890:	48 8b 17             	mov    (%rdi),%rdx
  426893:	48 89 d1             	mov    %rdx,%rcx
  426896:	48 89 d6             	mov    %rdx,%rsi
  426899:	48 c1 e9 0c          	shr    $0xc,%rcx
  42689d:	48 c1 ee 18          	shr    $0x18,%rsi
  4268a1:	81 e1 ff 0f 00 00    	and    $0xfff,%ecx
  4268a7:	40 0f b6 f6          	movzbl %sil,%esi
  4268ab:	31 f1                	xor    %esi,%ecx
  4268ad:	48 63 c9             	movslq %ecx,%rcx
  4268b0:	48 31 d1             	xor    %rdx,%rcx
  4268b3:	48 ba 5f 43 79 0d e5 	movabs $0xd79435e50d79435f,%rdx
  4268ba:	35 94 d7 
  4268bd:	48 89 c8             	mov    %rcx,%rax
  4268c0:	48 89 cf             	mov    %rcx,%rdi
  4268c3:	48 f7 e2             	mul    %rdx
  4268c6:	48 c1 ea 04          	shr    $0x4,%rdx
  4268ca:	48 8d 04 d2          	lea    (%rdx,%rdx,8),%rax
  4268ce:	48 8d 04 42          	lea    (%rdx,%rax,2),%rax
  4268d2:	48 29 c7             	sub    %rax,%rdi
  4268d5:	48 8d 14 7f          	lea    (%rdi,%rdi,2),%rdx
  4268d9:	48 8d 04 97          	lea    (%rdi,%rdx,4),%rax
  4268dd:	48 31 c8             	xor    %rcx,%rax
  4268e0:	c3                   	retq   
  4268e1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  4268e8:	0f 1f 84 00 00 00 00 
  4268ef:	00 

00000000004268f0 <err_string_data_LHASH_COMP>:
  4268f0:	48 8b 07             	mov    (%rdi),%rax
  4268f3:	2b 06                	sub    (%rsi),%eax
  4268f5:	c3                   	retq   
  4268f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4268fd:	00 00 00 

0000000000426900 <int_err_get_next_lib>:
  426900:	53                   	push   %rbx
  426901:	b9 27 02 00 00       	mov    $0x227,%ecx
  426906:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  42690b:	be 01 00 00 00       	mov    $0x1,%esi
  426910:	bf 09 00 00 00       	mov    $0x9,%edi
  426915:	e8 f6 e4 ff ff       	callq  424e10 <CRYPTO_lock>
  42691a:	8b 1d e4 19 23 00    	mov    0x2319e4(%rip),%ebx        # 658304 <int_err_library_number>
  426920:	b9 29 02 00 00       	mov    $0x229,%ecx
  426925:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  42692a:	be 01 00 00 00       	mov    $0x1,%esi
  42692f:	bf 0a 00 00 00       	mov    $0xa,%edi
  426934:	8d 43 01             	lea    0x1(%rbx),%eax
  426937:	89 05 c7 19 23 00    	mov    %eax,0x2319c7(%rip)        # 658304 <int_err_library_number>
  42693d:	e8 ce e4 ff ff       	callq  424e10 <CRYPTO_lock>
  426942:	89 d8                	mov    %ebx,%eax
  426944:	5b                   	pop    %rbx
  426945:	c3                   	retq   
  426946:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  42694d:	00 00 00 

0000000000426950 <int_err_del>:
  426950:	48 83 ec 08          	sub    $0x8,%rsp
  426954:	bf 09 00 00 00       	mov    $0x9,%edi
  426959:	b9 72 01 00 00       	mov    $0x172,%ecx
  42695e:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  426963:	be 01 00 00 00       	mov    $0x1,%esi
  426968:	e8 a3 e4 ff ff       	callq  424e10 <CRYPTO_lock>
  42696d:	48 8b 3d 9c 3f 23 00 	mov    0x233f9c(%rip),%rdi        # 65a910 <int_error_hash>
  426974:	48 85 ff             	test   %rdi,%rdi
  426977:	74 10                	je     426989 <int_err_del+0x39>
  426979:	e8 62 df 00 00       	callq  4348e0 <lh_free>
  42697e:	48 c7 05 87 3f 23 00 	movq   $0x0,0x233f87(%rip)        # 65a910 <int_error_hash>
  426985:	00 00 00 00 
  426989:	b9 78 01 00 00       	mov    $0x178,%ecx
  42698e:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  426993:	be 01 00 00 00       	mov    $0x1,%esi
  426998:	bf 0a 00 00 00       	mov    $0xa,%edi
  42699d:	48 83 c4 08          	add    $0x8,%rsp
  4269a1:	e9 6a e4 ff ff       	jmpq   424e10 <CRYPTO_lock>
  4269a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4269ad:	00 00 00 

00000000004269b0 <int_thread_release>:
  4269b0:	48 85 ff             	test   %rdi,%rdi
  4269b3:	74 2e                	je     4269e3 <int_thread_release+0x33>
  4269b5:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  4269b9:	74 28                	je     4269e3 <int_thread_release+0x33>
  4269bb:	53                   	push   %rbx
  4269bc:	41 b8 d5 01 00 00    	mov    $0x1d5,%r8d
  4269c2:	48 89 fb             	mov    %rdi,%rbx
  4269c5:	b9 c9 e2 43 00       	mov    $0x43e2c9,%ecx
  4269ca:	ba 01 00 00 00       	mov    $0x1,%edx
  4269cf:	be ff ff ff ff       	mov    $0xffffffff,%esi
  4269d4:	bf 00 a9 65 00       	mov    $0x65a900,%edi
  4269d9:	e8 a2 e4 ff ff       	callq  424e80 <CRYPTO_add_lock>
  4269de:	85 c0                	test   %eax,%eax
  4269e0:	7e 06                	jle    4269e8 <int_thread_release+0x38>
  4269e2:	5b                   	pop    %rbx
  4269e3:	f3 c3                	repz retq 
  4269e5:	0f 1f 00             	nopl   (%rax)
  4269e8:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
  4269ef:	5b                   	pop    %rbx
  4269f0:	eb f1                	jmp    4269e3 <int_thread_release+0x33>
  4269f2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  4269f9:	1f 84 00 00 00 00 00 

0000000000426a00 <int_thread_get>:
  426a00:	55                   	push   %rbp
  426a01:	53                   	push   %rbx
  426a02:	89 fd                	mov    %edi,%ebp
  426a04:	b9 be 01 00 00       	mov    $0x1be,%ecx
  426a09:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  426a0e:	be 01 00 00 00       	mov    $0x1,%esi
  426a13:	48 83 ec 08          	sub    $0x8,%rsp
  426a17:	bf 09 00 00 00       	mov    $0x9,%edi
  426a1c:	e8 ef e3 ff ff       	callq  424e10 <CRYPTO_lock>
  426a21:	85 ed                	test   %ebp,%ebp
  426a23:	48 8b 1d de 3e 23 00 	mov    0x233ede(%rip),%rbx        # 65a908 <int_thread_hash>
  426a2a:	74 05                	je     426a31 <int_thread_get+0x31>
  426a2c:	48 85 db             	test   %rbx,%rbx
  426a2f:	74 2f                	je     426a60 <int_thread_get+0x60>
  426a31:	48 85 db             	test   %rbx,%rbx
  426a34:	74 07                	je     426a3d <int_thread_get+0x3d>
  426a36:	83 05 c3 3e 23 00 01 	addl   $0x1,0x233ec3(%rip)        # 65a900 <int_thread_hash_references>
  426a3d:	b9 ca 01 00 00       	mov    $0x1ca,%ecx
  426a42:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  426a47:	be 01 00 00 00       	mov    $0x1,%esi
  426a4c:	bf 0a 00 00 00       	mov    $0xa,%edi
  426a51:	e8 ba e3 ff ff       	callq  424e10 <CRYPTO_lock>
  426a56:	48 83 c4 08          	add    $0x8,%rsp
  426a5a:	48 89 d8             	mov    %rbx,%rax
  426a5d:	5b                   	pop    %rbx
  426a5e:	5d                   	pop    %rbp
  426a5f:	c3                   	retq   
  426a60:	ba c1 01 00 00       	mov    $0x1c1,%edx
  426a65:	be c9 e2 43 00       	mov    $0x43e2c9,%esi
  426a6a:	bf cf e2 43 00       	mov    $0x43e2cf,%edi
  426a6f:	e8 dc 2d 00 00       	callq  429850 <CRYPTO_push_info_>
  426a74:	be 30 6b 42 00       	mov    $0x426b30,%esi
  426a79:	bf 40 6b 42 00       	mov    $0x426b40,%edi
  426a7e:	e8 6d dc 00 00       	callq  4346f0 <lh_new>
  426a83:	48 89 05 7e 3e 23 00 	mov    %rax,0x233e7e(%rip)        # 65a908 <int_thread_hash>
  426a8a:	e8 b1 2f 00 00       	callq  429a40 <CRYPTO_pop_info>
  426a8f:	48 8b 1d 72 3e 23 00 	mov    0x233e72(%rip),%rbx        # 65a908 <int_thread_hash>
  426a96:	eb 99                	jmp    426a31 <int_thread_get+0x31>
  426a98:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  426a9f:	00 

0000000000426aa0 <int_err_get>:
  426aa0:	55                   	push   %rbp
  426aa1:	53                   	push   %rbx
  426aa2:	89 fd                	mov    %edi,%ebp
  426aa4:	b9 62 01 00 00       	mov    $0x162,%ecx
  426aa9:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  426aae:	be 01 00 00 00       	mov    $0x1,%esi
  426ab3:	48 83 ec 08          	sub    $0x8,%rsp
  426ab7:	bf 09 00 00 00       	mov    $0x9,%edi
  426abc:	e8 4f e3 ff ff       	callq  424e10 <CRYPTO_lock>
  426ac1:	85 ed                	test   %ebp,%ebp
  426ac3:	48 8b 1d 46 3e 23 00 	mov    0x233e46(%rip),%rbx        # 65a910 <int_error_hash>
  426aca:	74 05                	je     426ad1 <int_err_get+0x31>
  426acc:	48 85 db             	test   %rbx,%rbx
  426acf:	74 27                	je     426af8 <int_err_get+0x58>
  426ad1:	b9 6b 01 00 00       	mov    $0x16b,%ecx
  426ad6:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  426adb:	be 01 00 00 00       	mov    $0x1,%esi
  426ae0:	bf 0a 00 00 00       	mov    $0xa,%edi
  426ae5:	e8 26 e3 ff ff       	callq  424e10 <CRYPTO_lock>
  426aea:	48 83 c4 08          	add    $0x8,%rsp
  426aee:	48 89 d8             	mov    %rbx,%rax
  426af1:	5b                   	pop    %rbx
  426af2:	5d                   	pop    %rbp
  426af3:	c3                   	retq   
  426af4:	0f 1f 40 00          	nopl   0x0(%rax)
  426af8:	ba 65 01 00 00       	mov    $0x165,%edx
  426afd:	be c9 e2 43 00       	mov    $0x43e2c9,%esi
  426b02:	bf e6 e2 43 00       	mov    $0x43e2e6,%edi
  426b07:	e8 44 2d 00 00       	callq  429850 <CRYPTO_push_info_>
  426b0c:	be f0 68 42 00       	mov    $0x4268f0,%esi
  426b11:	bf 90 68 42 00       	mov    $0x426890,%edi
  426b16:	e8 d5 db 00 00       	callq  4346f0 <lh_new>
  426b1b:	48 89 05 ee 3d 23 00 	mov    %rax,0x233dee(%rip)        # 65a910 <int_error_hash>
  426b22:	e8 19 2f 00 00       	callq  429a40 <CRYPTO_pop_info>
  426b27:	48 8b 1d e2 3d 23 00 	mov    0x233de2(%rip),%rbx        # 65a910 <int_error_hash>
  426b2e:	eb a1                	jmp    426ad1 <int_err_get+0x31>

0000000000426b30 <err_state_LHASH_COMP>:
  426b30:	e9 1b e0 ff ff       	jmpq   424b50 <CRYPTO_THREADID_cmp>
  426b35:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  426b3c:	00 00 00 00 

0000000000426b40 <err_state_LHASH_HASH>:
  426b40:	48 83 ec 08          	sub    $0x8,%rsp
  426b44:	e8 27 e0 ff ff       	callq  424b70 <CRYPTO_THREADID_hash>
  426b49:	48 8d 14 40          	lea    (%rax,%rax,2),%rdx
  426b4d:	48 83 c4 08          	add    $0x8,%rsp
  426b51:	48 8d 04 90          	lea    (%rax,%rdx,4),%rax
  426b55:	c3                   	retq   
  426b56:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  426b5d:	00 00 00 

0000000000426b60 <ERR_remove_thread_state.constprop.3>:
  426b60:	48 81 ec 68 02 00 00 	sub    $0x268,%rsp
  426b67:	48 89 e7             	mov    %rsp,%rdi
  426b6a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  426b71:	00 00 
  426b73:	48 89 84 24 58 02 00 	mov    %rax,0x258(%rsp)
  426b7a:	00 
  426b7b:	31 c0                	xor    %eax,%eax
  426b7d:	e8 8e df ff ff       	callq  424b10 <CRYPTO_THREADID_current>
  426b82:	48 8b 05 8f 3d 23 00 	mov    0x233d8f(%rip),%rax        # 65a918 <err_fns>
  426b89:	48 85 c0             	test   %rax,%rax
  426b8c:	74 22                	je     426bb0 <ERR_remove_thread_state.constprop.3+0x50>
  426b8e:	48 89 e7             	mov    %rsp,%rdi
  426b91:	ff 50 48             	callq  *0x48(%rax)
  426b94:	48 8b 84 24 58 02 00 	mov    0x258(%rsp),%rax
  426b9b:	00 
  426b9c:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  426ba3:	00 00 
  426ba5:	75 5e                	jne    426c05 <ERR_remove_thread_state.constprop.3+0xa5>
  426ba7:	48 81 c4 68 02 00 00 	add    $0x268,%rsp
  426bae:	c3                   	retq   
  426baf:	90                   	nop
  426bb0:	b9 27 01 00 00       	mov    $0x127,%ecx
  426bb5:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  426bba:	be 01 00 00 00       	mov    $0x1,%esi
  426bbf:	bf 09 00 00 00       	mov    $0x9,%edi
  426bc4:	e8 47 e2 ff ff       	callq  424e10 <CRYPTO_lock>
  426bc9:	48 83 3d 47 3d 23 00 	cmpq   $0x0,0x233d47(%rip)        # 65a918 <err_fns>
  426bd0:	00 
  426bd1:	74 25                	je     426bf8 <ERR_remove_thread_state.constprop.3+0x98>
  426bd3:	b9 2a 01 00 00       	mov    $0x12a,%ecx
  426bd8:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  426bdd:	be 01 00 00 00       	mov    $0x1,%esi
  426be2:	bf 0a 00 00 00       	mov    $0xa,%edi
  426be7:	e8 24 e2 ff ff       	callq  424e10 <CRYPTO_lock>
  426bec:	48 8b 05 25 3d 23 00 	mov    0x233d25(%rip),%rax        # 65a918 <err_fns>
  426bf3:	eb 99                	jmp    426b8e <ERR_remove_thread_state.constprop.3+0x2e>
  426bf5:	0f 1f 00             	nopl   (%rax)
  426bf8:	48 c7 05 15 3d 23 00 	movq   $0x43e740,0x233d15(%rip)        # 65a918 <err_fns>
  426bff:	40 e7 43 00 
  426c03:	eb ce                	jmp    426bd3 <ERR_remove_thread_state.constprop.3+0x73>
  426c05:	e8 b6 02 fe ff       	callq  406ec0 <__stack_chk_fail@plt>
  426c0a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000426c10 <int_err_del_item>:
  426c10:	55                   	push   %rbp
  426c11:	53                   	push   %rbx
  426c12:	48 89 fd             	mov    %rdi,%rbp
  426c15:	48 83 ec 08          	sub    $0x8,%rsp
  426c19:	48 8b 05 f8 3c 23 00 	mov    0x233cf8(%rip),%rax        # 65a918 <err_fns>
  426c20:	48 85 c0             	test   %rax,%rax
  426c23:	74 5b                	je     426c80 <int_err_del_item+0x70>
  426c25:	31 ff                	xor    %edi,%edi
  426c27:	ff 10                	callq  *(%rax)
  426c29:	48 85 c0             	test   %rax,%rax
  426c2c:	48 89 c3             	mov    %rax,%rbx
  426c2f:	0f 84 9b 00 00 00    	je     426cd0 <int_err_del_item+0xc0>
  426c35:	b9 a7 01 00 00       	mov    $0x1a7,%ecx
  426c3a:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  426c3f:	be 01 00 00 00       	mov    $0x1,%esi
  426c44:	bf 09 00 00 00       	mov    $0x9,%edi
  426c49:	e8 c2 e1 ff ff       	callq  424e10 <CRYPTO_lock>
  426c4e:	48 89 df             	mov    %rbx,%rdi
  426c51:	48 89 ee             	mov    %rbp,%rsi
  426c54:	e8 17 df 00 00       	callq  434b70 <lh_delete>
  426c59:	b9 a9 01 00 00       	mov    $0x1a9,%ecx
  426c5e:	48 89 c3             	mov    %rax,%rbx
  426c61:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  426c66:	be 01 00 00 00       	mov    $0x1,%esi
  426c6b:	bf 0a 00 00 00       	mov    $0xa,%edi
  426c70:	e8 9b e1 ff ff       	callq  424e10 <CRYPTO_lock>
  426c75:	48 89 d8             	mov    %rbx,%rax
  426c78:	48 83 c4 08          	add    $0x8,%rsp
  426c7c:	5b                   	pop    %rbx
  426c7d:	5d                   	pop    %rbp
  426c7e:	c3                   	retq   
  426c7f:	90                   	nop
  426c80:	b9 27 01 00 00       	mov    $0x127,%ecx
  426c85:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  426c8a:	be 01 00 00 00       	mov    $0x1,%esi
  426c8f:	bf 09 00 00 00       	mov    $0x9,%edi
  426c94:	e8 77 e1 ff ff       	callq  424e10 <CRYPTO_lock>
  426c99:	48 83 3d 77 3c 23 00 	cmpq   $0x0,0x233c77(%rip)        # 65a918 <err_fns>
  426ca0:	00 
  426ca1:	74 35                	je     426cd8 <int_err_del_item+0xc8>
  426ca3:	b9 2a 01 00 00       	mov    $0x12a,%ecx
  426ca8:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  426cad:	be 01 00 00 00       	mov    $0x1,%esi
  426cb2:	bf 0a 00 00 00       	mov    $0xa,%edi
  426cb7:	e8 54 e1 ff ff       	callq  424e10 <CRYPTO_lock>
  426cbc:	48 8b 05 55 3c 23 00 	mov    0x233c55(%rip),%rax        # 65a918 <err_fns>
  426cc3:	e9 5d ff ff ff       	jmpq   426c25 <int_err_del_item+0x15>
  426cc8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  426ccf:	00 
  426cd0:	31 c0                	xor    %eax,%eax
  426cd2:	eb a4                	jmp    426c78 <int_err_del_item+0x68>
  426cd4:	0f 1f 40 00          	nopl   0x0(%rax)
  426cd8:	48 c7 05 35 3c 23 00 	movq   $0x43e740,0x233c35(%rip)        # 65a918 <err_fns>
  426cdf:	40 e7 43 00 
  426ce3:	eb be                	jmp    426ca3 <int_err_del_item+0x93>
  426ce5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  426cec:	00 00 00 00 

0000000000426cf0 <int_err_get_item>:
  426cf0:	55                   	push   %rbp
  426cf1:	53                   	push   %rbx
  426cf2:	48 89 fd             	mov    %rdi,%rbp
  426cf5:	48 83 ec 08          	sub    $0x8,%rsp
  426cf9:	48 8b 05 18 3c 23 00 	mov    0x233c18(%rip),%rax        # 65a918 <err_fns>
  426d00:	48 85 c0             	test   %rax,%rax
  426d03:	74 5b                	je     426d60 <int_err_get_item+0x70>
  426d05:	31 ff                	xor    %edi,%edi
  426d07:	ff 10                	callq  *(%rax)
  426d09:	48 85 c0             	test   %rax,%rax
  426d0c:	48 89 c3             	mov    %rax,%rbx
  426d0f:	0f 84 9b 00 00 00    	je     426db0 <int_err_get_item+0xc0>
  426d15:	b9 85 01 00 00       	mov    $0x185,%ecx
  426d1a:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  426d1f:	be 01 00 00 00       	mov    $0x1,%esi
  426d24:	bf 05 00 00 00       	mov    $0x5,%edi
  426d29:	e8 e2 e0 ff ff       	callq  424e10 <CRYPTO_lock>
  426d2e:	48 89 df             	mov    %rbx,%rdi
  426d31:	48 89 ee             	mov    %rbp,%rsi
  426d34:	e8 07 e0 00 00       	callq  434d40 <lh_retrieve>
  426d39:	b9 87 01 00 00       	mov    $0x187,%ecx
  426d3e:	48 89 c3             	mov    %rax,%rbx
  426d41:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  426d46:	be 01 00 00 00       	mov    $0x1,%esi
  426d4b:	bf 06 00 00 00       	mov    $0x6,%edi
  426d50:	e8 bb e0 ff ff       	callq  424e10 <CRYPTO_lock>
  426d55:	48 89 d8             	mov    %rbx,%rax
  426d58:	48 83 c4 08          	add    $0x8,%rsp
  426d5c:	5b                   	pop    %rbx
  426d5d:	5d                   	pop    %rbp
  426d5e:	c3                   	retq   
  426d5f:	90                   	nop
  426d60:	b9 27 01 00 00       	mov    $0x127,%ecx
  426d65:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  426d6a:	be 01 00 00 00       	mov    $0x1,%esi
  426d6f:	bf 09 00 00 00       	mov    $0x9,%edi
  426d74:	e8 97 e0 ff ff       	callq  424e10 <CRYPTO_lock>
  426d79:	48 83 3d 97 3b 23 00 	cmpq   $0x0,0x233b97(%rip)        # 65a918 <err_fns>
  426d80:	00 
  426d81:	74 35                	je     426db8 <int_err_get_item+0xc8>
  426d83:	b9 2a 01 00 00       	mov    $0x12a,%ecx
  426d88:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  426d8d:	be 01 00 00 00       	mov    $0x1,%esi
  426d92:	bf 0a 00 00 00       	mov    $0xa,%edi
  426d97:	e8 74 e0 ff ff       	callq  424e10 <CRYPTO_lock>
  426d9c:	48 8b 05 75 3b 23 00 	mov    0x233b75(%rip),%rax        # 65a918 <err_fns>
  426da3:	e9 5d ff ff ff       	jmpq   426d05 <int_err_get_item+0x15>
  426da8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  426daf:	00 
  426db0:	31 c0                	xor    %eax,%eax
  426db2:	eb a4                	jmp    426d58 <int_err_get_item+0x68>
  426db4:	0f 1f 40 00          	nopl   0x0(%rax)
  426db8:	48 c7 05 55 3b 23 00 	movq   $0x43e740,0x233b55(%rip)        # 65a918 <err_fns>
  426dbf:	40 e7 43 00 
  426dc3:	eb be                	jmp    426d83 <int_err_get_item+0x93>
  426dc5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  426dcc:	00 00 00 00 

0000000000426dd0 <int_err_set_item>:
  426dd0:	55                   	push   %rbp
  426dd1:	53                   	push   %rbx
  426dd2:	48 89 fd             	mov    %rdi,%rbp
  426dd5:	48 83 ec 08          	sub    $0x8,%rsp
  426dd9:	48 8b 05 38 3b 23 00 	mov    0x233b38(%rip),%rax        # 65a918 <err_fns>
  426de0:	48 85 c0             	test   %rax,%rax
  426de3:	74 63                	je     426e48 <int_err_set_item+0x78>
  426de5:	bf 01 00 00 00       	mov    $0x1,%edi
  426dea:	ff 10                	callq  *(%rax)
  426dec:	48 85 c0             	test   %rax,%rax
  426def:	48 89 c3             	mov    %rax,%rbx
  426df2:	0f 84 98 00 00 00    	je     426e90 <int_err_set_item+0xc0>
  426df8:	b9 96 01 00 00       	mov    $0x196,%ecx
  426dfd:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  426e02:	be 01 00 00 00       	mov    $0x1,%esi
  426e07:	bf 09 00 00 00       	mov    $0x9,%edi
  426e0c:	e8 ff df ff ff       	callq  424e10 <CRYPTO_lock>
  426e11:	48 89 df             	mov    %rbx,%rdi
  426e14:	48 89 ee             	mov    %rbp,%rsi
  426e17:	e8 34 db 00 00       	callq  434950 <lh_insert>
  426e1c:	b9 98 01 00 00       	mov    $0x198,%ecx
  426e21:	48 89 c3             	mov    %rax,%rbx
  426e24:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  426e29:	be 01 00 00 00       	mov    $0x1,%esi
  426e2e:	bf 0a 00 00 00       	mov    $0xa,%edi
  426e33:	e8 d8 df ff ff       	callq  424e10 <CRYPTO_lock>
  426e38:	48 89 d8             	mov    %rbx,%rax
  426e3b:	48 83 c4 08          	add    $0x8,%rsp
  426e3f:	5b                   	pop    %rbx
  426e40:	5d                   	pop    %rbp
  426e41:	c3                   	retq   
  426e42:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  426e48:	b9 27 01 00 00       	mov    $0x127,%ecx
  426e4d:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  426e52:	be 01 00 00 00       	mov    $0x1,%esi
  426e57:	bf 09 00 00 00       	mov    $0x9,%edi
  426e5c:	e8 af df ff ff       	callq  424e10 <CRYPTO_lock>
  426e61:	48 83 3d af 3a 23 00 	cmpq   $0x0,0x233aaf(%rip)        # 65a918 <err_fns>
  426e68:	00 
  426e69:	74 2d                	je     426e98 <int_err_set_item+0xc8>
  426e6b:	b9 2a 01 00 00       	mov    $0x12a,%ecx
  426e70:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  426e75:	be 01 00 00 00       	mov    $0x1,%esi
  426e7a:	bf 0a 00 00 00       	mov    $0xa,%edi
  426e7f:	e8 8c df ff ff       	callq  424e10 <CRYPTO_lock>
  426e84:	48 8b 05 8d 3a 23 00 	mov    0x233a8d(%rip),%rax        # 65a918 <err_fns>
  426e8b:	e9 55 ff ff ff       	jmpq   426de5 <int_err_set_item+0x15>
  426e90:	31 c0                	xor    %eax,%eax
  426e92:	eb a7                	jmp    426e3b <int_err_set_item+0x6b>
  426e94:	0f 1f 40 00          	nopl   0x0(%rax)
  426e98:	48 c7 05 75 3a 23 00 	movq   $0x43e740,0x233a75(%rip)        # 65a918 <err_fns>
  426e9f:	40 e7 43 00 
  426ea3:	eb c6                	jmp    426e6b <int_err_set_item+0x9b>
  426ea5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  426eac:	00 00 00 00 

0000000000426eb0 <int_thread_set_item>:
  426eb0:	53                   	push   %rbx
  426eb1:	48 89 fb             	mov    %rdi,%rbx
  426eb4:	48 83 ec 10          	sub    $0x10,%rsp
  426eb8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  426ebf:	00 00 
  426ec1:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  426ec6:	31 c0                	xor    %eax,%eax
  426ec8:	48 8b 05 49 3a 23 00 	mov    0x233a49(%rip),%rax        # 65a918 <err_fns>
  426ecf:	48 85 c0             	test   %rax,%rax
  426ed2:	74 7c                	je     426f50 <int_thread_set_item+0xa0>
  426ed4:	bf 01 00 00 00       	mov    $0x1,%edi
  426ed9:	ff 50 28             	callq  *0x28(%rax)
  426edc:	48 85 c0             	test   %rax,%rax
  426edf:	48 89 04 24          	mov    %rax,(%rsp)
  426ee3:	0f 84 b7 00 00 00    	je     426fa0 <int_thread_set_item+0xf0>
  426ee9:	b9 01 02 00 00       	mov    $0x201,%ecx
  426eee:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  426ef3:	be 01 00 00 00       	mov    $0x1,%esi
  426ef8:	bf 09 00 00 00       	mov    $0x9,%edi
  426efd:	e8 0e df ff ff       	callq  424e10 <CRYPTO_lock>
  426f02:	48 8b 3c 24          	mov    (%rsp),%rdi
  426f06:	48 89 de             	mov    %rbx,%rsi
  426f09:	e8 42 da 00 00       	callq  434950 <lh_insert>
  426f0e:	b9 03 02 00 00       	mov    $0x203,%ecx
  426f13:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  426f18:	be 01 00 00 00       	mov    $0x1,%esi
  426f1d:	bf 0a 00 00 00       	mov    $0xa,%edi
  426f22:	48 89 c3             	mov    %rax,%rbx
  426f25:	e8 e6 de ff ff       	callq  424e10 <CRYPTO_lock>
  426f2a:	48 8b 05 e7 39 23 00 	mov    0x2339e7(%rip),%rax        # 65a918 <err_fns>
  426f31:	48 89 e7             	mov    %rsp,%rdi
  426f34:	ff 50 30             	callq  *0x30(%rax)
  426f37:	48 89 d8             	mov    %rbx,%rax
  426f3a:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  426f3f:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  426f46:	00 00 
  426f48:	75 6b                	jne    426fb5 <int_thread_set_item+0x105>
  426f4a:	48 83 c4 10          	add    $0x10,%rsp
  426f4e:	5b                   	pop    %rbx
  426f4f:	c3                   	retq   
  426f50:	b9 27 01 00 00       	mov    $0x127,%ecx
  426f55:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  426f5a:	be 01 00 00 00       	mov    $0x1,%esi
  426f5f:	bf 09 00 00 00       	mov    $0x9,%edi
  426f64:	e8 a7 de ff ff       	callq  424e10 <CRYPTO_lock>
  426f69:	48 83 3d a7 39 23 00 	cmpq   $0x0,0x2339a7(%rip)        # 65a918 <err_fns>
  426f70:	00 
  426f71:	74 35                	je     426fa8 <int_thread_set_item+0xf8>
  426f73:	b9 2a 01 00 00       	mov    $0x12a,%ecx
  426f78:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  426f7d:	be 01 00 00 00       	mov    $0x1,%esi
  426f82:	bf 0a 00 00 00       	mov    $0xa,%edi
  426f87:	e8 84 de ff ff       	callq  424e10 <CRYPTO_lock>
  426f8c:	48 8b 05 85 39 23 00 	mov    0x233985(%rip),%rax        # 65a918 <err_fns>
  426f93:	e9 3c ff ff ff       	jmpq   426ed4 <int_thread_set_item+0x24>
  426f98:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  426f9f:	00 
  426fa0:	31 c0                	xor    %eax,%eax
  426fa2:	eb 96                	jmp    426f3a <int_thread_set_item+0x8a>
  426fa4:	0f 1f 40 00          	nopl   0x0(%rax)
  426fa8:	48 c7 05 65 39 23 00 	movq   $0x43e740,0x233965(%rip)        # 65a918 <err_fns>
  426faf:	40 e7 43 00 
  426fb3:	eb be                	jmp    426f73 <int_thread_set_item+0xc3>
  426fb5:	e8 06 ff fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  426fba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000426fc0 <int_thread_get_item>:
  426fc0:	53                   	push   %rbx
  426fc1:	48 89 fb             	mov    %rdi,%rbx
  426fc4:	48 83 ec 10          	sub    $0x10,%rsp
  426fc8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  426fcf:	00 00 
  426fd1:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  426fd6:	31 c0                	xor    %eax,%eax
  426fd8:	48 8b 05 39 39 23 00 	mov    0x233939(%rip),%rax        # 65a918 <err_fns>
  426fdf:	48 85 c0             	test   %rax,%rax
  426fe2:	74 7c                	je     427060 <int_thread_get_item+0xa0>
  426fe4:	31 ff                	xor    %edi,%edi
  426fe6:	ff 50 28             	callq  *0x28(%rax)
  426fe9:	48 85 c0             	test   %rax,%rax
  426fec:	48 89 04 24          	mov    %rax,(%rsp)
  426ff0:	0f 84 ba 00 00 00    	je     4270b0 <int_thread_get_item+0xf0>
  426ff6:	b9 ef 01 00 00       	mov    $0x1ef,%ecx
  426ffb:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  427000:	be 01 00 00 00       	mov    $0x1,%esi
  427005:	bf 05 00 00 00       	mov    $0x5,%edi
  42700a:	e8 01 de ff ff       	callq  424e10 <CRYPTO_lock>
  42700f:	48 8b 3c 24          	mov    (%rsp),%rdi
  427013:	48 89 de             	mov    %rbx,%rsi
  427016:	e8 25 dd 00 00       	callq  434d40 <lh_retrieve>
  42701b:	b9 f1 01 00 00       	mov    $0x1f1,%ecx
  427020:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  427025:	be 01 00 00 00       	mov    $0x1,%esi
  42702a:	bf 06 00 00 00       	mov    $0x6,%edi
  42702f:	48 89 c3             	mov    %rax,%rbx
  427032:	e8 d9 dd ff ff       	callq  424e10 <CRYPTO_lock>
  427037:	48 8b 05 da 38 23 00 	mov    0x2338da(%rip),%rax        # 65a918 <err_fns>
  42703e:	48 89 e7             	mov    %rsp,%rdi
  427041:	ff 50 30             	callq  *0x30(%rax)
  427044:	48 89 d8             	mov    %rbx,%rax
  427047:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  42704c:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  427053:	00 00 
  427055:	75 6e                	jne    4270c5 <int_thread_get_item+0x105>
  427057:	48 83 c4 10          	add    $0x10,%rsp
  42705b:	5b                   	pop    %rbx
  42705c:	c3                   	retq   
  42705d:	0f 1f 00             	nopl   (%rax)
  427060:	b9 27 01 00 00       	mov    $0x127,%ecx
  427065:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  42706a:	be 01 00 00 00       	mov    $0x1,%esi
  42706f:	bf 09 00 00 00       	mov    $0x9,%edi
  427074:	e8 97 dd ff ff       	callq  424e10 <CRYPTO_lock>
  427079:	48 83 3d 97 38 23 00 	cmpq   $0x0,0x233897(%rip)        # 65a918 <err_fns>
  427080:	00 
  427081:	74 35                	je     4270b8 <int_thread_get_item+0xf8>
  427083:	b9 2a 01 00 00       	mov    $0x12a,%ecx
  427088:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  42708d:	be 01 00 00 00       	mov    $0x1,%esi
  427092:	bf 0a 00 00 00       	mov    $0xa,%edi
  427097:	e8 74 dd ff ff       	callq  424e10 <CRYPTO_lock>
  42709c:	48 8b 05 75 38 23 00 	mov    0x233875(%rip),%rax        # 65a918 <err_fns>
  4270a3:	e9 3c ff ff ff       	jmpq   426fe4 <int_thread_get_item+0x24>
  4270a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4270af:	00 
  4270b0:	31 c0                	xor    %eax,%eax
  4270b2:	eb 93                	jmp    427047 <int_thread_get_item+0x87>
  4270b4:	0f 1f 40 00          	nopl   0x0(%rax)
  4270b8:	48 c7 05 55 38 23 00 	movq   $0x43e740,0x233855(%rip)        # 65a918 <err_fns>
  4270bf:	40 e7 43 00 
  4270c3:	eb be                	jmp    427083 <int_thread_get_item+0xc3>
  4270c5:	e8 f6 fd fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  4270ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000004270d0 <int_thread_del_item>:
  4270d0:	55                   	push   %rbp
  4270d1:	53                   	push   %rbx
  4270d2:	48 89 fb             	mov    %rdi,%rbx
  4270d5:	48 83 ec 18          	sub    $0x18,%rsp
  4270d9:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  4270e0:	00 00 
  4270e2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  4270e7:	31 c0                	xor    %eax,%eax
  4270e9:	48 8b 05 28 38 23 00 	mov    0x233828(%rip),%rax        # 65a918 <err_fns>
  4270f0:	48 85 c0             	test   %rax,%rax
  4270f3:	0f 84 19 01 00 00    	je     427212 <int_thread_del_item+0x142>
  4270f9:	31 ff                	xor    %edi,%edi
  4270fb:	ff 50 28             	callq  *0x28(%rax)
  4270fe:	48 85 c0             	test   %rax,%rax
  427101:	48 89 04 24          	mov    %rax,(%rsp)
  427105:	0f 84 ad 00 00 00    	je     4271b8 <int_thread_del_item+0xe8>
  42710b:	b9 13 02 00 00       	mov    $0x213,%ecx
  427110:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  427115:	be 01 00 00 00       	mov    $0x1,%esi
  42711a:	bf 09 00 00 00       	mov    $0x9,%edi
  42711f:	e8 ec dc ff ff       	callq  424e10 <CRYPTO_lock>
  427124:	48 8b 3c 24          	mov    (%rsp),%rdi
  427128:	48 89 de             	mov    %rbx,%rsi
  42712b:	e8 40 da 00 00       	callq  434b70 <lh_delete>
  427130:	83 3d c9 37 23 00 01 	cmpl   $0x1,0x2337c9(%rip)        # 65a900 <int_thread_hash_references>
  427137:	48 89 c5             	mov    %rax,%rbp
  42713a:	0f 84 98 00 00 00    	je     4271d8 <int_thread_del_item+0x108>
  427140:	b9 1c 02 00 00       	mov    $0x21c,%ecx
  427145:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  42714a:	be 01 00 00 00       	mov    $0x1,%esi
  42714f:	bf 0a 00 00 00       	mov    $0xa,%edi
  427154:	31 db                	xor    %ebx,%ebx
  427156:	e8 b5 dc ff ff       	callq  424e10 <CRYPTO_lock>
  42715b:	48 8b 05 b6 37 23 00 	mov    0x2337b6(%rip),%rax        # 65a918 <err_fns>
  427162:	48 89 e7             	mov    %rsp,%rdi
  427165:	ff 50 30             	callq  *0x30(%rax)
  427168:	48 85 ed             	test   %rbp,%rbp
  42716b:	75 18                	jne    427185 <int_thread_del_item+0xb5>
  42716d:	eb 49                	jmp    4271b8 <int_thread_del_item+0xe8>
  42716f:	90                   	nop
  427170:	c7 84 1d 50 01 00 00 	movl   $0x0,0x150(%rbp,%rbx,1)
  427177:	00 00 00 00 
  42717b:	48 83 c3 04          	add    $0x4,%rbx
  42717f:	48 83 fb 40          	cmp    $0x40,%rbx
  427183:	74 2b                	je     4271b0 <int_thread_del_item+0xe0>
  427185:	48 8b bc 5d d0 00 00 	mov    0xd0(%rbp,%rbx,2),%rdi
  42718c:	00 
  42718d:	48 85 ff             	test   %rdi,%rdi
  427190:	74 de                	je     427170 <int_thread_del_item+0xa0>
  427192:	f6 84 1d 50 01 00 00 	testb  $0x1,0x150(%rbp,%rbx,1)
  427199:	01 
  42719a:	74 d4                	je     427170 <int_thread_del_item+0xa0>
  42719c:	e8 bf e5 ff ff       	callq  425760 <CRYPTO_free>
  4271a1:	48 c7 84 5d d0 00 00 	movq   $0x0,0xd0(%rbp,%rbx,2)
  4271a8:	00 00 00 00 00 
  4271ad:	eb c1                	jmp    427170 <int_thread_del_item+0xa0>
  4271af:	90                   	nop
  4271b0:	48 89 ef             	mov    %rbp,%rdi
  4271b3:	e8 a8 e5 ff ff       	callq  425760 <CRYPTO_free>
  4271b8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  4271bd:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  4271c4:	00 00 
  4271c6:	0f 85 9b 00 00 00    	jne    427267 <int_thread_del_item+0x197>
  4271cc:	48 83 c4 18          	add    $0x18,%rsp
  4271d0:	5b                   	pop    %rbx
  4271d1:	5d                   	pop    %rbp
  4271d2:	c3                   	retq   
  4271d3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4271d8:	48 8b 3d 29 37 23 00 	mov    0x233729(%rip),%rdi        # 65a908 <int_thread_hash>
  4271df:	48 85 ff             	test   %rdi,%rdi
  4271e2:	0f 84 58 ff ff ff    	je     427140 <int_thread_del_item+0x70>
  4271e8:	e8 13 dd 00 00       	callq  434f00 <lh_num_items>
  4271ed:	48 85 c0             	test   %rax,%rax
  4271f0:	0f 85 4a ff ff ff    	jne    427140 <int_thread_del_item+0x70>
  4271f6:	48 8b 3d 0b 37 23 00 	mov    0x23370b(%rip),%rdi        # 65a908 <int_thread_hash>
  4271fd:	e8 de d6 00 00       	callq  4348e0 <lh_free>
  427202:	48 c7 05 fb 36 23 00 	movq   $0x0,0x2336fb(%rip)        # 65a908 <int_thread_hash>
  427209:	00 00 00 00 
  42720d:	e9 2e ff ff ff       	jmpq   427140 <int_thread_del_item+0x70>
  427212:	b9 27 01 00 00       	mov    $0x127,%ecx
  427217:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  42721c:	be 01 00 00 00       	mov    $0x1,%esi
  427221:	bf 09 00 00 00       	mov    $0x9,%edi
  427226:	e8 e5 db ff ff       	callq  424e10 <CRYPTO_lock>
  42722b:	48 83 3d e5 36 23 00 	cmpq   $0x0,0x2336e5(%rip)        # 65a918 <err_fns>
  427232:	00 
  427233:	74 25                	je     42725a <int_thread_del_item+0x18a>
  427235:	b9 2a 01 00 00       	mov    $0x12a,%ecx
  42723a:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  42723f:	be 01 00 00 00       	mov    $0x1,%esi
  427244:	bf 0a 00 00 00       	mov    $0xa,%edi
  427249:	e8 c2 db ff ff       	callq  424e10 <CRYPTO_lock>
  42724e:	48 8b 05 c3 36 23 00 	mov    0x2336c3(%rip),%rax        # 65a918 <err_fns>
  427255:	e9 9f fe ff ff       	jmpq   4270f9 <int_thread_del_item+0x29>
  42725a:	48 c7 05 b3 36 23 00 	movq   $0x43e740,0x2336b3(%rip)        # 65a918 <err_fns>
  427261:	40 e7 43 00 
  427265:	eb ce                	jmp    427235 <int_thread_del_item+0x165>
  427267:	e8 54 fc fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  42726c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000427270 <ERR_get_implementation>:
  427270:	48 8b 05 a1 36 23 00 	mov    0x2336a1(%rip),%rax        # 65a918 <err_fns>
  427277:	48 85 c0             	test   %rax,%rax
  42727a:	74 04                	je     427280 <ERR_get_implementation+0x10>
  42727c:	c3                   	retq   
  42727d:	0f 1f 00             	nopl   (%rax)
  427280:	48 83 ec 08          	sub    $0x8,%rsp
  427284:	b9 27 01 00 00       	mov    $0x127,%ecx
  427289:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  42728e:	be 01 00 00 00       	mov    $0x1,%esi
  427293:	bf 09 00 00 00       	mov    $0x9,%edi
  427298:	e8 73 db ff ff       	callq  424e10 <CRYPTO_lock>
  42729d:	48 83 3d 73 36 23 00 	cmpq   $0x0,0x233673(%rip)        # 65a918 <err_fns>
  4272a4:	00 
  4272a5:	74 29                	je     4272d0 <ERR_get_implementation+0x60>
  4272a7:	b9 2a 01 00 00       	mov    $0x12a,%ecx
  4272ac:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  4272b1:	be 01 00 00 00       	mov    $0x1,%esi
  4272b6:	bf 0a 00 00 00       	mov    $0xa,%edi
  4272bb:	e8 50 db ff ff       	callq  424e10 <CRYPTO_lock>
  4272c0:	48 8b 05 51 36 23 00 	mov    0x233651(%rip),%rax        # 65a918 <err_fns>
  4272c7:	48 83 c4 08          	add    $0x8,%rsp
  4272cb:	c3                   	retq   
  4272cc:	0f 1f 40 00          	nopl   0x0(%rax)
  4272d0:	48 c7 05 3d 36 23 00 	movq   $0x43e740,0x23363d(%rip)        # 65a918 <err_fns>
  4272d7:	40 e7 43 00 
  4272db:	eb ca                	jmp    4272a7 <ERR_get_implementation+0x37>
  4272dd:	0f 1f 00             	nopl   (%rax)

00000000004272e0 <ERR_set_implementation>:
  4272e0:	55                   	push   %rbp
  4272e1:	53                   	push   %rbx
  4272e2:	48 89 fd             	mov    %rdi,%rbp
  4272e5:	b9 39 01 00 00       	mov    $0x139,%ecx
  4272ea:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  4272ef:	be 01 00 00 00       	mov    $0x1,%esi
  4272f4:	48 83 ec 08          	sub    $0x8,%rsp
  4272f8:	bf 09 00 00 00       	mov    $0x9,%edi
  4272fd:	31 db                	xor    %ebx,%ebx
  4272ff:	e8 0c db ff ff       	callq  424e10 <CRYPTO_lock>
  427304:	48 83 3d 0c 36 23 00 	cmpq   $0x0,0x23360c(%rip)        # 65a918 <err_fns>
  42730b:	00 
  42730c:	74 22                	je     427330 <ERR_set_implementation+0x50>
  42730e:	b9 41 01 00 00       	mov    $0x141,%ecx
  427313:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  427318:	be 01 00 00 00       	mov    $0x1,%esi
  42731d:	bf 0a 00 00 00       	mov    $0xa,%edi
  427322:	e8 e9 da ff ff       	callq  424e10 <CRYPTO_lock>
  427327:	48 83 c4 08          	add    $0x8,%rsp
  42732b:	89 d8                	mov    %ebx,%eax
  42732d:	5b                   	pop    %rbx
  42732e:	5d                   	pop    %rbp
  42732f:	c3                   	retq   
  427330:	48 89 2d e1 35 23 00 	mov    %rbp,0x2335e1(%rip)        # 65a918 <err_fns>
  427337:	b3 01                	mov    $0x1,%bl
  427339:	eb d3                	jmp    42730e <ERR_set_implementation+0x2e>
  42733b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000427340 <ERR_load_ERR_strings>:
  427340:	48 83 3d d0 35 23 00 	cmpq   $0x0,0x2335d0(%rip)        # 65a918 <err_fns>
  427347:	00 
  427348:	41 54                	push   %r12
  42734a:	55                   	push   %rbp
  42734b:	53                   	push   %rbx
  42734c:	0f 84 04 02 00 00    	je     427556 <ERR_load_ERR_strings+0x216>
  427352:	48 83 3d 26 13 23 00 	cmpq   $0x0,0x231326(%rip)        # 658680 <ERR_str_libraries>
  427359:	00 
  42735a:	bb 80 86 65 00       	mov    $0x658680,%ebx
  42735f:	74 1e                	je     42737f <ERR_load_ERR_strings+0x3f>
  427361:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  427368:	48 8b 05 a9 35 23 00 	mov    0x2335a9(%rip),%rax        # 65a918 <err_fns>
  42736f:	48 89 df             	mov    %rbx,%rdi
  427372:	48 83 c3 10          	add    $0x10,%rbx
  427376:	ff 50 18             	callq  *0x18(%rax)
  427379:	48 83 3b 00          	cmpq   $0x0,(%rbx)
  42737d:	75 e9                	jne    427368 <ERR_load_ERR_strings+0x28>
  42737f:	48 83 3d b9 0f 23 00 	cmpq   $0x0,0x230fb9(%rip)        # 658340 <ERR_str_reasons>
  427386:	00 
  427387:	bb 40 83 65 00       	mov    $0x658340,%ebx
  42738c:	74 19                	je     4273a7 <ERR_load_ERR_strings+0x67>
  42738e:	66 90                	xchg   %ax,%ax
  427390:	48 8b 05 81 35 23 00 	mov    0x233581(%rip),%rax        # 65a918 <err_fns>
  427397:	48 89 df             	mov    %rbx,%rdi
  42739a:	48 83 c3 10          	add    $0x10,%rbx
  42739e:	ff 50 18             	callq  *0x18(%rax)
  4273a1:	48 83 3b 00          	cmpq   $0x0,(%rbx)
  4273a5:	75 e9                	jne    427390 <ERR_load_ERR_strings+0x50>
  4273a7:	48 8b 05 12 12 23 00 	mov    0x231212(%rip),%rax        # 6585c0 <ERR_str_functs>
  4273ae:	bb c0 85 65 00       	mov    $0x6585c0,%ebx
  4273b3:	48 85 c0             	test   %rax,%rax
  4273b6:	74 2b                	je     4273e3 <ERR_load_ERR_strings+0xa3>
  4273b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4273bf:	00 
  4273c0:	48 0d 00 00 00 02    	or     $0x2000000,%rax
  4273c6:	48 89 df             	mov    %rbx,%rdi
  4273c9:	48 83 c3 10          	add    $0x10,%rbx
  4273cd:	48 89 43 f0          	mov    %rax,-0x10(%rbx)
  4273d1:	48 8b 05 40 35 23 00 	mov    0x233540(%rip),%rax        # 65a918 <err_fns>
  4273d8:	ff 50 18             	callq  *0x18(%rax)
  4273db:	48 8b 03             	mov    (%rbx),%rax
  4273de:	48 85 c0             	test   %rax,%rax
  4273e1:	75 dd                	jne    4273c0 <ERR_load_ERR_strings+0x80>
  4273e3:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  4273e8:	b9 44 02 00 00       	mov    $0x244,%ecx
  4273ed:	be 01 00 00 00       	mov    $0x1,%esi
  4273f2:	bf 05 00 00 00       	mov    $0x5,%edi
  4273f7:	e8 14 da ff ff       	callq  424e10 <CRYPTO_lock>
  4273fc:	8b 15 fe 0e 23 00    	mov    0x230efe(%rip),%edx        # 658300 <init.5649>
  427402:	85 d2                	test   %edx,%edx
  427404:	0f 84 16 01 00 00    	je     427520 <ERR_load_ERR_strings+0x1e0>
  42740a:	b9 4b 02 00 00       	mov    $0x24b,%ecx
  42740f:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  427414:	be 01 00 00 00       	mov    $0x1,%esi
  427419:	bf 06 00 00 00       	mov    $0x6,%edi
  42741e:	e8 ed d9 ff ff       	callq  424e10 <CRYPTO_lock>
  427423:	b9 4c 02 00 00       	mov    $0x24c,%ecx
  427428:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  42742d:	be 01 00 00 00       	mov    $0x1,%esi
  427432:	bf 09 00 00 00       	mov    $0x9,%edi
  427437:	e8 d4 d9 ff ff       	callq  424e10 <CRYPTO_lock>
  42743c:	8b 05 be 0e 23 00    	mov    0x230ebe(%rip),%eax        # 658300 <init.5649>
  427442:	85 c0                	test   %eax,%eax
  427444:	0f 84 f1 00 00 00    	je     42753b <ERR_load_ERR_strings+0x1fb>
  42744a:	bb 08 a1 65 00       	mov    $0x65a108,%ebx
  42744f:	41 bc 00 91 65 00    	mov    $0x659100,%r12d
  427455:	bd 01 00 00 00       	mov    $0x1,%ebp
  42745a:	eb 19                	jmp    427475 <ERR_load_ERR_strings+0x135>
  42745c:	0f 1f 40 00          	nopl   0x0(%rax)
  427460:	48 83 c3 10          	add    $0x10,%rbx
  427464:	48 83 c5 01          	add    $0x1,%rbp
  427468:	49 83 c4 20          	add    $0x20,%r12
  42746c:	48 81 fb f8 a8 65 00 	cmp    $0x65a8f8,%rbx
  427473:	74 4b                	je     4274c0 <ERR_load_ERR_strings+0x180>
  427475:	48 83 3b 00          	cmpq   $0x0,(%rbx)
  427479:	48 89 6b f8          	mov    %rbp,-0x8(%rbx)
  42747d:	75 e1                	jne    427460 <ERR_load_ERR_strings+0x120>
  42747f:	89 ef                	mov    %ebp,%edi
  427481:	e8 aa f9 fd ff       	callq  406e30 <strerror@plt>
  427486:	48 85 c0             	test   %rax,%rax
  427489:	74 25                	je     4274b0 <ERR_load_ERR_strings+0x170>
  42748b:	ba 20 00 00 00       	mov    $0x20,%edx
  427490:	48 89 c6             	mov    %rax,%rsi
  427493:	4c 89 e7             	mov    %r12,%rdi
  427496:	e8 95 fa fd ff       	callq  406f30 <strncpy@plt>
  42749b:	41 c6 44 24 1f 00    	movb   $0x0,0x1f(%r12)
  4274a1:	4c 89 23             	mov    %r12,(%rbx)
  4274a4:	eb ba                	jmp    427460 <ERR_load_ERR_strings+0x120>
  4274a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4274ad:	00 00 00 
  4274b0:	48 83 3b 00          	cmpq   $0x0,(%rbx)
  4274b4:	75 aa                	jne    427460 <ERR_load_ERR_strings+0x120>
  4274b6:	48 c7 03 fa e2 43 00 	movq   $0x43e2fa,(%rbx)
  4274bd:	eb a1                	jmp    427460 <ERR_load_ERR_strings+0x120>
  4274bf:	90                   	nop
  4274c0:	b9 6c 02 00 00       	mov    $0x26c,%ecx
  4274c5:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  4274ca:	be 01 00 00 00       	mov    $0x1,%esi
  4274cf:	bf 0a 00 00 00       	mov    $0xa,%edi
  4274d4:	c7 05 22 0e 23 00 00 	movl   $0x0,0x230e22(%rip)        # 658300 <init.5649>
  4274db:	00 00 00 
  4274de:	e8 2d d9 ff ff       	callq  424e10 <CRYPTO_lock>
  4274e3:	48 8b 05 16 2c 23 00 	mov    0x232c16(%rip),%rax        # 65a100 <SYS_str_reasons>
  4274ea:	bb 00 a1 65 00       	mov    $0x65a100,%ebx
  4274ef:	48 85 c0             	test   %rax,%rax
  4274f2:	74 27                	je     42751b <ERR_load_ERR_strings+0x1db>
  4274f4:	0f 1f 40 00          	nopl   0x0(%rax)
  4274f8:	48 0d 00 00 00 02    	or     $0x2000000,%rax
  4274fe:	48 89 df             	mov    %rbx,%rdi
  427501:	48 83 c3 10          	add    $0x10,%rbx
  427505:	48 89 43 f0          	mov    %rax,-0x10(%rbx)
  427509:	48 8b 05 08 34 23 00 	mov    0x233408(%rip),%rax        # 65a918 <err_fns>
  427510:	ff 50 18             	callq  *0x18(%rax)
  427513:	48 8b 03             	mov    (%rbx),%rax
  427516:	48 85 c0             	test   %rax,%rax
  427519:	75 dd                	jne    4274f8 <ERR_load_ERR_strings+0x1b8>
  42751b:	5b                   	pop    %rbx
  42751c:	5d                   	pop    %rbp
  42751d:	41 5c                	pop    %r12
  42751f:	c3                   	retq   
  427520:	b9 47 02 00 00       	mov    $0x247,%ecx
  427525:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  42752a:	be 01 00 00 00       	mov    $0x1,%esi
  42752f:	bf 06 00 00 00       	mov    $0x6,%edi
  427534:	e8 d7 d8 ff ff       	callq  424e10 <CRYPTO_lock>
  427539:	eb a8                	jmp    4274e3 <ERR_load_ERR_strings+0x1a3>
  42753b:	b9 4f 02 00 00       	mov    $0x24f,%ecx
  427540:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  427545:	be 01 00 00 00       	mov    $0x1,%esi
  42754a:	bf 0a 00 00 00       	mov    $0xa,%edi
  42754f:	e8 bc d8 ff ff       	callq  424e10 <CRYPTO_lock>
  427554:	eb 8d                	jmp    4274e3 <ERR_load_ERR_strings+0x1a3>
  427556:	b9 27 01 00 00       	mov    $0x127,%ecx
  42755b:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  427560:	be 01 00 00 00       	mov    $0x1,%esi
  427565:	bf 09 00 00 00       	mov    $0x9,%edi
  42756a:	e8 a1 d8 ff ff       	callq  424e10 <CRYPTO_lock>
  42756f:	48 83 3d a1 33 23 00 	cmpq   $0x0,0x2333a1(%rip)        # 65a918 <err_fns>
  427576:	00 
  427577:	74 1e                	je     427597 <ERR_load_ERR_strings+0x257>
  427579:	b9 2a 01 00 00       	mov    $0x12a,%ecx
  42757e:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  427583:	be 01 00 00 00       	mov    $0x1,%esi
  427588:	bf 0a 00 00 00       	mov    $0xa,%edi
  42758d:	e8 7e d8 ff ff       	callq  424e10 <CRYPTO_lock>
  427592:	e9 bb fd ff ff       	jmpq   427352 <ERR_load_ERR_strings+0x12>
  427597:	48 c7 05 76 33 23 00 	movq   $0x43e740,0x233376(%rip)        # 65a918 <err_fns>
  42759e:	40 e7 43 00 
  4275a2:	eb d5                	jmp    427579 <ERR_load_ERR_strings+0x239>
  4275a4:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
  4275ab:	00 00 00 00 00 

00000000004275b0 <ERR_load_strings>:
  4275b0:	41 54                	push   %r12
  4275b2:	55                   	push   %rbp
  4275b3:	41 89 fc             	mov    %edi,%r12d
  4275b6:	53                   	push   %rbx
  4275b7:	48 89 f3             	mov    %rsi,%rbx
  4275ba:	e8 81 fd ff ff       	callq  427340 <ERR_load_ERR_strings>
  4275bf:	48 8b 03             	mov    (%rbx),%rax
  4275c2:	48 85 c0             	test   %rax,%rax
  4275c5:	74 28                	je     4275ef <ERR_load_strings+0x3f>
  4275c7:	41 0f b6 ec          	movzbl %r12b,%ebp
  4275cb:	48 c1 e5 18          	shl    $0x18,%rbp
  4275cf:	45 85 e4             	test   %r12d,%r12d
  4275d2:	75 24                	jne    4275f8 <ERR_load_strings+0x48>
  4275d4:	0f 1f 40 00          	nopl   0x0(%rax)
  4275d8:	48 8b 05 39 33 23 00 	mov    0x233339(%rip),%rax        # 65a918 <err_fns>
  4275df:	48 89 df             	mov    %rbx,%rdi
  4275e2:	48 83 c3 10          	add    $0x10,%rbx
  4275e6:	ff 50 18             	callq  *0x18(%rax)
  4275e9:	48 83 3b 00          	cmpq   $0x0,(%rbx)
  4275ed:	75 e9                	jne    4275d8 <ERR_load_strings+0x28>
  4275ef:	5b                   	pop    %rbx
  4275f0:	5d                   	pop    %rbp
  4275f1:	41 5c                	pop    %r12
  4275f3:	c3                   	retq   
  4275f4:	0f 1f 40 00          	nopl   0x0(%rax)
  4275f8:	48 09 e8             	or     %rbp,%rax
  4275fb:	48 89 df             	mov    %rbx,%rdi
  4275fe:	48 83 c3 10          	add    $0x10,%rbx
  427602:	48 89 43 f0          	mov    %rax,-0x10(%rbx)
  427606:	48 8b 05 0b 33 23 00 	mov    0x23330b(%rip),%rax        # 65a918 <err_fns>
  42760d:	ff 50 18             	callq  *0x18(%rax)
  427610:	48 8b 03             	mov    (%rbx),%rax
  427613:	48 85 c0             	test   %rax,%rax
  427616:	75 e0                	jne    4275f8 <ERR_load_strings+0x48>
  427618:	eb d5                	jmp    4275ef <ERR_load_strings+0x3f>
  42761a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000427620 <ERR_unload_strings>:
  427620:	55                   	push   %rbp
  427621:	53                   	push   %rbx
  427622:	48 89 f3             	mov    %rsi,%rbx
  427625:	48 83 ec 08          	sub    $0x8,%rsp
  427629:	48 8b 06             	mov    (%rsi),%rax
  42762c:	48 85 c0             	test   %rax,%rax
  42762f:	74 26                	je     427657 <ERR_unload_strings+0x37>
  427631:	40 0f b6 ef          	movzbl %dil,%ebp
  427635:	48 c1 e5 18          	shl    $0x18,%rbp
  427639:	85 ff                	test   %edi,%edi
  42763b:	75 23                	jne    427660 <ERR_unload_strings+0x40>
  42763d:	0f 1f 00             	nopl   (%rax)
  427640:	48 8b 05 d1 32 23 00 	mov    0x2332d1(%rip),%rax        # 65a918 <err_fns>
  427647:	48 89 df             	mov    %rbx,%rdi
  42764a:	48 83 c3 10          	add    $0x10,%rbx
  42764e:	ff 50 20             	callq  *0x20(%rax)
  427651:	48 83 3b 00          	cmpq   $0x0,(%rbx)
  427655:	75 e9                	jne    427640 <ERR_unload_strings+0x20>
  427657:	48 83 c4 08          	add    $0x8,%rsp
  42765b:	5b                   	pop    %rbx
  42765c:	5d                   	pop    %rbp
  42765d:	c3                   	retq   
  42765e:	66 90                	xchg   %ax,%ax
  427660:	48 09 e8             	or     %rbp,%rax
  427663:	48 89 df             	mov    %rbx,%rdi
  427666:	48 83 c3 10          	add    $0x10,%rbx
  42766a:	48 89 43 f0          	mov    %rax,-0x10(%rbx)
  42766e:	48 8b 05 a3 32 23 00 	mov    0x2332a3(%rip),%rax        # 65a918 <err_fns>
  427675:	ff 50 20             	callq  *0x20(%rax)
  427678:	48 8b 03             	mov    (%rbx),%rax
  42767b:	48 85 c0             	test   %rax,%rax
  42767e:	75 e0                	jne    427660 <ERR_unload_strings+0x40>
  427680:	eb d5                	jmp    427657 <ERR_unload_strings+0x37>
  427682:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  427689:	1f 84 00 00 00 00 00 

0000000000427690 <ERR_free_strings>:
  427690:	48 8b 05 81 32 23 00 	mov    0x233281(%rip),%rax        # 65a918 <err_fns>
  427697:	48 85 c0             	test   %rax,%rax
  42769a:	74 0c                	je     4276a8 <ERR_free_strings+0x18>
  42769c:	48 8b 40 08          	mov    0x8(%rax),%rax
  4276a0:	ff e0                	jmpq   *%rax
  4276a2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  4276a8:	48 83 ec 08          	sub    $0x8,%rsp
  4276ac:	b9 27 01 00 00       	mov    $0x127,%ecx
  4276b1:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  4276b6:	be 01 00 00 00       	mov    $0x1,%esi
  4276bb:	bf 09 00 00 00       	mov    $0x9,%edi
  4276c0:	e8 4b d7 ff ff       	callq  424e10 <CRYPTO_lock>
  4276c5:	48 83 3d 4b 32 23 00 	cmpq   $0x0,0x23324b(%rip)        # 65a918 <err_fns>
  4276cc:	00 
  4276cd:	74 31                	je     427700 <ERR_free_strings+0x70>
  4276cf:	b9 2a 01 00 00       	mov    $0x12a,%ecx
  4276d4:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  4276d9:	be 01 00 00 00       	mov    $0x1,%esi
  4276de:	bf 0a 00 00 00       	mov    $0xa,%edi
  4276e3:	e8 28 d7 ff ff       	callq  424e10 <CRYPTO_lock>
  4276e8:	48 8b 05 29 32 23 00 	mov    0x233229(%rip),%rax        # 65a918 <err_fns>
  4276ef:	48 8b 40 08          	mov    0x8(%rax),%rax
  4276f3:	48 83 c4 08          	add    $0x8,%rsp
  4276f7:	ff e0                	jmpq   *%rax
  4276f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  427700:	48 c7 05 0d 32 23 00 	movq   $0x43e740,0x23320d(%rip)        # 65a918 <err_fns>
  427707:	40 e7 43 00 
  42770b:	eb c2                	jmp    4276cf <ERR_free_strings+0x3f>
  42770d:	0f 1f 00             	nopl   (%rax)

0000000000427710 <ERR_error_string_n>:
  427710:	41 57                	push   %r15
  427712:	41 56                	push   %r14
  427714:	49 89 fe             	mov    %rdi,%r14
  427717:	41 55                	push   %r13
  427719:	41 54                	push   %r12
  42771b:	49 c1 ee 18          	shr    $0x18,%r14
  42771f:	55                   	push   %rbp
  427720:	53                   	push   %rbx
  427721:	49 89 fd             	mov    %rdi,%r13
  427724:	48 89 f5             	mov    %rsi,%rbp
  427727:	48 89 d3             	mov    %rdx,%rbx
  42772a:	48 81 ec 08 01 00 00 	sub    $0x108,%rsp
  427731:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  427738:	00 00 
  42773a:	48 89 84 24 f8 00 00 	mov    %rax,0xf8(%rsp)
  427741:	00 
  427742:	31 c0                	xor    %eax,%eax
  427744:	41 0f b6 c6          	movzbl %r14b,%eax
  427748:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  42774d:	48 89 f8             	mov    %rdi,%rax
  427750:	48 c1 e8 0c          	shr    $0xc,%rax
  427754:	25 ff 0f 00 00       	and    $0xfff,%eax
  427759:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  42775e:	48 89 f8             	mov    %rdi,%rax
  427761:	25 ff 0f 00 00       	and    $0xfff,%eax
  427766:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  42776b:	48 8b 05 a6 31 23 00 	mov    0x2331a6(%rip),%rax        # 65a918 <err_fns>
  427772:	48 85 c0             	test   %rax,%rax
  427775:	0f 84 45 02 00 00    	je     4279c0 <ERR_error_string_n+0x2b0>
  42777b:	4c 8b 64 24 10       	mov    0x10(%rsp),%r12
  427780:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  427785:	49 c1 e4 18          	shl    $0x18,%r12
  427789:	4c 89 64 24 20       	mov    %r12,0x20(%rsp)
  42778e:	ff 50 10             	callq  *0x10(%rax)
  427791:	48 85 c0             	test   %rax,%rax
  427794:	0f 84 86 03 00 00    	je     427b20 <ERR_error_string_n+0x410>
  42779a:	4c 8b 70 08          	mov    0x8(%rax),%r14
  42779e:	48 8b 15 73 31 23 00 	mov    0x233173(%rip),%rdx        # 65a918 <err_fns>
  4277a5:	48 85 d2             	test   %rdx,%rdx
  4277a8:	0f 84 62 02 00 00    	je     427a10 <ERR_error_string_n+0x300>
  4277ae:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  4277b3:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  4277b8:	48 c1 e0 0c          	shl    $0xc,%rax
  4277bc:	4c 09 e0             	or     %r12,%rax
  4277bf:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  4277c4:	ff 52 10             	callq  *0x10(%rdx)
  4277c7:	48 85 c0             	test   %rax,%rax
  4277ca:	0f 84 40 03 00 00    	je     427b10 <ERR_error_string_n+0x400>
  4277d0:	4c 8b 78 08          	mov    0x8(%rax),%r15
  4277d4:	48 8b 05 3d 31 23 00 	mov    0x23313d(%rip),%rax        # 65a918 <err_fns>
  4277db:	48 85 c0             	test   %rax,%rax
  4277de:	0f 84 7c 02 00 00    	je     427a60 <ERR_error_string_n+0x350>
  4277e4:	4c 0b 64 24 08       	or     0x8(%rsp),%r12
  4277e9:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  4277ee:	4c 89 64 24 20       	mov    %r12,0x20(%rsp)
  4277f3:	ff 50 10             	callq  *0x10(%rax)
  4277f6:	48 85 c0             	test   %rax,%rax
  4277f9:	0f 84 b1 02 00 00    	je     427ab0 <ERR_error_string_n+0x3a0>
  4277ff:	4c 8b 60 08          	mov    0x8(%rax),%r12
  427803:	4d 85 f6             	test   %r14,%r14
  427806:	0f 84 5c 01 00 00    	je     427968 <ERR_error_string_n+0x258>
  42780c:	4d 85 ff             	test   %r15,%r15
  42780f:	0f 84 7b 01 00 00    	je     427990 <ERR_error_string_n+0x280>
  427815:	4d 85 e4             	test   %r12,%r12
  427818:	0f 84 c2 02 00 00    	je     427ae0 <ERR_error_string_n+0x3d0>
  42781e:	48 8d 44 24 30       	lea    0x30(%rsp),%rax
  427823:	4d 85 f6             	test   %r14,%r14
  427826:	4c 89 e9             	mov    %r13,%rcx
  427829:	ba 15 e3 43 00       	mov    $0x43e315,%edx
  42782e:	48 89 de             	mov    %rbx,%rsi
  427831:	4d 89 f9             	mov    %r15,%r9
  427834:	4c 0f 44 f0          	cmove  %rax,%r14
  427838:	48 83 ec 08          	sub    $0x8,%rsp
  42783c:	48 89 ef             	mov    %rbp,%rdi
  42783f:	41 54                	push   %r12
  427841:	4d 89 f0             	mov    %r14,%r8
  427844:	31 c0                	xor    %eax,%eax
  427846:	e8 a5 cc 00 00       	callq  4344f0 <BIO_snprintf>
  42784b:	48 89 ef             	mov    %rbp,%rdi
  42784e:	e8 5d f5 fd ff       	callq  406db0 <strlen@plt>
  427853:	48 8d 53 ff          	lea    -0x1(%rbx),%rdx
  427857:	59                   	pop    %rcx
  427858:	48 39 d0             	cmp    %rdx,%rax
  42785b:	5e                   	pop    %rsi
  42785c:	0f 85 9f 00 00 00    	jne    427901 <ERR_error_string_n+0x1f1>
  427862:	48 83 fb 04          	cmp    $0x4,%rbx
  427866:	0f 86 95 00 00 00    	jbe    427901 <ERR_error_string_n+0x1f1>
  42786c:	be 3a 00 00 00       	mov    $0x3a,%esi
  427871:	48 89 ef             	mov    %rbp,%rdi
  427874:	4c 8d 63 fb          	lea    -0x5(%rbx),%r12
  427878:	e8 f3 f5 fd ff       	callq  406e70 <strchr@plt>
  42787d:	48 85 c0             	test   %rax,%rax
  427880:	0f 84 b2 00 00 00    	je     427938 <ERR_error_string_n+0x228>
  427886:	4a 8d 54 25 00       	lea    0x0(%rbp,%r12,1),%rdx
  42788b:	48 39 c2             	cmp    %rax,%rdx
  42788e:	73 06                	jae    427896 <ERR_error_string_n+0x186>
  427890:	48 89 d0             	mov    %rdx,%rax
  427893:	c6 00 3a             	movb   $0x3a,(%rax)
  427896:	48 8d 78 01          	lea    0x1(%rax),%rdi
  42789a:	be 3a 00 00 00       	mov    $0x3a,%esi
  42789f:	e8 cc f5 fd ff       	callq  406e70 <strchr@plt>
  4278a4:	48 85 c0             	test   %rax,%rax
  4278a7:	0f 84 9b 00 00 00    	je     427948 <ERR_error_string_n+0x238>
  4278ad:	48 8d 54 1d fc       	lea    -0x4(%rbp,%rbx,1),%rdx
  4278b2:	48 39 d0             	cmp    %rdx,%rax
  4278b5:	76 06                	jbe    4278bd <ERR_error_string_n+0x1ad>
  4278b7:	48 89 d0             	mov    %rdx,%rax
  4278ba:	c6 00 3a             	movb   $0x3a,(%rax)
  4278bd:	48 8d 78 01          	lea    0x1(%rax),%rdi
  4278c1:	be 3a 00 00 00       	mov    $0x3a,%esi
  4278c6:	e8 a5 f5 fd ff       	callq  406e70 <strchr@plt>
  4278cb:	48 85 c0             	test   %rax,%rax
  4278ce:	0f 84 84 00 00 00    	je     427958 <ERR_error_string_n+0x248>
  4278d4:	48 8d 54 1d fd       	lea    -0x3(%rbp,%rbx,1),%rdx
  4278d9:	48 39 d0             	cmp    %rdx,%rax
  4278dc:	76 06                	jbe    4278e4 <ERR_error_string_n+0x1d4>
  4278de:	48 89 d0             	mov    %rdx,%rax
  4278e1:	c6 00 3a             	movb   $0x3a,(%rax)
  4278e4:	48 8d 78 01          	lea    0x1(%rax),%rdi
  4278e8:	be 3a 00 00 00       	mov    $0x3a,%esi
  4278ed:	e8 7e f5 fd ff       	callq  406e70 <strchr@plt>
  4278f2:	48 85 c0             	test   %rax,%rax
  4278f5:	48 8d 54 1d fe       	lea    -0x2(%rbp,%rbx,1),%rdx
  4278fa:	74 34                	je     427930 <ERR_error_string_n+0x220>
  4278fc:	48 39 d0             	cmp    %rdx,%rax
  4278ff:	77 2f                	ja     427930 <ERR_error_string_n+0x220>
  427901:	48 8b 84 24 f8 00 00 	mov    0xf8(%rsp),%rax
  427908:	00 
  427909:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  427910:	00 00 
  427912:	0f 85 78 02 00 00    	jne    427b90 <ERR_error_string_n+0x480>
  427918:	48 81 c4 08 01 00 00 	add    $0x108,%rsp
  42791f:	5b                   	pop    %rbx
  427920:	5d                   	pop    %rbp
  427921:	41 5c                	pop    %r12
  427923:	41 5d                	pop    %r13
  427925:	41 5e                	pop    %r14
  427927:	41 5f                	pop    %r15
  427929:	c3                   	retq   
  42792a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  427930:	c6 02 3a             	movb   $0x3a,(%rdx)
  427933:	eb cc                	jmp    427901 <ERR_error_string_n+0x1f1>
  427935:	0f 1f 00             	nopl   (%rax)
  427938:	4a 8d 44 25 00       	lea    0x0(%rbp,%r12,1),%rax
  42793d:	e9 51 ff ff ff       	jmpq   427893 <ERR_error_string_n+0x183>
  427942:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  427948:	48 8d 44 1d fc       	lea    -0x4(%rbp,%rbx,1),%rax
  42794d:	e9 68 ff ff ff       	jmpq   4278ba <ERR_error_string_n+0x1aa>
  427952:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  427958:	48 8d 44 1d fd       	lea    -0x3(%rbp,%rbx,1),%rax
  42795d:	e9 7f ff ff ff       	jmpq   4278e1 <ERR_error_string_n+0x1d1>
  427962:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  427968:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  42796d:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
  427972:	ba 02 e3 43 00       	mov    $0x43e302,%edx
  427977:	be 40 00 00 00       	mov    $0x40,%esi
  42797c:	31 c0                	xor    %eax,%eax
  42797e:	e8 6d cb 00 00       	callq  4344f0 <BIO_snprintf>
  427983:	e9 84 fe ff ff       	jmpq   42780c <ERR_error_string_n+0xfc>
  427988:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  42798f:	00 
  427990:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  427995:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
  42799a:	31 c0                	xor    %eax,%eax
  42799c:	ba 0b e3 43 00       	mov    $0x43e30b,%edx
  4279a1:	be 40 00 00 00       	mov    $0x40,%esi
  4279a6:	e8 45 cb 00 00       	callq  4344f0 <BIO_snprintf>
  4279ab:	4d 85 e4             	test   %r12,%r12
  4279ae:	0f 84 ac 01 00 00    	je     427b60 <ERR_error_string_n+0x450>
  4279b4:	4c 8d 7c 24 70       	lea    0x70(%rsp),%r15
  4279b9:	e9 60 fe ff ff       	jmpq   42781e <ERR_error_string_n+0x10e>
  4279be:	66 90                	xchg   %ax,%ax
  4279c0:	b9 27 01 00 00       	mov    $0x127,%ecx
  4279c5:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  4279ca:	be 01 00 00 00       	mov    $0x1,%esi
  4279cf:	bf 09 00 00 00       	mov    $0x9,%edi
  4279d4:	e8 37 d4 ff ff       	callq  424e10 <CRYPTO_lock>
  4279d9:	48 83 3d 37 2f 23 00 	cmpq   $0x0,0x232f37(%rip)        # 65a918 <err_fns>
  4279e0:	00 
  4279e1:	0f 84 69 01 00 00    	je     427b50 <ERR_error_string_n+0x440>
  4279e7:	b9 2a 01 00 00       	mov    $0x12a,%ecx
  4279ec:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  4279f1:	be 01 00 00 00       	mov    $0x1,%esi
  4279f6:	bf 0a 00 00 00       	mov    $0xa,%edi
  4279fb:	e8 10 d4 ff ff       	callq  424e10 <CRYPTO_lock>
  427a00:	48 8b 05 11 2f 23 00 	mov    0x232f11(%rip),%rax        # 65a918 <err_fns>
  427a07:	e9 6f fd ff ff       	jmpq   42777b <ERR_error_string_n+0x6b>
  427a0c:	0f 1f 40 00          	nopl   0x0(%rax)
  427a10:	b9 27 01 00 00       	mov    $0x127,%ecx
  427a15:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  427a1a:	be 01 00 00 00       	mov    $0x1,%esi
  427a1f:	bf 09 00 00 00       	mov    $0x9,%edi
  427a24:	e8 e7 d3 ff ff       	callq  424e10 <CRYPTO_lock>
  427a29:	48 83 3d e7 2e 23 00 	cmpq   $0x0,0x232ee7(%rip)        # 65a918 <err_fns>
  427a30:	00 
  427a31:	0f 84 09 01 00 00    	je     427b40 <ERR_error_string_n+0x430>
  427a37:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  427a3c:	b9 2a 01 00 00       	mov    $0x12a,%ecx
  427a41:	be 01 00 00 00       	mov    $0x1,%esi
  427a46:	bf 0a 00 00 00       	mov    $0xa,%edi
  427a4b:	e8 c0 d3 ff ff       	callq  424e10 <CRYPTO_lock>
  427a50:	48 8b 15 c1 2e 23 00 	mov    0x232ec1(%rip),%rdx        # 65a918 <err_fns>
  427a57:	e9 52 fd ff ff       	jmpq   4277ae <ERR_error_string_n+0x9e>
  427a5c:	0f 1f 40 00          	nopl   0x0(%rax)
  427a60:	b9 27 01 00 00       	mov    $0x127,%ecx
  427a65:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  427a6a:	be 01 00 00 00       	mov    $0x1,%esi
  427a6f:	bf 09 00 00 00       	mov    $0x9,%edi
  427a74:	e8 97 d3 ff ff       	callq  424e10 <CRYPTO_lock>
  427a79:	48 83 3d 97 2e 23 00 	cmpq   $0x0,0x232e97(%rip)        # 65a918 <err_fns>
  427a80:	00 
  427a81:	0f 84 a9 00 00 00    	je     427b30 <ERR_error_string_n+0x420>
  427a87:	b9 2a 01 00 00       	mov    $0x12a,%ecx
  427a8c:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  427a91:	be 01 00 00 00       	mov    $0x1,%esi
  427a96:	bf 0a 00 00 00       	mov    $0xa,%edi
  427a9b:	e8 70 d3 ff ff       	callq  424e10 <CRYPTO_lock>
  427aa0:	48 8b 05 71 2e 23 00 	mov    0x232e71(%rip),%rax        # 65a918 <err_fns>
  427aa7:	e9 38 fd ff ff       	jmpq   4277e4 <ERR_error_string_n+0xd4>
  427aac:	0f 1f 40 00          	nopl   0x0(%rax)
  427ab0:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  427ab5:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  427aba:	45 31 e4             	xor    %r12d,%r12d
  427abd:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  427ac2:	48 8b 05 4f 2e 23 00 	mov    0x232e4f(%rip),%rax        # 65a918 <err_fns>
  427ac9:	ff 50 10             	callq  *0x10(%rax)
  427acc:	48 85 c0             	test   %rax,%rax
  427acf:	0f 85 2a fd ff ff    	jne    4277ff <ERR_error_string_n+0xef>
  427ad5:	e9 29 fd ff ff       	jmpq   427803 <ERR_error_string_n+0xf3>
  427ada:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  427ae0:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  427ae5:	48 8d bc 24 b0 00 00 	lea    0xb0(%rsp),%rdi
  427aec:	00 
  427aed:	ba 2a e3 43 00       	mov    $0x43e32a,%edx
  427af2:	be 40 00 00 00       	mov    $0x40,%esi
  427af7:	31 c0                	xor    %eax,%eax
  427af9:	4c 8d a4 24 b0 00 00 	lea    0xb0(%rsp),%r12
  427b00:	00 
  427b01:	e8 ea c9 00 00       	callq  4344f0 <BIO_snprintf>
  427b06:	e9 13 fd ff ff       	jmpq   42781e <ERR_error_string_n+0x10e>
  427b0b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  427b10:	45 31 ff             	xor    %r15d,%r15d
  427b13:	e9 bc fc ff ff       	jmpq   4277d4 <ERR_error_string_n+0xc4>
  427b18:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  427b1f:	00 
  427b20:	45 31 f6             	xor    %r14d,%r14d
  427b23:	e9 76 fc ff ff       	jmpq   42779e <ERR_error_string_n+0x8e>
  427b28:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  427b2f:	00 
  427b30:	48 c7 05 dd 2d 23 00 	movq   $0x43e740,0x232ddd(%rip)        # 65a918 <err_fns>
  427b37:	40 e7 43 00 
  427b3b:	e9 47 ff ff ff       	jmpq   427a87 <ERR_error_string_n+0x377>
  427b40:	48 c7 05 cd 2d 23 00 	movq   $0x43e740,0x232dcd(%rip)        # 65a918 <err_fns>
  427b47:	40 e7 43 00 
  427b4b:	e9 e7 fe ff ff       	jmpq   427a37 <ERR_error_string_n+0x327>
  427b50:	48 c7 05 bd 2d 23 00 	movq   $0x43e740,0x232dbd(%rip)        # 65a918 <err_fns>
  427b57:	40 e7 43 00 
  427b5b:	e9 87 fe ff ff       	jmpq   4279e7 <ERR_error_string_n+0x2d7>
  427b60:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  427b65:	48 8d bc 24 b0 00 00 	lea    0xb0(%rsp),%rdi
  427b6c:	00 
  427b6d:	ba 2a e3 43 00       	mov    $0x43e32a,%edx
  427b72:	be 40 00 00 00       	mov    $0x40,%esi
  427b77:	31 c0                	xor    %eax,%eax
  427b79:	4c 8d a4 24 b0 00 00 	lea    0xb0(%rsp),%r12
  427b80:	00 
  427b81:	4c 8d 7c 24 70       	lea    0x70(%rsp),%r15
  427b86:	e8 65 c9 00 00       	callq  4344f0 <BIO_snprintf>
  427b8b:	e9 8e fc ff ff       	jmpq   42781e <ERR_error_string_n+0x10e>
  427b90:	e8 2b f3 fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  427b95:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  427b9c:	00 00 00 00 

0000000000427ba0 <ERR_error_string>:
  427ba0:	53                   	push   %rbx
  427ba1:	48 85 f6             	test   %rsi,%rsi
  427ba4:	b8 00 90 65 00       	mov    $0x659000,%eax
  427ba9:	48 89 f3             	mov    %rsi,%rbx
  427bac:	ba 00 01 00 00       	mov    $0x100,%edx
  427bb1:	48 0f 44 d8          	cmove  %rax,%rbx
  427bb5:	48 89 de             	mov    %rbx,%rsi
  427bb8:	e8 53 fb ff ff       	callq  427710 <ERR_error_string_n>
  427bbd:	48 89 d8             	mov    %rbx,%rax
  427bc0:	5b                   	pop    %rbx
  427bc1:	c3                   	retq   
  427bc2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  427bc9:	1f 84 00 00 00 00 00 

0000000000427bd0 <ERR_get_string_table>:
  427bd0:	48 8b 05 41 2d 23 00 	mov    0x232d41(%rip),%rax        # 65a918 <err_fns>
  427bd7:	48 85 c0             	test   %rax,%rax
  427bda:	74 0c                	je     427be8 <ERR_get_string_table+0x18>
  427bdc:	48 8b 00             	mov    (%rax),%rax
  427bdf:	31 ff                	xor    %edi,%edi
  427be1:	ff e0                	jmpq   *%rax
  427be3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  427be8:	48 83 ec 08          	sub    $0x8,%rsp
  427bec:	b9 27 01 00 00       	mov    $0x127,%ecx
  427bf1:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  427bf6:	be 01 00 00 00       	mov    $0x1,%esi
  427bfb:	bf 09 00 00 00       	mov    $0x9,%edi
  427c00:	e8 0b d2 ff ff       	callq  424e10 <CRYPTO_lock>
  427c05:	48 83 3d 0b 2d 23 00 	cmpq   $0x0,0x232d0b(%rip)        # 65a918 <err_fns>
  427c0c:	00 
  427c0d:	74 31                	je     427c40 <ERR_get_string_table+0x70>
  427c0f:	bf 0a 00 00 00       	mov    $0xa,%edi
  427c14:	b9 2a 01 00 00       	mov    $0x12a,%ecx
  427c19:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  427c1e:	be 01 00 00 00       	mov    $0x1,%esi
  427c23:	e8 e8 d1 ff ff       	callq  424e10 <CRYPTO_lock>
  427c28:	48 8b 05 e9 2c 23 00 	mov    0x232ce9(%rip),%rax        # 65a918 <err_fns>
  427c2f:	31 ff                	xor    %edi,%edi
  427c31:	48 8b 00             	mov    (%rax),%rax
  427c34:	48 83 c4 08          	add    $0x8,%rsp
  427c38:	ff e0                	jmpq   *%rax
  427c3a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  427c40:	48 c7 05 cd 2c 23 00 	movq   $0x43e740,0x232ccd(%rip)        # 65a918 <err_fns>
  427c47:	40 e7 43 00 
  427c4b:	eb c2                	jmp    427c0f <ERR_get_string_table+0x3f>
  427c4d:	0f 1f 00             	nopl   (%rax)

0000000000427c50 <ERR_get_err_state_table>:
  427c50:	48 8b 05 c1 2c 23 00 	mov    0x232cc1(%rip),%rax        # 65a918 <err_fns>
  427c57:	48 85 c0             	test   %rax,%rax
  427c5a:	74 0c                	je     427c68 <ERR_get_err_state_table+0x18>
  427c5c:	48 8b 40 28          	mov    0x28(%rax),%rax
  427c60:	31 ff                	xor    %edi,%edi
  427c62:	ff e0                	jmpq   *%rax
  427c64:	0f 1f 40 00          	nopl   0x0(%rax)
  427c68:	48 83 ec 08          	sub    $0x8,%rsp
  427c6c:	b9 27 01 00 00       	mov    $0x127,%ecx
  427c71:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  427c76:	be 01 00 00 00       	mov    $0x1,%esi
  427c7b:	bf 09 00 00 00       	mov    $0x9,%edi
  427c80:	e8 8b d1 ff ff       	callq  424e10 <CRYPTO_lock>
  427c85:	48 83 3d 8b 2c 23 00 	cmpq   $0x0,0x232c8b(%rip)        # 65a918 <err_fns>
  427c8c:	00 
  427c8d:	74 31                	je     427cc0 <ERR_get_err_state_table+0x70>
  427c8f:	bf 0a 00 00 00       	mov    $0xa,%edi
  427c94:	b9 2a 01 00 00       	mov    $0x12a,%ecx
  427c99:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  427c9e:	be 01 00 00 00       	mov    $0x1,%esi
  427ca3:	e8 68 d1 ff ff       	callq  424e10 <CRYPTO_lock>
  427ca8:	48 8b 05 69 2c 23 00 	mov    0x232c69(%rip),%rax        # 65a918 <err_fns>
  427caf:	31 ff                	xor    %edi,%edi
  427cb1:	48 8b 40 28          	mov    0x28(%rax),%rax
  427cb5:	48 83 c4 08          	add    $0x8,%rsp
  427cb9:	ff e0                	jmpq   *%rax
  427cbb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  427cc0:	48 c7 05 4d 2c 23 00 	movq   $0x43e740,0x232c4d(%rip)        # 65a918 <err_fns>
  427cc7:	40 e7 43 00 
  427ccb:	eb c2                	jmp    427c8f <ERR_get_err_state_table+0x3f>
  427ccd:	0f 1f 00             	nopl   (%rax)

0000000000427cd0 <ERR_release_err_state_table>:
  427cd0:	48 8b 05 41 2c 23 00 	mov    0x232c41(%rip),%rax        # 65a918 <err_fns>
  427cd7:	53                   	push   %rbx
  427cd8:	48 89 fb             	mov    %rdi,%rbx
  427cdb:	48 85 c0             	test   %rax,%rax
  427cde:	74 10                	je     427cf0 <ERR_release_err_state_table+0x20>
  427ce0:	48 89 df             	mov    %rbx,%rdi
  427ce3:	48 8b 40 30          	mov    0x30(%rax),%rax
  427ce7:	5b                   	pop    %rbx
  427ce8:	ff e0                	jmpq   *%rax
  427cea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  427cf0:	b9 27 01 00 00       	mov    $0x127,%ecx
  427cf5:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  427cfa:	be 01 00 00 00       	mov    $0x1,%esi
  427cff:	bf 09 00 00 00       	mov    $0x9,%edi
  427d04:	e8 07 d1 ff ff       	callq  424e10 <CRYPTO_lock>
  427d09:	48 83 3d 07 2c 23 00 	cmpq   $0x0,0x232c07(%rip)        # 65a918 <err_fns>
  427d10:	00 
  427d11:	74 2d                	je     427d40 <ERR_release_err_state_table+0x70>
  427d13:	bf 0a 00 00 00       	mov    $0xa,%edi
  427d18:	b9 2a 01 00 00       	mov    $0x12a,%ecx
  427d1d:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  427d22:	be 01 00 00 00       	mov    $0x1,%esi
  427d27:	e8 e4 d0 ff ff       	callq  424e10 <CRYPTO_lock>
  427d2c:	48 8b 05 e5 2b 23 00 	mov    0x232be5(%rip),%rax        # 65a918 <err_fns>
  427d33:	48 89 df             	mov    %rbx,%rdi
  427d36:	5b                   	pop    %rbx
  427d37:	48 8b 40 30          	mov    0x30(%rax),%rax
  427d3b:	ff e0                	jmpq   *%rax
  427d3d:	0f 1f 00             	nopl   (%rax)
  427d40:	48 c7 05 cd 2b 23 00 	movq   $0x43e740,0x232bcd(%rip)        # 65a918 <err_fns>
  427d47:	40 e7 43 00 
  427d4b:	eb c6                	jmp    427d13 <ERR_release_err_state_table+0x43>
  427d4d:	0f 1f 00             	nopl   (%rax)

0000000000427d50 <ERR_lib_error_string>:
  427d50:	53                   	push   %rbx
  427d51:	48 89 fb             	mov    %rdi,%rbx
  427d54:	48 83 ec 20          	sub    $0x20,%rsp
  427d58:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  427d5f:	00 00 
  427d61:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  427d66:	31 c0                	xor    %eax,%eax
  427d68:	48 8b 05 a9 2b 23 00 	mov    0x232ba9(%rip),%rax        # 65a918 <err_fns>
  427d6f:	48 85 c0             	test   %rax,%rax
  427d72:	74 34                	je     427da8 <ERR_lib_error_string+0x58>
  427d74:	81 e3 00 00 00 ff    	and    $0xff000000,%ebx
  427d7a:	48 89 e7             	mov    %rsp,%rdi
  427d7d:	48 89 1c 24          	mov    %rbx,(%rsp)
  427d81:	ff 50 10             	callq  *0x10(%rax)
  427d84:	48 85 c0             	test   %rax,%rax
  427d87:	74 67                	je     427df0 <ERR_lib_error_string+0xa0>
  427d89:	48 8b 40 08          	mov    0x8(%rax),%rax
  427d8d:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  427d92:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  427d99:	00 00 
  427d9b:	75 68                	jne    427e05 <ERR_lib_error_string+0xb5>
  427d9d:	48 83 c4 20          	add    $0x20,%rsp
  427da1:	5b                   	pop    %rbx
  427da2:	c3                   	retq   
  427da3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  427da8:	b9 27 01 00 00       	mov    $0x127,%ecx
  427dad:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  427db2:	be 01 00 00 00       	mov    $0x1,%esi
  427db7:	bf 09 00 00 00       	mov    $0x9,%edi
  427dbc:	e8 4f d0 ff ff       	callq  424e10 <CRYPTO_lock>
  427dc1:	48 83 3d 4f 2b 23 00 	cmpq   $0x0,0x232b4f(%rip)        # 65a918 <err_fns>
  427dc8:	00 
  427dc9:	74 2d                	je     427df8 <ERR_lib_error_string+0xa8>
  427dcb:	b9 2a 01 00 00       	mov    $0x12a,%ecx
  427dd0:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  427dd5:	be 01 00 00 00       	mov    $0x1,%esi
  427dda:	bf 0a 00 00 00       	mov    $0xa,%edi
  427ddf:	e8 2c d0 ff ff       	callq  424e10 <CRYPTO_lock>
  427de4:	48 8b 05 2d 2b 23 00 	mov    0x232b2d(%rip),%rax        # 65a918 <err_fns>
  427deb:	eb 87                	jmp    427d74 <ERR_lib_error_string+0x24>
  427ded:	0f 1f 00             	nopl   (%rax)
  427df0:	31 c0                	xor    %eax,%eax
  427df2:	eb 99                	jmp    427d8d <ERR_lib_error_string+0x3d>
  427df4:	0f 1f 40 00          	nopl   0x0(%rax)
  427df8:	48 c7 05 15 2b 23 00 	movq   $0x43e740,0x232b15(%rip)        # 65a918 <err_fns>
  427dff:	40 e7 43 00 
  427e03:	eb c6                	jmp    427dcb <ERR_lib_error_string+0x7b>
  427e05:	e8 b6 f0 fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  427e0a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000427e10 <ERR_func_error_string>:
  427e10:	53                   	push   %rbx
  427e11:	48 89 fb             	mov    %rdi,%rbx
  427e14:	48 83 ec 20          	sub    $0x20,%rsp
  427e18:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  427e1f:	00 00 
  427e21:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  427e26:	31 c0                	xor    %eax,%eax
  427e28:	48 8b 05 e9 2a 23 00 	mov    0x232ae9(%rip),%rax        # 65a918 <err_fns>
  427e2f:	48 85 c0             	test   %rax,%rax
  427e32:	74 34                	je     427e68 <ERR_func_error_string+0x58>
  427e34:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
  427e3a:	48 89 e7             	mov    %rsp,%rdi
  427e3d:	48 89 1c 24          	mov    %rbx,(%rsp)
  427e41:	ff 50 10             	callq  *0x10(%rax)
  427e44:	48 85 c0             	test   %rax,%rax
  427e47:	74 67                	je     427eb0 <ERR_func_error_string+0xa0>
  427e49:	48 8b 40 08          	mov    0x8(%rax),%rax
  427e4d:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  427e52:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  427e59:	00 00 
  427e5b:	75 68                	jne    427ec5 <ERR_func_error_string+0xb5>
  427e5d:	48 83 c4 20          	add    $0x20,%rsp
  427e61:	5b                   	pop    %rbx
  427e62:	c3                   	retq   
  427e63:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  427e68:	b9 27 01 00 00       	mov    $0x127,%ecx
  427e6d:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  427e72:	be 01 00 00 00       	mov    $0x1,%esi
  427e77:	bf 09 00 00 00       	mov    $0x9,%edi
  427e7c:	e8 8f cf ff ff       	callq  424e10 <CRYPTO_lock>
  427e81:	48 83 3d 8f 2a 23 00 	cmpq   $0x0,0x232a8f(%rip)        # 65a918 <err_fns>
  427e88:	00 
  427e89:	74 2d                	je     427eb8 <ERR_func_error_string+0xa8>
  427e8b:	b9 2a 01 00 00       	mov    $0x12a,%ecx
  427e90:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  427e95:	be 01 00 00 00       	mov    $0x1,%esi
  427e9a:	bf 0a 00 00 00       	mov    $0xa,%edi
  427e9f:	e8 6c cf ff ff       	callq  424e10 <CRYPTO_lock>
  427ea4:	48 8b 05 6d 2a 23 00 	mov    0x232a6d(%rip),%rax        # 65a918 <err_fns>
  427eab:	eb 87                	jmp    427e34 <ERR_func_error_string+0x24>
  427ead:	0f 1f 00             	nopl   (%rax)
  427eb0:	31 c0                	xor    %eax,%eax
  427eb2:	eb 99                	jmp    427e4d <ERR_func_error_string+0x3d>
  427eb4:	0f 1f 40 00          	nopl   0x0(%rax)
  427eb8:	48 c7 05 55 2a 23 00 	movq   $0x43e740,0x232a55(%rip)        # 65a918 <err_fns>
  427ebf:	40 e7 43 00 
  427ec3:	eb c6                	jmp    427e8b <ERR_func_error_string+0x7b>
  427ec5:	e8 f6 ef fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  427eca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000427ed0 <ERR_reason_error_string>:
  427ed0:	55                   	push   %rbp
  427ed1:	53                   	push   %rbx
  427ed2:	48 89 fb             	mov    %rdi,%rbx
  427ed5:	48 83 ec 28          	sub    $0x28,%rsp
  427ed9:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  427ee0:	00 00 
  427ee2:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  427ee7:	31 c0                	xor    %eax,%eax
  427ee9:	48 8b 05 28 2a 23 00 	mov    0x232a28(%rip),%rax        # 65a918 <err_fns>
  427ef0:	48 85 c0             	test   %rax,%rax
  427ef3:	74 43                	je     427f38 <ERR_reason_error_string+0x68>
  427ef5:	48 89 dd             	mov    %rbx,%rbp
  427ef8:	81 e3 ff 0f 00 ff    	and    $0xff000fff,%ebx
  427efe:	48 89 e7             	mov    %rsp,%rdi
  427f01:	81 e5 ff 0f 00 00    	and    $0xfff,%ebp
  427f07:	48 89 1c 24          	mov    %rbx,(%rsp)
  427f0b:	ff 50 10             	callq  *0x10(%rax)
  427f0e:	48 85 c0             	test   %rax,%rax
  427f11:	48 89 c2             	mov    %rax,%rdx
  427f14:	74 6a                	je     427f80 <ERR_reason_error_string+0xb0>
  427f16:	48 8b 42 08          	mov    0x8(%rdx),%rax
  427f1a:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  427f1f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  427f26:	00 00 
  427f28:	0f 85 87 00 00 00    	jne    427fb5 <ERR_reason_error_string+0xe5>
  427f2e:	48 83 c4 28          	add    $0x28,%rsp
  427f32:	5b                   	pop    %rbx
  427f33:	5d                   	pop    %rbp
  427f34:	c3                   	retq   
  427f35:	0f 1f 00             	nopl   (%rax)
  427f38:	b9 27 01 00 00       	mov    $0x127,%ecx
  427f3d:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  427f42:	be 01 00 00 00       	mov    $0x1,%esi
  427f47:	bf 09 00 00 00       	mov    $0x9,%edi
  427f4c:	e8 bf ce ff ff       	callq  424e10 <CRYPTO_lock>
  427f51:	48 83 3d bf 29 23 00 	cmpq   $0x0,0x2329bf(%rip)        # 65a918 <err_fns>
  427f58:	00 
  427f59:	74 4d                	je     427fa8 <ERR_reason_error_string+0xd8>
  427f5b:	b9 2a 01 00 00       	mov    $0x12a,%ecx
  427f60:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  427f65:	be 01 00 00 00       	mov    $0x1,%esi
  427f6a:	bf 0a 00 00 00       	mov    $0xa,%edi
  427f6f:	e8 9c ce ff ff       	callq  424e10 <CRYPTO_lock>
  427f74:	48 8b 05 9d 29 23 00 	mov    0x23299d(%rip),%rax        # 65a918 <err_fns>
  427f7b:	e9 75 ff ff ff       	jmpq   427ef5 <ERR_reason_error_string+0x25>
  427f80:	48 8b 05 91 29 23 00 	mov    0x232991(%rip),%rax        # 65a918 <err_fns>
  427f87:	48 89 2c 24          	mov    %rbp,(%rsp)
  427f8b:	48 89 e7             	mov    %rsp,%rdi
  427f8e:	ff 50 10             	callq  *0x10(%rax)
  427f91:	48 89 c2             	mov    %rax,%rdx
  427f94:	31 c0                	xor    %eax,%eax
  427f96:	48 85 d2             	test   %rdx,%rdx
  427f99:	0f 85 77 ff ff ff    	jne    427f16 <ERR_reason_error_string+0x46>
  427f9f:	e9 76 ff ff ff       	jmpq   427f1a <ERR_reason_error_string+0x4a>
  427fa4:	0f 1f 40 00          	nopl   0x0(%rax)
  427fa8:	48 c7 05 65 29 23 00 	movq   $0x43e740,0x232965(%rip)        # 65a918 <err_fns>
  427faf:	40 e7 43 00 
  427fb3:	eb a6                	jmp    427f5b <ERR_reason_error_string+0x8b>
  427fb5:	e8 06 ef fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  427fba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000427fc0 <ERR_remove_thread_state>:
  427fc0:	53                   	push   %rbx
  427fc1:	48 81 ec 60 02 00 00 	sub    $0x260,%rsp
  427fc8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  427fcf:	00 00 
  427fd1:	48 89 84 24 58 02 00 	mov    %rax,0x258(%rsp)
  427fd8:	00 
  427fd9:	31 c0                	xor    %eax,%eax
  427fdb:	48 85 ff             	test   %rdi,%rdi
  427fde:	48 89 e3             	mov    %rsp,%rbx
  427fe1:	74 3d                	je     428020 <ERR_remove_thread_state+0x60>
  427fe3:	48 89 fe             	mov    %rdi,%rsi
  427fe6:	48 89 e7             	mov    %rsp,%rdi
  427fe9:	e8 72 cb ff ff       	callq  424b60 <CRYPTO_THREADID_cpy>
  427fee:	48 8b 05 23 29 23 00 	mov    0x232923(%rip),%rax        # 65a918 <err_fns>
  427ff5:	48 85 c0             	test   %rax,%rax
  427ff8:	74 3e                	je     428038 <ERR_remove_thread_state+0x78>
  427ffa:	48 89 df             	mov    %rbx,%rdi
  427ffd:	ff 50 48             	callq  *0x48(%rax)
  428000:	48 8b 84 24 58 02 00 	mov    0x258(%rsp),%rax
  428007:	00 
  428008:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  42800f:	00 00 
  428011:	75 7a                	jne    42808d <ERR_remove_thread_state+0xcd>
  428013:	48 81 c4 60 02 00 00 	add    $0x260,%rsp
  42801a:	5b                   	pop    %rbx
  42801b:	c3                   	retq   
  42801c:	0f 1f 40 00          	nopl   0x0(%rax)
  428020:	48 89 e7             	mov    %rsp,%rdi
  428023:	e8 e8 ca ff ff       	callq  424b10 <CRYPTO_THREADID_current>
  428028:	48 8b 05 e9 28 23 00 	mov    0x2328e9(%rip),%rax        # 65a918 <err_fns>
  42802f:	48 85 c0             	test   %rax,%rax
  428032:	75 c6                	jne    427ffa <ERR_remove_thread_state+0x3a>
  428034:	0f 1f 40 00          	nopl   0x0(%rax)
  428038:	b9 27 01 00 00       	mov    $0x127,%ecx
  42803d:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  428042:	be 01 00 00 00       	mov    $0x1,%esi
  428047:	bf 09 00 00 00       	mov    $0x9,%edi
  42804c:	e8 bf cd ff ff       	callq  424e10 <CRYPTO_lock>
  428051:	48 83 3d bf 28 23 00 	cmpq   $0x0,0x2328bf(%rip)        # 65a918 <err_fns>
  428058:	00 
  428059:	74 25                	je     428080 <ERR_remove_thread_state+0xc0>
  42805b:	b9 2a 01 00 00       	mov    $0x12a,%ecx
  428060:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  428065:	be 01 00 00 00       	mov    $0x1,%esi
  42806a:	bf 0a 00 00 00       	mov    $0xa,%edi
  42806f:	e8 9c cd ff ff       	callq  424e10 <CRYPTO_lock>
  428074:	48 8b 05 9d 28 23 00 	mov    0x23289d(%rip),%rax        # 65a918 <err_fns>
  42807b:	e9 7a ff ff ff       	jmpq   427ffa <ERR_remove_thread_state+0x3a>
  428080:	48 c7 05 8d 28 23 00 	movq   $0x43e740,0x23288d(%rip)        # 65a918 <err_fns>
  428087:	40 e7 43 00 
  42808b:	eb ce                	jmp    42805b <ERR_remove_thread_state+0x9b>
  42808d:	e8 2e ee fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  428092:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  428099:	1f 84 00 00 00 00 00 

00000000004280a0 <ERR_remove_state>:
  4280a0:	e9 bb ea ff ff       	jmpq   426b60 <ERR_remove_thread_state.constprop.3>
  4280a5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  4280ac:	00 00 00 00 

00000000004280b0 <ERR_get_state>:
  4280b0:	41 54                	push   %r12
  4280b2:	55                   	push   %rbp
  4280b3:	53                   	push   %rbx
  4280b4:	48 81 ec 80 02 00 00 	sub    $0x280,%rsp
  4280bb:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  4280c2:	00 00 
  4280c4:	48 89 84 24 78 02 00 	mov    %rax,0x278(%rsp)
  4280cb:	00 
  4280cc:	31 c0                	xor    %eax,%eax
  4280ce:	48 83 3d 42 28 23 00 	cmpq   $0x0,0x232842(%rip)        # 65a918 <err_fns>
  4280d5:	00 
  4280d6:	74 58                	je     428130 <ERR_get_state+0x80>
  4280d8:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  4280dd:	e8 2e ca ff ff       	callq  424b10 <CRYPTO_THREADID_current>
  4280e2:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  4280e7:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  4280ec:	e8 6f ca ff ff       	callq  424b60 <CRYPTO_THREADID_cpy>
  4280f1:	48 8b 05 20 28 23 00 	mov    0x232820(%rip),%rax        # 65a918 <err_fns>
  4280f8:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  4280fd:	ff 50 38             	callq  *0x38(%rax)
  428100:	48 85 c0             	test   %rax,%rax
  428103:	48 89 c3             	mov    %rax,%rbx
  428106:	74 70                	je     428178 <ERR_get_state+0xc8>
  428108:	48 8b 94 24 78 02 00 	mov    0x278(%rsp),%rdx
  42810f:	00 
  428110:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  428117:	00 00 
  428119:	0f 85 21 02 00 00    	jne    428340 <ERR_get_state+0x290>
  42811f:	48 81 c4 80 02 00 00 	add    $0x280,%rsp
  428126:	5b                   	pop    %rbx
  428127:	5d                   	pop    %rbp
  428128:	41 5c                	pop    %r12
  42812a:	c3                   	retq   
  42812b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  428130:	b9 27 01 00 00       	mov    $0x127,%ecx
  428135:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  42813a:	be 01 00 00 00       	mov    $0x1,%esi
  42813f:	bf 09 00 00 00       	mov    $0x9,%edi
  428144:	e8 c7 cc ff ff       	callq  424e10 <CRYPTO_lock>
  428149:	48 83 3d c7 27 23 00 	cmpq   $0x0,0x2327c7(%rip)        # 65a918 <err_fns>
  428150:	00 
  428151:	0f 84 d9 01 00 00    	je     428330 <ERR_get_state+0x280>
  428157:	b9 2a 01 00 00       	mov    $0x12a,%ecx
  42815c:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  428161:	be 01 00 00 00       	mov    $0x1,%esi
  428166:	bf 0a 00 00 00       	mov    $0xa,%edi
  42816b:	e8 a0 cc ff ff       	callq  424e10 <CRYPTO_lock>
  428170:	e9 63 ff ff ff       	jmpq   4280d8 <ERR_get_state+0x28>
  428175:	0f 1f 00             	nopl   (%rax)
  428178:	ba fb 03 00 00       	mov    $0x3fb,%edx
  42817d:	be c9 e2 43 00       	mov    $0x43e2c9,%esi
  428182:	bf 58 02 00 00       	mov    $0x258,%edi
  428187:	e8 74 d2 ff ff       	callq  425400 <CRYPTO_malloc>
  42818c:	48 89 c5             	mov    %rax,%rbp
  42818f:	b8 80 8d 65 00       	mov    $0x658d80,%eax
  428194:	48 85 ed             	test   %rbp,%rbp
  428197:	0f 84 6b ff ff ff    	je     428108 <ERR_get_state+0x58>
  42819d:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  4281a2:	48 89 ef             	mov    %rbp,%rdi
  4281a5:	e8 b6 c9 ff ff       	callq  424b60 <CRYPTO_THREADID_cpy>
  4281aa:	48 8d bd d8 00 00 00 	lea    0xd8(%rbp),%rdi
  4281b1:	89 e8                	mov    %ebp,%eax
  4281b3:	48 8d 95 58 01 00 00 	lea    0x158(%rbp),%rdx
  4281ba:	48 c7 85 d0 00 00 00 	movq   $0x0,0xd0(%rbp)
  4281c1:	00 00 00 00 
  4281c5:	48 c7 85 48 01 00 00 	movq   $0x0,0x148(%rbp)
  4281cc:	00 00 00 00 
  4281d0:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
  4281d4:	48 83 e2 f8          	and    $0xfffffffffffffff8,%rdx
  4281d8:	c7 85 50 02 00 00 00 	movl   $0x0,0x250(%rbp)
  4281df:	00 00 00 
  4281e2:	29 f8                	sub    %edi,%eax
  4281e4:	c7 85 54 02 00 00 00 	movl   $0x0,0x254(%rbp)
  4281eb:	00 00 00 
  4281ee:	8d 88 50 01 00 00    	lea    0x150(%rax),%ecx
  4281f4:	48 89 d8             	mov    %rbx,%rax
  4281f7:	c1 e9 03             	shr    $0x3,%ecx
  4281fa:	f3 48 ab             	rep stos %rax,%es:(%rdi)
  4281fd:	89 e8                	mov    %ebp,%eax
  4281ff:	48 89 d7             	mov    %rdx,%rdi
  428202:	48 c7 85 50 01 00 00 	movq   $0x0,0x150(%rbp)
  428209:	00 00 00 00 
  42820d:	29 d0                	sub    %edx,%eax
  42820f:	48 c7 85 88 01 00 00 	movq   $0x0,0x188(%rbp)
  428216:	00 00 00 00 
  42821a:	8d 88 90 01 00 00    	lea    0x190(%rax),%ecx
  428220:	48 89 d8             	mov    %rbx,%rax
  428223:	c1 e9 03             	shr    $0x3,%ecx
  428226:	f3 48 ab             	rep stos %rax,%es:(%rdi)
  428229:	48 89 ef             	mov    %rbp,%rdi
  42822c:	48 8b 05 e5 26 23 00 	mov    0x2326e5(%rip),%rax        # 65a918 <err_fns>
  428233:	ff 50 40             	callq  *0x40(%rax)
  428236:	49 89 c4             	mov    %rax,%r12
  428239:	48 8b 05 d8 26 23 00 	mov    0x2326d8(%rip),%rax        # 65a918 <err_fns>
  428240:	48 89 ef             	mov    %rbp,%rdi
  428243:	ff 50 38             	callq  *0x38(%rax)
  428246:	48 39 e8             	cmp    %rbp,%rax
  428249:	74 4d                	je     428298 <ERR_get_state+0x1e8>
  42824b:	31 db                	xor    %ebx,%ebx
  42824d:	eb 1a                	jmp    428269 <ERR_get_state+0x1b9>
  42824f:	90                   	nop
  428250:	c7 84 1d 50 01 00 00 	movl   $0x0,0x150(%rbp,%rbx,1)
  428257:	00 00 00 00 
  42825b:	48 83 c3 04          	add    $0x4,%rbx
  42825f:	48 83 fb 40          	cmp    $0x40,%rbx
  428263:	0f 84 8f 00 00 00    	je     4282f8 <ERR_get_state+0x248>
  428269:	48 8b bc 5d d0 00 00 	mov    0xd0(%rbp,%rbx,2),%rdi
  428270:	00 
  428271:	48 85 ff             	test   %rdi,%rdi
  428274:	74 da                	je     428250 <ERR_get_state+0x1a0>
  428276:	f6 84 1d 50 01 00 00 	testb  $0x1,0x150(%rbp,%rbx,1)
  42827d:	01 
  42827e:	74 d0                	je     428250 <ERR_get_state+0x1a0>
  428280:	e8 db d4 ff ff       	callq  425760 <CRYPTO_free>
  428285:	48 c7 84 5d d0 00 00 	movq   $0x0,0xd0(%rbp,%rbx,2)
  42828c:	00 00 00 00 00 
  428291:	eb bd                	jmp    428250 <ERR_get_state+0x1a0>
  428293:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  428298:	4d 85 e4             	test   %r12,%r12
  42829b:	0f 84 67 fe ff ff    	je     428108 <ERR_get_state+0x58>
  4282a1:	31 db                	xor    %ebx,%ebx
  4282a3:	eb 19                	jmp    4282be <ERR_get_state+0x20e>
  4282a5:	0f 1f 00             	nopl   (%rax)
  4282a8:	41 c7 84 1c 50 01 00 	movl   $0x0,0x150(%r12,%rbx,1)
  4282af:	00 00 00 00 00 
  4282b4:	48 83 c3 04          	add    $0x4,%rbx
  4282b8:	48 83 fb 40          	cmp    $0x40,%rbx
  4282bc:	74 52                	je     428310 <ERR_get_state+0x260>
  4282be:	49 8b bc 5c d0 00 00 	mov    0xd0(%r12,%rbx,2),%rdi
  4282c5:	00 
  4282c6:	48 85 ff             	test   %rdi,%rdi
  4282c9:	74 dd                	je     4282a8 <ERR_get_state+0x1f8>
  4282cb:	41 f6 84 1c 50 01 00 	testb  $0x1,0x150(%r12,%rbx,1)
  4282d2:	00 01 
  4282d4:	74 d2                	je     4282a8 <ERR_get_state+0x1f8>
  4282d6:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  4282db:	e8 80 d4 ff ff       	callq  425760 <CRYPTO_free>
  4282e0:	49 c7 84 5c d0 00 00 	movq   $0x0,0xd0(%r12,%rbx,2)
  4282e7:	00 00 00 00 00 
  4282ec:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  4282f1:	eb b5                	jmp    4282a8 <ERR_get_state+0x1f8>
  4282f3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4282f8:	48 89 ef             	mov    %rbp,%rdi
  4282fb:	e8 60 d4 ff ff       	callq  425760 <CRYPTO_free>
  428300:	b8 80 8d 65 00       	mov    $0x658d80,%eax
  428305:	e9 fe fd ff ff       	jmpq   428108 <ERR_get_state+0x58>
  42830a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  428310:	4c 89 e7             	mov    %r12,%rdi
  428313:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  428318:	e8 43 d4 ff ff       	callq  425760 <CRYPTO_free>
  42831d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  428322:	e9 e1 fd ff ff       	jmpq   428108 <ERR_get_state+0x58>
  428327:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  42832e:	00 00 
  428330:	48 c7 05 dd 25 23 00 	movq   $0x43e740,0x2325dd(%rip)        # 65a918 <err_fns>
  428337:	40 e7 43 00 
  42833b:	e9 17 fe ff ff       	jmpq   428157 <ERR_get_state+0xa7>
  428340:	e8 7b eb fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  428345:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  42834c:	00 00 00 00 

0000000000428350 <ERR_put_error>:
  428350:	41 56                	push   %r14
  428352:	41 55                	push   %r13
  428354:	41 89 f6             	mov    %esi,%r14d
  428357:	41 54                	push   %r12
  428359:	55                   	push   %rbp
  42835a:	49 89 cc             	mov    %rcx,%r12
  42835d:	53                   	push   %rbx
  42835e:	89 d5                	mov    %edx,%ebp
  428360:	89 fb                	mov    %edi,%ebx
  428362:	45 89 c5             	mov    %r8d,%r13d
  428365:	48 83 ec 10          	sub    $0x10,%rsp
  428369:	e8 42 fd ff ff       	callq  4280b0 <ERR_get_state>
  42836e:	8b b0 50 02 00 00    	mov    0x250(%rax),%esi
  428374:	44 8d 4e 01          	lea    0x1(%rsi),%r9d
  428378:	44 89 ca             	mov    %r9d,%edx
  42837b:	c1 fa 1f             	sar    $0x1f,%edx
  42837e:	c1 ea 1c             	shr    $0x1c,%edx
  428381:	41 01 d1             	add    %edx,%r9d
  428384:	41 83 e1 0f          	and    $0xf,%r9d
  428388:	41 29 d1             	sub    %edx,%r9d
  42838b:	44 3b 88 54 02 00 00 	cmp    0x254(%rax),%r9d
  428392:	44 89 88 50 02 00 00 	mov    %r9d,0x250(%rax)
  428399:	0f 84 99 00 00 00    	je     428438 <ERR_put_error+0xe8>
  42839f:	44 89 f2             	mov    %r14d,%edx
  4283a2:	4d 63 c9             	movslq %r9d,%r9
  4283a5:	81 e5 ff 0f 00 00    	and    $0xfff,%ebp
  4283ab:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
  4283b1:	0f b6 fb             	movzbl %bl,%edi
  4283b4:	4e 8d 04 c8          	lea    (%rax,%r9,8),%r8
  4283b8:	48 c1 e2 0c          	shl    $0xc,%rdx
  4283bc:	48 c1 e7 18          	shl    $0x18,%rdi
  4283c0:	4a 8d 0c 88          	lea    (%rax,%r9,4),%rcx
  4283c4:	48 09 ea             	or     %rbp,%rdx
  4283c7:	48 09 fa             	or     %rdi,%rdx
  4283ca:	c7 41 10 00 00 00 00 	movl   $0x0,0x10(%rcx)
  4283d1:	4d 89 a0 90 01 00 00 	mov    %r12,0x190(%r8)
  4283d8:	49 89 50 50          	mov    %rdx,0x50(%r8)
  4283dc:	44 89 a9 10 02 00 00 	mov    %r13d,0x210(%rcx)
  4283e3:	49 8b b8 d0 00 00 00 	mov    0xd0(%r8),%rdi
  4283ea:	48 85 ff             	test   %rdi,%rdi
  4283ed:	74 2b                	je     42841a <ERR_put_error+0xca>
  4283ef:	f6 81 50 01 00 00 01 	testb  $0x1,0x150(%rcx)
  4283f6:	74 22                	je     42841a <ERR_put_error+0xca>
  4283f8:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  4283fd:	e8 5e d3 ff ff       	callq  425760 <CRYPTO_free>
  428402:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  428407:	4c 63 88 50 02 00 00 	movslq 0x250(%rax),%r9
  42840e:	4a c7 84 c8 d0 00 00 	movq   $0x0,0xd0(%rax,%r9,8)
  428415:	00 00 00 00 00 
  42841a:	42 c7 84 88 50 01 00 	movl   $0x0,0x150(%rax,%r9,4)
  428421:	00 00 00 00 00 
  428426:	48 83 c4 10          	add    $0x10,%rsp
  42842a:	5b                   	pop    %rbx
  42842b:	5d                   	pop    %rbp
  42842c:	41 5c                	pop    %r12
  42842e:	41 5d                	pop    %r13
  428430:	41 5e                	pop    %r14
  428432:	c3                   	retq   
  428433:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  428438:	41 8d 51 01          	lea    0x1(%r9),%edx
  42843c:	89 d1                	mov    %edx,%ecx
  42843e:	c1 f9 1f             	sar    $0x1f,%ecx
  428441:	c1 e9 1c             	shr    $0x1c,%ecx
  428444:	01 ca                	add    %ecx,%edx
  428446:	83 e2 0f             	and    $0xf,%edx
  428449:	29 ca                	sub    %ecx,%edx
  42844b:	89 90 54 02 00 00    	mov    %edx,0x254(%rax)
  428451:	e9 49 ff ff ff       	jmpq   42839f <ERR_put_error+0x4f>
  428456:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  42845d:	00 00 00 

0000000000428460 <ERR_clear_error>:
  428460:	41 55                	push   %r13
  428462:	41 54                	push   %r12
  428464:	55                   	push   %rbp
  428465:	53                   	push   %rbx
  428466:	48 83 ec 08          	sub    $0x8,%rsp
  42846a:	e8 41 fc ff ff       	callq  4280b0 <ERR_get_state>
  42846f:	4c 8d a0 50 01 00 00 	lea    0x150(%rax),%r12
  428476:	49 89 c5             	mov    %rax,%r13
  428479:	48 8d 98 d0 00 00 00 	lea    0xd0(%rax),%rbx
  428480:	4c 89 e5             	mov    %r12,%rbp
  428483:	eb 2c                	jmp    4284b1 <ERR_clear_error+0x51>
  428485:	0f 1f 00             	nopl   (%rax)
  428488:	c7 45 00 00 00 00 00 	movl   $0x0,0x0(%rbp)
  42848f:	48 83 c3 08          	add    $0x8,%rbx
  428493:	48 c7 83 b8 00 00 00 	movq   $0x0,0xb8(%rbx)
  42849a:	00 00 00 00 
  42849e:	48 83 c5 04          	add    $0x4,%rbp
  4284a2:	c7 85 bc 00 00 00 ff 	movl   $0xffffffff,0xbc(%rbp)
  4284a9:	ff ff ff 
  4284ac:	4c 39 e3             	cmp    %r12,%rbx
  4284af:	74 2f                	je     4284e0 <ERR_clear_error+0x80>
  4284b1:	48 8b 3b             	mov    (%rbx),%rdi
  4284b4:	c7 85 c0 fe ff ff 00 	movl   $0x0,-0x140(%rbp)
  4284bb:	00 00 00 
  4284be:	48 c7 43 80 00 00 00 	movq   $0x0,-0x80(%rbx)
  4284c5:	00 
  4284c6:	48 85 ff             	test   %rdi,%rdi
  4284c9:	74 bd                	je     428488 <ERR_clear_error+0x28>
  4284cb:	f6 45 00 01          	testb  $0x1,0x0(%rbp)
  4284cf:	74 b7                	je     428488 <ERR_clear_error+0x28>
  4284d1:	e8 8a d2 ff ff       	callq  425760 <CRYPTO_free>
  4284d6:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
  4284dd:	eb a9                	jmp    428488 <ERR_clear_error+0x28>
  4284df:	90                   	nop
  4284e0:	41 c7 85 54 02 00 00 	movl   $0x0,0x254(%r13)
  4284e7:	00 00 00 00 
  4284eb:	41 c7 85 50 02 00 00 	movl   $0x0,0x250(%r13)
  4284f2:	00 00 00 00 
  4284f6:	48 83 c4 08          	add    $0x8,%rsp
  4284fa:	5b                   	pop    %rbx
  4284fb:	5d                   	pop    %rbp
  4284fc:	41 5c                	pop    %r12
  4284fe:	41 5d                	pop    %r13
  428500:	c3                   	retq   
  428501:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  428508:	0f 1f 84 00 00 00 00 
  42850f:	00 

0000000000428510 <ERR_get_error_line_data>:
  428510:	41 57                	push   %r15
  428512:	41 56                	push   %r14
  428514:	41 55                	push   %r13
  428516:	41 54                	push   %r12
  428518:	49 89 f5             	mov    %rsi,%r13
  42851b:	55                   	push   %rbp
  42851c:	53                   	push   %rbx
  42851d:	49 89 fc             	mov    %rdi,%r12
  428520:	48 89 d3             	mov    %rdx,%rbx
  428523:	48 89 cd             	mov    %rcx,%rbp
  428526:	48 83 ec 18          	sub    $0x18,%rsp
  42852a:	e8 81 fb ff ff       	callq  4280b0 <ERR_get_state>
  42852f:	44 8b 80 54 02 00 00 	mov    0x254(%rax),%r8d
  428536:	44 3b 80 50 02 00 00 	cmp    0x250(%rax),%r8d
  42853d:	0f 84 95 00 00 00    	je     4285d8 <ERR_get_error_line_data+0xc8>
  428543:	41 83 c0 01          	add    $0x1,%r8d
  428547:	44 89 c2             	mov    %r8d,%edx
  42854a:	c1 fa 1f             	sar    $0x1f,%edx
  42854d:	c1 ea 1c             	shr    $0x1c,%edx
  428550:	41 01 d0             	add    %edx,%r8d
  428553:	41 83 e0 0f          	and    $0xf,%r8d
  428557:	41 29 d0             	sub    %edx,%r8d
  42855a:	4d 85 e4             	test   %r12,%r12
  42855d:	49 63 d0             	movslq %r8d,%rdx
  428560:	4c 8d 3c d0          	lea    (%rax,%rdx,8),%r15
  428564:	4d 8b 77 50          	mov    0x50(%r15),%r14
  428568:	44 89 80 54 02 00 00 	mov    %r8d,0x254(%rax)
  42856f:	49 c7 47 50 00 00 00 	movq   $0x0,0x50(%r15)
  428576:	00 
  428577:	74 24                	je     42859d <ERR_get_error_line_data+0x8d>
  428579:	4d 85 ed             	test   %r13,%r13
  42857c:	74 1f                	je     42859d <ERR_get_error_line_data+0x8d>
  42857e:	49 8b 8f 90 01 00 00 	mov    0x190(%r15),%rcx
  428585:	48 85 c9             	test   %rcx,%rcx
  428588:	0f 84 c2 00 00 00    	je     428650 <ERR_get_error_line_data+0x140>
  42858e:	49 89 0c 24          	mov    %rcx,(%r12)
  428592:	8b 8c 90 10 02 00 00 	mov    0x210(%rax,%rdx,4),%ecx
  428599:	41 89 4d 00          	mov    %ecx,0x0(%r13)
  42859d:	48 85 db             	test   %rbx,%rbx
  4285a0:	74 4e                	je     4285f0 <ERR_get_error_line_data+0xe0>
  4285a2:	49 8b 8f d0 00 00 00 	mov    0xd0(%r15),%rcx
  4285a9:	48 85 c9             	test   %rcx,%rcx
  4285ac:	74 72                	je     428620 <ERR_get_error_line_data+0x110>
  4285ae:	48 85 ed             	test   %rbp,%rbp
  4285b1:	48 89 0b             	mov    %rcx,(%rbx)
  4285b4:	74 7a                	je     428630 <ERR_get_error_line_data+0x120>
  4285b6:	8b 84 90 50 01 00 00 	mov    0x150(%rax,%rdx,4),%eax
  4285bd:	89 45 00             	mov    %eax,0x0(%rbp)
  4285c0:	4c 89 f0             	mov    %r14,%rax
  4285c3:	48 83 c4 18          	add    $0x18,%rsp
  4285c7:	5b                   	pop    %rbx
  4285c8:	5d                   	pop    %rbp
  4285c9:	41 5c                	pop    %r12
  4285cb:	41 5d                	pop    %r13
  4285cd:	41 5e                	pop    %r14
  4285cf:	41 5f                	pop    %r15
  4285d1:	c3                   	retq   
  4285d2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  4285d8:	48 83 c4 18          	add    $0x18,%rsp
  4285dc:	31 c0                	xor    %eax,%eax
  4285de:	5b                   	pop    %rbx
  4285df:	5d                   	pop    %rbp
  4285e0:	41 5c                	pop    %r12
  4285e2:	41 5d                	pop    %r13
  4285e4:	41 5e                	pop    %r14
  4285e6:	41 5f                	pop    %r15
  4285e8:	c3                   	retq   
  4285e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  4285f0:	49 8b bf d0 00 00 00 	mov    0xd0(%r15),%rdi
  4285f7:	48 85 ff             	test   %rdi,%rdi
  4285fa:	74 0a                	je     428606 <ERR_get_error_line_data+0xf6>
  4285fc:	f6 84 90 50 01 00 00 	testb  $0x1,0x150(%rax,%rdx,4)
  428603:	01 
  428604:	75 62                	jne    428668 <ERR_get_error_line_data+0x158>
  428606:	c7 84 90 50 01 00 00 	movl   $0x0,0x150(%rax,%rdx,4)
  42860d:	00 00 00 00 
  428611:	4c 89 f0             	mov    %r14,%rax
  428614:	eb ad                	jmp    4285c3 <ERR_get_error_line_data+0xb3>
  428616:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  42861d:	00 00 00 
  428620:	48 85 ed             	test   %rbp,%rbp
  428623:	48 c7 03 47 e8 43 00 	movq   $0x43e847,(%rbx)
  42862a:	75 0c                	jne    428638 <ERR_get_error_line_data+0x128>
  42862c:	0f 1f 40 00          	nopl   0x0(%rax)
  428630:	4c 89 f0             	mov    %r14,%rax
  428633:	eb 8e                	jmp    4285c3 <ERR_get_error_line_data+0xb3>
  428635:	0f 1f 00             	nopl   (%rax)
  428638:	c7 45 00 00 00 00 00 	movl   $0x0,0x0(%rbp)
  42863f:	4c 89 f0             	mov    %r14,%rax
  428642:	e9 7c ff ff ff       	jmpq   4285c3 <ERR_get_error_line_data+0xb3>
  428647:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  42864e:	00 00 
  428650:	49 c7 04 24 e7 04 44 	movq   $0x4404e7,(%r12)
  428657:	00 
  428658:	41 c7 45 00 00 00 00 	movl   $0x0,0x0(%r13)
  42865f:	00 
  428660:	e9 38 ff ff ff       	jmpq   42859d <ERR_get_error_line_data+0x8d>
  428665:	0f 1f 00             	nopl   (%rax)
  428668:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  42866d:	48 89 04 24          	mov    %rax,(%rsp)
  428671:	e8 ea d0 ff ff       	callq  425760 <CRYPTO_free>
  428676:	49 c7 87 d0 00 00 00 	movq   $0x0,0xd0(%r15)
  42867d:	00 00 00 00 
  428681:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  428686:	48 8b 04 24          	mov    (%rsp),%rax
  42868a:	e9 77 ff ff ff       	jmpq   428606 <ERR_get_error_line_data+0xf6>
  42868f:	90                   	nop

0000000000428690 <ERR_get_error_line>:
  428690:	41 56                	push   %r14
  428692:	41 55                	push   %r13
  428694:	41 54                	push   %r12
  428696:	55                   	push   %rbp
  428697:	48 89 f5             	mov    %rsi,%rbp
  42869a:	53                   	push   %rbx
  42869b:	48 89 fb             	mov    %rdi,%rbx
  42869e:	48 83 ec 10          	sub    $0x10,%rsp
  4286a2:	e8 09 fa ff ff       	callq  4280b0 <ERR_get_state>
  4286a7:	8b 90 54 02 00 00    	mov    0x254(%rax),%edx
  4286ad:	3b 90 50 02 00 00    	cmp    0x250(%rax),%edx
  4286b3:	0f 84 87 00 00 00    	je     428740 <ERR_get_error_line+0xb0>
  4286b9:	83 c2 01             	add    $0x1,%edx
  4286bc:	89 d1                	mov    %edx,%ecx
  4286be:	c1 f9 1f             	sar    $0x1f,%ecx
  4286c1:	c1 e9 1c             	shr    $0x1c,%ecx
  4286c4:	01 ca                	add    %ecx,%edx
  4286c6:	83 e2 0f             	and    $0xf,%edx
  4286c9:	29 ca                	sub    %ecx,%edx
  4286cb:	48 85 db             	test   %rbx,%rbx
  4286ce:	4c 63 f2             	movslq %edx,%r14
  4286d1:	4e 8d 2c f0          	lea    (%rax,%r14,8),%r13
  4286d5:	4d 8b 65 50          	mov    0x50(%r13),%r12
  4286d9:	89 90 54 02 00 00    	mov    %edx,0x254(%rax)
  4286df:	49 c7 45 50 00 00 00 	movq   $0x0,0x50(%r13)
  4286e6:	00 
  4286e7:	74 1f                	je     428708 <ERR_get_error_line+0x78>
  4286e9:	48 85 ed             	test   %rbp,%rbp
  4286ec:	74 1a                	je     428708 <ERR_get_error_line+0x78>
  4286ee:	49 8b 95 90 01 00 00 	mov    0x190(%r13),%rdx
  4286f5:	48 85 d2             	test   %rdx,%rdx
  4286f8:	74 76                	je     428770 <ERR_get_error_line+0xe0>
  4286fa:	48 89 13             	mov    %rdx,(%rbx)
  4286fd:	42 8b 94 b0 10 02 00 	mov    0x210(%rax,%r14,4),%edx
  428704:	00 
  428705:	89 55 00             	mov    %edx,0x0(%rbp)
  428708:	49 8b bd d0 00 00 00 	mov    0xd0(%r13),%rdi
  42870f:	48 85 ff             	test   %rdi,%rdi
  428712:	74 0b                	je     42871f <ERR_get_error_line+0x8f>
  428714:	42 f6 84 b0 50 01 00 	testb  $0x1,0x150(%rax,%r14,4)
  42871b:	00 01 
  42871d:	75 31                	jne    428750 <ERR_get_error_line+0xc0>
  42871f:	42 c7 84 b0 50 01 00 	movl   $0x0,0x150(%rax,%r14,4)
  428726:	00 00 00 00 00 
  42872b:	48 83 c4 10          	add    $0x10,%rsp
  42872f:	4c 89 e0             	mov    %r12,%rax
  428732:	5b                   	pop    %rbx
  428733:	5d                   	pop    %rbp
  428734:	41 5c                	pop    %r12
  428736:	41 5d                	pop    %r13
  428738:	41 5e                	pop    %r14
  42873a:	c3                   	retq   
  42873b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  428740:	48 83 c4 10          	add    $0x10,%rsp
  428744:	31 c0                	xor    %eax,%eax
  428746:	5b                   	pop    %rbx
  428747:	5d                   	pop    %rbp
  428748:	41 5c                	pop    %r12
  42874a:	41 5d                	pop    %r13
  42874c:	41 5e                	pop    %r14
  42874e:	c3                   	retq   
  42874f:	90                   	nop
  428750:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  428755:	e8 06 d0 ff ff       	callq  425760 <CRYPTO_free>
  42875a:	49 c7 85 d0 00 00 00 	movq   $0x0,0xd0(%r13)
  428761:	00 00 00 00 
  428765:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  42876a:	eb b3                	jmp    42871f <ERR_get_error_line+0x8f>
  42876c:	0f 1f 40 00          	nopl   0x0(%rax)
  428770:	48 c7 03 e7 04 44 00 	movq   $0x4404e7,(%rbx)
  428777:	c7 45 00 00 00 00 00 	movl   $0x0,0x0(%rbp)
  42877e:	eb 88                	jmp    428708 <ERR_get_error_line+0x78>

0000000000428780 <ERR_peek_last_error>:
  428780:	48 83 ec 08          	sub    $0x8,%rsp
  428784:	e8 27 f9 ff ff       	callq  4280b0 <ERR_get_state>
  428789:	48 63 90 50 02 00 00 	movslq 0x250(%rax),%rdx
  428790:	39 90 54 02 00 00    	cmp    %edx,0x254(%rax)
  428796:	74 10                	je     4287a8 <ERR_peek_last_error+0x28>
  428798:	48 8b 44 d0 50       	mov    0x50(%rax,%rdx,8),%rax
  42879d:	48 83 c4 08          	add    $0x8,%rsp
  4287a1:	c3                   	retq   
  4287a2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  4287a8:	31 c0                	xor    %eax,%eax
  4287aa:	48 83 c4 08          	add    $0x8,%rsp
  4287ae:	c3                   	retq   
  4287af:	90                   	nop

00000000004287b0 <ERR_peek_error>:
  4287b0:	48 83 ec 08          	sub    $0x8,%rsp
  4287b4:	e8 f7 f8 ff ff       	callq  4280b0 <ERR_get_state>
  4287b9:	8b 90 54 02 00 00    	mov    0x254(%rax),%edx
  4287bf:	3b 90 50 02 00 00    	cmp    0x250(%rax),%edx
  4287c5:	74 29                	je     4287f0 <ERR_peek_error+0x40>
  4287c7:	83 c2 01             	add    $0x1,%edx
  4287ca:	89 d1                	mov    %edx,%ecx
  4287cc:	c1 f9 1f             	sar    $0x1f,%ecx
  4287cf:	c1 e9 1c             	shr    $0x1c,%ecx
  4287d2:	01 ca                	add    %ecx,%edx
  4287d4:	83 e2 0f             	and    $0xf,%edx
  4287d7:	29 ca                	sub    %ecx,%edx
  4287d9:	48 63 d2             	movslq %edx,%rdx
  4287dc:	48 8b 44 d0 50       	mov    0x50(%rax,%rdx,8),%rax
  4287e1:	48 83 c4 08          	add    $0x8,%rsp
  4287e5:	c3                   	retq   
  4287e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4287ed:	00 00 00 
  4287f0:	31 c0                	xor    %eax,%eax
  4287f2:	48 83 c4 08          	add    $0x8,%rsp
  4287f6:	c3                   	retq   
  4287f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4287fe:	00 00 

0000000000428800 <ERR_get_error>:
  428800:	41 54                	push   %r12
  428802:	55                   	push   %rbp
  428803:	53                   	push   %rbx
  428804:	48 83 ec 10          	sub    $0x10,%rsp
  428808:	e8 a3 f8 ff ff       	callq  4280b0 <ERR_get_state>
  42880d:	8b 90 54 02 00 00    	mov    0x254(%rax),%edx
  428813:	3b 90 50 02 00 00    	cmp    0x250(%rax),%edx
  428819:	74 5d                	je     428878 <ERR_get_error+0x78>
  42881b:	83 c2 01             	add    $0x1,%edx
  42881e:	89 d1                	mov    %edx,%ecx
  428820:	c1 f9 1f             	sar    $0x1f,%ecx
  428823:	c1 e9 1c             	shr    $0x1c,%ecx
  428826:	01 ca                	add    %ecx,%edx
  428828:	83 e2 0f             	and    $0xf,%edx
  42882b:	29 ca                	sub    %ecx,%edx
  42882d:	4c 63 e2             	movslq %edx,%r12
  428830:	4a 8d 2c e0          	lea    (%rax,%r12,8),%rbp
  428834:	48 8b 5d 50          	mov    0x50(%rbp),%rbx
  428838:	89 90 54 02 00 00    	mov    %edx,0x254(%rax)
  42883e:	48 8b bd d0 00 00 00 	mov    0xd0(%rbp),%rdi
  428845:	48 c7 45 50 00 00 00 	movq   $0x0,0x50(%rbp)
  42884c:	00 
  42884d:	48 85 ff             	test   %rdi,%rdi
  428850:	74 0b                	je     42885d <ERR_get_error+0x5d>
  428852:	42 f6 84 a0 50 01 00 	testb  $0x1,0x150(%rax,%r12,4)
  428859:	00 01 
  42885b:	75 2b                	jne    428888 <ERR_get_error+0x88>
  42885d:	42 c7 84 a0 50 01 00 	movl   $0x0,0x150(%rax,%r12,4)
  428864:	00 00 00 00 00 
  428869:	48 83 c4 10          	add    $0x10,%rsp
  42886d:	48 89 d8             	mov    %rbx,%rax
  428870:	5b                   	pop    %rbx
  428871:	5d                   	pop    %rbp
  428872:	41 5c                	pop    %r12
  428874:	c3                   	retq   
  428875:	0f 1f 00             	nopl   (%rax)
  428878:	48 83 c4 10          	add    $0x10,%rsp
  42887c:	31 c0                	xor    %eax,%eax
  42887e:	5b                   	pop    %rbx
  42887f:	5d                   	pop    %rbp
  428880:	41 5c                	pop    %r12
  428882:	c3                   	retq   
  428883:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  428888:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  42888d:	e8 ce ce ff ff       	callq  425760 <CRYPTO_free>
  428892:	48 c7 85 d0 00 00 00 	movq   $0x0,0xd0(%rbp)
  428899:	00 00 00 00 
  42889d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  4288a2:	eb b9                	jmp    42885d <ERR_get_error+0x5d>
  4288a4:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
  4288ab:	00 00 00 00 00 

00000000004288b0 <ERR_peek_last_error_line>:
  4288b0:	55                   	push   %rbp
  4288b1:	53                   	push   %rbx
  4288b2:	48 89 f5             	mov    %rsi,%rbp
  4288b5:	48 89 fb             	mov    %rdi,%rbx
  4288b8:	48 83 ec 08          	sub    $0x8,%rsp
  4288bc:	e8 ef f7 ff ff       	callq  4280b0 <ERR_get_state>
  4288c1:	48 63 90 50 02 00 00 	movslq 0x250(%rax),%rdx
  4288c8:	39 90 54 02 00 00    	cmp    %edx,0x254(%rax)
  4288ce:	74 48                	je     428918 <ERR_peek_last_error_line+0x68>
  4288d0:	48 8d 34 d0          	lea    (%rax,%rdx,8),%rsi
  4288d4:	48 85 db             	test   %rbx,%rbx
  4288d7:	48 8b 4e 50          	mov    0x50(%rsi),%rcx
  4288db:	74 2b                	je     428908 <ERR_peek_last_error_line+0x58>
  4288dd:	48 85 ed             	test   %rbp,%rbp
  4288e0:	74 26                	je     428908 <ERR_peek_last_error_line+0x58>
  4288e2:	48 8b b6 90 01 00 00 	mov    0x190(%rsi),%rsi
  4288e9:	48 85 f6             	test   %rsi,%rsi
  4288ec:	74 3a                	je     428928 <ERR_peek_last_error_line+0x78>
  4288ee:	8b 84 90 10 02 00 00 	mov    0x210(%rax,%rdx,4),%eax
  4288f5:	48 89 33             	mov    %rsi,(%rbx)
  4288f8:	89 45 00             	mov    %eax,0x0(%rbp)
  4288fb:	48 83 c4 08          	add    $0x8,%rsp
  4288ff:	48 89 c8             	mov    %rcx,%rax
  428902:	5b                   	pop    %rbx
  428903:	5d                   	pop    %rbp
  428904:	c3                   	retq   
  428905:	0f 1f 00             	nopl   (%rax)
  428908:	48 89 c8             	mov    %rcx,%rax
  42890b:	48 83 c4 08          	add    $0x8,%rsp
  42890f:	5b                   	pop    %rbx
  428910:	5d                   	pop    %rbp
  428911:	c3                   	retq   
  428912:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  428918:	48 83 c4 08          	add    $0x8,%rsp
  42891c:	31 c0                	xor    %eax,%eax
  42891e:	5b                   	pop    %rbx
  42891f:	5d                   	pop    %rbp
  428920:	c3                   	retq   
  428921:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  428928:	48 c7 03 e7 04 44 00 	movq   $0x4404e7,(%rbx)
  42892f:	48 89 c8             	mov    %rcx,%rax
  428932:	c7 45 00 00 00 00 00 	movl   $0x0,0x0(%rbp)
  428939:	eb d0                	jmp    42890b <ERR_peek_last_error_line+0x5b>
  42893b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000428940 <ERR_peek_error_line>:
  428940:	55                   	push   %rbp
  428941:	53                   	push   %rbx
  428942:	48 89 f5             	mov    %rsi,%rbp
  428945:	48 89 fb             	mov    %rdi,%rbx
  428948:	48 83 ec 08          	sub    $0x8,%rsp
  42894c:	e8 5f f7 ff ff       	callq  4280b0 <ERR_get_state>
  428951:	8b 90 54 02 00 00    	mov    0x254(%rax),%edx
  428957:	3b 90 50 02 00 00    	cmp    0x250(%rax),%edx
  42895d:	74 61                	je     4289c0 <ERR_peek_error_line+0x80>
  42895f:	83 c2 01             	add    $0x1,%edx
  428962:	89 d1                	mov    %edx,%ecx
  428964:	c1 f9 1f             	sar    $0x1f,%ecx
  428967:	c1 e9 1c             	shr    $0x1c,%ecx
  42896a:	01 ca                	add    %ecx,%edx
  42896c:	83 e2 0f             	and    $0xf,%edx
  42896f:	29 ca                	sub    %ecx,%edx
  428971:	48 85 db             	test   %rbx,%rbx
  428974:	48 63 d2             	movslq %edx,%rdx
  428977:	48 8d 34 d0          	lea    (%rax,%rdx,8),%rsi
  42897b:	48 8b 4e 50          	mov    0x50(%rsi),%rcx
  42897f:	74 2f                	je     4289b0 <ERR_peek_error_line+0x70>
  428981:	48 85 ed             	test   %rbp,%rbp
  428984:	74 2a                	je     4289b0 <ERR_peek_error_line+0x70>
  428986:	48 8b b6 90 01 00 00 	mov    0x190(%rsi),%rsi
  42898d:	48 85 f6             	test   %rsi,%rsi
  428990:	74 3e                	je     4289d0 <ERR_peek_error_line+0x90>
  428992:	8b 84 90 10 02 00 00 	mov    0x210(%rax,%rdx,4),%eax
  428999:	48 89 33             	mov    %rsi,(%rbx)
  42899c:	89 45 00             	mov    %eax,0x0(%rbp)
  42899f:	48 83 c4 08          	add    $0x8,%rsp
  4289a3:	48 89 c8             	mov    %rcx,%rax
  4289a6:	5b                   	pop    %rbx
  4289a7:	5d                   	pop    %rbp
  4289a8:	c3                   	retq   
  4289a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  4289b0:	48 89 c8             	mov    %rcx,%rax
  4289b3:	48 83 c4 08          	add    $0x8,%rsp
  4289b7:	5b                   	pop    %rbx
  4289b8:	5d                   	pop    %rbp
  4289b9:	c3                   	retq   
  4289ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  4289c0:	48 83 c4 08          	add    $0x8,%rsp
  4289c4:	31 c0                	xor    %eax,%eax
  4289c6:	5b                   	pop    %rbx
  4289c7:	5d                   	pop    %rbp
  4289c8:	c3                   	retq   
  4289c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  4289d0:	48 c7 03 e7 04 44 00 	movq   $0x4404e7,(%rbx)
  4289d7:	48 89 c8             	mov    %rcx,%rax
  4289da:	c7 45 00 00 00 00 00 	movl   $0x0,0x0(%rbp)
  4289e1:	eb d0                	jmp    4289b3 <ERR_peek_error_line+0x73>
  4289e3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  4289ea:	84 00 00 00 00 00 

00000000004289f0 <ERR_peek_last_error_line_data>:
  4289f0:	41 55                	push   %r13
  4289f2:	41 54                	push   %r12
  4289f4:	49 89 f5             	mov    %rsi,%r13
  4289f7:	55                   	push   %rbp
  4289f8:	53                   	push   %rbx
  4289f9:	49 89 fc             	mov    %rdi,%r12
  4289fc:	48 89 d3             	mov    %rdx,%rbx
  4289ff:	48 89 cd             	mov    %rcx,%rbp
  428a02:	48 83 ec 08          	sub    $0x8,%rsp
  428a06:	e8 a5 f6 ff ff       	callq  4280b0 <ERR_get_state>
  428a0b:	4c 63 80 50 02 00 00 	movslq 0x250(%rax),%r8
  428a12:	44 39 80 54 02 00 00 	cmp    %r8d,0x254(%rax)
  428a19:	74 65                	je     428a80 <ERR_peek_last_error_line_data+0x90>
  428a1b:	4a 8d 0c c0          	lea    (%rax,%r8,8),%rcx
  428a1f:	4d 85 e4             	test   %r12,%r12
  428a22:	48 8b 51 50          	mov    0x50(%rcx),%rdx
  428a26:	74 25                	je     428a4d <ERR_peek_last_error_line_data+0x5d>
  428a28:	4d 85 ed             	test   %r13,%r13
  428a2b:	74 20                	je     428a4d <ERR_peek_last_error_line_data+0x5d>
  428a2d:	48 8b b1 90 01 00 00 	mov    0x190(%rcx),%rsi
  428a34:	48 85 f6             	test   %rsi,%rsi
  428a37:	0f 84 83 00 00 00    	je     428ac0 <ERR_peek_last_error_line_data+0xd0>
  428a3d:	49 89 34 24          	mov    %rsi,(%r12)
  428a41:	42 8b b4 80 10 02 00 	mov    0x210(%rax,%r8,4),%esi
  428a48:	00 
  428a49:	41 89 75 00          	mov    %esi,0x0(%r13)
  428a4d:	48 85 db             	test   %rbx,%rbx
  428a50:	74 4e                	je     428aa0 <ERR_peek_last_error_line_data+0xb0>
  428a52:	48 8b 89 d0 00 00 00 	mov    0xd0(%rcx),%rcx
  428a59:	48 85 c9             	test   %rcx,%rcx
  428a5c:	74 32                	je     428a90 <ERR_peek_last_error_line_data+0xa0>
  428a5e:	48 85 ed             	test   %rbp,%rbp
  428a61:	48 89 0b             	mov    %rcx,(%rbx)
  428a64:	74 3a                	je     428aa0 <ERR_peek_last_error_line_data+0xb0>
  428a66:	42 8b 84 80 50 01 00 	mov    0x150(%rax,%r8,4),%eax
  428a6d:	00 
  428a6e:	89 45 00             	mov    %eax,0x0(%rbp)
  428a71:	48 89 d0             	mov    %rdx,%rax
  428a74:	48 83 c4 08          	add    $0x8,%rsp
  428a78:	5b                   	pop    %rbx
  428a79:	5d                   	pop    %rbp
  428a7a:	41 5c                	pop    %r12
  428a7c:	41 5d                	pop    %r13
  428a7e:	c3                   	retq   
  428a7f:	90                   	nop
  428a80:	48 83 c4 08          	add    $0x8,%rsp
  428a84:	31 c0                	xor    %eax,%eax
  428a86:	5b                   	pop    %rbx
  428a87:	5d                   	pop    %rbp
  428a88:	41 5c                	pop    %r12
  428a8a:	41 5d                	pop    %r13
  428a8c:	c3                   	retq   
  428a8d:	0f 1f 00             	nopl   (%rax)
  428a90:	48 85 ed             	test   %rbp,%rbp
  428a93:	48 c7 03 47 e8 43 00 	movq   $0x43e847,(%rbx)
  428a9a:	75 14                	jne    428ab0 <ERR_peek_last_error_line_data+0xc0>
  428a9c:	0f 1f 40 00          	nopl   0x0(%rax)
  428aa0:	48 83 c4 08          	add    $0x8,%rsp
  428aa4:	48 89 d0             	mov    %rdx,%rax
  428aa7:	5b                   	pop    %rbx
  428aa8:	5d                   	pop    %rbp
  428aa9:	41 5c                	pop    %r12
  428aab:	41 5d                	pop    %r13
  428aad:	c3                   	retq   
  428aae:	66 90                	xchg   %ax,%ax
  428ab0:	c7 45 00 00 00 00 00 	movl   $0x0,0x0(%rbp)
  428ab7:	48 89 d0             	mov    %rdx,%rax
  428aba:	eb b8                	jmp    428a74 <ERR_peek_last_error_line_data+0x84>
  428abc:	0f 1f 40 00          	nopl   0x0(%rax)
  428ac0:	49 c7 04 24 e7 04 44 	movq   $0x4404e7,(%r12)
  428ac7:	00 
  428ac8:	41 c7 45 00 00 00 00 	movl   $0x0,0x0(%r13)
  428acf:	00 
  428ad0:	e9 78 ff ff ff       	jmpq   428a4d <ERR_peek_last_error_line_data+0x5d>
  428ad5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  428adc:	00 00 00 00 

0000000000428ae0 <ERR_peek_error_line_data>:
  428ae0:	41 55                	push   %r13
  428ae2:	41 54                	push   %r12
  428ae4:	49 89 f5             	mov    %rsi,%r13
  428ae7:	55                   	push   %rbp
  428ae8:	53                   	push   %rbx
  428ae9:	49 89 fc             	mov    %rdi,%r12
  428aec:	48 89 d3             	mov    %rdx,%rbx
  428aef:	48 89 cd             	mov    %rcx,%rbp
  428af2:	48 83 ec 08          	sub    $0x8,%rsp
  428af6:	e8 b5 f5 ff ff       	callq  4280b0 <ERR_get_state>
  428afb:	44 8b 80 54 02 00 00 	mov    0x254(%rax),%r8d
  428b02:	44 3b 80 50 02 00 00 	cmp    0x250(%rax),%r8d
  428b09:	0f 84 81 00 00 00    	je     428b90 <ERR_peek_error_line_data+0xb0>
  428b0f:	41 83 c0 01          	add    $0x1,%r8d
  428b13:	44 89 c2             	mov    %r8d,%edx
  428b16:	c1 fa 1f             	sar    $0x1f,%edx
  428b19:	c1 ea 1c             	shr    $0x1c,%edx
  428b1c:	41 01 d0             	add    %edx,%r8d
  428b1f:	41 83 e0 0f          	and    $0xf,%r8d
  428b23:	41 29 d0             	sub    %edx,%r8d
  428b26:	4d 85 e4             	test   %r12,%r12
  428b29:	4d 63 c0             	movslq %r8d,%r8
  428b2c:	4a 8d 0c c0          	lea    (%rax,%r8,8),%rcx
  428b30:	48 8b 51 50          	mov    0x50(%rcx),%rdx
  428b34:	74 25                	je     428b5b <ERR_peek_error_line_data+0x7b>
  428b36:	4d 85 ed             	test   %r13,%r13
  428b39:	74 20                	je     428b5b <ERR_peek_error_line_data+0x7b>
  428b3b:	48 8b b1 90 01 00 00 	mov    0x190(%rcx),%rsi
  428b42:	48 85 f6             	test   %rsi,%rsi
  428b45:	0f 84 85 00 00 00    	je     428bd0 <ERR_peek_error_line_data+0xf0>
  428b4b:	49 89 34 24          	mov    %rsi,(%r12)
  428b4f:	42 8b b4 80 10 02 00 	mov    0x210(%rax,%r8,4),%esi
  428b56:	00 
  428b57:	41 89 75 00          	mov    %esi,0x0(%r13)
  428b5b:	48 85 db             	test   %rbx,%rbx
  428b5e:	74 50                	je     428bb0 <ERR_peek_error_line_data+0xd0>
  428b60:	48 8b 89 d0 00 00 00 	mov    0xd0(%rcx),%rcx
  428b67:	48 85 c9             	test   %rcx,%rcx
  428b6a:	74 34                	je     428ba0 <ERR_peek_error_line_data+0xc0>
  428b6c:	48 85 ed             	test   %rbp,%rbp
  428b6f:	48 89 0b             	mov    %rcx,(%rbx)
  428b72:	74 3c                	je     428bb0 <ERR_peek_error_line_data+0xd0>
  428b74:	42 8b 84 80 50 01 00 	mov    0x150(%rax,%r8,4),%eax
  428b7b:	00 
  428b7c:	89 45 00             	mov    %eax,0x0(%rbp)
  428b7f:	48 89 d0             	mov    %rdx,%rax
  428b82:	48 83 c4 08          	add    $0x8,%rsp
  428b86:	5b                   	pop    %rbx
  428b87:	5d                   	pop    %rbp
  428b88:	41 5c                	pop    %r12
  428b8a:	41 5d                	pop    %r13
  428b8c:	c3                   	retq   
  428b8d:	0f 1f 00             	nopl   (%rax)
  428b90:	48 83 c4 08          	add    $0x8,%rsp
  428b94:	31 c0                	xor    %eax,%eax
  428b96:	5b                   	pop    %rbx
  428b97:	5d                   	pop    %rbp
  428b98:	41 5c                	pop    %r12
  428b9a:	41 5d                	pop    %r13
  428b9c:	c3                   	retq   
  428b9d:	0f 1f 00             	nopl   (%rax)
  428ba0:	48 85 ed             	test   %rbp,%rbp
  428ba3:	48 c7 03 47 e8 43 00 	movq   $0x43e847,(%rbx)
  428baa:	75 14                	jne    428bc0 <ERR_peek_error_line_data+0xe0>
  428bac:	0f 1f 40 00          	nopl   0x0(%rax)
  428bb0:	48 83 c4 08          	add    $0x8,%rsp
  428bb4:	48 89 d0             	mov    %rdx,%rax
  428bb7:	5b                   	pop    %rbx
  428bb8:	5d                   	pop    %rbp
  428bb9:	41 5c                	pop    %r12
  428bbb:	41 5d                	pop    %r13
  428bbd:	c3                   	retq   
  428bbe:	66 90                	xchg   %ax,%ax
  428bc0:	c7 45 00 00 00 00 00 	movl   $0x0,0x0(%rbp)
  428bc7:	48 89 d0             	mov    %rdx,%rax
  428bca:	eb b6                	jmp    428b82 <ERR_peek_error_line_data+0xa2>
  428bcc:	0f 1f 40 00          	nopl   0x0(%rax)
  428bd0:	49 c7 04 24 e7 04 44 	movq   $0x4404e7,(%r12)
  428bd7:	00 
  428bd8:	41 c7 45 00 00 00 00 	movl   $0x0,0x0(%r13)
  428bdf:	00 
  428be0:	e9 76 ff ff ff       	jmpq   428b5b <ERR_peek_error_line_data+0x7b>
  428be5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  428bec:	00 00 00 00 

0000000000428bf0 <ERR_get_next_error_library>:
  428bf0:	48 8b 05 21 1d 23 00 	mov    0x231d21(%rip),%rax        # 65a918 <err_fns>
  428bf7:	48 85 c0             	test   %rax,%rax
  428bfa:	74 0c                	je     428c08 <ERR_get_next_error_library+0x18>
  428bfc:	48 8b 40 50          	mov    0x50(%rax),%rax
  428c00:	ff e0                	jmpq   *%rax
  428c02:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  428c08:	48 83 ec 08          	sub    $0x8,%rsp
  428c0c:	b9 27 01 00 00       	mov    $0x127,%ecx
  428c11:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  428c16:	be 01 00 00 00       	mov    $0x1,%esi
  428c1b:	bf 09 00 00 00       	mov    $0x9,%edi
  428c20:	e8 eb c1 ff ff       	callq  424e10 <CRYPTO_lock>
  428c25:	48 83 3d eb 1c 23 00 	cmpq   $0x0,0x231ceb(%rip)        # 65a918 <err_fns>
  428c2c:	00 
  428c2d:	74 31                	je     428c60 <ERR_get_next_error_library+0x70>
  428c2f:	b9 2a 01 00 00       	mov    $0x12a,%ecx
  428c34:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  428c39:	be 01 00 00 00       	mov    $0x1,%esi
  428c3e:	bf 0a 00 00 00       	mov    $0xa,%edi
  428c43:	e8 c8 c1 ff ff       	callq  424e10 <CRYPTO_lock>
  428c48:	48 8b 05 c9 1c 23 00 	mov    0x231cc9(%rip),%rax        # 65a918 <err_fns>
  428c4f:	48 8b 40 50          	mov    0x50(%rax),%rax
  428c53:	48 83 c4 08          	add    $0x8,%rsp
  428c57:	ff e0                	jmpq   *%rax
  428c59:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  428c60:	48 c7 05 ad 1c 23 00 	movq   $0x43e740,0x231cad(%rip)        # 65a918 <err_fns>
  428c67:	40 e7 43 00 
  428c6b:	eb c2                	jmp    428c2f <ERR_get_next_error_library+0x3f>
  428c6d:	0f 1f 00             	nopl   (%rax)

0000000000428c70 <ERR_set_error_data>:
  428c70:	41 55                	push   %r13
  428c72:	41 54                	push   %r12
  428c74:	41 89 f5             	mov    %esi,%r13d
  428c77:	55                   	push   %rbp
  428c78:	53                   	push   %rbx
  428c79:	49 89 fc             	mov    %rdi,%r12
  428c7c:	48 83 ec 18          	sub    $0x18,%rsp
  428c80:	e8 2b f4 ff ff       	callq  4280b0 <ERR_get_state>
  428c85:	8b 90 50 02 00 00    	mov    0x250(%rax),%edx
  428c8b:	b9 0f 00 00 00       	mov    $0xf,%ecx
  428c90:	85 d2                	test   %edx,%edx
  428c92:	0f 44 d1             	cmove  %ecx,%edx
  428c95:	48 63 da             	movslq %edx,%rbx
  428c98:	48 8d 2c d8          	lea    (%rax,%rbx,8),%rbp
  428c9c:	48 8b bd d0 00 00 00 	mov    0xd0(%rbp),%rdi
  428ca3:	48 85 ff             	test   %rdi,%rdi
  428ca6:	74 19                	je     428cc1 <ERR_set_error_data+0x51>
  428ca8:	f6 84 98 50 01 00 00 	testb  $0x1,0x150(%rax,%rbx,4)
  428caf:	01 
  428cb0:	74 0f                	je     428cc1 <ERR_set_error_data+0x51>
  428cb2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  428cb7:	e8 a4 ca ff ff       	callq  425760 <CRYPTO_free>
  428cbc:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  428cc1:	4c 89 a5 d0 00 00 00 	mov    %r12,0xd0(%rbp)
  428cc8:	44 89 ac 98 50 01 00 	mov    %r13d,0x150(%rax,%rbx,4)
  428ccf:	00 
  428cd0:	48 83 c4 18          	add    $0x18,%rsp
  428cd4:	5b                   	pop    %rbx
  428cd5:	5d                   	pop    %rbp
  428cd6:	41 5c                	pop    %r12
  428cd8:	41 5d                	pop    %r13
  428cda:	c3                   	retq   
  428cdb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000428ce0 <ERR_add_error_vdata>:
  428ce0:	41 57                	push   %r15
  428ce2:	41 56                	push   %r14
  428ce4:	ba 38 04 00 00       	mov    $0x438,%edx
  428ce9:	41 55                	push   %r13
  428ceb:	41 54                	push   %r12
  428ced:	55                   	push   %rbp
  428cee:	53                   	push   %rbx
  428cef:	48 89 f5             	mov    %rsi,%rbp
  428cf2:	89 fb                	mov    %edi,%ebx
  428cf4:	be c9 e2 43 00       	mov    $0x43e2c9,%esi
  428cf9:	48 83 ec 18          	sub    $0x18,%rsp
  428cfd:	89 7c 24 08          	mov    %edi,0x8(%rsp)
  428d01:	bf 51 00 00 00       	mov    $0x51,%edi
  428d06:	e8 f5 c6 ff ff       	callq  425400 <CRYPTO_malloc>
  428d0b:	48 85 c0             	test   %rax,%rax
  428d0e:	49 89 c6             	mov    %rax,%r14
  428d11:	0f 84 ec 00 00 00    	je     428e03 <ERR_add_error_vdata+0x123>
  428d17:	85 db                	test   %ebx,%ebx
  428d19:	c6 00 00             	movb   $0x0,(%rax)
  428d1c:	0f 8e 8e 00 00 00    	jle    428db0 <ERR_add_error_vdata+0xd0>
  428d22:	41 bd 50 00 00 00    	mov    $0x50,%r13d
  428d28:	31 db                	xor    %ebx,%ebx
  428d2a:	45 31 e4             	xor    %r12d,%r12d
  428d2d:	eb 66                	jmp    428d95 <ERR_add_error_vdata+0xb5>
  428d2f:	90                   	nop
  428d30:	89 c2                	mov    %eax,%edx
  428d32:	48 03 55 10          	add    0x10(%rbp),%rdx
  428d36:	83 c0 08             	add    $0x8,%eax
  428d39:	89 45 00             	mov    %eax,0x0(%rbp)
  428d3c:	4c 8b 3a             	mov    (%rdx),%r15
  428d3f:	4d 85 ff             	test   %r15,%r15
  428d42:	74 46                	je     428d8a <ERR_add_error_vdata+0xaa>
  428d44:	4c 89 ff             	mov    %r15,%rdi
  428d47:	e8 64 e0 fd ff       	callq  406db0 <strlen@plt>
  428d4c:	01 c3                	add    %eax,%ebx
  428d4e:	44 39 eb             	cmp    %r13d,%ebx
  428d51:	7e 25                	jle    428d78 <ERR_add_error_vdata+0x98>
  428d53:	8d 73 15             	lea    0x15(%rbx),%esi
  428d56:	b9 47 04 00 00       	mov    $0x447,%ecx
  428d5b:	ba c9 e2 43 00       	mov    $0x43e2c9,%edx
  428d60:	4c 89 f7             	mov    %r14,%rdi
  428d63:	44 8d 6b 14          	lea    0x14(%rbx),%r13d
  428d67:	e8 c4 c7 ff ff       	callq  425530 <CRYPTO_realloc>
  428d6c:	48 85 c0             	test   %rax,%rax
  428d6f:	0f 84 a3 00 00 00    	je     428e18 <ERR_add_error_vdata+0x138>
  428d75:	49 89 c6             	mov    %rax,%r14
  428d78:	49 63 d5             	movslq %r13d,%rdx
  428d7b:	4c 89 fe             	mov    %r15,%rsi
  428d7e:	4c 89 f7             	mov    %r14,%rdi
  428d81:	48 83 c2 01          	add    $0x1,%rdx
  428d85:	e8 36 d0 ff ff       	callq  425dc0 <BUF_strlcat>
  428d8a:	41 83 c4 01          	add    $0x1,%r12d
  428d8e:	44 3b 64 24 08       	cmp    0x8(%rsp),%r12d
  428d93:	74 1b                	je     428db0 <ERR_add_error_vdata+0xd0>
  428d95:	8b 45 00             	mov    0x0(%rbp),%eax
  428d98:	83 f8 30             	cmp    $0x30,%eax
  428d9b:	72 93                	jb     428d30 <ERR_add_error_vdata+0x50>
  428d9d:	48 8b 55 08          	mov    0x8(%rbp),%rdx
  428da1:	48 8d 42 08          	lea    0x8(%rdx),%rax
  428da5:	48 89 45 08          	mov    %rax,0x8(%rbp)
  428da9:	eb 91                	jmp    428d3c <ERR_add_error_vdata+0x5c>
  428dab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  428db0:	e8 fb f2 ff ff       	callq  4280b0 <ERR_get_state>
  428db5:	8b 90 50 02 00 00    	mov    0x250(%rax),%edx
  428dbb:	b9 0f 00 00 00       	mov    $0xf,%ecx
  428dc0:	85 d2                	test   %edx,%edx
  428dc2:	0f 44 d1             	cmove  %ecx,%edx
  428dc5:	48 63 da             	movslq %edx,%rbx
  428dc8:	48 8d 2c d8          	lea    (%rax,%rbx,8),%rbp
  428dcc:	48 8b bd d0 00 00 00 	mov    0xd0(%rbp),%rdi
  428dd3:	48 85 ff             	test   %rdi,%rdi
  428dd6:	74 19                	je     428df1 <ERR_add_error_vdata+0x111>
  428dd8:	f6 84 98 50 01 00 00 	testb  $0x1,0x150(%rax,%rbx,4)
  428ddf:	01 
  428de0:	74 0f                	je     428df1 <ERR_add_error_vdata+0x111>
  428de2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  428de7:	e8 74 c9 ff ff       	callq  425760 <CRYPTO_free>
  428dec:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  428df1:	4c 89 b5 d0 00 00 00 	mov    %r14,0xd0(%rbp)
  428df8:	c7 84 98 50 01 00 00 	movl   $0x3,0x150(%rax,%rbx,4)
  428dff:	03 00 00 00 
  428e03:	48 83 c4 18          	add    $0x18,%rsp
  428e07:	5b                   	pop    %rbx
  428e08:	5d                   	pop    %rbp
  428e09:	41 5c                	pop    %r12
  428e0b:	41 5d                	pop    %r13
  428e0d:	41 5e                	pop    %r14
  428e0f:	41 5f                	pop    %r15
  428e11:	c3                   	retq   
  428e12:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  428e18:	48 83 c4 18          	add    $0x18,%rsp
  428e1c:	4c 89 f7             	mov    %r14,%rdi
  428e1f:	5b                   	pop    %rbx
  428e20:	5d                   	pop    %rbp
  428e21:	41 5c                	pop    %r12
  428e23:	41 5d                	pop    %r13
  428e25:	41 5e                	pop    %r14
  428e27:	41 5f                	pop    %r15
  428e29:	e9 32 c9 ff ff       	jmpq   425760 <CRYPTO_free>
  428e2e:	66 90                	xchg   %ax,%ax

0000000000428e30 <ERR_add_error_data>:
  428e30:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
  428e37:	84 c0                	test   %al,%al
  428e39:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  428e3e:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  428e43:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  428e48:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
  428e4d:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
  428e52:	74 37                	je     428e8b <ERR_add_error_data+0x5b>
  428e54:	0f 29 44 24 50       	movaps %xmm0,0x50(%rsp)
  428e59:	0f 29 4c 24 60       	movaps %xmm1,0x60(%rsp)
  428e5e:	0f 29 54 24 70       	movaps %xmm2,0x70(%rsp)
  428e63:	0f 29 9c 24 80 00 00 	movaps %xmm3,0x80(%rsp)
  428e6a:	00 
  428e6b:	0f 29 a4 24 90 00 00 	movaps %xmm4,0x90(%rsp)
  428e72:	00 
  428e73:	0f 29 ac 24 a0 00 00 	movaps %xmm5,0xa0(%rsp)
  428e7a:	00 
  428e7b:	0f 29 b4 24 b0 00 00 	movaps %xmm6,0xb0(%rsp)
  428e82:	00 
  428e83:	0f 29 bc 24 c0 00 00 	movaps %xmm7,0xc0(%rsp)
  428e8a:	00 
  428e8b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  428e92:	00 00 
  428e94:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  428e99:	31 c0                	xor    %eax,%eax
  428e9b:	48 8d 84 24 e0 00 00 	lea    0xe0(%rsp),%rax
  428ea2:	00 
  428ea3:	48 89 e6             	mov    %rsp,%rsi
  428ea6:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  428eab:	48 8d 44 24 20       	lea    0x20(%rsp),%rax
  428eb0:	c7 04 24 08 00 00 00 	movl   $0x8,(%rsp)
  428eb7:	c7 44 24 04 30 00 00 	movl   $0x30,0x4(%rsp)
  428ebe:	00 
  428ebf:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  428ec4:	e8 17 fe ff ff       	callq  428ce0 <ERR_add_error_vdata>
  428ec9:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  428ece:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  428ed5:	00 00 
  428ed7:	75 08                	jne    428ee1 <ERR_add_error_data+0xb1>
  428ed9:	48 81 c4 d8 00 00 00 	add    $0xd8,%rsp
  428ee0:	c3                   	retq   
  428ee1:	e8 da df fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  428ee6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  428eed:	00 00 00 

0000000000428ef0 <ERR_set_mark>:
  428ef0:	48 83 ec 08          	sub    $0x8,%rsp
  428ef4:	e8 b7 f1 ff ff       	callq  4280b0 <ERR_get_state>
  428ef9:	48 63 90 50 02 00 00 	movslq 0x250(%rax),%rdx
  428f00:	39 90 54 02 00 00    	cmp    %edx,0x254(%rax)
  428f06:	74 18                	je     428f20 <ERR_set_mark+0x30>
  428f08:	83 4c 90 10 01       	orl    $0x1,0x10(%rax,%rdx,4)
  428f0d:	b8 01 00 00 00       	mov    $0x1,%eax
  428f12:	48 83 c4 08          	add    $0x8,%rsp
  428f16:	c3                   	retq   
  428f17:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  428f1e:	00 00 
  428f20:	31 c0                	xor    %eax,%eax
  428f22:	48 83 c4 08          	add    $0x8,%rsp
  428f26:	c3                   	retq   
  428f27:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  428f2e:	00 00 

0000000000428f30 <ERR_pop_to_mark>:
  428f30:	53                   	push   %rbx
  428f31:	e8 7a f1 ff ff       	callq  4280b0 <ERR_get_state>
  428f36:	48 89 c3             	mov    %rax,%rbx
  428f39:	8b 90 50 02 00 00    	mov    0x250(%rax),%edx
  428f3f:	44 8b 80 54 02 00 00 	mov    0x254(%rax),%r8d
  428f46:	eb 3e                	jmp    428f86 <ERR_pop_to_mark+0x56>
  428f48:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  428f4f:	00 
  428f50:	48 8d 0c 83          	lea    (%rbx,%rax,4),%rcx
  428f54:	83 ea 01             	sub    $0x1,%edx
  428f57:	83 fa ff             	cmp    $0xffffffff,%edx
  428f5a:	c7 81 50 01 00 00 00 	movl   $0x0,0x150(%rcx)
  428f61:	00 00 00 
  428f64:	48 c7 84 c3 90 01 00 	movq   $0x0,0x190(%rbx,%rax,8)
  428f6b:	00 00 00 00 00 
  428f70:	c7 81 10 02 00 00 ff 	movl   $0xffffffff,0x210(%rcx)
  428f77:	ff ff ff 
  428f7a:	89 93 50 02 00 00    	mov    %edx,0x250(%rbx)
  428f80:	0f 84 8a 00 00 00    	je     429010 <ERR_pop_to_mark+0xe0>
  428f86:	41 39 d0             	cmp    %edx,%r8d
  428f89:	74 65                	je     428ff0 <ERR_pop_to_mark+0xc0>
  428f8b:	48 63 c2             	movslq %edx,%rax
  428f8e:	48 8d 0c 83          	lea    (%rbx,%rax,4),%rcx
  428f92:	8b 71 10             	mov    0x10(%rcx),%esi
  428f95:	40 f6 c6 01          	test   $0x1,%sil
  428f99:	75 5d                	jne    428ff8 <ERR_pop_to_mark+0xc8>
  428f9b:	48 8d 34 c3          	lea    (%rbx,%rax,8),%rsi
  428f9f:	c7 41 10 00 00 00 00 	movl   $0x0,0x10(%rcx)
  428fa6:	48 8b be d0 00 00 00 	mov    0xd0(%rsi),%rdi
  428fad:	48 c7 46 50 00 00 00 	movq   $0x0,0x50(%rsi)
  428fb4:	00 
  428fb5:	48 85 ff             	test   %rdi,%rdi
  428fb8:	74 96                	je     428f50 <ERR_pop_to_mark+0x20>
  428fba:	f6 81 50 01 00 00 01 	testb  $0x1,0x150(%rcx)
  428fc1:	74 8d                	je     428f50 <ERR_pop_to_mark+0x20>
  428fc3:	e8 98 c7 ff ff       	callq  425760 <CRYPTO_free>
  428fc8:	48 63 83 50 02 00 00 	movslq 0x250(%rbx),%rax
  428fcf:	44 8b 83 54 02 00 00 	mov    0x254(%rbx),%r8d
  428fd6:	48 89 c2             	mov    %rax,%rdx
  428fd9:	48 c7 84 c3 d0 00 00 	movq   $0x0,0xd0(%rbx,%rax,8)
  428fe0:	00 00 00 00 00 
  428fe5:	e9 66 ff ff ff       	jmpq   428f50 <ERR_pop_to_mark+0x20>
  428fea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  428ff0:	31 c0                	xor    %eax,%eax
  428ff2:	5b                   	pop    %rbx
  428ff3:	c3                   	retq   
  428ff4:	0f 1f 40 00          	nopl   0x0(%rax)
  428ff8:	83 e6 fe             	and    $0xfffffffe,%esi
  428ffb:	89 74 83 10          	mov    %esi,0x10(%rbx,%rax,4)
  428fff:	b8 01 00 00 00       	mov    $0x1,%eax
  429004:	5b                   	pop    %rbx
  429005:	c3                   	retq   
  429006:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  42900d:	00 00 00 
  429010:	c7 83 50 02 00 00 0f 	movl   $0xf,0x250(%rbx)
  429017:	00 00 00 
  42901a:	ba 0f 00 00 00       	mov    $0xf,%edx
  42901f:	e9 62 ff ff ff       	jmpq   428f86 <ERR_pop_to_mark+0x56>
  429024:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  42902b:	00 00 00 
  42902e:	66 90                	xchg   %ax,%ax

0000000000429030 <mem_LHASH_COMP>:
  429030:	48 8b 07             	mov    (%rdi),%rax
  429033:	48 2b 06             	sub    (%rsi),%rax
  429036:	c3                   	retq   
  429037:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  42903e:	00 00 

0000000000429040 <mem_LHASH_HASH>:
  429040:	48 8b 17             	mov    (%rdi),%rdx
  429043:	48 89 d6             	mov    %rdx,%rsi
  429046:	48 c1 ee 0e          	shr    $0xe,%rsi
  42904a:	48 8d 04 f5 00 00 00 	lea    0x0(,%rsi,8),%rax
  429051:	00 
  429052:	48 69 ca bb 45 00 00 	imul   $0x45bb,%rdx,%rcx
  429059:	48 c1 ea 04          	shr    $0x4,%rdx
  42905d:	48 29 f0             	sub    %rsi,%rax
  429060:	48 8d 3c 95 00 00 00 	lea    0x0(,%rdx,4),%rdi
  429067:	00 
  429068:	48 89 c6             	mov    %rax,%rsi
  42906b:	48 89 d0             	mov    %rdx,%rax
  42906e:	48 c1 e0 08          	shl    $0x8,%rax
  429072:	48 29 f8             	sub    %rdi,%rax
  429075:	48 29 d0             	sub    %rdx,%rax
  429078:	48 8d 04 06          	lea    (%rsi,%rax,1),%rax
  42907c:	48 01 c8             	add    %rcx,%rax
  42907f:	c3                   	retq   

0000000000429080 <cb_leak_LHASH_DOALL_ARG>:
  429080:	4c 8b 57 10          	mov    0x10(%rdi),%r10
  429084:	48 89 f8             	mov    %rdi,%rax
  429087:	8b 4f 08             	mov    0x8(%rdi),%ecx
  42908a:	8b 57 18             	mov    0x18(%rdi),%edx
  42908d:	4c 8b 0e             	mov    (%rsi),%r9
  429090:	48 8b 7f 30          	mov    0x30(%rdi),%rdi
  429094:	4c 8b 00             	mov    (%rax),%r8
  429097:	4c 89 d6             	mov    %r10,%rsi
  42909a:	41 ff e1             	jmpq   *%r9
  42909d:	0f 1f 00             	nopl   (%rax)

00000000004290a0 <app_info_LHASH_COMP>:
  4290a0:	e9 ab ba ff ff       	jmpq   424b50 <CRYPTO_THREADID_cmp>
  4290a5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  4290ac:	00 00 00 00 

00000000004290b0 <app_info_LHASH_HASH>:
  4290b0:	48 83 ec 08          	sub    $0x8,%rsp
  4290b4:	e8 b7 ba ff ff       	callq  424b70 <CRYPTO_THREADID_hash>
  4290b9:	48 89 c2             	mov    %rax,%rdx
  4290bc:	48 83 c4 08          	add    $0x8,%rsp
  4290c0:	48 c1 ea 0e          	shr    $0xe,%rdx
  4290c4:	48 8d 34 d5 00 00 00 	lea    0x0(,%rdx,8),%rsi
  4290cb:	00 
  4290cc:	48 69 c8 bb 45 00 00 	imul   $0x45bb,%rax,%rcx
  4290d3:	48 c1 e8 04          	shr    $0x4,%rax
  4290d7:	48 29 d6             	sub    %rdx,%rsi
  4290da:	48 8d 3c 85 00 00 00 	lea    0x0(,%rax,4),%rdi
  4290e1:	00 
  4290e2:	48 89 c2             	mov    %rax,%rdx
  4290e5:	48 c1 e2 08          	shl    $0x8,%rdx
  4290e9:	48 29 fa             	sub    %rdi,%rdx
  4290ec:	48 29 c2             	sub    %rax,%rdx
  4290ef:	48 8d 04 16          	lea    (%rsi,%rdx,1),%rax
  4290f3:	48 01 c8             	add    %rcx,%rax
  4290f6:	c3                   	retq   
  4290f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4290fe:	00 00 

0000000000429100 <print_leak_doall_arg>:
  429100:	41 57                	push   %r15
  429102:	41 56                	push   %r14
  429104:	49 89 f6             	mov    %rsi,%r14
  429107:	41 55                	push   %r13
  429109:	41 54                	push   %r12
  42910b:	55                   	push   %rbp
  42910c:	53                   	push   %rbx
  42910d:	48 89 fb             	mov    %rdi,%rbx
  429110:	48 81 ec 38 04 00 00 	sub    $0x438,%rsp
  429117:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  42911e:	00 00 
  429120:	48 89 84 24 28 04 00 	mov    %rax,0x428(%rsp)
  429127:	00 
  429128:	31 c0                	xor    %eax,%eax
  42912a:	48 8b 06             	mov    (%rsi),%rax
  42912d:	48 39 07             	cmp    %rax,(%rdi)
  429130:	0f 84 0a 02 00 00    	je     429340 <print_leak_doall_arg+0x240>
  429136:	f6 05 fb 17 23 00 01 	testb  $0x1,0x2317fb(%rip)        # 65a938 <options>
  42913d:	0f 85 2d 02 00 00    	jne    429370 <print_leak_doall_arg+0x270>
  429143:	48 8d 6c 24 20       	lea    0x20(%rsp),%rbp
  429148:	be 00 04 00 00       	mov    $0x400,%esi
  42914d:	49 89 ec             	mov    %rbp,%r12
  429150:	48 8b 4b 30          	mov    0x30(%rbx),%rcx
  429154:	44 8b 4b 18          	mov    0x18(%rbx),%r9d
  429158:	4c 89 e7             	mov    %r12,%rdi
  42915b:	4c 8b 43 10          	mov    0x10(%rbx),%r8
  42915f:	ba 06 e8 43 00       	mov    $0x43e806,%edx
  429164:	31 c0                	xor    %eax,%eax
  429166:	e8 85 b3 00 00       	callq  4344f0 <BIO_snprintf>
  42916b:	4c 89 e7             	mov    %r12,%rdi
  42916e:	e8 3d dc fd ff       	callq  406db0 <strlen@plt>
  429173:	49 01 c4             	add    %rax,%r12
  429176:	f6 05 bb 17 23 00 02 	testb  $0x2,0x2317bb(%rip)        # 65a938 <options>
  42917d:	0f 85 6d 02 00 00    	jne    4293f0 <print_leak_doall_arg+0x2f0>
  429183:	8b 4b 08             	mov    0x8(%rbx),%ecx
  429186:	4c 8b 03             	mov    (%rbx),%r8
  429189:	48 89 ee             	mov    %rbp,%rsi
  42918c:	4c 29 e6             	sub    %r12,%rsi
  42918f:	4c 89 e7             	mov    %r12,%rdi
  429192:	ba 2b e8 43 00       	mov    $0x43e82b,%edx
  429197:	48 81 c6 00 04 00 00 	add    $0x400,%rsi
  42919e:	31 c0                	xor    %eax,%eax
  4291a0:	e8 4b b3 00 00       	callq  4344f0 <BIO_snprintf>
  4291a5:	49 8b 3e             	mov    (%r14),%rdi
  4291a8:	48 89 ee             	mov    %rbp,%rsi
  4291ab:	e8 10 71 00 00       	callq  4302c0 <BIO_puts>
  4291b0:	4c 8b 63 40          	mov    0x40(%rbx),%r12
  4291b4:	48 63 43 08          	movslq 0x8(%rbx),%rax
  4291b8:	41 83 46 08 01       	addl   $0x1,0x8(%r14)
  4291bd:	49 01 46 10          	add    %rax,0x10(%r14)
  4291c1:	4d 85 e4             	test   %r12,%r12
  4291c4:	0f 84 76 01 00 00    	je     429340 <print_leak_doall_arg+0x240>
  4291ca:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  4291cf:	4c 89 e6             	mov    %r12,%rsi
  4291d2:	41 bd 01 00 00 00    	mov    $0x1,%r13d
  4291d8:	e8 83 b9 ff ff       	callq  424b60 <CRYPTO_THREADID_cpy>
  4291dd:	eb 59                	jmp    429238 <print_leak_doall_arg+0x138>
  4291df:	90                   	nop
  4291e0:	48 8d 7c 1d 00       	lea    0x0(%rbp,%rbx,1),%rdi
  4291e5:	48 63 d2             	movslq %edx,%rdx
  4291e8:	e8 03 de fd ff       	callq  406ff0 <memcpy@plt>
  4291ed:	be 83 03 00 00       	mov    $0x383,%esi
  4291f2:	bf 7d 00 00 00       	mov    $0x7d,%edi
  4291f7:	48 01 ef             	add    %rbp,%rdi
  4291fa:	ba 45 e8 43 00       	mov    $0x43e845,%edx
  4291ff:	31 c0                	xor    %eax,%eax
  429201:	e8 ea b2 00 00       	callq  4344f0 <BIO_snprintf>
  429206:	49 8b 3e             	mov    (%r14),%rdi
  429209:	48 89 ee             	mov    %rbp,%rsi
  42920c:	e8 af 70 00 00       	callq  4302c0 <BIO_puts>
  429211:	4d 8b 64 24 28       	mov    0x28(%r12),%r12
  429216:	4d 85 e4             	test   %r12,%r12
  429219:	0f 84 21 01 00 00    	je     429340 <print_leak_doall_arg+0x240>
  42921f:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  429224:	4c 89 e7             	mov    %r12,%rdi
  429227:	49 83 c5 01          	add    $0x1,%r13
  42922b:	e8 20 b9 ff ff       	callq  424b50 <CRYPTO_THREADID_cmp>
  429230:	85 c0                	test   %eax,%eax
  429232:	0f 85 08 01 00 00    	jne    429340 <print_leak_doall_arg+0x240>
  429238:	b9 00 04 00 00       	mov    $0x400,%ecx
  42923d:	4c 89 ea             	mov    %r13,%rdx
  429240:	be 3e 00 00 00       	mov    $0x3e,%esi
  429245:	48 89 ef             	mov    %rbp,%rdi
  429248:	e8 93 dc fd ff       	callq  406ee0 <__memset_chk@plt>
  42924d:	49 8b 5c 24 10       	mov    0x10(%r12),%rbx
  429252:	45 8b 7c 24 18       	mov    0x18(%r12),%r15d
  429257:	4c 89 e7             	mov    %r12,%rdi
  42925a:	e8 11 b9 ff ff       	callq  424b70 <CRYPTO_THREADID_hash>
  42925f:	be 00 04 00 00       	mov    $0x400,%esi
  429264:	4a 8d 7c 2d 00       	lea    0x0(%rbp,%r13,1),%rdi
  429269:	48 89 c1             	mov    %rax,%rcx
  42926c:	49 89 d8             	mov    %rbx,%r8
  42926f:	4c 29 ee             	sub    %r13,%rsi
  429272:	45 89 f9             	mov    %r15d,%r9d
  429275:	ba 58 e8 43 00       	mov    $0x43e858,%edx
  42927a:	31 c0                	xor    %eax,%eax
  42927c:	48 89 eb             	mov    %rbp,%rbx
  42927f:	e8 6c b2 00 00       	callq  4344f0 <BIO_snprintf>
  429284:	8b 13                	mov    (%rbx),%edx
  429286:	48 83 c3 04          	add    $0x4,%rbx
  42928a:	8d 82 ff fe fe fe    	lea    -0x1010101(%rdx),%eax
  429290:	f7 d2                	not    %edx
  429292:	21 d0                	and    %edx,%eax
  429294:	25 80 80 80 80       	and    $0x80808080,%eax
  429299:	74 e9                	je     429284 <print_leak_doall_arg+0x184>
  42929b:	89 c2                	mov    %eax,%edx
  42929d:	49 8b 74 24 20       	mov    0x20(%r12),%rsi
  4292a2:	c1 ea 10             	shr    $0x10,%edx
  4292a5:	a9 80 80 00 00       	test   $0x8080,%eax
  4292aa:	0f 44 c2             	cmove  %edx,%eax
  4292ad:	48 8d 53 02          	lea    0x2(%rbx),%rdx
  4292b1:	48 89 f7             	mov    %rsi,%rdi
  4292b4:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  4292b9:	48 0f 44 da          	cmove  %rdx,%rbx
  4292bd:	00 c0                	add    %al,%al
  4292bf:	48 83 db 03          	sbb    $0x3,%rbx
  4292c3:	48 29 eb             	sub    %rbp,%rbx
  4292c6:	e8 e5 da fd ff       	callq  406db0 <strlen@plt>
  4292cb:	ba 7d 00 00 00       	mov    $0x7d,%edx
  4292d0:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  4292d5:	29 da                	sub    %ebx,%edx
  4292d7:	48 63 db             	movslq %ebx,%rbx
  4292da:	39 c2                	cmp    %eax,%edx
  4292dc:	0f 8c fe fe ff ff    	jl     4291e0 <print_leak_doall_arg+0xe0>
  4292e2:	48 8d 7c 1d 00       	lea    0x0(%rbp,%rbx,1),%rdi
  4292e7:	ba 00 04 00 00       	mov    $0x400,%edx
  4292ec:	48 29 da             	sub    %rbx,%rdx
  4292ef:	e8 4c ca ff ff       	callq  425d40 <BUF_strlcpy>
  4292f4:	48 89 ef             	mov    %rbp,%rdi
  4292f7:	8b 17                	mov    (%rdi),%edx
  4292f9:	48 83 c7 04          	add    $0x4,%rdi
  4292fd:	8d 82 ff fe fe fe    	lea    -0x1010101(%rdx),%eax
  429303:	f7 d2                	not    %edx
  429305:	21 d0                	and    %edx,%eax
  429307:	25 80 80 80 80       	and    $0x80808080,%eax
  42930c:	74 e9                	je     4292f7 <print_leak_doall_arg+0x1f7>
  42930e:	89 c2                	mov    %eax,%edx
  429310:	be 00 04 00 00       	mov    $0x400,%esi
  429315:	c1 ea 10             	shr    $0x10,%edx
  429318:	a9 80 80 00 00       	test   $0x8080,%eax
  42931d:	0f 44 c2             	cmove  %edx,%eax
  429320:	48 8d 57 02          	lea    0x2(%rdi),%rdx
  429324:	48 0f 44 fa          	cmove  %rdx,%rdi
  429328:	00 c0                	add    %al,%al
  42932a:	48 83 df 03          	sbb    $0x3,%rdi
  42932e:	48 29 ef             	sub    %rbp,%rdi
  429331:	48 63 ff             	movslq %edi,%rdi
  429334:	48 29 fe             	sub    %rdi,%rsi
  429337:	e9 bb fe ff ff       	jmpq   4291f7 <print_leak_doall_arg+0xf7>
  42933c:	0f 1f 40 00          	nopl   0x0(%rax)
  429340:	48 8b 84 24 28 04 00 	mov    0x428(%rsp),%rax
  429347:	00 
  429348:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  42934f:	00 00 
  429351:	0f 85 d1 00 00 00    	jne    429428 <print_leak_doall_arg+0x328>
  429357:	48 81 c4 38 04 00 00 	add    $0x438,%rsp
  42935e:	5b                   	pop    %rbx
  42935f:	5d                   	pop    %rbp
  429360:	41 5c                	pop    %r12
  429362:	41 5d                	pop    %r13
  429364:	41 5e                	pop    %r14
  429366:	41 5f                	pop    %r15
  429368:	c3                   	retq   
  429369:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  429370:	48 8d 7f 38          	lea    0x38(%rdi),%rdi
  429374:	48 8d 6c 24 20       	lea    0x20(%rsp),%rbp
  429379:	e8 22 dc fd ff       	callq  406fa0 <localtime@plt>
  42937e:	8b 48 08             	mov    0x8(%rax),%ecx
  429381:	44 8b 08             	mov    (%rax),%r9d
  429384:	ba f4 e7 43 00       	mov    $0x43e7f4,%edx
  429389:	44 8b 40 04          	mov    0x4(%rax),%r8d
  42938d:	be 00 04 00 00       	mov    $0x400,%esi
  429392:	48 89 ef             	mov    %rbp,%rdi
  429395:	31 c0                	xor    %eax,%eax
  429397:	49 89 ec             	mov    %rbp,%r12
  42939a:	e8 51 b1 00 00       	callq  4344f0 <BIO_snprintf>
  42939f:	41 8b 04 24          	mov    (%r12),%eax
  4293a3:	49 83 c4 04          	add    $0x4,%r12
  4293a7:	8d 90 ff fe fe fe    	lea    -0x1010101(%rax),%edx
  4293ad:	f7 d0                	not    %eax
  4293af:	21 c2                	and    %eax,%edx
  4293b1:	81 e2 80 80 80 80    	and    $0x80808080,%edx
  4293b7:	74 e6                	je     42939f <print_leak_doall_arg+0x29f>
  4293b9:	89 d0                	mov    %edx,%eax
  4293bb:	48 89 ee             	mov    %rbp,%rsi
  4293be:	c1 e8 10             	shr    $0x10,%eax
  4293c1:	f7 c2 80 80 00 00    	test   $0x8080,%edx
  4293c7:	0f 44 d0             	cmove  %eax,%edx
  4293ca:	49 8d 44 24 02       	lea    0x2(%r12),%rax
  4293cf:	4c 0f 44 e0          	cmove  %rax,%r12
  4293d3:	00 d2                	add    %dl,%dl
  4293d5:	49 83 dc 03          	sbb    $0x3,%r12
  4293d9:	4c 29 e6             	sub    %r12,%rsi
  4293dc:	48 81 c6 00 04 00 00 	add    $0x400,%rsi
  4293e3:	e9 68 fd ff ff       	jmpq   429150 <print_leak_doall_arg+0x50>
  4293e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4293ef:	00 
  4293f0:	48 8d 7b 20          	lea    0x20(%rbx),%rdi
  4293f4:	e8 77 b7 ff ff       	callq  424b70 <CRYPTO_THREADID_hash>
  4293f9:	48 89 ee             	mov    %rbp,%rsi
  4293fc:	48 89 c1             	mov    %rax,%rcx
  4293ff:	4c 89 e7             	mov    %r12,%rdi
  429402:	4c 29 e6             	sub    %r12,%rsi
  429405:	ba 1e e8 43 00       	mov    $0x43e81e,%edx
  42940a:	31 c0                	xor    %eax,%eax
  42940c:	48 81 c6 00 04 00 00 	add    $0x400,%rsi
  429413:	e8 d8 b0 00 00       	callq  4344f0 <BIO_snprintf>
  429418:	4c 89 e7             	mov    %r12,%rdi
  42941b:	e8 90 d9 fd ff       	callq  406db0 <strlen@plt>
  429420:	49 01 c4             	add    %rax,%r12
  429423:	e9 5b fd ff ff       	jmpq   429183 <print_leak_doall_arg+0x83>
  429428:	e8 93 da fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  42942d:	0f 1f 00             	nopl   (%rax)

0000000000429430 <print_leak_LHASH_DOALL_ARG>:
  429430:	e9 cb fc ff ff       	jmpq   429100 <print_leak_doall_arg>
  429435:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  42943c:	00 00 00 00 

0000000000429440 <CRYPTO_mem_ctrl.constprop.5>:
  429440:	53                   	push   %rbx
  429441:	b9 dc 00 00 00       	mov    $0xdc,%ecx
  429446:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  42944b:	be 14 00 00 00       	mov    $0x14,%esi
  429450:	bf 09 00 00 00       	mov    $0x9,%edi
  429455:	48 83 ec 20          	sub    $0x20,%rsp
  429459:	8b 1d f9 14 23 00    	mov    0x2314f9(%rip),%ebx        # 65a958 <mh_mode>
  42945f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  429466:	00 00 
  429468:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  42946d:	31 c0                	xor    %eax,%eax
  42946f:	e8 9c b9 ff ff       	callq  424e10 <CRYPTO_lock>
  429474:	f6 05 dd 14 23 00 01 	testb  $0x1,0x2314dd(%rip)        # 65a958 <mh_mode>
  42947b:	75 3b                	jne    4294b8 <CRYPTO_mem_ctrl.constprop.5+0x78>
  42947d:	b9 1a 01 00 00       	mov    $0x11a,%ecx
  429482:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  429487:	be 14 00 00 00       	mov    $0x14,%esi
  42948c:	bf 0a 00 00 00       	mov    $0xa,%edi
  429491:	e8 7a b9 ff ff       	callq  424e10 <CRYPTO_lock>
  429496:	89 d8                	mov    %ebx,%eax
  429498:	48 8b 5c 24 18       	mov    0x18(%rsp),%rbx
  42949d:	64 48 33 1c 25 28 00 	xor    %fs:0x28,%rbx
  4294a4:	00 00 
  4294a6:	0f 85 9f 00 00 00    	jne    42954b <CRYPTO_mem_ctrl.constprop.5+0x10b>
  4294ac:	48 83 c4 20          	add    $0x20,%rsp
  4294b0:	5b                   	pop    %rbx
  4294b1:	c3                   	retq   
  4294b2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  4294b8:	48 89 e7             	mov    %rsp,%rdi
  4294bb:	e8 50 b6 ff ff       	callq  424b10 <CRYPTO_THREADID_current>
  4294c0:	8b 05 6a 14 23 00    	mov    0x23146a(%rip),%eax        # 65a930 <num_disable>
  4294c6:	85 c0                	test   %eax,%eax
  4294c8:	75 6e                	jne    429538 <CRYPTO_mem_ctrl.constprop.5+0xf8>
  4294ca:	b9 fa 00 00 00       	mov    $0xfa,%ecx
  4294cf:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  4294d4:	be 14 00 00 00       	mov    $0x14,%esi
  4294d9:	bf 0a 00 00 00       	mov    $0xa,%edi
  4294de:	e8 2d b9 ff ff       	callq  424e10 <CRYPTO_lock>
  4294e3:	b9 00 01 00 00       	mov    $0x100,%ecx
  4294e8:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  4294ed:	be 1b 00 00 00       	mov    $0x1b,%esi
  4294f2:	bf 09 00 00 00       	mov    $0x9,%edi
  4294f7:	e8 14 b9 ff ff       	callq  424e10 <CRYPTO_lock>
  4294fc:	be 14 00 00 00       	mov    $0x14,%esi
  429501:	bf 09 00 00 00       	mov    $0x9,%edi
  429506:	b9 01 01 00 00       	mov    $0x101,%ecx
  42950b:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  429510:	e8 fb b8 ff ff       	callq  424e10 <CRYPTO_lock>
  429515:	48 89 e6             	mov    %rsp,%rsi
  429518:	bf 20 a9 65 00       	mov    $0x65a920,%edi
  42951d:	83 25 34 14 23 00 fd 	andl   $0xfffffffd,0x231434(%rip)        # 65a958 <mh_mode>
  429524:	e8 37 b6 ff ff       	callq  424b60 <CRYPTO_THREADID_cpy>
  429529:	83 05 00 14 23 00 01 	addl   $0x1,0x231400(%rip)        # 65a930 <num_disable>
  429530:	e9 48 ff ff ff       	jmpq   42947d <CRYPTO_mem_ctrl.constprop.5+0x3d>
  429535:	0f 1f 00             	nopl   (%rax)
  429538:	48 89 e6             	mov    %rsp,%rsi
  42953b:	bf 20 a9 65 00       	mov    $0x65a920,%edi
  429540:	e8 0b b6 ff ff       	callq  424b50 <CRYPTO_THREADID_cmp>
  429545:	85 c0                	test   %eax,%eax
  429547:	75 81                	jne    4294ca <CRYPTO_mem_ctrl.constprop.5+0x8a>
  429549:	eb de                	jmp    429529 <CRYPTO_mem_ctrl.constprop.5+0xe9>
  42954b:	e8 70 d9 fd ff       	callq  406ec0 <__stack_chk_fail@plt>

0000000000429550 <app_info_free>:
  429550:	8b 47 30             	mov    0x30(%rdi),%eax
  429553:	83 e8 01             	sub    $0x1,%eax
  429556:	85 c0                	test   %eax,%eax
  429558:	89 47 30             	mov    %eax,0x30(%rdi)
  42955b:	7e 03                	jle    429560 <app_info_free+0x10>
  42955d:	f3 c3                	repz retq 
  42955f:	90                   	nop
  429560:	55                   	push   %rbp
  429561:	53                   	push   %rbx
  429562:	48 89 fb             	mov    %rdi,%rbx
  429565:	48 83 ec 08          	sub    $0x8,%rsp
  429569:	48 8b 6f 28          	mov    0x28(%rdi),%rbp
  42956d:	48 85 ed             	test   %rbp,%rbp
  429570:	74 0d                	je     42957f <app_info_free+0x2f>
  429572:	8b 45 30             	mov    0x30(%rbp),%eax
  429575:	83 e8 01             	sub    $0x1,%eax
  429578:	85 c0                	test   %eax,%eax
  42957a:	89 45 30             	mov    %eax,0x30(%rbp)
  42957d:	7e 11                	jle    429590 <app_info_free+0x40>
  42957f:	48 83 c4 08          	add    $0x8,%rsp
  429583:	48 89 df             	mov    %rbx,%rdi
  429586:	5b                   	pop    %rbx
  429587:	5d                   	pop    %rbp
  429588:	e9 d3 c1 ff ff       	jmpq   425760 <CRYPTO_free>
  42958d:	0f 1f 00             	nopl   (%rax)
  429590:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
  429594:	48 85 ff             	test   %rdi,%rdi
  429597:	74 05                	je     42959e <app_info_free+0x4e>
  429599:	e8 b2 ff ff ff       	callq  429550 <app_info_free>
  42959e:	48 89 ef             	mov    %rbp,%rdi
  4295a1:	e8 ba c1 ff ff       	callq  425760 <CRYPTO_free>
  4295a6:	eb d7                	jmp    42957f <app_info_free+0x2f>
  4295a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4295af:	00 

00000000004295b0 <CRYPTO_mem_ctrl>:
  4295b0:	55                   	push   %rbp
  4295b1:	53                   	push   %rbx
  4295b2:	b9 dc 00 00 00       	mov    $0xdc,%ecx
  4295b7:	89 fb                	mov    %edi,%ebx
  4295b9:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  4295be:	be 14 00 00 00       	mov    $0x14,%esi
  4295c3:	48 83 ec 28          	sub    $0x28,%rsp
  4295c7:	bf 09 00 00 00       	mov    $0x9,%edi
  4295cc:	8b 2d 86 13 23 00    	mov    0x231386(%rip),%ebp        # 65a958 <mh_mode>
  4295d2:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  4295d9:	00 00 
  4295db:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  4295e0:	31 c0                	xor    %eax,%eax
  4295e2:	e8 29 b8 ff ff       	callq  424e10 <CRYPTO_lock>
  4295e7:	83 fb 01             	cmp    $0x1,%ebx
  4295ea:	0f 84 d8 00 00 00    	je     4296c8 <CRYPTO_mem_ctrl+0x118>
  4295f0:	0f 8e aa 00 00 00    	jle    4296a0 <CRYPTO_mem_ctrl+0xf0>
  4295f6:	83 fb 02             	cmp    $0x2,%ebx
  4295f9:	74 55                	je     429650 <CRYPTO_mem_ctrl+0xa0>
  4295fb:	83 fb 03             	cmp    $0x3,%ebx
  4295fe:	75 10                	jne    429610 <CRYPTO_mem_ctrl+0x60>
  429600:	f6 05 51 13 23 00 01 	testb  $0x1,0x231351(%rip)        # 65a958 <mh_mode>
  429607:	0f 85 db 00 00 00    	jne    4296e8 <CRYPTO_mem_ctrl+0x138>
  42960d:	0f 1f 00             	nopl   (%rax)
  429610:	b9 1a 01 00 00       	mov    $0x11a,%ecx
  429615:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  42961a:	be 14 00 00 00       	mov    $0x14,%esi
  42961f:	bf 0a 00 00 00       	mov    $0xa,%edi
  429624:	e8 e7 b7 ff ff       	callq  424e10 <CRYPTO_lock>
  429629:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  42962e:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  429635:	00 00 
  429637:	89 e8                	mov    %ebp,%eax
  429639:	0f 85 3c 01 00 00    	jne    42977b <CRYPTO_mem_ctrl+0x1cb>
  42963f:	48 83 c4 28          	add    $0x28,%rsp
  429643:	5b                   	pop    %rbx
  429644:	5d                   	pop    %rbp
  429645:	c3                   	retq   
  429646:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  42964d:	00 00 00 
  429650:	8b 15 02 13 23 00    	mov    0x231302(%rip),%edx        # 65a958 <mh_mode>
  429656:	f6 c2 01             	test   $0x1,%dl
  429659:	74 b5                	je     429610 <CRYPTO_mem_ctrl+0x60>
  42965b:	8b 05 cf 12 23 00    	mov    0x2312cf(%rip),%eax        # 65a930 <num_disable>
  429661:	85 c0                	test   %eax,%eax
  429663:	74 ab                	je     429610 <CRYPTO_mem_ctrl+0x60>
  429665:	83 e8 01             	sub    $0x1,%eax
  429668:	85 c0                	test   %eax,%eax
  42966a:	89 05 c0 12 23 00    	mov    %eax,0x2312c0(%rip)        # 65a930 <num_disable>
  429670:	75 9e                	jne    429610 <CRYPTO_mem_ctrl+0x60>
  429672:	83 ca 02             	or     $0x2,%edx
  429675:	b9 11 01 00 00       	mov    $0x111,%ecx
  42967a:	be 1b 00 00 00       	mov    $0x1b,%esi
  42967f:	89 15 d3 12 23 00    	mov    %edx,0x2312d3(%rip)        # 65a958 <mh_mode>
  429685:	bf 0a 00 00 00       	mov    $0xa,%edi
  42968a:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  42968f:	e8 7c b7 ff ff       	callq  424e10 <CRYPTO_lock>
  429694:	e9 77 ff ff ff       	jmpq   429610 <CRYPTO_mem_ctrl+0x60>
  429699:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  4296a0:	85 db                	test   %ebx,%ebx
  4296a2:	0f 85 68 ff ff ff    	jne    429610 <CRYPTO_mem_ctrl+0x60>
  4296a8:	c7 05 a6 12 23 00 00 	movl   $0x0,0x2312a6(%rip)        # 65a958 <mh_mode>
  4296af:	00 00 00 
  4296b2:	c7 05 74 12 23 00 00 	movl   $0x0,0x231274(%rip)        # 65a930 <num_disable>
  4296b9:	00 00 00 
  4296bc:	e9 4f ff ff ff       	jmpq   429610 <CRYPTO_mem_ctrl+0x60>
  4296c1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  4296c8:	c7 05 86 12 23 00 03 	movl   $0x3,0x231286(%rip)        # 65a958 <mh_mode>
  4296cf:	00 00 00 
  4296d2:	c7 05 54 12 23 00 00 	movl   $0x0,0x231254(%rip)        # 65a930 <num_disable>
  4296d9:	00 00 00 
  4296dc:	e9 2f ff ff ff       	jmpq   429610 <CRYPTO_mem_ctrl+0x60>
  4296e1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  4296e8:	48 89 e7             	mov    %rsp,%rdi
  4296eb:	e8 20 b4 ff ff       	callq  424b10 <CRYPTO_THREADID_current>
  4296f0:	8b 05 3a 12 23 00    	mov    0x23123a(%rip),%eax        # 65a930 <num_disable>
  4296f6:	85 c0                	test   %eax,%eax
  4296f8:	75 6e                	jne    429768 <CRYPTO_mem_ctrl+0x1b8>
  4296fa:	b9 fa 00 00 00       	mov    $0xfa,%ecx
  4296ff:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  429704:	be 14 00 00 00       	mov    $0x14,%esi
  429709:	bf 0a 00 00 00       	mov    $0xa,%edi
  42970e:	e8 fd b6 ff ff       	callq  424e10 <CRYPTO_lock>
  429713:	b9 00 01 00 00       	mov    $0x100,%ecx
  429718:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  42971d:	be 1b 00 00 00       	mov    $0x1b,%esi
  429722:	bf 09 00 00 00       	mov    $0x9,%edi
  429727:	e8 e4 b6 ff ff       	callq  424e10 <CRYPTO_lock>
  42972c:	be 14 00 00 00       	mov    $0x14,%esi
  429731:	bf 09 00 00 00       	mov    $0x9,%edi
  429736:	b9 01 01 00 00       	mov    $0x101,%ecx
  42973b:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  429740:	e8 cb b6 ff ff       	callq  424e10 <CRYPTO_lock>
  429745:	48 89 e6             	mov    %rsp,%rsi
  429748:	bf 20 a9 65 00       	mov    $0x65a920,%edi
  42974d:	83 25 04 12 23 00 fd 	andl   $0xfffffffd,0x231204(%rip)        # 65a958 <mh_mode>
  429754:	e8 07 b4 ff ff       	callq  424b60 <CRYPTO_THREADID_cpy>
  429759:	83 05 d0 11 23 00 01 	addl   $0x1,0x2311d0(%rip)        # 65a930 <num_disable>
  429760:	e9 ab fe ff ff       	jmpq   429610 <CRYPTO_mem_ctrl+0x60>
  429765:	0f 1f 00             	nopl   (%rax)
  429768:	48 89 e6             	mov    %rsp,%rsi
  42976b:	bf 20 a9 65 00       	mov    $0x65a920,%edi
  429770:	e8 db b3 ff ff       	callq  424b50 <CRYPTO_THREADID_cmp>
  429775:	85 c0                	test   %eax,%eax
  429777:	75 81                	jne    4296fa <CRYPTO_mem_ctrl+0x14a>
  429779:	eb de                	jmp    429759 <CRYPTO_mem_ctrl+0x1a9>
  42977b:	e8 40 d7 fd ff       	callq  406ec0 <__stack_chk_fail@plt>

0000000000429780 <CRYPTO_is_mem_check_on>:
  429780:	53                   	push   %rbx
  429781:	31 db                	xor    %ebx,%ebx
  429783:	48 83 ec 20          	sub    $0x20,%rsp
  429787:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  42978e:	00 00 
  429790:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  429795:	31 c0                	xor    %eax,%eax
  429797:	f6 05 ba 11 23 00 01 	testb  $0x1,0x2311ba(%rip)        # 65a958 <mh_mode>
  42979e:	75 20                	jne    4297c0 <CRYPTO_is_mem_check_on+0x40>
  4297a0:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  4297a5:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  4297ac:	00 00 
  4297ae:	89 d8                	mov    %ebx,%eax
  4297b0:	75 74                	jne    429826 <CRYPTO_is_mem_check_on+0xa6>
  4297b2:	48 83 c4 20          	add    $0x20,%rsp
  4297b6:	5b                   	pop    %rbx
  4297b7:	c3                   	retq   
  4297b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4297bf:	00 
  4297c0:	48 89 e7             	mov    %rsp,%rdi
  4297c3:	b3 01                	mov    $0x1,%bl
  4297c5:	e8 46 b3 ff ff       	callq  424b10 <CRYPTO_THREADID_current>
  4297ca:	b9 26 01 00 00       	mov    $0x126,%ecx
  4297cf:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  4297d4:	be 14 00 00 00       	mov    $0x14,%esi
  4297d9:	bf 05 00 00 00       	mov    $0x5,%edi
  4297de:	e8 2d b6 ff ff       	callq  424e10 <CRYPTO_lock>
  4297e3:	f6 05 6e 11 23 00 02 	testb  $0x2,0x23116e(%rip)        # 65a958 <mh_mode>
  4297ea:	74 24                	je     429810 <CRYPTO_is_mem_check_on+0x90>
  4297ec:	b9 2b 01 00 00       	mov    $0x12b,%ecx
  4297f1:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  4297f6:	be 14 00 00 00       	mov    $0x14,%esi
  4297fb:	bf 06 00 00 00       	mov    $0x6,%edi
  429800:	e8 0b b6 ff ff       	callq  424e10 <CRYPTO_lock>
  429805:	eb 99                	jmp    4297a0 <CRYPTO_is_mem_check_on+0x20>
  429807:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  42980e:	00 00 
  429810:	48 89 e6             	mov    %rsp,%rsi
  429813:	bf 20 a9 65 00       	mov    $0x65a920,%edi
  429818:	31 db                	xor    %ebx,%ebx
  42981a:	e8 31 b3 ff ff       	callq  424b50 <CRYPTO_THREADID_cmp>
  42981f:	85 c0                	test   %eax,%eax
  429821:	0f 95 c3             	setne  %bl
  429824:	eb c6                	jmp    4297ec <CRYPTO_is_mem_check_on+0x6c>
  429826:	e8 95 d6 fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  42982b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000429830 <CRYPTO_dbg_set_options>:
  429830:	48 89 3d 01 11 23 00 	mov    %rdi,0x231101(%rip)        # 65a938 <options>
  429837:	c3                   	retq   
  429838:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  42983f:	00 

0000000000429840 <CRYPTO_dbg_get_options>:
  429840:	48 8b 05 f1 10 23 00 	mov    0x2310f1(%rip),%rax        # 65a938 <options>
  429847:	c3                   	retq   
  429848:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  42984f:	00 

0000000000429850 <CRYPTO_push_info_>:
  429850:	41 55                	push   %r13
  429852:	41 54                	push   %r12
  429854:	55                   	push   %rbp
  429855:	53                   	push   %rbx
  429856:	48 83 ec 28          	sub    $0x28,%rsp
  42985a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  429861:	00 00 
  429863:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  429868:	31 c0                	xor    %eax,%eax
  42986a:	f6 05 e7 10 23 00 01 	testb  $0x1,0x2310e7(%rip)        # 65a958 <mh_mode>
  429871:	75 25                	jne    429898 <CRYPTO_push_info_+0x48>
  429873:	31 c0                	xor    %eax,%eax
  429875:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  42987a:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  429881:	00 00 
  429883:	0f 85 ab 01 00 00    	jne    429a34 <CRYPTO_push_info_+0x1e4>
  429889:	48 83 c4 28          	add    $0x28,%rsp
  42988d:	5b                   	pop    %rbx
  42988e:	5d                   	pop    %rbp
  42988f:	41 5c                	pop    %r12
  429891:	41 5d                	pop    %r13
  429893:	c3                   	retq   
  429894:	0f 1f 40 00          	nopl   0x0(%rax)
  429898:	48 89 fd             	mov    %rdi,%rbp
  42989b:	48 89 e7             	mov    %rsp,%rdi
  42989e:	49 89 f4             	mov    %rsi,%r12
  4298a1:	41 89 d5             	mov    %edx,%r13d
  4298a4:	e8 67 b2 ff ff       	callq  424b10 <CRYPTO_THREADID_current>
  4298a9:	b9 26 01 00 00       	mov    $0x126,%ecx
  4298ae:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  4298b3:	be 14 00 00 00       	mov    $0x14,%esi
  4298b8:	bf 05 00 00 00       	mov    $0x5,%edi
  4298bd:	e8 4e b5 ff ff       	callq  424e10 <CRYPTO_lock>
  4298c2:	f6 05 8f 10 23 00 02 	testb  $0x2,0x23108f(%rip)        # 65a958 <mh_mode>
  4298c9:	0f 84 01 01 00 00    	je     4299d0 <CRYPTO_push_info_+0x180>
  4298cf:	b9 2b 01 00 00       	mov    $0x12b,%ecx
  4298d4:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  4298d9:	be 14 00 00 00       	mov    $0x14,%esi
  4298de:	bf 06 00 00 00       	mov    $0x6,%edi
  4298e3:	e8 28 b5 ff ff       	callq  424e10 <CRYPTO_lock>
  4298e8:	e8 53 fb ff ff       	callq  429440 <CRYPTO_mem_ctrl.constprop.5>
  4298ed:	ba 96 01 00 00       	mov    $0x196,%edx
  4298f2:	be 48 e8 43 00       	mov    $0x43e848,%esi
  4298f7:	bf 38 00 00 00       	mov    $0x38,%edi
  4298fc:	e8 ff ba ff ff       	callq  425400 <CRYPTO_malloc>
  429901:	48 85 c0             	test   %rax,%rax
  429904:	48 89 c3             	mov    %rax,%rbx
  429907:	74 49                	je     429952 <CRYPTO_push_info_+0x102>
  429909:	48 83 3d 2f 10 23 00 	cmpq   $0x0,0x23102f(%rip)        # 65a940 <amih>
  429910:	00 
  429911:	0f 84 f1 00 00 00    	je     429a08 <CRYPTO_push_info_+0x1b8>
  429917:	48 89 df             	mov    %rbx,%rdi
  42991a:	e8 f1 b1 ff ff       	callq  424b10 <CRYPTO_THREADID_current>
  42991f:	48 8b 3d 1a 10 23 00 	mov    0x23101a(%rip),%rdi        # 65a940 <amih>
  429926:	4c 89 63 10          	mov    %r12,0x10(%rbx)
  42992a:	48 89 de             	mov    %rbx,%rsi
  42992d:	44 89 6b 18          	mov    %r13d,0x18(%rbx)
  429931:	48 89 6b 20          	mov    %rbp,0x20(%rbx)
  429935:	c7 43 30 01 00 00 00 	movl   $0x1,0x30(%rbx)
  42993c:	48 c7 43 28 00 00 00 	movq   $0x0,0x28(%rbx)
  429943:	00 
  429944:	e8 07 b0 00 00       	callq  434950 <lh_insert>
  429949:	48 85 c0             	test   %rax,%rax
  42994c:	74 04                	je     429952 <CRYPTO_push_info_+0x102>
  42994e:	48 89 43 28          	mov    %rax,0x28(%rbx)
  429952:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  429957:	b9 dc 00 00 00       	mov    $0xdc,%ecx
  42995c:	be 14 00 00 00       	mov    $0x14,%esi
  429961:	bf 09 00 00 00       	mov    $0x9,%edi
  429966:	e8 a5 b4 ff ff       	callq  424e10 <CRYPTO_lock>
  42996b:	8b 15 e7 0f 23 00    	mov    0x230fe7(%rip),%edx        # 65a958 <mh_mode>
  429971:	f6 c2 01             	test   $0x1,%dl
  429974:	74 3a                	je     4299b0 <CRYPTO_push_info_+0x160>
  429976:	8b 05 b4 0f 23 00    	mov    0x230fb4(%rip),%eax        # 65a930 <num_disable>
  42997c:	85 c0                	test   %eax,%eax
  42997e:	74 30                	je     4299b0 <CRYPTO_push_info_+0x160>
  429980:	83 e8 01             	sub    $0x1,%eax
  429983:	85 c0                	test   %eax,%eax
  429985:	89 05 a5 0f 23 00    	mov    %eax,0x230fa5(%rip)        # 65a930 <num_disable>
  42998b:	75 23                	jne    4299b0 <CRYPTO_push_info_+0x160>
  42998d:	83 ca 02             	or     $0x2,%edx
  429990:	b9 11 01 00 00       	mov    $0x111,%ecx
  429995:	be 1b 00 00 00       	mov    $0x1b,%esi
  42999a:	89 15 b8 0f 23 00    	mov    %edx,0x230fb8(%rip)        # 65a958 <mh_mode>
  4299a0:	bf 0a 00 00 00       	mov    $0xa,%edi
  4299a5:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  4299aa:	e8 61 b4 ff ff       	callq  424e10 <CRYPTO_lock>
  4299af:	90                   	nop
  4299b0:	b9 1a 01 00 00       	mov    $0x11a,%ecx
  4299b5:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  4299ba:	be 14 00 00 00       	mov    $0x14,%esi
  4299bf:	bf 0a 00 00 00       	mov    $0xa,%edi
  4299c4:	e8 47 b4 ff ff       	callq  424e10 <CRYPTO_lock>
  4299c9:	e9 a5 fe ff ff       	jmpq   429873 <CRYPTO_push_info_+0x23>
  4299ce:	66 90                	xchg   %ax,%ax
  4299d0:	48 89 e6             	mov    %rsp,%rsi
  4299d3:	bf 20 a9 65 00       	mov    $0x65a920,%edi
  4299d8:	e8 73 b1 ff ff       	callq  424b50 <CRYPTO_THREADID_cmp>
  4299dd:	b9 2b 01 00 00       	mov    $0x12b,%ecx
  4299e2:	89 c3                	mov    %eax,%ebx
  4299e4:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  4299e9:	be 14 00 00 00       	mov    $0x14,%esi
  4299ee:	bf 06 00 00 00       	mov    $0x6,%edi
  4299f3:	e8 18 b4 ff ff       	callq  424e10 <CRYPTO_lock>
  4299f8:	85 db                	test   %ebx,%ebx
  4299fa:	0f 85 e8 fe ff ff    	jne    4298e8 <CRYPTO_push_info_+0x98>
  429a00:	e9 6e fe ff ff       	jmpq   429873 <CRYPTO_push_info_+0x23>
  429a05:	0f 1f 00             	nopl   (%rax)
  429a08:	be a0 90 42 00       	mov    $0x4290a0,%esi
  429a0d:	bf b0 90 42 00       	mov    $0x4290b0,%edi
  429a12:	e8 d9 ac 00 00       	callq  4346f0 <lh_new>
  429a17:	48 85 c0             	test   %rax,%rax
  429a1a:	48 89 05 1f 0f 23 00 	mov    %rax,0x230f1f(%rip)        # 65a940 <amih>
  429a21:	0f 85 f0 fe ff ff    	jne    429917 <CRYPTO_push_info_+0xc7>
  429a27:	48 89 df             	mov    %rbx,%rdi
  429a2a:	e8 31 bd ff ff       	callq  425760 <CRYPTO_free>
  429a2f:	e9 1e ff ff ff       	jmpq   429952 <CRYPTO_push_info_+0x102>
  429a34:	e8 87 d4 fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  429a39:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000429a40 <CRYPTO_pop_info>:
  429a40:	55                   	push   %rbp
  429a41:	53                   	push   %rbx
  429a42:	48 83 ec 48          	sub    $0x48,%rsp
  429a46:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  429a4d:	00 00 
  429a4f:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  429a54:	31 c0                	xor    %eax,%eax
  429a56:	f6 05 fb 0e 23 00 01 	testb  $0x1,0x230efb(%rip)        # 65a958 <mh_mode>
  429a5d:	75 21                	jne    429a80 <CRYPTO_pop_info+0x40>
  429a5f:	31 db                	xor    %ebx,%ebx
  429a61:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  429a66:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  429a6d:	00 00 
  429a6f:	89 d8                	mov    %ebx,%eax
  429a71:	0f 85 b1 01 00 00    	jne    429c28 <CRYPTO_pop_info+0x1e8>
  429a77:	48 83 c4 48          	add    $0x48,%rsp
  429a7b:	5b                   	pop    %rbx
  429a7c:	5d                   	pop    %rbp
  429a7d:	c3                   	retq   
  429a7e:	66 90                	xchg   %ax,%ax
  429a80:	48 89 e7             	mov    %rsp,%rdi
  429a83:	e8 88 b0 ff ff       	callq  424b10 <CRYPTO_THREADID_current>
  429a88:	b9 26 01 00 00       	mov    $0x126,%ecx
  429a8d:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  429a92:	be 14 00 00 00       	mov    $0x14,%esi
  429a97:	bf 05 00 00 00       	mov    $0x5,%edi
  429a9c:	e8 6f b3 ff ff       	callq  424e10 <CRYPTO_lock>
  429aa1:	f6 05 b0 0e 23 00 02 	testb  $0x2,0x230eb0(%rip)        # 65a958 <mh_mode>
  429aa8:	0f 84 22 01 00 00    	je     429bd0 <CRYPTO_pop_info+0x190>
  429aae:	b9 2b 01 00 00       	mov    $0x12b,%ecx
  429ab3:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  429ab8:	be 14 00 00 00       	mov    $0x14,%esi
  429abd:	bf 06 00 00 00       	mov    $0x6,%edi
  429ac2:	e8 49 b3 ff ff       	callq  424e10 <CRYPTO_lock>
  429ac7:	e8 74 f9 ff ff       	callq  429440 <CRYPTO_mem_ctrl.constprop.5>
  429acc:	48 83 3d 6c 0e 23 00 	cmpq   $0x0,0x230e6c(%rip)        # 65a940 <amih>
  429ad3:	00 
  429ad4:	0f 84 2e 01 00 00    	je     429c08 <CRYPTO_pop_info+0x1c8>
  429ada:	48 89 e7             	mov    %rsp,%rdi
  429add:	e8 2e b0 ff ff       	callq  424b10 <CRYPTO_THREADID_current>
  429ae2:	48 8b 3d 57 0e 23 00 	mov    0x230e57(%rip),%rdi        # 65a940 <amih>
  429ae9:	48 89 e6             	mov    %rsp,%rsi
  429aec:	e8 7f b0 00 00       	callq  434b70 <lh_delete>
  429af1:	48 85 c0             	test   %rax,%rax
  429af4:	48 89 c3             	mov    %rax,%rbx
  429af7:	0f 84 0b 01 00 00    	je     429c08 <CRYPTO_pop_info+0x1c8>
  429afd:	48 8b 68 28          	mov    0x28(%rax),%rbp
  429b01:	48 85 ed             	test   %rbp,%rbp
  429b04:	0f 84 a6 00 00 00    	je     429bb0 <CRYPTO_pop_info+0x170>
  429b0a:	83 45 30 01          	addl   $0x1,0x30(%rbp)
  429b0e:	48 8b 3d 2b 0e 23 00 	mov    0x230e2b(%rip),%rdi        # 65a940 <amih>
  429b15:	48 89 ee             	mov    %rbp,%rsi
  429b18:	e8 33 ae 00 00       	callq  434950 <lh_insert>
  429b1d:	8b 43 30             	mov    0x30(%rbx),%eax
  429b20:	83 e8 01             	sub    $0x1,%eax
  429b23:	85 c0                	test   %eax,%eax
  429b25:	89 43 30             	mov    %eax,0x30(%rbx)
  429b28:	0f 8e e1 00 00 00    	jle    429c0f <CRYPTO_pop_info+0x1cf>
  429b2e:	bb 01 00 00 00       	mov    $0x1,%ebx
  429b33:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  429b38:	b9 dc 00 00 00       	mov    $0xdc,%ecx
  429b3d:	be 14 00 00 00       	mov    $0x14,%esi
  429b42:	bf 09 00 00 00       	mov    $0x9,%edi
  429b47:	e8 c4 b2 ff ff       	callq  424e10 <CRYPTO_lock>
  429b4c:	8b 15 06 0e 23 00    	mov    0x230e06(%rip),%edx        # 65a958 <mh_mode>
  429b52:	f6 c2 01             	test   $0x1,%dl
  429b55:	74 39                	je     429b90 <CRYPTO_pop_info+0x150>
  429b57:	8b 05 d3 0d 23 00    	mov    0x230dd3(%rip),%eax        # 65a930 <num_disable>
  429b5d:	85 c0                	test   %eax,%eax
  429b5f:	74 2f                	je     429b90 <CRYPTO_pop_info+0x150>
  429b61:	83 e8 01             	sub    $0x1,%eax
  429b64:	85 c0                	test   %eax,%eax
  429b66:	89 05 c4 0d 23 00    	mov    %eax,0x230dc4(%rip)        # 65a930 <num_disable>
  429b6c:	75 22                	jne    429b90 <CRYPTO_pop_info+0x150>
  429b6e:	83 ca 02             	or     $0x2,%edx
  429b71:	b9 11 01 00 00       	mov    $0x111,%ecx
  429b76:	be 1b 00 00 00       	mov    $0x1b,%esi
  429b7b:	89 15 d7 0d 23 00    	mov    %edx,0x230dd7(%rip)        # 65a958 <mh_mode>
  429b81:	bf 0a 00 00 00       	mov    $0xa,%edi
  429b86:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  429b8b:	e8 80 b2 ff ff       	callq  424e10 <CRYPTO_lock>
  429b90:	b9 1a 01 00 00       	mov    $0x11a,%ecx
  429b95:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  429b9a:	be 14 00 00 00       	mov    $0x14,%esi
  429b9f:	bf 0a 00 00 00       	mov    $0xa,%edi
  429ba4:	e8 67 b2 ff ff       	callq  424e10 <CRYPTO_lock>
  429ba9:	e9 b3 fe ff ff       	jmpq   429a61 <CRYPTO_pop_info+0x21>
  429bae:	66 90                	xchg   %ax,%ax
  429bb0:	8b 40 30             	mov    0x30(%rax),%eax
  429bb3:	83 e8 01             	sub    $0x1,%eax
  429bb6:	85 c0                	test   %eax,%eax
  429bb8:	89 43 30             	mov    %eax,0x30(%rbx)
  429bbb:	0f 8f 6d ff ff ff    	jg     429b2e <CRYPTO_pop_info+0xee>
  429bc1:	48 c7 43 28 00 00 00 	movq   $0x0,0x28(%rbx)
  429bc8:	00 
  429bc9:	eb 50                	jmp    429c1b <CRYPTO_pop_info+0x1db>
  429bcb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  429bd0:	48 89 e6             	mov    %rsp,%rsi
  429bd3:	bf 20 a9 65 00       	mov    $0x65a920,%edi
  429bd8:	e8 73 af ff ff       	callq  424b50 <CRYPTO_THREADID_cmp>
  429bdd:	b9 2b 01 00 00       	mov    $0x12b,%ecx
  429be2:	89 c3                	mov    %eax,%ebx
  429be4:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  429be9:	be 14 00 00 00       	mov    $0x14,%esi
  429bee:	bf 06 00 00 00       	mov    $0x6,%edi
  429bf3:	e8 18 b2 ff ff       	callq  424e10 <CRYPTO_lock>
  429bf8:	85 db                	test   %ebx,%ebx
  429bfa:	0f 85 c7 fe ff ff    	jne    429ac7 <CRYPTO_pop_info+0x87>
  429c00:	e9 5a fe ff ff       	jmpq   429a5f <CRYPTO_pop_info+0x1f>
  429c05:	0f 1f 00             	nopl   (%rax)
  429c08:	31 db                	xor    %ebx,%ebx
  429c0a:	e9 24 ff ff ff       	jmpq   429b33 <CRYPTO_pop_info+0xf3>
  429c0f:	48 c7 43 28 00 00 00 	movq   $0x0,0x28(%rbx)
  429c16:	00 
  429c17:	83 6d 30 01          	subl   $0x1,0x30(%rbp)
  429c1b:	48 89 df             	mov    %rbx,%rdi
  429c1e:	e8 3d bb ff ff       	callq  425760 <CRYPTO_free>
  429c23:	e9 06 ff ff ff       	jmpq   429b2e <CRYPTO_pop_info+0xee>
  429c28:	e8 93 d2 fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  429c2d:	0f 1f 00             	nopl   (%rax)

0000000000429c30 <CRYPTO_remove_all_info>:
  429c30:	41 54                	push   %r12
  429c32:	55                   	push   %rbp
  429c33:	53                   	push   %rbx
  429c34:	48 83 ec 40          	sub    $0x40,%rsp
  429c38:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  429c3f:	00 00 
  429c41:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  429c46:	31 c0                	xor    %eax,%eax
  429c48:	f6 05 09 0d 23 00 01 	testb  $0x1,0x230d09(%rip)        # 65a958 <mh_mode>
  429c4f:	75 27                	jne    429c78 <CRYPTO_remove_all_info+0x48>
  429c51:	45 31 e4             	xor    %r12d,%r12d
  429c54:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  429c59:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  429c60:	00 00 
  429c62:	44 89 e0             	mov    %r12d,%eax
  429c65:	0f 85 ba 01 00 00    	jne    429e25 <CRYPTO_remove_all_info+0x1f5>
  429c6b:	48 83 c4 40          	add    $0x40,%rsp
  429c6f:	5b                   	pop    %rbx
  429c70:	5d                   	pop    %rbp
  429c71:	41 5c                	pop    %r12
  429c73:	c3                   	retq   
  429c74:	0f 1f 40 00          	nopl   0x0(%rax)
  429c78:	48 89 e7             	mov    %rsp,%rdi
  429c7b:	e8 90 ae ff ff       	callq  424b10 <CRYPTO_THREADID_current>
  429c80:	b9 26 01 00 00       	mov    $0x126,%ecx
  429c85:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  429c8a:	be 14 00 00 00       	mov    $0x14,%esi
  429c8f:	bf 05 00 00 00       	mov    $0x5,%edi
  429c94:	e8 77 b1 ff ff       	callq  424e10 <CRYPTO_lock>
  429c99:	f6 05 b8 0c 23 00 02 	testb  $0x2,0x230cb8(%rip)        # 65a958 <mh_mode>
  429ca0:	0f 84 4a 01 00 00    	je     429df0 <CRYPTO_remove_all_info+0x1c0>
  429ca6:	b9 2b 01 00 00       	mov    $0x12b,%ecx
  429cab:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  429cb0:	be 14 00 00 00       	mov    $0x14,%esi
  429cb5:	bf 06 00 00 00       	mov    $0x6,%edi
  429cba:	e8 51 b1 ff ff       	callq  424e10 <CRYPTO_lock>
  429cbf:	e8 7c f7 ff ff       	callq  429440 <CRYPTO_mem_ctrl.constprop.5>
  429cc4:	45 31 e4             	xor    %r12d,%r12d
  429cc7:	48 83 3d 71 0c 23 00 	cmpq   $0x0,0x230c71(%rip)        # 65a940 <amih>
  429cce:	00 
  429ccf:	75 41                	jne    429d12 <CRYPTO_remove_all_info+0xe2>
  429cd1:	e9 92 00 00 00       	jmpq   429d68 <CRYPTO_remove_all_info+0x138>
  429cd6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  429cdd:	00 00 00 
  429ce0:	83 45 30 01          	addl   $0x1,0x30(%rbp)
  429ce4:	48 8b 3d 55 0c 23 00 	mov    0x230c55(%rip),%rdi        # 65a940 <amih>
  429ceb:	48 89 ee             	mov    %rbp,%rsi
  429cee:	e8 5d ac 00 00       	callq  434950 <lh_insert>
  429cf3:	8b 43 30             	mov    0x30(%rbx),%eax
  429cf6:	8d 50 ff             	lea    -0x1(%rax),%edx
  429cf9:	85 d2                	test   %edx,%edx
  429cfb:	89 53 30             	mov    %edx,0x30(%rbx)
  429cfe:	0f 8e 26 01 00 00    	jle    429e2a <CRYPTO_remove_all_info+0x1fa>
  429d04:	41 83 c4 01          	add    $0x1,%r12d
  429d08:	48 83 3d 30 0c 23 00 	cmpq   $0x0,0x230c30(%rip)        # 65a940 <amih>
  429d0f:	00 
  429d10:	74 56                	je     429d68 <CRYPTO_remove_all_info+0x138>
  429d12:	48 89 e7             	mov    %rsp,%rdi
  429d15:	e8 f6 ad ff ff       	callq  424b10 <CRYPTO_THREADID_current>
  429d1a:	48 8b 3d 1f 0c 23 00 	mov    0x230c1f(%rip),%rdi        # 65a940 <amih>
  429d21:	48 89 e6             	mov    %rsp,%rsi
  429d24:	e8 47 ae 00 00       	callq  434b70 <lh_delete>
  429d29:	48 85 c0             	test   %rax,%rax
  429d2c:	48 89 c3             	mov    %rax,%rbx
  429d2f:	74 37                	je     429d68 <CRYPTO_remove_all_info+0x138>
  429d31:	48 8b 68 28          	mov    0x28(%rax),%rbp
  429d35:	48 85 ed             	test   %rbp,%rbp
  429d38:	75 a6                	jne    429ce0 <CRYPTO_remove_all_info+0xb0>
  429d3a:	8b 40 30             	mov    0x30(%rax),%eax
  429d3d:	83 e8 01             	sub    $0x1,%eax
  429d40:	85 c0                	test   %eax,%eax
  429d42:	89 43 30             	mov    %eax,0x30(%rbx)
  429d45:	7f bd                	jg     429d04 <CRYPTO_remove_all_info+0xd4>
  429d47:	48 c7 43 28 00 00 00 	movq   $0x0,0x28(%rbx)
  429d4e:	00 
  429d4f:	48 89 df             	mov    %rbx,%rdi
  429d52:	41 83 c4 01          	add    $0x1,%r12d
  429d56:	e8 05 ba ff ff       	callq  425760 <CRYPTO_free>
  429d5b:	48 83 3d dd 0b 23 00 	cmpq   $0x0,0x230bdd(%rip)        # 65a940 <amih>
  429d62:	00 
  429d63:	75 ad                	jne    429d12 <CRYPTO_remove_all_info+0xe2>
  429d65:	0f 1f 00             	nopl   (%rax)
  429d68:	b9 dc 00 00 00       	mov    $0xdc,%ecx
  429d6d:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  429d72:	be 14 00 00 00       	mov    $0x14,%esi
  429d77:	bf 09 00 00 00       	mov    $0x9,%edi
  429d7c:	e8 8f b0 ff ff       	callq  424e10 <CRYPTO_lock>
  429d81:	8b 05 d1 0b 23 00    	mov    0x230bd1(%rip),%eax        # 65a958 <mh_mode>
  429d87:	a8 01                	test   $0x1,%al
  429d89:	74 3d                	je     429dc8 <CRYPTO_remove_all_info+0x198>
  429d8b:	8b 15 9f 0b 23 00    	mov    0x230b9f(%rip),%edx        # 65a930 <num_disable>
  429d91:	85 d2                	test   %edx,%edx
  429d93:	74 33                	je     429dc8 <CRYPTO_remove_all_info+0x198>
  429d95:	83 ea 01             	sub    $0x1,%edx
  429d98:	85 d2                	test   %edx,%edx
  429d9a:	89 15 90 0b 23 00    	mov    %edx,0x230b90(%rip)        # 65a930 <num_disable>
  429da0:	75 26                	jne    429dc8 <CRYPTO_remove_all_info+0x198>
  429da2:	83 c8 02             	or     $0x2,%eax
  429da5:	b9 11 01 00 00       	mov    $0x111,%ecx
  429daa:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  429daf:	be 1b 00 00 00       	mov    $0x1b,%esi
  429db4:	bf 0a 00 00 00       	mov    $0xa,%edi
  429db9:	89 05 99 0b 23 00    	mov    %eax,0x230b99(%rip)        # 65a958 <mh_mode>
  429dbf:	e8 4c b0 ff ff       	callq  424e10 <CRYPTO_lock>
  429dc4:	0f 1f 40 00          	nopl   0x0(%rax)
  429dc8:	b9 1a 01 00 00       	mov    $0x11a,%ecx
  429dcd:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  429dd2:	be 14 00 00 00       	mov    $0x14,%esi
  429dd7:	bf 0a 00 00 00       	mov    $0xa,%edi
  429ddc:	e8 2f b0 ff ff       	callq  424e10 <CRYPTO_lock>
  429de1:	e9 6e fe ff ff       	jmpq   429c54 <CRYPTO_remove_all_info+0x24>
  429de6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  429ded:	00 00 00 
  429df0:	48 89 e6             	mov    %rsp,%rsi
  429df3:	bf 20 a9 65 00       	mov    $0x65a920,%edi
  429df8:	e8 53 ad ff ff       	callq  424b50 <CRYPTO_THREADID_cmp>
  429dfd:	b9 2b 01 00 00       	mov    $0x12b,%ecx
  429e02:	89 c3                	mov    %eax,%ebx
  429e04:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  429e09:	be 14 00 00 00       	mov    $0x14,%esi
  429e0e:	bf 06 00 00 00       	mov    $0x6,%edi
  429e13:	e8 f8 af ff ff       	callq  424e10 <CRYPTO_lock>
  429e18:	85 db                	test   %ebx,%ebx
  429e1a:	0f 85 9f fe ff ff    	jne    429cbf <CRYPTO_remove_all_info+0x8f>
  429e20:	e9 2c fe ff ff       	jmpq   429c51 <CRYPTO_remove_all_info+0x21>
  429e25:	e8 96 d0 fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  429e2a:	48 c7 43 28 00 00 00 	movq   $0x0,0x28(%rbx)
  429e31:	00 
  429e32:	83 6d 30 01          	subl   $0x1,0x30(%rbp)
  429e36:	e9 14 ff ff ff       	jmpq   429d4f <CRYPTO_remove_all_info+0x11f>
  429e3b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000429e40 <CRYPTO_dbg_malloc>:
  429e40:	41 56                	push   %r14
  429e42:	41 55                	push   %r13
  429e44:	41 83 e0 7f          	and    $0x7f,%r8d
  429e48:	41 54                	push   %r12
  429e4a:	55                   	push   %rbp
  429e4b:	53                   	push   %rbx
  429e4c:	48 83 ec 40          	sub    $0x40,%rsp
  429e50:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  429e57:	00 00 
  429e59:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  429e5e:	31 c0                	xor    %eax,%eax
  429e60:	41 83 f8 01          	cmp    $0x1,%r8d
  429e64:	75 11                	jne    429e77 <CRYPTO_dbg_malloc+0x37>
  429e66:	48 85 ff             	test   %rdi,%rdi
  429e69:	48 89 fd             	mov    %rdi,%rbp
  429e6c:	74 09                	je     429e77 <CRYPTO_dbg_malloc+0x37>
  429e6e:	f6 05 e3 0a 23 00 01 	testb  $0x1,0x230ae3(%rip)        # 65a958 <mh_mode>
  429e75:	75 29                	jne    429ea0 <CRYPTO_dbg_malloc+0x60>
  429e77:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  429e7c:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  429e83:	00 00 
  429e85:	0f 85 69 02 00 00    	jne    42a0f4 <CRYPTO_dbg_malloc+0x2b4>
  429e8b:	48 83 c4 40          	add    $0x40,%rsp
  429e8f:	5b                   	pop    %rbx
  429e90:	5d                   	pop    %rbp
  429e91:	41 5c                	pop    %r12
  429e93:	41 5d                	pop    %r13
  429e95:	41 5e                	pop    %r14
  429e97:	c3                   	retq   
  429e98:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  429e9f:	00 
  429ea0:	48 89 e7             	mov    %rsp,%rdi
  429ea3:	41 89 f4             	mov    %esi,%r12d
  429ea6:	49 89 d5             	mov    %rdx,%r13
  429ea9:	41 89 ce             	mov    %ecx,%r14d
  429eac:	e8 5f ac ff ff       	callq  424b10 <CRYPTO_THREADID_current>
  429eb1:	b9 26 01 00 00       	mov    $0x126,%ecx
  429eb6:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  429ebb:	be 14 00 00 00       	mov    $0x14,%esi
  429ec0:	bf 05 00 00 00       	mov    $0x5,%edi
  429ec5:	e8 46 af ff ff       	callq  424e10 <CRYPTO_lock>
  429eca:	f6 05 87 0a 23 00 02 	testb  $0x2,0x230a87(%rip)        # 65a958 <mh_mode>
  429ed1:	0f 84 b1 01 00 00    	je     42a088 <CRYPTO_dbg_malloc+0x248>
  429ed7:	b9 2b 01 00 00       	mov    $0x12b,%ecx
  429edc:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  429ee1:	be 14 00 00 00       	mov    $0x14,%esi
  429ee6:	bf 06 00 00 00       	mov    $0x6,%edi
  429eeb:	e8 20 af ff ff       	callq  424e10 <CRYPTO_lock>
  429ef0:	e8 4b f5 ff ff       	callq  429440 <CRYPTO_mem_ctrl.constprop.5>
  429ef5:	bf 48 00 00 00       	mov    $0x48,%edi
  429efa:	ba f2 01 00 00       	mov    $0x1f2,%edx
  429eff:	be 48 e8 43 00       	mov    $0x43e848,%esi
  429f04:	e8 f7 b4 ff ff       	callq  425400 <CRYPTO_malloc>
  429f09:	48 85 c0             	test   %rax,%rax
  429f0c:	48 89 c3             	mov    %rax,%rbx
  429f0f:	48 89 ef             	mov    %rbp,%rdi
  429f12:	0f 84 b7 00 00 00    	je     429fcf <CRYPTO_dbg_malloc+0x18f>
  429f18:	48 83 3d 28 0a 23 00 	cmpq   $0x0,0x230a28(%rip)        # 65a948 <mh>
  429f1f:	00 
  429f20:	0f 84 9a 01 00 00    	je     42a0c0 <CRYPTO_dbg_malloc+0x280>
  429f26:	48 8b 05 0b 0a 23 00 	mov    0x230a0b(%rip),%rax        # 65a938 <options>
  429f2d:	48 89 2b             	mov    %rbp,(%rbx)
  429f30:	4c 89 6b 10          	mov    %r13,0x10(%rbx)
  429f34:	44 89 73 18          	mov    %r14d,0x18(%rbx)
  429f38:	44 89 63 08          	mov    %r12d,0x8(%rbx)
  429f3c:	a8 02                	test   $0x2,%al
  429f3e:	0f 84 ec 00 00 00    	je     42a030 <CRYPTO_dbg_malloc+0x1f0>
  429f44:	48 8d 7b 20          	lea    0x20(%rbx),%rdi
  429f48:	e8 c3 ab ff ff       	callq  424b10 <CRYPTO_THREADID_current>
  429f4d:	48 8b 05 e4 09 23 00 	mov    0x2309e4(%rip),%rax        # 65a938 <options>
  429f54:	48 8b 15 f5 09 23 00 	mov    0x2309f5(%rip),%rdx        # 65a950 <order>
  429f5b:	a8 01                	test   $0x1,%al
  429f5d:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
  429f61:	48 89 53 30          	mov    %rdx,0x30(%rbx)
  429f65:	48 89 0d e4 09 23 00 	mov    %rcx,0x2309e4(%rip)        # 65a950 <order>
  429f6c:	0f 85 d6 00 00 00    	jne    42a048 <CRYPTO_dbg_malloc+0x208>
  429f72:	48 c7 43 38 00 00 00 	movq   $0x0,0x38(%rbx)
  429f79:	00 
  429f7a:	48 89 e7             	mov    %rsp,%rdi
  429f7d:	e8 8e ab ff ff       	callq  424b10 <CRYPTO_THREADID_current>
  429f82:	48 8b 3d b7 09 23 00 	mov    0x2309b7(%rip),%rdi        # 65a940 <amih>
  429f89:	48 c7 43 40 00 00 00 	movq   $0x0,0x40(%rbx)
  429f90:	00 
  429f91:	48 85 ff             	test   %rdi,%rdi
  429f94:	74 15                	je     429fab <CRYPTO_dbg_malloc+0x16b>
  429f96:	48 89 e6             	mov    %rsp,%rsi
  429f99:	e8 a2 ad 00 00       	callq  434d40 <lh_retrieve>
  429f9e:	48 85 c0             	test   %rax,%rax
  429fa1:	74 08                	je     429fab <CRYPTO_dbg_malloc+0x16b>
  429fa3:	48 89 43 40          	mov    %rax,0x40(%rbx)
  429fa7:	83 40 30 01          	addl   $0x1,0x30(%rax)
  429fab:	48 8b 3d 96 09 23 00 	mov    0x230996(%rip),%rdi        # 65a948 <mh>
  429fb2:	48 89 de             	mov    %rbx,%rsi
  429fb5:	e8 96 a9 00 00       	callq  434950 <lh_insert>
  429fba:	48 85 c0             	test   %rax,%rax
  429fbd:	74 15                	je     429fd4 <CRYPTO_dbg_malloc+0x194>
  429fbf:	48 8b 50 40          	mov    0x40(%rax),%rdx
  429fc3:	48 85 d2             	test   %rdx,%rdx
  429fc6:	74 04                	je     429fcc <CRYPTO_dbg_malloc+0x18c>
  429fc8:	83 6a 30 01          	subl   $0x1,0x30(%rdx)
  429fcc:	48 89 c7             	mov    %rax,%rdi
  429fcf:	e8 8c b7 ff ff       	callq  425760 <CRYPTO_free>
  429fd4:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  429fd9:	b9 dc 00 00 00       	mov    $0xdc,%ecx
  429fde:	be 14 00 00 00       	mov    $0x14,%esi
  429fe3:	bf 09 00 00 00       	mov    $0x9,%edi
  429fe8:	e8 23 ae ff ff       	callq  424e10 <CRYPTO_lock>
  429fed:	8b 15 65 09 23 00    	mov    0x230965(%rip),%edx        # 65a958 <mh_mode>
  429ff3:	f6 c2 01             	test   $0x1,%dl
  429ff6:	74 17                	je     42a00f <CRYPTO_dbg_malloc+0x1cf>
  429ff8:	8b 05 32 09 23 00    	mov    0x230932(%rip),%eax        # 65a930 <num_disable>
  429ffe:	85 c0                	test   %eax,%eax
  42a000:	74 0d                	je     42a00f <CRYPTO_dbg_malloc+0x1cf>
  42a002:	83 e8 01             	sub    $0x1,%eax
  42a005:	85 c0                	test   %eax,%eax
  42a007:	89 05 23 09 23 00    	mov    %eax,0x230923(%rip)        # 65a930 <num_disable>
  42a00d:	74 51                	je     42a060 <CRYPTO_dbg_malloc+0x220>
  42a00f:	b9 1a 01 00 00       	mov    $0x11a,%ecx
  42a014:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  42a019:	be 14 00 00 00       	mov    $0x14,%esi
  42a01e:	bf 0a 00 00 00       	mov    $0xa,%edi
  42a023:	e8 e8 ad ff ff       	callq  424e10 <CRYPTO_lock>
  42a028:	e9 4a fe ff ff       	jmpq   429e77 <CRYPTO_dbg_malloc+0x37>
  42a02d:	0f 1f 00             	nopl   (%rax)
  42a030:	48 c7 43 20 00 00 00 	movq   $0x0,0x20(%rbx)
  42a037:	00 
  42a038:	48 c7 43 28 00 00 00 	movq   $0x0,0x28(%rbx)
  42a03f:	00 
  42a040:	e9 0f ff ff ff       	jmpq   429f54 <CRYPTO_dbg_malloc+0x114>
  42a045:	0f 1f 00             	nopl   (%rax)
  42a048:	31 ff                	xor    %edi,%edi
  42a04a:	e8 c1 cf fd ff       	callq  407010 <time@plt>
  42a04f:	48 89 43 38          	mov    %rax,0x38(%rbx)
  42a053:	e9 22 ff ff ff       	jmpq   429f7a <CRYPTO_dbg_malloc+0x13a>
  42a058:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  42a05f:	00 
  42a060:	83 ca 02             	or     $0x2,%edx
  42a063:	b9 11 01 00 00       	mov    $0x111,%ecx
  42a068:	be 1b 00 00 00       	mov    $0x1b,%esi
  42a06d:	89 15 e5 08 23 00    	mov    %edx,0x2308e5(%rip)        # 65a958 <mh_mode>
  42a073:	bf 0a 00 00 00       	mov    $0xa,%edi
  42a078:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  42a07d:	e8 8e ad ff ff       	callq  424e10 <CRYPTO_lock>
  42a082:	eb 8b                	jmp    42a00f <CRYPTO_dbg_malloc+0x1cf>
  42a084:	0f 1f 40 00          	nopl   0x0(%rax)
  42a088:	48 89 e6             	mov    %rsp,%rsi
  42a08b:	bf 20 a9 65 00       	mov    $0x65a920,%edi
  42a090:	e8 bb aa ff ff       	callq  424b50 <CRYPTO_THREADID_cmp>
  42a095:	b9 2b 01 00 00       	mov    $0x12b,%ecx
  42a09a:	89 c3                	mov    %eax,%ebx
  42a09c:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  42a0a1:	be 14 00 00 00       	mov    $0x14,%esi
  42a0a6:	bf 06 00 00 00       	mov    $0x6,%edi
  42a0ab:	e8 60 ad ff ff       	callq  424e10 <CRYPTO_lock>
  42a0b0:	85 db                	test   %ebx,%ebx
  42a0b2:	0f 85 38 fe ff ff    	jne    429ef0 <CRYPTO_dbg_malloc+0xb0>
  42a0b8:	e9 ba fd ff ff       	jmpq   429e77 <CRYPTO_dbg_malloc+0x37>
  42a0bd:	0f 1f 00             	nopl   (%rax)
  42a0c0:	be 30 90 42 00       	mov    $0x429030,%esi
  42a0c5:	bf 40 90 42 00       	mov    $0x429040,%edi
  42a0ca:	e8 21 a6 00 00       	callq  4346f0 <lh_new>
  42a0cf:	48 85 c0             	test   %rax,%rax
  42a0d2:	48 89 05 6f 08 23 00 	mov    %rax,0x23086f(%rip)        # 65a948 <mh>
  42a0d9:	0f 85 47 fe ff ff    	jne    429f26 <CRYPTO_dbg_malloc+0xe6>
  42a0df:	48 89 ef             	mov    %rbp,%rdi
  42a0e2:	e8 79 b6 ff ff       	callq  425760 <CRYPTO_free>
  42a0e7:	48 89 df             	mov    %rbx,%rdi
  42a0ea:	e8 71 b6 ff ff       	callq  425760 <CRYPTO_free>
  42a0ef:	e9 e0 fe ff ff       	jmpq   429fd4 <CRYPTO_dbg_malloc+0x194>
  42a0f4:	e8 c7 cd fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  42a0f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000042a100 <CRYPTO_dbg_free>:
  42a100:	41 55                	push   %r13
  42a102:	41 54                	push   %r12
  42a104:	55                   	push   %rbp
  42a105:	53                   	push   %rbx
  42a106:	48 83 ec 68          	sub    $0x68,%rsp
  42a10a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  42a111:	00 00 
  42a113:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  42a118:	31 c0                	xor    %eax,%eax
  42a11a:	85 f6                	test   %esi,%esi
  42a11c:	75 11                	jne    42a12f <CRYPTO_dbg_free+0x2f>
  42a11e:	48 85 ff             	test   %rdi,%rdi
  42a121:	48 89 fb             	mov    %rdi,%rbx
  42a124:	74 09                	je     42a12f <CRYPTO_dbg_free+0x2f>
  42a126:	f6 05 2b 08 23 00 01 	testb  $0x1,0x23082b(%rip)        # 65a958 <mh_mode>
  42a12d:	75 21                	jne    42a150 <CRYPTO_dbg_free+0x50>
  42a12f:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
  42a134:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  42a13b:	00 00 
  42a13d:	0f 85 29 02 00 00    	jne    42a36c <CRYPTO_dbg_free+0x26c>
  42a143:	48 83 c4 68          	add    $0x68,%rsp
  42a147:	5b                   	pop    %rbx
  42a148:	5d                   	pop    %rbp
  42a149:	41 5c                	pop    %r12
  42a14b:	41 5d                	pop    %r13
  42a14d:	c3                   	retq   
  42a14e:	66 90                	xchg   %ax,%ax
  42a150:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  42a155:	e8 b6 a9 ff ff       	callq  424b10 <CRYPTO_THREADID_current>
  42a15a:	b9 26 01 00 00       	mov    $0x126,%ecx
  42a15f:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  42a164:	be 14 00 00 00       	mov    $0x14,%esi
  42a169:	bf 05 00 00 00       	mov    $0x5,%edi
  42a16e:	e8 9d ac ff ff       	callq  424e10 <CRYPTO_lock>
  42a173:	f6 05 de 07 23 00 02 	testb  $0x2,0x2307de(%rip)        # 65a958 <mh_mode>
  42a17a:	0f 84 50 01 00 00    	je     42a2d0 <CRYPTO_dbg_free+0x1d0>
  42a180:	b9 2b 01 00 00       	mov    $0x12b,%ecx
  42a185:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  42a18a:	be 14 00 00 00       	mov    $0x14,%esi
  42a18f:	bf 06 00 00 00       	mov    $0x6,%edi
  42a194:	e8 77 ac ff ff       	callq  424e10 <CRYPTO_lock>
  42a199:	48 83 3d a7 07 23 00 	cmpq   $0x0,0x2307a7(%rip)        # 65a948 <mh>
  42a1a0:	00 
  42a1a1:	74 8c                	je     42a12f <CRYPTO_dbg_free+0x2f>
  42a1a3:	e8 98 f2 ff ff       	callq  429440 <CRYPTO_mem_ctrl.constprop.5>
  42a1a8:	48 8b 3d 99 07 23 00 	mov    0x230799(%rip),%rdi        # 65a948 <mh>
  42a1af:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  42a1b4:	48 89 5c 24 10       	mov    %rbx,0x10(%rsp)
  42a1b9:	e8 b2 a9 00 00       	callq  434b70 <lh_delete>
  42a1be:	48 85 c0             	test   %rax,%rax
  42a1c1:	74 22                	je     42a1e5 <CRYPTO_dbg_free+0xe5>
  42a1c3:	48 8b 58 40          	mov    0x40(%rax),%rbx
  42a1c7:	48 85 db             	test   %rbx,%rbx
  42a1ca:	74 11                	je     42a1dd <CRYPTO_dbg_free+0xdd>
  42a1cc:	8b 4b 30             	mov    0x30(%rbx),%ecx
  42a1cf:	8d 51 ff             	lea    -0x1(%rcx),%edx
  42a1d2:	85 d2                	test   %edx,%edx
  42a1d4:	89 53 30             	mov    %edx,0x30(%rbx)
  42a1d7:	0f 8e 93 00 00 00    	jle    42a270 <CRYPTO_dbg_free+0x170>
  42a1dd:	48 89 c7             	mov    %rax,%rdi
  42a1e0:	e8 7b b5 ff ff       	callq  425760 <CRYPTO_free>
  42a1e5:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  42a1ea:	b9 dc 00 00 00       	mov    $0xdc,%ecx
  42a1ef:	be 14 00 00 00       	mov    $0x14,%esi
  42a1f4:	bf 09 00 00 00       	mov    $0x9,%edi
  42a1f9:	e8 12 ac ff ff       	callq  424e10 <CRYPTO_lock>
  42a1fe:	8b 15 54 07 23 00    	mov    0x230754(%rip),%edx        # 65a958 <mh_mode>
  42a204:	f6 c2 01             	test   $0x1,%dl
  42a207:	74 3f                	je     42a248 <CRYPTO_dbg_free+0x148>
  42a209:	8b 05 21 07 23 00    	mov    0x230721(%rip),%eax        # 65a930 <num_disable>
  42a20f:	85 c0                	test   %eax,%eax
  42a211:	74 35                	je     42a248 <CRYPTO_dbg_free+0x148>
  42a213:	83 e8 01             	sub    $0x1,%eax
  42a216:	85 c0                	test   %eax,%eax
  42a218:	89 05 12 07 23 00    	mov    %eax,0x230712(%rip)        # 65a930 <num_disable>
  42a21e:	75 28                	jne    42a248 <CRYPTO_dbg_free+0x148>
  42a220:	83 ca 02             	or     $0x2,%edx
  42a223:	b9 11 01 00 00       	mov    $0x111,%ecx
  42a228:	be 1b 00 00 00       	mov    $0x1b,%esi
  42a22d:	89 15 25 07 23 00    	mov    %edx,0x230725(%rip)        # 65a958 <mh_mode>
  42a233:	bf 0a 00 00 00       	mov    $0xa,%edi
  42a238:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  42a23d:	e8 ce ab ff ff       	callq  424e10 <CRYPTO_lock>
  42a242:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  42a248:	b9 1a 01 00 00       	mov    $0x11a,%ecx
  42a24d:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  42a252:	be 14 00 00 00       	mov    $0x14,%esi
  42a257:	bf 0a 00 00 00       	mov    $0xa,%edi
  42a25c:	e8 af ab ff ff       	callq  424e10 <CRYPTO_lock>
  42a261:	e9 c9 fe ff ff       	jmpq   42a12f <CRYPTO_dbg_free+0x2f>
  42a266:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  42a26d:	00 00 00 
  42a270:	48 8b 6b 28          	mov    0x28(%rbx),%rbp
  42a274:	48 85 ed             	test   %rbp,%rbp
  42a277:	74 39                	je     42a2b2 <CRYPTO_dbg_free+0x1b2>
  42a279:	8b 4d 30             	mov    0x30(%rbp),%ecx
  42a27c:	8d 51 ff             	lea    -0x1(%rcx),%edx
  42a27f:	85 d2                	test   %edx,%edx
  42a281:	89 55 30             	mov    %edx,0x30(%rbp)
  42a284:	7f 2c                	jg     42a2b2 <CRYPTO_dbg_free+0x1b2>
  42a286:	4c 8b 65 28          	mov    0x28(%rbp),%r12
  42a28a:	4d 85 e4             	test   %r12,%r12
  42a28d:	74 11                	je     42a2a0 <CRYPTO_dbg_free+0x1a0>
  42a28f:	41 8b 4c 24 30       	mov    0x30(%r12),%ecx
  42a294:	8d 51 ff             	lea    -0x1(%rcx),%edx
  42a297:	85 d2                	test   %edx,%edx
  42a299:	41 89 54 24 30       	mov    %edx,0x30(%r12)
  42a29e:	7e 70                	jle    42a310 <CRYPTO_dbg_free+0x210>
  42a2a0:	48 89 ef             	mov    %rbp,%rdi
  42a2a3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  42a2a8:	e8 b3 b4 ff ff       	callq  425760 <CRYPTO_free>
  42a2ad:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  42a2b2:	48 89 df             	mov    %rbx,%rdi
  42a2b5:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  42a2ba:	e8 a1 b4 ff ff       	callq  425760 <CRYPTO_free>
  42a2bf:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  42a2c4:	e9 14 ff ff ff       	jmpq   42a1dd <CRYPTO_dbg_free+0xdd>
  42a2c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  42a2d0:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  42a2d5:	bf 20 a9 65 00       	mov    $0x65a920,%edi
  42a2da:	e8 71 a8 ff ff       	callq  424b50 <CRYPTO_THREADID_cmp>
  42a2df:	b9 2b 01 00 00       	mov    $0x12b,%ecx
  42a2e4:	89 c5                	mov    %eax,%ebp
  42a2e6:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  42a2eb:	be 14 00 00 00       	mov    $0x14,%esi
  42a2f0:	bf 06 00 00 00       	mov    $0x6,%edi
  42a2f5:	e8 16 ab ff ff       	callq  424e10 <CRYPTO_lock>
  42a2fa:	85 ed                	test   %ebp,%ebp
  42a2fc:	0f 85 97 fe ff ff    	jne    42a199 <CRYPTO_dbg_free+0x99>
  42a302:	e9 28 fe ff ff       	jmpq   42a12f <CRYPTO_dbg_free+0x2f>
  42a307:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  42a30e:	00 00 
  42a310:	4d 8b 6c 24 28       	mov    0x28(%r12),%r13
  42a315:	4d 85 ed             	test   %r13,%r13
  42a318:	74 0f                	je     42a329 <CRYPTO_dbg_free+0x229>
  42a31a:	41 8b 4d 30          	mov    0x30(%r13),%ecx
  42a31e:	8d 51 ff             	lea    -0x1(%rcx),%edx
  42a321:	85 d2                	test   %edx,%edx
  42a323:	41 89 55 30          	mov    %edx,0x30(%r13)
  42a327:	7e 17                	jle    42a340 <CRYPTO_dbg_free+0x240>
  42a329:	4c 89 e7             	mov    %r12,%rdi
  42a32c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  42a331:	e8 2a b4 ff ff       	callq  425760 <CRYPTO_free>
  42a336:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  42a33b:	e9 60 ff ff ff       	jmpq   42a2a0 <CRYPTO_dbg_free+0x1a0>
  42a340:	49 8b 7d 28          	mov    0x28(%r13),%rdi
  42a344:	48 85 ff             	test   %rdi,%rdi
  42a347:	74 0f                	je     42a358 <CRYPTO_dbg_free+0x258>
  42a349:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  42a34e:	e8 fd f1 ff ff       	callq  429550 <app_info_free>
  42a353:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  42a358:	4c 89 ef             	mov    %r13,%rdi
  42a35b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  42a360:	e8 fb b3 ff ff       	callq  425760 <CRYPTO_free>
  42a365:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  42a36a:	eb bd                	jmp    42a329 <CRYPTO_dbg_free+0x229>
  42a36c:	e8 4f cb fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  42a371:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  42a378:	0f 1f 84 00 00 00 00 
  42a37f:	00 

000000000042a380 <CRYPTO_dbg_realloc>:
  42a380:	41 55                	push   %r13
  42a382:	41 54                	push   %r12
  42a384:	55                   	push   %rbp
  42a385:	53                   	push   %rbx
  42a386:	48 83 ec 58          	sub    $0x58,%rsp
  42a38a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  42a391:	00 00 
  42a393:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  42a398:	31 c0                	xor    %eax,%eax
  42a39a:	41 83 f9 01          	cmp    $0x1,%r9d
  42a39e:	75 20                	jne    42a3c0 <CRYPTO_dbg_realloc+0x40>
  42a3a0:	48 85 f6             	test   %rsi,%rsi
  42a3a3:	48 89 f3             	mov    %rsi,%rbx
  42a3a6:	74 18                	je     42a3c0 <CRYPTO_dbg_realloc+0x40>
  42a3a8:	48 85 ff             	test   %rdi,%rdi
  42a3ab:	48 89 fd             	mov    %rdi,%rbp
  42a3ae:	41 89 d4             	mov    %edx,%r12d
  42a3b1:	0f 84 69 01 00 00    	je     42a520 <CRYPTO_dbg_realloc+0x1a0>
  42a3b7:	f6 05 9a 05 23 00 01 	testb  $0x1,0x23059a(%rip)        # 65a958 <mh_mode>
  42a3be:	75 20                	jne    42a3e0 <CRYPTO_dbg_realloc+0x60>
  42a3c0:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  42a3c5:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  42a3cc:	00 00 
  42a3ce:	0f 85 68 01 00 00    	jne    42a53c <CRYPTO_dbg_realloc+0x1bc>
  42a3d4:	48 83 c4 58          	add    $0x58,%rsp
  42a3d8:	5b                   	pop    %rbx
  42a3d9:	5d                   	pop    %rbp
  42a3da:	41 5c                	pop    %r12
  42a3dc:	41 5d                	pop    %r13
  42a3de:	c3                   	retq   
  42a3df:	90                   	nop
  42a3e0:	48 89 e7             	mov    %rsp,%rdi
  42a3e3:	e8 28 a7 ff ff       	callq  424b10 <CRYPTO_THREADID_current>
  42a3e8:	b9 26 01 00 00       	mov    $0x126,%ecx
  42a3ed:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  42a3f2:	be 14 00 00 00       	mov    $0x14,%esi
  42a3f7:	bf 05 00 00 00       	mov    $0x5,%edi
  42a3fc:	e8 0f aa ff ff       	callq  424e10 <CRYPTO_lock>
  42a401:	f6 05 50 05 23 00 02 	testb  $0x2,0x230550(%rip)        # 65a958 <mh_mode>
  42a408:	0f 84 d2 00 00 00    	je     42a4e0 <CRYPTO_dbg_realloc+0x160>
  42a40e:	b9 2b 01 00 00       	mov    $0x12b,%ecx
  42a413:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  42a418:	be 14 00 00 00       	mov    $0x14,%esi
  42a41d:	bf 06 00 00 00       	mov    $0x6,%edi
  42a422:	e8 e9 a9 ff ff       	callq  424e10 <CRYPTO_lock>
  42a427:	e8 14 f0 ff ff       	callq  429440 <CRYPTO_mem_ctrl.constprop.5>
  42a42c:	48 8b 3d 15 05 23 00 	mov    0x230515(%rip),%rdi        # 65a948 <mh>
  42a433:	48 89 e6             	mov    %rsp,%rsi
  42a436:	48 89 2c 24          	mov    %rbp,(%rsp)
  42a43a:	e8 31 a7 00 00       	callq  434b70 <lh_delete>
  42a43f:	48 85 c0             	test   %rax,%rax
  42a442:	74 16                	je     42a45a <CRYPTO_dbg_realloc+0xda>
  42a444:	48 8b 3d fd 04 23 00 	mov    0x2304fd(%rip),%rdi        # 65a948 <mh>
  42a44b:	48 89 18             	mov    %rbx,(%rax)
  42a44e:	48 89 c6             	mov    %rax,%rsi
  42a451:	44 89 60 08          	mov    %r12d,0x8(%rax)
  42a455:	e8 f6 a4 00 00       	callq  434950 <lh_insert>
  42a45a:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  42a45f:	b9 dc 00 00 00       	mov    $0xdc,%ecx
  42a464:	be 14 00 00 00       	mov    $0x14,%esi
  42a469:	bf 09 00 00 00       	mov    $0x9,%edi
  42a46e:	e8 9d a9 ff ff       	callq  424e10 <CRYPTO_lock>
  42a473:	8b 15 df 04 23 00    	mov    0x2304df(%rip),%edx        # 65a958 <mh_mode>
  42a479:	f6 c2 01             	test   $0x1,%dl
  42a47c:	74 17                	je     42a495 <CRYPTO_dbg_realloc+0x115>
  42a47e:	8b 05 ac 04 23 00    	mov    0x2304ac(%rip),%eax        # 65a930 <num_disable>
  42a484:	85 c0                	test   %eax,%eax
  42a486:	74 0d                	je     42a495 <CRYPTO_dbg_realloc+0x115>
  42a488:	83 e8 01             	sub    $0x1,%eax
  42a48b:	85 c0                	test   %eax,%eax
  42a48d:	89 05 9d 04 23 00    	mov    %eax,0x23049d(%rip)        # 65a930 <num_disable>
  42a493:	74 23                	je     42a4b8 <CRYPTO_dbg_realloc+0x138>
  42a495:	b9 1a 01 00 00       	mov    $0x11a,%ecx
  42a49a:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  42a49f:	be 14 00 00 00       	mov    $0x14,%esi
  42a4a4:	bf 0a 00 00 00       	mov    $0xa,%edi
  42a4a9:	e8 62 a9 ff ff       	callq  424e10 <CRYPTO_lock>
  42a4ae:	e9 0d ff ff ff       	jmpq   42a3c0 <CRYPTO_dbg_realloc+0x40>
  42a4b3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42a4b8:	83 ca 02             	or     $0x2,%edx
  42a4bb:	b9 11 01 00 00       	mov    $0x111,%ecx
  42a4c0:	be 1b 00 00 00       	mov    $0x1b,%esi
  42a4c5:	89 15 8d 04 23 00    	mov    %edx,0x23048d(%rip)        # 65a958 <mh_mode>
  42a4cb:	bf 0a 00 00 00       	mov    $0xa,%edi
  42a4d0:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  42a4d5:	e8 36 a9 ff ff       	callq  424e10 <CRYPTO_lock>
  42a4da:	eb b9                	jmp    42a495 <CRYPTO_dbg_realloc+0x115>
  42a4dc:	0f 1f 40 00          	nopl   0x0(%rax)
  42a4e0:	48 89 e6             	mov    %rsp,%rsi
  42a4e3:	bf 20 a9 65 00       	mov    $0x65a920,%edi
  42a4e8:	e8 63 a6 ff ff       	callq  424b50 <CRYPTO_THREADID_cmp>
  42a4ed:	b9 2b 01 00 00       	mov    $0x12b,%ecx
  42a4f2:	41 89 c5             	mov    %eax,%r13d
  42a4f5:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  42a4fa:	be 14 00 00 00       	mov    $0x14,%esi
  42a4ff:	bf 06 00 00 00       	mov    $0x6,%edi
  42a504:	e8 07 a9 ff ff       	callq  424e10 <CRYPTO_lock>
  42a509:	45 85 ed             	test   %r13d,%r13d
  42a50c:	0f 85 15 ff ff ff    	jne    42a427 <CRYPTO_dbg_realloc+0xa7>
  42a512:	e9 a9 fe ff ff       	jmpq   42a3c0 <CRYPTO_dbg_realloc+0x40>
  42a517:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  42a51e:	00 00 
  42a520:	48 89 ca             	mov    %rcx,%rdx
  42a523:	44 89 e6             	mov    %r12d,%esi
  42a526:	44 89 c1             	mov    %r8d,%ecx
  42a529:	48 89 df             	mov    %rbx,%rdi
  42a52c:	41 b8 81 00 00 00    	mov    $0x81,%r8d
  42a532:	e8 09 f9 ff ff       	callq  429e40 <CRYPTO_dbg_malloc>
  42a537:	e9 84 fe ff ff       	jmpq   42a3c0 <CRYPTO_dbg_realloc+0x40>
  42a53c:	e8 7f c9 fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  42a541:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  42a548:	0f 1f 84 00 00 00 00 
  42a54f:	00 

000000000042a550 <CRYPTO_mem_leaks>:
  42a550:	53                   	push   %rbx
  42a551:	48 89 fb             	mov    %rdi,%rbx
  42a554:	48 83 ec 20          	sub    $0x20,%rsp
  42a558:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  42a55f:	00 00 
  42a561:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  42a566:	31 c0                	xor    %eax,%eax
  42a568:	48 83 3d d8 03 23 00 	cmpq   $0x0,0x2303d8(%rip)        # 65a948 <mh>
  42a56f:	00 
  42a570:	0f 84 7a 01 00 00    	je     42a6f0 <CRYPTO_mem_leaks+0x1a0>
  42a576:	e8 c5 ee ff ff       	callq  429440 <CRYPTO_mem_ctrl.constprop.5>
  42a57b:	48 8b 3d c6 03 23 00 	mov    0x2303c6(%rip),%rdi        # 65a948 <mh>
  42a582:	48 89 1c 24          	mov    %rbx,(%rsp)
  42a586:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
  42a58d:	00 00 
  42a58f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%rsp)
  42a596:	00 
  42a597:	48 85 ff             	test   %rdi,%rdi
  42a59a:	0f 84 c8 00 00 00    	je     42a668 <CRYPTO_mem_leaks+0x118>
  42a5a0:	48 89 e2             	mov    %rsp,%rdx
  42a5a3:	be 30 94 42 00       	mov    $0x429430,%esi
  42a5a8:	e8 d3 a8 00 00       	callq  434e80 <lh_doall_arg>
  42a5ad:	8b 4c 24 08          	mov    0x8(%rsp),%ecx
  42a5b1:	85 c9                	test   %ecx,%ecx
  42a5b3:	0f 84 af 00 00 00    	je     42a668 <CRYPTO_mem_leaks+0x118>
  42a5b9:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  42a5be:	be 80 e8 43 00       	mov    $0x43e880,%esi
  42a5c3:	48 89 df             	mov    %rbx,%rdi
  42a5c6:	31 c0                	xor    %eax,%eax
  42a5c8:	e8 63 9e 00 00       	callq  434430 <BIO_printf>
  42a5cd:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  42a5d2:	b9 dc 00 00 00       	mov    $0xdc,%ecx
  42a5d7:	be 14 00 00 00       	mov    $0x14,%esi
  42a5dc:	bf 09 00 00 00       	mov    $0x9,%edi
  42a5e1:	e8 2a a8 ff ff       	callq  424e10 <CRYPTO_lock>
  42a5e6:	8b 15 6c 03 23 00    	mov    0x23036c(%rip),%edx        # 65a958 <mh_mode>
  42a5ec:	f6 c2 01             	test   $0x1,%dl
  42a5ef:	74 3f                	je     42a630 <CRYPTO_mem_leaks+0xe0>
  42a5f1:	8b 05 39 03 23 00    	mov    0x230339(%rip),%eax        # 65a930 <num_disable>
  42a5f7:	85 c0                	test   %eax,%eax
  42a5f9:	74 35                	je     42a630 <CRYPTO_mem_leaks+0xe0>
  42a5fb:	83 e8 01             	sub    $0x1,%eax
  42a5fe:	85 c0                	test   %eax,%eax
  42a600:	89 05 2a 03 23 00    	mov    %eax,0x23032a(%rip)        # 65a930 <num_disable>
  42a606:	75 28                	jne    42a630 <CRYPTO_mem_leaks+0xe0>
  42a608:	83 ca 02             	or     $0x2,%edx
  42a60b:	b9 11 01 00 00       	mov    $0x111,%ecx
  42a610:	be 1b 00 00 00       	mov    $0x1b,%esi
  42a615:	89 15 3d 03 23 00    	mov    %edx,0x23033d(%rip)        # 65a958 <mh_mode>
  42a61b:	bf 0a 00 00 00       	mov    $0xa,%edi
  42a620:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  42a625:	e8 e6 a7 ff ff       	callq  424e10 <CRYPTO_lock>
  42a62a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  42a630:	b9 1a 01 00 00       	mov    $0x11a,%ecx
  42a635:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  42a63a:	be 14 00 00 00       	mov    $0x14,%esi
  42a63f:	bf 0a 00 00 00       	mov    $0xa,%edi
  42a644:	e8 c7 a7 ff ff       	callq  424e10 <CRYPTO_lock>
  42a649:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  42a64e:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  42a655:	00 00 
  42a657:	0f 85 c4 00 00 00    	jne    42a721 <CRYPTO_mem_leaks+0x1d1>
  42a65d:	48 83 c4 20          	add    $0x20,%rsp
  42a661:	5b                   	pop    %rbx
  42a662:	c3                   	retq   
  42a663:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42a668:	bf 09 00 00 00       	mov    $0x9,%edi
  42a66d:	b9 1e 03 00 00       	mov    $0x31e,%ecx
  42a672:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  42a677:	be 14 00 00 00       	mov    $0x14,%esi
  42a67c:	e8 8f a7 ff ff       	callq  424e10 <CRYPTO_lock>
  42a681:	48 8b 3d c0 02 23 00 	mov    0x2302c0(%rip),%rdi        # 65a948 <mh>
  42a688:	8b 1d ca 02 23 00    	mov    0x2302ca(%rip),%ebx        # 65a958 <mh_mode>
  42a68e:	c7 05 c0 02 23 00 00 	movl   $0x0,0x2302c0(%rip)        # 65a958 <mh_mode>
  42a695:	00 00 00 
  42a698:	48 85 ff             	test   %rdi,%rdi
  42a69b:	74 10                	je     42a6ad <CRYPTO_mem_leaks+0x15d>
  42a69d:	e8 3e a2 00 00       	callq  4348e0 <lh_free>
  42a6a2:	48 c7 05 9b 02 23 00 	movq   $0x0,0x23029b(%rip)        # 65a948 <mh>
  42a6a9:	00 00 00 00 
  42a6ad:	48 8b 3d 8c 02 23 00 	mov    0x23028c(%rip),%rdi        # 65a940 <amih>
  42a6b4:	48 85 ff             	test   %rdi,%rdi
  42a6b7:	74 0a                	je     42a6c3 <CRYPTO_mem_leaks+0x173>
  42a6b9:	e8 42 a8 00 00       	callq  434f00 <lh_num_items>
  42a6be:	48 85 c0             	test   %rax,%rax
  42a6c1:	74 45                	je     42a708 <CRYPTO_mem_leaks+0x1b8>
  42a6c3:	b9 34 03 00 00       	mov    $0x334,%ecx
  42a6c8:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  42a6cd:	be 14 00 00 00       	mov    $0x14,%esi
  42a6d2:	bf 0a 00 00 00       	mov    $0xa,%edi
  42a6d7:	89 1d 7b 02 23 00    	mov    %ebx,0x23027b(%rip)        # 65a958 <mh_mode>
  42a6dd:	e8 2e a7 ff ff       	callq  424e10 <CRYPTO_lock>
  42a6e2:	e9 e6 fe ff ff       	jmpq   42a5cd <CRYPTO_mem_leaks+0x7d>
  42a6e7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  42a6ee:	00 00 
  42a6f0:	48 83 3d 48 02 23 00 	cmpq   $0x0,0x230248(%rip)        # 65a940 <amih>
  42a6f7:	00 
  42a6f8:	0f 85 78 fe ff ff    	jne    42a576 <CRYPTO_mem_leaks+0x26>
  42a6fe:	e9 46 ff ff ff       	jmpq   42a649 <CRYPTO_mem_leaks+0xf9>
  42a703:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42a708:	48 8b 3d 31 02 23 00 	mov    0x230231(%rip),%rdi        # 65a940 <amih>
  42a70f:	e8 cc a1 00 00       	callq  4348e0 <lh_free>
  42a714:	48 c7 05 21 02 23 00 	movq   $0x0,0x230221(%rip)        # 65a940 <amih>
  42a71b:	00 00 00 00 
  42a71f:	eb a2                	jmp    42a6c3 <CRYPTO_mem_leaks+0x173>
  42a721:	e8 9a c7 fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  42a726:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  42a72d:	00 00 00 

000000000042a730 <CRYPTO_mem_leaks_fp>:
  42a730:	48 83 3d 10 02 23 00 	cmpq   $0x0,0x230210(%rip)        # 65a948 <mh>
  42a737:	00 
  42a738:	0f 84 d0 00 00 00    	je     42a80e <CRYPTO_mem_leaks_fp+0xde>
  42a73e:	55                   	push   %rbp
  42a73f:	53                   	push   %rbx
  42a740:	48 89 fd             	mov    %rdi,%rbp
  42a743:	48 83 ec 08          	sub    $0x8,%rsp
  42a747:	e8 f4 ec ff ff       	callq  429440 <CRYPTO_mem_ctrl.constprop.5>
  42a74c:	e8 8f 71 00 00       	callq  4318e0 <BIO_s_file>
  42a751:	48 89 c7             	mov    %rax,%rdi
  42a754:	e8 d7 55 00 00       	callq  42fd30 <BIO_new>
  42a759:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  42a75e:	b9 dc 00 00 00       	mov    $0xdc,%ecx
  42a763:	be 14 00 00 00       	mov    $0x14,%esi
  42a768:	bf 09 00 00 00       	mov    $0x9,%edi
  42a76d:	48 89 c3             	mov    %rax,%rbx
  42a770:	e8 9b a6 ff ff       	callq  424e10 <CRYPTO_lock>
  42a775:	8b 15 dd 01 23 00    	mov    0x2301dd(%rip),%edx        # 65a958 <mh_mode>
  42a77b:	f6 c2 01             	test   $0x1,%dl
  42a77e:	74 17                	je     42a797 <CRYPTO_mem_leaks_fp+0x67>
  42a780:	8b 05 aa 01 23 00    	mov    0x2301aa(%rip),%eax        # 65a930 <num_disable>
  42a786:	85 c0                	test   %eax,%eax
  42a788:	74 0d                	je     42a797 <CRYPTO_mem_leaks_fp+0x67>
  42a78a:	83 e8 01             	sub    $0x1,%eax
  42a78d:	85 c0                	test   %eax,%eax
  42a78f:	89 05 9b 01 23 00    	mov    %eax,0x23019b(%rip)        # 65a930 <num_disable>
  42a795:	74 49                	je     42a7e0 <CRYPTO_mem_leaks_fp+0xb0>
  42a797:	b9 1a 01 00 00       	mov    $0x11a,%ecx
  42a79c:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  42a7a1:	be 14 00 00 00       	mov    $0x14,%esi
  42a7a6:	bf 0a 00 00 00       	mov    $0xa,%edi
  42a7ab:	e8 60 a6 ff ff       	callq  424e10 <CRYPTO_lock>
  42a7b0:	48 85 db             	test   %rbx,%rbx
  42a7b3:	74 53                	je     42a808 <CRYPTO_mem_leaks_fp+0xd8>
  42a7b5:	48 89 e9             	mov    %rbp,%rcx
  42a7b8:	48 89 df             	mov    %rbx,%rdi
  42a7bb:	31 d2                	xor    %edx,%edx
  42a7bd:	be 6a 00 00 00       	mov    $0x6a,%esi
  42a7c2:	e8 29 60 00 00       	callq  4307f0 <BIO_ctrl>
  42a7c7:	48 89 df             	mov    %rbx,%rdi
  42a7ca:	e8 81 fd ff ff       	callq  42a550 <CRYPTO_mem_leaks>
  42a7cf:	48 83 c4 08          	add    $0x8,%rsp
  42a7d3:	48 89 df             	mov    %rbx,%rdi
  42a7d6:	5b                   	pop    %rbx
  42a7d7:	5d                   	pop    %rbp
  42a7d8:	e9 33 57 00 00       	jmpq   42ff10 <BIO_free>
  42a7dd:	0f 1f 00             	nopl   (%rax)
  42a7e0:	83 ca 02             	or     $0x2,%edx
  42a7e3:	b9 11 01 00 00       	mov    $0x111,%ecx
  42a7e8:	be 1b 00 00 00       	mov    $0x1b,%esi
  42a7ed:	89 15 65 01 23 00    	mov    %edx,0x230165(%rip)        # 65a958 <mh_mode>
  42a7f3:	bf 0a 00 00 00       	mov    $0xa,%edi
  42a7f8:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  42a7fd:	e8 0e a6 ff ff       	callq  424e10 <CRYPTO_lock>
  42a802:	eb 93                	jmp    42a797 <CRYPTO_mem_leaks_fp+0x67>
  42a804:	0f 1f 40 00          	nopl   0x0(%rax)
  42a808:	48 83 c4 08          	add    $0x8,%rsp
  42a80c:	5b                   	pop    %rbx
  42a80d:	5d                   	pop    %rbp
  42a80e:	f3 c3                	repz retq 

000000000042a810 <CRYPTO_mem_leaks_cb>:
  42a810:	48 83 ec 18          	sub    $0x18,%rsp
  42a814:	48 83 3d 2c 01 23 00 	cmpq   $0x0,0x23012c(%rip)        # 65a948 <mh>
  42a81b:	00 
  42a81c:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  42a821:	74 48                	je     42a86b <CRYPTO_mem_leaks_cb+0x5b>
  42a823:	b9 66 03 00 00       	mov    $0x366,%ecx
  42a828:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  42a82d:	be 1b 00 00 00       	mov    $0x1b,%esi
  42a832:	bf 09 00 00 00       	mov    $0x9,%edi
  42a837:	e8 d4 a5 ff ff       	callq  424e10 <CRYPTO_lock>
  42a83c:	48 8b 3d 05 01 23 00 	mov    0x230105(%rip),%rdi        # 65a948 <mh>
  42a843:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx
  42a848:	be 80 90 42 00       	mov    $0x429080,%esi
  42a84d:	e8 2e a6 00 00       	callq  434e80 <lh_doall_arg>
  42a852:	b9 69 03 00 00       	mov    $0x369,%ecx
  42a857:	ba 48 e8 43 00       	mov    $0x43e848,%edx
  42a85c:	be 1b 00 00 00       	mov    $0x1b,%esi
  42a861:	bf 0a 00 00 00       	mov    $0xa,%edi
  42a866:	e8 a5 a5 ff ff       	callq  424e10 <CRYPTO_lock>
  42a86b:	48 83 c4 18          	add    $0x18,%rsp
  42a86f:	c3                   	retq   

000000000042a870 <cleanup1_LHASH_DOALL>:
  42a870:	48 8b 47 08          	mov    0x8(%rdi),%rax
  42a874:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%rax)
  42a87b:	83 48 20 0d          	orl    $0xd,0x20(%rax)
  42a87f:	c3                   	retq   

000000000042a880 <cleanup2_LHASH_DOALL>:
  42a880:	48 8b 47 08          	mov    0x8(%rdi),%rax
  42a884:	83 40 10 01          	addl   $0x1,0x10(%rax)
  42a888:	c3                   	retq   
  42a889:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000042a890 <cleanup3_LHASH_DOALL>:
  42a890:	53                   	push   %rbx
  42a891:	48 89 fb             	mov    %rdi,%rbx
  42a894:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  42a898:	83 6f 10 01          	subl   $0x1,0x10(%rdi)
  42a89c:	75 05                	jne    42a8a3 <cleanup3_LHASH_DOALL+0x13>
  42a89e:	e8 3d b0 00 00       	callq  4358e0 <ASN1_OBJECT_free>
  42a8a3:	48 89 df             	mov    %rbx,%rdi
  42a8a6:	5b                   	pop    %rbx
  42a8a7:	e9 b4 ae ff ff       	jmpq   425760 <CRYPTO_free>
  42a8ac:	0f 1f 40 00          	nopl   0x0(%rax)

000000000042a8b0 <added_obj_LHASH_HASH>:
  42a8b0:	53                   	push   %rbx
  42a8b1:	8b 07                	mov    (%rdi),%eax
  42a8b3:	48 89 fb             	mov    %rdi,%rbx
  42a8b6:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  42a8ba:	83 f8 01             	cmp    $0x1,%eax
  42a8bd:	0f 84 a5 00 00 00    	je     42a968 <added_obj_LHASH_HASH+0xb8>
  42a8c3:	7e 3b                	jle    42a900 <added_obj_LHASH_HASH+0x50>
  42a8c5:	83 f8 02             	cmp    $0x2,%eax
  42a8c8:	74 26                	je     42a8f0 <added_obj_LHASH_HASH+0x40>
  42a8ca:	83 f8 03             	cmp    $0x3,%eax
  42a8cd:	0f 85 8d 00 00 00    	jne    42a960 <added_obj_LHASH_HASH+0xb0>
  42a8d3:	4c 63 42 10          	movslq 0x10(%rdx),%r8
  42a8d7:	b8 03 00 00 00       	mov    $0x3,%eax
  42a8dc:	c1 e0 1e             	shl    $0x1e,%eax
  42a8df:	41 81 e0 ff ff ff 3f 	and    $0x3fffffff,%r8d
  42a8e6:	48 98                	cltq   
  42a8e8:	4c 09 c0             	or     %r8,%rax
  42a8eb:	5b                   	pop    %rbx
  42a8ec:	c3                   	retq   
  42a8ed:	0f 1f 00             	nopl   (%rax)
  42a8f0:	48 8b 7a 08          	mov    0x8(%rdx),%rdi
  42a8f4:	e8 77 9d 00 00       	callq  434670 <lh_strhash>
  42a8f9:	49 89 c0             	mov    %rax,%r8
  42a8fc:	8b 03                	mov    (%rbx),%eax
  42a8fe:	eb dc                	jmp    42a8dc <added_obj_LHASH_HASH+0x2c>
  42a900:	85 c0                	test   %eax,%eax
  42a902:	75 5c                	jne    42a960 <added_obj_LHASH_HASH+0xb0>
  42a904:	8b 4a 14             	mov    0x14(%rdx),%ecx
  42a907:	4c 8b 4a 18          	mov    0x18(%rdx),%r9
  42a90b:	41 89 c8             	mov    %ecx,%r8d
  42a90e:	41 c1 e0 14          	shl    $0x14,%r8d
  42a912:	85 c9                	test   %ecx,%ecx
  42a914:	4d 63 c0             	movslq %r8d,%r8
  42a917:	7e 40                	jle    42a959 <added_obj_LHASH_HASH+0xa9>
  42a919:	44 8d 1c 49          	lea    (%rcx,%rcx,2),%r11d
  42a91d:	31 f6                	xor    %esi,%esi
  42a91f:	41 ba ab aa aa 2a    	mov    $0x2aaaaaab,%r10d
  42a925:	0f 1f 00             	nopl   (%rax)
  42a928:	89 f0                	mov    %esi,%eax
  42a92a:	41 0f b6 39          	movzbl (%r9),%edi
  42a92e:	89 f1                	mov    %esi,%ecx
  42a930:	41 f7 ea             	imul   %r10d
  42a933:	89 f0                	mov    %esi,%eax
  42a935:	83 c6 03             	add    $0x3,%esi
  42a938:	c1 f8 1f             	sar    $0x1f,%eax
  42a93b:	49 83 c1 01          	add    $0x1,%r9
  42a93f:	c1 fa 02             	sar    $0x2,%edx
  42a942:	29 c2                	sub    %eax,%edx
  42a944:	8d 04 52             	lea    (%rdx,%rdx,2),%eax
  42a947:	c1 e0 03             	shl    $0x3,%eax
  42a94a:	29 c1                	sub    %eax,%ecx
  42a94c:	d3 e7                	shl    %cl,%edi
  42a94e:	48 63 ff             	movslq %edi,%rdi
  42a951:	49 31 f8             	xor    %rdi,%r8
  42a954:	44 39 de             	cmp    %r11d,%esi
  42a957:	75 cf                	jne    42a928 <added_obj_LHASH_HASH+0x78>
  42a959:	31 c0                	xor    %eax,%eax
  42a95b:	e9 7c ff ff ff       	jmpq   42a8dc <added_obj_LHASH_HASH+0x2c>
  42a960:	31 c0                	xor    %eax,%eax
  42a962:	5b                   	pop    %rbx
  42a963:	c3                   	retq   
  42a964:	0f 1f 40 00          	nopl   0x0(%rax)
  42a968:	48 8b 3a             	mov    (%rdx),%rdi
  42a96b:	e8 00 9d 00 00       	callq  434670 <lh_strhash>
  42a970:	49 89 c0             	mov    %rax,%r8
  42a973:	8b 03                	mov    (%rbx),%eax
  42a975:	e9 62 ff ff ff       	jmpq   42a8dc <added_obj_LHASH_HASH+0x2c>
  42a97a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000042a980 <added_obj_LHASH_COMP>:
  42a980:	8b 17                	mov    (%rdi),%edx
  42a982:	89 d0                	mov    %edx,%eax
  42a984:	2b 06                	sub    (%rsi),%eax
  42a986:	75 40                	jne    42a9c8 <added_obj_LHASH_COMP+0x48>
  42a988:	83 fa 01             	cmp    $0x1,%edx
  42a98b:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  42a98f:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
  42a993:	74 1b                	je     42a9b0 <added_obj_LHASH_COMP+0x30>
  42a995:	7e 59                	jle    42a9f0 <added_obj_LHASH_COMP+0x70>
  42a997:	83 fa 02             	cmp    $0x2,%edx
  42a99a:	74 34                	je     42a9d0 <added_obj_LHASH_COMP+0x50>
  42a99c:	83 fa 03             	cmp    $0x3,%edx
  42a99f:	75 6f                	jne    42aa10 <added_obj_LHASH_COMP+0x90>
  42a9a1:	8b 47 10             	mov    0x10(%rdi),%eax
  42a9a4:	2b 41 10             	sub    0x10(%rcx),%eax
  42a9a7:	c3                   	retq   
  42a9a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  42a9af:	00 
  42a9b0:	48 8b 3f             	mov    (%rdi),%rdi
  42a9b3:	48 85 ff             	test   %rdi,%rdi
  42a9b6:	74 5b                	je     42aa13 <added_obj_LHASH_COMP+0x93>
  42a9b8:	48 8b 31             	mov    (%rcx),%rsi
  42a9bb:	48 85 f6             	test   %rsi,%rsi
  42a9be:	75 22                	jne    42a9e2 <added_obj_LHASH_COMP+0x62>
  42a9c0:	b8 01 00 00 00       	mov    $0x1,%eax
  42a9c5:	0f 1f 00             	nopl   (%rax)
  42a9c8:	f3 c3                	repz retq 
  42a9ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  42a9d0:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  42a9d4:	48 85 ff             	test   %rdi,%rdi
  42a9d7:	74 3a                	je     42aa13 <added_obj_LHASH_COMP+0x93>
  42a9d9:	48 8b 71 08          	mov    0x8(%rcx),%rsi
  42a9dd:	48 85 f6             	test   %rsi,%rsi
  42a9e0:	74 de                	je     42a9c0 <added_obj_LHASH_COMP+0x40>
  42a9e2:	e9 e9 c4 fd ff       	jmpq   406ed0 <strcmp@plt>
  42a9e7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  42a9ee:	00 00 
  42a9f0:	85 d2                	test   %edx,%edx
  42a9f2:	75 1c                	jne    42aa10 <added_obj_LHASH_COMP+0x90>
  42a9f4:	48 63 57 14          	movslq 0x14(%rdi),%rdx
  42a9f8:	89 d0                	mov    %edx,%eax
  42a9fa:	2b 41 14             	sub    0x14(%rcx),%eax
  42a9fd:	75 c9                	jne    42a9c8 <added_obj_LHASH_COMP+0x48>
  42a9ff:	48 8b 71 18          	mov    0x18(%rcx),%rsi
  42aa03:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
  42aa07:	e9 f4 c4 fd ff       	jmpq   406f00 <memcmp@plt>
  42aa0c:	0f 1f 40 00          	nopl   0x0(%rax)
  42aa10:	31 c0                	xor    %eax,%eax
  42aa12:	c3                   	retq   
  42aa13:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  42aa18:	c3                   	retq   
  42aa19:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000042aa20 <check_defer>:
  42aa20:	81 ff 97 03 00 00    	cmp    $0x397,%edi
  42aa26:	7e 14                	jle    42aa3c <check_defer+0x1c>
  42aa28:	8b 05 32 ff 22 00    	mov    0x22ff32(%rip),%eax        # 65a960 <obj_cleanup_defer>
  42aa2e:	85 c0                	test   %eax,%eax
  42aa30:	75 0a                	jne    42aa3c <check_defer+0x1c>
  42aa32:	c7 05 24 ff 22 00 01 	movl   $0x1,0x22ff24(%rip)        # 65a960 <obj_cleanup_defer>
  42aa39:	00 00 00 
  42aa3c:	f3 c3                	repz retq 
  42aa3e:	66 90                	xchg   %ax,%ax

000000000042aa40 <OBJ_cleanup>:
  42aa40:	8b 05 1a ff 22 00    	mov    0x22ff1a(%rip),%eax        # 65a960 <obj_cleanup_defer>
  42aa46:	85 c0                	test   %eax,%eax
  42aa48:	75 66                	jne    42aab0 <OBJ_cleanup+0x70>
  42aa4a:	48 8b 3d 17 ff 22 00 	mov    0x22ff17(%rip),%rdi        # 65a968 <added>
  42aa51:	48 85 ff             	test   %rdi,%rdi
  42aa54:	74 53                	je     42aaa9 <OBJ_cleanup+0x69>
  42aa56:	48 83 ec 08          	sub    $0x8,%rsp
  42aa5a:	be 70 a8 42 00       	mov    $0x42a870,%esi
  42aa5f:	48 c7 47 30 00 00 00 	movq   $0x0,0x30(%rdi)
  42aa66:	00 
  42aa67:	e8 a4 a3 00 00       	callq  434e10 <lh_doall>
  42aa6c:	48 8b 3d f5 fe 22 00 	mov    0x22fef5(%rip),%rdi        # 65a968 <added>
  42aa73:	be 80 a8 42 00       	mov    $0x42a880,%esi
  42aa78:	e8 93 a3 00 00       	callq  434e10 <lh_doall>
  42aa7d:	48 8b 3d e4 fe 22 00 	mov    0x22fee4(%rip),%rdi        # 65a968 <added>
  42aa84:	be 90 a8 42 00       	mov    $0x42a890,%esi
  42aa89:	e8 82 a3 00 00       	callq  434e10 <lh_doall>
  42aa8e:	48 8b 3d d3 fe 22 00 	mov    0x22fed3(%rip),%rdi        # 65a968 <added>
  42aa95:	e8 46 9e 00 00       	callq  4348e0 <lh_free>
  42aa9a:	48 c7 05 c3 fe 22 00 	movq   $0x0,0x22fec3(%rip)        # 65a968 <added>
  42aaa1:	00 00 00 00 
  42aaa5:	48 83 c4 08          	add    $0x8,%rsp
  42aaa9:	f3 c3                	repz retq 
  42aaab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42aab0:	c7 05 a6 fe 22 00 02 	movl   $0x2,0x22fea6(%rip)        # 65a960 <obj_cleanup_defer>
  42aab7:	00 00 00 
  42aaba:	c3                   	retq   
  42aabb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000042aac0 <OBJ_new_nid>:
  42aac0:	8b 05 8a dd 22 00    	mov    0x22dd8a(%rip),%eax        # 658850 <new_nid>
  42aac6:	01 c7                	add    %eax,%edi
  42aac8:	89 3d 82 dd 22 00    	mov    %edi,0x22dd82(%rip)        # 658850 <new_nid>
  42aace:	c3                   	retq   
  42aacf:	90                   	nop

000000000042aad0 <OBJ_add_object>:
  42aad0:	41 54                	push   %r12
  42aad2:	55                   	push   %rbp
  42aad3:	53                   	push   %rbx
  42aad4:	66 0f ef c0          	pxor   %xmm0,%xmm0
  42aad8:	48 89 fb             	mov    %rdi,%rbx
  42aadb:	48 83 ec 30          	sub    $0x30,%rsp
  42aadf:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  42aae6:	00 00 
  42aae8:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  42aaed:	31 c0                	xor    %eax,%eax
  42aaef:	48 83 3d 71 fe 22 00 	cmpq   $0x0,0x22fe71(%rip)        # 65a968 <added>
  42aaf6:	00 
  42aaf7:	0f 29 04 24          	movaps %xmm0,(%rsp)
  42aafb:	0f 29 44 24 10       	movaps %xmm0,0x10(%rsp)
  42ab00:	0f 84 6a 01 00 00    	je     42ac70 <OBJ_add_object+0x1a0>
  42ab06:	48 89 df             	mov    %rbx,%rdi
  42ab09:	e8 12 14 00 00       	callq  42bf20 <OBJ_dup>
  42ab0e:	48 85 c0             	test   %rax,%rax
  42ab11:	48 89 c5             	mov    %rax,%rbp
  42ab14:	0f 84 1d 01 00 00    	je     42ac37 <OBJ_add_object+0x167>
  42ab1a:	ba 00 01 00 00       	mov    $0x100,%edx
  42ab1f:	be 9f e8 43 00       	mov    $0x43e89f,%esi
  42ab24:	bf 10 00 00 00       	mov    $0x10,%edi
  42ab29:	e8 d2 a8 ff ff       	callq  425400 <CRYPTO_malloc>
  42ab2e:	48 85 c0             	test   %rax,%rax
  42ab31:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  42ab36:	0f 84 dc 00 00 00    	je     42ac18 <OBJ_add_object+0x148>
  42ab3c:	8b 45 14             	mov    0x14(%rbp),%eax
  42ab3f:	85 c0                	test   %eax,%eax
  42ab41:	74 28                	je     42ab6b <OBJ_add_object+0x9b>
  42ab43:	48 83 7b 18 00       	cmpq   $0x0,0x18(%rbx)
  42ab48:	74 21                	je     42ab6b <OBJ_add_object+0x9b>
  42ab4a:	ba 02 01 00 00       	mov    $0x102,%edx
  42ab4f:	be 9f e8 43 00       	mov    $0x43e89f,%esi
  42ab54:	bf 10 00 00 00       	mov    $0x10,%edi
  42ab59:	e8 a2 a8 ff ff       	callq  425400 <CRYPTO_malloc>
  42ab5e:	48 85 c0             	test   %rax,%rax
  42ab61:	48 89 04 24          	mov    %rax,(%rsp)
  42ab65:	0f 84 ad 00 00 00    	je     42ac18 <OBJ_add_object+0x148>
  42ab6b:	48 83 7d 00 00       	cmpq   $0x0,0x0(%rbp)
  42ab70:	74 22                	je     42ab94 <OBJ_add_object+0xc4>
  42ab72:	ba 04 01 00 00       	mov    $0x104,%edx
  42ab77:	be 9f e8 43 00       	mov    $0x43e89f,%esi
  42ab7c:	bf 10 00 00 00       	mov    $0x10,%edi
  42ab81:	e8 7a a8 ff ff       	callq  425400 <CRYPTO_malloc>
  42ab86:	48 85 c0             	test   %rax,%rax
  42ab89:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  42ab8e:	0f 84 84 00 00 00    	je     42ac18 <OBJ_add_object+0x148>
  42ab94:	48 83 7d 08 00       	cmpq   $0x0,0x8(%rbp)
  42ab99:	74 1e                	je     42abb9 <OBJ_add_object+0xe9>
  42ab9b:	ba 06 01 00 00       	mov    $0x106,%edx
  42aba0:	be 9f e8 43 00       	mov    $0x43e89f,%esi
  42aba5:	bf 10 00 00 00       	mov    $0x10,%edi
  42abaa:	e8 51 a8 ff ff       	callq  425400 <CRYPTO_malloc>
  42abaf:	48 85 c0             	test   %rax,%rax
  42abb2:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  42abb7:	74 5f                	je     42ac18 <OBJ_add_object+0x148>
  42abb9:	31 db                	xor    %ebx,%ebx
  42abbb:	48 8b 34 dc          	mov    (%rsp,%rbx,8),%rsi
  42abbf:	48 85 f6             	test   %rsi,%rsi
  42abc2:	74 1f                	je     42abe3 <OBJ_add_object+0x113>
  42abc4:	48 8b 3d 9d fd 22 00 	mov    0x22fd9d(%rip),%rdi        # 65a968 <added>
  42abcb:	89 1e                	mov    %ebx,(%rsi)
  42abcd:	48 89 6e 08          	mov    %rbp,0x8(%rsi)
  42abd1:	e8 7a 9d 00 00       	callq  434950 <lh_insert>
  42abd6:	48 85 c0             	test   %rax,%rax
  42abd9:	74 08                	je     42abe3 <OBJ_add_object+0x113>
  42abdb:	48 89 c7             	mov    %rax,%rdi
  42abde:	e8 7d ab ff ff       	callq  425760 <CRYPTO_free>
  42abe3:	48 83 c3 01          	add    $0x1,%rbx
  42abe7:	48 83 fb 04          	cmp    $0x4,%rbx
  42abeb:	75 ce                	jne    42abbb <OBJ_add_object+0xeb>
  42abed:	83 65 20 f2          	andl   $0xfffffff2,0x20(%rbp)
  42abf1:	8b 45 10             	mov    0x10(%rbp),%eax
  42abf4:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  42abf9:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  42ac00:	00 00 
  42ac02:	0f 85 8e 00 00 00    	jne    42ac96 <OBJ_add_object+0x1c6>
  42ac08:	48 83 c4 30          	add    $0x30,%rsp
  42ac0c:	5b                   	pop    %rbx
  42ac0d:	5d                   	pop    %rbp
  42ac0e:	41 5c                	pop    %r12
  42ac10:	c3                   	retq   
  42ac11:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  42ac18:	41 b8 19 01 00 00    	mov    $0x119,%r8d
  42ac1e:	b9 9f e8 43 00       	mov    $0x43e89f,%ecx
  42ac23:	ba 41 00 00 00       	mov    $0x41,%edx
  42ac28:	be 69 00 00 00       	mov    $0x69,%esi
  42ac2d:	bf 08 00 00 00       	mov    $0x8,%edi
  42ac32:	e8 19 d7 ff ff       	callq  428350 <ERR_put_error>
  42ac37:	4c 8d 64 24 20       	lea    0x20(%rsp),%r12
  42ac3c:	48 89 e3             	mov    %rsp,%rbx
  42ac3f:	48 8b 3b             	mov    (%rbx),%rdi
  42ac42:	48 85 ff             	test   %rdi,%rdi
  42ac45:	74 05                	je     42ac4c <OBJ_add_object+0x17c>
  42ac47:	e8 14 ab ff ff       	callq  425760 <CRYPTO_free>
  42ac4c:	48 83 c3 08          	add    $0x8,%rbx
  42ac50:	4c 39 e3             	cmp    %r12,%rbx
  42ac53:	75 ea                	jne    42ac3f <OBJ_add_object+0x16f>
  42ac55:	48 85 ed             	test   %rbp,%rbp
  42ac58:	74 08                	je     42ac62 <OBJ_add_object+0x192>
  42ac5a:	48 89 ef             	mov    %rbp,%rdi
  42ac5d:	e8 fe aa ff ff       	callq  425760 <CRYPTO_free>
  42ac62:	31 c0                	xor    %eax,%eax
  42ac64:	eb 8e                	jmp    42abf4 <OBJ_add_object+0x124>
  42ac66:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  42ac6d:	00 00 00 
  42ac70:	be 80 a9 42 00       	mov    $0x42a980,%esi
  42ac75:	bf b0 a8 42 00       	mov    $0x42a8b0,%edi
  42ac7a:	e8 71 9a 00 00       	callq  4346f0 <lh_new>
  42ac7f:	48 85 c0             	test   %rax,%rax
  42ac82:	48 89 05 df fc 22 00 	mov    %rax,0x22fcdf(%rip)        # 65a968 <added>
  42ac89:	0f 85 77 fe ff ff    	jne    42ab06 <OBJ_add_object+0x36>
  42ac8f:	31 c0                	xor    %eax,%eax
  42ac91:	e9 5e ff ff ff       	jmpq   42abf4 <OBJ_add_object+0x124>
  42ac96:	e8 25 c2 fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  42ac9b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000042aca0 <OBJ_nid2obj>:
  42aca0:	48 83 ec 48          	sub    $0x48,%rsp
  42aca4:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  42acab:	00 00 
  42acad:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  42acb2:	31 c0                	xor    %eax,%eax
  42acb4:	81 ff 97 03 00 00    	cmp    $0x397,%edi
  42acba:	77 34                	ja     42acf0 <OBJ_nid2obj+0x50>
  42acbc:	85 ff                	test   %edi,%edi
  42acbe:	0f 84 7c 00 00 00    	je     42ad40 <OBJ_nid2obj+0xa0>
  42acc4:	48 63 ff             	movslq %edi,%rdi
  42acc7:	41 b8 2a 01 00 00    	mov    $0x12a,%r8d
  42accd:	48 8d 04 bf          	lea    (%rdi,%rdi,4),%rax
  42acd1:	8b 04 c5 90 56 44 00 	mov    0x445690(,%rax,8),%eax
  42acd8:	85 c0                	test   %eax,%eax
  42acda:	74 76                	je     42ad52 <OBJ_nid2obj+0xb2>
  42acdc:	48 8d 04 bf          	lea    (%rdi,%rdi,4),%rax
  42ace0:	48 8d 04 c5 80 56 44 	lea    0x445680(,%rax,8),%rax
  42ace7:	00 
  42ace8:	eb 3b                	jmp    42ad25 <OBJ_nid2obj+0x85>
  42acea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  42acf0:	48 8b 05 71 fc 22 00 	mov    0x22fc71(%rip),%rax        # 65a968 <added>
  42acf7:	48 85 c0             	test   %rax,%rax
  42acfa:	74 4c                	je     42ad48 <OBJ_nid2obj+0xa8>
  42acfc:	48 8d 54 24 10       	lea    0x10(%rsp),%rdx
  42ad01:	89 7c 24 20          	mov    %edi,0x20(%rsp)
  42ad05:	48 89 e6             	mov    %rsp,%rsi
  42ad08:	48 89 c7             	mov    %rax,%rdi
  42ad0b:	c7 04 24 03 00 00 00 	movl   $0x3,(%rsp)
  42ad12:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  42ad17:	e8 24 a0 00 00       	callq  434d40 <lh_retrieve>
  42ad1c:	48 85 c0             	test   %rax,%rax
  42ad1f:	74 2b                	je     42ad4c <OBJ_nid2obj+0xac>
  42ad21:	48 8b 40 08          	mov    0x8(%rax),%rax
  42ad25:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  42ad2a:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  42ad31:	00 00 
  42ad33:	75 3a                	jne    42ad6f <OBJ_nid2obj+0xcf>
  42ad35:	48 83 c4 48          	add    $0x48,%rsp
  42ad39:	c3                   	retq   
  42ad3a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  42ad40:	31 ff                	xor    %edi,%edi
  42ad42:	eb 98                	jmp    42acdc <OBJ_nid2obj+0x3c>
  42ad44:	0f 1f 40 00          	nopl   0x0(%rax)
  42ad48:	31 c0                	xor    %eax,%eax
  42ad4a:	eb d9                	jmp    42ad25 <OBJ_nid2obj+0x85>
  42ad4c:	41 b8 3b 01 00 00    	mov    $0x13b,%r8d
  42ad52:	b9 9f e8 43 00       	mov    $0x43e89f,%ecx
  42ad57:	ba 65 00 00 00       	mov    $0x65,%edx
  42ad5c:	be 67 00 00 00       	mov    $0x67,%esi
  42ad61:	bf 08 00 00 00       	mov    $0x8,%edi
  42ad66:	e8 e5 d5 ff ff       	callq  428350 <ERR_put_error>
  42ad6b:	31 c0                	xor    %eax,%eax
  42ad6d:	eb b6                	jmp    42ad25 <OBJ_nid2obj+0x85>
  42ad6f:	e8 4c c1 fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  42ad74:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
  42ad7b:	00 00 00 00 00 

000000000042ad80 <OBJ_nid2sn>:
  42ad80:	48 83 ec 48          	sub    $0x48,%rsp
  42ad84:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  42ad8b:	00 00 
  42ad8d:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  42ad92:	31 c0                	xor    %eax,%eax
  42ad94:	81 ff 97 03 00 00    	cmp    $0x397,%edi
  42ad9a:	77 34                	ja     42add0 <OBJ_nid2sn+0x50>
  42ad9c:	85 ff                	test   %edi,%edi
  42ad9e:	0f 84 7c 00 00 00    	je     42ae20 <OBJ_nid2sn+0xa0>
  42ada4:	48 63 ff             	movslq %edi,%rdi
  42ada7:	41 b8 4a 01 00 00    	mov    $0x14a,%r8d
  42adad:	48 8d 04 bf          	lea    (%rdi,%rdi,4),%rax
  42adb1:	8b 04 c5 90 56 44 00 	mov    0x445690(,%rax,8),%eax
  42adb8:	85 c0                	test   %eax,%eax
  42adba:	74 76                	je     42ae32 <OBJ_nid2sn+0xb2>
  42adbc:	48 8d 04 bf          	lea    (%rdi,%rdi,4),%rax
  42adc0:	48 8b 04 c5 80 56 44 	mov    0x445680(,%rax,8),%rax
  42adc7:	00 
  42adc8:	eb 3e                	jmp    42ae08 <OBJ_nid2sn+0x88>
  42adca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  42add0:	48 8b 05 91 fb 22 00 	mov    0x22fb91(%rip),%rax        # 65a968 <added>
  42add7:	48 85 c0             	test   %rax,%rax
  42adda:	74 4c                	je     42ae28 <OBJ_nid2sn+0xa8>
  42addc:	48 8d 54 24 10       	lea    0x10(%rsp),%rdx
  42ade1:	89 7c 24 20          	mov    %edi,0x20(%rsp)
  42ade5:	48 89 e6             	mov    %rsp,%rsi
  42ade8:	48 89 c7             	mov    %rax,%rdi
  42adeb:	c7 04 24 03 00 00 00 	movl   $0x3,(%rsp)
  42adf2:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  42adf7:	e8 44 9f 00 00       	callq  434d40 <lh_retrieve>
  42adfc:	48 85 c0             	test   %rax,%rax
  42adff:	74 2b                	je     42ae2c <OBJ_nid2sn+0xac>
  42ae01:	48 8b 40 08          	mov    0x8(%rax),%rax
  42ae05:	48 8b 00             	mov    (%rax),%rax
  42ae08:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  42ae0d:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  42ae14:	00 00 
  42ae16:	75 37                	jne    42ae4f <OBJ_nid2sn+0xcf>
  42ae18:	48 83 c4 48          	add    $0x48,%rsp
  42ae1c:	c3                   	retq   
  42ae1d:	0f 1f 00             	nopl   (%rax)
  42ae20:	31 ff                	xor    %edi,%edi
  42ae22:	eb 98                	jmp    42adbc <OBJ_nid2sn+0x3c>
  42ae24:	0f 1f 40 00          	nopl   0x0(%rax)
  42ae28:	31 c0                	xor    %eax,%eax
  42ae2a:	eb dc                	jmp    42ae08 <OBJ_nid2sn+0x88>
  42ae2c:	41 b8 5b 01 00 00    	mov    $0x15b,%r8d
  42ae32:	b9 9f e8 43 00       	mov    $0x43e89f,%ecx
  42ae37:	ba 65 00 00 00       	mov    $0x65,%edx
  42ae3c:	be 68 00 00 00       	mov    $0x68,%esi
  42ae41:	bf 08 00 00 00       	mov    $0x8,%edi
  42ae46:	e8 05 d5 ff ff       	callq  428350 <ERR_put_error>
  42ae4b:	31 c0                	xor    %eax,%eax
  42ae4d:	eb b9                	jmp    42ae08 <OBJ_nid2sn+0x88>
  42ae4f:	e8 6c c0 fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  42ae54:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
  42ae5b:	00 00 00 00 00 

000000000042ae60 <OBJ_nid2ln>:
  42ae60:	48 83 ec 48          	sub    $0x48,%rsp
  42ae64:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  42ae6b:	00 00 
  42ae6d:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  42ae72:	31 c0                	xor    %eax,%eax
  42ae74:	81 ff 97 03 00 00    	cmp    $0x397,%edi
  42ae7a:	77 34                	ja     42aeb0 <OBJ_nid2ln+0x50>
  42ae7c:	85 ff                	test   %edi,%edi
  42ae7e:	0f 84 7c 00 00 00    	je     42af00 <OBJ_nid2ln+0xa0>
  42ae84:	48 63 ff             	movslq %edi,%rdi
  42ae87:	41 b8 6a 01 00 00    	mov    $0x16a,%r8d
  42ae8d:	48 8d 04 bf          	lea    (%rdi,%rdi,4),%rax
  42ae91:	8b 04 c5 90 56 44 00 	mov    0x445690(,%rax,8),%eax
  42ae98:	85 c0                	test   %eax,%eax
  42ae9a:	74 76                	je     42af12 <OBJ_nid2ln+0xb2>
  42ae9c:	48 8d 04 bf          	lea    (%rdi,%rdi,4),%rax
  42aea0:	48 8b 04 c5 88 56 44 	mov    0x445688(,%rax,8),%rax
  42aea7:	00 
  42aea8:	eb 3f                	jmp    42aee9 <OBJ_nid2ln+0x89>
  42aeaa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  42aeb0:	48 8b 05 b1 fa 22 00 	mov    0x22fab1(%rip),%rax        # 65a968 <added>
  42aeb7:	48 85 c0             	test   %rax,%rax
  42aeba:	74 4c                	je     42af08 <OBJ_nid2ln+0xa8>
  42aebc:	48 8d 54 24 10       	lea    0x10(%rsp),%rdx
  42aec1:	89 7c 24 20          	mov    %edi,0x20(%rsp)
  42aec5:	48 89 e6             	mov    %rsp,%rsi
  42aec8:	48 89 c7             	mov    %rax,%rdi
  42aecb:	c7 04 24 03 00 00 00 	movl   $0x3,(%rsp)
  42aed2:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  42aed7:	e8 64 9e 00 00       	callq  434d40 <lh_retrieve>
  42aedc:	48 85 c0             	test   %rax,%rax
  42aedf:	74 2b                	je     42af0c <OBJ_nid2ln+0xac>
  42aee1:	48 8b 40 08          	mov    0x8(%rax),%rax
  42aee5:	48 8b 40 08          	mov    0x8(%rax),%rax
  42aee9:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  42aeee:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  42aef5:	00 00 
  42aef7:	75 36                	jne    42af2f <OBJ_nid2ln+0xcf>
  42aef9:	48 83 c4 48          	add    $0x48,%rsp
  42aefd:	c3                   	retq   
  42aefe:	66 90                	xchg   %ax,%ax
  42af00:	31 ff                	xor    %edi,%edi
  42af02:	eb 98                	jmp    42ae9c <OBJ_nid2ln+0x3c>
  42af04:	0f 1f 40 00          	nopl   0x0(%rax)
  42af08:	31 c0                	xor    %eax,%eax
  42af0a:	eb dd                	jmp    42aee9 <OBJ_nid2ln+0x89>
  42af0c:	41 b8 7b 01 00 00    	mov    $0x17b,%r8d
  42af12:	b9 9f e8 43 00       	mov    $0x43e89f,%ecx
  42af17:	ba 65 00 00 00       	mov    $0x65,%edx
  42af1c:	be 66 00 00 00       	mov    $0x66,%esi
  42af21:	bf 08 00 00 00       	mov    $0x8,%edi
  42af26:	e8 25 d4 ff ff       	callq  428350 <ERR_put_error>
  42af2b:	31 c0                	xor    %eax,%eax
  42af2d:	eb ba                	jmp    42aee9 <OBJ_nid2ln+0x89>
  42af2f:	e8 8c bf fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  42af34:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
  42af3b:	00 00 00 00 00 

000000000042af40 <OBJ_obj2nid>:
  42af40:	41 57                	push   %r15
  42af42:	41 56                	push   %r14
  42af44:	49 89 ff             	mov    %rdi,%r15
  42af47:	41 55                	push   %r13
  42af49:	41 54                	push   %r12
  42af4b:	55                   	push   %rbp
  42af4c:	53                   	push   %rbx
  42af4d:	48 83 ec 38          	sub    $0x38,%rsp
  42af51:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  42af58:	00 00 
  42af5a:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  42af5f:	31 c0                	xor    %eax,%eax
  42af61:	48 85 ff             	test   %rdi,%rdi
  42af64:	0f 84 ce 00 00 00    	je     42b038 <OBJ_obj2nid+0xf8>
  42af6a:	8b 47 10             	mov    0x10(%rdi),%eax
  42af6d:	85 c0                	test   %eax,%eax
  42af6f:	75 2f                	jne    42afa0 <OBJ_obj2nid+0x60>
  42af71:	48 8b 3d f0 f9 22 00 	mov    0x22f9f0(%rip),%rdi        # 65a968 <added>
  42af78:	48 85 ff             	test   %rdi,%rdi
  42af7b:	74 4b                	je     42afc8 <OBJ_obj2nid+0x88>
  42af7d:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  42af82:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%rsp)
  42af89:	00 
  42af8a:	4c 89 7c 24 18       	mov    %r15,0x18(%rsp)
  42af8f:	e8 ac 9d 00 00       	callq  434d40 <lh_retrieve>
  42af94:	48 85 c0             	test   %rax,%rax
  42af97:	74 2f                	je     42afc8 <OBJ_obj2nid+0x88>
  42af99:	48 8b 40 08          	mov    0x8(%rax),%rax
  42af9d:	8b 40 10             	mov    0x10(%rax),%eax
  42afa0:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
  42afa5:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  42afac:	00 00 
  42afae:	0f 85 96 00 00 00    	jne    42b04a <OBJ_obj2nid+0x10a>
  42afb4:	48 83 c4 38          	add    $0x38,%rsp
  42afb8:	5b                   	pop    %rbx
  42afb9:	5d                   	pop    %rbp
  42afba:	41 5c                	pop    %r12
  42afbc:	41 5d                	pop    %r13
  42afbe:	41 5e                	pop    %r14
  42afc0:	41 5f                	pop    %r15
  42afc2:	c3                   	retq   
  42afc3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42afc8:	49 63 47 14          	movslq 0x14(%r15),%rax
  42afcc:	41 be 59 03 00 00    	mov    $0x359,%r14d
  42afd2:	45 31 ed             	xor    %r13d,%r13d
  42afd5:	48 89 c5             	mov    %rax,%rbp
  42afd8:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  42afdd:	eb 23                	jmp    42b002 <OBJ_obj2nid+0xc2>
  42afdf:	90                   	nop
  42afe0:	49 8b 74 24 18       	mov    0x18(%r12),%rsi
  42afe5:	49 8b 7f 18          	mov    0x18(%r15),%rdi
  42afe9:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  42afee:	e8 0d bf fd ff       	callq  406f00 <memcmp@plt>
  42aff3:	85 c0                	test   %eax,%eax
  42aff5:	78 36                	js     42b02d <OBJ_obj2nid+0xed>
  42aff7:	74 47                	je     42b040 <OBJ_obj2nid+0x100>
  42aff9:	44 8d 6b 01          	lea    0x1(%rbx),%r13d
  42affd:	45 39 ee             	cmp    %r13d,%r14d
  42b000:	7e 36                	jle    42b038 <OBJ_obj2nid+0xf8>
  42b002:	43 8d 5c 35 00       	lea    0x0(%r13,%r14,1),%ebx
  42b007:	d1 fb                	sar    %ebx
  42b009:	8d 04 9d 00 00 00 00 	lea    0x0(,%rbx,4),%eax
  42b010:	48 98                	cltq   
  42b012:	8b 80 00 2c 44 00    	mov    0x442c00(%rax),%eax
  42b018:	48 8d 04 80          	lea    (%rax,%rax,4),%rax
  42b01c:	4c 8d 24 c5 80 56 44 	lea    0x445680(,%rax,8),%r12
  42b023:	00 
  42b024:	41 3b 6c 24 14       	cmp    0x14(%r12),%ebp
  42b029:	74 b5                	je     42afe0 <OBJ_obj2nid+0xa0>
  42b02b:	79 cc                	jns    42aff9 <OBJ_obj2nid+0xb9>
  42b02d:	41 89 de             	mov    %ebx,%r14d
  42b030:	45 39 ee             	cmp    %r13d,%r14d
  42b033:	7f cd                	jg     42b002 <OBJ_obj2nid+0xc2>
  42b035:	0f 1f 00             	nopl   (%rax)
  42b038:	31 c0                	xor    %eax,%eax
  42b03a:	e9 61 ff ff ff       	jmpq   42afa0 <OBJ_obj2nid+0x60>
  42b03f:	90                   	nop
  42b040:	41 8b 44 24 10       	mov    0x10(%r12),%eax
  42b045:	e9 56 ff ff ff       	jmpq   42afa0 <OBJ_obj2nid+0x60>
  42b04a:	e8 71 be fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  42b04f:	90                   	nop

000000000042b050 <OBJ_obj2txt>:
  42b050:	41 57                	push   %r15
  42b052:	41 56                	push   %r14
  42b054:	41 55                	push   %r13
  42b056:	41 54                	push   %r12
  42b058:	55                   	push   %rbp
  42b059:	53                   	push   %rbx
  42b05a:	48 89 d3             	mov    %rdx,%rbx
  42b05d:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  42b064:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  42b06b:	00 00 
  42b06d:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  42b074:	00 
  42b075:	31 c0                	xor    %eax,%eax
  42b077:	48 85 d2             	test   %rdx,%rdx
  42b07a:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  42b07f:	89 74 24 0c          	mov    %esi,0xc(%rsp)
  42b083:	0f 84 9f 03 00 00    	je     42b428 <OBJ_obj2txt+0x3d8>
  42b089:	4c 8b 42 18          	mov    0x18(%rdx),%r8
  42b08d:	4d 85 c0             	test   %r8,%r8
  42b090:	0f 84 92 03 00 00    	je     42b428 <OBJ_obj2txt+0x3d8>
  42b096:	85 c9                	test   %ecx,%ecx
  42b098:	4d 89 c5             	mov    %r8,%r13
  42b09b:	0f 84 67 02 00 00    	je     42b308 <OBJ_obj2txt+0x2b8>
  42b0a1:	8b 5b 14             	mov    0x14(%rbx),%ebx
  42b0a4:	85 db                	test   %ebx,%ebx
  42b0a6:	0f 8e 44 04 00 00    	jle    42b4f0 <OBJ_obj2txt+0x4a0>
  42b0ac:	c7 44 24 1c 01 00 00 	movl   $0x1,0x1c(%rsp)
  42b0b3:	00 
  42b0b4:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%rsp)
  42b0bb:	00 
  42b0bc:	31 ed                	xor    %ebp,%ebp
  42b0be:	49 bc ff ff ff ff ff 	movabs $0x1ffffffffffffff,%r12
  42b0c5:	ff ff 01 
  42b0c8:	45 31 f6             	xor    %r14d,%r14d
  42b0cb:	45 31 ff             	xor    %r15d,%r15d
  42b0ce:	66 90                	xchg   %ax,%ax
  42b0d0:	49 83 c5 01          	add    $0x1,%r13
  42b0d4:	41 0f b6 55 ff       	movzbl -0x1(%r13),%edx
  42b0d9:	83 eb 01             	sub    $0x1,%ebx
  42b0dc:	84 d2                	test   %dl,%dl
  42b0de:	79 04                	jns    42b0e4 <OBJ_obj2txt+0x94>
  42b0e0:	85 db                	test   %ebx,%ebx
  42b0e2:	74 54                	je     42b138 <OBJ_obj2txt+0xe8>
  42b0e4:	45 85 ff             	test   %r15d,%r15d
  42b0e7:	0f 85 9b 00 00 00    	jne    42b188 <OBJ_obj2txt+0x138>
  42b0ed:	48 89 d0             	mov    %rdx,%rax
  42b0f0:	83 e0 7f             	and    $0x7f,%eax
  42b0f3:	49 09 c6             	or     %rax,%r14
  42b0f6:	84 d2                	test   %dl,%dl
  42b0f8:	0f 89 f2 00 00 00    	jns    42b1f0 <OBJ_obj2txt+0x1a0>
  42b0fe:	4d 39 e6             	cmp    %r12,%r14
  42b101:	76 75                	jbe    42b178 <OBJ_obj2txt+0x128>
  42b103:	48 85 ed             	test   %rbp,%rbp
  42b106:	0f 84 cc 00 00 00    	je     42b1d8 <OBJ_obj2txt+0x188>
  42b10c:	4c 89 f6             	mov    %r14,%rsi
  42b10f:	48 89 ef             	mov    %rbp,%rdi
  42b112:	e8 09 1b 00 00       	callq  42cc20 <BN_set_word>
  42b117:	85 c0                	test   %eax,%eax
  42b119:	74 22                	je     42b13d <OBJ_obj2txt+0xed>
  42b11b:	41 bf 01 00 00 00    	mov    $0x1,%r15d
  42b121:	ba 07 00 00 00       	mov    $0x7,%edx
  42b126:	48 89 ee             	mov    %rbp,%rsi
  42b129:	48 89 ef             	mov    %rbp,%rdi
  42b12c:	e8 cf 30 00 00       	callq  42e200 <BN_lshift>
  42b131:	85 c0                	test   %eax,%eax
  42b133:	75 9b                	jne    42b0d0 <OBJ_obj2txt+0x80>
  42b135:	0f 1f 00             	nopl   (%rax)
  42b138:	48 85 ed             	test   %rbp,%rbp
  42b13b:	74 08                	je     42b145 <OBJ_obj2txt+0xf5>
  42b13d:	48 89 ef             	mov    %rbp,%rdi
  42b140:	e8 eb 14 00 00       	callq  42c630 <BN_free>
  42b145:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  42b14a:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
  42b151:	00 
  42b152:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  42b159:	00 00 
  42b15b:	0f 85 df 03 00 00    	jne    42b540 <OBJ_obj2txt+0x4f0>
  42b161:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  42b168:	5b                   	pop    %rbx
  42b169:	5d                   	pop    %rbp
  42b16a:	41 5c                	pop    %r12
  42b16c:	41 5d                	pop    %r13
  42b16e:	41 5e                	pop    %r14
  42b170:	41 5f                	pop    %r15
  42b172:	c3                   	retq   
  42b173:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42b178:	49 c1 e6 07          	shl    $0x7,%r14
  42b17c:	e9 4f ff ff ff       	jmpq   42b0d0 <OBJ_obj2txt+0x80>
  42b181:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  42b188:	48 89 d6             	mov    %rdx,%rsi
  42b18b:	48 89 ef             	mov    %rbp,%rdi
  42b18e:	88 14 24             	mov    %dl,(%rsp)
  42b191:	83 e6 7f             	and    $0x7f,%esi
  42b194:	e8 97 36 00 00       	callq  42e830 <BN_add_word>
  42b199:	85 c0                	test   %eax,%eax
  42b19b:	0f b6 14 24          	movzbl (%rsp),%edx
  42b19f:	74 97                	je     42b138 <OBJ_obj2txt+0xe8>
  42b1a1:	84 d2                	test   %dl,%dl
  42b1a3:	0f 88 78 ff ff ff    	js     42b121 <OBJ_obj2txt+0xd1>
  42b1a9:	8b 54 24 1c          	mov    0x1c(%rsp),%edx
  42b1ad:	85 d2                	test   %edx,%edx
  42b1af:	0f 84 90 00 00 00    	je     42b245 <OBJ_obj2txt+0x1f5>
  42b1b5:	49 83 fe 4f          	cmp    $0x4f,%r14
  42b1b9:	0f 86 78 02 00 00    	jbe    42b437 <OBJ_obj2txt+0x3e7>
  42b1bf:	be 50 00 00 00       	mov    $0x50,%esi
  42b1c4:	48 89 ef             	mov    %rbp,%rdi
  42b1c7:	e8 e4 37 00 00       	callq  42e9b0 <BN_sub_word>
  42b1cc:	85 c0                	test   %eax,%eax
  42b1ce:	75 3a                	jne    42b20a <OBJ_obj2txt+0x1ba>
  42b1d0:	e9 63 ff ff ff       	jmpq   42b138 <OBJ_obj2txt+0xe8>
  42b1d5:	0f 1f 00             	nopl   (%rax)
  42b1d8:	e8 c3 14 00 00       	callq  42c6a0 <BN_new>
  42b1dd:	48 85 c0             	test   %rax,%rax
  42b1e0:	48 89 c5             	mov    %rax,%rbp
  42b1e3:	0f 85 23 ff ff ff    	jne    42b10c <OBJ_obj2txt+0xbc>
  42b1e9:	e9 57 ff ff ff       	jmpq   42b145 <OBJ_obj2txt+0xf5>
  42b1ee:	66 90                	xchg   %ax,%ax
  42b1f0:	8b 44 24 1c          	mov    0x1c(%rsp),%eax
  42b1f4:	85 c0                	test   %eax,%eax
  42b1f6:	0f 84 2c 01 00 00    	je     42b328 <OBJ_obj2txt+0x2d8>
  42b1fc:	49 83 fe 4f          	cmp    $0x4f,%r14
  42b200:	0f 86 31 02 00 00    	jbe    42b437 <OBJ_obj2txt+0x3e7>
  42b206:	49 83 ee 50          	sub    $0x50,%r14
  42b20a:	be 02 00 00 00       	mov    $0x2,%esi
  42b20f:	8b 44 24 0c          	mov    0xc(%rsp),%eax
  42b213:	85 c0                	test   %eax,%eax
  42b215:	7e 20                	jle    42b237 <OBJ_obj2txt+0x1e7>
  42b217:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  42b21c:	48 85 c9             	test   %rcx,%rcx
  42b21f:	74 16                	je     42b237 <OBJ_obj2txt+0x1e7>
  42b221:	83 e8 01             	sub    $0x1,%eax
  42b224:	83 c6 30             	add    $0x30,%esi
  42b227:	89 44 24 0c          	mov    %eax,0xc(%rsp)
  42b22b:	48 8d 41 01          	lea    0x1(%rcx),%rax
  42b22f:	40 88 31             	mov    %sil,(%rcx)
  42b232:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  42b237:	83 44 24 18 01       	addl   $0x1,0x18(%rsp)
  42b23c:	45 85 ff             	test   %r15d,%r15d
  42b23f:	0f 84 e3 00 00 00    	je     42b328 <OBJ_obj2txt+0x2d8>
  42b245:	48 89 ef             	mov    %rbp,%rdi
  42b248:	e8 d3 24 00 00       	callq  42d720 <BN_bn2dec>
  42b24d:	48 85 c0             	test   %rax,%rax
  42b250:	49 89 c7             	mov    %rax,%r15
  42b253:	0f 84 df fe ff ff    	je     42b138 <OBJ_obj2txt+0xe8>
  42b259:	48 89 c7             	mov    %rax,%rdi
  42b25c:	e8 4f bb fd ff       	callq  406db0 <strlen@plt>
  42b261:	49 89 c1             	mov    %rax,%r9
  42b264:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  42b269:	48 85 c0             	test   %rax,%rax
  42b26c:	74 5a                	je     42b2c8 <OBJ_obj2txt+0x278>
  42b26e:	8b 4c 24 0c          	mov    0xc(%rsp),%ecx
  42b272:	49 89 c2             	mov    %rax,%r10
  42b275:	85 c9                	test   %ecx,%ecx
  42b277:	7e 0e                	jle    42b287 <OBJ_obj2txt+0x237>
  42b279:	83 e9 01             	sub    $0x1,%ecx
  42b27c:	49 83 c2 01          	add    $0x1,%r10
  42b280:	c6 00 2e             	movb   $0x2e,(%rax)
  42b283:	89 4c 24 0c          	mov    %ecx,0xc(%rsp)
  42b287:	4c 63 74 24 0c       	movslq 0xc(%rsp),%r14
  42b28c:	4c 89 d7             	mov    %r10,%rdi
  42b28f:	4c 89 fe             	mov    %r15,%rsi
  42b292:	4c 89 4c 24 10       	mov    %r9,0x10(%rsp)
  42b297:	4c 89 14 24          	mov    %r10,(%rsp)
  42b29b:	4c 89 f2             	mov    %r14,%rdx
  42b29e:	e8 9d aa ff ff       	callq  425d40 <BUF_strlcpy>
  42b2a3:	4c 8b 4c 24 10       	mov    0x10(%rsp),%r9
  42b2a8:	44 39 4c 24 0c       	cmp    %r9d,0xc(%rsp)
  42b2ad:	4c 8b 14 24          	mov    (%rsp),%r10
  42b2b1:	0f 8d a3 01 00 00    	jge    42b45a <OBJ_obj2txt+0x40a>
  42b2b7:	4b 8d 04 32          	lea    (%r10,%r14,1),%rax
  42b2bb:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%rsp)
  42b2c2:	00 
  42b2c3:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  42b2c8:	8b 44 24 18          	mov    0x18(%rsp),%eax
  42b2cc:	4c 89 ff             	mov    %r15,%rdi
  42b2cf:	42 8d 44 08 01       	lea    0x1(%rax,%r9,1),%eax
  42b2d4:	89 44 24 18          	mov    %eax,0x18(%rsp)
  42b2d8:	e8 83 a4 ff ff       	callq  425760 <CRYPTO_free>
  42b2dd:	85 db                	test   %ebx,%ebx
  42b2df:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%rsp)
  42b2e6:	00 
  42b2e7:	0f 8f db fd ff ff    	jg     42b0c8 <OBJ_obj2txt+0x78>
  42b2ed:	48 85 ed             	test   %rbp,%rbp
  42b2f0:	74 08                	je     42b2fa <OBJ_obj2txt+0x2aa>
  42b2f2:	48 89 ef             	mov    %rbp,%rdi
  42b2f5:	e8 36 13 00 00       	callq  42c630 <BN_free>
  42b2fa:	8b 44 24 18          	mov    0x18(%rsp),%eax
  42b2fe:	e9 47 fe ff ff       	jmpq   42b14a <OBJ_obj2txt+0xfa>
  42b303:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42b308:	48 89 d7             	mov    %rdx,%rdi
  42b30b:	e8 30 fc ff ff       	callq  42af40 <OBJ_obj2nid>
  42b310:	48 63 e8             	movslq %eax,%rbp
  42b313:	85 ed                	test   %ebp,%ebp
  42b315:	0f 85 8b 00 00 00    	jne    42b3a6 <OBJ_obj2txt+0x356>
  42b31b:	4c 8b 6b 18          	mov    0x18(%rbx),%r13
  42b31f:	e9 7d fd ff ff       	jmpq   42b0a1 <OBJ_obj2txt+0x51>
  42b324:	0f 1f 40 00          	nopl   0x0(%rax)
  42b328:	48 8d 7c 24 60       	lea    0x60(%rsp),%rdi
  42b32d:	ba a9 e8 43 00       	mov    $0x43e8a9,%edx
  42b332:	4c 89 f1             	mov    %r14,%rcx
  42b335:	be 25 00 00 00       	mov    $0x25,%esi
  42b33a:	31 c0                	xor    %eax,%eax
  42b33c:	e8 af 91 00 00       	callq  4344f0 <BIO_snprintf>
  42b341:	48 8d 54 24 60       	lea    0x60(%rsp),%rdx
  42b346:	8b 0a                	mov    (%rdx),%ecx
  42b348:	48 83 c2 04          	add    $0x4,%rdx
  42b34c:	8d 81 ff fe fe fe    	lea    -0x1010101(%rcx),%eax
  42b352:	f7 d1                	not    %ecx
  42b354:	21 c8                	and    %ecx,%eax
  42b356:	25 80 80 80 80       	and    $0x80808080,%eax
  42b35b:	74 e9                	je     42b346 <OBJ_obj2txt+0x2f6>
  42b35d:	89 c1                	mov    %eax,%ecx
  42b35f:	c1 e9 10             	shr    $0x10,%ecx
  42b362:	a9 80 80 00 00       	test   $0x8080,%eax
  42b367:	0f 44 c1             	cmove  %ecx,%eax
  42b36a:	48 8d 4a 02          	lea    0x2(%rdx),%rcx
  42b36e:	48 0f 44 d1          	cmove  %rcx,%rdx
  42b372:	8b 4c 24 0c          	mov    0xc(%rsp),%ecx
  42b376:	00 c0                	add    %al,%al
  42b378:	48 8d 44 24 60       	lea    0x60(%rsp),%rax
  42b37d:	48 83 da 03          	sbb    $0x3,%rdx
  42b381:	41 89 d6             	mov    %edx,%r14d
  42b384:	48 89 04 24          	mov    %rax,(%rsp)
  42b388:	44 2b 34 24          	sub    (%rsp),%r14d
  42b38c:	85 c9                	test   %ecx,%ecx
  42b38e:	7e 0c                	jle    42b39c <OBJ_obj2txt+0x34c>
  42b390:	48 83 7c 24 10 00    	cmpq   $0x0,0x10(%rsp)
  42b396:	0f 85 14 01 00 00    	jne    42b4b0 <OBJ_obj2txt+0x460>
  42b39c:	44 01 74 24 18       	add    %r14d,0x18(%rsp)
  42b3a1:	e9 37 ff ff ff       	jmpq   42b2dd <OBJ_obj2txt+0x28d>
  42b3a6:	81 fd 97 03 00 00    	cmp    $0x397,%ebp
  42b3ac:	0f 86 be 00 00 00    	jbe    42b470 <OBJ_obj2txt+0x420>
  42b3b2:	48 8b 3d af f5 22 00 	mov    0x22f5af(%rip),%rdi        # 65a968 <added>
  42b3b9:	48 85 ff             	test   %rdi,%rdi
  42b3bc:	0f 84 59 ff ff ff    	je     42b31b <OBJ_obj2txt+0x2cb>
  42b3c2:	48 8d 44 24 30       	lea    0x30(%rsp),%rax
  42b3c7:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  42b3cc:	c7 44 24 20 03 00 00 	movl   $0x3,0x20(%rsp)
  42b3d3:	00 
  42b3d4:	89 6c 24 40          	mov    %ebp,0x40(%rsp)
  42b3d8:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  42b3dd:	e8 5e 99 00 00       	callq  434d40 <lh_retrieve>
  42b3e2:	48 85 c0             	test   %rax,%rax
  42b3e5:	0f 84 5a 01 00 00    	je     42b545 <OBJ_obj2txt+0x4f5>
  42b3eb:	48 8b 40 08          	mov    0x8(%rax),%rax
  42b3ef:	4c 8b 60 08          	mov    0x8(%rax),%r12
  42b3f3:	4d 85 e4             	test   %r12,%r12
  42b3f6:	0f 84 68 01 00 00    	je     42b564 <OBJ_obj2txt+0x514>
  42b3fc:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  42b401:	48 85 c0             	test   %rax,%rax
  42b404:	74 10                	je     42b416 <OBJ_obj2txt+0x3c6>
  42b406:	48 63 54 24 0c       	movslq 0xc(%rsp),%rdx
  42b40b:	4c 89 e6             	mov    %r12,%rsi
  42b40e:	48 89 c7             	mov    %rax,%rdi
  42b411:	e8 2a a9 ff ff       	callq  425d40 <BUF_strlcpy>
  42b416:	4c 89 e7             	mov    %r12,%rdi
  42b419:	e8 92 b9 fd ff       	callq  406db0 <strlen@plt>
  42b41e:	e9 27 fd ff ff       	jmpq   42b14a <OBJ_obj2txt+0xfa>
  42b423:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42b428:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  42b42d:	c6 00 00             	movb   $0x0,(%rax)
  42b430:	31 c0                	xor    %eax,%eax
  42b432:	e9 13 fd ff ff       	jmpq   42b14a <OBJ_obj2txt+0xfa>
  42b437:	48 b8 cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rax
  42b43e:	cc cc cc 
  42b441:	49 f7 e6             	mul    %r14
  42b444:	48 c1 ea 05          	shr    $0x5,%rdx
  42b448:	8d 04 92             	lea    (%rdx,%rdx,4),%eax
  42b44b:	89 d6                	mov    %edx,%esi
  42b44d:	c1 e0 03             	shl    $0x3,%eax
  42b450:	48 98                	cltq   
  42b452:	49 29 c6             	sub    %rax,%r14
  42b455:	e9 b5 fd ff ff       	jmpq   42b20f <OBJ_obj2txt+0x1bf>
  42b45a:	4d 63 f1             	movslq %r9d,%r14
  42b45d:	44 29 4c 24 0c       	sub    %r9d,0xc(%rsp)
  42b462:	4b 8d 04 32          	lea    (%r10,%r14,1),%rax
  42b466:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  42b46b:	e9 58 fe ff ff       	jmpq   42b2c8 <OBJ_obj2txt+0x278>
  42b470:	48 8d 44 ad 00       	lea    0x0(%rbp,%rbp,4),%rax
  42b475:	48 8d 04 c5 80 56 44 	lea    0x445680(,%rax,8),%rax
  42b47c:	00 
  42b47d:	8b 70 10             	mov    0x10(%rax),%esi
  42b480:	85 f6                	test   %esi,%esi
  42b482:	74 79                	je     42b4fd <OBJ_obj2txt+0x4ad>
  42b484:	4c 8b 60 08          	mov    0x8(%rax),%r12
  42b488:	4d 85 e4             	test   %r12,%r12
  42b48b:	0f 85 6b ff ff ff    	jne    42b3fc <OBJ_obj2txt+0x3ac>
  42b491:	48 8d 44 ad 00       	lea    0x0(%rbp,%rbp,4),%rax
  42b496:	4c 8b 24 c5 80 56 44 	mov    0x445680(,%rax,8),%r12
  42b49d:	00 
  42b49e:	4d 85 e4             	test   %r12,%r12
  42b4a1:	0f 84 74 fe ff ff    	je     42b31b <OBJ_obj2txt+0x2cb>
  42b4a7:	e9 50 ff ff ff       	jmpq   42b3fc <OBJ_obj2txt+0x3ac>
  42b4ac:	0f 1f 40 00          	nopl   0x0(%rax)
  42b4b0:	4c 63 7c 24 0c       	movslq 0xc(%rsp),%r15
  42b4b5:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  42b4ba:	48 89 c6             	mov    %rax,%rsi
  42b4bd:	4c 89 fa             	mov    %r15,%rdx
  42b4c0:	e8 7b a8 ff ff       	callq  425d40 <BUF_strlcpy>
  42b4c5:	44 39 74 24 0c       	cmp    %r14d,0xc(%rsp)
  42b4ca:	7d 12                	jge    42b4de <OBJ_obj2txt+0x48e>
  42b4cc:	4c 01 7c 24 10       	add    %r15,0x10(%rsp)
  42b4d1:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%rsp)
  42b4d8:	00 
  42b4d9:	e9 be fe ff ff       	jmpq   42b39c <OBJ_obj2txt+0x34c>
  42b4de:	49 63 c6             	movslq %r14d,%rax
  42b4e1:	44 29 74 24 0c       	sub    %r14d,0xc(%rsp)
  42b4e6:	48 01 44 24 10       	add    %rax,0x10(%rsp)
  42b4eb:	e9 ac fe ff ff       	jmpq   42b39c <OBJ_obj2txt+0x34c>
  42b4f0:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%rsp)
  42b4f7:	00 
  42b4f8:	e9 fd fd ff ff       	jmpq   42b2fa <OBJ_obj2txt+0x2aa>
  42b4fd:	41 b8 6a 01 00 00    	mov    $0x16a,%r8d
  42b503:	b9 9f e8 43 00       	mov    $0x43e89f,%ecx
  42b508:	ba 65 00 00 00       	mov    $0x65,%edx
  42b50d:	be 66 00 00 00       	mov    $0x66,%esi
  42b512:	bf 08 00 00 00       	mov    $0x8,%edi
  42b517:	e8 34 ce ff ff       	callq  428350 <ERR_put_error>
  42b51c:	41 b8 4a 01 00 00    	mov    $0x14a,%r8d
  42b522:	b9 9f e8 43 00       	mov    $0x43e89f,%ecx
  42b527:	ba 65 00 00 00       	mov    $0x65,%edx
  42b52c:	be 68 00 00 00       	mov    $0x68,%esi
  42b531:	bf 08 00 00 00       	mov    $0x8,%edi
  42b536:	e8 15 ce ff ff       	callq  428350 <ERR_put_error>
  42b53b:	e9 db fd ff ff       	jmpq   42b31b <OBJ_obj2txt+0x2cb>
  42b540:	e8 7b b9 fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  42b545:	41 b8 7b 01 00 00    	mov    $0x17b,%r8d
  42b54b:	b9 9f e8 43 00       	mov    $0x43e89f,%ecx
  42b550:	ba 65 00 00 00       	mov    $0x65,%edx
  42b555:	be 66 00 00 00       	mov    $0x66,%esi
  42b55a:	bf 08 00 00 00       	mov    $0x8,%edi
  42b55f:	e8 ec cd ff ff       	callq  428350 <ERR_put_error>
  42b564:	48 8b 3d fd f3 22 00 	mov    0x22f3fd(%rip),%rdi        # 65a968 <added>
  42b56b:	48 85 ff             	test   %rdi,%rdi
  42b56e:	0f 84 a7 fd ff ff    	je     42b31b <OBJ_obj2txt+0x2cb>
  42b574:	48 8d 44 24 30       	lea    0x30(%rsp),%rax
  42b579:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
  42b57e:	c7 44 24 20 03 00 00 	movl   $0x3,0x20(%rsp)
  42b585:	00 
  42b586:	89 6c 24 40          	mov    %ebp,0x40(%rsp)
  42b58a:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  42b58f:	e8 ac 97 00 00       	callq  434d40 <lh_retrieve>
  42b594:	48 85 c0             	test   %rax,%rax
  42b597:	74 0c                	je     42b5a5 <OBJ_obj2txt+0x555>
  42b599:	48 8b 40 08          	mov    0x8(%rax),%rax
  42b59d:	4c 8b 20             	mov    (%rax),%r12
  42b5a0:	e9 f9 fe ff ff       	jmpq   42b49e <OBJ_obj2txt+0x44e>
  42b5a5:	41 b8 5b 01 00 00    	mov    $0x15b,%r8d
  42b5ab:	e9 72 ff ff ff       	jmpq   42b522 <OBJ_obj2txt+0x4d2>

000000000042b5b0 <OBJ_ln2nid>:
  42b5b0:	41 56                	push   %r14
  42b5b2:	41 55                	push   %r13
  42b5b4:	41 54                	push   %r12
  42b5b6:	55                   	push   %rbp
  42b5b7:	53                   	push   %rbx
  42b5b8:	48 83 ec 40          	sub    $0x40,%rsp
  42b5bc:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  42b5c3:	00 00 
  42b5c5:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  42b5ca:	31 c0                	xor    %eax,%eax
  42b5cc:	48 8b 05 95 f3 22 00 	mov    0x22f395(%rip),%rax        # 65a968 <added>
  42b5d3:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  42b5d8:	48 85 c0             	test   %rax,%rax
  42b5db:	74 53                	je     42b630 <OBJ_ln2nid+0x80>
  42b5dd:	48 8d 54 24 10       	lea    0x10(%rsp),%rdx
  42b5e2:	48 89 e6             	mov    %rsp,%rsi
  42b5e5:	48 89 c7             	mov    %rax,%rdi
  42b5e8:	c7 04 24 02 00 00 00 	movl   $0x2,(%rsp)
  42b5ef:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  42b5f4:	e8 47 97 00 00       	callq  434d40 <lh_retrieve>
  42b5f9:	48 85 c0             	test   %rax,%rax
  42b5fc:	4c 8b 64 24 18       	mov    0x18(%rsp),%r12
  42b601:	74 30                	je     42b633 <OBJ_ln2nid+0x83>
  42b603:	48 8b 40 08          	mov    0x8(%rax),%rax
  42b607:	8b 40 10             	mov    0x10(%rax),%eax
  42b60a:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  42b60f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  42b616:	00 00 
  42b618:	0f 85 83 00 00 00    	jne    42b6a1 <OBJ_ln2nid+0xf1>
  42b61e:	48 83 c4 40          	add    $0x40,%rsp
  42b622:	5b                   	pop    %rbx
  42b623:	5d                   	pop    %rbp
  42b624:	41 5c                	pop    %r12
  42b626:	41 5d                	pop    %r13
  42b628:	41 5e                	pop    %r14
  42b62a:	c3                   	retq   
  42b62b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42b630:	49 89 fc             	mov    %rdi,%r12
  42b633:	41 be 91 03 00 00    	mov    $0x391,%r14d
  42b639:	45 31 ed             	xor    %r13d,%r13d
  42b63c:	eb 0d                	jmp    42b64b <OBJ_ln2nid+0x9b>
  42b63e:	66 90                	xchg   %ax,%ax
  42b640:	74 4e                	je     42b690 <OBJ_ln2nid+0xe0>
  42b642:	44 8d 6b 01          	lea    0x1(%rbx),%r13d
  42b646:	45 39 ee             	cmp    %r13d,%r14d
  42b649:	7e 37                	jle    42b682 <OBJ_ln2nid+0xd2>
  42b64b:	43 8d 5c 35 00       	lea    0x0(%r13,%r14,1),%ebx
  42b650:	4c 89 e7             	mov    %r12,%rdi
  42b653:	d1 fb                	sar    %ebx
  42b655:	8d 04 9d 00 00 00 00 	lea    0x0(,%rbx,4),%eax
  42b65c:	48 98                	cltq   
  42b65e:	8b a8 80 39 44 00    	mov    0x443980(%rax),%ebp
  42b664:	48 8d 44 ad 00       	lea    0x0(%rbp,%rbp,4),%rax
  42b669:	48 8b 34 c5 88 56 44 	mov    0x445688(,%rax,8),%rsi
  42b670:	00 
  42b671:	e8 5a b8 fd ff       	callq  406ed0 <strcmp@plt>
  42b676:	85 c0                	test   %eax,%eax
  42b678:	79 c6                	jns    42b640 <OBJ_ln2nid+0x90>
  42b67a:	41 89 de             	mov    %ebx,%r14d
  42b67d:	45 39 ee             	cmp    %r13d,%r14d
  42b680:	7f c9                	jg     42b64b <OBJ_ln2nid+0x9b>
  42b682:	85 c0                	test   %eax,%eax
  42b684:	74 0a                	je     42b690 <OBJ_ln2nid+0xe0>
  42b686:	31 c0                	xor    %eax,%eax
  42b688:	eb 80                	jmp    42b60a <OBJ_ln2nid+0x5a>
  42b68a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  42b690:	48 8d 44 ad 00       	lea    0x0(%rbp,%rbp,4),%rax
  42b695:	8b 04 c5 90 56 44 00 	mov    0x445690(,%rax,8),%eax
  42b69c:	e9 69 ff ff ff       	jmpq   42b60a <OBJ_ln2nid+0x5a>
  42b6a1:	e8 1a b8 fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  42b6a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  42b6ad:	00 00 00 

000000000042b6b0 <OBJ_sn2nid>:
  42b6b0:	41 56                	push   %r14
  42b6b2:	41 55                	push   %r13
  42b6b4:	41 54                	push   %r12
  42b6b6:	55                   	push   %rbp
  42b6b7:	53                   	push   %rbx
  42b6b8:	48 83 ec 40          	sub    $0x40,%rsp
  42b6bc:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  42b6c3:	00 00 
  42b6c5:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  42b6ca:	31 c0                	xor    %eax,%eax
  42b6cc:	48 8b 05 95 f2 22 00 	mov    0x22f295(%rip),%rax        # 65a968 <added>
  42b6d3:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  42b6d8:	48 85 c0             	test   %rax,%rax
  42b6db:	74 53                	je     42b730 <OBJ_sn2nid+0x80>
  42b6dd:	48 8d 54 24 10       	lea    0x10(%rsp),%rdx
  42b6e2:	48 89 e6             	mov    %rsp,%rsi
  42b6e5:	48 89 c7             	mov    %rax,%rdi
  42b6e8:	c7 04 24 01 00 00 00 	movl   $0x1,(%rsp)
  42b6ef:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  42b6f4:	e8 47 96 00 00       	callq  434d40 <lh_retrieve>
  42b6f9:	48 85 c0             	test   %rax,%rax
  42b6fc:	4c 8b 64 24 10       	mov    0x10(%rsp),%r12
  42b701:	74 30                	je     42b733 <OBJ_sn2nid+0x83>
  42b703:	48 8b 40 08          	mov    0x8(%rax),%rax
  42b707:	8b 40 10             	mov    0x10(%rax),%eax
  42b70a:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  42b70f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  42b716:	00 00 
  42b718:	0f 85 83 00 00 00    	jne    42b7a1 <OBJ_sn2nid+0xf1>
  42b71e:	48 83 c4 40          	add    $0x40,%rsp
  42b722:	5b                   	pop    %rbx
  42b723:	5d                   	pop    %rbp
  42b724:	41 5c                	pop    %r12
  42b726:	41 5d                	pop    %r13
  42b728:	41 5e                	pop    %r14
  42b72a:	c3                   	retq   
  42b72b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42b730:	49 89 fc             	mov    %rdi,%r12
  42b733:	41 be 91 03 00 00    	mov    $0x391,%r14d
  42b739:	45 31 ed             	xor    %r13d,%r13d
  42b73c:	eb 0d                	jmp    42b74b <OBJ_sn2nid+0x9b>
  42b73e:	66 90                	xchg   %ax,%ax
  42b740:	74 4e                	je     42b790 <OBJ_sn2nid+0xe0>
  42b742:	44 8d 6b 01          	lea    0x1(%rbx),%r13d
  42b746:	45 39 ee             	cmp    %r13d,%r14d
  42b749:	7e 37                	jle    42b782 <OBJ_sn2nid+0xd2>
  42b74b:	43 8d 5c 35 00       	lea    0x0(%r13,%r14,1),%ebx
  42b750:	4c 89 e7             	mov    %r12,%rdi
  42b753:	d1 fb                	sar    %ebx
  42b755:	8d 04 9d 00 00 00 00 	lea    0x0(,%rbx,4),%eax
  42b75c:	48 98                	cltq   
  42b75e:	8b a8 00 48 44 00    	mov    0x444800(%rax),%ebp
  42b764:	48 8d 44 ad 00       	lea    0x0(%rbp,%rbp,4),%rax
  42b769:	48 8b 34 c5 80 56 44 	mov    0x445680(,%rax,8),%rsi
  42b770:	00 
  42b771:	e8 5a b7 fd ff       	callq  406ed0 <strcmp@plt>
  42b776:	85 c0                	test   %eax,%eax
  42b778:	79 c6                	jns    42b740 <OBJ_sn2nid+0x90>
  42b77a:	41 89 de             	mov    %ebx,%r14d
  42b77d:	45 39 ee             	cmp    %r13d,%r14d
  42b780:	7f c9                	jg     42b74b <OBJ_sn2nid+0x9b>
  42b782:	85 c0                	test   %eax,%eax
  42b784:	74 0a                	je     42b790 <OBJ_sn2nid+0xe0>
  42b786:	31 c0                	xor    %eax,%eax
  42b788:	eb 80                	jmp    42b70a <OBJ_sn2nid+0x5a>
  42b78a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  42b790:	48 8d 44 ad 00       	lea    0x0(%rbp,%rbp,4),%rax
  42b795:	8b 04 c5 90 56 44 00 	mov    0x445690(,%rax,8),%eax
  42b79c:	e9 69 ff ff ff       	jmpq   42b70a <OBJ_sn2nid+0x5a>
  42b7a1:	e8 1a b7 fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  42b7a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  42b7ad:	00 00 00 

000000000042b7b0 <OBJ_txt2obj>:
  42b7b0:	41 55                	push   %r13
  42b7b2:	41 54                	push   %r12
  42b7b4:	55                   	push   %rbp
  42b7b5:	53                   	push   %rbx
  42b7b6:	48 89 fd             	mov    %rdi,%rbp
  42b7b9:	48 83 ec 48          	sub    $0x48,%rsp
  42b7bd:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  42b7c4:	00 00 
  42b7c6:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  42b7cb:	31 c0                	xor    %eax,%eax
  42b7cd:	85 f6                	test   %esi,%esi
  42b7cf:	75 1d                	jne    42b7ee <OBJ_txt2obj+0x3e>
  42b7d1:	e8 da fe ff ff       	callq  42b6b0 <OBJ_sn2nid>
  42b7d6:	85 c0                	test   %eax,%eax
  42b7d8:	0f 85 ca 00 00 00    	jne    42b8a8 <OBJ_txt2obj+0xf8>
  42b7de:	48 89 ef             	mov    %rbp,%rdi
  42b7e1:	e8 ca fd ff ff       	callq  42b5b0 <OBJ_ln2nid>
  42b7e6:	85 c0                	test   %eax,%eax
  42b7e8:	0f 85 ba 00 00 00    	jne    42b8a8 <OBJ_txt2obj+0xf8>
  42b7ee:	31 f6                	xor    %esi,%esi
  42b7f0:	31 ff                	xor    %edi,%edi
  42b7f2:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  42b7f7:	48 89 ea             	mov    %rbp,%rdx
  42b7fa:	e8 c1 97 00 00       	callq  434fc0 <a2d_ASN1_OBJECT>
  42b7ff:	85 c0                	test   %eax,%eax
  42b801:	89 c3                	mov    %eax,%ebx
  42b803:	0f 8e 17 01 00 00    	jle    42b920 <OBJ_txt2obj+0x170>
  42b809:	31 ff                	xor    %edi,%edi
  42b80b:	ba 06 00 00 00       	mov    $0x6,%edx
  42b810:	89 c6                	mov    %eax,%esi
  42b812:	e8 89 a8 00 00       	callq  4360a0 <ASN1_object_size>
  42b817:	ba c4 01 00 00       	mov    $0x1c4,%edx
  42b81c:	be 9f e8 43 00       	mov    $0x43e89f,%esi
  42b821:	89 c7                	mov    %eax,%edi
  42b823:	41 89 c5             	mov    %eax,%r13d
  42b826:	e8 d5 9b ff ff       	callq  425400 <CRYPTO_malloc>
  42b82b:	48 85 c0             	test   %rax,%rax
  42b82e:	49 89 c4             	mov    %rax,%r12
  42b831:	0f 84 e9 00 00 00    	je     42b920 <OBJ_txt2obj+0x170>
  42b837:	45 31 c0             	xor    %r8d,%r8d
  42b83a:	89 da                	mov    %ebx,%edx
  42b83c:	b9 06 00 00 00       	mov    $0x6,%ecx
  42b841:	31 f6                	xor    %esi,%esi
  42b843:	48 89 e7             	mov    %rsp,%rdi
  42b846:	48 89 04 24          	mov    %rax,(%rsp)
  42b84a:	e8 21 a7 00 00       	callq  435f70 <ASN1_put_object>
  42b84f:	48 8b 3c 24          	mov    (%rsp),%rdi
  42b853:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  42b858:	89 de                	mov    %ebx,%esi
  42b85a:	48 89 ea             	mov    %rbp,%rdx
  42b85d:	e8 5e 97 00 00       	callq  434fc0 <a2d_ASN1_OBJECT>
  42b862:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  42b867:	49 63 d5             	movslq %r13d,%rdx
  42b86a:	31 ff                	xor    %edi,%edi
  42b86c:	4c 89 64 24 10       	mov    %r12,0x10(%rsp)
  42b871:	e8 ea a0 00 00       	callq  435960 <d2i_ASN1_OBJECT>
  42b876:	4c 89 e7             	mov    %r12,%rdi
  42b879:	48 89 c3             	mov    %rax,%rbx
  42b87c:	e8 df 9e ff ff       	callq  425760 <CRYPTO_free>
  42b881:	48 89 d8             	mov    %rbx,%rax
  42b884:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  42b889:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  42b890:	00 00 
  42b892:	0f 85 97 00 00 00    	jne    42b92f <OBJ_txt2obj+0x17f>
  42b898:	48 83 c4 48          	add    $0x48,%rsp
  42b89c:	5b                   	pop    %rbx
  42b89d:	5d                   	pop    %rbp
  42b89e:	41 5c                	pop    %r12
  42b8a0:	41 5d                	pop    %r13
  42b8a2:	c3                   	retq   
  42b8a3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42b8a8:	3d 97 03 00 00       	cmp    $0x397,%eax
  42b8ad:	76 39                	jbe    42b8e8 <OBJ_txt2obj+0x138>
  42b8af:	48 8b 3d b2 f0 22 00 	mov    0x22f0b2(%rip),%rdi        # 65a968 <added>
  42b8b6:	48 85 ff             	test   %rdi,%rdi
  42b8b9:	74 65                	je     42b920 <OBJ_txt2obj+0x170>
  42b8bb:	48 8d 54 24 10       	lea    0x10(%rsp),%rdx
  42b8c0:	48 89 e6             	mov    %rsp,%rsi
  42b8c3:	c7 04 24 03 00 00 00 	movl   $0x3,(%rsp)
  42b8ca:	89 44 24 20          	mov    %eax,0x20(%rsp)
  42b8ce:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  42b8d3:	e8 68 94 00 00       	callq  434d40 <lh_retrieve>
  42b8d8:	48 85 c0             	test   %rax,%rax
  42b8db:	74 4a                	je     42b927 <OBJ_txt2obj+0x177>
  42b8dd:	48 8b 40 08          	mov    0x8(%rax),%rax
  42b8e1:	eb a1                	jmp    42b884 <OBJ_txt2obj+0xd4>
  42b8e3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42b8e8:	48 98                	cltq   
  42b8ea:	41 b8 2a 01 00 00    	mov    $0x12a,%r8d
  42b8f0:	48 8d 04 80          	lea    (%rax,%rax,4),%rax
  42b8f4:	48 8d 04 c5 80 56 44 	lea    0x445680(,%rax,8),%rax
  42b8fb:	00 
  42b8fc:	8b 50 10             	mov    0x10(%rax),%edx
  42b8ff:	85 d2                	test   %edx,%edx
  42b901:	75 81                	jne    42b884 <OBJ_txt2obj+0xd4>
  42b903:	b9 9f e8 43 00       	mov    $0x43e89f,%ecx
  42b908:	ba 65 00 00 00       	mov    $0x65,%edx
  42b90d:	be 67 00 00 00       	mov    $0x67,%esi
  42b912:	bf 08 00 00 00       	mov    $0x8,%edi
  42b917:	e8 34 ca ff ff       	callq  428350 <ERR_put_error>
  42b91c:	0f 1f 40 00          	nopl   0x0(%rax)
  42b920:	31 c0                	xor    %eax,%eax
  42b922:	e9 5d ff ff ff       	jmpq   42b884 <OBJ_txt2obj+0xd4>
  42b927:	41 b8 3b 01 00 00    	mov    $0x13b,%r8d
  42b92d:	eb d4                	jmp    42b903 <OBJ_txt2obj+0x153>
  42b92f:	e8 8c b5 fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  42b934:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
  42b93b:	00 00 00 00 00 

000000000042b940 <OBJ_txt2nid>:
  42b940:	41 55                	push   %r13
  42b942:	41 54                	push   %r12
  42b944:	55                   	push   %rbp
  42b945:	53                   	push   %rbx
  42b946:	48 89 fb             	mov    %rdi,%rbx
  42b949:	48 83 ec 48          	sub    $0x48,%rsp
  42b94d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  42b954:	00 00 
  42b956:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  42b95b:	31 c0                	xor    %eax,%eax
  42b95d:	e8 4e fd ff ff       	callq  42b6b0 <OBJ_sn2nid>
  42b962:	85 c0                	test   %eax,%eax
  42b964:	0f 85 d6 00 00 00    	jne    42ba40 <OBJ_txt2nid+0x100>
  42b96a:	48 89 df             	mov    %rbx,%rdi
  42b96d:	e8 3e fc ff ff       	callq  42b5b0 <OBJ_ln2nid>
  42b972:	85 c0                	test   %eax,%eax
  42b974:	0f 85 c6 00 00 00    	jne    42ba40 <OBJ_txt2nid+0x100>
  42b97a:	31 f6                	xor    %esi,%esi
  42b97c:	31 ff                	xor    %edi,%edi
  42b97e:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  42b983:	48 89 da             	mov    %rbx,%rdx
  42b986:	e8 35 96 00 00       	callq  434fc0 <a2d_ASN1_OBJECT>
  42b98b:	85 c0                	test   %eax,%eax
  42b98d:	89 c5                	mov    %eax,%ebp
  42b98f:	0f 8e 2b 01 00 00    	jle    42bac0 <OBJ_txt2nid+0x180>
  42b995:	31 ff                	xor    %edi,%edi
  42b997:	ba 06 00 00 00       	mov    $0x6,%edx
  42b99c:	89 c6                	mov    %eax,%esi
  42b99e:	e8 fd a6 00 00       	callq  4360a0 <ASN1_object_size>
  42b9a3:	ba c4 01 00 00       	mov    $0x1c4,%edx
  42b9a8:	be 9f e8 43 00       	mov    $0x43e89f,%esi
  42b9ad:	89 c7                	mov    %eax,%edi
  42b9af:	41 89 c5             	mov    %eax,%r13d
  42b9b2:	e8 49 9a ff ff       	callq  425400 <CRYPTO_malloc>
  42b9b7:	48 85 c0             	test   %rax,%rax
  42b9ba:	49 89 c4             	mov    %rax,%r12
  42b9bd:	0f 84 fd 00 00 00    	je     42bac0 <OBJ_txt2nid+0x180>
  42b9c3:	45 31 c0             	xor    %r8d,%r8d
  42b9c6:	b9 06 00 00 00       	mov    $0x6,%ecx
  42b9cb:	89 ea                	mov    %ebp,%edx
  42b9cd:	31 f6                	xor    %esi,%esi
  42b9cf:	48 89 e7             	mov    %rsp,%rdi
  42b9d2:	48 89 04 24          	mov    %rax,(%rsp)
  42b9d6:	e8 95 a5 00 00       	callq  435f70 <ASN1_put_object>
  42b9db:	48 8b 3c 24          	mov    (%rsp),%rdi
  42b9df:	48 89 da             	mov    %rbx,%rdx
  42b9e2:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  42b9e7:	89 ee                	mov    %ebp,%esi
  42b9e9:	e8 d2 95 00 00       	callq  434fc0 <a2d_ASN1_OBJECT>
  42b9ee:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  42b9f3:	31 ff                	xor    %edi,%edi
  42b9f5:	49 63 d5             	movslq %r13d,%rdx
  42b9f8:	4c 89 64 24 10       	mov    %r12,0x10(%rsp)
  42b9fd:	e8 5e 9f 00 00       	callq  435960 <d2i_ASN1_OBJECT>
  42ba02:	4c 89 e7             	mov    %r12,%rdi
  42ba05:	48 89 c3             	mov    %rax,%rbx
  42ba08:	e8 53 9d ff ff       	callq  425760 <CRYPTO_free>
  42ba0d:	48 89 df             	mov    %rbx,%rdi
  42ba10:	e8 2b f5 ff ff       	callq  42af40 <OBJ_obj2nid>
  42ba15:	48 89 df             	mov    %rbx,%rdi
  42ba18:	89 c5                	mov    %eax,%ebp
  42ba1a:	e8 c1 9e 00 00       	callq  4358e0 <ASN1_OBJECT_free>
  42ba1f:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  42ba24:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  42ba2b:	00 00 
  42ba2d:	89 e8                	mov    %ebp,%eax
  42ba2f:	0f 85 9a 00 00 00    	jne    42bacf <OBJ_txt2nid+0x18f>
  42ba35:	48 83 c4 48          	add    $0x48,%rsp
  42ba39:	5b                   	pop    %rbx
  42ba3a:	5d                   	pop    %rbp
  42ba3b:	41 5c                	pop    %r12
  42ba3d:	41 5d                	pop    %r13
  42ba3f:	c3                   	retq   
  42ba40:	3d 97 03 00 00       	cmp    $0x397,%eax
  42ba45:	76 39                	jbe    42ba80 <OBJ_txt2nid+0x140>
  42ba47:	48 8b 3d 1a ef 22 00 	mov    0x22ef1a(%rip),%rdi        # 65a968 <added>
  42ba4e:	48 85 ff             	test   %rdi,%rdi
  42ba51:	74 6d                	je     42bac0 <OBJ_txt2nid+0x180>
  42ba53:	48 8d 54 24 10       	lea    0x10(%rsp),%rdx
  42ba58:	48 89 e6             	mov    %rsp,%rsi
  42ba5b:	c7 04 24 03 00 00 00 	movl   $0x3,(%rsp)
  42ba62:	89 44 24 20          	mov    %eax,0x20(%rsp)
  42ba66:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  42ba6b:	e8 d0 92 00 00       	callq  434d40 <lh_retrieve>
  42ba70:	48 85 c0             	test   %rax,%rax
  42ba73:	74 52                	je     42bac7 <OBJ_txt2nid+0x187>
  42ba75:	48 8b 58 08          	mov    0x8(%rax),%rbx
  42ba79:	eb 92                	jmp    42ba0d <OBJ_txt2nid+0xcd>
  42ba7b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42ba80:	48 98                	cltq   
  42ba82:	41 b8 2a 01 00 00    	mov    $0x12a,%r8d
  42ba88:	48 8d 04 80          	lea    (%rax,%rax,4),%rax
  42ba8c:	48 8d 1c c5 80 56 44 	lea    0x445680(,%rax,8),%rbx
  42ba93:	00 
  42ba94:	8b 43 10             	mov    0x10(%rbx),%eax
  42ba97:	85 c0                	test   %eax,%eax
  42ba99:	0f 85 6e ff ff ff    	jne    42ba0d <OBJ_txt2nid+0xcd>
  42ba9f:	b9 9f e8 43 00       	mov    $0x43e89f,%ecx
  42baa4:	ba 65 00 00 00       	mov    $0x65,%edx
  42baa9:	be 67 00 00 00       	mov    $0x67,%esi
  42baae:	bf 08 00 00 00       	mov    $0x8,%edi
  42bab3:	e8 98 c8 ff ff       	callq  428350 <ERR_put_error>
  42bab8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  42babf:	00 
  42bac0:	31 db                	xor    %ebx,%ebx
  42bac2:	e9 46 ff ff ff       	jmpq   42ba0d <OBJ_txt2nid+0xcd>
  42bac7:	41 b8 3b 01 00 00    	mov    $0x13b,%r8d
  42bacd:	eb d0                	jmp    42ba9f <OBJ_txt2nid+0x15f>
  42bacf:	e8 ec b3 fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  42bad4:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
  42badb:	00 00 00 00 00 

000000000042bae0 <OBJ_bsearch_>:
  42bae0:	41 57                	push   %r15
  42bae2:	41 56                	push   %r14
  42bae4:	45 31 ff             	xor    %r15d,%r15d
  42bae7:	41 55                	push   %r13
  42bae9:	41 54                	push   %r12
  42baeb:	41 89 d6             	mov    %edx,%r14d
  42baee:	55                   	push   %rbp
  42baef:	53                   	push   %rbx
  42baf0:	41 89 cd             	mov    %ecx,%r13d
  42baf3:	4d 89 c4             	mov    %r8,%r12
  42baf6:	48 83 ec 18          	sub    $0x18,%rsp
  42bafa:	85 d2                	test   %edx,%edx
  42bafc:	48 89 3c 24          	mov    %rdi,(%rsp)
  42bb00:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  42bb05:	7f 14                	jg     42bb1b <OBJ_bsearch_+0x3b>
  42bb07:	eb 57                	jmp    42bb60 <OBJ_bsearch_+0x80>
  42bb09:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  42bb10:	74 37                	je     42bb49 <OBJ_bsearch_+0x69>
  42bb12:	44 8d 7d 01          	lea    0x1(%rbp),%r15d
  42bb16:	45 39 fe             	cmp    %r15d,%r14d
  42bb19:	7e 2a                	jle    42bb45 <OBJ_bsearch_+0x65>
  42bb1b:	43 8d 2c 37          	lea    (%r15,%r14,1),%ebp
  42bb1f:	44 89 eb             	mov    %r13d,%ebx
  42bb22:	48 8b 3c 24          	mov    (%rsp),%rdi
  42bb26:	d1 fd                	sar    %ebp
  42bb28:	0f af dd             	imul   %ebp,%ebx
  42bb2b:	48 63 db             	movslq %ebx,%rbx
  42bb2e:	48 03 5c 24 08       	add    0x8(%rsp),%rbx
  42bb33:	48 89 de             	mov    %rbx,%rsi
  42bb36:	41 ff d4             	callq  *%r12
  42bb39:	85 c0                	test   %eax,%eax
  42bb3b:	79 d3                	jns    42bb10 <OBJ_bsearch_+0x30>
  42bb3d:	41 89 ee             	mov    %ebp,%r14d
  42bb40:	45 39 fe             	cmp    %r15d,%r14d
  42bb43:	7f d6                	jg     42bb1b <OBJ_bsearch_+0x3b>
  42bb45:	85 c0                	test   %eax,%eax
  42bb47:	75 17                	jne    42bb60 <OBJ_bsearch_+0x80>
  42bb49:	48 83 c4 18          	add    $0x18,%rsp
  42bb4d:	48 89 d8             	mov    %rbx,%rax
  42bb50:	5b                   	pop    %rbx
  42bb51:	5d                   	pop    %rbp
  42bb52:	41 5c                	pop    %r12
  42bb54:	41 5d                	pop    %r13
  42bb56:	41 5e                	pop    %r14
  42bb58:	41 5f                	pop    %r15
  42bb5a:	c3                   	retq   
  42bb5b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42bb60:	48 83 c4 18          	add    $0x18,%rsp
  42bb64:	31 c0                	xor    %eax,%eax
  42bb66:	5b                   	pop    %rbx
  42bb67:	5d                   	pop    %rbp
  42bb68:	41 5c                	pop    %r12
  42bb6a:	41 5d                	pop    %r13
  42bb6c:	41 5e                	pop    %r14
  42bb6e:	41 5f                	pop    %r15
  42bb70:	c3                   	retq   
  42bb71:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  42bb78:	0f 1f 84 00 00 00 00 
  42bb7f:	00 

000000000042bb80 <OBJ_bsearch_ex_>:
  42bb80:	41 57                	push   %r15
  42bb82:	41 56                	push   %r14
  42bb84:	41 55                	push   %r13
  42bb86:	41 54                	push   %r12
  42bb88:	55                   	push   %rbp
  42bb89:	53                   	push   %rbx
  42bb8a:	89 d5                	mov    %edx,%ebp
  42bb8c:	48 83 ec 28          	sub    $0x28,%rsp
  42bb90:	83 fa 00             	cmp    $0x0,%edx
  42bb93:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  42bb98:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  42bb9d:	44 89 4c 24 18       	mov    %r9d,0x18(%rsp)
  42bba2:	74 74                	je     42bc18 <OBJ_bsearch_ex_+0x98>
  42bba4:	0f 8e e4 00 00 00    	jle    42bc8e <OBJ_bsearch_ex_+0x10e>
  42bbaa:	41 89 cd             	mov    %ecx,%r13d
  42bbad:	4d 89 c4             	mov    %r8,%r12
  42bbb0:	45 31 f6             	xor    %r14d,%r14d
  42bbb3:	eb 0e                	jmp    42bbc3 <OBJ_bsearch_ex_+0x43>
  42bbb5:	0f 1f 00             	nopl   (%rax)
  42bbb8:	74 66                	je     42bc20 <OBJ_bsearch_ex_+0xa0>
  42bbba:	45 8d 77 01          	lea    0x1(%r15),%r14d
  42bbbe:	44 39 f5             	cmp    %r14d,%ebp
  42bbc1:	7e 2e                	jle    42bbf1 <OBJ_bsearch_ex_+0x71>
  42bbc3:	41 8d 0c 2e          	lea    (%r14,%rbp,1),%ecx
  42bbc7:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  42bbcc:	d1 f9                	sar    %ecx
  42bbce:	89 cb                	mov    %ecx,%ebx
  42bbd0:	41 89 cf             	mov    %ecx,%r15d
  42bbd3:	41 0f af dd          	imul   %r13d,%ebx
  42bbd7:	48 63 db             	movslq %ebx,%rbx
  42bbda:	48 03 5c 24 10       	add    0x10(%rsp),%rbx
  42bbdf:	48 89 de             	mov    %rbx,%rsi
  42bbe2:	41 ff d4             	callq  *%r12
  42bbe5:	85 c0                	test   %eax,%eax
  42bbe7:	79 cf                	jns    42bbb8 <OBJ_bsearch_ex_+0x38>
  42bbe9:	44 89 fd             	mov    %r15d,%ebp
  42bbec:	44 39 f5             	cmp    %r14d,%ebp
  42bbef:	7f d2                	jg     42bbc3 <OBJ_bsearch_ex_+0x43>
  42bbf1:	85 c0                	test   %eax,%eax
  42bbf3:	74 2b                	je     42bc20 <OBJ_bsearch_ex_+0xa0>
  42bbf5:	f6 44 24 18 01       	testb  $0x1,0x18(%rsp)
  42bbfa:	74 1c                	je     42bc18 <OBJ_bsearch_ex_+0x98>
  42bbfc:	49 89 d8             	mov    %rbx,%r8
  42bbff:	48 83 c4 28          	add    $0x28,%rsp
  42bc03:	4c 89 c0             	mov    %r8,%rax
  42bc06:	5b                   	pop    %rbx
  42bc07:	5d                   	pop    %rbp
  42bc08:	41 5c                	pop    %r12
  42bc0a:	41 5d                	pop    %r13
  42bc0c:	41 5e                	pop    %r14
  42bc0e:	41 5f                	pop    %r15
  42bc10:	c3                   	retq   
  42bc11:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  42bc18:	45 31 c0             	xor    %r8d,%r8d
  42bc1b:	eb e2                	jmp    42bbff <OBJ_bsearch_ex_+0x7f>
  42bc1d:	0f 1f 00             	nopl   (%rax)
  42bc20:	f6 44 24 18 02       	testb  $0x2,0x18(%rsp)
  42bc25:	49 89 d8             	mov    %rbx,%r8
  42bc28:	74 d5                	je     42bbff <OBJ_bsearch_ex_+0x7f>
  42bc2a:	45 85 ff             	test   %r15d,%r15d
  42bc2d:	74 cd                	je     42bbfc <OBJ_bsearch_ex_+0x7c>
  42bc2f:	45 8d 77 ff          	lea    -0x1(%r15),%r14d
  42bc33:	44 89 ea             	mov    %r13d,%edx
  42bc36:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  42bc3b:	44 89 eb             	mov    %r13d,%ebx
  42bc3e:	41 0f af d6          	imul   %r14d,%edx
  42bc42:	f7 db                	neg    %ebx
  42bc44:	48 63 eb             	movslq %ebx,%rbp
  42bc47:	48 63 d2             	movslq %edx,%rdx
  42bc4a:	48 8d 1c 10          	lea    (%rax,%rdx,1),%rbx
  42bc4e:	eb 0f                	jmp    42bc5f <OBJ_bsearch_ex_+0xdf>
  42bc50:	48 01 eb             	add    %rbp,%rbx
  42bc53:	45 85 f6             	test   %r14d,%r14d
  42bc56:	45 89 f7             	mov    %r14d,%r15d
  42bc59:	74 a4                	je     42bbff <OBJ_bsearch_ex_+0x7f>
  42bc5b:	41 83 ee 01          	sub    $0x1,%r14d
  42bc5f:	48 89 de             	mov    %rbx,%rsi
  42bc62:	48 89 5c 24 18       	mov    %rbx,0x18(%rsp)
  42bc67:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  42bc6c:	41 ff d4             	callq  *%r12
  42bc6f:	85 c0                	test   %eax,%eax
  42bc71:	4c 8b 44 24 18       	mov    0x18(%rsp),%r8
  42bc76:	74 d8                	je     42bc50 <OBJ_bsearch_ex_+0xd0>
  42bc78:	44 89 e8             	mov    %r13d,%eax
  42bc7b:	4c 8b 44 24 10       	mov    0x10(%rsp),%r8
  42bc80:	41 0f af c7          	imul   %r15d,%eax
  42bc84:	48 98                	cltq   
  42bc86:	49 01 c0             	add    %rax,%r8
  42bc89:	e9 71 ff ff ff       	jmpq   42bbff <OBJ_bsearch_ex_+0x7f>
  42bc8e:	f6 44 24 18 02       	testb  $0x2,0x18(%rsp)
  42bc93:	74 83                	je     42bc18 <OBJ_bsearch_ex_+0x98>
  42bc95:	48 8b 5c 24 10       	mov    0x10(%rsp),%rbx
  42bc9a:	e9 5d ff ff ff       	jmpq   42bbfc <OBJ_bsearch_ex_+0x7c>
  42bc9f:	90                   	nop

000000000042bca0 <OBJ_create>:
  42bca0:	41 57                	push   %r15
  42bca2:	41 56                	push   %r14
  42bca4:	49 89 ff             	mov    %rdi,%r15
  42bca7:	41 55                	push   %r13
  42bca9:	41 54                	push   %r12
  42bcab:	49 89 f5             	mov    %rsi,%r13
  42bcae:	55                   	push   %rbp
  42bcaf:	53                   	push   %rbx
  42bcb0:	31 f6                	xor    %esi,%esi
  42bcb2:	49 89 d6             	mov    %rdx,%r14
  42bcb5:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  42bcba:	48 89 fa             	mov    %rdi,%rdx
  42bcbd:	48 83 ec 08          	sub    $0x8,%rsp
  42bcc1:	31 ff                	xor    %edi,%edi
  42bcc3:	31 db                	xor    %ebx,%ebx
  42bcc5:	e8 f6 92 00 00       	callq  434fc0 <a2d_ASN1_OBJECT>
  42bcca:	85 c0                	test   %eax,%eax
  42bccc:	89 c5                	mov    %eax,%ebp
  42bcce:	7e 43                	jle    42bd13 <OBJ_create+0x73>
  42bcd0:	ba 19 03 00 00       	mov    $0x319,%edx
  42bcd5:	be 9f e8 43 00       	mov    $0x43e89f,%esi
  42bcda:	89 c7                	mov    %eax,%edi
  42bcdc:	e8 1f 97 ff ff       	callq  425400 <CRYPTO_malloc>
  42bce1:	48 85 c0             	test   %rax,%rax
  42bce4:	49 89 c4             	mov    %rax,%r12
  42bce7:	74 77                	je     42bd60 <OBJ_create+0xc0>
  42bce9:	89 ee                	mov    %ebp,%esi
  42bceb:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  42bcf0:	4c 89 fa             	mov    %r15,%rdx
  42bcf3:	48 89 c7             	mov    %rax,%rdi
  42bcf6:	31 ed                	xor    %ebp,%ebp
  42bcf8:	31 db                	xor    %ebx,%ebx
  42bcfa:	e8 c1 92 00 00       	callq  434fc0 <a2d_ASN1_OBJECT>
  42bcff:	85 c0                	test   %eax,%eax
  42bd01:	75 25                	jne    42bd28 <OBJ_create+0x88>
  42bd03:	48 89 ef             	mov    %rbp,%rdi
  42bd06:	e8 d5 9b 00 00       	callq  4358e0 <ASN1_OBJECT_free>
  42bd0b:	4c 89 e7             	mov    %r12,%rdi
  42bd0e:	e8 4d 9a ff ff       	callq  425760 <CRYPTO_free>
  42bd13:	48 83 c4 08          	add    $0x8,%rsp
  42bd17:	89 d8                	mov    %ebx,%eax
  42bd19:	5b                   	pop    %rbx
  42bd1a:	5d                   	pop    %rbp
  42bd1b:	41 5c                	pop    %r12
  42bd1d:	41 5d                	pop    %r13
  42bd1f:	41 5e                	pop    %r14
  42bd21:	41 5f                	pop    %r15
  42bd23:	c3                   	retq   
  42bd24:	0f 1f 40 00          	nopl   0x0(%rax)
  42bd28:	8b 3d 22 cb 22 00    	mov    0x22cb22(%rip),%edi        # 658850 <new_nid>
  42bd2e:	4d 89 f0             	mov    %r14,%r8
  42bd31:	4c 89 e9             	mov    %r13,%rcx
  42bd34:	4c 89 e6             	mov    %r12,%rsi
  42bd37:	8d 57 01             	lea    0x1(%rdi),%edx
  42bd3a:	89 15 10 cb 22 00    	mov    %edx,0x22cb10(%rip)        # 658850 <new_nid>
  42bd40:	89 c2                	mov    %eax,%edx
  42bd42:	e8 b9 9e 00 00       	callq  435c00 <ASN1_OBJECT_create>
  42bd47:	48 85 c0             	test   %rax,%rax
  42bd4a:	48 89 c5             	mov    %rax,%rbp
  42bd4d:	74 b4                	je     42bd03 <OBJ_create+0x63>
  42bd4f:	48 89 c7             	mov    %rax,%rdi
  42bd52:	e8 79 ed ff ff       	callq  42aad0 <OBJ_add_object>
  42bd57:	89 c3                	mov    %eax,%ebx
  42bd59:	eb a8                	jmp    42bd03 <OBJ_create+0x63>
  42bd5b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42bd60:	41 b8 1b 03 00 00    	mov    $0x31b,%r8d
  42bd66:	b9 9f e8 43 00       	mov    $0x43e89f,%ecx
  42bd6b:	ba 41 00 00 00       	mov    $0x41,%edx
  42bd70:	be 64 00 00 00       	mov    $0x64,%esi
  42bd75:	bf 08 00 00 00       	mov    $0x8,%edi
  42bd7a:	e8 d1 c5 ff ff       	callq  428350 <ERR_put_error>
  42bd7f:	eb 92                	jmp    42bd13 <OBJ_create+0x73>
  42bd81:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  42bd88:	0f 1f 84 00 00 00 00 
  42bd8f:	00 

000000000042bd90 <OBJ_create_objects>:
  42bd90:	41 54                	push   %r12
  42bd92:	55                   	push   %rbp
  42bd93:	49 89 fc             	mov    %rdi,%r12
  42bd96:	53                   	push   %rbx
  42bd97:	31 ed                	xor    %ebp,%ebp
  42bd99:	31 db                	xor    %ebx,%ebx
  42bd9b:	48 81 ec 10 02 00 00 	sub    $0x210,%rsp
  42bda2:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  42bda9:	00 00 
  42bdab:	48 89 84 24 08 02 00 	mov    %rax,0x208(%rsp)
  42bdb2:	00 
  42bdb3:	31 c0                	xor    %eax,%eax
  42bdb5:	0f 1f 00             	nopl   (%rax)
  42bdb8:	ba 00 02 00 00       	mov    $0x200,%edx
  42bdbd:	48 89 e6             	mov    %rsp,%rsi
  42bdc0:	4c 89 e7             	mov    %r12,%rdi
  42bdc3:	e8 e8 45 00 00       	callq  4303b0 <BIO_gets>
  42bdc8:	85 c0                	test   %eax,%eax
  42bdca:	0f 8e d4 00 00 00    	jle    42bea4 <OBJ_create_objects+0x114>
  42bdd0:	83 e8 01             	sub    $0x1,%eax
  42bdd3:	48 98                	cltq   
  42bdd5:	c6 04 04 00          	movb   $0x0,(%rsp,%rax,1)
  42bdd9:	e8 32 b0 fd ff       	callq  406e10 <__ctype_b_loc@plt>
  42bdde:	0f b6 0c 24          	movzbl (%rsp),%ecx
  42bde2:	48 8b 00             	mov    (%rax),%rax
  42bde5:	48 89 ca             	mov    %rcx,%rdx
  42bde8:	0f b7 0c 48          	movzwl (%rax,%rcx,2),%ecx
  42bdec:	f6 c1 08             	test   $0x8,%cl
  42bdef:	0f 84 af 00 00 00    	je     42bea4 <OBJ_create_objects+0x114>
  42bdf5:	80 e5 08             	and    $0x8,%ch
  42bdf8:	75 09                	jne    42be03 <OBJ_create_objects+0x73>
  42bdfa:	80 fa 2e             	cmp    $0x2e,%dl
  42bdfd:	0f 85 01 01 00 00    	jne    42bf04 <OBJ_create_objects+0x174>
  42be03:	48 89 e1             	mov    %rsp,%rcx
  42be06:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  42be0d:	00 00 00 
  42be10:	48 83 c1 01          	add    $0x1,%rcx
  42be14:	0f b6 31             	movzbl (%rcx),%esi
  42be17:	f6 44 70 01 08       	testb  $0x8,0x1(%rax,%rsi,2)
  42be1c:	49 89 f0             	mov    %rsi,%r8
  42be1f:	75 ef                	jne    42be10 <OBJ_create_objects+0x80>
  42be21:	40 80 fe 2e          	cmp    $0x2e,%sil
  42be25:	74 e9                	je     42be10 <OBJ_create_objects+0x80>
  42be27:	31 f6                	xor    %esi,%esi
  42be29:	45 84 c0             	test   %r8b,%r8b
  42be2c:	74 35                	je     42be63 <OBJ_create_objects+0xd3>
  42be2e:	c6 01 00             	movb   $0x0,(%rcx)
  42be31:	48 8d 71 01          	lea    0x1(%rcx),%rsi
  42be35:	0f b6 49 01          	movzbl 0x1(%rcx),%ecx
  42be39:	f6 44 48 01 20       	testb  $0x20,0x1(%rax,%rcx,2)
  42be3e:	48 89 ca             	mov    %rcx,%rdx
  42be41:	74 16                	je     42be59 <OBJ_create_objects+0xc9>
  42be43:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42be48:	48 83 c6 01          	add    $0x1,%rsi
  42be4c:	0f b6 0e             	movzbl (%rsi),%ecx
  42be4f:	f6 44 48 01 20       	testb  $0x20,0x1(%rax,%rcx,2)
  42be54:	48 89 ca             	mov    %rcx,%rdx
  42be57:	75 ef                	jne    42be48 <OBJ_create_objects+0xb8>
  42be59:	84 d2                	test   %dl,%dl
  42be5b:	75 23                	jne    42be80 <OBJ_create_objects+0xf0>
  42be5d:	0f b6 14 24          	movzbl (%rsp),%edx
  42be61:	31 f6                	xor    %esi,%esi
  42be63:	84 d2                	test   %dl,%dl
  42be65:	74 3d                	je     42bea4 <OBJ_create_objects+0x114>
  42be67:	48 89 da             	mov    %rbx,%rdx
  42be6a:	48 89 e7             	mov    %rsp,%rdi
  42be6d:	e8 2e fe ff ff       	callq  42bca0 <OBJ_create>
  42be72:	85 c0                	test   %eax,%eax
  42be74:	74 2e                	je     42bea4 <OBJ_create_objects+0x114>
  42be76:	83 c5 01             	add    $0x1,%ebp
  42be79:	e9 3a ff ff ff       	jmpq   42bdb8 <OBJ_create_objects+0x28>
  42be7e:	66 90                	xchg   %ax,%ax
  42be80:	48 89 f1             	mov    %rsi,%rcx
  42be83:	eb 0a                	jmp    42be8f <OBJ_create_objects+0xff>
  42be85:	0f 1f 00             	nopl   (%rax)
  42be88:	f6 44 50 01 20       	testb  $0x20,0x1(%rax,%rdx,2)
  42be8d:	75 36                	jne    42bec5 <OBJ_create_objects+0x135>
  42be8f:	48 83 c1 01          	add    $0x1,%rcx
  42be93:	0f b6 11             	movzbl (%rcx),%edx
  42be96:	84 d2                	test   %dl,%dl
  42be98:	75 ee                	jne    42be88 <OBJ_create_objects+0xf8>
  42be9a:	0f b6 14 24          	movzbl (%rsp),%edx
  42be9e:	31 db                	xor    %ebx,%ebx
  42bea0:	84 d2                	test   %dl,%dl
  42bea2:	75 c3                	jne    42be67 <OBJ_create_objects+0xd7>
  42bea4:	48 8b bc 24 08 02 00 	mov    0x208(%rsp),%rdi
  42beab:	00 
  42beac:	64 48 33 3c 25 28 00 	xor    %fs:0x28,%rdi
  42beb3:	00 00 
  42beb5:	89 e8                	mov    %ebp,%eax
  42beb7:	75 56                	jne    42bf0f <OBJ_create_objects+0x17f>
  42beb9:	48 81 c4 10 02 00 00 	add    $0x210,%rsp
  42bec0:	5b                   	pop    %rbx
  42bec1:	5d                   	pop    %rbp
  42bec2:	41 5c                	pop    %r12
  42bec4:	c3                   	retq   
  42bec5:	c6 01 00             	movb   $0x0,(%rcx)
  42bec8:	48 8d 59 01          	lea    0x1(%rcx),%rbx
  42becc:	0f b6 49 01          	movzbl 0x1(%rcx),%ecx
  42bed0:	f6 44 48 01 20       	testb  $0x20,0x1(%rax,%rcx,2)
  42bed5:	48 89 ca             	mov    %rcx,%rdx
  42bed8:	74 17                	je     42bef1 <OBJ_create_objects+0x161>
  42beda:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  42bee0:	48 83 c3 01          	add    $0x1,%rbx
  42bee4:	0f b6 0b             	movzbl (%rbx),%ecx
  42bee7:	f6 44 48 01 20       	testb  $0x20,0x1(%rax,%rcx,2)
  42beec:	48 89 ca             	mov    %rcx,%rdx
  42beef:	75 ef                	jne    42bee0 <OBJ_create_objects+0x150>
  42bef1:	84 d2                	test   %dl,%dl
  42bef3:	0f b6 14 24          	movzbl (%rsp),%edx
  42bef7:	0f 85 66 ff ff ff    	jne    42be63 <OBJ_create_objects+0xd3>
  42befd:	31 db                	xor    %ebx,%ebx
  42beff:	e9 5f ff ff ff       	jmpq   42be63 <OBJ_create_objects+0xd3>
  42bf04:	41 89 d0             	mov    %edx,%r8d
  42bf07:	48 89 e1             	mov    %rsp,%rcx
  42bf0a:	e9 18 ff ff ff       	jmpq   42be27 <OBJ_create_objects+0x97>
  42bf0f:	e8 ac af fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  42bf14:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  42bf1b:	00 00 00 
  42bf1e:	66 90                	xchg   %ax,%ax

000000000042bf20 <OBJ_dup>:
  42bf20:	48 85 ff             	test   %rdi,%rdi
  42bf23:	0f 84 af 01 00 00    	je     42c0d8 <OBJ_dup+0x1b8>
  42bf29:	f6 47 20 01          	testb  $0x1,0x20(%rdi)
  42bf2d:	48 89 f8             	mov    %rdi,%rax
  42bf30:	75 06                	jne    42bf38 <OBJ_dup+0x18>
  42bf32:	c3                   	retq   
  42bf33:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42bf38:	41 56                	push   %r14
  42bf3a:	41 55                	push   %r13
  42bf3c:	41 54                	push   %r12
  42bf3e:	55                   	push   %rbp
  42bf3f:	53                   	push   %rbx
  42bf40:	48 89 fb             	mov    %rdi,%rbx
  42bf43:	e8 18 99 00 00       	callq  435860 <ASN1_OBJECT_new>
  42bf48:	48 85 c0             	test   %rax,%rax
  42bf4b:	48 89 c5             	mov    %rax,%rbp
  42bf4e:	0f 84 87 01 00 00    	je     42c0db <OBJ_dup+0x1bb>
  42bf54:	8b 7b 14             	mov    0x14(%rbx),%edi
  42bf57:	ba 53 00 00 00       	mov    $0x53,%edx
  42bf5c:	be f0 07 45 00       	mov    $0x4507f0,%esi
  42bf61:	e8 9a 94 ff ff       	callq  425400 <CRYPTO_malloc>
  42bf66:	48 85 c0             	test   %rax,%rax
  42bf69:	49 89 c5             	mov    %rax,%r13
  42bf6c:	0f 84 3e 01 00 00    	je     42c0b0 <OBJ_dup+0x190>
  42bf72:	48 8b 73 18          	mov    0x18(%rbx),%rsi
  42bf76:	48 85 f6             	test   %rsi,%rsi
  42bf79:	74 0c                	je     42bf87 <OBJ_dup+0x67>
  42bf7b:	48 63 53 14          	movslq 0x14(%rbx),%rdx
  42bf7f:	48 89 c7             	mov    %rax,%rdi
  42bf82:	e8 69 b0 fd ff       	callq  406ff0 <memcpy@plt>
  42bf87:	8b 43 14             	mov    0x14(%rbx),%eax
  42bf8a:	4c 89 6d 18          	mov    %r13,0x18(%rbp)
  42bf8e:	89 45 14             	mov    %eax,0x14(%rbp)
  42bf91:	8b 43 10             	mov    0x10(%rbx),%eax
  42bf94:	48 c7 45 08 00 00 00 	movq   $0x0,0x8(%rbp)
  42bf9b:	00 
  42bf9c:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
  42bfa0:	48 c7 45 00 00 00 00 	movq   $0x0,0x0(%rbp)
  42bfa7:	00 
  42bfa8:	89 45 10             	mov    %eax,0x10(%rbp)
  42bfab:	48 85 ff             	test   %rdi,%rdi
  42bfae:	0f 84 c4 00 00 00    	je     42c078 <OBJ_dup+0x158>
  42bfb4:	e8 f7 ad fd ff       	callq  406db0 <strlen@plt>
  42bfb9:	44 8d 60 01          	lea    0x1(%rax),%r12d
  42bfbd:	ba 60 00 00 00       	mov    $0x60,%edx
  42bfc2:	be f0 07 45 00       	mov    $0x4507f0,%esi
  42bfc7:	44 89 e7             	mov    %r12d,%edi
  42bfca:	e8 31 94 ff ff       	callq  425400 <CRYPTO_malloc>
  42bfcf:	48 85 c0             	test   %rax,%rax
  42bfd2:	49 89 c6             	mov    %rax,%r14
  42bfd5:	74 69                	je     42c040 <OBJ_dup+0x120>
  42bfd7:	48 8b 73 08          	mov    0x8(%rbx),%rsi
  42bfdb:	49 63 d4             	movslq %r12d,%rdx
  42bfde:	48 89 c7             	mov    %rax,%rdi
  42bfe1:	e8 0a b0 fd ff       	callq  406ff0 <memcpy@plt>
  42bfe6:	4c 89 75 08          	mov    %r14,0x8(%rbp)
  42bfea:	48 8b 3b             	mov    (%rbx),%rdi
  42bfed:	48 85 ff             	test   %rdi,%rdi
  42bff0:	74 32                	je     42c024 <OBJ_dup+0x104>
  42bff2:	e8 b9 ad fd ff       	callq  406db0 <strlen@plt>
  42bff7:	44 8d 60 01          	lea    0x1(%rax),%r12d
  42bffb:	ba 69 00 00 00       	mov    $0x69,%edx
  42c000:	be f0 07 45 00       	mov    $0x4507f0,%esi
  42c005:	44 89 e7             	mov    %r12d,%edi
  42c008:	e8 f3 93 ff ff       	callq  425400 <CRYPTO_malloc>
  42c00d:	48 85 c0             	test   %rax,%rax
  42c010:	74 6e                	je     42c080 <OBJ_dup+0x160>
  42c012:	48 8b 33             	mov    (%rbx),%rsi
  42c015:	49 63 d4             	movslq %r12d,%rdx
  42c018:	48 89 c7             	mov    %rax,%rdi
  42c01b:	e8 d0 af fd ff       	callq  406ff0 <memcpy@plt>
  42c020:	48 89 45 00          	mov    %rax,0x0(%rbp)
  42c024:	8b 43 20             	mov    0x20(%rbx),%eax
  42c027:	83 c8 0d             	or     $0xd,%eax
  42c02a:	89 45 20             	mov    %eax,0x20(%rbp)
  42c02d:	48 89 e8             	mov    %rbp,%rax
  42c030:	5b                   	pop    %rbx
  42c031:	5d                   	pop    %rbp
  42c032:	41 5c                	pop    %r12
  42c034:	41 5d                	pop    %r13
  42c036:	41 5e                	pop    %r14
  42c038:	c3                   	retq   
  42c039:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  42c040:	41 b8 72 00 00 00    	mov    $0x72,%r8d
  42c046:	b9 f0 07 45 00       	mov    $0x4507f0,%ecx
  42c04b:	ba 41 00 00 00       	mov    $0x41,%edx
  42c050:	be 65 00 00 00       	mov    $0x65,%esi
  42c055:	bf 08 00 00 00       	mov    $0x8,%edi
  42c05a:	e8 f1 c2 ff ff       	callq  428350 <ERR_put_error>
  42c05f:	4c 89 ef             	mov    %r13,%rdi
  42c062:	e8 f9 96 ff ff       	callq  425760 <CRYPTO_free>
  42c067:	48 89 ef             	mov    %rbp,%rdi
  42c06a:	e8 f1 96 ff ff       	callq  425760 <CRYPTO_free>
  42c06f:	31 c0                	xor    %eax,%eax
  42c071:	eb bd                	jmp    42c030 <OBJ_dup+0x110>
  42c073:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42c078:	45 31 f6             	xor    %r14d,%r14d
  42c07b:	e9 6a ff ff ff       	jmpq   42bfea <OBJ_dup+0xca>
  42c080:	41 b8 72 00 00 00    	mov    $0x72,%r8d
  42c086:	b9 f0 07 45 00       	mov    $0x4507f0,%ecx
  42c08b:	ba 41 00 00 00       	mov    $0x41,%edx
  42c090:	be 65 00 00 00       	mov    $0x65,%esi
  42c095:	bf 08 00 00 00       	mov    $0x8,%edi
  42c09a:	e8 b1 c2 ff ff       	callq  428350 <ERR_put_error>
  42c09f:	4d 85 f6             	test   %r14,%r14
  42c0a2:	74 bb                	je     42c05f <OBJ_dup+0x13f>
  42c0a4:	4c 89 f7             	mov    %r14,%rdi
  42c0a7:	e8 b4 96 ff ff       	callq  425760 <CRYPTO_free>
  42c0ac:	eb b1                	jmp    42c05f <OBJ_dup+0x13f>
  42c0ae:	66 90                	xchg   %ax,%ax
  42c0b0:	41 b8 72 00 00 00    	mov    $0x72,%r8d
  42c0b6:	b9 f0 07 45 00       	mov    $0x4507f0,%ecx
  42c0bb:	ba 41 00 00 00       	mov    $0x41,%edx
  42c0c0:	be 65 00 00 00       	mov    $0x65,%esi
  42c0c5:	bf 08 00 00 00       	mov    $0x8,%edi
  42c0ca:	e8 81 c2 ff ff       	callq  428350 <ERR_put_error>
  42c0cf:	eb 96                	jmp    42c067 <OBJ_dup+0x147>
  42c0d1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  42c0d8:	31 c0                	xor    %eax,%eax
  42c0da:	c3                   	retq   
  42c0db:	41 b8 50 00 00 00    	mov    $0x50,%r8d
  42c0e1:	b9 f0 07 45 00       	mov    $0x4507f0,%ecx
  42c0e6:	ba 0d 00 00 00       	mov    $0xd,%edx
  42c0eb:	be 65 00 00 00       	mov    $0x65,%esi
  42c0f0:	bf 08 00 00 00       	mov    $0x8,%edi
  42c0f5:	e8 56 c2 ff ff       	callq  428350 <ERR_put_error>
  42c0fa:	31 c0                	xor    %eax,%eax
  42c0fc:	e9 2f ff ff ff       	jmpq   42c030 <OBJ_dup+0x110>
  42c101:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  42c108:	0f 1f 84 00 00 00 00 
  42c10f:	00 

000000000042c110 <OBJ_cmp>:
  42c110:	48 63 57 14          	movslq 0x14(%rdi),%rdx
  42c114:	89 d0                	mov    %edx,%eax
  42c116:	2b 46 14             	sub    0x14(%rsi),%eax
  42c119:	75 15                	jne    42c130 <OBJ_cmp+0x20>
  42c11b:	48 8b 76 18          	mov    0x18(%rsi),%rsi
  42c11f:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
  42c123:	e9 d8 ad fd ff       	jmpq   406f00 <memcmp@plt>
  42c128:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  42c12f:	00 
  42c130:	f3 c3                	repz retq 
  42c132:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  42c139:	00 00 00 
  42c13c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000042c140 <bn_expand_internal>:
  42c140:	55                   	push   %rbp
  42c141:	53                   	push   %rbx
  42c142:	48 83 ec 08          	sub    $0x8,%rsp
  42c146:	81 fe ff ff 7f 00    	cmp    $0x7fffff,%esi
  42c14c:	0f 8f fe 00 00 00    	jg     42c250 <bn_expand_internal+0x110>
  42c152:	f6 47 14 02          	testb  $0x2,0x14(%rdi)
  42c156:	48 89 fd             	mov    %rdi,%rbp
  42c159:	0f 85 c9 00 00 00    	jne    42c228 <bn_expand_internal+0xe8>
  42c15f:	8d 3c f5 00 00 00 00 	lea    0x0(,%rsi,8),%edi
  42c166:	ba 3d 01 00 00       	mov    $0x13d,%edx
  42c16b:	be fa 07 45 00       	mov    $0x4507fa,%esi
  42c170:	e8 8b 92 ff ff       	callq  425400 <CRYPTO_malloc>
  42c175:	48 85 c0             	test   %rax,%rax
  42c178:	0f 84 f5 00 00 00    	je     42c273 <bn_expand_internal+0x133>
  42c17e:	48 8b 5d 00          	mov    0x0(%rbp),%rbx
  42c182:	48 85 db             	test   %rbx,%rbx
  42c185:	74 77                	je     42c1fe <bn_expand_internal+0xbe>
  42c187:	8b 6d 08             	mov    0x8(%rbp),%ebp
  42c18a:	41 89 eb             	mov    %ebp,%r11d
  42c18d:	41 c1 fb 02          	sar    $0x2,%r11d
  42c191:	45 85 db             	test   %r11d,%r11d
  42c194:	0f 8e b1 00 00 00    	jle    42c24b <bn_expand_internal+0x10b>
  42c19a:	44 89 de             	mov    %r11d,%esi
  42c19d:	48 89 d9             	mov    %rbx,%rcx
  42c1a0:	48 89 c2             	mov    %rax,%rdx
  42c1a3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42c1a8:	4c 8b 11             	mov    (%rcx),%r10
  42c1ab:	4c 8b 49 08          	mov    0x8(%rcx),%r9
  42c1af:	48 83 c2 20          	add    $0x20,%rdx
  42c1b3:	4c 8b 41 10          	mov    0x10(%rcx),%r8
  42c1b7:	48 8b 79 18          	mov    0x18(%rcx),%rdi
  42c1bb:	48 83 c1 20          	add    $0x20,%rcx
  42c1bf:	4c 89 52 e0          	mov    %r10,-0x20(%rdx)
  42c1c3:	4c 89 4a e8          	mov    %r9,-0x18(%rdx)
  42c1c7:	4c 89 42 f0          	mov    %r8,-0x10(%rdx)
  42c1cb:	48 89 7a f8          	mov    %rdi,-0x8(%rdx)
  42c1cf:	83 ee 01             	sub    $0x1,%esi
  42c1d2:	75 d4                	jne    42c1a8 <bn_expand_internal+0x68>
  42c1d4:	41 83 eb 01          	sub    $0x1,%r11d
  42c1d8:	4d 63 db             	movslq %r11d,%r11
  42c1db:	49 83 c3 01          	add    $0x1,%r11
  42c1df:	49 c1 e3 05          	shl    $0x5,%r11
  42c1e3:	4a 8d 0c 18          	lea    (%rax,%r11,1),%rcx
  42c1e7:	4c 01 db             	add    %r11,%rbx
  42c1ea:	89 ea                	mov    %ebp,%edx
  42c1ec:	83 e2 03             	and    $0x3,%edx
  42c1ef:	83 fa 02             	cmp    $0x2,%edx
  42c1f2:	74 1c                	je     42c210 <bn_expand_internal+0xd0>
  42c1f4:	83 fa 03             	cmp    $0x3,%edx
  42c1f7:	74 0f                	je     42c208 <bn_expand_internal+0xc8>
  42c1f9:	83 fa 01             	cmp    $0x1,%edx
  42c1fc:	74 1a                	je     42c218 <bn_expand_internal+0xd8>
  42c1fe:	48 83 c4 08          	add    $0x8,%rsp
  42c202:	5b                   	pop    %rbx
  42c203:	5d                   	pop    %rbp
  42c204:	c3                   	retq   
  42c205:	0f 1f 00             	nopl   (%rax)
  42c208:	48 8b 53 10          	mov    0x10(%rbx),%rdx
  42c20c:	48 89 51 10          	mov    %rdx,0x10(%rcx)
  42c210:	48 8b 53 08          	mov    0x8(%rbx),%rdx
  42c214:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  42c218:	48 8b 13             	mov    (%rbx),%rdx
  42c21b:	48 89 11             	mov    %rdx,(%rcx)
  42c21e:	48 83 c4 08          	add    $0x8,%rsp
  42c222:	5b                   	pop    %rbx
  42c223:	5d                   	pop    %rbp
  42c224:	c3                   	retq   
  42c225:	0f 1f 00             	nopl   (%rax)
  42c228:	41 b8 3a 01 00 00    	mov    $0x13a,%r8d
  42c22e:	b9 fa 07 45 00       	mov    $0x4507fa,%ecx
  42c233:	ba 69 00 00 00       	mov    $0x69,%edx
  42c238:	be 78 00 00 00       	mov    $0x78,%esi
  42c23d:	bf 03 00 00 00       	mov    $0x3,%edi
  42c242:	e8 09 c1 ff ff       	callq  428350 <ERR_put_error>
  42c247:	31 c0                	xor    %eax,%eax
  42c249:	eb b3                	jmp    42c1fe <bn_expand_internal+0xbe>
  42c24b:	48 89 c1             	mov    %rax,%rcx
  42c24e:	eb 9a                	jmp    42c1ea <bn_expand_internal+0xaa>
  42c250:	41 b8 35 01 00 00    	mov    $0x135,%r8d
  42c256:	b9 fa 07 45 00       	mov    $0x4507fa,%ecx
  42c25b:	ba 72 00 00 00       	mov    $0x72,%edx
  42c260:	be 78 00 00 00       	mov    $0x78,%esi
  42c265:	bf 03 00 00 00       	mov    $0x3,%edi
  42c26a:	e8 e1 c0 ff ff       	callq  428350 <ERR_put_error>
  42c26f:	31 c0                	xor    %eax,%eax
  42c271:	eb 8b                	jmp    42c1fe <bn_expand_internal+0xbe>
  42c273:	41 b8 40 01 00 00    	mov    $0x140,%r8d
  42c279:	b9 fa 07 45 00       	mov    $0x4507fa,%ecx
  42c27e:	ba 41 00 00 00       	mov    $0x41,%edx
  42c283:	be 78 00 00 00       	mov    $0x78,%esi
  42c288:	bf 03 00 00 00       	mov    $0x3,%edi
  42c28d:	e8 be c0 ff ff       	callq  428350 <ERR_put_error>
  42c292:	31 c0                	xor    %eax,%eax
  42c294:	e9 65 ff ff ff       	jmpq   42c1fe <bn_expand_internal+0xbe>
  42c299:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000042c2a0 <BN_set_params>:
  42c2a0:	85 ff                	test   %edi,%edi
  42c2a2:	89 c8                	mov    %ecx,%eax
  42c2a4:	78 1e                	js     42c2c4 <BN_set_params+0x24>
  42c2a6:	83 ff 1f             	cmp    $0x1f,%edi
  42c2a9:	b9 1f 00 00 00       	mov    $0x1f,%ecx
  42c2ae:	0f 4e cf             	cmovle %edi,%ecx
  42c2b1:	bf 01 00 00 00       	mov    $0x1,%edi
  42c2b6:	d3 e7                	shl    %cl,%edi
  42c2b8:	89 0d be e6 22 00    	mov    %ecx,0x22e6be(%rip)        # 65a97c <bn_limit_bits>
  42c2be:	89 3d 9c c5 22 00    	mov    %edi,0x22c59c(%rip)        # 658860 <bn_limit_num>
  42c2c4:	85 f6                	test   %esi,%esi
  42c2c6:	78 1e                	js     42c2e6 <BN_set_params+0x46>
  42c2c8:	83 fe 1f             	cmp    $0x1f,%esi
  42c2cb:	b9 1f 00 00 00       	mov    $0x1f,%ecx
  42c2d0:	0f 4e ce             	cmovle %esi,%ecx
  42c2d3:	be 01 00 00 00       	mov    $0x1,%esi
  42c2d8:	d3 e6                	shl    %cl,%esi
  42c2da:	89 0d 94 e6 22 00    	mov    %ecx,0x22e694(%rip)        # 65a974 <bn_limit_bits_high>
  42c2e0:	89 35 72 c5 22 00    	mov    %esi,0x22c572(%rip)        # 658858 <bn_limit_num_high>
  42c2e6:	85 d2                	test   %edx,%edx
  42c2e8:	78 1e                	js     42c308 <BN_set_params+0x68>
  42c2ea:	83 fa 1f             	cmp    $0x1f,%edx
  42c2ed:	b9 1f 00 00 00       	mov    $0x1f,%ecx
  42c2f2:	0f 4e ca             	cmovle %edx,%ecx
  42c2f5:	ba 01 00 00 00       	mov    $0x1,%edx
  42c2fa:	d3 e2                	shl    %cl,%edx
  42c2fc:	89 0d 76 e6 22 00    	mov    %ecx,0x22e676(%rip)        # 65a978 <bn_limit_bits_low>
  42c302:	89 15 54 c5 22 00    	mov    %edx,0x22c554(%rip)        # 65885c <bn_limit_num_low>
  42c308:	85 c0                	test   %eax,%eax
  42c30a:	78 1e                	js     42c32a <BN_set_params+0x8a>
  42c30c:	83 f8 1f             	cmp    $0x1f,%eax
  42c30f:	b9 1f 00 00 00       	mov    $0x1f,%ecx
  42c314:	0f 4e c8             	cmovle %eax,%ecx
  42c317:	b8 01 00 00 00       	mov    $0x1,%eax
  42c31c:	d3 e0                	shl    %cl,%eax
  42c31e:	89 0d 4c e6 22 00    	mov    %ecx,0x22e64c(%rip)        # 65a970 <bn_limit_bits_mont>
  42c324:	89 05 2a c5 22 00    	mov    %eax,0x22c52a(%rip)        # 658854 <bn_limit_num_mont>
  42c32a:	f3 c3                	repz retq 
  42c32c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000042c330 <BN_get_params>:
  42c330:	85 ff                	test   %edi,%edi
  42c332:	74 1c                	je     42c350 <BN_get_params+0x20>
  42c334:	83 ff 01             	cmp    $0x1,%edi
  42c337:	74 27                	je     42c360 <BN_get_params+0x30>
  42c339:	83 ff 02             	cmp    $0x2,%edi
  42c33c:	74 32                	je     42c370 <BN_get_params+0x40>
  42c33e:	83 ff 03             	cmp    $0x3,%edi
  42c341:	b8 00 00 00 00       	mov    $0x0,%eax
  42c346:	0f 44 05 23 e6 22 00 	cmove  0x22e623(%rip),%eax        # 65a970 <bn_limit_bits_mont>
  42c34d:	c3                   	retq   
  42c34e:	66 90                	xchg   %ax,%ax
  42c350:	8b 05 26 e6 22 00    	mov    0x22e626(%rip),%eax        # 65a97c <bn_limit_bits>
  42c356:	c3                   	retq   
  42c357:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  42c35e:	00 00 
  42c360:	8b 05 0e e6 22 00    	mov    0x22e60e(%rip),%eax        # 65a974 <bn_limit_bits_high>
  42c366:	c3                   	retq   
  42c367:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  42c36e:	00 00 
  42c370:	8b 05 02 e6 22 00    	mov    0x22e602(%rip),%eax        # 65a978 <bn_limit_bits_low>
  42c376:	c3                   	retq   
  42c377:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  42c37e:	00 00 

000000000042c380 <BN_value_one>:
  42c380:	b8 50 09 45 00       	mov    $0x450950,%eax
  42c385:	c3                   	retq   
  42c386:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  42c38d:	00 00 00 

000000000042c390 <BN_num_bits_word>:
  42c390:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
  42c397:	ff ff ff 
  42c39a:	48 85 c7             	test   %rax,%rdi
  42c39d:	74 31                	je     42c3d0 <BN_num_bits_word+0x40>
  42c39f:	48 b8 00 00 00 00 00 	movabs $0xffff000000000000,%rax
  42c3a6:	00 ff ff 
  42c3a9:	48 85 c7             	test   %rax,%rdi
  42c3ac:	74 62                	je     42c410 <BN_num_bits_word+0x80>
  42c3ae:	48 b8 00 00 00 00 00 	movabs $0xff00000000000000,%rax
  42c3b5:	00 00 ff 
  42c3b8:	48 85 c7             	test   %rax,%rdi
  42c3bb:	74 73                	je     42c430 <BN_num_bits_word+0xa0>
  42c3bd:	48 c1 ef 38          	shr    $0x38,%rdi
  42c3c1:	0f b6 87 40 08 45 00 	movzbl 0x450840(%rdi),%eax
  42c3c8:	83 c0 38             	add    $0x38,%eax
  42c3cb:	c3                   	retq   
  42c3cc:	0f 1f 40 00          	nopl   0x0(%rax)
  42c3d0:	f7 c7 00 00 ff ff    	test   $0xffff0000,%edi
  42c3d6:	74 20                	je     42c3f8 <BN_num_bits_word+0x68>
  42c3d8:	f7 c7 00 00 00 ff    	test   $0xff000000,%edi
  42c3de:	74 70                	je     42c450 <BN_num_bits_word+0xc0>
  42c3e0:	48 c1 ef 18          	shr    $0x18,%rdi
  42c3e4:	48 63 ff             	movslq %edi,%rdi
  42c3e7:	0f b6 87 40 08 45 00 	movzbl 0x450840(%rdi),%eax
  42c3ee:	83 c0 18             	add    $0x18,%eax
  42c3f1:	c3                   	retq   
  42c3f2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  42c3f8:	f7 c7 00 ff 00 00    	test   $0xff00,%edi
  42c3fe:	75 68                	jne    42c468 <BN_num_bits_word+0xd8>
  42c400:	48 63 ff             	movslq %edi,%rdi
  42c403:	0f b6 87 40 08 45 00 	movzbl 0x450840(%rdi),%eax
  42c40a:	c3                   	retq   
  42c40b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42c410:	48 b8 00 00 00 00 00 	movabs $0xff0000000000,%rax
  42c417:	ff 00 00 
  42c41a:	48 85 c7             	test   %rax,%rdi
  42c41d:	74 21                	je     42c440 <BN_num_bits_word+0xb0>
  42c41f:	48 c1 ef 28          	shr    $0x28,%rdi
  42c423:	0f b6 87 40 08 45 00 	movzbl 0x450840(%rdi),%eax
  42c42a:	83 c0 28             	add    $0x28,%eax
  42c42d:	c3                   	retq   
  42c42e:	66 90                	xchg   %ax,%ax
  42c430:	48 c1 ef 30          	shr    $0x30,%rdi
  42c434:	0f b6 87 40 08 45 00 	movzbl 0x450840(%rdi),%eax
  42c43b:	83 c0 30             	add    $0x30,%eax
  42c43e:	c3                   	retq   
  42c43f:	90                   	nop
  42c440:	48 c1 ff 20          	sar    $0x20,%rdi
  42c444:	0f b6 87 40 08 45 00 	movzbl 0x450840(%rdi),%eax
  42c44b:	83 c0 20             	add    $0x20,%eax
  42c44e:	c3                   	retq   
  42c44f:	90                   	nop
  42c450:	48 c1 ef 10          	shr    $0x10,%rdi
  42c454:	48 63 ff             	movslq %edi,%rdi
  42c457:	0f b6 87 40 08 45 00 	movzbl 0x450840(%rdi),%eax
  42c45e:	83 c0 10             	add    $0x10,%eax
  42c461:	c3                   	retq   
  42c462:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  42c468:	48 c1 ef 08          	shr    $0x8,%rdi
  42c46c:	48 63 ff             	movslq %edi,%rdi
  42c46f:	0f b6 87 40 08 45 00 	movzbl 0x450840(%rdi),%eax
  42c476:	83 c0 08             	add    $0x8,%eax
  42c479:	c3                   	retq   
  42c47a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000042c480 <BN_num_bits>:
  42c480:	8b 47 08             	mov    0x8(%rdi),%eax
  42c483:	85 c0                	test   %eax,%eax
  42c485:	74 59                	je     42c4e0 <BN_num_bits+0x60>
  42c487:	48 8b 17             	mov    (%rdi),%rdx
  42c48a:	83 e8 01             	sub    $0x1,%eax
  42c48d:	89 c1                	mov    %eax,%ecx
  42c48f:	48 98                	cltq   
  42c491:	c1 e1 06             	shl    $0x6,%ecx
  42c494:	48 8b 14 c2          	mov    (%rdx,%rax,8),%rdx
  42c498:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
  42c49f:	ff ff ff 
  42c4a2:	48 85 c2             	test   %rax,%rdx
  42c4a5:	74 41                	je     42c4e8 <BN_num_bits+0x68>
  42c4a7:	48 b8 00 00 00 00 00 	movabs $0xffff000000000000,%rax
  42c4ae:	00 ff ff 
  42c4b1:	48 85 c2             	test   %rax,%rdx
  42c4b4:	74 62                	je     42c518 <BN_num_bits+0x98>
  42c4b6:	48 b8 00 00 00 00 00 	movabs $0xff00000000000000,%rax
  42c4bd:	00 00 ff 
  42c4c0:	48 85 c2             	test   %rax,%rdx
  42c4c3:	0f 84 8f 00 00 00    	je     42c558 <BN_num_bits+0xd8>
  42c4c9:	48 c1 ea 38          	shr    $0x38,%rdx
  42c4cd:	0f b6 92 40 08 45 00 	movzbl 0x450840(%rdx),%edx
  42c4d4:	8d 42 38             	lea    0x38(%rdx),%eax
  42c4d7:	01 c8                	add    %ecx,%eax
  42c4d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  42c4e0:	f3 c3                	repz retq 
  42c4e2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  42c4e8:	f7 c2 00 00 ff ff    	test   $0xffff0000,%edx
  42c4ee:	74 50                	je     42c540 <BN_num_bits+0xc0>
  42c4f0:	f7 c2 00 00 00 ff    	test   $0xff000000,%edx
  42c4f6:	0f 84 8c 00 00 00    	je     42c588 <BN_num_bits+0x108>
  42c4fc:	48 c1 ea 18          	shr    $0x18,%rdx
  42c500:	48 63 d2             	movslq %edx,%rdx
  42c503:	0f b6 92 40 08 45 00 	movzbl 0x450840(%rdx),%edx
  42c50a:	8d 42 18             	lea    0x18(%rdx),%eax
  42c50d:	01 c8                	add    %ecx,%eax
  42c50f:	eb cf                	jmp    42c4e0 <BN_num_bits+0x60>
  42c511:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  42c518:	48 b8 00 00 00 00 00 	movabs $0xff0000000000,%rax
  42c51f:	ff 00 00 
  42c522:	48 85 c2             	test   %rax,%rdx
  42c525:	74 49                	je     42c570 <BN_num_bits+0xf0>
  42c527:	48 c1 ea 28          	shr    $0x28,%rdx
  42c52b:	0f b6 92 40 08 45 00 	movzbl 0x450840(%rdx),%edx
  42c532:	8d 42 28             	lea    0x28(%rdx),%eax
  42c535:	01 c8                	add    %ecx,%eax
  42c537:	eb a7                	jmp    42c4e0 <BN_num_bits+0x60>
  42c539:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  42c540:	f6 c6 ff             	test   $0xff,%dh
  42c543:	75 5b                	jne    42c5a0 <BN_num_bits+0x120>
  42c545:	48 63 d2             	movslq %edx,%rdx
  42c548:	0f b6 82 40 08 45 00 	movzbl 0x450840(%rdx),%eax
  42c54f:	01 c8                	add    %ecx,%eax
  42c551:	eb 8d                	jmp    42c4e0 <BN_num_bits+0x60>
  42c553:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42c558:	48 c1 ea 30          	shr    $0x30,%rdx
  42c55c:	0f b6 92 40 08 45 00 	movzbl 0x450840(%rdx),%edx
  42c563:	8d 42 30             	lea    0x30(%rdx),%eax
  42c566:	01 c8                	add    %ecx,%eax
  42c568:	e9 73 ff ff ff       	jmpq   42c4e0 <BN_num_bits+0x60>
  42c56d:	0f 1f 00             	nopl   (%rax)
  42c570:	48 c1 fa 20          	sar    $0x20,%rdx
  42c574:	0f b6 92 40 08 45 00 	movzbl 0x450840(%rdx),%edx
  42c57b:	8d 42 20             	lea    0x20(%rdx),%eax
  42c57e:	01 c8                	add    %ecx,%eax
  42c580:	e9 5b ff ff ff       	jmpq   42c4e0 <BN_num_bits+0x60>
  42c585:	0f 1f 00             	nopl   (%rax)
  42c588:	48 c1 ea 10          	shr    $0x10,%rdx
  42c58c:	48 63 d2             	movslq %edx,%rdx
  42c58f:	0f b6 92 40 08 45 00 	movzbl 0x450840(%rdx),%edx
  42c596:	8d 42 10             	lea    0x10(%rdx),%eax
  42c599:	01 c8                	add    %ecx,%eax
  42c59b:	e9 40 ff ff ff       	jmpq   42c4e0 <BN_num_bits+0x60>
  42c5a0:	48 c1 ea 08          	shr    $0x8,%rdx
  42c5a4:	48 63 d2             	movslq %edx,%rdx
  42c5a7:	0f b6 92 40 08 45 00 	movzbl 0x450840(%rdx),%edx
  42c5ae:	8d 42 08             	lea    0x8(%rdx),%eax
  42c5b1:	01 c8                	add    %ecx,%eax
  42c5b3:	e9 28 ff ff ff       	jmpq   42c4e0 <BN_num_bits+0x60>
  42c5b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  42c5bf:	00 

000000000042c5c0 <BN_clear_free>:
  42c5c0:	48 85 ff             	test   %rdi,%rdi
  42c5c3:	74 3f                	je     42c604 <BN_clear_free+0x44>
  42c5c5:	55                   	push   %rbp
  42c5c6:	53                   	push   %rbx
  42c5c7:	48 89 fb             	mov    %rdi,%rbx
  42c5ca:	48 83 ec 08          	sub    $0x8,%rsp
  42c5ce:	48 8b 3f             	mov    (%rdi),%rdi
  42c5d1:	48 85 ff             	test   %rdi,%rdi
  42c5d4:	74 42                	je     42c618 <BN_clear_free+0x58>
  42c5d6:	48 63 73 0c          	movslq 0xc(%rbx),%rsi
  42c5da:	48 c1 e6 03          	shl    $0x3,%rsi
  42c5de:	e8 8d 94 ff ff       	callq  425a70 <OPENSSL_cleanse>
  42c5e3:	8b 6b 14             	mov    0x14(%rbx),%ebp
  42c5e6:	40 f6 c5 02          	test   $0x2,%bpl
  42c5ea:	74 24                	je     42c610 <BN_clear_free+0x50>
  42c5ec:	be 18 00 00 00       	mov    $0x18,%esi
  42c5f1:	48 89 df             	mov    %rbx,%rdi
  42c5f4:	e8 77 94 ff ff       	callq  425a70 <OPENSSL_cleanse>
  42c5f9:	83 e5 01             	and    $0x1,%ebp
  42c5fc:	75 22                	jne    42c620 <BN_clear_free+0x60>
  42c5fe:	48 83 c4 08          	add    $0x8,%rsp
  42c602:	5b                   	pop    %rbx
  42c603:	5d                   	pop    %rbp
  42c604:	f3 c3                	repz retq 
  42c606:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  42c60d:	00 00 00 
  42c610:	48 8b 3b             	mov    (%rbx),%rdi
  42c613:	e8 48 91 ff ff       	callq  425760 <CRYPTO_free>
  42c618:	8b 6b 14             	mov    0x14(%rbx),%ebp
  42c61b:	eb cf                	jmp    42c5ec <BN_clear_free+0x2c>
  42c61d:	0f 1f 00             	nopl   (%rax)
  42c620:	48 83 c4 08          	add    $0x8,%rsp
  42c624:	48 89 df             	mov    %rbx,%rdi
  42c627:	5b                   	pop    %rbx
  42c628:	5d                   	pop    %rbp
  42c629:	e9 32 91 ff ff       	jmpq   425760 <CRYPTO_free>
  42c62e:	66 90                	xchg   %ax,%ax

000000000042c630 <BN_free>:
  42c630:	48 85 ff             	test   %rdi,%rdi
  42c633:	74 25                	je     42c65a <BN_free+0x2a>
  42c635:	53                   	push   %rbx
  42c636:	48 89 fb             	mov    %rdi,%rbx
  42c639:	48 8b 3f             	mov    (%rdi),%rdi
  42c63c:	8b 43 14             	mov    0x14(%rbx),%eax
  42c63f:	48 85 ff             	test   %rdi,%rdi
  42c642:	74 04                	je     42c648 <BN_free+0x18>
  42c644:	a8 02                	test   $0x2,%al
  42c646:	74 18                	je     42c660 <BN_free+0x30>
  42c648:	a8 01                	test   $0x1,%al
  42c64a:	75 20                	jne    42c66c <BN_free+0x3c>
  42c64c:	80 cc 80             	or     $0x80,%ah
  42c64f:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
  42c656:	89 43 14             	mov    %eax,0x14(%rbx)
  42c659:	5b                   	pop    %rbx
  42c65a:	f3 c3                	repz retq 
  42c65c:	0f 1f 40 00          	nopl   0x0(%rax)
  42c660:	e8 fb 90 ff ff       	callq  425760 <CRYPTO_free>
  42c665:	8b 43 14             	mov    0x14(%rbx),%eax
  42c668:	a8 01                	test   $0x1,%al
  42c66a:	74 e0                	je     42c64c <BN_free+0x1c>
  42c66c:	48 89 df             	mov    %rbx,%rdi
  42c66f:	5b                   	pop    %rbx
  42c670:	e9 eb 90 ff ff       	jmpq   425760 <CRYPTO_free>
  42c675:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  42c67c:	00 00 00 00 

000000000042c680 <BN_init>:
  42c680:	48 c7 07 00 00 00 00 	movq   $0x0,(%rdi)
  42c687:	48 c7 47 08 00 00 00 	movq   $0x0,0x8(%rdi)
  42c68e:	00 
  42c68f:	48 c7 47 10 00 00 00 	movq   $0x0,0x10(%rdi)
  42c696:	00 
  42c697:	c3                   	retq   
  42c698:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  42c69f:	00 

000000000042c6a0 <BN_new>:
  42c6a0:	48 83 ec 08          	sub    $0x8,%rsp
  42c6a4:	ba 1b 01 00 00       	mov    $0x11b,%edx
  42c6a9:	be fa 07 45 00       	mov    $0x4507fa,%esi
  42c6ae:	bf 18 00 00 00       	mov    $0x18,%edi
  42c6b3:	e8 48 8d ff ff       	callq  425400 <CRYPTO_malloc>
  42c6b8:	48 85 c0             	test   %rax,%rax
  42c6bb:	74 18                	je     42c6d5 <BN_new+0x35>
  42c6bd:	66 0f 6f 05 eb 42 02 	movdqa 0x242eb(%rip),%xmm0        # 4509b0 <BN_version+0x30>
  42c6c4:	00 
  42c6c5:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  42c6cc:	0f 11 40 08          	movups %xmm0,0x8(%rax)
  42c6d0:	48 83 c4 08          	add    $0x8,%rsp
  42c6d4:	c3                   	retq   
  42c6d5:	41 b8 1d 01 00 00    	mov    $0x11d,%r8d
  42c6db:	b9 fa 07 45 00       	mov    $0x4507fa,%ecx
  42c6e0:	ba 41 00 00 00       	mov    $0x41,%edx
  42c6e5:	be 71 00 00 00       	mov    $0x71,%esi
  42c6ea:	bf 03 00 00 00       	mov    $0x3,%edi
  42c6ef:	e8 5c bc ff ff       	callq  428350 <ERR_put_error>
  42c6f4:	31 c0                	xor    %eax,%eax
  42c6f6:	eb d8                	jmp    42c6d0 <BN_new+0x30>
  42c6f8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  42c6ff:	00 

000000000042c700 <bn_expand2>:
  42c700:	39 77 0c             	cmp    %esi,0xc(%rdi)
  42c703:	48 89 f8             	mov    %rdi,%rax
  42c706:	7c 08                	jl     42c710 <bn_expand2+0x10>
  42c708:	c3                   	retq   
  42c709:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  42c710:	41 54                	push   %r12
  42c712:	55                   	push   %rbp
  42c713:	89 f5                	mov    %esi,%ebp
  42c715:	53                   	push   %rbx
  42c716:	48 89 fb             	mov    %rdi,%rbx
  42c719:	e8 22 fa ff ff       	callq  42c140 <bn_expand_internal>
  42c71e:	48 85 c0             	test   %rax,%rax
  42c721:	49 89 c4             	mov    %rax,%r12
  42c724:	74 1b                	je     42c741 <bn_expand2+0x41>
  42c726:	48 8b 3b             	mov    (%rbx),%rdi
  42c729:	48 85 ff             	test   %rdi,%rdi
  42c72c:	74 05                	je     42c733 <bn_expand2+0x33>
  42c72e:	e8 2d 90 ff ff       	callq  425760 <CRYPTO_free>
  42c733:	4c 89 23             	mov    %r12,(%rbx)
  42c736:	89 6b 0c             	mov    %ebp,0xc(%rbx)
  42c739:	48 89 d8             	mov    %rbx,%rax
  42c73c:	5b                   	pop    %rbx
  42c73d:	5d                   	pop    %rbp
  42c73e:	41 5c                	pop    %r12
  42c740:	c3                   	retq   
  42c741:	31 c0                	xor    %eax,%eax
  42c743:	eb f7                	jmp    42c73c <bn_expand2+0x3c>
  42c745:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  42c74c:	00 00 00 00 

000000000042c750 <BN_dup>:
  42c750:	48 85 ff             	test   %rdi,%rdi
  42c753:	0f 84 3a 01 00 00    	je     42c893 <BN_dup+0x143>
  42c759:	41 56                	push   %r14
  42c75b:	41 55                	push   %r13
  42c75d:	ba 1b 01 00 00       	mov    $0x11b,%edx
  42c762:	41 54                	push   %r12
  42c764:	55                   	push   %rbp
  42c765:	be fa 07 45 00       	mov    $0x4507fa,%esi
  42c76a:	53                   	push   %rbx
  42c76b:	48 89 fd             	mov    %rdi,%rbp
  42c76e:	bf 18 00 00 00       	mov    $0x18,%edi
  42c773:	e8 88 8c ff ff       	callq  425400 <CRYPTO_malloc>
  42c778:	48 85 c0             	test   %rax,%rax
  42c77b:	48 89 c3             	mov    %rax,%rbx
  42c77e:	0f 84 12 01 00 00    	je     42c896 <BN_dup+0x146>
  42c784:	66 0f 6f 05 24 42 02 	movdqa 0x24224(%rip),%xmm0        # 4509b0 <BN_version+0x30>
  42c78b:	00 
  42c78c:	48 39 c5             	cmp    %rax,%rbp
  42c78f:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  42c796:	0f 11 40 08          	movups %xmm0,0x8(%rax)
  42c79a:	0f 84 8f 00 00 00    	je     42c82f <BN_dup+0xdf>
  42c7a0:	31 ff                	xor    %edi,%edi
  42c7a2:	44 8b 65 08          	mov    0x8(%rbp),%r12d
  42c7a6:	45 85 e4             	test   %r12d,%r12d
  42c7a9:	45 89 e5             	mov    %r12d,%r13d
  42c7ac:	0f 8f ae 00 00 00    	jg     42c860 <BN_dup+0x110>
  42c7b2:	44 89 e8             	mov    %r13d,%eax
  42c7b5:	4c 8b 65 00          	mov    0x0(%rbp),%r12
  42c7b9:	c1 f8 02             	sar    $0x2,%eax
  42c7bc:	85 c0                	test   %eax,%eax
  42c7be:	7e 50                	jle    42c810 <BN_dup+0xc0>
  42c7c0:	89 c6                	mov    %eax,%esi
  42c7c2:	48 89 f9             	mov    %rdi,%rcx
  42c7c5:	4c 89 e2             	mov    %r12,%rdx
  42c7c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  42c7cf:	00 
  42c7d0:	4c 8b 1a             	mov    (%rdx),%r11
  42c7d3:	4c 8b 52 08          	mov    0x8(%rdx),%r10
  42c7d7:	48 83 c1 20          	add    $0x20,%rcx
  42c7db:	4c 8b 4a 10          	mov    0x10(%rdx),%r9
  42c7df:	4c 8b 42 18          	mov    0x18(%rdx),%r8
  42c7e3:	48 83 c2 20          	add    $0x20,%rdx
  42c7e7:	4c 89 59 e0          	mov    %r11,-0x20(%rcx)
  42c7eb:	4c 89 51 e8          	mov    %r10,-0x18(%rcx)
  42c7ef:	4c 89 49 f0          	mov    %r9,-0x10(%rcx)
  42c7f3:	4c 89 41 f8          	mov    %r8,-0x8(%rcx)
  42c7f7:	83 ee 01             	sub    $0x1,%esi
  42c7fa:	75 d4                	jne    42c7d0 <BN_dup+0x80>
  42c7fc:	8d 50 ff             	lea    -0x1(%rax),%edx
  42c7ff:	48 63 d2             	movslq %edx,%rdx
  42c802:	48 83 c2 01          	add    $0x1,%rdx
  42c806:	48 c1 e2 05          	shl    $0x5,%rdx
  42c80a:	48 01 d7             	add    %rdx,%rdi
  42c80d:	49 01 d4             	add    %rdx,%r12
  42c810:	44 89 e8             	mov    %r13d,%eax
  42c813:	83 e0 03             	and    $0x3,%eax
  42c816:	83 f8 02             	cmp    $0x2,%eax
  42c819:	74 2e                	je     42c849 <BN_dup+0xf9>
  42c81b:	83 f8 03             	cmp    $0x3,%eax
  42c81e:	74 20                	je     42c840 <BN_dup+0xf0>
  42c820:	83 f8 01             	cmp    $0x1,%eax
  42c823:	74 2d                	je     42c852 <BN_dup+0x102>
  42c825:	8b 45 10             	mov    0x10(%rbp),%eax
  42c828:	44 89 6b 08          	mov    %r13d,0x8(%rbx)
  42c82c:	89 43 10             	mov    %eax,0x10(%rbx)
  42c82f:	48 89 d8             	mov    %rbx,%rax
  42c832:	5b                   	pop    %rbx
  42c833:	5d                   	pop    %rbp
  42c834:	41 5c                	pop    %r12
  42c836:	41 5d                	pop    %r13
  42c838:	41 5e                	pop    %r14
  42c83a:	c3                   	retq   
  42c83b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42c840:	49 8b 44 24 10       	mov    0x10(%r12),%rax
  42c845:	48 89 47 10          	mov    %rax,0x10(%rdi)
  42c849:	49 8b 44 24 08       	mov    0x8(%r12),%rax
  42c84e:	48 89 47 08          	mov    %rax,0x8(%rdi)
  42c852:	49 8b 04 24          	mov    (%r12),%rax
  42c856:	48 89 07             	mov    %rax,(%rdi)
  42c859:	eb ca                	jmp    42c825 <BN_dup+0xd5>
  42c85b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42c860:	48 89 c7             	mov    %rax,%rdi
  42c863:	44 89 e6             	mov    %r12d,%esi
  42c866:	e8 d5 f8 ff ff       	callq  42c140 <bn_expand_internal>
  42c86b:	48 85 c0             	test   %rax,%rax
  42c86e:	49 89 c6             	mov    %rax,%r14
  42c871:	48 8b 3b             	mov    (%rbx),%rdi
  42c874:	74 46                	je     42c8bc <BN_dup+0x16c>
  42c876:	48 85 ff             	test   %rdi,%rdi
  42c879:	74 05                	je     42c880 <BN_dup+0x130>
  42c87b:	e8 e0 8e ff ff       	callq  425760 <CRYPTO_free>
  42c880:	4c 89 33             	mov    %r14,(%rbx)
  42c883:	44 89 63 0c          	mov    %r12d,0xc(%rbx)
  42c887:	4c 89 f7             	mov    %r14,%rdi
  42c88a:	44 8b 6d 08          	mov    0x8(%rbp),%r13d
  42c88e:	e9 1f ff ff ff       	jmpq   42c7b2 <BN_dup+0x62>
  42c893:	31 c0                	xor    %eax,%eax
  42c895:	c3                   	retq   
  42c896:	41 b8 1d 01 00 00    	mov    $0x11d,%r8d
  42c89c:	b9 fa 07 45 00       	mov    $0x4507fa,%ecx
  42c8a1:	ba 41 00 00 00       	mov    $0x41,%edx
  42c8a6:	be 71 00 00 00       	mov    $0x71,%esi
  42c8ab:	bf 03 00 00 00       	mov    $0x3,%edi
  42c8b0:	e8 9b ba ff ff       	callq  428350 <ERR_put_error>
  42c8b5:	31 c0                	xor    %eax,%eax
  42c8b7:	e9 76 ff ff ff       	jmpq   42c832 <BN_dup+0xe2>
  42c8bc:	48 85 ff             	test   %rdi,%rdi
  42c8bf:	74 24                	je     42c8e5 <BN_dup+0x195>
  42c8c1:	8b 43 14             	mov    0x14(%rbx),%eax
  42c8c4:	a8 02                	test   $0x2,%al
  42c8c6:	74 18                	je     42c8e0 <BN_dup+0x190>
  42c8c8:	a8 01                	test   $0x1,%al
  42c8ca:	75 1e                	jne    42c8ea <BN_dup+0x19a>
  42c8cc:	80 cc 80             	or     $0x80,%ah
  42c8cf:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
  42c8d6:	89 43 14             	mov    %eax,0x14(%rbx)
  42c8d9:	31 c0                	xor    %eax,%eax
  42c8db:	e9 52 ff ff ff       	jmpq   42c832 <BN_dup+0xe2>
  42c8e0:	e8 7b 8e ff ff       	callq  425760 <CRYPTO_free>
  42c8e5:	8b 43 14             	mov    0x14(%rbx),%eax
  42c8e8:	eb de                	jmp    42c8c8 <BN_dup+0x178>
  42c8ea:	48 89 df             	mov    %rbx,%rdi
  42c8ed:	e8 6e 8e ff ff       	callq  425760 <CRYPTO_free>
  42c8f2:	31 c0                	xor    %eax,%eax
  42c8f4:	e9 39 ff ff ff       	jmpq   42c832 <BN_dup+0xe2>
  42c8f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000042c900 <BN_copy>:
  42c900:	48 39 f7             	cmp    %rsi,%rdi
  42c903:	0f 84 cf 00 00 00    	je     42c9d8 <BN_copy+0xd8>
  42c909:	41 55                	push   %r13
  42c90b:	41 54                	push   %r12
  42c90d:	55                   	push   %rbp
  42c90e:	53                   	push   %rbx
  42c90f:	48 89 f5             	mov    %rsi,%rbp
  42c912:	48 89 fb             	mov    %rdi,%rbx
  42c915:	48 83 ec 08          	sub    $0x8,%rsp
  42c919:	44 8b 66 08          	mov    0x8(%rsi),%r12d
  42c91d:	44 3b 67 0c          	cmp    0xc(%rdi),%r12d
  42c921:	44 89 e6             	mov    %r12d,%esi
  42c924:	0f 8f b6 00 00 00    	jg     42c9e0 <BN_copy+0xe0>
  42c92a:	48 8b 07             	mov    (%rdi),%rax
  42c92d:	89 f7                	mov    %esi,%edi
  42c92f:	4c 8b 65 00          	mov    0x0(%rbp),%r12
  42c933:	c1 ff 02             	sar    $0x2,%edi
  42c936:	85 ff                	test   %edi,%edi
  42c938:	7e 4f                	jle    42c989 <BN_copy+0x89>
  42c93a:	4c 89 e1             	mov    %r12,%rcx
  42c93d:	48 89 c2             	mov    %rax,%rdx
  42c940:	41 89 f8             	mov    %edi,%r8d
  42c943:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42c948:	4c 8b 59 08          	mov    0x8(%rcx),%r11
  42c94c:	4c 8b 51 10          	mov    0x10(%rcx),%r10
  42c950:	48 83 c2 20          	add    $0x20,%rdx
  42c954:	4c 8b 49 18          	mov    0x18(%rcx),%r9
  42c958:	4c 8b 29             	mov    (%rcx),%r13
  42c95b:	48 83 c1 20          	add    $0x20,%rcx
  42c95f:	4c 89 5a e8          	mov    %r11,-0x18(%rdx)
  42c963:	4c 89 52 f0          	mov    %r10,-0x10(%rdx)
  42c967:	4c 89 6a e0          	mov    %r13,-0x20(%rdx)
  42c96b:	4c 89 4a f8          	mov    %r9,-0x8(%rdx)
  42c96f:	41 83 e8 01          	sub    $0x1,%r8d
  42c973:	75 d3                	jne    42c948 <BN_copy+0x48>
  42c975:	83 ef 01             	sub    $0x1,%edi
  42c978:	48 63 ff             	movslq %edi,%rdi
  42c97b:	48 83 c7 01          	add    $0x1,%rdi
  42c97f:	48 c1 e7 05          	shl    $0x5,%rdi
  42c983:	48 01 f8             	add    %rdi,%rax
  42c986:	49 01 fc             	add    %rdi,%r12
  42c989:	89 f2                	mov    %esi,%edx
  42c98b:	83 e2 03             	and    $0x3,%edx
  42c98e:	83 fa 02             	cmp    $0x2,%edx
  42c991:	74 2e                	je     42c9c1 <BN_copy+0xc1>
  42c993:	83 fa 03             	cmp    $0x3,%edx
  42c996:	74 20                	je     42c9b8 <BN_copy+0xb8>
  42c998:	83 fa 01             	cmp    $0x1,%edx
  42c99b:	74 2d                	je     42c9ca <BN_copy+0xca>
  42c99d:	8b 45 10             	mov    0x10(%rbp),%eax
  42c9a0:	89 73 08             	mov    %esi,0x8(%rbx)
  42c9a3:	89 43 10             	mov    %eax,0x10(%rbx)
  42c9a6:	48 89 d8             	mov    %rbx,%rax
  42c9a9:	48 83 c4 08          	add    $0x8,%rsp
  42c9ad:	5b                   	pop    %rbx
  42c9ae:	5d                   	pop    %rbp
  42c9af:	41 5c                	pop    %r12
  42c9b1:	41 5d                	pop    %r13
  42c9b3:	c3                   	retq   
  42c9b4:	0f 1f 40 00          	nopl   0x0(%rax)
  42c9b8:	49 8b 54 24 10       	mov    0x10(%r12),%rdx
  42c9bd:	48 89 50 10          	mov    %rdx,0x10(%rax)
  42c9c1:	49 8b 54 24 08       	mov    0x8(%r12),%rdx
  42c9c6:	48 89 50 08          	mov    %rdx,0x8(%rax)
  42c9ca:	49 8b 14 24          	mov    (%r12),%rdx
  42c9ce:	48 89 10             	mov    %rdx,(%rax)
  42c9d1:	eb ca                	jmp    42c99d <BN_copy+0x9d>
  42c9d3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42c9d8:	48 89 f8             	mov    %rdi,%rax
  42c9db:	c3                   	retq   
  42c9dc:	0f 1f 40 00          	nopl   0x0(%rax)
  42c9e0:	e8 5b f7 ff ff       	callq  42c140 <bn_expand_internal>
  42c9e5:	48 85 c0             	test   %rax,%rax
  42c9e8:	49 89 c5             	mov    %rax,%r13
  42c9eb:	74 1f                	je     42ca0c <BN_copy+0x10c>
  42c9ed:	48 8b 3b             	mov    (%rbx),%rdi
  42c9f0:	48 85 ff             	test   %rdi,%rdi
  42c9f3:	74 05                	je     42c9fa <BN_copy+0xfa>
  42c9f5:	e8 66 8d ff ff       	callq  425760 <CRYPTO_free>
  42c9fa:	4c 89 2b             	mov    %r13,(%rbx)
  42c9fd:	44 89 63 0c          	mov    %r12d,0xc(%rbx)
  42ca01:	4c 89 e8             	mov    %r13,%rax
  42ca04:	8b 75 08             	mov    0x8(%rbp),%esi
  42ca07:	e9 21 ff ff ff       	jmpq   42c92d <BN_copy+0x2d>
  42ca0c:	31 c0                	xor    %eax,%eax
  42ca0e:	eb 99                	jmp    42c9a9 <BN_copy+0xa9>

000000000042ca10 <bn_dup_expand>:
  42ca10:	41 55                	push   %r13
  42ca12:	41 54                	push   %r12
  42ca14:	41 89 f4             	mov    %esi,%r12d
  42ca17:	55                   	push   %rbp
  42ca18:	53                   	push   %rbx
  42ca19:	48 89 fd             	mov    %rdi,%rbp
  42ca1c:	48 83 ec 08          	sub    $0x8,%rsp
  42ca20:	39 77 0c             	cmp    %esi,0xc(%rdi)
  42ca23:	7d 6b                	jge    42ca90 <bn_dup_expand+0x80>
  42ca25:	e8 16 f7 ff ff       	callq  42c140 <bn_expand_internal>
  42ca2a:	48 85 c0             	test   %rax,%rax
  42ca2d:	49 89 c5             	mov    %rax,%r13
  42ca30:	0f 84 c2 00 00 00    	je     42caf8 <bn_dup_expand+0xe8>
  42ca36:	ba 1b 01 00 00       	mov    $0x11b,%edx
  42ca3b:	be fa 07 45 00       	mov    $0x4507fa,%esi
  42ca40:	bf 18 00 00 00       	mov    $0x18,%edi
  42ca45:	e8 b6 89 ff ff       	callq  425400 <CRYPTO_malloc>
  42ca4a:	48 85 c0             	test   %rax,%rax
  42ca4d:	48 89 c3             	mov    %rax,%rbx
  42ca50:	0f 84 ca 00 00 00    	je     42cb20 <bn_dup_expand+0x110>
  42ca56:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%rax)
  42ca5d:	c7 40 14 01 00 00 00 	movl   $0x1,0x14(%rax)
  42ca64:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
  42ca6b:	8b 45 08             	mov    0x8(%rbp),%eax
  42ca6e:	44 89 63 0c          	mov    %r12d,0xc(%rbx)
  42ca72:	89 43 08             	mov    %eax,0x8(%rbx)
  42ca75:	8b 45 10             	mov    0x10(%rbp),%eax
  42ca78:	4c 89 2b             	mov    %r13,(%rbx)
  42ca7b:	89 43 10             	mov    %eax,0x10(%rbx)
  42ca7e:	48 83 c4 08          	add    $0x8,%rsp
  42ca82:	48 89 d8             	mov    %rbx,%rax
  42ca85:	5b                   	pop    %rbx
  42ca86:	5d                   	pop    %rbp
  42ca87:	41 5c                	pop    %r12
  42ca89:	41 5d                	pop    %r13
  42ca8b:	c3                   	retq   
  42ca8c:	0f 1f 40 00          	nopl   0x0(%rax)
  42ca90:	ba 1b 01 00 00       	mov    $0x11b,%edx
  42ca95:	be fa 07 45 00       	mov    $0x4507fa,%esi
  42ca9a:	bf 18 00 00 00       	mov    $0x18,%edi
  42ca9f:	e8 5c 89 ff ff       	callq  425400 <CRYPTO_malloc>
  42caa4:	48 85 c0             	test   %rax,%rax
  42caa7:	48 89 c3             	mov    %rax,%rbx
  42caaa:	74 50                	je     42cafc <bn_dup_expand+0xec>
  42caac:	66 0f 6f 05 fc 3e 02 	movdqa 0x23efc(%rip),%xmm0        # 4509b0 <BN_version+0x30>
  42cab3:	00 
  42cab4:	48 89 ee             	mov    %rbp,%rsi
  42cab7:	48 89 c7             	mov    %rax,%rdi
  42caba:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  42cac1:	0f 11 40 08          	movups %xmm0,0x8(%rax)
  42cac5:	e8 36 fe ff ff       	callq  42c900 <BN_copy>
  42caca:	48 85 c0             	test   %rax,%rax
  42cacd:	75 af                	jne    42ca7e <bn_dup_expand+0x6e>
  42cacf:	48 8b 3b             	mov    (%rbx),%rdi
  42cad2:	8b 43 14             	mov    0x14(%rbx),%eax
  42cad5:	48 85 ff             	test   %rdi,%rdi
  42cad8:	74 04                	je     42cade <bn_dup_expand+0xce>
  42cada:	a8 02                	test   $0x2,%al
  42cadc:	74 6e                	je     42cb4c <bn_dup_expand+0x13c>
  42cade:	a8 01                	test   $0x1,%al
  42cae0:	75 74                	jne    42cb56 <bn_dup_expand+0x146>
  42cae2:	80 cc 80             	or     $0x80,%ah
  42cae5:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
  42caec:	89 43 14             	mov    %eax,0x14(%rbx)
  42caef:	31 db                	xor    %ebx,%ebx
  42caf1:	eb 8b                	jmp    42ca7e <bn_dup_expand+0x6e>
  42caf3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42caf8:	31 db                	xor    %ebx,%ebx
  42cafa:	eb 82                	jmp    42ca7e <bn_dup_expand+0x6e>
  42cafc:	41 b8 1d 01 00 00    	mov    $0x11d,%r8d
  42cb02:	b9 fa 07 45 00       	mov    $0x4507fa,%ecx
  42cb07:	ba 41 00 00 00       	mov    $0x41,%edx
  42cb0c:	be 71 00 00 00       	mov    $0x71,%esi
  42cb11:	bf 03 00 00 00       	mov    $0x3,%edi
  42cb16:	e8 35 b8 ff ff       	callq  428350 <ERR_put_error>
  42cb1b:	e9 5e ff ff ff       	jmpq   42ca7e <bn_dup_expand+0x6e>
  42cb20:	41 b8 1d 01 00 00    	mov    $0x11d,%r8d
  42cb26:	b9 fa 07 45 00       	mov    $0x4507fa,%ecx
  42cb2b:	ba 41 00 00 00       	mov    $0x41,%edx
  42cb30:	be 71 00 00 00       	mov    $0x71,%esi
  42cb35:	bf 03 00 00 00       	mov    $0x3,%edi
  42cb3a:	e8 11 b8 ff ff       	callq  428350 <ERR_put_error>
  42cb3f:	4c 89 ef             	mov    %r13,%rdi
  42cb42:	e8 19 8c ff ff       	callq  425760 <CRYPTO_free>
  42cb47:	e9 32 ff ff ff       	jmpq   42ca7e <bn_dup_expand+0x6e>
  42cb4c:	e8 0f 8c ff ff       	callq  425760 <CRYPTO_free>
  42cb51:	8b 43 14             	mov    0x14(%rbx),%eax
  42cb54:	eb 88                	jmp    42cade <bn_dup_expand+0xce>
  42cb56:	48 89 df             	mov    %rbx,%rdi
  42cb59:	31 db                	xor    %ebx,%ebx
  42cb5b:	e8 00 8c ff ff       	callq  425760 <CRYPTO_free>
  42cb60:	e9 19 ff ff ff       	jmpq   42ca7e <bn_dup_expand+0x6e>
  42cb65:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  42cb6c:	00 00 00 00 

000000000042cb70 <BN_swap>:
  42cb70:	4c 8b 1e             	mov    (%rsi),%r11
  42cb73:	8b 46 14             	mov    0x14(%rsi),%eax
  42cb76:	4c 8b 17             	mov    (%rdi),%r10
  42cb79:	44 8b 4f 08          	mov    0x8(%rdi),%r9d
  42cb7d:	8b 57 14             	mov    0x14(%rdi),%edx
  42cb80:	44 8b 47 0c          	mov    0xc(%rdi),%r8d
  42cb84:	4c 89 1f             	mov    %r11,(%rdi)
  42cb87:	44 8b 5e 08          	mov    0x8(%rsi),%r11d
  42cb8b:	8b 4f 10             	mov    0x10(%rdi),%ecx
  42cb8e:	44 89 5f 08          	mov    %r11d,0x8(%rdi)
  42cb92:	44 8b 5e 0c          	mov    0xc(%rsi),%r11d
  42cb96:	44 89 5f 0c          	mov    %r11d,0xc(%rdi)
  42cb9a:	44 8b 5e 10          	mov    0x10(%rsi),%r11d
  42cb9e:	44 89 5f 10          	mov    %r11d,0x10(%rdi)
  42cba2:	44 89 46 0c          	mov    %r8d,0xc(%rsi)
  42cba6:	41 89 c0             	mov    %eax,%r8d
  42cba9:	89 4e 10             	mov    %ecx,0x10(%rsi)
  42cbac:	89 d1                	mov    %edx,%ecx
  42cbae:	41 83 e0 02          	and    $0x2,%r8d
  42cbb2:	83 e1 01             	and    $0x1,%ecx
  42cbb5:	83 e2 02             	and    $0x2,%edx
  42cbb8:	83 e0 01             	and    $0x1,%eax
  42cbbb:	44 09 c1             	or     %r8d,%ecx
  42cbbe:	09 d0                	or     %edx,%eax
  42cbc0:	4c 89 16             	mov    %r10,(%rsi)
  42cbc3:	44 89 4e 08          	mov    %r9d,0x8(%rsi)
  42cbc7:	89 4f 14             	mov    %ecx,0x14(%rdi)
  42cbca:	89 46 14             	mov    %eax,0x14(%rsi)
  42cbcd:	c3                   	retq   
  42cbce:	66 90                	xchg   %ax,%ax

000000000042cbd0 <BN_clear>:
  42cbd0:	53                   	push   %rbx
  42cbd1:	48 89 fb             	mov    %rdi,%rbx
  42cbd4:	48 8b 3f             	mov    (%rdi),%rdi
  42cbd7:	48 85 ff             	test   %rdi,%rdi
  42cbda:	74 0f                	je     42cbeb <BN_clear+0x1b>
  42cbdc:	48 63 53 0c          	movslq 0xc(%rbx),%rdx
  42cbe0:	31 f6                	xor    %esi,%esi
  42cbe2:	48 c1 e2 03          	shl    $0x3,%rdx
  42cbe6:	e8 95 a0 fd ff       	callq  406c80 <memset@plt>
  42cbeb:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%rbx)
  42cbf2:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%rbx)
  42cbf9:	5b                   	pop    %rbx
  42cbfa:	c3                   	retq   
  42cbfb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000042cc00 <BN_get_word>:
  42cc00:	83 7f 08 01          	cmpl   $0x1,0x8(%rdi)
  42cc04:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  42cc0b:	7e 03                	jle    42cc10 <BN_get_word+0x10>
  42cc0d:	f3 c3                	repz retq 
  42cc0f:	90                   	nop
  42cc10:	b8 00 00 00 00       	mov    $0x0,%eax
  42cc15:	75 f6                	jne    42cc0d <BN_get_word+0xd>
  42cc17:	48 8b 07             	mov    (%rdi),%rax
  42cc1a:	48 8b 00             	mov    (%rax),%rax
  42cc1d:	c3                   	retq   
  42cc1e:	66 90                	xchg   %ax,%ax

000000000042cc20 <BN_set_word>:
  42cc20:	41 54                	push   %r12
  42cc22:	55                   	push   %rbp
  42cc23:	48 89 f5             	mov    %rsi,%rbp
  42cc26:	53                   	push   %rbx
  42cc27:	8b 47 0c             	mov    0xc(%rdi),%eax
  42cc2a:	48 89 fb             	mov    %rdi,%rbx
  42cc2d:	85 c0                	test   %eax,%eax
  42cc2f:	7e 27                	jle    42cc58 <BN_set_word+0x38>
  42cc31:	48 8b 03             	mov    (%rbx),%rax
  42cc34:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%rbx)
  42cc3b:	48 89 28             	mov    %rbp,(%rax)
  42cc3e:	31 c0                	xor    %eax,%eax
  42cc40:	48 85 ed             	test   %rbp,%rbp
  42cc43:	0f 95 c0             	setne  %al
  42cc46:	89 43 08             	mov    %eax,0x8(%rbx)
  42cc49:	b8 01 00 00 00       	mov    $0x1,%eax
  42cc4e:	5b                   	pop    %rbx
  42cc4f:	5d                   	pop    %rbp
  42cc50:	41 5c                	pop    %r12
  42cc52:	c3                   	retq   
  42cc53:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42cc58:	be 01 00 00 00       	mov    $0x1,%esi
  42cc5d:	e8 de f4 ff ff       	callq  42c140 <bn_expand_internal>
  42cc62:	48 85 c0             	test   %rax,%rax
  42cc65:	49 89 c4             	mov    %rax,%r12
  42cc68:	74 19                	je     42cc83 <BN_set_word+0x63>
  42cc6a:	48 8b 3b             	mov    (%rbx),%rdi
  42cc6d:	48 85 ff             	test   %rdi,%rdi
  42cc70:	74 05                	je     42cc77 <BN_set_word+0x57>
  42cc72:	e8 e9 8a ff ff       	callq  425760 <CRYPTO_free>
  42cc77:	4c 89 23             	mov    %r12,(%rbx)
  42cc7a:	c7 43 0c 01 00 00 00 	movl   $0x1,0xc(%rbx)
  42cc81:	eb ae                	jmp    42cc31 <BN_set_word+0x11>
  42cc83:	31 c0                	xor    %eax,%eax
  42cc85:	eb c7                	jmp    42cc4e <BN_set_word+0x2e>
  42cc87:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  42cc8e:	00 00 

000000000042cc90 <BN_bin2bn>:
  42cc90:	41 57                	push   %r15
  42cc92:	41 56                	push   %r14
  42cc94:	45 31 f6             	xor    %r14d,%r14d
  42cc97:	41 55                	push   %r13
  42cc99:	41 54                	push   %r12
  42cc9b:	55                   	push   %rbp
  42cc9c:	53                   	push   %rbx
  42cc9d:	89 f5                	mov    %esi,%ebp
  42cc9f:	48 89 fb             	mov    %rdi,%rbx
  42cca2:	48 83 ec 18          	sub    $0x18,%rsp
  42cca6:	48 85 d2             	test   %rdx,%rdx
  42cca9:	0f 84 51 01 00 00    	je     42ce00 <BN_bin2bn+0x170>
  42ccaf:	85 ed                	test   %ebp,%ebp
  42ccb1:	0f 84 a9 00 00 00    	je     42cd60 <BN_bin2bn+0xd0>
  42ccb7:	44 8d 65 ff          	lea    -0x1(%rbp),%r12d
  42ccbb:	45 89 e5             	mov    %r12d,%r13d
  42ccbe:	41 c1 ed 03          	shr    $0x3,%r13d
  42ccc2:	41 83 c5 01          	add    $0x1,%r13d
  42ccc6:	44 3b 6a 0c          	cmp    0xc(%rdx),%r13d
  42ccca:	44 89 ed             	mov    %r13d,%ebp
  42cccd:	0f 8f ad 00 00 00    	jg     42cd80 <BN_bin2bn+0xf0>
  42ccd3:	45 89 e0             	mov    %r12d,%r8d
  42ccd6:	44 89 6a 08          	mov    %r13d,0x8(%rdx)
  42ccda:	c7 42 10 00 00 00 00 	movl   $0x0,0x10(%rdx)
  42cce1:	41 83 e0 07          	and    $0x7,%r8d
  42cce5:	4c 8b 0a             	mov    (%rdx),%r9
  42cce8:	4a 8d 74 23 01       	lea    0x1(%rbx,%r12,1),%rsi
  42cced:	44 89 ef             	mov    %r13d,%edi
  42ccf0:	31 c9                	xor    %ecx,%ecx
  42ccf2:	eb 0d                	jmp    42cd01 <BN_bin2bn+0x71>
  42ccf4:	0f 1f 40 00          	nopl   0x0(%rax)
  42ccf8:	41 83 e8 01          	sub    $0x1,%r8d
  42ccfc:	48 39 f3             	cmp    %rsi,%rbx
  42ccff:	74 2b                	je     42cd2c <BN_bin2bn+0x9c>
  42cd01:	48 83 c3 01          	add    $0x1,%rbx
  42cd05:	0f b6 43 ff          	movzbl -0x1(%rbx),%eax
  42cd09:	48 c1 e1 08          	shl    $0x8,%rcx
  42cd0d:	48 09 c1             	or     %rax,%rcx
  42cd10:	45 85 c0             	test   %r8d,%r8d
  42cd13:	75 e3                	jne    42ccf8 <BN_bin2bn+0x68>
  42cd15:	8d 47 ff             	lea    -0x1(%rdi),%eax
  42cd18:	41 b8 07 00 00 00    	mov    $0x7,%r8d
  42cd1e:	49 89 0c c1          	mov    %rcx,(%r9,%rax,8)
  42cd22:	31 c9                	xor    %ecx,%ecx
  42cd24:	48 39 f3             	cmp    %rsi,%rbx
  42cd27:	48 89 c7             	mov    %rax,%rdi
  42cd2a:	75 d5                	jne    42cd01 <BN_bin2bn+0x71>
  42cd2c:	4b 8d 44 e9 f8       	lea    -0x8(%r9,%r13,8),%rax
  42cd31:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  42cd38:	48 83 e8 08          	sub    $0x8,%rax
  42cd3c:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
  42cd41:	75 05                	jne    42cd48 <BN_bin2bn+0xb8>
  42cd43:	83 ed 01             	sub    $0x1,%ebp
  42cd46:	75 f0                	jne    42cd38 <BN_bin2bn+0xa8>
  42cd48:	89 6a 08             	mov    %ebp,0x8(%rdx)
  42cd4b:	48 83 c4 18          	add    $0x18,%rsp
  42cd4f:	48 89 d0             	mov    %rdx,%rax
  42cd52:	5b                   	pop    %rbx
  42cd53:	5d                   	pop    %rbp
  42cd54:	41 5c                	pop    %r12
  42cd56:	41 5d                	pop    %r13
  42cd58:	41 5e                	pop    %r14
  42cd5a:	41 5f                	pop    %r15
  42cd5c:	c3                   	retq   
  42cd5d:	0f 1f 00             	nopl   (%rax)
  42cd60:	c7 42 08 00 00 00 00 	movl   $0x0,0x8(%rdx)
  42cd67:	48 89 d0             	mov    %rdx,%rax
  42cd6a:	48 83 c4 18          	add    $0x18,%rsp
  42cd6e:	5b                   	pop    %rbx
  42cd6f:	5d                   	pop    %rbp
  42cd70:	41 5c                	pop    %r12
  42cd72:	41 5d                	pop    %r13
  42cd74:	41 5e                	pop    %r14
  42cd76:	41 5f                	pop    %r15
  42cd78:	c3                   	retq   
  42cd79:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  42cd80:	48 89 d7             	mov    %rdx,%rdi
  42cd83:	44 89 ee             	mov    %r13d,%esi
  42cd86:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  42cd8b:	e8 b0 f3 ff ff       	callq  42c140 <bn_expand_internal>
  42cd90:	48 85 c0             	test   %rax,%rax
  42cd93:	49 89 c7             	mov    %rax,%r15
  42cd96:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  42cd9b:	74 23                	je     42cdc0 <BN_bin2bn+0x130>
  42cd9d:	48 8b 3a             	mov    (%rdx),%rdi
  42cda0:	48 85 ff             	test   %rdi,%rdi
  42cda3:	74 0f                	je     42cdb4 <BN_bin2bn+0x124>
  42cda5:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  42cdaa:	e8 b1 89 ff ff       	callq  425760 <CRYPTO_free>
  42cdaf:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  42cdb4:	4c 89 3a             	mov    %r15,(%rdx)
  42cdb7:	44 89 6a 0c          	mov    %r13d,0xc(%rdx)
  42cdbb:	e9 13 ff ff ff       	jmpq   42ccd3 <BN_bin2bn+0x43>
  42cdc0:	4d 85 f6             	test   %r14,%r14
  42cdc3:	74 22                	je     42cde7 <BN_bin2bn+0x157>
  42cdc5:	49 8b 3e             	mov    (%r14),%rdi
  42cdc8:	41 8b 46 14          	mov    0x14(%r14),%eax
  42cdcc:	48 85 ff             	test   %rdi,%rdi
  42cdcf:	74 04                	je     42cdd5 <BN_bin2bn+0x145>
  42cdd1:	a8 02                	test   $0x2,%al
  42cdd3:	74 6b                	je     42ce40 <BN_bin2bn+0x1b0>
  42cdd5:	a8 01                	test   $0x1,%al
  42cdd7:	75 77                	jne    42ce50 <BN_bin2bn+0x1c0>
  42cdd9:	80 cc 80             	or     $0x80,%ah
  42cddc:	49 c7 06 00 00 00 00 	movq   $0x0,(%r14)
  42cde3:	41 89 46 14          	mov    %eax,0x14(%r14)
  42cde7:	48 83 c4 18          	add    $0x18,%rsp
  42cdeb:	31 c0                	xor    %eax,%eax
  42cded:	5b                   	pop    %rbx
  42cdee:	5d                   	pop    %rbp
  42cdef:	41 5c                	pop    %r12
  42cdf1:	41 5d                	pop    %r13
  42cdf3:	41 5e                	pop    %r14
  42cdf5:	41 5f                	pop    %r15
  42cdf7:	c3                   	retq   
  42cdf8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  42cdff:	00 
  42ce00:	66 ba 1b 01          	mov    $0x11b,%dx
  42ce04:	be fa 07 45 00       	mov    $0x4507fa,%esi
  42ce09:	bf 18 00 00 00       	mov    $0x18,%edi
  42ce0e:	e8 ed 85 ff ff       	callq  425400 <CRYPTO_malloc>
  42ce13:	48 85 c0             	test   %rax,%rax
  42ce16:	48 89 c2             	mov    %rax,%rdx
  42ce19:	74 44                	je     42ce5f <BN_bin2bn+0x1cf>
  42ce1b:	66 0f 6f 05 8d 3b 02 	movdqa 0x23b8d(%rip),%xmm0        # 4509b0 <BN_version+0x30>
  42ce22:	00 
  42ce23:	49 89 c6             	mov    %rax,%r14
  42ce26:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  42ce2d:	0f 11 40 08          	movups %xmm0,0x8(%rax)
  42ce31:	e9 79 fe ff ff       	jmpq   42ccaf <BN_bin2bn+0x1f>
  42ce36:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  42ce3d:	00 00 00 
  42ce40:	e8 1b 89 ff ff       	callq  425760 <CRYPTO_free>
  42ce45:	41 8b 46 14          	mov    0x14(%r14),%eax
  42ce49:	eb 8a                	jmp    42cdd5 <BN_bin2bn+0x145>
  42ce4b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42ce50:	4c 89 f7             	mov    %r14,%rdi
  42ce53:	e8 08 89 ff ff       	callq  425760 <CRYPTO_free>
  42ce58:	31 c0                	xor    %eax,%eax
  42ce5a:	e9 0b ff ff ff       	jmpq   42cd6a <BN_bin2bn+0xda>
  42ce5f:	41 b8 1d 01 00 00    	mov    $0x11d,%r8d
  42ce65:	b9 fa 07 45 00       	mov    $0x4507fa,%ecx
  42ce6a:	b2 41                	mov    $0x41,%dl
  42ce6c:	be 71 00 00 00       	mov    $0x71,%esi
  42ce71:	bf 03 00 00 00       	mov    $0x3,%edi
  42ce76:	e8 d5 b4 ff ff       	callq  428350 <ERR_put_error>
  42ce7b:	31 c0                	xor    %eax,%eax
  42ce7d:	e9 e8 fe ff ff       	jmpq   42cd6a <BN_bin2bn+0xda>
  42ce82:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  42ce89:	1f 84 00 00 00 00 00 

000000000042ce90 <BN_bn2bin>:
  42ce90:	8b 57 08             	mov    0x8(%rdi),%edx
  42ce93:	31 c0                	xor    %eax,%eax
  42ce95:	85 d2                	test   %edx,%edx
  42ce97:	0f 84 8c 00 00 00    	je     42cf29 <BN_bn2bin+0x99>
  42ce9d:	41 55                	push   %r13
  42ce9f:	44 8d 6a ff          	lea    -0x1(%rdx),%r13d
  42cea3:	41 54                	push   %r12
  42cea5:	55                   	push   %rbp
  42cea6:	53                   	push   %rbx
  42cea7:	48 89 fb             	mov    %rdi,%rbx
  42ceaa:	48 8b 2f             	mov    (%rdi),%rbp
  42cead:	49 63 c5             	movslq %r13d,%rax
  42ceb0:	49 89 f4             	mov    %rsi,%r12
  42ceb3:	48 8b 7c c5 00       	mov    0x0(%rbp,%rax,8),%rdi
  42ceb8:	e8 d3 f4 ff ff       	callq  42c390 <BN_num_bits_word>
  42cebd:	44 89 ea             	mov    %r13d,%edx
  42cec0:	c1 e2 06             	shl    $0x6,%edx
  42cec3:	01 c2                	add    %eax,%edx
  42cec5:	8d 42 0e             	lea    0xe(%rdx),%eax
  42cec8:	83 c2 07             	add    $0x7,%edx
  42cecb:	0f 49 c2             	cmovns %edx,%eax
  42cece:	c1 f8 03             	sar    $0x3,%eax
  42ced1:	85 c0                	test   %eax,%eax
  42ced3:	8d 50 ff             	lea    -0x1(%rax),%edx
  42ced6:	74 4b                	je     42cf23 <BN_bn2bin+0x93>
  42ced8:	4c 89 e6             	mov    %r12,%rsi
  42cedb:	48 89 ef             	mov    %rbp,%rdi
  42cede:	eb 03                	jmp    42cee3 <BN_bn2bin+0x53>
  42cee0:	48 8b 3b             	mov    (%rbx),%rdi
  42cee3:	44 8d 42 07          	lea    0x7(%rdx),%r8d
  42cee7:	85 d2                	test   %edx,%edx
  42cee9:	41 89 d1             	mov    %edx,%r9d
  42ceec:	44 0f 49 c2          	cmovns %edx,%r8d
  42cef0:	41 c1 f9 1f          	sar    $0x1f,%r9d
  42cef4:	48 83 c6 01          	add    $0x1,%rsi
  42cef8:	41 c1 e9 1d          	shr    $0x1d,%r9d
  42cefc:	41 c1 f8 03          	sar    $0x3,%r8d
  42cf00:	42 8d 0c 0a          	lea    (%rdx,%r9,1),%ecx
  42cf04:	4d 63 c0             	movslq %r8d,%r8
  42cf07:	83 ea 01             	sub    $0x1,%edx
  42cf0a:	4a 8b 3c c7          	mov    (%rdi,%r8,8),%rdi
  42cf0e:	83 e1 07             	and    $0x7,%ecx
  42cf11:	44 29 c9             	sub    %r9d,%ecx
  42cf14:	c1 e1 03             	shl    $0x3,%ecx
  42cf17:	48 d3 ef             	shr    %cl,%rdi
  42cf1a:	40 88 7e ff          	mov    %dil,-0x1(%rsi)
  42cf1e:	83 fa ff             	cmp    $0xffffffff,%edx
  42cf21:	75 bd                	jne    42cee0 <BN_bn2bin+0x50>
  42cf23:	5b                   	pop    %rbx
  42cf24:	5d                   	pop    %rbp
  42cf25:	41 5c                	pop    %r12
  42cf27:	41 5d                	pop    %r13
  42cf29:	f3 c3                	repz retq 
  42cf2b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000042cf30 <BN_ucmp>:
  42cf30:	8b 57 08             	mov    0x8(%rdi),%edx
  42cf33:	89 d0                	mov    %edx,%eax
  42cf35:	2b 46 08             	sub    0x8(%rsi),%eax
  42cf38:	85 c0                	test   %eax,%eax
  42cf3a:	75 55                	jne    42cf91 <BN_ucmp+0x61>
  42cf3c:	83 ea 01             	sub    $0x1,%edx
  42cf3f:	48 8b 3f             	mov    (%rdi),%rdi
  42cf42:	4c 8b 06             	mov    (%rsi),%r8
  42cf45:	78 4a                	js     42cf91 <BN_ucmp+0x61>
  42cf47:	48 63 f2             	movslq %edx,%rsi
  42cf4a:	48 8b 0c f7          	mov    (%rdi,%rsi,8),%rcx
  42cf4e:	48 8d 04 f5 00 00 00 	lea    0x0(,%rsi,8),%rax
  42cf55:	00 
  42cf56:	49 8b 34 f0          	mov    (%r8,%rsi,8),%rsi
  42cf5a:	48 39 f1             	cmp    %rsi,%rcx
  42cf5d:	75 39                	jne    42cf98 <BN_ucmp+0x68>
  42cf5f:	89 d2                	mov    %edx,%edx
  42cf61:	48 01 c7             	add    %rax,%rdi
  42cf64:	49 01 c0             	add    %rax,%r8
  42cf67:	48 f7 da             	neg    %rdx
  42cf6a:	31 c0                	xor    %eax,%eax
  42cf6c:	48 c1 e2 03          	shl    $0x3,%rdx
  42cf70:	eb 18                	jmp    42cf8a <BN_ucmp+0x5a>
  42cf72:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  42cf78:	48 8b 4c 07 f8       	mov    -0x8(%rdi,%rax,1),%rcx
  42cf7d:	48 83 e8 08          	sub    $0x8,%rax
  42cf81:	49 8b 34 00          	mov    (%r8,%rax,1),%rsi
  42cf85:	48 39 f1             	cmp    %rsi,%rcx
  42cf88:	75 0e                	jne    42cf98 <BN_ucmp+0x68>
  42cf8a:	48 39 d0             	cmp    %rdx,%rax
  42cf8d:	75 e9                	jne    42cf78 <BN_ucmp+0x48>
  42cf8f:	31 c0                	xor    %eax,%eax
  42cf91:	f3 c3                	repz retq 
  42cf93:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42cf98:	48 39 ce             	cmp    %rcx,%rsi
  42cf9b:	19 c0                	sbb    %eax,%eax
  42cf9d:	83 e0 02             	and    $0x2,%eax
  42cfa0:	83 e8 01             	sub    $0x1,%eax
  42cfa3:	c3                   	retq   
  42cfa4:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
  42cfab:	00 00 00 00 00 

000000000042cfb0 <BN_cmp>:
  42cfb0:	48 85 ff             	test   %rdi,%rdi
  42cfb3:	74 1b                	je     42cfd0 <BN_cmp+0x20>
  42cfb5:	48 85 f6             	test   %rsi,%rsi
  42cfb8:	74 16                	je     42cfd0 <BN_cmp+0x20>
  42cfba:	8b 47 10             	mov    0x10(%rdi),%eax
  42cfbd:	3b 46 10             	cmp    0x10(%rsi),%eax
  42cfc0:	74 36                	je     42cff8 <BN_cmp+0x48>
  42cfc2:	83 f8 01             	cmp    $0x1,%eax
  42cfc5:	19 c0                	sbb    %eax,%eax
  42cfc7:	83 e0 02             	and    $0x2,%eax
  42cfca:	83 e8 01             	sub    $0x1,%eax
  42cfcd:	c3                   	retq   
  42cfce:	66 90                	xchg   %ax,%ax
  42cfd0:	48 85 ff             	test   %rdi,%rdi
  42cfd3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  42cfd8:	75 16                	jne    42cff0 <BN_cmp+0x40>
  42cfda:	31 c0                	xor    %eax,%eax
  42cfdc:	48 85 f6             	test   %rsi,%rsi
  42cfdf:	0f 95 c0             	setne  %al
  42cfe2:	c3                   	retq   
  42cfe3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42cfe8:	44 89 c8             	mov    %r9d,%eax
  42cfeb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42cff0:	f3 c3                	repz retq 
  42cff2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  42cff8:	83 f8 01             	cmp    $0x1,%eax
  42cffb:	8b 57 08             	mov    0x8(%rdi),%edx
  42cffe:	45 19 c9             	sbb    %r9d,%r9d
  42d001:	41 83 c9 01          	or     $0x1,%r9d
  42d005:	83 f8 01             	cmp    $0x1,%eax
  42d008:	45 19 c0             	sbb    %r8d,%r8d
  42d00b:	41 83 e0 02          	and    $0x2,%r8d
  42d00f:	41 83 e8 01          	sub    $0x1,%r8d
  42d013:	3b 56 08             	cmp    0x8(%rsi),%edx
  42d016:	44 89 c0             	mov    %r8d,%eax
  42d019:	7f d5                	jg     42cff0 <BN_cmp+0x40>
  42d01b:	44 89 c8             	mov    %r9d,%eax
  42d01e:	7c d0                	jl     42cff0 <BN_cmp+0x40>
  42d020:	83 ea 01             	sub    $0x1,%edx
  42d023:	78 5c                	js     42d081 <BN_cmp+0xd1>
  42d025:	48 8b 3f             	mov    (%rdi),%rdi
  42d028:	4c 8b 16             	mov    (%rsi),%r10
  42d02b:	4c 63 da             	movslq %edx,%r11
  42d02e:	4a 8d 0c dd 00 00 00 	lea    0x0(,%r11,8),%rcx
  42d035:	00 
  42d036:	4b 8b 34 da          	mov    (%r10,%r11,8),%rsi
  42d03a:	4a 39 34 df          	cmp    %rsi,(%rdi,%r11,8)
  42d03e:	77 48                	ja     42d088 <BN_cmp+0xd8>
  42d040:	72 ae                	jb     42cff0 <BN_cmp+0x40>
  42d042:	89 d2                	mov    %edx,%edx
  42d044:	48 01 cf             	add    %rcx,%rdi
  42d047:	49 01 ca             	add    %rcx,%r10
  42d04a:	48 f7 da             	neg    %rdx
  42d04d:	31 c0                	xor    %eax,%eax
  42d04f:	48 8d 34 d5 00 00 00 	lea    0x0(,%rdx,8),%rsi
  42d056:	00 
  42d057:	eb 23                	jmp    42d07c <BN_cmp+0xcc>
  42d059:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  42d060:	48 8b 4c 07 f8       	mov    -0x8(%rdi,%rax,1),%rcx
  42d065:	49 8b 54 02 f8       	mov    -0x8(%r10,%rax,1),%rdx
  42d06a:	48 39 d1             	cmp    %rdx,%rcx
  42d06d:	77 19                	ja     42d088 <BN_cmp+0xd8>
  42d06f:	48 83 e8 08          	sub    $0x8,%rax
  42d073:	48 39 d1             	cmp    %rdx,%rcx
  42d076:	0f 82 6c ff ff ff    	jb     42cfe8 <BN_cmp+0x38>
  42d07c:	48 39 f0             	cmp    %rsi,%rax
  42d07f:	75 df                	jne    42d060 <BN_cmp+0xb0>
  42d081:	31 c0                	xor    %eax,%eax
  42d083:	c3                   	retq   
  42d084:	0f 1f 40 00          	nopl   0x0(%rax)
  42d088:	44 89 c0             	mov    %r8d,%eax
  42d08b:	c3                   	retq   
  42d08c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000042d090 <BN_set_bit>:
  42d090:	85 f6                	test   %esi,%esi
  42d092:	0f 88 80 00 00 00    	js     42d118 <BN_set_bit+0x88>
  42d098:	41 56                	push   %r14
  42d09a:	41 55                	push   %r13
  42d09c:	41 54                	push   %r12
  42d09e:	55                   	push   %rbp
  42d09f:	53                   	push   %rbx
  42d0a0:	48 63 4f 08          	movslq 0x8(%rdi),%rcx
  42d0a4:	89 f3                	mov    %esi,%ebx
  42d0a6:	c1 fb 06             	sar    $0x6,%ebx
  42d0a9:	83 e6 3f             	and    $0x3f,%esi
  42d0ac:	89 f5                	mov    %esi,%ebp
  42d0ae:	39 cb                	cmp    %ecx,%ebx
  42d0b0:	7c 3e                	jl     42d0f0 <BN_set_bit+0x60>
  42d0b2:	8b 47 0c             	mov    0xc(%rdi),%eax
  42d0b5:	49 89 fc             	mov    %rdi,%r12
  42d0b8:	44 8d 73 01          	lea    0x1(%rbx),%r14d
  42d0bc:	39 c3                	cmp    %eax,%ebx
  42d0be:	7d 60                	jge    42d120 <BN_set_bit+0x90>
  42d0c0:	4d 8b 2c 24          	mov    (%r12),%r13
  42d0c4:	89 d8                	mov    %ebx,%eax
  42d0c6:	29 c8                	sub    %ecx,%eax
  42d0c8:	39 cb                	cmp    %ecx,%ebx
  42d0ca:	48 8d 14 c5 08 00 00 	lea    0x8(,%rax,8),%rdx
  42d0d1:	00 
  42d0d2:	b8 08 00 00 00       	mov    $0x8,%eax
  42d0d7:	49 8d 7c cd 00       	lea    0x0(%r13,%rcx,8),%rdi
  42d0dc:	48 0f 4c d0          	cmovl  %rax,%rdx
  42d0e0:	31 f6                	xor    %esi,%esi
  42d0e2:	e8 99 9b fd ff       	callq  406c80 <memset@plt>
  42d0e7:	45 89 74 24 08       	mov    %r14d,0x8(%r12)
  42d0ec:	eb 05                	jmp    42d0f3 <BN_set_bit+0x63>
  42d0ee:	66 90                	xchg   %ax,%ax
  42d0f0:	4c 8b 2f             	mov    (%rdi),%r13
  42d0f3:	48 63 db             	movslq %ebx,%rbx
  42d0f6:	89 e9                	mov    %ebp,%ecx
  42d0f8:	ba 01 00 00 00       	mov    $0x1,%edx
  42d0fd:	48 d3 e2             	shl    %cl,%rdx
  42d100:	49 09 54 dd 00       	or     %rdx,0x0(%r13,%rbx,8)
  42d105:	b8 01 00 00 00       	mov    $0x1,%eax
  42d10a:	5b                   	pop    %rbx
  42d10b:	5d                   	pop    %rbp
  42d10c:	41 5c                	pop    %r12
  42d10e:	41 5d                	pop    %r13
  42d110:	41 5e                	pop    %r14
  42d112:	c3                   	retq   
  42d113:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42d118:	31 c0                	xor    %eax,%eax
  42d11a:	c3                   	retq   
  42d11b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42d120:	44 39 f0             	cmp    %r14d,%eax
  42d123:	7d 9b                	jge    42d0c0 <BN_set_bit+0x30>
  42d125:	44 89 f6             	mov    %r14d,%esi
  42d128:	e8 13 f0 ff ff       	callq  42c140 <bn_expand_internal>
  42d12d:	48 85 c0             	test   %rax,%rax
  42d130:	49 89 c5             	mov    %rax,%r13
  42d133:	74 2b                	je     42d160 <BN_set_bit+0xd0>
  42d135:	49 8b 3c 24          	mov    (%r12),%rdi
  42d139:	48 85 ff             	test   %rdi,%rdi
  42d13c:	74 05                	je     42d143 <BN_set_bit+0xb3>
  42d13e:	e8 1d 86 ff ff       	callq  425760 <CRYPTO_free>
  42d143:	49 63 4c 24 08       	movslq 0x8(%r12),%rcx
  42d148:	4d 89 2c 24          	mov    %r13,(%r12)
  42d14c:	45 89 74 24 0c       	mov    %r14d,0xc(%r12)
  42d151:	39 cb                	cmp    %ecx,%ebx
  42d153:	7c 92                	jl     42d0e7 <BN_set_bit+0x57>
  42d155:	e9 66 ff ff ff       	jmpq   42d0c0 <BN_set_bit+0x30>
  42d15a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  42d160:	5b                   	pop    %rbx
  42d161:	31 c0                	xor    %eax,%eax
  42d163:	5d                   	pop    %rbp
  42d164:	41 5c                	pop    %r12
  42d166:	41 5d                	pop    %r13
  42d168:	41 5e                	pop    %r14
  42d16a:	c3                   	retq   
  42d16b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000042d170 <BN_clear_bit>:
  42d170:	85 f6                	test   %esi,%esi
  42d172:	78 6c                	js     42d1e0 <BN_clear_bit+0x70>
  42d174:	8b 57 08             	mov    0x8(%rdi),%edx
  42d177:	41 89 f0             	mov    %esi,%r8d
  42d17a:	31 c0                	xor    %eax,%eax
  42d17c:	41 c1 f8 06          	sar    $0x6,%r8d
  42d180:	41 39 d0             	cmp    %edx,%r8d
  42d183:	7d 50                	jge    42d1d5 <BN_clear_bit+0x65>
  42d185:	4c 8b 0f             	mov    (%rdi),%r9
  42d188:	b8 01 00 00 00       	mov    $0x1,%eax
  42d18d:	89 f1                	mov    %esi,%ecx
  42d18f:	48 d3 e0             	shl    %cl,%rax
  42d192:	4d 63 c0             	movslq %r8d,%r8
  42d195:	48 f7 d0             	not    %rax
  42d198:	4b 21 04 c1          	and    %rax,(%r9,%r8,8)
  42d19c:	85 d2                	test   %edx,%edx
  42d19e:	7e 30                	jle    42d1d0 <BN_clear_bit+0x60>
  42d1a0:	48 63 c2             	movslq %edx,%rax
  42d1a3:	49 8d 44 c1 f8       	lea    -0x8(%r9,%rax,8),%rax
  42d1a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  42d1af:	00 
  42d1b0:	48 83 e8 08          	sub    $0x8,%rax
  42d1b4:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
  42d1b9:	75 05                	jne    42d1c0 <BN_clear_bit+0x50>
  42d1bb:	83 ea 01             	sub    $0x1,%edx
  42d1be:	75 f0                	jne    42d1b0 <BN_clear_bit+0x40>
  42d1c0:	89 57 08             	mov    %edx,0x8(%rdi)
  42d1c3:	b8 01 00 00 00       	mov    $0x1,%eax
  42d1c8:	c3                   	retq   
  42d1c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  42d1d0:	b8 01 00 00 00       	mov    $0x1,%eax
  42d1d5:	f3 c3                	repz retq 
  42d1d7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  42d1de:	00 00 
  42d1e0:	31 c0                	xor    %eax,%eax
  42d1e2:	c3                   	retq   
  42d1e3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  42d1ea:	84 00 00 00 00 00 

000000000042d1f0 <BN_is_bit_set>:
  42d1f0:	85 f6                	test   %esi,%esi
  42d1f2:	78 24                	js     42d218 <BN_is_bit_set+0x28>
  42d1f4:	89 f2                	mov    %esi,%edx
  42d1f6:	31 c0                	xor    %eax,%eax
  42d1f8:	c1 fa 06             	sar    $0x6,%edx
  42d1fb:	3b 57 08             	cmp    0x8(%rdi),%edx
  42d1fe:	7d 1a                	jge    42d21a <BN_is_bit_set+0x2a>
  42d200:	48 8b 07             	mov    (%rdi),%rax
  42d203:	48 63 d2             	movslq %edx,%rdx
  42d206:	89 f1                	mov    %esi,%ecx
  42d208:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  42d20c:	48 d3 e8             	shr    %cl,%rax
  42d20f:	83 e0 01             	and    $0x1,%eax
  42d212:	c3                   	retq   
  42d213:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42d218:	31 c0                	xor    %eax,%eax
  42d21a:	f3 c3                	repz retq 
  42d21c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000042d220 <BN_mask_bits>:
  42d220:	85 f6                	test   %esi,%esi
  42d222:	0f 88 80 00 00 00    	js     42d2a8 <BN_mask_bits+0x88>
  42d228:	89 f1                	mov    %esi,%ecx
  42d22a:	31 c0                	xor    %eax,%eax
  42d22c:	c1 f9 06             	sar    $0x6,%ecx
  42d22f:	3b 4f 08             	cmp    0x8(%rdi),%ecx
  42d232:	7d 41                	jge    42d275 <BN_mask_bits+0x55>
  42d234:	83 e6 3f             	and    $0x3f,%esi
  42d237:	75 47                	jne    42d280 <BN_mask_bits+0x60>
  42d239:	89 4f 08             	mov    %ecx,0x8(%rdi)
  42d23c:	89 c8                	mov    %ecx,%eax
  42d23e:	85 c0                	test   %eax,%eax
  42d240:	7e 2e                	jle    42d270 <BN_mask_bits+0x50>
  42d242:	48 8b 0f             	mov    (%rdi),%rcx
  42d245:	48 63 d0             	movslq %eax,%rdx
  42d248:	48 8d 54 d1 f8       	lea    -0x8(%rcx,%rdx,8),%rdx
  42d24d:	0f 1f 00             	nopl   (%rax)
  42d250:	48 83 ea 08          	sub    $0x8,%rdx
  42d254:	48 83 7a 08 00       	cmpq   $0x0,0x8(%rdx)
  42d259:	75 05                	jne    42d260 <BN_mask_bits+0x40>
  42d25b:	83 e8 01             	sub    $0x1,%eax
  42d25e:	75 f0                	jne    42d250 <BN_mask_bits+0x30>
  42d260:	89 47 08             	mov    %eax,0x8(%rdi)
  42d263:	b8 01 00 00 00       	mov    $0x1,%eax
  42d268:	c3                   	retq   
  42d269:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  42d270:	b8 01 00 00 00       	mov    $0x1,%eax
  42d275:	f3 c3                	repz retq 
  42d277:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  42d27e:	00 00 
  42d280:	4c 8b 0f             	mov    (%rdi),%r9
  42d283:	8d 51 01             	lea    0x1(%rcx),%edx
  42d286:	48 63 c1             	movslq %ecx,%rax
  42d289:	49 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%r8
  42d290:	89 f1                	mov    %esi,%ecx
  42d292:	49 d3 e0             	shl    %cl,%r8
  42d295:	89 57 08             	mov    %edx,0x8(%rdi)
  42d298:	49 f7 d0             	not    %r8
  42d29b:	4d 21 04 c1          	and    %r8,(%r9,%rax,8)
  42d29f:	89 d0                	mov    %edx,%eax
  42d2a1:	eb 9b                	jmp    42d23e <BN_mask_bits+0x1e>
  42d2a3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42d2a8:	31 c0                	xor    %eax,%eax
  42d2aa:	c3                   	retq   
  42d2ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000042d2b0 <BN_set_negative>:
  42d2b0:	31 c0                	xor    %eax,%eax
  42d2b2:	85 f6                	test   %esi,%esi
  42d2b4:	74 0a                	je     42d2c0 <BN_set_negative+0x10>
  42d2b6:	8b 57 08             	mov    0x8(%rdi),%edx
  42d2b9:	31 c0                	xor    %eax,%eax
  42d2bb:	85 d2                	test   %edx,%edx
  42d2bd:	0f 95 c0             	setne  %al
  42d2c0:	89 47 10             	mov    %eax,0x10(%rdi)
  42d2c3:	c3                   	retq   
  42d2c4:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
  42d2cb:	00 00 00 00 00 

000000000042d2d0 <bn_cmp_words>:
  42d2d0:	48 63 c2             	movslq %edx,%rax
  42d2d3:	48 c1 e0 03          	shl    $0x3,%rax
  42d2d7:	48 8b 4c 07 f8       	mov    -0x8(%rdi,%rax,1),%rcx
  42d2dc:	48 8b 44 06 f8       	mov    -0x8(%rsi,%rax,1),%rax
  42d2e1:	48 39 c1             	cmp    %rax,%rcx
  42d2e4:	74 12                	je     42d2f8 <bn_cmp_words+0x28>
  42d2e6:	48 39 c8             	cmp    %rcx,%rax
  42d2e9:	19 c0                	sbb    %eax,%eax
  42d2eb:	83 e0 02             	and    $0x2,%eax
  42d2ee:	83 e8 01             	sub    $0x1,%eax
  42d2f1:	c3                   	retq   
  42d2f2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  42d2f8:	83 ea 02             	sub    $0x2,%edx
  42d2fb:	78 4a                	js     42d347 <bn_cmp_words+0x77>
  42d2fd:	4c 63 c2             	movslq %edx,%r8
  42d300:	4a 8b 0c c7          	mov    (%rdi,%r8,8),%rcx
  42d304:	4a 8d 04 c5 00 00 00 	lea    0x0(,%r8,8),%rax
  42d30b:	00 
  42d30c:	4e 8b 04 c6          	mov    (%rsi,%r8,8),%r8
  42d310:	4c 39 c1             	cmp    %r8,%rcx
  42d313:	75 3b                	jne    42d350 <bn_cmp_words+0x80>
  42d315:	89 d2                	mov    %edx,%edx
  42d317:	48 01 c7             	add    %rax,%rdi
  42d31a:	48 01 c6             	add    %rax,%rsi
  42d31d:	48 f7 da             	neg    %rdx
  42d320:	31 c0                	xor    %eax,%eax
  42d322:	48 c1 e2 03          	shl    $0x3,%rdx
  42d326:	eb 1a                	jmp    42d342 <bn_cmp_words+0x72>
  42d328:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  42d32f:	00 
  42d330:	48 8b 4c 07 f8       	mov    -0x8(%rdi,%rax,1),%rcx
  42d335:	48 83 e8 08          	sub    $0x8,%rax
  42d339:	4c 8b 04 06          	mov    (%rsi,%rax,1),%r8
  42d33d:	4c 39 c1             	cmp    %r8,%rcx
  42d340:	75 0e                	jne    42d350 <bn_cmp_words+0x80>
  42d342:	48 39 d0             	cmp    %rdx,%rax
  42d345:	75 e9                	jne    42d330 <bn_cmp_words+0x60>
  42d347:	31 c0                	xor    %eax,%eax
  42d349:	c3                   	retq   
  42d34a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  42d350:	49 39 c8             	cmp    %rcx,%r8
  42d353:	19 c0                	sbb    %eax,%eax
  42d355:	83 e0 02             	and    $0x2,%eax
  42d358:	83 e8 01             	sub    $0x1,%eax
  42d35b:	c3                   	retq   
  42d35c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000042d360 <bn_cmp_part_words>:
  42d360:	85 c9                	test   %ecx,%ecx
  42d362:	8d 42 ff             	lea    -0x1(%rdx),%eax
  42d365:	78 59                	js     42d3c0 <bn_cmp_part_words+0x60>
  42d367:	74 26                	je     42d38f <bn_cmp_part_words+0x2f>
  42d369:	48 98                	cltq   
  42d36b:	4c 63 c1             	movslq %ecx,%r8
  42d36e:	83 e9 01             	sub    $0x1,%ecx
  42d371:	49 01 c0             	add    %rax,%r8
  42d374:	4a 8d 04 c7          	lea    (%rdi,%r8,8),%rax
  42d378:	49 29 c8             	sub    %rcx,%r8
  42d37b:	4a 8d 4c c7 f8       	lea    -0x8(%rdi,%r8,8),%rcx
  42d380:	48 83 38 00          	cmpq   $0x0,(%rax)
  42d384:	75 32                	jne    42d3b8 <bn_cmp_part_words+0x58>
  42d386:	48 83 e8 08          	sub    $0x8,%rax
  42d38a:	48 39 c8             	cmp    %rcx,%rax
  42d38d:	75 f1                	jne    42d380 <bn_cmp_part_words+0x20>
  42d38f:	48 63 c2             	movslq %edx,%rax
  42d392:	48 c1 e0 03          	shl    $0x3,%rax
  42d396:	48 8b 4c 07 f8       	mov    -0x8(%rdi,%rax,1),%rcx
  42d39b:	48 8b 44 06 f8       	mov    -0x8(%rsi,%rax,1),%rax
  42d3a0:	48 39 c1             	cmp    %rax,%rcx
  42d3a3:	74 53                	je     42d3f8 <bn_cmp_part_words+0x98>
  42d3a5:	48 39 c8             	cmp    %rcx,%rax
  42d3a8:	19 c0                	sbb    %eax,%eax
  42d3aa:	83 e0 02             	and    $0x2,%eax
  42d3ad:	83 e8 01             	sub    $0x1,%eax
  42d3b0:	c3                   	retq   
  42d3b1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  42d3b8:	b8 01 00 00 00       	mov    $0x1,%eax
  42d3bd:	c3                   	retq   
  42d3be:	66 90                	xchg   %ax,%ax
  42d3c0:	4c 63 c0             	movslq %eax,%r8
  42d3c3:	48 63 c1             	movslq %ecx,%rax
  42d3c6:	f7 d1                	not    %ecx
  42d3c8:	49 29 c0             	sub    %rax,%r8
  42d3cb:	4a 8d 04 c6          	lea    (%rsi,%r8,8),%rax
  42d3cf:	49 29 c8             	sub    %rcx,%r8
  42d3d2:	4a 8d 4c c6 f8       	lea    -0x8(%rsi,%r8,8),%rcx
  42d3d7:	48 83 38 00          	cmpq   $0x0,(%rax)
  42d3db:	75 12                	jne    42d3ef <bn_cmp_part_words+0x8f>
  42d3dd:	0f 1f 00             	nopl   (%rax)
  42d3e0:	48 83 e8 08          	sub    $0x8,%rax
  42d3e4:	48 39 c8             	cmp    %rcx,%rax
  42d3e7:	74 a6                	je     42d38f <bn_cmp_part_words+0x2f>
  42d3e9:	48 83 38 00          	cmpq   $0x0,(%rax)
  42d3ed:	74 f1                	je     42d3e0 <bn_cmp_part_words+0x80>
  42d3ef:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  42d3f4:	c3                   	retq   
  42d3f5:	0f 1f 00             	nopl   (%rax)
  42d3f8:	83 ea 02             	sub    $0x2,%edx
  42d3fb:	78 4a                	js     42d447 <bn_cmp_part_words+0xe7>
  42d3fd:	4c 63 c2             	movslq %edx,%r8
  42d400:	4a 8b 0c c7          	mov    (%rdi,%r8,8),%rcx
  42d404:	4a 8d 04 c5 00 00 00 	lea    0x0(,%r8,8),%rax
  42d40b:	00 
  42d40c:	4e 8b 04 c6          	mov    (%rsi,%r8,8),%r8
  42d410:	4c 39 c1             	cmp    %r8,%rcx
  42d413:	75 3b                	jne    42d450 <bn_cmp_part_words+0xf0>
  42d415:	89 d2                	mov    %edx,%edx
  42d417:	48 01 c7             	add    %rax,%rdi
  42d41a:	48 01 c6             	add    %rax,%rsi
  42d41d:	48 f7 da             	neg    %rdx
  42d420:	31 c0                	xor    %eax,%eax
  42d422:	48 c1 e2 03          	shl    $0x3,%rdx
  42d426:	eb 1a                	jmp    42d442 <bn_cmp_part_words+0xe2>
  42d428:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  42d42f:	00 
  42d430:	48 8b 4c 07 f8       	mov    -0x8(%rdi,%rax,1),%rcx
  42d435:	48 83 e8 08          	sub    $0x8,%rax
  42d439:	4c 8b 04 06          	mov    (%rsi,%rax,1),%r8
  42d43d:	4c 39 c1             	cmp    %r8,%rcx
  42d440:	75 0e                	jne    42d450 <bn_cmp_part_words+0xf0>
  42d442:	48 39 d0             	cmp    %rdx,%rax
  42d445:	75 e9                	jne    42d430 <bn_cmp_part_words+0xd0>
  42d447:	31 c0                	xor    %eax,%eax
  42d449:	c3                   	retq   
  42d44a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  42d450:	49 39 c8             	cmp    %rcx,%r8
  42d453:	19 c0                	sbb    %eax,%eax
  42d455:	83 e0 02             	and    $0x2,%eax
  42d458:	83 e8 01             	sub    $0x1,%eax
  42d45b:	c3                   	retq   
  42d45c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000042d460 <BN_bn2hex>:
  42d460:	53                   	push   %rbx
  42d461:	48 89 fb             	mov    %rdi,%rbx
  42d464:	ba 4a 00 00 00       	mov    $0x4a,%edx
  42d469:	be c0 09 45 00       	mov    $0x4509c0,%esi
  42d46e:	48 83 ec 10          	sub    $0x10,%rsp
  42d472:	8b 7f 08             	mov    0x8(%rdi),%edi
  42d475:	c1 e7 04             	shl    $0x4,%edi
  42d478:	83 c7 02             	add    $0x2,%edi
  42d47b:	e8 80 7f ff ff       	callq  425400 <CRYPTO_malloc>
  42d480:	48 85 c0             	test   %rax,%rax
  42d483:	0f 84 66 02 00 00    	je     42d6ef <BN_bn2hex+0x28f>
  42d489:	8b 4b 10             	mov    0x10(%rbx),%ecx
  42d48c:	48 89 c2             	mov    %rax,%rdx
  42d48f:	85 c9                	test   %ecx,%ecx
  42d491:	74 07                	je     42d49a <BN_bn2hex+0x3a>
  42d493:	48 8d 50 01          	lea    0x1(%rax),%rdx
  42d497:	c6 00 2d             	movb   $0x2d,(%rax)
  42d49a:	8b 4b 08             	mov    0x8(%rbx),%ecx
  42d49d:	85 c9                	test   %ecx,%ecx
  42d49f:	0f 84 3b 02 00 00    	je     42d6e0 <BN_bn2hex+0x280>
  42d4a5:	83 e9 01             	sub    $0x1,%ecx
  42d4a8:	0f 88 26 02 00 00    	js     42d6d4 <BN_bn2hex+0x274>
  42d4ae:	48 63 f9             	movslq %ecx,%rdi
  42d4b1:	89 c9                	mov    %ecx,%ecx
  42d4b3:	45 31 d2             	xor    %r10d,%r10d
  42d4b6:	48 8d 34 fd 00 00 00 	lea    0x0(,%rdi,8),%rsi
  42d4bd:	00 
  42d4be:	48 29 cf             	sub    %rcx,%rdi
  42d4c1:	4c 8d 04 fd f8 ff ff 	lea    -0x8(,%rdi,8),%r8
  42d4c8:	ff 
  42d4c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  42d4d0:	48 8b 0b             	mov    (%rbx),%rcx
  42d4d3:	45 31 db             	xor    %r11d,%r11d
  42d4d6:	48 8b 0c 31          	mov    (%rcx,%rsi,1),%rcx
  42d4da:	49 89 c9             	mov    %rcx,%r9
  42d4dd:	49 c1 e9 38          	shr    $0x38,%r9
  42d4e1:	41 0f b6 f9          	movzbl %r9b,%edi
  42d4e5:	41 09 fa             	or     %edi,%r10d
  42d4e8:	74 2d                	je     42d517 <BN_bn2hex+0xb7>
  42d4ea:	c1 ff 04             	sar    $0x4,%edi
  42d4ed:	41 83 e1 0f          	and    $0xf,%r9d
  42d4f1:	48 83 c2 02          	add    $0x2,%rdx
  42d4f5:	48 63 ff             	movslq %edi,%rdi
  42d4f8:	41 b3 01             	mov    $0x1,%r11b
  42d4fb:	0f b6 8f e0 09 45 00 	movzbl 0x4509e0(%rdi),%ecx
  42d502:	88 4a fe             	mov    %cl,-0x2(%rdx)
  42d505:	41 0f b6 89 e0 09 45 	movzbl 0x4509e0(%r9),%ecx
  42d50c:	00 
  42d50d:	88 4a ff             	mov    %cl,-0x1(%rdx)
  42d510:	48 8b 0b             	mov    (%rbx),%rcx
  42d513:	48 8b 0c 31          	mov    (%rcx,%rsi,1),%rcx
  42d517:	49 89 c9             	mov    %rcx,%r9
  42d51a:	45 31 d2             	xor    %r10d,%r10d
  42d51d:	49 c1 e9 30          	shr    $0x30,%r9
  42d521:	41 0f b6 f9          	movzbl %r9b,%edi
  42d525:	41 09 fb             	or     %edi,%r11d
  42d528:	74 2d                	je     42d557 <BN_bn2hex+0xf7>
  42d52a:	c1 ff 04             	sar    $0x4,%edi
  42d52d:	41 83 e1 0f          	and    $0xf,%r9d
  42d531:	48 83 c2 02          	add    $0x2,%rdx
  42d535:	48 63 ff             	movslq %edi,%rdi
  42d538:	41 b2 01             	mov    $0x1,%r10b
  42d53b:	0f b6 8f e0 09 45 00 	movzbl 0x4509e0(%rdi),%ecx
  42d542:	88 4a fe             	mov    %cl,-0x2(%rdx)
  42d545:	41 0f b6 89 e0 09 45 	movzbl 0x4509e0(%r9),%ecx
  42d54c:	00 
  42d54d:	88 4a ff             	mov    %cl,-0x1(%rdx)
  42d550:	48 8b 0b             	mov    (%rbx),%rcx
  42d553:	48 8b 0c 31          	mov    (%rcx,%rsi,1),%rcx
  42d557:	49 89 c9             	mov    %rcx,%r9
  42d55a:	45 31 db             	xor    %r11d,%r11d
  42d55d:	49 c1 e9 28          	shr    $0x28,%r9
  42d561:	41 0f b6 f9          	movzbl %r9b,%edi
  42d565:	41 09 fa             	or     %edi,%r10d
  42d568:	74 2d                	je     42d597 <BN_bn2hex+0x137>
  42d56a:	c1 ff 04             	sar    $0x4,%edi
  42d56d:	41 83 e1 0f          	and    $0xf,%r9d
  42d571:	48 83 c2 02          	add    $0x2,%rdx
  42d575:	48 63 ff             	movslq %edi,%rdi
  42d578:	41 b3 01             	mov    $0x1,%r11b
  42d57b:	0f b6 8f e0 09 45 00 	movzbl 0x4509e0(%rdi),%ecx
  42d582:	88 4a fe             	mov    %cl,-0x2(%rdx)
  42d585:	41 0f b6 89 e0 09 45 	movzbl 0x4509e0(%r9),%ecx
  42d58c:	00 
  42d58d:	88 4a ff             	mov    %cl,-0x1(%rdx)
  42d590:	48 8b 0b             	mov    (%rbx),%rcx
  42d593:	48 8b 0c 31          	mov    (%rcx,%rsi,1),%rcx
  42d597:	49 89 c9             	mov    %rcx,%r9
  42d59a:	45 31 d2             	xor    %r10d,%r10d
  42d59d:	49 c1 e9 20          	shr    $0x20,%r9
  42d5a1:	41 0f b6 f9          	movzbl %r9b,%edi
  42d5a5:	41 09 fb             	or     %edi,%r11d
  42d5a8:	74 2d                	je     42d5d7 <BN_bn2hex+0x177>
  42d5aa:	c1 ff 04             	sar    $0x4,%edi
  42d5ad:	41 83 e1 0f          	and    $0xf,%r9d
  42d5b1:	48 83 c2 02          	add    $0x2,%rdx
  42d5b5:	48 63 ff             	movslq %edi,%rdi
  42d5b8:	41 b2 01             	mov    $0x1,%r10b
  42d5bb:	0f b6 8f e0 09 45 00 	movzbl 0x4509e0(%rdi),%ecx
  42d5c2:	88 4a fe             	mov    %cl,-0x2(%rdx)
  42d5c5:	41 0f b6 89 e0 09 45 	movzbl 0x4509e0(%r9),%ecx
  42d5cc:	00 
  42d5cd:	88 4a ff             	mov    %cl,-0x1(%rdx)
  42d5d0:	48 8b 0b             	mov    (%rbx),%rcx
  42d5d3:	48 8b 0c 31          	mov    (%rcx,%rsi,1),%rcx
  42d5d7:	49 89 c9             	mov    %rcx,%r9
  42d5da:	45 31 db             	xor    %r11d,%r11d
  42d5dd:	49 c1 e9 18          	shr    $0x18,%r9
  42d5e1:	41 0f b6 f9          	movzbl %r9b,%edi
  42d5e5:	41 09 fa             	or     %edi,%r10d
  42d5e8:	74 2d                	je     42d617 <BN_bn2hex+0x1b7>
  42d5ea:	c1 ff 04             	sar    $0x4,%edi
  42d5ed:	41 83 e1 0f          	and    $0xf,%r9d
  42d5f1:	48 83 c2 02          	add    $0x2,%rdx
  42d5f5:	48 63 ff             	movslq %edi,%rdi
  42d5f8:	41 b3 01             	mov    $0x1,%r11b
  42d5fb:	0f b6 8f e0 09 45 00 	movzbl 0x4509e0(%rdi),%ecx
  42d602:	88 4a fe             	mov    %cl,-0x2(%rdx)
  42d605:	41 0f b6 89 e0 09 45 	movzbl 0x4509e0(%r9),%ecx
  42d60c:	00 
  42d60d:	88 4a ff             	mov    %cl,-0x1(%rdx)
  42d610:	48 8b 0b             	mov    (%rbx),%rcx
  42d613:	48 8b 0c 31          	mov    (%rcx,%rsi,1),%rcx
  42d617:	49 89 c9             	mov    %rcx,%r9
  42d61a:	45 31 d2             	xor    %r10d,%r10d
  42d61d:	49 c1 e9 10          	shr    $0x10,%r9
  42d621:	41 0f b6 f9          	movzbl %r9b,%edi
  42d625:	41 09 fb             	or     %edi,%r11d
  42d628:	74 2d                	je     42d657 <BN_bn2hex+0x1f7>
  42d62a:	c1 ff 04             	sar    $0x4,%edi
  42d62d:	41 83 e1 0f          	and    $0xf,%r9d
  42d631:	48 83 c2 02          	add    $0x2,%rdx
  42d635:	48 63 ff             	movslq %edi,%rdi
  42d638:	41 b2 01             	mov    $0x1,%r10b
  42d63b:	0f b6 8f e0 09 45 00 	movzbl 0x4509e0(%rdi),%ecx
  42d642:	88 4a fe             	mov    %cl,-0x2(%rdx)
  42d645:	41 0f b6 89 e0 09 45 	movzbl 0x4509e0(%r9),%ecx
  42d64c:	00 
  42d64d:	88 4a ff             	mov    %cl,-0x1(%rdx)
  42d650:	48 8b 0b             	mov    (%rbx),%rcx
  42d653:	48 8b 0c 31          	mov    (%rcx,%rsi,1),%rcx
  42d657:	49 89 c9             	mov    %rcx,%r9
  42d65a:	45 31 db             	xor    %r11d,%r11d
  42d65d:	49 c1 e9 08          	shr    $0x8,%r9
  42d661:	41 0f b6 f9          	movzbl %r9b,%edi
  42d665:	41 09 fa             	or     %edi,%r10d
  42d668:	74 2d                	je     42d697 <BN_bn2hex+0x237>
  42d66a:	c1 ff 04             	sar    $0x4,%edi
  42d66d:	41 83 e1 0f          	and    $0xf,%r9d
  42d671:	48 83 c2 02          	add    $0x2,%rdx
  42d675:	48 63 ff             	movslq %edi,%rdi
  42d678:	41 b3 01             	mov    $0x1,%r11b
  42d67b:	0f b6 8f e0 09 45 00 	movzbl 0x4509e0(%rdi),%ecx
  42d682:	88 4a fe             	mov    %cl,-0x2(%rdx)
  42d685:	41 0f b6 89 e0 09 45 	movzbl 0x4509e0(%r9),%ecx
  42d68c:	00 
  42d68d:	88 4a ff             	mov    %cl,-0x1(%rdx)
  42d690:	48 8b 0b             	mov    (%rbx),%rcx
  42d693:	48 8b 0c 31          	mov    (%rcx,%rsi,1),%rcx
  42d697:	0f b6 f9             	movzbl %cl,%edi
  42d69a:	45 31 d2             	xor    %r10d,%r10d
  42d69d:	41 09 fb             	or     %edi,%r11d
  42d6a0:	74 25                	je     42d6c7 <BN_bn2hex+0x267>
  42d6a2:	c1 ff 04             	sar    $0x4,%edi
  42d6a5:	83 e1 0f             	and    $0xf,%ecx
  42d6a8:	48 83 c2 02          	add    $0x2,%rdx
  42d6ac:	48 63 ff             	movslq %edi,%rdi
  42d6af:	0f b6 89 e0 09 45 00 	movzbl 0x4509e0(%rcx),%ecx
  42d6b6:	41 b2 01             	mov    $0x1,%r10b
  42d6b9:	0f b6 bf e0 09 45 00 	movzbl 0x4509e0(%rdi),%edi
  42d6c0:	88 4a ff             	mov    %cl,-0x1(%rdx)
  42d6c3:	40 88 7a fe          	mov    %dil,-0x2(%rdx)
  42d6c7:	48 83 ee 08          	sub    $0x8,%rsi
  42d6cb:	4c 39 c6             	cmp    %r8,%rsi
  42d6ce:	0f 85 fc fd ff ff    	jne    42d4d0 <BN_bn2hex+0x70>
  42d6d4:	c6 02 00             	movb   $0x0,(%rdx)
  42d6d7:	48 83 c4 10          	add    $0x10,%rsp
  42d6db:	5b                   	pop    %rbx
  42d6dc:	c3                   	retq   
  42d6dd:	0f 1f 00             	nopl   (%rax)
  42d6e0:	c6 02 30             	movb   $0x30,(%rdx)
  42d6e3:	48 83 c2 01          	add    $0x1,%rdx
  42d6e7:	8b 4b 08             	mov    0x8(%rbx),%ecx
  42d6ea:	e9 b6 fd ff ff       	jmpq   42d4a5 <BN_bn2hex+0x45>
  42d6ef:	41 b8 4d 00 00 00    	mov    $0x4d,%r8d
  42d6f5:	b9 c0 09 45 00       	mov    $0x4509c0,%ecx
  42d6fa:	ba 41 00 00 00       	mov    $0x41,%edx
  42d6ff:	be 69 00 00 00       	mov    $0x69,%esi
  42d704:	bf 03 00 00 00       	mov    $0x3,%edi
  42d709:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  42d70e:	e8 3d ac ff ff       	callq  428350 <ERR_put_error>
  42d713:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  42d718:	eb bd                	jmp    42d6d7 <BN_bn2hex+0x277>
  42d71a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000042d720 <BN_bn2dec>:
  42d720:	41 57                	push   %r15
  42d722:	41 56                	push   %r14
  42d724:	41 55                	push   %r13
  42d726:	41 54                	push   %r12
  42d728:	55                   	push   %rbp
  42d729:	53                   	push   %rbx
  42d72a:	48 89 fb             	mov    %rdi,%rbx
  42d72d:	bd 67 66 66 66       	mov    $0x66666667,%ebp
  42d732:	48 83 ec 18          	sub    $0x18,%rsp
  42d736:	e8 45 ed ff ff       	callq  42c480 <BN_num_bits>
  42d73b:	8d 34 40             	lea    (%rax,%rax,2),%esi
  42d73e:	b9 d3 4d 62 10       	mov    $0x10624dd3,%ecx
  42d743:	89 f0                	mov    %esi,%eax
  42d745:	89 f7                	mov    %esi,%edi
  42d747:	f7 ed                	imul   %ebp
  42d749:	89 f0                	mov    %esi,%eax
  42d74b:	c1 ff 1f             	sar    $0x1f,%edi
  42d74e:	be c0 09 45 00       	mov    $0x4509c0,%esi
  42d753:	c1 fa 02             	sar    $0x2,%edx
  42d756:	89 d5                	mov    %edx,%ebp
  42d758:	f7 e9                	imul   %ecx
  42d75a:	29 fd                	sub    %edi,%ebp
  42d75c:	c1 fa 06             	sar    $0x6,%edx
  42d75f:	29 fa                	sub    %edi,%edx
  42d761:	01 d5                	add    %edx,%ebp
  42d763:	ba f3 1a ca 6b       	mov    $0x6bca1af3,%edx
  42d768:	8d 4d 02             	lea    0x2(%rbp),%ecx
  42d76b:	83 c5 05             	add    $0x5,%ebp
  42d76e:	89 c8                	mov    %ecx,%eax
  42d770:	c1 f9 1f             	sar    $0x1f,%ecx
  42d773:	f7 ea                	imul   %edx
  42d775:	c1 fa 03             	sar    $0x3,%edx
  42d778:	29 ca                	sub    %ecx,%edx
  42d77a:	8d 3c d5 08 00 00 00 	lea    0x8(,%rdx,8),%edi
  42d781:	ba 76 00 00 00       	mov    $0x76,%edx
  42d786:	e8 75 7c ff ff       	callq  425400 <CRYPTO_malloc>
  42d78b:	ba 77 00 00 00       	mov    $0x77,%edx
  42d790:	49 89 c6             	mov    %rax,%r14
  42d793:	be c0 09 45 00       	mov    $0x4509c0,%esi
  42d798:	89 ef                	mov    %ebp,%edi
  42d79a:	e8 61 7c ff ff       	callq  425400 <CRYPTO_malloc>
  42d79f:	4d 85 f6             	test   %r14,%r14
  42d7a2:	49 89 c5             	mov    %rax,%r13
  42d7a5:	74 41                	je     42d7e8 <BN_bn2dec+0xc8>
  42d7a7:	48 85 c0             	test   %rax,%rax
  42d7aa:	74 3c                	je     42d7e8 <BN_bn2dec+0xc8>
  42d7ac:	48 89 df             	mov    %rbx,%rdi
  42d7af:	e8 9c ef ff ff       	callq  42c750 <BN_dup>
  42d7b4:	48 85 c0             	test   %rax,%rax
  42d7b7:	49 89 c4             	mov    %rax,%r12
  42d7ba:	0f 84 58 01 00 00    	je     42d918 <BN_bn2dec+0x1f8>
  42d7c0:	8b 78 08             	mov    0x8(%rax),%edi
  42d7c3:	85 ff                	test   %edi,%edi
  42d7c5:	75 6f                	jne    42d836 <BN_bn2dec+0x116>
  42d7c7:	41 c6 45 00 30       	movb   $0x30,0x0(%r13)
  42d7cc:	41 c6 45 01 00       	movb   $0x0,0x1(%r13)
  42d7d1:	4c 89 f7             	mov    %r14,%rdi
  42d7d4:	e8 87 7f ff ff       	callq  425760 <CRYPTO_free>
  42d7d9:	4c 89 e7             	mov    %r12,%rdi
  42d7dc:	e8 4f ee ff ff       	callq  42c630 <BN_free>
  42d7e1:	eb 37                	jmp    42d81a <BN_bn2dec+0xfa>
  42d7e3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42d7e8:	41 b8 7a 00 00 00    	mov    $0x7a,%r8d
  42d7ee:	b9 c0 09 45 00       	mov    $0x4509c0,%ecx
  42d7f3:	ba 41 00 00 00       	mov    $0x41,%edx
  42d7f8:	be 68 00 00 00       	mov    $0x68,%esi
  42d7fd:	bf 03 00 00 00       	mov    $0x3,%edi
  42d802:	e8 49 ab ff ff       	callq  428350 <ERR_put_error>
  42d807:	4d 85 f6             	test   %r14,%r14
  42d80a:	75 20                	jne    42d82c <BN_bn2dec+0x10c>
  42d80c:	4d 85 ed             	test   %r13,%r13
  42d80f:	0f 95 c0             	setne  %al
  42d812:	84 c0                	test   %al,%al
  42d814:	0f 85 06 01 00 00    	jne    42d920 <BN_bn2dec+0x200>
  42d81a:	48 83 c4 18          	add    $0x18,%rsp
  42d81e:	4c 89 e8             	mov    %r13,%rax
  42d821:	5b                   	pop    %rbx
  42d822:	5d                   	pop    %rbp
  42d823:	41 5c                	pop    %r12
  42d825:	41 5d                	pop    %r13
  42d827:	41 5e                	pop    %r14
  42d829:	41 5f                	pop    %r15
  42d82b:	c3                   	retq   
  42d82c:	4c 89 f7             	mov    %r14,%rdi
  42d82f:	e8 2c 7f ff ff       	callq  425760 <CRYPTO_free>
  42d834:	eb d6                	jmp    42d80c <BN_bn2dec+0xec>
  42d836:	8b 70 10             	mov    0x10(%rax),%esi
  42d839:	85 f6                	test   %esi,%esi
  42d83b:	0f 85 aa 00 00 00    	jne    42d8eb <BN_bn2dec+0x1cb>
  42d841:	4c 89 eb             	mov    %r13,%rbx
  42d844:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
  42d84b:	00 00 
  42d84d:	4d 89 f7             	mov    %r14,%r15
  42d850:	48 be 00 00 e8 89 04 	movabs $0x8ac7230489e80000,%rsi
  42d857:	23 c7 8a 
  42d85a:	4c 89 e7             	mov    %r12,%rdi
  42d85d:	49 83 c7 08          	add    $0x8,%r15
  42d861:	e8 ca 0e 00 00       	callq  42e730 <BN_div_word>
  42d866:	41 8b 54 24 08       	mov    0x8(%r12),%edx
  42d86b:	49 89 47 f8          	mov    %rax,-0x8(%r15)
  42d86f:	85 d2                	test   %edx,%edx
  42d871:	75 dd                	jne    42d850 <BN_bn2dec+0x130>
  42d873:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  42d878:	48 63 ed             	movslq %ebp,%rbp
  42d87b:	48 89 c1             	mov    %rax,%rcx
  42d87e:	ba aa e8 43 00       	mov    $0x43e8aa,%edx
  42d883:	31 c0                	xor    %eax,%eax
  42d885:	48 89 df             	mov    %rbx,%rdi
  42d888:	49 83 ef 08          	sub    $0x8,%r15
  42d88c:	48 01 ee             	add    %rbp,%rsi
  42d88f:	e8 5c 6c 00 00       	callq  4344f0 <BIO_snprintf>
  42d894:	80 3b 00             	cmpb   $0x0,(%rbx)
  42d897:	74 17                	je     42d8b0 <BN_bn2dec+0x190>
  42d899:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  42d8a0:	48 83 c3 01          	add    $0x1,%rbx
  42d8a4:	80 3b 00             	cmpb   $0x0,(%rbx)
  42d8a7:	75 f7                	jne    42d8a0 <BN_bn2dec+0x180>
  42d8a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  42d8b0:	4d 39 fe             	cmp    %r15,%r14
  42d8b3:	0f 84 18 ff ff ff    	je     42d7d1 <BN_bn2dec+0xb1>
  42d8b9:	49 83 ef 08          	sub    $0x8,%r15
  42d8bd:	4c 89 ee             	mov    %r13,%rsi
  42d8c0:	49 8b 0f             	mov    (%r15),%rcx
  42d8c3:	48 29 de             	sub    %rbx,%rsi
  42d8c6:	31 c0                	xor    %eax,%eax
  42d8c8:	ba cb 09 45 00       	mov    $0x4509cb,%edx
  42d8cd:	48 01 ee             	add    %rbp,%rsi
  42d8d0:	48 89 df             	mov    %rbx,%rdi
  42d8d3:	e8 18 6c 00 00       	callq  4344f0 <BIO_snprintf>
  42d8d8:	80 3b 00             	cmpb   $0x0,(%rbx)
  42d8db:	74 d3                	je     42d8b0 <BN_bn2dec+0x190>
  42d8dd:	0f 1f 00             	nopl   (%rax)
  42d8e0:	48 83 c3 01          	add    $0x1,%rbx
  42d8e4:	80 3b 00             	cmpb   $0x0,(%rbx)
  42d8e7:	75 f7                	jne    42d8e0 <BN_bn2dec+0x1c0>
  42d8e9:	eb c5                	jmp    42d8b0 <BN_bn2dec+0x190>
  42d8eb:	41 c6 45 00 2d       	movb   $0x2d,0x0(%r13)
  42d8f0:	41 8b 4c 24 08       	mov    0x8(%r12),%ecx
  42d8f5:	49 8d 5d 01          	lea    0x1(%r13),%rbx
  42d8f9:	4c 89 e8             	mov    %r13,%rax
  42d8fc:	48 29 d8             	sub    %rbx,%rax
  42d8ff:	85 c9                	test   %ecx,%ecx
  42d901:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  42d906:	0f 85 41 ff ff ff    	jne    42d84d <BN_bn2dec+0x12d>
  42d90c:	49 8b 46 f8          	mov    -0x8(%r14),%rax
  42d910:	4d 89 f7             	mov    %r14,%r15
  42d913:	e9 5b ff ff ff       	jmpq   42d873 <BN_bn2dec+0x153>
  42d918:	4c 89 f7             	mov    %r14,%rdi
  42d91b:	e8 40 7e ff ff       	callq  425760 <CRYPTO_free>
  42d920:	4c 89 ef             	mov    %r13,%rdi
  42d923:	45 31 ed             	xor    %r13d,%r13d
  42d926:	e8 35 7e ff ff       	callq  425760 <CRYPTO_free>
  42d92b:	e9 ea fe ff ff       	jmpq   42d81a <BN_bn2dec+0xfa>

000000000042d930 <BN_hex2bn>:
  42d930:	41 57                	push   %r15
  42d932:	41 56                	push   %r14
  42d934:	41 55                	push   %r13
  42d936:	41 54                	push   %r12
  42d938:	49 89 f5             	mov    %rsi,%r13
  42d93b:	55                   	push   %rbp
  42d93c:	53                   	push   %rbx
  42d93d:	48 83 ec 18          	sub    $0x18,%rsp
  42d941:	48 85 f6             	test   %rsi,%rsi
  42d944:	0f 84 8e 01 00 00    	je     42dad8 <BN_hex2bn+0x1a8>
  42d94a:	0f b6 06             	movzbl (%rsi),%eax
  42d94d:	84 c0                	test   %al,%al
  42d94f:	0f 84 83 01 00 00    	je     42dad8 <BN_hex2bn+0x1a8>
  42d955:	31 ed                	xor    %ebp,%ebp
  42d957:	3c 2d                	cmp    $0x2d,%al
  42d959:	49 89 ff             	mov    %rdi,%r15
  42d95c:	0f 84 a9 01 00 00    	je     42db0b <BN_hex2bn+0x1db>
  42d962:	e8 a9 94 fd ff       	callq  406e10 <__ctype_b_loc@plt>
  42d967:	48 8b 08             	mov    (%rax),%rcx
  42d96a:	31 c0                	xor    %eax,%eax
  42d96c:	0f 1f 40 00          	nopl   0x0(%rax)
  42d970:	41 0f b6 54 05 00    	movzbl 0x0(%r13,%rax,1),%edx
  42d976:	41 89 c4             	mov    %eax,%r12d
  42d979:	48 83 c0 01          	add    $0x1,%rax
  42d97d:	f6 44 51 01 10       	testb  $0x10,0x1(%rcx,%rdx,2)
  42d982:	75 ec                	jne    42d970 <BN_hex2bn+0x40>
  42d984:	4d 85 ff             	test   %r15,%r15
  42d987:	44 89 64 24 04       	mov    %r12d,0x4(%rsp)
  42d98c:	42 8d 5c 25 00       	lea    0x0(%rbp,%r12,1),%ebx
  42d991:	0f 84 80 01 00 00    	je     42db17 <BN_hex2bn+0x1e7>
  42d997:	4d 8b 37             	mov    (%r15),%r14
  42d99a:	4d 85 f6             	test   %r14,%r14
  42d99d:	0f 84 78 01 00 00    	je     42db1b <BN_hex2bn+0x1eb>
  42d9a3:	31 f6                	xor    %esi,%esi
  42d9a5:	4c 89 f7             	mov    %r14,%rdi
  42d9a8:	e8 73 f2 ff ff       	callq  42cc20 <BN_set_word>
  42d9ad:	42 8d 34 a5 3f 00 00 	lea    0x3f(,%r12,4),%esi
  42d9b4:	00 
  42d9b5:	c1 fe 06             	sar    $0x6,%esi
  42d9b8:	41 3b 76 0c          	cmp    0xc(%r14),%esi
  42d9bc:	0f 8f f2 00 00 00    	jg     42dab4 <BN_hex2bn+0x184>
  42d9c2:	45 85 e4             	test   %r12d,%r12d
  42d9c5:	0f 84 63 01 00 00    	je     42db2e <BN_hex2bn+0x1fe>
  42d9cb:	49 8b 06             	mov    (%r14),%rax
  42d9ce:	41 bb 10 00 00 00    	mov    $0x10,%r11d
  42d9d4:	48 89 c7             	mov    %rax,%rdi
  42d9d7:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  42d9dc:	49 63 c4             	movslq %r12d,%rax
  42d9df:	90                   	nop
  42d9e0:	41 83 fc 10          	cmp    $0x10,%r12d
  42d9e4:	44 89 da             	mov    %r11d,%edx
  42d9e7:	49 89 c2             	mov    %rax,%r10
  42d9ea:	41 0f 4e d4          	cmovle %r12d,%edx
  42d9ee:	48 89 c6             	mov    %rax,%rsi
  42d9f1:	45 31 c0             	xor    %r8d,%r8d
  42d9f4:	48 63 ca             	movslq %edx,%rcx
  42d9f7:	83 ea 01             	sub    $0x1,%edx
  42d9fa:	49 29 ca             	sub    %rcx,%r10
  42d9fd:	48 29 ce             	sub    %rcx,%rsi
  42da00:	4d 8d 4c 12 01       	lea    0x1(%r10,%rdx,1),%r9
  42da05:	4c 01 ee             	add    %r13,%rsi
  42da08:	4d 01 e9             	add    %r13,%r9
  42da0b:	eb 16                	jmp    42da23 <BN_hex2bn+0xf3>
  42da0d:	0f 1f 00             	nopl   (%rax)
  42da10:	48 63 c9             	movslq %ecx,%rcx
  42da13:	49 c1 e0 04          	shl    $0x4,%r8
  42da17:	48 83 c6 01          	add    $0x1,%rsi
  42da1b:	49 09 c8             	or     %rcx,%r8
  42da1e:	4c 39 ce             	cmp    %r9,%rsi
  42da21:	74 2d                	je     42da50 <BN_hex2bn+0x120>
  42da23:	0f be 16             	movsbl (%rsi),%edx
  42da26:	8d 4a d0             	lea    -0x30(%rdx),%ecx
  42da29:	83 f9 09             	cmp    $0x9,%ecx
  42da2c:	76 e2                	jbe    42da10 <BN_hex2bn+0xe0>
  42da2e:	8d 4a 9f             	lea    -0x61(%rdx),%ecx
  42da31:	83 f9 05             	cmp    $0x5,%ecx
  42da34:	0f 87 b6 00 00 00    	ja     42daf0 <BN_hex2bn+0x1c0>
  42da3a:	83 ea 57             	sub    $0x57,%edx
  42da3d:	49 c1 e0 04          	shl    $0x4,%r8
  42da41:	48 83 c6 01          	add    $0x1,%rsi
  42da45:	48 63 ca             	movslq %edx,%rcx
  42da48:	49 09 c8             	or     %rcx,%r8
  42da4b:	4c 39 ce             	cmp    %r9,%rsi
  42da4e:	75 d3                	jne    42da23 <BN_hex2bn+0xf3>
  42da50:	41 83 ec 10          	sub    $0x10,%r12d
  42da54:	4c 89 07             	mov    %r8,(%rdi)
  42da57:	48 83 e8 10          	sub    $0x10,%rax
  42da5b:	48 83 c7 08          	add    $0x8,%rdi
  42da5f:	45 85 e4             	test   %r12d,%r12d
  42da62:	0f 8f 78 ff ff ff    	jg     42d9e0 <BN_hex2bn+0xb0>
  42da68:	8b 44 24 04          	mov    0x4(%rsp),%eax
  42da6c:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  42da71:	83 e8 01             	sub    $0x1,%eax
  42da74:	c1 e8 04             	shr    $0x4,%eax
  42da77:	83 c0 01             	add    $0x1,%eax
  42da7a:	48 63 d0             	movslq %eax,%rdx
  42da7d:	48 8d 54 d7 f8       	lea    -0x8(%rdi,%rdx,8),%rdx
  42da82:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  42da88:	48 83 ea 08          	sub    $0x8,%rdx
  42da8c:	48 83 7a 08 00       	cmpq   $0x0,0x8(%rdx)
  42da91:	75 05                	jne    42da98 <BN_hex2bn+0x168>
  42da93:	83 e8 01             	sub    $0x1,%eax
  42da96:	75 f0                	jne    42da88 <BN_hex2bn+0x158>
  42da98:	41 89 46 08          	mov    %eax,0x8(%r14)
  42da9c:	41 89 6e 10          	mov    %ebp,0x10(%r14)
  42daa0:	4d 89 37             	mov    %r14,(%r15)
  42daa3:	48 83 c4 18          	add    $0x18,%rsp
  42daa7:	89 d8                	mov    %ebx,%eax
  42daa9:	5b                   	pop    %rbx
  42daaa:	5d                   	pop    %rbp
  42daab:	41 5c                	pop    %r12
  42daad:	41 5d                	pop    %r13
  42daaf:	41 5e                	pop    %r14
  42dab1:	41 5f                	pop    %r15
  42dab3:	c3                   	retq   
  42dab4:	4c 89 f7             	mov    %r14,%rdi
  42dab7:	e8 44 ec ff ff       	callq  42c700 <bn_expand2>
  42dabc:	48 85 c0             	test   %rax,%rax
  42dabf:	0f 85 fd fe ff ff    	jne    42d9c2 <BN_hex2bn+0x92>
  42dac5:	49 83 3f 00          	cmpq   $0x0,(%r15)
  42dac9:	75 0d                	jne    42dad8 <BN_hex2bn+0x1a8>
  42dacb:	4c 89 f7             	mov    %r14,%rdi
  42dace:	e8 5d eb ff ff       	callq  42c630 <BN_free>
  42dad3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42dad8:	31 c0                	xor    %eax,%eax
  42dada:	48 83 c4 18          	add    $0x18,%rsp
  42dade:	5b                   	pop    %rbx
  42dadf:	5d                   	pop    %rbp
  42dae0:	41 5c                	pop    %r12
  42dae2:	41 5d                	pop    %r13
  42dae4:	41 5e                	pop    %r14
  42dae6:	41 5f                	pop    %r15
  42dae8:	c3                   	retq   
  42dae9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  42daf0:	44 8d 52 bf          	lea    -0x41(%rdx),%r10d
  42daf4:	31 c9                	xor    %ecx,%ecx
  42daf6:	41 83 fa 05          	cmp    $0x5,%r10d
  42dafa:	0f 87 13 ff ff ff    	ja     42da13 <BN_hex2bn+0xe3>
  42db00:	83 ea 37             	sub    $0x37,%edx
  42db03:	48 63 ca             	movslq %edx,%rcx
  42db06:	e9 08 ff ff ff       	jmpq   42da13 <BN_hex2bn+0xe3>
  42db0b:	49 83 c5 01          	add    $0x1,%r13
  42db0f:	40 b5 01             	mov    $0x1,%bpl
  42db12:	e9 4b fe ff ff       	jmpq   42d962 <BN_hex2bn+0x32>
  42db17:	89 d8                	mov    %ebx,%eax
  42db19:	eb bf                	jmp    42dada <BN_hex2bn+0x1aa>
  42db1b:	e8 80 eb ff ff       	callq  42c6a0 <BN_new>
  42db20:	48 85 c0             	test   %rax,%rax
  42db23:	49 89 c6             	mov    %rax,%r14
  42db26:	0f 85 81 fe ff ff    	jne    42d9ad <BN_hex2bn+0x7d>
  42db2c:	eb aa                	jmp    42dad8 <BN_hex2bn+0x1a8>
  42db2e:	41 c7 46 08 00 00 00 	movl   $0x0,0x8(%r14)
  42db35:	00 
  42db36:	e9 61 ff ff ff       	jmpq   42da9c <BN_hex2bn+0x16c>
  42db3b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000042db40 <BN_dec2bn>:
  42db40:	41 57                	push   %r15
  42db42:	41 56                	push   %r14
  42db44:	41 55                	push   %r13
  42db46:	41 54                	push   %r12
  42db48:	49 89 f5             	mov    %rsi,%r13
  42db4b:	55                   	push   %rbp
  42db4c:	53                   	push   %rbx
  42db4d:	48 83 ec 08          	sub    $0x8,%rsp
  42db51:	48 85 f6             	test   %rsi,%rsi
  42db54:	0f 84 66 01 00 00    	je     42dcc0 <BN_dec2bn+0x180>
  42db5a:	0f b6 06             	movzbl (%rsi),%eax
  42db5d:	84 c0                	test   %al,%al
  42db5f:	0f 84 5b 01 00 00    	je     42dcc0 <BN_dec2bn+0x180>
  42db65:	31 ed                	xor    %ebp,%ebp
  42db67:	3c 2d                	cmp    $0x2d,%al
  42db69:	48 89 fb             	mov    %rdi,%rbx
  42db6c:	0f 84 66 01 00 00    	je     42dcd8 <BN_dec2bn+0x198>
  42db72:	e8 99 92 fd ff       	callq  406e10 <__ctype_b_loc@plt>
  42db77:	48 8b 00             	mov    (%rax),%rax
  42db7a:	31 d2                	xor    %edx,%edx
  42db7c:	0f 1f 40 00          	nopl   0x0(%rax)
  42db80:	41 0f b6 4c 15 00    	movzbl 0x0(%r13,%rdx,1),%ecx
  42db86:	41 89 d6             	mov    %edx,%r14d
  42db89:	48 83 c2 01          	add    $0x1,%rdx
  42db8d:	f6 44 48 01 08       	testb  $0x8,0x1(%rax,%rcx,2)
  42db92:	75 ec                	jne    42db80 <BN_dec2bn+0x40>
  42db94:	48 85 db             	test   %rbx,%rbx
  42db97:	46 8d 64 35 00       	lea    0x0(%rbp,%r14,1),%r12d
  42db9c:	0f 84 42 01 00 00    	je     42dce4 <BN_dec2bn+0x1a4>
  42dba2:	4c 8b 3b             	mov    (%rbx),%r15
  42dba5:	4d 85 ff             	test   %r15,%r15
  42dba8:	0f 84 42 01 00 00    	je     42dcf0 <BN_dec2bn+0x1b0>
  42dbae:	31 f6                	xor    %esi,%esi
  42dbb0:	4c 89 ff             	mov    %r15,%rdi
  42dbb3:	e8 68 f0 ff ff       	callq  42cc20 <BN_set_word>
  42dbb8:	42 8d 34 b5 3f 00 00 	lea    0x3f(,%r14,4),%esi
  42dbbf:	00 
  42dbc0:	c1 fe 06             	sar    $0x6,%esi
  42dbc3:	41 3b 77 0c          	cmp    0xc(%r15),%esi
  42dbc7:	0f 8f d3 00 00 00    	jg     42dca0 <BN_dec2bn+0x160>
  42dbcd:	44 89 f0             	mov    %r14d,%eax
  42dbd0:	ba f3 1a ca 6b       	mov    $0x6bca1af3,%edx
  42dbd5:	f7 ea                	imul   %edx
  42dbd7:	44 89 f0             	mov    %r14d,%eax
  42dbda:	c1 f8 1f             	sar    $0x1f,%eax
  42dbdd:	c1 fa 03             	sar    $0x3,%edx
  42dbe0:	29 c2                	sub    %eax,%edx
  42dbe2:	8d 04 d2             	lea    (%rdx,%rdx,8),%eax
  42dbe5:	8d 04 42             	lea    (%rdx,%rax,2),%eax
  42dbe8:	44 29 f0             	sub    %r14d,%eax
  42dbeb:	8d 48 13             	lea    0x13(%rax),%ecx
  42dbee:	b8 00 00 00 00       	mov    $0x0,%eax
  42dbf3:	83 f9 13             	cmp    $0x13,%ecx
  42dbf6:	0f 44 c8             	cmove  %eax,%ecx
  42dbf9:	45 31 f6             	xor    %r14d,%r14d
  42dbfc:	0f 1f 40 00          	nopl   0x0(%rax)
  42dc00:	41 0f be 55 00       	movsbl 0x0(%r13),%edx
  42dc05:	84 d2                	test   %dl,%dl
  42dc07:	74 47                	je     42dc50 <BN_dec2bn+0x110>
  42dc09:	83 ea 30             	sub    $0x30,%edx
  42dc0c:	4b 8d 04 b6          	lea    (%r14,%r14,4),%rax
  42dc10:	83 c1 01             	add    $0x1,%ecx
  42dc13:	48 63 d2             	movslq %edx,%rdx
  42dc16:	49 83 c5 01          	add    $0x1,%r13
  42dc1a:	83 f9 13             	cmp    $0x13,%ecx
  42dc1d:	4c 8d 34 42          	lea    (%rdx,%rax,2),%r14
  42dc21:	75 dd                	jne    42dc00 <BN_dec2bn+0xc0>
  42dc23:	48 be 00 00 e8 89 04 	movabs $0x8ac7230489e80000,%rsi
  42dc2a:	23 c7 8a 
  42dc2d:	4c 89 ff             	mov    %r15,%rdi
  42dc30:	e8 7b 0e 00 00       	callq  42eab0 <BN_mul_word>
  42dc35:	4c 89 f6             	mov    %r14,%rsi
  42dc38:	4c 89 ff             	mov    %r15,%rdi
  42dc3b:	45 31 f6             	xor    %r14d,%r14d
  42dc3e:	e8 ed 0b 00 00       	callq  42e830 <BN_add_word>
  42dc43:	41 0f be 55 00       	movsbl 0x0(%r13),%edx
  42dc48:	31 c9                	xor    %ecx,%ecx
  42dc4a:	84 d2                	test   %dl,%dl
  42dc4c:	75 bb                	jne    42dc09 <BN_dec2bn+0xc9>
  42dc4e:	66 90                	xchg   %ax,%ax
  42dc50:	41 8b 47 08          	mov    0x8(%r15),%eax
  42dc54:	41 89 6f 10          	mov    %ebp,0x10(%r15)
  42dc58:	85 c0                	test   %eax,%eax
  42dc5a:	7e 28                	jle    42dc84 <BN_dec2bn+0x144>
  42dc5c:	49 8b 0f             	mov    (%r15),%rcx
  42dc5f:	48 63 d0             	movslq %eax,%rdx
  42dc62:	48 8d 54 d1 f8       	lea    -0x8(%rcx,%rdx,8),%rdx
  42dc67:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  42dc6e:	00 00 
  42dc70:	48 83 ea 08          	sub    $0x8,%rdx
  42dc74:	48 83 7a 08 00       	cmpq   $0x0,0x8(%rdx)
  42dc79:	75 05                	jne    42dc80 <BN_dec2bn+0x140>
  42dc7b:	83 e8 01             	sub    $0x1,%eax
  42dc7e:	75 f0                	jne    42dc70 <BN_dec2bn+0x130>
  42dc80:	41 89 47 08          	mov    %eax,0x8(%r15)
  42dc84:	4c 89 3b             	mov    %r15,(%rbx)
  42dc87:	48 83 c4 08          	add    $0x8,%rsp
  42dc8b:	44 89 e0             	mov    %r12d,%eax
  42dc8e:	5b                   	pop    %rbx
  42dc8f:	5d                   	pop    %rbp
  42dc90:	41 5c                	pop    %r12
  42dc92:	41 5d                	pop    %r13
  42dc94:	41 5e                	pop    %r14
  42dc96:	41 5f                	pop    %r15
  42dc98:	c3                   	retq   
  42dc99:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  42dca0:	4c 89 ff             	mov    %r15,%rdi
  42dca3:	e8 58 ea ff ff       	callq  42c700 <bn_expand2>
  42dca8:	48 85 c0             	test   %rax,%rax
  42dcab:	0f 85 1c ff ff ff    	jne    42dbcd <BN_dec2bn+0x8d>
  42dcb1:	48 83 3b 00          	cmpq   $0x0,(%rbx)
  42dcb5:	75 09                	jne    42dcc0 <BN_dec2bn+0x180>
  42dcb7:	4c 89 ff             	mov    %r15,%rdi
  42dcba:	e8 71 e9 ff ff       	callq  42c630 <BN_free>
  42dcbf:	90                   	nop
  42dcc0:	31 c0                	xor    %eax,%eax
  42dcc2:	48 83 c4 08          	add    $0x8,%rsp
  42dcc6:	5b                   	pop    %rbx
  42dcc7:	5d                   	pop    %rbp
  42dcc8:	41 5c                	pop    %r12
  42dcca:	41 5d                	pop    %r13
  42dccc:	41 5e                	pop    %r14
  42dcce:	41 5f                	pop    %r15
  42dcd0:	c3                   	retq   
  42dcd1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  42dcd8:	49 83 c5 01          	add    $0x1,%r13
  42dcdc:	40 b5 01             	mov    $0x1,%bpl
  42dcdf:	e9 8e fe ff ff       	jmpq   42db72 <BN_dec2bn+0x32>
  42dce4:	44 89 e0             	mov    %r12d,%eax
  42dce7:	eb d9                	jmp    42dcc2 <BN_dec2bn+0x182>
  42dce9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  42dcf0:	e8 ab e9 ff ff       	callq  42c6a0 <BN_new>
  42dcf5:	48 85 c0             	test   %rax,%rax
  42dcf8:	49 89 c7             	mov    %rax,%r15
  42dcfb:	0f 85 b7 fe ff ff    	jne    42dbb8 <BN_dec2bn+0x78>
  42dd01:	eb bd                	jmp    42dcc0 <BN_dec2bn+0x180>
  42dd03:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  42dd0a:	84 00 00 00 00 00 

000000000042dd10 <BN_asc2bn>:
  42dd10:	55                   	push   %rbp
  42dd11:	53                   	push   %rbx
  42dd12:	48 89 fd             	mov    %rdi,%rbp
  42dd15:	48 89 f3             	mov    %rsi,%rbx
  42dd18:	48 83 ec 08          	sub    $0x8,%rsp
  42dd1c:	0f b6 06             	movzbl (%rsi),%eax
  42dd1f:	3c 2d                	cmp    $0x2d,%al
  42dd21:	74 65                	je     42dd88 <BN_asc2bn+0x78>
  42dd23:	3c 30                	cmp    $0x30,%al
  42dd25:	74 31                	je     42dd58 <BN_asc2bn+0x48>
  42dd27:	48 89 ef             	mov    %rbp,%rdi
  42dd2a:	e8 11 fe ff ff       	callq  42db40 <BN_dec2bn>
  42dd2f:	85 c0                	test   %eax,%eax
  42dd31:	74 45                	je     42dd78 <BN_asc2bn+0x68>
  42dd33:	80 3b 2d             	cmpb   $0x2d,(%rbx)
  42dd36:	74 10                	je     42dd48 <BN_asc2bn+0x38>
  42dd38:	48 83 c4 08          	add    $0x8,%rsp
  42dd3c:	b8 01 00 00 00       	mov    $0x1,%eax
  42dd41:	5b                   	pop    %rbx
  42dd42:	5d                   	pop    %rbp
  42dd43:	c3                   	retq   
  42dd44:	0f 1f 40 00          	nopl   0x0(%rax)
  42dd48:	48 8b 45 00          	mov    0x0(%rbp),%rax
  42dd4c:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%rax)
  42dd53:	eb e3                	jmp    42dd38 <BN_asc2bn+0x28>
  42dd55:	0f 1f 00             	nopl   (%rax)
  42dd58:	0f b6 46 01          	movzbl 0x1(%rsi),%eax
  42dd5c:	83 e0 df             	and    $0xffffffdf,%eax
  42dd5f:	3c 58                	cmp    $0x58,%al
  42dd61:	75 c4                	jne    42dd27 <BN_asc2bn+0x17>
  42dd63:	48 83 c6 02          	add    $0x2,%rsi
  42dd67:	48 89 ef             	mov    %rbp,%rdi
  42dd6a:	e8 c1 fb ff ff       	callq  42d930 <BN_hex2bn>
  42dd6f:	85 c0                	test   %eax,%eax
  42dd71:	75 c0                	jne    42dd33 <BN_asc2bn+0x23>
  42dd73:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42dd78:	48 83 c4 08          	add    $0x8,%rsp
  42dd7c:	31 c0                	xor    %eax,%eax
  42dd7e:	5b                   	pop    %rbx
  42dd7f:	5d                   	pop    %rbp
  42dd80:	c3                   	retq   
  42dd81:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  42dd88:	48 8d 73 01          	lea    0x1(%rbx),%rsi
  42dd8c:	0f b6 43 01          	movzbl 0x1(%rbx),%eax
  42dd90:	eb 91                	jmp    42dd23 <BN_asc2bn+0x13>
  42dd92:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  42dd99:	1f 84 00 00 00 00 00 

000000000042dda0 <BN_print_fp>:
  42dda0:	41 56                	push   %r14
  42dda2:	41 55                	push   %r13
  42dda4:	49 89 f6             	mov    %rsi,%r14
  42dda7:	41 54                	push   %r12
  42dda9:	55                   	push   %rbp
  42ddaa:	48 89 fd             	mov    %rdi,%rbp
  42ddad:	53                   	push   %rbx
  42ddae:	e8 2d 3b 00 00       	callq  4318e0 <BIO_s_file>
  42ddb3:	48 89 c7             	mov    %rax,%rdi
  42ddb6:	e8 75 1f 00 00       	callq  42fd30 <BIO_new>
  42ddbb:	48 89 c3             	mov    %rax,%rbx
  42ddbe:	31 c0                	xor    %eax,%eax
  42ddc0:	48 85 db             	test   %rbx,%rbx
  42ddc3:	0f 84 a3 00 00 00    	je     42de6c <BN_print_fp+0xcc>
  42ddc9:	31 d2                	xor    %edx,%edx
  42ddcb:	48 89 e9             	mov    %rbp,%rcx
  42ddce:	be 6a 00 00 00       	mov    $0x6a,%esi
  42ddd3:	48 89 df             	mov    %rbx,%rdi
  42ddd6:	e8 15 2a 00 00       	callq  4307f0 <BIO_ctrl>
  42dddb:	41 8b 46 10          	mov    0x10(%r14),%eax
  42dddf:	85 c0                	test   %eax,%eax
  42dde1:	0f 85 a1 00 00 00    	jne    42de88 <BN_print_fp+0xe8>
  42dde7:	41 8b 46 08          	mov    0x8(%r14),%eax
  42ddeb:	85 c0                	test   %eax,%eax
  42dded:	0f 84 b1 00 00 00    	je     42dea4 <BN_print_fp+0x104>
  42ddf3:	83 e8 01             	sub    $0x1,%eax
  42ddf6:	0f 88 85 00 00 00    	js     42de81 <BN_print_fp+0xe1>
  42ddfc:	48 63 d0             	movslq %eax,%rdx
  42ddff:	89 c0                	mov    %eax,%eax
  42de01:	4c 8d 2c d5 00 00 00 	lea    0x0(,%rdx,8),%r13
  42de08:	00 
  42de09:	48 29 c2             	sub    %rax,%rdx
  42de0c:	31 c0                	xor    %eax,%eax
  42de0e:	48 8d 2c d5 f8 ff ff 	lea    -0x8(,%rdx,8),%rbp
  42de15:	ff 
  42de16:	41 bc 3c 00 00 00    	mov    $0x3c,%r12d
  42de1c:	eb 0c                	jmp    42de2a <BN_print_fp+0x8a>
  42de1e:	66 90                	xchg   %ax,%ax
  42de20:	41 83 ec 04          	sub    $0x4,%r12d
  42de24:	41 83 fc fc          	cmp    $0xfffffffc,%r12d
  42de28:	74 4e                	je     42de78 <BN_print_fp+0xd8>
  42de2a:	49 8b 16             	mov    (%r14),%rdx
  42de2d:	44 89 e1             	mov    %r12d,%ecx
  42de30:	4a 8b 14 2a          	mov    (%rdx,%r13,1),%rdx
  42de34:	48 d3 ea             	shr    %cl,%rdx
  42de37:	83 e2 0f             	and    $0xf,%edx
  42de3a:	09 d0                	or     %edx,%eax
  42de3c:	89 c1                	mov    %eax,%ecx
  42de3e:	31 c0                	xor    %eax,%eax
  42de40:	85 c9                	test   %ecx,%ecx
  42de42:	74 dc                	je     42de20 <BN_print_fp+0x80>
  42de44:	48 63 d2             	movslq %edx,%rdx
  42de47:	48 89 df             	mov    %rbx,%rdi
  42de4a:	48 8d b2 e0 09 45 00 	lea    0x4509e0(%rdx),%rsi
  42de51:	ba 01 00 00 00       	mov    $0x1,%edx
  42de56:	e8 65 23 00 00       	callq  4301c0 <BIO_write>
  42de5b:	83 f8 01             	cmp    $0x1,%eax
  42de5e:	74 c0                	je     42de20 <BN_print_fp+0x80>
  42de60:	31 ed                	xor    %ebp,%ebp
  42de62:	48 89 df             	mov    %rbx,%rdi
  42de65:	e8 a6 20 00 00       	callq  42ff10 <BIO_free>
  42de6a:	89 e8                	mov    %ebp,%eax
  42de6c:	5b                   	pop    %rbx
  42de6d:	5d                   	pop    %rbp
  42de6e:	41 5c                	pop    %r12
  42de70:	41 5d                	pop    %r13
  42de72:	41 5e                	pop    %r14
  42de74:	c3                   	retq   
  42de75:	0f 1f 00             	nopl   (%rax)
  42de78:	49 83 ed 08          	sub    $0x8,%r13
  42de7c:	49 39 ed             	cmp    %rbp,%r13
  42de7f:	75 95                	jne    42de16 <BN_print_fp+0x76>
  42de81:	bd 01 00 00 00       	mov    $0x1,%ebp
  42de86:	eb da                	jmp    42de62 <BN_print_fp+0xc2>
  42de88:	ba 01 00 00 00       	mov    $0x1,%edx
  42de8d:	be d2 09 45 00       	mov    $0x4509d2,%esi
  42de92:	48 89 df             	mov    %rbx,%rdi
  42de95:	e8 26 23 00 00       	callq  4301c0 <BIO_write>
  42de9a:	83 f8 01             	cmp    $0x1,%eax
  42de9d:	75 c1                	jne    42de60 <BN_print_fp+0xc0>
  42de9f:	e9 43 ff ff ff       	jmpq   42dde7 <BN_print_fp+0x47>
  42dea4:	ba 01 00 00 00       	mov    $0x1,%edx
  42dea9:	be 6a fd 43 00       	mov    $0x43fd6a,%esi
  42deae:	48 89 df             	mov    %rbx,%rdi
  42deb1:	e8 0a 23 00 00       	callq  4301c0 <BIO_write>
  42deb6:	83 f8 01             	cmp    $0x1,%eax
  42deb9:	75 a5                	jne    42de60 <BN_print_fp+0xc0>
  42debb:	41 8b 46 08          	mov    0x8(%r14),%eax
  42debf:	e9 2f ff ff ff       	jmpq   42ddf3 <BN_print_fp+0x53>
  42dec4:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
  42decb:	00 00 00 00 00 

000000000042ded0 <BN_print>:
  42ded0:	41 56                	push   %r14
  42ded2:	41 55                	push   %r13
  42ded4:	49 89 f6             	mov    %rsi,%r14
  42ded7:	41 54                	push   %r12
  42ded9:	55                   	push   %rbp
  42deda:	53                   	push   %rbx
  42dedb:	8b 46 10             	mov    0x10(%rsi),%eax
  42dede:	48 89 fb             	mov    %rdi,%rbx
  42dee1:	85 c0                	test   %eax,%eax
  42dee3:	0f 85 99 00 00 00    	jne    42df82 <BN_print+0xb2>
  42dee9:	41 8b 46 08          	mov    0x8(%r14),%eax
  42deed:	85 c0                	test   %eax,%eax
  42deef:	0f 84 b0 00 00 00    	je     42dfa5 <BN_print+0xd5>
  42def5:	83 e8 01             	sub    $0x1,%eax
  42def8:	78 7a                	js     42df74 <BN_print+0xa4>
  42defa:	48 63 d0             	movslq %eax,%rdx
  42defd:	89 c0                	mov    %eax,%eax
  42deff:	4c 8d 2c d5 00 00 00 	lea    0x0(,%rdx,8),%r13
  42df06:	00 
  42df07:	48 29 c2             	sub    %rax,%rdx
  42df0a:	48 8d 2c d5 f8 ff ff 	lea    -0x8(,%rdx,8),%rbp
  42df11:	ff 
  42df12:	31 d2                	xor    %edx,%edx
  42df14:	41 bc 3c 00 00 00    	mov    $0x3c,%r12d
  42df1a:	eb 0e                	jmp    42df2a <BN_print+0x5a>
  42df1c:	0f 1f 40 00          	nopl   0x0(%rax)
  42df20:	41 83 ec 04          	sub    $0x4,%r12d
  42df24:	41 83 fc fc          	cmp    $0xfffffffc,%r12d
  42df28:	74 41                	je     42df6b <BN_print+0x9b>
  42df2a:	49 8b 06             	mov    (%r14),%rax
  42df2d:	44 89 e1             	mov    %r12d,%ecx
  42df30:	4a 8b 04 28          	mov    (%rax,%r13,1),%rax
  42df34:	48 d3 e8             	shr    %cl,%rax
  42df37:	83 e0 0f             	and    $0xf,%eax
  42df3a:	09 c2                	or     %eax,%edx
  42df3c:	89 d1                	mov    %edx,%ecx
  42df3e:	31 d2                	xor    %edx,%edx
  42df40:	85 c9                	test   %ecx,%ecx
  42df42:	74 dc                	je     42df20 <BN_print+0x50>
  42df44:	48 98                	cltq   
  42df46:	b2 01                	mov    $0x1,%dl
  42df48:	48 89 df             	mov    %rbx,%rdi
  42df4b:	48 8d b0 e0 09 45 00 	lea    0x4509e0(%rax),%rsi
  42df52:	e8 69 22 00 00       	callq  4301c0 <BIO_write>
  42df57:	83 f8 01             	cmp    $0x1,%eax
  42df5a:	75 3e                	jne    42df9a <BN_print+0xca>
  42df5c:	41 83 ec 04          	sub    $0x4,%r12d
  42df60:	ba 01 00 00 00       	mov    $0x1,%edx
  42df65:	41 83 fc fc          	cmp    $0xfffffffc,%r12d
  42df69:	75 bf                	jne    42df2a <BN_print+0x5a>
  42df6b:	49 83 ed 08          	sub    $0x8,%r13
  42df6f:	49 39 ed             	cmp    %rbp,%r13
  42df72:	75 a0                	jne    42df14 <BN_print+0x44>
  42df74:	5b                   	pop    %rbx
  42df75:	b8 01 00 00 00       	mov    $0x1,%eax
  42df7a:	5d                   	pop    %rbp
  42df7b:	41 5c                	pop    %r12
  42df7d:	41 5d                	pop    %r13
  42df7f:	41 5e                	pop    %r14
  42df81:	c3                   	retq   
  42df82:	ba 01 00 00 00       	mov    $0x1,%edx
  42df87:	be d2 09 45 00       	mov    $0x4509d2,%esi
  42df8c:	e8 2f 22 00 00       	callq  4301c0 <BIO_write>
  42df91:	83 f8 01             	cmp    $0x1,%eax
  42df94:	0f 84 4f ff ff ff    	je     42dee9 <BN_print+0x19>
  42df9a:	5b                   	pop    %rbx
  42df9b:	31 c0                	xor    %eax,%eax
  42df9d:	5d                   	pop    %rbp
  42df9e:	41 5c                	pop    %r12
  42dfa0:	41 5d                	pop    %r13
  42dfa2:	41 5e                	pop    %r14
  42dfa4:	c3                   	retq   
  42dfa5:	ba 01 00 00 00       	mov    $0x1,%edx
  42dfaa:	be 6a fd 43 00       	mov    $0x43fd6a,%esi
  42dfaf:	48 89 df             	mov    %rbx,%rdi
  42dfb2:	e8 09 22 00 00       	callq  4301c0 <BIO_write>
  42dfb7:	83 f8 01             	cmp    $0x1,%eax
  42dfba:	75 de                	jne    42df9a <BN_print+0xca>
  42dfbc:	41 8b 46 08          	mov    0x8(%r14),%eax
  42dfc0:	e9 30 ff ff ff       	jmpq   42def5 <BN_print+0x25>
  42dfc5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  42dfcc:	00 00 00 00 

000000000042dfd0 <BN_options>:
  42dfd0:	8b 05 ba c9 22 00    	mov    0x22c9ba(%rip),%eax        # 65a990 <init.6513>
  42dfd6:	85 c0                	test   %eax,%eax
  42dfd8:	74 06                	je     42dfe0 <BN_options+0x10>
  42dfda:	b8 80 a9 65 00       	mov    $0x65a980,%eax
  42dfdf:	c3                   	retq   
  42dfe0:	48 83 ec 08          	sub    $0x8,%rsp
  42dfe4:	41 b8 40 00 00 00    	mov    $0x40,%r8d
  42dfea:	b9 40 00 00 00       	mov    $0x40,%ecx
  42dfef:	ba d4 09 45 00       	mov    $0x4509d4,%edx
  42dff4:	be 10 00 00 00       	mov    $0x10,%esi
  42dff9:	bf 80 a9 65 00       	mov    $0x65a980,%edi
  42dffe:	31 c0                	xor    %eax,%eax
  42e000:	c7 05 86 c9 22 00 01 	movl   $0x1,0x22c986(%rip)        # 65a990 <init.6513>
  42e007:	00 00 00 
  42e00a:	e8 e1 64 00 00       	callq  4344f0 <BIO_snprintf>
  42e00f:	b8 80 a9 65 00       	mov    $0x65a980,%eax
  42e014:	48 83 c4 08          	add    $0x8,%rsp
  42e018:	c3                   	retq   
  42e019:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000042e020 <BN_lshift1>:
  42e020:	55                   	push   %rbp
  42e021:	53                   	push   %rbx
  42e022:	48 89 f5             	mov    %rsi,%rbp
  42e025:	48 89 fb             	mov    %rdi,%rbx
  42e028:	48 83 ec 08          	sub    $0x8,%rsp
  42e02c:	48 39 f7             	cmp    %rsi,%rdi
  42e02f:	0f 84 8b 00 00 00    	je     42e0c0 <BN_lshift1+0xa0>
  42e035:	8b 46 10             	mov    0x10(%rsi),%eax
  42e038:	8b 76 08             	mov    0x8(%rsi),%esi
  42e03b:	3b 77 0c             	cmp    0xc(%rdi),%esi
  42e03e:	89 47 10             	mov    %eax,0x10(%rdi)
  42e041:	7d 65                	jge    42e0a8 <BN_lshift1+0x88>
  42e043:	89 73 08             	mov    %esi,0x8(%rbx)
  42e046:	44 8b 45 08          	mov    0x8(%rbp),%r8d
  42e04a:	31 c0                	xor    %eax,%eax
  42e04c:	31 f6                	xor    %esi,%esi
  42e04e:	4c 8b 55 00          	mov    0x0(%rbp),%r10
  42e052:	4c 8b 0b             	mov    (%rbx),%r9
  42e055:	45 85 c0             	test   %r8d,%r8d
  42e058:	7e 3e                	jle    42e098 <BN_lshift1+0x78>
  42e05a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  42e060:	49 8b 0c c2          	mov    (%r10,%rax,8),%rcx
  42e064:	48 8d 14 09          	lea    (%rcx,%rcx,1),%rdx
  42e068:	48 09 f2             	or     %rsi,%rdx
  42e06b:	48 89 ce             	mov    %rcx,%rsi
  42e06e:	49 89 14 c1          	mov    %rdx,(%r9,%rax,8)
  42e072:	48 83 c0 01          	add    $0x1,%rax
  42e076:	48 c1 ee 3f          	shr    $0x3f,%rsi
  42e07a:	41 39 c0             	cmp    %eax,%r8d
  42e07d:	7f e1                	jg     42e060 <BN_lshift1+0x40>
  42e07f:	41 83 e8 01          	sub    $0x1,%r8d
  42e083:	48 85 f6             	test   %rsi,%rsi
  42e086:	4b 8d 44 c1 08       	lea    0x8(%r9,%r8,8),%rax
  42e08b:	74 0b                	je     42e098 <BN_lshift1+0x78>
  42e08d:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
  42e094:	83 43 08 01          	addl   $0x1,0x8(%rbx)
  42e098:	48 83 c4 08          	add    $0x8,%rsp
  42e09c:	b8 01 00 00 00       	mov    $0x1,%eax
  42e0a1:	5b                   	pop    %rbx
  42e0a2:	5d                   	pop    %rbp
  42e0a3:	c3                   	retq   
  42e0a4:	0f 1f 40 00          	nopl   0x0(%rax)
  42e0a8:	83 c6 01             	add    $0x1,%esi
  42e0ab:	e8 50 e6 ff ff       	callq  42c700 <bn_expand2>
  42e0b0:	48 85 c0             	test   %rax,%rax
  42e0b3:	75 2c                	jne    42e0e1 <BN_lshift1+0xc1>
  42e0b5:	31 c0                	xor    %eax,%eax
  42e0b7:	48 83 c4 08          	add    $0x8,%rsp
  42e0bb:	5b                   	pop    %rbx
  42e0bc:	5d                   	pop    %rbp
  42e0bd:	c3                   	retq   
  42e0be:	66 90                	xchg   %ax,%ax
  42e0c0:	8b 47 08             	mov    0x8(%rdi),%eax
  42e0c3:	3b 47 0c             	cmp    0xc(%rdi),%eax
  42e0c6:	0f 8c 7a ff ff ff    	jl     42e046 <BN_lshift1+0x26>
  42e0cc:	8d 70 01             	lea    0x1(%rax),%esi
  42e0cf:	e8 2c e6 ff ff       	callq  42c700 <bn_expand2>
  42e0d4:	48 85 c0             	test   %rax,%rax
  42e0d7:	0f 85 69 ff ff ff    	jne    42e046 <BN_lshift1+0x26>
  42e0dd:	31 c0                	xor    %eax,%eax
  42e0df:	eb d6                	jmp    42e0b7 <BN_lshift1+0x97>
  42e0e1:	8b 75 08             	mov    0x8(%rbp),%esi
  42e0e4:	e9 5a ff ff ff       	jmpq   42e043 <BN_lshift1+0x23>
  42e0e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000042e0f0 <BN_rshift1>:
  42e0f0:	41 56                	push   %r14
  42e0f2:	41 55                	push   %r13
  42e0f4:	49 89 f5             	mov    %rsi,%r13
  42e0f7:	41 54                	push   %r12
  42e0f9:	55                   	push   %rbp
  42e0fa:	48 89 fd             	mov    %rdi,%rbp
  42e0fd:	53                   	push   %rbx
  42e0fe:	8b 5e 08             	mov    0x8(%rsi),%ebx
  42e101:	85 db                	test   %ebx,%ebx
  42e103:	0f 84 b7 00 00 00    	je     42e1c0 <BN_rshift1+0xd0>
  42e109:	4c 8b 36             	mov    (%rsi),%r14
  42e10c:	48 63 c3             	movslq %ebx,%rax
  42e10f:	41 89 dc             	mov    %ebx,%r12d
  42e112:	49 83 7c c6 f8 01    	cmpq   $0x1,-0x8(%r14,%rax,8)
  42e118:	0f 94 c0             	sete   %al
  42e11b:	0f b6 c0             	movzbl %al,%eax
  42e11e:	41 29 c4             	sub    %eax,%r12d
  42e121:	48 39 fe             	cmp    %rdi,%rsi
  42e124:	74 11                	je     42e137 <BN_rshift1+0x47>
  42e126:	44 3b 67 0c          	cmp    0xc(%rdi),%r12d
  42e12a:	0f 8f a8 00 00 00    	jg     42e1d8 <BN_rshift1+0xe8>
  42e130:	41 8b 45 10          	mov    0x10(%r13),%eax
  42e134:	89 45 10             	mov    %eax,0x10(%rbp)
  42e137:	8d 4b ff             	lea    -0x1(%rbx),%ecx
  42e13a:	48 8b 75 00          	mov    0x0(%rbp),%rsi
  42e13e:	48 63 f9             	movslq %ecx,%rdi
  42e141:	48 8d 04 fd 00 00 00 	lea    0x0(,%rdi,8),%rax
  42e148:	00 
  42e149:	4d 8d 14 06          	lea    (%r14,%rax,1),%r10
  42e14d:	49 8b 12             	mov    (%r10),%rdx
  42e150:	49 89 d1             	mov    %rdx,%r9
  42e153:	49 c1 e1 3f          	shl    $0x3f,%r9
  42e157:	48 d1 ea             	shr    %rdx
  42e15a:	74 04                	je     42e160 <BN_rshift1+0x70>
  42e15c:	48 89 14 fe          	mov    %rdx,(%rsi,%rdi,8)
  42e160:	85 c9                	test   %ecx,%ecx
  42e162:	7e 4a                	jle    42e1ae <BN_rshift1+0xbe>
  42e164:	83 eb 02             	sub    $0x2,%ebx
  42e167:	48 01 c6             	add    %rax,%rsi
  42e16a:	49 bb 00 00 00 00 00 	movabs $0x8000000000000000,%r11
  42e171:	00 00 80 
  42e174:	48 f7 d3             	not    %rbx
  42e177:	31 c0                	xor    %eax,%eax
  42e179:	31 ff                	xor    %edi,%edi
  42e17b:	4c 8d 04 dd 00 00 00 	lea    0x0(,%rbx,8),%r8
  42e182:	00 
  42e183:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42e188:	49 8b 4c 02 f8       	mov    -0x8(%r10,%rax,1),%rcx
  42e18d:	48 89 ca             	mov    %rcx,%rdx
  42e190:	48 d1 ea             	shr    %rdx
  42e193:	4c 09 ca             	or     %r9,%rdx
  42e196:	83 e1 01             	and    $0x1,%ecx
  42e199:	49 89 f9             	mov    %rdi,%r9
  42e19c:	4d 0f 45 cb          	cmovne %r11,%r9
  42e1a0:	48 89 54 06 f8       	mov    %rdx,-0x8(%rsi,%rax,1)
  42e1a5:	48 83 e8 08          	sub    $0x8,%rax
  42e1a9:	4c 39 c0             	cmp    %r8,%rax
  42e1ac:	75 da                	jne    42e188 <BN_rshift1+0x98>
  42e1ae:	44 89 65 08          	mov    %r12d,0x8(%rbp)
  42e1b2:	b8 01 00 00 00       	mov    $0x1,%eax
  42e1b7:	5b                   	pop    %rbx
  42e1b8:	5d                   	pop    %rbp
  42e1b9:	41 5c                	pop    %r12
  42e1bb:	41 5d                	pop    %r13
  42e1bd:	41 5e                	pop    %r14
  42e1bf:	c3                   	retq   
  42e1c0:	31 f6                	xor    %esi,%esi
  42e1c2:	e8 59 ea ff ff       	callq  42cc20 <BN_set_word>
  42e1c7:	5b                   	pop    %rbx
  42e1c8:	b8 01 00 00 00       	mov    $0x1,%eax
  42e1cd:	5d                   	pop    %rbp
  42e1ce:	41 5c                	pop    %r12
  42e1d0:	41 5d                	pop    %r13
  42e1d2:	41 5e                	pop    %r14
  42e1d4:	c3                   	retq   
  42e1d5:	0f 1f 00             	nopl   (%rax)
  42e1d8:	44 89 e6             	mov    %r12d,%esi
  42e1db:	e8 20 e5 ff ff       	callq  42c700 <bn_expand2>
  42e1e0:	48 85 c0             	test   %rax,%rax
  42e1e3:	0f 85 47 ff ff ff    	jne    42e130 <BN_rshift1+0x40>
  42e1e9:	5b                   	pop    %rbx
  42e1ea:	31 c0                	xor    %eax,%eax
  42e1ec:	5d                   	pop    %rbp
  42e1ed:	41 5c                	pop    %r12
  42e1ef:	41 5d                	pop    %r13
  42e1f1:	41 5e                	pop    %r14
  42e1f3:	c3                   	retq   
  42e1f4:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
  42e1fb:	00 00 00 00 00 

000000000042e200 <BN_lshift>:
  42e200:	41 57                	push   %r15
  42e202:	41 56                	push   %r14
  42e204:	41 55                	push   %r13
  42e206:	41 54                	push   %r12
  42e208:	49 89 f4             	mov    %rsi,%r12
  42e20b:	55                   	push   %rbp
  42e20c:	53                   	push   %rbx
  42e20d:	8d 5a 3f             	lea    0x3f(%rdx),%ebx
  42e210:	48 89 fd             	mov    %rdi,%rbp
  42e213:	48 83 ec 18          	sub    $0x18,%rsp
  42e217:	8b 46 10             	mov    0x10(%rsi),%eax
  42e21a:	85 d2                	test   %edx,%edx
  42e21c:	0f 49 da             	cmovns %edx,%ebx
  42e21f:	c1 fb 06             	sar    $0x6,%ebx
  42e222:	89 47 10             	mov    %eax,0x10(%rdi)
  42e225:	48 63 46 08          	movslq 0x8(%rsi),%rax
  42e229:	8d 34 18             	lea    (%rax,%rbx,1),%esi
  42e22c:	3b 77 0c             	cmp    0xc(%rdi),%esi
  42e22f:	0f 8d cb 01 00 00    	jge    42e400 <BN_lshift+0x200>
  42e235:	89 d1                	mov    %edx,%ecx
  42e237:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
  42e23b:	48 63 f6             	movslq %esi,%rsi
  42e23e:	c1 f9 1f             	sar    $0x1f,%ecx
  42e241:	4d 8b 04 24          	mov    (%r12),%r8
  42e245:	c1 e9 1a             	shr    $0x1a,%ecx
  42e248:	44 8d 0c 0a          	lea    (%rdx,%rcx,1),%r9d
  42e24c:	48 c7 04 f7 00 00 00 	movq   $0x0,(%rdi,%rsi,8)
  42e253:	00 
  42e254:	41 83 e1 3f          	and    $0x3f,%r9d
  42e258:	41 29 c9             	sub    %ecx,%r9d
  42e25b:	0f 85 2f 01 00 00    	jne    42e390 <BN_lshift+0x190>
  42e261:	44 8d 68 ff          	lea    -0x1(%rax),%r13d
  42e265:	48 63 d3             	movslq %ebx,%rdx
  42e268:	45 85 ed             	test   %r13d,%r13d
  42e26b:	44 89 ee             	mov    %r13d,%esi
  42e26e:	0f 88 cb 00 00 00    	js     42e33f <BN_lshift+0x13f>
  42e274:	4c 63 d8             	movslq %eax,%r11
  42e277:	4d 8d 0c 13          	lea    (%r11,%rdx,1),%r9
  42e27b:	49 c1 e3 03          	shl    $0x3,%r11
  42e27f:	4d 8d 53 f0          	lea    -0x10(%r11),%r10
  42e283:	49 c1 e1 03          	shl    $0x3,%r9
  42e287:	4d 8d 71 f0          	lea    -0x10(%r9),%r14
  42e28b:	4b 8d 0c 10          	lea    (%r8,%r10,1),%rcx
  42e28f:	4e 8d 3c 37          	lea    (%rdi,%r14,1),%r15
  42e293:	4c 89 7c 24 08       	mov    %r15,0x8(%rsp)
  42e298:	4f 8d 3c 18          	lea    (%r8,%r11,1),%r15
  42e29c:	4c 39 7c 24 08       	cmp    %r15,0x8(%rsp)
  42e2a1:	41 0f 93 c7          	setae  %r15b
  42e2a5:	49 01 f9             	add    %rdi,%r9
  42e2a8:	4c 39 c9             	cmp    %r9,%rcx
  42e2ab:	41 0f 93 c1          	setae  %r9b
  42e2af:	45 08 cf             	or     %r9b,%r15b
  42e2b2:	0f 84 78 01 00 00    	je     42e430 <BN_lshift+0x230>
  42e2b8:	83 f8 18             	cmp    $0x18,%eax
  42e2bb:	0f 86 6f 01 00 00    	jbe    42e430 <BN_lshift+0x230>
  42e2c1:	83 e1 0f             	and    $0xf,%ecx
  42e2c4:	48 c1 e9 03          	shr    $0x3,%rcx
  42e2c8:	39 c8                	cmp    %ecx,%eax
  42e2ca:	0f 46 c8             	cmovbe %eax,%ecx
  42e2cd:	85 c9                	test   %ecx,%ecx
  42e2cf:	74 13                	je     42e2e4 <BN_lshift+0xe4>
  42e2d1:	4d 63 cd             	movslq %r13d,%r9
  42e2d4:	01 de                	add    %ebx,%esi
  42e2d6:	4f 8b 0c c8          	mov    (%r8,%r9,8),%r9
  42e2da:	48 63 f6             	movslq %esi,%rsi
  42e2dd:	4c 89 0c f7          	mov    %r9,(%rdi,%rsi,8)
  42e2e1:	8d 70 fe             	lea    -0x2(%rax),%esi
  42e2e4:	29 c8                	sub    %ecx,%eax
  42e2e6:	89 c9                	mov    %ecx,%ecx
  42e2e8:	45 31 ed             	xor    %r13d,%r13d
  42e2eb:	44 8d 48 fe          	lea    -0x2(%rax),%r9d
  42e2ef:	48 f7 d9             	neg    %rcx
  42e2f2:	48 c1 e1 03          	shl    $0x3,%rcx
  42e2f6:	41 d1 e9             	shr    %r9d
  42e2f9:	49 01 ca             	add    %rcx,%r10
  42e2fc:	49 01 ce             	add    %rcx,%r14
  42e2ff:	41 83 c1 01          	add    $0x1,%r9d
  42e303:	4d 01 c2             	add    %r8,%r10
  42e306:	49 01 fe             	add    %rdi,%r14
  42e309:	47 8d 1c 09          	lea    (%r9,%r9,1),%r11d
  42e30d:	31 c9                	xor    %ecx,%ecx
  42e30f:	66 41 0f 6f 04 0a    	movdqa (%r10,%rcx,1),%xmm0
  42e315:	41 83 c5 01          	add    $0x1,%r13d
  42e319:	41 0f 11 04 0e       	movups %xmm0,(%r14,%rcx,1)
  42e31e:	48 83 e9 10          	sub    $0x10,%rcx
  42e322:	45 39 cd             	cmp    %r9d,%r13d
  42e325:	72 e8                	jb     42e30f <BN_lshift+0x10f>
  42e327:	44 29 de             	sub    %r11d,%esi
  42e32a:	44 39 d8             	cmp    %r11d,%eax
  42e32d:	74 10                	je     42e33f <BN_lshift+0x13f>
  42e32f:	48 63 c6             	movslq %esi,%rax
  42e332:	01 de                	add    %ebx,%esi
  42e334:	49 8b 04 c0          	mov    (%r8,%rax,8),%rax
  42e338:	48 63 f6             	movslq %esi,%rsi
  42e33b:	48 89 04 f7          	mov    %rax,(%rdi,%rsi,8)
  42e33f:	48 c1 e2 03          	shl    $0x3,%rdx
  42e343:	31 f6                	xor    %esi,%esi
  42e345:	e8 36 89 fd ff       	callq  406c80 <memset@plt>
  42e34a:	41 03 5c 24 08       	add    0x8(%r12),%ebx
  42e34f:	83 c3 01             	add    $0x1,%ebx
  42e352:	85 db                	test   %ebx,%ebx
  42e354:	89 5d 08             	mov    %ebx,0x8(%rbp)
  42e357:	7e 22                	jle    42e37b <BN_lshift+0x17b>
  42e359:	48 8b 55 00          	mov    0x0(%rbp),%rdx
  42e35d:	48 63 c3             	movslq %ebx,%rax
  42e360:	48 8d 44 c2 f8       	lea    -0x8(%rdx,%rax,8),%rax
  42e365:	0f 1f 00             	nopl   (%rax)
  42e368:	48 83 e8 08          	sub    $0x8,%rax
  42e36c:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
  42e371:	75 05                	jne    42e378 <BN_lshift+0x178>
  42e373:	83 eb 01             	sub    $0x1,%ebx
  42e376:	75 f0                	jne    42e368 <BN_lshift+0x168>
  42e378:	89 5d 08             	mov    %ebx,0x8(%rbp)
  42e37b:	48 83 c4 18          	add    $0x18,%rsp
  42e37f:	b8 01 00 00 00       	mov    $0x1,%eax
  42e384:	5b                   	pop    %rbx
  42e385:	5d                   	pop    %rbp
  42e386:	41 5c                	pop    %r12
  42e388:	41 5d                	pop    %r13
  42e38a:	41 5e                	pop    %r14
  42e38c:	41 5f                	pop    %r15
  42e38e:	c3                   	retq   
  42e38f:	90                   	nop
  42e390:	41 89 c2             	mov    %eax,%r10d
  42e393:	48 63 d3             	movslq %ebx,%rdx
  42e396:	41 83 ea 01          	sub    $0x1,%r10d
  42e39a:	78 a3                	js     42e33f <BN_lshift+0x13f>
  42e39c:	49 63 ca             	movslq %r10d,%rcx
  42e39f:	48 01 d0             	add    %rdx,%rax
  42e3a2:	41 be 40 00 00 00    	mov    $0x40,%r14d
  42e3a8:	4d 8d 1c c8          	lea    (%r8,%rcx,8),%r11
  42e3ac:	48 8d 4c 11 01       	lea    0x1(%rcx,%rdx,1),%rcx
  42e3b1:	48 8b 04 c7          	mov    (%rdi,%rax,8),%rax
  42e3b5:	45 29 ce             	sub    %r9d,%r14d
  42e3b8:	48 8d 34 cf          	lea    (%rdi,%rcx,8),%rsi
  42e3bc:	0f 1f 40 00          	nopl   0x0(%rax)
  42e3c0:	4d 8b 03             	mov    (%r11),%r8
  42e3c3:	44 89 f1             	mov    %r14d,%ecx
  42e3c6:	41 83 ea 01          	sub    $0x1,%r10d
  42e3ca:	49 83 eb 08          	sub    $0x8,%r11
  42e3ce:	48 83 ee 08          	sub    $0x8,%rsi
  42e3d2:	4d 89 c5             	mov    %r8,%r13
  42e3d5:	49 d3 ed             	shr    %cl,%r13
  42e3d8:	44 89 c9             	mov    %r9d,%ecx
  42e3db:	4c 09 e8             	or     %r13,%rax
  42e3de:	48 89 46 08          	mov    %rax,0x8(%rsi)
  42e3e2:	4c 89 c0             	mov    %r8,%rax
  42e3e5:	48 d3 e0             	shl    %cl,%rax
  42e3e8:	48 89 06             	mov    %rax,(%rsi)
  42e3eb:	41 83 fa ff          	cmp    $0xffffffff,%r10d
  42e3ef:	75 cf                	jne    42e3c0 <BN_lshift+0x1c0>
  42e3f1:	e9 49 ff ff ff       	jmpq   42e33f <BN_lshift+0x13f>
  42e3f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  42e3fd:	00 00 00 
  42e400:	83 c6 01             	add    $0x1,%esi
  42e403:	89 54 24 08          	mov    %edx,0x8(%rsp)
  42e407:	e8 f4 e2 ff ff       	callq  42c700 <bn_expand2>
  42e40c:	48 85 c0             	test   %rax,%rax
  42e40f:	8b 54 24 08          	mov    0x8(%rsp),%edx
  42e413:	75 51                	jne    42e466 <BN_lshift+0x266>
  42e415:	48 83 c4 18          	add    $0x18,%rsp
  42e419:	31 c0                	xor    %eax,%eax
  42e41b:	5b                   	pop    %rbx
  42e41c:	5d                   	pop    %rbp
  42e41d:	41 5c                	pop    %r12
  42e41f:	41 5d                	pop    %r13
  42e421:	41 5e                	pop    %r14
  42e423:	41 5f                	pop    %r15
  42e425:	c3                   	retq   
  42e426:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  42e42d:	00 00 00 
  42e430:	44 89 ee             	mov    %r13d,%esi
  42e433:	49 63 c5             	movslq %r13d,%rax
  42e436:	4f 8d 4c 18 f8       	lea    -0x8(%r8,%r11,1),%r9
  42e43b:	48 01 d0             	add    %rdx,%rax
  42e43e:	48 f7 d6             	not    %rsi
  42e441:	4c 8d 04 c7          	lea    (%rdi,%rax,8),%r8
  42e445:	48 c1 e6 03          	shl    $0x3,%rsi
  42e449:	31 c0                	xor    %eax,%eax
  42e44b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42e450:	49 8b 0c 01          	mov    (%r9,%rax,1),%rcx
  42e454:	49 89 0c 00          	mov    %rcx,(%r8,%rax,1)
  42e458:	48 83 e8 08          	sub    $0x8,%rax
  42e45c:	48 39 f0             	cmp    %rsi,%rax
  42e45f:	75 ef                	jne    42e450 <BN_lshift+0x250>
  42e461:	e9 d9 fe ff ff       	jmpq   42e33f <BN_lshift+0x13f>
  42e466:	49 63 44 24 08       	movslq 0x8(%r12),%rax
  42e46b:	8d 34 03             	lea    (%rbx,%rax,1),%esi
  42e46e:	e9 c2 fd ff ff       	jmpq   42e235 <BN_lshift+0x35>
  42e473:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  42e47a:	84 00 00 00 00 00 

000000000042e480 <BN_rshift>:
  42e480:	41 56                	push   %r14
  42e482:	41 55                	push   %r13
  42e484:	85 d2                	test   %edx,%edx
  42e486:	41 54                	push   %r12
  42e488:	55                   	push   %rbp
  42e489:	8d 6a 3f             	lea    0x3f(%rdx),%ebp
  42e48c:	53                   	push   %rbx
  42e48d:	8b 46 08             	mov    0x8(%rsi),%eax
  42e490:	49 89 fd             	mov    %rdi,%r13
  42e493:	0f 49 ea             	cmovns %edx,%ebp
  42e496:	49 89 f4             	mov    %rsi,%r12
  42e499:	89 d3                	mov    %edx,%ebx
  42e49b:	c1 fd 06             	sar    $0x6,%ebp
  42e49e:	39 c5                	cmp    %eax,%ebp
  42e4a0:	0f 8d 1a 01 00 00    	jge    42e5c0 <BN_rshift+0x140>
  42e4a6:	85 c0                	test   %eax,%eax
  42e4a8:	0f 84 12 01 00 00    	je     42e5c0 <BN_rshift+0x140>
  42e4ae:	48 89 f7             	mov    %rsi,%rdi
  42e4b1:	e8 ca df ff ff       	callq  42c480 <BN_num_bits>
  42e4b6:	29 d8                	sub    %ebx,%eax
  42e4b8:	44 8d 70 7e          	lea    0x7e(%rax),%r14d
  42e4bc:	83 c0 3f             	add    $0x3f,%eax
  42e4bf:	44 0f 49 f0          	cmovns %eax,%r14d
  42e4c3:	41 c1 fe 06          	sar    $0x6,%r14d
  42e4c7:	4d 39 e5             	cmp    %r12,%r13
  42e4ca:	0f 84 b0 01 00 00    	je     42e680 <BN_rshift+0x200>
  42e4d0:	45 3b 75 0c          	cmp    0xc(%r13),%r14d
  42e4d4:	41 8b 44 24 10       	mov    0x10(%r12),%eax
  42e4d9:	41 89 45 10          	mov    %eax,0x10(%r13)
  42e4dd:	0f 8f 6d 01 00 00    	jg     42e650 <BN_rshift+0x1d0>
  42e4e3:	89 d9                	mov    %ebx,%ecx
  42e4e5:	41 8b 44 24 08       	mov    0x8(%r12),%eax
  42e4ea:	49 8b 3c 24          	mov    (%r12),%rdi
  42e4ee:	c1 f9 1f             	sar    $0x1f,%ecx
  42e4f1:	48 63 f5             	movslq %ebp,%rsi
  42e4f4:	4d 8b 45 00          	mov    0x0(%r13),%r8
  42e4f8:	c1 e9 1a             	shr    $0x1a,%ecx
  42e4fb:	48 c1 e6 03          	shl    $0x3,%rsi
  42e4ff:	45 89 75 08          	mov    %r14d,0x8(%r13)
  42e503:	01 cb                	add    %ecx,%ebx
  42e505:	29 e8                	sub    %ebp,%eax
  42e507:	4c 8d 0c 37          	lea    (%rdi,%rsi,1),%r9
  42e50b:	83 e3 3f             	and    $0x3f,%ebx
  42e50e:	29 cb                	sub    %ecx,%ebx
  42e510:	0f 85 ca 00 00 00    	jne    42e5e0 <BN_rshift+0x160>
  42e516:	85 c0                	test   %eax,%eax
  42e518:	0f 84 1c 01 00 00    	je     42e63a <BN_rshift+0x1ba>
  42e51e:	48 8d 54 37 10       	lea    0x10(%rdi,%rsi,1),%rdx
  42e523:	49 39 d0             	cmp    %rdx,%r8
  42e526:	49 8d 50 10          	lea    0x10(%r8),%rdx
  42e52a:	0f 93 c1             	setae  %cl
  42e52d:	49 39 d1             	cmp    %rdx,%r9
  42e530:	0f 93 c2             	setae  %dl
  42e533:	08 d1                	or     %dl,%cl
  42e535:	0f 84 55 01 00 00    	je     42e690 <BN_rshift+0x210>
  42e53b:	83 f8 18             	cmp    $0x18,%eax
  42e53e:	0f 86 4c 01 00 00    	jbe    42e690 <BN_rshift+0x210>
  42e544:	4c 89 ca             	mov    %r9,%rdx
  42e547:	48 c1 e2 3c          	shl    $0x3c,%rdx
  42e54b:	48 c1 ea 3f          	shr    $0x3f,%rdx
  42e54f:	39 d0                	cmp    %edx,%eax
  42e551:	0f 46 d0             	cmovbe %eax,%edx
  42e554:	85 d2                	test   %edx,%edx
  42e556:	0f 84 14 01 00 00    	je     42e670 <BN_rshift+0x1f0>
  42e55c:	49 8b 09             	mov    (%r9),%rcx
  42e55f:	4d 8d 50 08          	lea    0x8(%r8),%r10
  42e563:	4d 8d 59 08          	lea    0x8(%r9),%r11
  42e567:	49 89 08             	mov    %rcx,(%r8)
  42e56a:	29 d0                	sub    %edx,%eax
  42e56c:	89 d2                	mov    %edx,%edx
  42e56e:	8d 48 fe             	lea    -0x2(%rax),%ecx
  42e571:	48 c1 e2 03          	shl    $0x3,%rdx
  42e575:	48 01 d6             	add    %rdx,%rsi
  42e578:	49 01 d0             	add    %rdx,%r8
  42e57b:	31 d2                	xor    %edx,%edx
  42e57d:	d1 e9                	shr    %ecx
  42e57f:	48 01 f7             	add    %rsi,%rdi
  42e582:	31 f6                	xor    %esi,%esi
  42e584:	83 c1 01             	add    $0x1,%ecx
  42e587:	44 8d 0c 09          	lea    (%rcx,%rcx,1),%r9d
  42e58b:	66 0f 6f 04 17       	movdqa (%rdi,%rdx,1),%xmm0
  42e590:	83 c6 01             	add    $0x1,%esi
  42e593:	41 0f 11 04 10       	movups %xmm0,(%r8,%rdx,1)
  42e598:	48 83 c2 10          	add    $0x10,%rdx
  42e59c:	39 ce                	cmp    %ecx,%esi
  42e59e:	72 eb                	jb     42e58b <BN_rshift+0x10b>
  42e5a0:	44 89 ca             	mov    %r9d,%edx
  42e5a3:	48 c1 e2 03          	shl    $0x3,%rdx
  42e5a7:	49 01 d2             	add    %rdx,%r10
  42e5aa:	49 01 d3             	add    %rdx,%r11
  42e5ad:	44 39 c8             	cmp    %r9d,%eax
  42e5b0:	0f 84 84 00 00 00    	je     42e63a <BN_rshift+0x1ba>
  42e5b6:	49 8b 03             	mov    (%r11),%rax
  42e5b9:	49 89 02             	mov    %rax,(%r10)
  42e5bc:	eb 7c                	jmp    42e63a <BN_rshift+0x1ba>
  42e5be:	66 90                	xchg   %ax,%ax
  42e5c0:	31 f6                	xor    %esi,%esi
  42e5c2:	4c 89 ef             	mov    %r13,%rdi
  42e5c5:	e8 56 e6 ff ff       	callq  42cc20 <BN_set_word>
  42e5ca:	b8 01 00 00 00       	mov    $0x1,%eax
  42e5cf:	5b                   	pop    %rbx
  42e5d0:	5d                   	pop    %rbp
  42e5d1:	41 5c                	pop    %r12
  42e5d3:	41 5d                	pop    %r13
  42e5d5:	41 5e                	pop    %r14
  42e5d7:	c3                   	retq   
  42e5d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  42e5df:	00 
  42e5e0:	83 f8 01             	cmp    $0x1,%eax
  42e5e3:	49 8b 39             	mov    (%r9),%rdi
  42e5e6:	74 45                	je     42e62d <BN_rshift+0x1ad>
  42e5e8:	44 8d 58 fe          	lea    -0x2(%rax),%r11d
  42e5ec:	41 ba 40 00 00 00    	mov    $0x40,%r10d
  42e5f2:	31 c0                	xor    %eax,%eax
  42e5f4:	41 29 da             	sub    %ebx,%r10d
  42e5f7:	4c 89 dd             	mov    %r11,%rbp
  42e5fa:	49 83 c3 01          	add    $0x1,%r11
  42e5fe:	66 90                	xchg   %ax,%ax
  42e600:	89 d9                	mov    %ebx,%ecx
  42e602:	48 d3 ef             	shr    %cl,%rdi
  42e605:	44 89 d1             	mov    %r10d,%ecx
  42e608:	48 89 fe             	mov    %rdi,%rsi
  42e60b:	49 8b 7c c1 08       	mov    0x8(%r9,%rax,8),%rdi
  42e610:	48 89 fa             	mov    %rdi,%rdx
  42e613:	48 d3 e2             	shl    %cl,%rdx
  42e616:	48 09 d6             	or     %rdx,%rsi
  42e619:	49 89 34 c0          	mov    %rsi,(%r8,%rax,8)
  42e61d:	48 83 c0 01          	add    $0x1,%rax
  42e621:	4c 39 d8             	cmp    %r11,%rax
  42e624:	75 da                	jne    42e600 <BN_rshift+0x180>
  42e626:	89 e8                	mov    %ebp,%eax
  42e628:	4d 8d 44 c0 08       	lea    0x8(%r8,%rax,8),%r8
  42e62d:	89 d9                	mov    %ebx,%ecx
  42e62f:	48 d3 ef             	shr    %cl,%rdi
  42e632:	48 85 ff             	test   %rdi,%rdi
  42e635:	74 03                	je     42e63a <BN_rshift+0x1ba>
  42e637:	49 89 38             	mov    %rdi,(%r8)
  42e63a:	5b                   	pop    %rbx
  42e63b:	b8 01 00 00 00       	mov    $0x1,%eax
  42e640:	5d                   	pop    %rbp
  42e641:	41 5c                	pop    %r12
  42e643:	41 5d                	pop    %r13
  42e645:	41 5e                	pop    %r14
  42e647:	c3                   	retq   
  42e648:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  42e64f:	00 
  42e650:	44 89 f6             	mov    %r14d,%esi
  42e653:	4c 89 ef             	mov    %r13,%rdi
  42e656:	e8 a5 e0 ff ff       	callq  42c700 <bn_expand2>
  42e65b:	48 85 c0             	test   %rax,%rax
  42e65e:	0f 85 7f fe ff ff    	jne    42e4e3 <BN_rshift+0x63>
  42e664:	31 c0                	xor    %eax,%eax
  42e666:	e9 64 ff ff ff       	jmpq   42e5cf <BN_rshift+0x14f>
  42e66b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42e670:	4d 89 cb             	mov    %r9,%r11
  42e673:	4d 89 c2             	mov    %r8,%r10
  42e676:	e9 ef fe ff ff       	jmpq   42e56a <BN_rshift+0xea>
  42e67b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42e680:	85 db                	test   %ebx,%ebx
  42e682:	0f 85 5b fe ff ff    	jne    42e4e3 <BN_rshift+0x63>
  42e688:	eb b0                	jmp    42e63a <BN_rshift+0x1ba>
  42e68a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  42e690:	83 e8 01             	sub    $0x1,%eax
  42e693:	31 d2                	xor    %edx,%edx
  42e695:	48 83 c0 01          	add    $0x1,%rax
  42e699:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  42e6a0:	49 8b 0c d1          	mov    (%r9,%rdx,8),%rcx
  42e6a4:	49 89 0c d0          	mov    %rcx,(%r8,%rdx,8)
  42e6a8:	48 83 c2 01          	add    $0x1,%rdx
  42e6ac:	48 39 c2             	cmp    %rax,%rdx
  42e6af:	75 ef                	jne    42e6a0 <BN_rshift+0x220>
  42e6b1:	eb 87                	jmp    42e63a <BN_rshift+0x1ba>
  42e6b3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  42e6ba:	00 00 00 
  42e6bd:	0f 1f 00             	nopl   (%rax)

000000000042e6c0 <BN_mod_word>:
  42e6c0:	48 85 f6             	test   %rsi,%rsi
  42e6c3:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  42e6ca:	75 04                	jne    42e6d0 <BN_mod_word+0x10>
  42e6cc:	f3 c3                	repz retq 
  42e6ce:	66 90                	xchg   %ax,%ax
  42e6d0:	8b 47 08             	mov    0x8(%rdi),%eax
  42e6d3:	83 e8 01             	sub    $0x1,%eax
  42e6d6:	78 4f                	js     42e727 <BN_mod_word+0x67>
  42e6d8:	48 8b 0f             	mov    (%rdi),%rcx
  42e6db:	48 63 d0             	movslq %eax,%rdx
  42e6de:	89 c0                	mov    %eax,%eax
  42e6e0:	48 8d 3c d1          	lea    (%rcx,%rdx,8),%rdi
  42e6e4:	48 29 c2             	sub    %rax,%rdx
  42e6e7:	4c 8d 44 d1 f8       	lea    -0x8(%rcx,%rdx,8),%r8
  42e6ec:	31 d2                	xor    %edx,%edx
  42e6ee:	66 90                	xchg   %ax,%ax
  42e6f0:	48 8b 0f             	mov    (%rdi),%rcx
  42e6f3:	48 89 d0             	mov    %rdx,%rax
  42e6f6:	31 d2                	xor    %edx,%edx
  42e6f8:	48 c1 e0 20          	shl    $0x20,%rax
  42e6fc:	48 83 ef 08          	sub    $0x8,%rdi
  42e700:	49 89 c9             	mov    %rcx,%r9
  42e703:	89 c9                	mov    %ecx,%ecx
  42e705:	49 c1 e9 20          	shr    $0x20,%r9
  42e709:	4c 09 c8             	or     %r9,%rax
  42e70c:	48 f7 f6             	div    %rsi
  42e70f:	48 89 d0             	mov    %rdx,%rax
  42e712:	31 d2                	xor    %edx,%edx
  42e714:	48 c1 e0 20          	shl    $0x20,%rax
  42e718:	48 09 c8             	or     %rcx,%rax
  42e71b:	48 f7 f6             	div    %rsi
  42e71e:	4c 39 c7             	cmp    %r8,%rdi
  42e721:	75 cd                	jne    42e6f0 <BN_mod_word+0x30>
  42e723:	48 89 d0             	mov    %rdx,%rax
  42e726:	c3                   	retq   
  42e727:	31 d2                	xor    %edx,%edx
  42e729:	eb f8                	jmp    42e723 <BN_mod_word+0x63>
  42e72b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000042e730 <BN_div_word>:
  42e730:	41 57                	push   %r15
  42e732:	41 56                	push   %r14
  42e734:	41 55                	push   %r13
  42e736:	41 54                	push   %r12
  42e738:	55                   	push   %rbp
  42e739:	53                   	push   %rbx
  42e73a:	48 83 ec 08          	sub    $0x8,%rsp
  42e73e:	48 85 f6             	test   %rsi,%rsi
  42e741:	75 1d                	jne    42e760 <BN_div_word+0x30>
  42e743:	48 c7 c3 ff ff ff ff 	mov    $0xffffffffffffffff,%rbx
  42e74a:	48 83 c4 08          	add    $0x8,%rsp
  42e74e:	48 89 d8             	mov    %rbx,%rax
  42e751:	5b                   	pop    %rbx
  42e752:	5d                   	pop    %rbp
  42e753:	41 5c                	pop    %r12
  42e755:	41 5d                	pop    %r13
  42e757:	41 5e                	pop    %r14
  42e759:	41 5f                	pop    %r15
  42e75b:	c3                   	retq   
  42e75c:	0f 1f 40 00          	nopl   0x0(%rax)
  42e760:	8b 47 08             	mov    0x8(%rdi),%eax
  42e763:	31 db                	xor    %ebx,%ebx
  42e765:	85 c0                	test   %eax,%eax
  42e767:	74 e1                	je     42e74a <BN_div_word+0x1a>
  42e769:	49 89 fd             	mov    %rdi,%r13
  42e76c:	41 be 40 00 00 00    	mov    $0x40,%r14d
  42e772:	48 89 f7             	mov    %rsi,%rdi
  42e775:	49 89 f4             	mov    %rsi,%r12
  42e778:	e8 13 dc ff ff       	callq  42c390 <BN_num_bits_word>
  42e77d:	41 29 c6             	sub    %eax,%r14d
  42e780:	4c 89 ee             	mov    %r13,%rsi
  42e783:	4c 89 ef             	mov    %r13,%rdi
  42e786:	44 89 f2             	mov    %r14d,%edx
  42e789:	e8 72 fa ff ff       	callq  42e200 <BN_lshift>
  42e78e:	85 c0                	test   %eax,%eax
  42e790:	74 b1                	je     42e743 <BN_div_word+0x13>
  42e792:	41 8b 45 08          	mov    0x8(%r13),%eax
  42e796:	89 c2                	mov    %eax,%edx
  42e798:	83 ea 01             	sub    $0x1,%edx
  42e79b:	78 65                	js     42e802 <BN_div_word+0xd2>
  42e79d:	48 63 c2             	movslq %edx,%rax
  42e7a0:	89 d2                	mov    %edx,%edx
  42e7a2:	49 8b 75 00          	mov    0x0(%r13),%rsi
  42e7a6:	48 8d 2c c5 00 00 00 	lea    0x0(,%rax,8),%rbp
  42e7ad:	00 
  42e7ae:	48 29 d0             	sub    %rdx,%rax
  42e7b1:	44 89 f1             	mov    %r14d,%ecx
  42e7b4:	4c 8d 3c c5 f8 ff ff 	lea    -0x8(,%rax,8),%r15
  42e7bb:	ff 
  42e7bc:	49 d3 e4             	shl    %cl,%r12
  42e7bf:	31 ff                	xor    %edi,%edi
  42e7c1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  42e7c8:	48 8b 1c 2e          	mov    (%rsi,%rbp,1),%rbx
  42e7cc:	4c 89 e2             	mov    %r12,%rdx
  42e7cf:	48 89 de             	mov    %rbx,%rsi
  42e7d2:	e8 39 06 00 00       	callq  42ee10 <bn_div_words>
  42e7d7:	48 89 c2             	mov    %rax,%rdx
  42e7da:	49 8b 75 00          	mov    0x0(%r13),%rsi
  42e7de:	49 0f af d4          	imul   %r12,%rdx
  42e7e2:	48 89 04 2e          	mov    %rax,(%rsi,%rbp,1)
  42e7e6:	48 83 ed 08          	sub    $0x8,%rbp
  42e7ea:	48 29 d3             	sub    %rdx,%rbx
  42e7ed:	4c 39 fd             	cmp    %r15,%rbp
  42e7f0:	48 89 df             	mov    %rbx,%rdi
  42e7f3:	75 d3                	jne    42e7c8 <BN_div_word+0x98>
  42e7f5:	44 89 f1             	mov    %r14d,%ecx
  42e7f8:	41 8b 45 08          	mov    0x8(%r13),%eax
  42e7fc:	48 d3 ef             	shr    %cl,%rdi
  42e7ff:	48 89 fb             	mov    %rdi,%rbx
  42e802:	85 c0                	test   %eax,%eax
  42e804:	0f 8e 40 ff ff ff    	jle    42e74a <BN_div_word+0x1a>
  42e80a:	49 8b 4d 00          	mov    0x0(%r13),%rcx
  42e80e:	48 63 d0             	movslq %eax,%rdx
  42e811:	48 83 7c d1 f8 00    	cmpq   $0x0,-0x8(%rcx,%rdx,8)
  42e817:	0f 85 2d ff ff ff    	jne    42e74a <BN_div_word+0x1a>
  42e81d:	83 e8 01             	sub    $0x1,%eax
  42e820:	41 89 45 08          	mov    %eax,0x8(%r13)
  42e824:	e9 21 ff ff ff       	jmpq   42e74a <BN_div_word+0x1a>
  42e829:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000042e830 <BN_add_word>:
  42e830:	48 85 f6             	test   %rsi,%rsi
  42e833:	41 54                	push   %r12
  42e835:	55                   	push   %rbp
  42e836:	53                   	push   %rbx
  42e837:	48 89 f3             	mov    %rsi,%rbx
  42e83a:	0f 84 ed 00 00 00    	je     42e92d <BN_add_word+0xfd>
  42e840:	8b 57 08             	mov    0x8(%rdi),%edx
  42e843:	48 89 fd             	mov    %rdi,%rbp
  42e846:	85 d2                	test   %edx,%edx
  42e848:	0f 84 f2 00 00 00    	je     42e940 <BN_add_word+0x110>
  42e84e:	44 8b 67 10          	mov    0x10(%rdi),%r12d
  42e852:	45 85 e4             	test   %r12d,%r12d
  42e855:	74 69                	je     42e8c0 <BN_add_word+0x90>
  42e857:	48 8b 0f             	mov    (%rdi),%rcx
  42e85a:	83 fa 01             	cmp    $0x1,%edx
  42e85d:	c7 47 10 00 00 00 00 	movl   $0x0,0x10(%rdi)
  42e864:	48 8b 01             	mov    (%rcx),%rax
  42e867:	0f 84 03 01 00 00    	je     42e970 <BN_add_word+0x140>
  42e86d:	48 39 c6             	cmp    %rax,%rsi
  42e870:	0f 86 33 01 00 00    	jbe    42e9a9 <BN_add_word+0x179>
  42e876:	31 f6                	xor    %esi,%esi
  42e878:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  42e87f:	00 
  42e880:	48 29 d8             	sub    %rbx,%rax
  42e883:	48 83 c1 08          	add    $0x8,%rcx
  42e887:	83 c6 01             	add    $0x1,%esi
  42e88a:	48 89 41 f8          	mov    %rax,-0x8(%rcx)
  42e88e:	48 8b 01             	mov    (%rcx),%rax
  42e891:	bb 01 00 00 00       	mov    $0x1,%ebx
  42e896:	48 85 c0             	test   %rax,%rax
  42e899:	74 e5                	je     42e880 <BN_add_word+0x50>
  42e89b:	48 29 d8             	sub    %rbx,%rax
  42e89e:	48 85 c0             	test   %rax,%rax
  42e8a1:	48 89 01             	mov    %rax,(%rcx)
  42e8a4:	0f 85 df 00 00 00    	jne    42e989 <BN_add_word+0x159>
  42e8aa:	8d 42 ff             	lea    -0x1(%rdx),%eax
  42e8ad:	ba 01 00 00 00       	mov    $0x1,%edx
  42e8b2:	39 c6                	cmp    %eax,%esi
  42e8b4:	0f 85 d4 00 00 00    	jne    42e98e <BN_add_word+0x15e>
  42e8ba:	e9 c3 00 00 00       	jmpq   42e982 <BN_add_word+0x152>
  42e8bf:	90                   	nop
  42e8c0:	48 8b 3f             	mov    (%rdi),%rdi
  42e8c3:	48 63 c2             	movslq %edx,%rax
  42e8c6:	48 83 7c c7 f8 ff    	cmpq   $0xffffffffffffffff,-0x8(%rdi,%rax,8)
  42e8cc:	75 22                	jne    42e8f0 <BN_add_word+0xc0>
  42e8ce:	3b 55 0c             	cmp    0xc(%rbp),%edx
  42e8d1:	7c 1d                	jl     42e8f0 <BN_add_word+0xc0>
  42e8d3:	8d 72 01             	lea    0x1(%rdx),%esi
  42e8d6:	48 89 ef             	mov    %rbp,%rdi
  42e8d9:	e8 22 de ff ff       	callq  42c700 <bn_expand2>
  42e8de:	48 85 c0             	test   %rax,%rax
  42e8e1:	74 50                	je     42e933 <BN_add_word+0x103>
  42e8e3:	8b 55 08             	mov    0x8(%rbp),%edx
  42e8e6:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
  42e8ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  42e8f0:	85 d2                	test   %edx,%edx
  42e8f2:	7e 5c                	jle    42e950 <BN_add_word+0x120>
  42e8f4:	48 89 d8             	mov    %rbx,%rax
  42e8f7:	48 03 07             	add    (%rdi),%rax
  42e8fa:	48 39 c3             	cmp    %rax,%rbx
  42e8fd:	48 89 07             	mov    %rax,(%rdi)
  42e900:	76 2b                	jbe    42e92d <BN_add_word+0xfd>
  42e902:	48 8d 77 08          	lea    0x8(%rdi),%rsi
  42e906:	31 c0                	xor    %eax,%eax
  42e908:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  42e90f:	00 
  42e910:	83 c0 01             	add    $0x1,%eax
  42e913:	39 d0                	cmp    %edx,%eax
  42e915:	75 41                	jne    42e958 <BN_add_word+0x128>
  42e917:	48 63 c2             	movslq %edx,%rax
  42e91a:	bb 01 00 00 00       	mov    $0x1,%ebx
  42e91f:	48 c1 e0 03          	shl    $0x3,%rax
  42e923:	83 c2 01             	add    $0x1,%edx
  42e926:	48 89 1c 07          	mov    %rbx,(%rdi,%rax,1)
  42e92a:	89 55 08             	mov    %edx,0x8(%rbp)
  42e92d:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  42e933:	44 89 e0             	mov    %r12d,%eax
  42e936:	5b                   	pop    %rbx
  42e937:	5d                   	pop    %rbp
  42e938:	41 5c                	pop    %r12
  42e93a:	c3                   	retq   
  42e93b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42e940:	5b                   	pop    %rbx
  42e941:	5d                   	pop    %rbp
  42e942:	41 5c                	pop    %r12
  42e944:	e9 d7 e2 ff ff       	jmpq   42cc20 <BN_set_word>
  42e949:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  42e950:	31 c0                	xor    %eax,%eax
  42e952:	eb cf                	jmp    42e923 <BN_add_word+0xf3>
  42e954:	0f 1f 40 00          	nopl   0x0(%rax)
  42e958:	48 8b 0e             	mov    (%rsi),%rcx
  42e95b:	48 83 c6 08          	add    $0x8,%rsi
  42e95f:	48 83 c1 01          	add    $0x1,%rcx
  42e963:	48 89 4e f8          	mov    %rcx,-0x8(%rsi)
  42e967:	48 85 c9             	test   %rcx,%rcx
  42e96a:	74 a4                	je     42e910 <BN_add_word+0xe0>
  42e96c:	eb bf                	jmp    42e92d <BN_add_word+0xfd>
  42e96e:	66 90                	xchg   %ax,%ax
  42e970:	48 39 c6             	cmp    %rax,%rsi
  42e973:	77 2a                	ja     42e99f <BN_add_word+0x16f>
  42e975:	48 29 f0             	sub    %rsi,%rax
  42e978:	31 f6                	xor    %esi,%esi
  42e97a:	48 85 c0             	test   %rax,%rax
  42e97d:	48 89 01             	mov    %rax,(%rcx)
  42e980:	75 0c                	jne    42e98e <BN_add_word+0x15e>
  42e982:	85 f6                	test   %esi,%esi
  42e984:	89 75 08             	mov    %esi,0x8(%rbp)
  42e987:	74 a4                	je     42e92d <BN_add_word+0xfd>
  42e989:	ba 01 00 00 00       	mov    $0x1,%edx
  42e98e:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  42e994:	89 55 10             	mov    %edx,0x10(%rbp)
  42e997:	44 89 e0             	mov    %r12d,%eax
  42e99a:	5b                   	pop    %rbx
  42e99b:	5d                   	pop    %rbp
  42e99c:	41 5c                	pop    %r12
  42e99e:	c3                   	retq   
  42e99f:	48 29 c3             	sub    %rax,%rbx
  42e9a2:	31 d2                	xor    %edx,%edx
  42e9a4:	48 89 19             	mov    %rbx,(%rcx)
  42e9a7:	eb e5                	jmp    42e98e <BN_add_word+0x15e>
  42e9a9:	31 f6                	xor    %esi,%esi
  42e9ab:	e9 eb fe ff ff       	jmpq   42e89b <BN_add_word+0x6b>

000000000042e9b0 <BN_sub_word>:
  42e9b0:	48 85 f6             	test   %rsi,%rsi
  42e9b3:	41 54                	push   %r12
  42e9b5:	55                   	push   %rbp
  42e9b6:	53                   	push   %rbx
  42e9b7:	74 67                	je     42ea20 <BN_sub_word+0x70>
  42e9b9:	8b 5f 08             	mov    0x8(%rdi),%ebx
  42e9bc:	48 89 fd             	mov    %rdi,%rbp
  42e9bf:	85 db                	test   %ebx,%ebx
  42e9c1:	74 6d                	je     42ea30 <BN_sub_word+0x80>
  42e9c3:	8b 47 10             	mov    0x10(%rdi),%eax
  42e9c6:	85 c0                	test   %eax,%eax
  42e9c8:	0f 85 a2 00 00 00    	jne    42ea70 <BN_sub_word+0xc0>
  42e9ce:	83 fb 01             	cmp    $0x1,%ebx
  42e9d1:	74 7d                	je     42ea50 <BN_sub_word+0xa0>
  42e9d3:	48 8b 0f             	mov    (%rdi),%rcx
  42e9d6:	48 8b 11             	mov    (%rcx),%rdx
  42e9d9:	48 39 d6             	cmp    %rdx,%rsi
  42e9dc:	0f 86 bd 00 00 00    	jbe    42ea9f <BN_sub_word+0xef>
  42e9e2:	45 31 c0             	xor    %r8d,%r8d
  42e9e5:	0f 1f 00             	nopl   (%rax)
  42e9e8:	48 29 f2             	sub    %rsi,%rdx
  42e9eb:	48 83 c1 08          	add    $0x8,%rcx
  42e9ef:	41 83 c0 01          	add    $0x1,%r8d
  42e9f3:	48 89 51 f8          	mov    %rdx,-0x8(%rcx)
  42e9f7:	48 8b 11             	mov    (%rcx),%rdx
  42e9fa:	be 01 00 00 00       	mov    $0x1,%esi
  42e9ff:	48 85 d2             	test   %rdx,%rdx
  42ea02:	74 e4                	je     42e9e8 <BN_sub_word+0x38>
  42ea04:	48 29 f2             	sub    %rsi,%rdx
  42ea07:	48 85 d2             	test   %rdx,%rdx
  42ea0a:	48 89 11             	mov    %rdx,(%rcx)
  42ea0d:	75 11                	jne    42ea20 <BN_sub_word+0x70>
  42ea0f:	83 eb 01             	sub    $0x1,%ebx
  42ea12:	41 39 d8             	cmp    %ebx,%r8d
  42ea15:	75 09                	jne    42ea20 <BN_sub_word+0x70>
  42ea17:	44 89 45 08          	mov    %r8d,0x8(%rbp)
  42ea1b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42ea20:	bb 01 00 00 00       	mov    $0x1,%ebx
  42ea25:	89 d8                	mov    %ebx,%eax
  42ea27:	5b                   	pop    %rbx
  42ea28:	5d                   	pop    %rbp
  42ea29:	41 5c                	pop    %r12
  42ea2b:	c3                   	retq   
  42ea2c:	0f 1f 40 00          	nopl   0x0(%rax)
  42ea30:	e8 eb e1 ff ff       	callq  42cc20 <BN_set_word>
  42ea35:	85 c0                	test   %eax,%eax
  42ea37:	41 89 c4             	mov    %eax,%r12d
  42ea3a:	74 e9                	je     42ea25 <BN_sub_word+0x75>
  42ea3c:	be 01 00 00 00       	mov    $0x1,%esi
  42ea41:	48 89 ef             	mov    %rbp,%rdi
  42ea44:	44 89 e3             	mov    %r12d,%ebx
  42ea47:	e8 64 e8 ff ff       	callq  42d2b0 <BN_set_negative>
  42ea4c:	eb d7                	jmp    42ea25 <BN_sub_word+0x75>
  42ea4e:	66 90                	xchg   %ax,%ax
  42ea50:	48 8b 17             	mov    (%rdi),%rdx
  42ea53:	48 8b 02             	mov    (%rdx),%rax
  42ea56:	48 39 c6             	cmp    %rax,%rsi
  42ea59:	77 35                	ja     42ea90 <BN_sub_word+0xe0>
  42ea5b:	48 29 f0             	sub    %rsi,%rax
  42ea5e:	45 31 c0             	xor    %r8d,%r8d
  42ea61:	48 85 c0             	test   %rax,%rax
  42ea64:	48 89 02             	mov    %rax,(%rdx)
  42ea67:	74 ae                	je     42ea17 <BN_sub_word+0x67>
  42ea69:	eb b5                	jmp    42ea20 <BN_sub_word+0x70>
  42ea6b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42ea70:	c7 47 10 00 00 00 00 	movl   $0x0,0x10(%rdi)
  42ea77:	e8 b4 fd ff ff       	callq  42e830 <BN_add_word>
  42ea7c:	c7 45 10 01 00 00 00 	movl   $0x1,0x10(%rbp)
  42ea83:	89 c3                	mov    %eax,%ebx
  42ea85:	eb 9e                	jmp    42ea25 <BN_sub_word+0x75>
  42ea87:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  42ea8e:	00 00 
  42ea90:	48 29 c6             	sub    %rax,%rsi
  42ea93:	48 89 32             	mov    %rsi,(%rdx)
  42ea96:	c7 47 10 01 00 00 00 	movl   $0x1,0x10(%rdi)
  42ea9d:	eb 86                	jmp    42ea25 <BN_sub_word+0x75>
  42ea9f:	45 31 c0             	xor    %r8d,%r8d
  42eaa2:	e9 5d ff ff ff       	jmpq   42ea04 <BN_sub_word+0x54>
  42eaa7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  42eaae:	00 00 

000000000042eab0 <BN_mul_word>:
  42eab0:	8b 57 08             	mov    0x8(%rdi),%edx
  42eab3:	85 d2                	test   %edx,%edx
  42eab5:	74 61                	je     42eb18 <BN_mul_word+0x68>
  42eab7:	55                   	push   %rbp
  42eab8:	53                   	push   %rbx
  42eab9:	48 89 f1             	mov    %rsi,%rcx
  42eabc:	48 89 fb             	mov    %rdi,%rbx
  42eabf:	48 83 ec 08          	sub    $0x8,%rsp
  42eac3:	48 85 f6             	test   %rsi,%rsi
  42eac6:	74 38                	je     42eb00 <BN_mul_word+0x50>
  42eac8:	48 8b 3f             	mov    (%rdi),%rdi
  42eacb:	48 89 fe             	mov    %rdi,%rsi
  42eace:	e8 8d 01 00 00       	callq  42ec60 <bn_mul_words>
  42ead3:	48 85 c0             	test   %rax,%rax
  42ead6:	48 89 c5             	mov    %rax,%rbp
  42ead9:	74 2c                	je     42eb07 <BN_mul_word+0x57>
  42eadb:	48 63 73 08          	movslq 0x8(%rbx),%rsi
  42eadf:	3b 73 0c             	cmp    0xc(%rbx),%esi
  42eae2:	7d 3c                	jge    42eb20 <BN_mul_word+0x70>
  42eae4:	48 8b 03             	mov    (%rbx),%rax
  42eae7:	8d 56 01             	lea    0x1(%rsi),%edx
  42eaea:	89 53 08             	mov    %edx,0x8(%rbx)
  42eaed:	48 89 2c f0          	mov    %rbp,(%rax,%rsi,8)
  42eaf1:	48 83 c4 08          	add    $0x8,%rsp
  42eaf5:	b8 01 00 00 00       	mov    $0x1,%eax
  42eafa:	5b                   	pop    %rbx
  42eafb:	5d                   	pop    %rbp
  42eafc:	c3                   	retq   
  42eafd:	0f 1f 00             	nopl   (%rax)
  42eb00:	31 f6                	xor    %esi,%esi
  42eb02:	e8 19 e1 ff ff       	callq  42cc20 <BN_set_word>
  42eb07:	b8 01 00 00 00       	mov    $0x1,%eax
  42eb0c:	48 83 c4 08          	add    $0x8,%rsp
  42eb10:	5b                   	pop    %rbx
  42eb11:	5d                   	pop    %rbp
  42eb12:	c3                   	retq   
  42eb13:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  42eb18:	b8 01 00 00 00       	mov    $0x1,%eax
  42eb1d:	c3                   	retq   
  42eb1e:	66 90                	xchg   %ax,%ax
  42eb20:	83 c6 01             	add    $0x1,%esi
  42eb23:	48 89 df             	mov    %rbx,%rdi
  42eb26:	e8 d5 db ff ff       	callq  42c700 <bn_expand2>
  42eb2b:	48 85 c0             	test   %rax,%rax
  42eb2e:	75 04                	jne    42eb34 <BN_mul_word+0x84>
  42eb30:	31 c0                	xor    %eax,%eax
  42eb32:	eb d8                	jmp    42eb0c <BN_mul_word+0x5c>
  42eb34:	48 63 73 08          	movslq 0x8(%rbx),%rsi
  42eb38:	eb aa                	jmp    42eae4 <BN_mul_word+0x34>
  42eb3a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000042eb40 <bn_mul_add_words>:
  42eb40:	85 d2                	test   %edx,%edx
  42eb42:	41 89 d2             	mov    %edx,%r10d
  42eb45:	0f 8e 05 01 00 00    	jle    42ec50 <bn_mul_add_words+0x110>
  42eb4b:	45 31 c0             	xor    %r8d,%r8d
  42eb4e:	f7 c2 fc ff ff ff    	test   $0xfffffffc,%edx
  42eb54:	0f 84 8e 00 00 00    	je     42ebe8 <bn_mul_add_words+0xa8>
  42eb5a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  42eb60:	41 83 ea 04          	sub    $0x4,%r10d
  42eb64:	48 89 c8             	mov    %rcx,%rax
  42eb67:	48 83 c6 20          	add    $0x20,%rsi
  42eb6b:	48 f7 66 e0          	mulq   -0x20(%rsi)
  42eb6f:	49 01 c0             	add    %rax,%r8
  42eb72:	48 83 d2 00          	adc    $0x0,%rdx
  42eb76:	48 89 c8             	mov    %rcx,%rax
  42eb79:	4c 01 07             	add    %r8,(%rdi)
  42eb7c:	48 83 d2 00          	adc    $0x0,%rdx
  42eb80:	49 89 d1             	mov    %rdx,%r9
  42eb83:	48 f7 66 e8          	mulq   -0x18(%rsi)
  42eb87:	49 01 c1             	add    %rax,%r9
  42eb8a:	48 83 d2 00          	adc    $0x0,%rdx
  42eb8e:	48 89 c8             	mov    %rcx,%rax
  42eb91:	4c 01 4f 08          	add    %r9,0x8(%rdi)
  42eb95:	48 83 d2 00          	adc    $0x0,%rdx
  42eb99:	49 89 d0             	mov    %rdx,%r8
  42eb9c:	48 f7 66 f0          	mulq   -0x10(%rsi)
  42eba0:	49 01 c0             	add    %rax,%r8
  42eba3:	48 83 d2 00          	adc    $0x0,%rdx
  42eba7:	48 89 c8             	mov    %rcx,%rax
  42ebaa:	4c 01 47 10          	add    %r8,0x10(%rdi)
  42ebae:	48 83 d2 00          	adc    $0x0,%rdx
  42ebb2:	49 89 d1             	mov    %rdx,%r9
  42ebb5:	48 f7 66 f8          	mulq   -0x8(%rsi)
  42ebb9:	49 01 c1             	add    %rax,%r9
  42ebbc:	48 83 d2 00          	adc    $0x0,%rdx
  42ebc0:	4c 01 4f 18          	add    %r9,0x18(%rdi)
  42ebc4:	48 83 d2 00          	adc    $0x0,%rdx
  42ebc8:	48 83 c7 20          	add    $0x20,%rdi
  42ebcc:	41 f7 c2 fc ff ff ff 	test   $0xfffffffc,%r10d
  42ebd3:	49 89 d0             	mov    %rdx,%r8
  42ebd6:	75 88                	jne    42eb60 <bn_mul_add_words+0x20>
  42ebd8:	45 85 d2             	test   %r10d,%r10d
  42ebdb:	49 89 d1             	mov    %rdx,%r9
  42ebde:	75 08                	jne    42ebe8 <bn_mul_add_words+0xa8>
  42ebe0:	4c 89 c8             	mov    %r9,%rax
  42ebe3:	c3                   	retq   
  42ebe4:	0f 1f 40 00          	nopl   0x0(%rax)
  42ebe8:	48 89 c8             	mov    %rcx,%rax
  42ebeb:	48 f7 26             	mulq   (%rsi)
  42ebee:	49 01 c0             	add    %rax,%r8
  42ebf1:	48 83 d2 00          	adc    $0x0,%rdx
  42ebf5:	4c 01 07             	add    %r8,(%rdi)
  42ebf8:	48 83 d2 00          	adc    $0x0,%rdx
  42ebfc:	41 83 fa 01          	cmp    $0x1,%r10d
  42ec00:	49 89 d1             	mov    %rdx,%r9
  42ec03:	74 db                	je     42ebe0 <bn_mul_add_words+0xa0>
  42ec05:	4d 89 c8             	mov    %r9,%r8
  42ec08:	48 89 c8             	mov    %rcx,%rax
  42ec0b:	48 f7 66 08          	mulq   0x8(%rsi)
  42ec0f:	49 01 c0             	add    %rax,%r8
  42ec12:	48 83 d2 00          	adc    $0x0,%rdx
  42ec16:	4c 01 47 08          	add    %r8,0x8(%rdi)
  42ec1a:	48 83 d2 00          	adc    $0x0,%rdx
  42ec1e:	41 83 fa 02          	cmp    $0x2,%r10d
  42ec22:	49 89 d1             	mov    %rdx,%r9
  42ec25:	74 b9                	je     42ebe0 <bn_mul_add_words+0xa0>
  42ec27:	48 89 c8             	mov    %rcx,%rax
  42ec2a:	4c 89 c9             	mov    %r9,%rcx
  42ec2d:	48 f7 66 10          	mulq   0x10(%rsi)
  42ec31:	48 01 c1             	add    %rax,%rcx
  42ec34:	48 83 d2 00          	adc    $0x0,%rdx
  42ec38:	48 01 4f 10          	add    %rcx,0x10(%rdi)
  42ec3c:	48 83 d2 00          	adc    $0x0,%rdx
  42ec40:	49 89 d1             	mov    %rdx,%r9
  42ec43:	4c 89 c8             	mov    %r9,%rax
  42ec46:	c3                   	retq   
  42ec47:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  42ec4e:	00 00 
  42ec50:	45 31 c9             	xor    %r9d,%r9d
  42ec53:	4c 89 c8             	mov    %r9,%rax
  42ec56:	c3                   	retq   
  42ec57:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  42ec5e:	00 00 

000000000042ec60 <bn_mul_words>:
  42ec60:	85 d2                	test   %edx,%edx
  42ec62:	41 89 d2             	mov    %edx,%r10d
  42ec65:	0f 8e e5 00 00 00    	jle    42ed50 <bn_mul_words+0xf0>
  42ec6b:	45 31 c0             	xor    %r8d,%r8d
  42ec6e:	f7 c2 fc ff ff ff    	test   $0xfffffffc,%edx
  42ec74:	0f 84 7e 00 00 00    	je     42ecf8 <bn_mul_words+0x98>
  42ec7a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  42ec80:	41 83 ea 04          	sub    $0x4,%r10d
  42ec84:	48 89 c8             	mov    %rcx,%rax
  42ec87:	48 83 c6 20          	add    $0x20,%rsi
  42ec8b:	48 f7 66 e0          	mulq   -0x20(%rsi)
  42ec8f:	48 83 c7 20          	add    $0x20,%rdi
  42ec93:	49 01 c0             	add    %rax,%r8
  42ec96:	48 83 d2 00          	adc    $0x0,%rdx
  42ec9a:	48 89 c8             	mov    %rcx,%rax
  42ec9d:	4c 89 47 e0          	mov    %r8,-0x20(%rdi)
  42eca1:	49 89 d1             	mov    %rdx,%r9
  42eca4:	48 f7 66 e8          	mulq   -0x18(%rsi)
  42eca8:	49 01 c1             	add    %rax,%r9
  42ecab:	48 83 d2 00          	adc    $0x0,%rdx
  42ecaf:	48 89 c8             	mov    %rcx,%rax
  42ecb2:	4c 89 4f e8          	mov    %r9,-0x18(%rdi)
  42ecb6:	49 89 d0             	mov    %rdx,%r8
  42ecb9:	48 f7 66 f0          	mulq   -0x10(%rsi)
  42ecbd:	49 01 c0             	add    %rax,%r8
  42ecc0:	48 83 d2 00          	adc    $0x0,%rdx
  42ecc4:	48 89 c8             	mov    %rcx,%rax
  42ecc7:	4c 89 47 f0          	mov    %r8,-0x10(%rdi)
  42eccb:	49 89 d1             	mov    %rdx,%r9
  42ecce:	48 f7 66 f8          	mulq   -0x8(%rsi)
  42ecd2:	49 01 c1             	add    %rax,%r9
  42ecd5:	48 83 d2 00          	adc    $0x0,%rdx
  42ecd9:	4c 89 4f f8          	mov    %r9,-0x8(%rdi)
  42ecdd:	41 f7 c2 fc ff ff ff 	test   $0xfffffffc,%r10d
  42ece4:	49 89 d0             	mov    %rdx,%r8
  42ece7:	75 97                	jne    42ec80 <bn_mul_words+0x20>
  42ece9:	45 85 d2             	test   %r10d,%r10d
  42ecec:	49 89 d1             	mov    %rdx,%r9
  42ecef:	75 07                	jne    42ecf8 <bn_mul_words+0x98>
  42ecf1:	4c 89 c8             	mov    %r9,%rax
  42ecf4:	c3                   	retq   
  42ecf5:	0f 1f 00             	nopl   (%rax)
  42ecf8:	48 89 c8             	mov    %rcx,%rax
  42ecfb:	48 f7 26             	mulq   (%rsi)
  42ecfe:	49 01 c0             	add    %rax,%r8
  42ed01:	48 83 d2 00          	adc    $0x0,%rdx
  42ed05:	41 83 fa 01          	cmp    $0x1,%r10d
  42ed09:	4c 89 07             	mov    %r8,(%rdi)
  42ed0c:	49 89 d1             	mov    %rdx,%r9
  42ed0f:	74 e0                	je     42ecf1 <bn_mul_words+0x91>
  42ed11:	48 89 c8             	mov    %rcx,%rax
  42ed14:	48 f7 66 08          	mulq   0x8(%rsi)
  42ed18:	49 01 c1             	add    %rax,%r9
  42ed1b:	48 83 d2 00          	adc    $0x0,%rdx
  42ed1f:	41 83 fa 02          	cmp    $0x2,%r10d
  42ed23:	49 89 d0             	mov    %rdx,%r8
  42ed26:	4c 89 4f 08          	mov    %r9,0x8(%rdi)
  42ed2a:	74 19                	je     42ed45 <bn_mul_words+0xe5>
  42ed2c:	48 89 c8             	mov    %rcx,%rax
  42ed2f:	48 f7 66 10          	mulq   0x10(%rsi)
  42ed33:	49 01 c0             	add    %rax,%r8
  42ed36:	48 83 d2 00          	adc    $0x0,%rdx
  42ed3a:	49 89 d1             	mov    %rdx,%r9
  42ed3d:	4c 89 47 10          	mov    %r8,0x10(%rdi)
  42ed41:	4c 89 c8             	mov    %r9,%rax
  42ed44:	c3                   	retq   
  42ed45:	49 89 d1             	mov    %rdx,%r9
  42ed48:	eb a7                	jmp    42ecf1 <bn_mul_words+0x91>
  42ed4a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  42ed50:	45 31 c9             	xor    %r9d,%r9d
  42ed53:	4c 89 c8             	mov    %r9,%rax
  42ed56:	c3                   	retq   
  42ed57:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  42ed5e:	00 00 

000000000042ed60 <bn_sqr_words>:
  42ed60:	85 d2                	test   %edx,%edx
  42ed62:	89 d1                	mov    %edx,%ecx
  42ed64:	0f 8e 95 00 00 00    	jle    42edff <bn_sqr_words+0x9f>
  42ed6a:	f7 c2 fc ff ff ff    	test   $0xfffffffc,%edx
  42ed70:	74 58                	je     42edca <bn_sqr_words+0x6a>
  42ed72:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  42ed78:	83 e9 04             	sub    $0x4,%ecx
  42ed7b:	48 8b 06             	mov    (%rsi),%rax
  42ed7e:	48 83 c7 40          	add    $0x40,%rdi
  42ed82:	48 f7 e0             	mul    %rax
  42ed85:	48 83 c6 20          	add    $0x20,%rsi
  42ed89:	48 89 57 c8          	mov    %rdx,-0x38(%rdi)
  42ed8d:	48 89 47 c0          	mov    %rax,-0x40(%rdi)
  42ed91:	48 8b 46 e8          	mov    -0x18(%rsi),%rax
  42ed95:	48 f7 e0             	mul    %rax
  42ed98:	48 89 57 d8          	mov    %rdx,-0x28(%rdi)
  42ed9c:	48 89 47 d0          	mov    %rax,-0x30(%rdi)
  42eda0:	48 8b 46 f0          	mov    -0x10(%rsi),%rax
  42eda4:	48 f7 e0             	mul    %rax
  42eda7:	48 89 57 e8          	mov    %rdx,-0x18(%rdi)
  42edab:	48 89 47 e0          	mov    %rax,-0x20(%rdi)
  42edaf:	48 8b 46 f8          	mov    -0x8(%rsi),%rax
  42edb3:	48 f7 e0             	mul    %rax
  42edb6:	48 89 47 f0          	mov    %rax,-0x10(%rdi)
  42edba:	48 89 57 f8          	mov    %rdx,-0x8(%rdi)
  42edbe:	f7 c1 fc ff ff ff    	test   $0xfffffffc,%ecx
  42edc4:	75 b2                	jne    42ed78 <bn_sqr_words+0x18>
  42edc6:	85 c9                	test   %ecx,%ecx
  42edc8:	74 35                	je     42edff <bn_sqr_words+0x9f>
  42edca:	48 8b 06             	mov    (%rsi),%rax
  42edcd:	48 f7 e0             	mul    %rax
  42edd0:	83 f9 01             	cmp    $0x1,%ecx
  42edd3:	48 89 07             	mov    %rax,(%rdi)
  42edd6:	48 89 57 08          	mov    %rdx,0x8(%rdi)
  42edda:	74 23                	je     42edff <bn_sqr_words+0x9f>
  42eddc:	48 8b 46 08          	mov    0x8(%rsi),%rax
  42ede0:	48 f7 e0             	mul    %rax
  42ede3:	83 f9 02             	cmp    $0x2,%ecx
  42ede6:	48 89 47 10          	mov    %rax,0x10(%rdi)
  42edea:	48 89 57 18          	mov    %rdx,0x18(%rdi)
  42edee:	74 0f                	je     42edff <bn_sqr_words+0x9f>
  42edf0:	48 8b 46 10          	mov    0x10(%rsi),%rax
  42edf4:	48 f7 e0             	mul    %rax
  42edf7:	48 89 47 20          	mov    %rax,0x20(%rdi)
  42edfb:	48 89 57 28          	mov    %rdx,0x28(%rdi)
  42edff:	f3 c3                	repz retq 
  42ee01:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  42ee08:	0f 1f 84 00 00 00 00 
  42ee0f:	00 

000000000042ee10 <bn_div_words>:
  42ee10:	48 89 d1             	mov    %rdx,%rcx
  42ee13:	48 89 f0             	mov    %rsi,%rax
  42ee16:	48 89 fa             	mov    %rdi,%rdx
  42ee19:	48 f7 f1             	div    %rcx
  42ee1c:	c3                   	retq   
  42ee1d:	0f 1f 00             	nopl   (%rax)

000000000042ee20 <bn_add_words>:
  42ee20:	85 c9                	test   %ecx,%ecx
  42ee22:	7e 2c                	jle    42ee50 <bn_add_words+0x30>
  42ee24:	4d 29 c0             	sub    %r8,%r8
  42ee27:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  42ee2e:	00 00 
  42ee30:	4a 8b 04 c6          	mov    (%rsi,%r8,8),%rax
  42ee34:	4a 13 04 c2          	adc    (%rdx,%r8,8),%rax
  42ee38:	4a 89 04 c7          	mov    %rax,(%rdi,%r8,8)
  42ee3c:	4d 8d 40 01          	lea    0x1(%r8),%r8
  42ee40:	e2 ee                	loop   42ee30 <bn_add_words+0x10>
  42ee42:	48 19 c0             	sbb    %rax,%rax
  42ee45:	83 e0 01             	and    $0x1,%eax
  42ee48:	c3                   	retq   
  42ee49:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  42ee50:	31 c0                	xor    %eax,%eax
  42ee52:	c3                   	retq   
  42ee53:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  42ee5a:	84 00 00 00 00 00 

000000000042ee60 <bn_sub_words>:
  42ee60:	85 c9                	test   %ecx,%ecx
  42ee62:	7e 2c                	jle    42ee90 <bn_sub_words+0x30>
  42ee64:	4d 29 c0             	sub    %r8,%r8
  42ee67:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  42ee6e:	00 00 
  42ee70:	4a 8b 04 c6          	mov    (%rsi,%r8,8),%rax
  42ee74:	4a 1b 04 c2          	sbb    (%rdx,%r8,8),%rax
  42ee78:	4a 89 04 c7          	mov    %rax,(%rdi,%r8,8)
  42ee7c:	4d 8d 40 01          	lea    0x1(%r8),%r8
  42ee80:	e2 ee                	loop   42ee70 <bn_sub_words+0x10>
  42ee82:	48 19 c0             	sbb    %rax,%rax
  42ee85:	83 e0 01             	and    $0x1,%eax
  42ee88:	c3                   	retq   
  42ee89:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  42ee90:	31 c0                	xor    %eax,%eax
  42ee92:	c3                   	retq   
  42ee93:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  42ee9a:	84 00 00 00 00 00 

000000000042eea0 <bn_mul_comba8>:
  42eea0:	45 31 c9             	xor    %r9d,%r9d
  42eea3:	48 89 d1             	mov    %rdx,%rcx
  42eea6:	53                   	push   %rbx
  42eea7:	48 8b 06             	mov    (%rsi),%rax
  42eeaa:	4d 89 ca             	mov    %r9,%r10
  42eead:	4d 89 c8             	mov    %r9,%r8
  42eeb0:	48 f7 22             	mulq   (%rdx)
  42eeb3:	4d 89 cb             	mov    %r9,%r11
  42eeb6:	49 01 c2             	add    %rax,%r10
  42eeb9:	48 83 d2 00          	adc    $0x0,%rdx
  42eebd:	4c 89 17             	mov    %r10,(%rdi)
  42eec0:	48 8b 06             	mov    (%rsi),%rax
  42eec3:	49 01 d0             	add    %rdx,%r8
  42eec6:	49 83 d3 00          	adc    $0x0,%r11
  42eeca:	48 f7 61 08          	mulq   0x8(%rcx)
  42eece:	4d 89 c2             	mov    %r8,%r10
  42eed1:	4d 89 c8             	mov    %r9,%r8
  42eed4:	49 01 c2             	add    %rax,%r10
  42eed7:	48 83 d2 00          	adc    $0x0,%rdx
  42eedb:	48 8b 46 08          	mov    0x8(%rsi),%rax
  42eedf:	49 01 d3             	add    %rdx,%r11
  42eee2:	49 83 d0 00          	adc    $0x0,%r8
  42eee6:	48 f7 21             	mulq   (%rcx)
  42eee9:	49 01 c2             	add    %rax,%r10
  42eeec:	48 83 d2 00          	adc    $0x0,%rdx
  42eef0:	4c 89 57 08          	mov    %r10,0x8(%rdi)
  42eef4:	4d 89 ca             	mov    %r9,%r10
  42eef7:	48 8b 46 10          	mov    0x10(%rsi),%rax
  42eefb:	49 01 d3             	add    %rdx,%r11
  42eefe:	49 83 d0 00          	adc    $0x0,%r8
  42ef02:	48 f7 21             	mulq   (%rcx)
  42ef05:	49 01 c3             	add    %rax,%r11
  42ef08:	48 83 d2 00          	adc    $0x0,%rdx
  42ef0c:	48 8b 46 08          	mov    0x8(%rsi),%rax
  42ef10:	49 01 d0             	add    %rdx,%r8
  42ef13:	49 83 d2 00          	adc    $0x0,%r10
  42ef17:	48 f7 61 08          	mulq   0x8(%rcx)
  42ef1b:	49 01 c3             	add    %rax,%r11
  42ef1e:	48 83 d2 00          	adc    $0x0,%rdx
  42ef22:	48 8b 06             	mov    (%rsi),%rax
  42ef25:	49 01 d0             	add    %rdx,%r8
  42ef28:	49 83 d2 00          	adc    $0x0,%r10
  42ef2c:	48 f7 61 10          	mulq   0x10(%rcx)
  42ef30:	49 01 c3             	add    %rax,%r11
  42ef33:	48 83 d2 00          	adc    $0x0,%rdx
  42ef37:	4c 89 5f 10          	mov    %r11,0x10(%rdi)
  42ef3b:	4d 89 cb             	mov    %r9,%r11
  42ef3e:	48 8b 06             	mov    (%rsi),%rax
  42ef41:	49 01 d0             	add    %rdx,%r8
  42ef44:	49 83 d2 00          	adc    $0x0,%r10
  42ef48:	48 f7 61 18          	mulq   0x18(%rcx)
  42ef4c:	49 01 c0             	add    %rax,%r8
  42ef4f:	48 83 d2 00          	adc    $0x0,%rdx
  42ef53:	48 8b 46 08          	mov    0x8(%rsi),%rax
  42ef57:	49 01 d2             	add    %rdx,%r10
  42ef5a:	49 83 d3 00          	adc    $0x0,%r11
  42ef5e:	48 f7 61 10          	mulq   0x10(%rcx)
  42ef62:	49 01 c0             	add    %rax,%r8
  42ef65:	48 83 d2 00          	adc    $0x0,%rdx
  42ef69:	48 8b 46 10          	mov    0x10(%rsi),%rax
  42ef6d:	49 01 d2             	add    %rdx,%r10
  42ef70:	49 83 d3 00          	adc    $0x0,%r11
  42ef74:	48 f7 61 08          	mulq   0x8(%rcx)
  42ef78:	49 01 c0             	add    %rax,%r8
  42ef7b:	48 83 d2 00          	adc    $0x0,%rdx
  42ef7f:	48 8b 46 18          	mov    0x18(%rsi),%rax
  42ef83:	49 01 d2             	add    %rdx,%r10
  42ef86:	49 83 d3 00          	adc    $0x0,%r11
  42ef8a:	48 f7 21             	mulq   (%rcx)
  42ef8d:	49 01 c0             	add    %rax,%r8
  42ef90:	48 83 d2 00          	adc    $0x0,%rdx
  42ef94:	4c 89 47 18          	mov    %r8,0x18(%rdi)
  42ef98:	4d 89 c8             	mov    %r9,%r8
  42ef9b:	48 8b 46 20          	mov    0x20(%rsi),%rax
  42ef9f:	49 01 d2             	add    %rdx,%r10
  42efa2:	49 83 d3 00          	adc    $0x0,%r11
  42efa6:	48 f7 21             	mulq   (%rcx)
  42efa9:	49 01 c2             	add    %rax,%r10
  42efac:	48 83 d2 00          	adc    $0x0,%rdx
  42efb0:	48 8b 46 18          	mov    0x18(%rsi),%rax
  42efb4:	49 01 d3             	add    %rdx,%r11
  42efb7:	49 83 d0 00          	adc    $0x0,%r8
  42efbb:	48 f7 61 08          	mulq   0x8(%rcx)
  42efbf:	49 01 c2             	add    %rax,%r10
  42efc2:	48 83 d2 00          	adc    $0x0,%rdx
  42efc6:	48 8b 46 10          	mov    0x10(%rsi),%rax
  42efca:	49 01 d3             	add    %rdx,%r11
  42efcd:	49 83 d0 00          	adc    $0x0,%r8
  42efd1:	48 f7 61 10          	mulq   0x10(%rcx)
  42efd5:	49 01 c2             	add    %rax,%r10
  42efd8:	48 83 d2 00          	adc    $0x0,%rdx
  42efdc:	48 8b 46 08          	mov    0x8(%rsi),%rax
  42efe0:	49 01 d3             	add    %rdx,%r11
  42efe3:	49 83 d0 00          	adc    $0x0,%r8
  42efe7:	48 f7 61 18          	mulq   0x18(%rcx)
  42efeb:	49 01 c2             	add    %rax,%r10
  42efee:	48 83 d2 00          	adc    $0x0,%rdx
  42eff2:	48 8b 06             	mov    (%rsi),%rax
  42eff5:	49 01 d3             	add    %rdx,%r11
  42eff8:	49 83 d0 00          	adc    $0x0,%r8
  42effc:	48 f7 61 20          	mulq   0x20(%rcx)
  42f000:	49 01 c2             	add    %rax,%r10
  42f003:	48 83 d2 00          	adc    $0x0,%rdx
  42f007:	4c 89 57 20          	mov    %r10,0x20(%rdi)
  42f00b:	4d 89 ca             	mov    %r9,%r10
  42f00e:	48 8b 06             	mov    (%rsi),%rax
  42f011:	49 01 d3             	add    %rdx,%r11
  42f014:	49 83 d0 00          	adc    $0x0,%r8
  42f018:	48 f7 61 28          	mulq   0x28(%rcx)
  42f01c:	49 01 c3             	add    %rax,%r11
  42f01f:	48 83 d2 00          	adc    $0x0,%rdx
  42f023:	48 8b 46 08          	mov    0x8(%rsi),%rax
  42f027:	49 01 d0             	add    %rdx,%r8
  42f02a:	49 83 d2 00          	adc    $0x0,%r10
  42f02e:	48 f7 61 20          	mulq   0x20(%rcx)
  42f032:	49 01 c3             	add    %rax,%r11
  42f035:	48 83 d2 00          	adc    $0x0,%rdx
  42f039:	48 8b 46 10          	mov    0x10(%rsi),%rax
  42f03d:	49 01 d0             	add    %rdx,%r8
  42f040:	49 83 d2 00          	adc    $0x0,%r10
  42f044:	48 f7 61 18          	mulq   0x18(%rcx)
  42f048:	49 01 c3             	add    %rax,%r11
  42f04b:	48 83 d2 00          	adc    $0x0,%rdx
  42f04f:	48 8b 46 18          	mov    0x18(%rsi),%rax
  42f053:	49 01 d0             	add    %rdx,%r8
  42f056:	49 83 d2 00          	adc    $0x0,%r10
  42f05a:	48 f7 61 10          	mulq   0x10(%rcx)
  42f05e:	49 01 c3             	add    %rax,%r11
  42f061:	48 83 d2 00          	adc    $0x0,%rdx
  42f065:	48 8b 46 20          	mov    0x20(%rsi),%rax
  42f069:	49 01 d0             	add    %rdx,%r8
  42f06c:	49 83 d2 00          	adc    $0x0,%r10
  42f070:	48 f7 61 08          	mulq   0x8(%rcx)
  42f074:	49 01 c3             	add    %rax,%r11
  42f077:	48 83 d2 00          	adc    $0x0,%rdx
  42f07b:	48 8b 46 28          	mov    0x28(%rsi),%rax
  42f07f:	49 01 d0             	add    %rdx,%r8
  42f082:	49 83 d2 00          	adc    $0x0,%r10
  42f086:	48 f7 21             	mulq   (%rcx)
  42f089:	49 01 c3             	add    %rax,%r11
  42f08c:	48 83 d2 00          	adc    $0x0,%rdx
  42f090:	4c 89 5f 28          	mov    %r11,0x28(%rdi)
  42f094:	4d 89 cb             	mov    %r9,%r11
  42f097:	48 8b 46 30          	mov    0x30(%rsi),%rax
  42f09b:	49 01 d0             	add    %rdx,%r8
  42f09e:	49 83 d2 00          	adc    $0x0,%r10
  42f0a2:	48 f7 21             	mulq   (%rcx)
  42f0a5:	49 01 c0             	add    %rax,%r8
  42f0a8:	48 83 d2 00          	adc    $0x0,%rdx
  42f0ac:	48 8b 46 28          	mov    0x28(%rsi),%rax
  42f0b0:	49 01 d2             	add    %rdx,%r10
  42f0b3:	49 83 d3 00          	adc    $0x0,%r11
  42f0b7:	48 f7 61 08          	mulq   0x8(%rcx)
  42f0bb:	49 01 c0             	add    %rax,%r8
  42f0be:	48 83 d2 00          	adc    $0x0,%rdx
  42f0c2:	48 8b 46 20          	mov    0x20(%rsi),%rax
  42f0c6:	49 01 d2             	add    %rdx,%r10
  42f0c9:	49 83 d3 00          	adc    $0x0,%r11
  42f0cd:	48 f7 61 10          	mulq   0x10(%rcx)
  42f0d1:	49 01 c0             	add    %rax,%r8
  42f0d4:	48 83 d2 00          	adc    $0x0,%rdx
  42f0d8:	48 8b 46 18          	mov    0x18(%rsi),%rax
  42f0dc:	49 01 d2             	add    %rdx,%r10
  42f0df:	49 83 d3 00          	adc    $0x0,%r11
  42f0e3:	48 f7 61 18          	mulq   0x18(%rcx)
  42f0e7:	49 01 c0             	add    %rax,%r8
  42f0ea:	48 83 d2 00          	adc    $0x0,%rdx
  42f0ee:	48 8b 46 10          	mov    0x10(%rsi),%rax
  42f0f2:	49 01 d2             	add    %rdx,%r10
  42f0f5:	49 83 d3 00          	adc    $0x0,%r11
  42f0f9:	48 f7 61 20          	mulq   0x20(%rcx)
  42f0fd:	49 01 c0             	add    %rax,%r8
  42f100:	48 83 d2 00          	adc    $0x0,%rdx
  42f104:	48 8b 46 08          	mov    0x8(%rsi),%rax
  42f108:	4c 89 c3             	mov    %r8,%rbx
  42f10b:	49 01 d2             	add    %rdx,%r10
  42f10e:	49 83 d3 00          	adc    $0x0,%r11
  42f112:	48 f7 61 28          	mulq   0x28(%rcx)
  42f116:	4d 89 d0             	mov    %r10,%r8
  42f119:	48 01 c3             	add    %rax,%rbx
  42f11c:	48 83 d2 00          	adc    $0x0,%rdx
  42f120:	48 8b 06             	mov    (%rsi),%rax
  42f123:	49 89 da             	mov    %rbx,%r10
  42f126:	49 01 d0             	add    %rdx,%r8
  42f129:	49 83 d3 00          	adc    $0x0,%r11
  42f12d:	48 f7 61 30          	mulq   0x30(%rcx)
  42f131:	49 01 c2             	add    %rax,%r10
  42f134:	48 83 d2 00          	adc    $0x0,%rdx
  42f138:	4c 89 57 30          	mov    %r10,0x30(%rdi)
  42f13c:	4d 89 ca             	mov    %r9,%r10
  42f13f:	48 8b 06             	mov    (%rsi),%rax
  42f142:	49 01 d0             	add    %rdx,%r8
  42f145:	49 83 d3 00          	adc    $0x0,%r11
  42f149:	48 f7 61 38          	mulq   0x38(%rcx)
  42f14d:	49 01 c0             	add    %rax,%r8
  42f150:	48 83 d2 00          	adc    $0x0,%rdx
  42f154:	48 8b 46 08          	mov    0x8(%rsi),%rax
  42f158:	49 01 d3             	add    %rdx,%r11
  42f15b:	49 83 d2 00          	adc    $0x0,%r10
  42f15f:	48 f7 61 30          	mulq   0x30(%rcx)
  42f163:	49 01 c0             	add    %rax,%r8
  42f166:	48 83 d2 00          	adc    $0x0,%rdx
  42f16a:	48 8b 46 10          	mov    0x10(%rsi),%rax
  42f16e:	49 01 d3             	add    %rdx,%r11
  42f171:	49 83 d2 00          	adc    $0x0,%r10
  42f175:	48 f7 61 28          	mulq   0x28(%rcx)
  42f179:	49 01 c0             	add    %rax,%r8
  42f17c:	48 83 d2 00          	adc    $0x0,%rdx
  42f180:	48 8b 46 18          	mov    0x18(%rsi),%rax
  42f184:	49 01 d3             	add    %rdx,%r11
  42f187:	49 83 d2 00          	adc    $0x0,%r10
  42f18b:	48 f7 61 20          	mulq   0x20(%rcx)
  42f18f:	49 01 c0             	add    %rax,%r8
  42f192:	48 83 d2 00          	adc    $0x0,%rdx
  42f196:	48 8b 46 20          	mov    0x20(%rsi),%rax
  42f19a:	49 01 d3             	add    %rdx,%r11
  42f19d:	49 83 d2 00          	adc    $0x0,%r10
  42f1a1:	48 f7 61 18          	mulq   0x18(%rcx)
  42f1a5:	49 01 c0             	add    %rax,%r8
  42f1a8:	48 83 d2 00          	adc    $0x0,%rdx
  42f1ac:	48 8b 46 28          	mov    0x28(%rsi),%rax
  42f1b0:	49 01 d3             	add    %rdx,%r11
  42f1b3:	49 83 d2 00          	adc    $0x0,%r10
  42f1b7:	48 f7 61 10          	mulq   0x10(%rcx)
  42f1bb:	49 01 c0             	add    %rax,%r8
  42f1be:	48 83 d2 00          	adc    $0x0,%rdx
  42f1c2:	48 8b 46 30          	mov    0x30(%rsi),%rax
  42f1c6:	4c 89 c3             	mov    %r8,%rbx
  42f1c9:	49 01 d3             	add    %rdx,%r11
  42f1cc:	49 83 d2 00          	adc    $0x0,%r10
  42f1d0:	48 f7 61 08          	mulq   0x8(%rcx)
  42f1d4:	4d 89 d0             	mov    %r10,%r8
  42f1d7:	48 01 c3             	add    %rax,%rbx
  42f1da:	48 83 d2 00          	adc    $0x0,%rdx
  42f1de:	48 8b 46 38          	mov    0x38(%rsi),%rax
  42f1e2:	49 01 d3             	add    %rdx,%r11
  42f1e5:	49 83 d0 00          	adc    $0x0,%r8
  42f1e9:	48 f7 21             	mulq   (%rcx)
  42f1ec:	4d 89 da             	mov    %r11,%r10
  42f1ef:	4d 89 cb             	mov    %r9,%r11
  42f1f2:	48 01 c3             	add    %rax,%rbx
  42f1f5:	48 83 d2 00          	adc    $0x0,%rdx
  42f1f9:	48 89 5f 38          	mov    %rbx,0x38(%rdi)
  42f1fd:	48 8b 46 38          	mov    0x38(%rsi),%rax
  42f201:	49 01 d2             	add    %rdx,%r10
  42f204:	49 83 d0 00          	adc    $0x0,%r8
  42f208:	48 f7 61 08          	mulq   0x8(%rcx)
  42f20c:	49 01 c2             	add    %rax,%r10
  42f20f:	48 83 d2 00          	adc    $0x0,%rdx
  42f213:	48 8b 46 30          	mov    0x30(%rsi),%rax
  42f217:	4c 89 d3             	mov    %r10,%rbx
  42f21a:	49 01 d0             	add    %rdx,%r8
  42f21d:	49 83 d3 00          	adc    $0x0,%r11
  42f221:	48 f7 61 10          	mulq   0x10(%rcx)
  42f225:	4d 89 da             	mov    %r11,%r10
  42f228:	48 01 c3             	add    %rax,%rbx
  42f22b:	48 83 d2 00          	adc    $0x0,%rdx
  42f22f:	48 8b 46 28          	mov    0x28(%rsi),%rax
  42f233:	49 89 db             	mov    %rbx,%r11
  42f236:	49 01 d0             	add    %rdx,%r8
  42f239:	49 83 d2 00          	adc    $0x0,%r10
  42f23d:	48 f7 61 18          	mulq   0x18(%rcx)
  42f241:	49 01 c3             	add    %rax,%r11
  42f244:	48 83 d2 00          	adc    $0x0,%rdx
  42f248:	48 8b 46 20          	mov    0x20(%rsi),%rax
  42f24c:	49 01 d0             	add    %rdx,%r8
  42f24f:	49 83 d2 00          	adc    $0x0,%r10
  42f253:	48 f7 61 20          	mulq   0x20(%rcx)
  42f257:	49 01 c3             	add    %rax,%r11
  42f25a:	48 83 d2 00          	adc    $0x0,%rdx
  42f25e:	48 8b 46 18          	mov    0x18(%rsi),%rax
  42f262:	49 01 d0             	add    %rdx,%r8
  42f265:	49 83 d2 00          	adc    $0x0,%r10
  42f269:	48 f7 61 28          	mulq   0x28(%rcx)
  42f26d:	49 01 c3             	add    %rax,%r11
  42f270:	48 83 d2 00          	adc    $0x0,%rdx
  42f274:	48 8b 46 10          	mov    0x10(%rsi),%rax
  42f278:	49 01 d0             	add    %rdx,%r8
  42f27b:	49 83 d2 00          	adc    $0x0,%r10
  42f27f:	48 f7 61 30          	mulq   0x30(%rcx)
  42f283:	49 01 c3             	add    %rax,%r11
  42f286:	48 83 d2 00          	adc    $0x0,%rdx
  42f28a:	48 8b 46 08          	mov    0x8(%rsi),%rax
  42f28e:	49 01 d0             	add    %rdx,%r8
  42f291:	49 83 d2 00          	adc    $0x0,%r10
  42f295:	48 f7 61 38          	mulq   0x38(%rcx)
  42f299:	49 01 c3             	add    %rax,%r11
  42f29c:	48 83 d2 00          	adc    $0x0,%rdx
  42f2a0:	4c 89 5f 40          	mov    %r11,0x40(%rdi)
  42f2a4:	4d 89 cb             	mov    %r9,%r11
  42f2a7:	48 8b 46 10          	mov    0x10(%rsi),%rax
  42f2ab:	49 01 d0             	add    %rdx,%r8
  42f2ae:	49 83 d2 00          	adc    $0x0,%r10
  42f2b2:	48 f7 61 38          	mulq   0x38(%rcx)
  42f2b6:	49 01 c0             	add    %rax,%r8
  42f2b9:	48 83 d2 00          	adc    $0x0,%rdx
  42f2bd:	48 8b 46 18          	mov    0x18(%rsi),%rax
  42f2c1:	4c 89 c3             	mov    %r8,%rbx
  42f2c4:	49 01 d2             	add    %rdx,%r10
  42f2c7:	49 83 d3 00          	adc    $0x0,%r11
  42f2cb:	48 f7 61 30          	mulq   0x30(%rcx)
  42f2cf:	4d 89 d0             	mov    %r10,%r8
  42f2d2:	4d 89 da             	mov    %r11,%r10
  42f2d5:	48 01 c3             	add    %rax,%rbx
  42f2d8:	48 83 d2 00          	adc    $0x0,%rdx
  42f2dc:	48 8b 46 20          	mov    0x20(%rsi),%rax
  42f2e0:	49 89 db             	mov    %rbx,%r11
  42f2e3:	49 01 d0             	add    %rdx,%r8
  42f2e6:	49 83 d2 00          	adc    $0x0,%r10
  42f2ea:	48 f7 61 28          	mulq   0x28(%rcx)
  42f2ee:	49 01 c3             	add    %rax,%r11
  42f2f1:	48 83 d2 00          	adc    $0x0,%rdx
  42f2f5:	48 8b 46 28          	mov    0x28(%rsi),%rax
  42f2f9:	49 01 d0             	add    %rdx,%r8
  42f2fc:	49 83 d2 00          	adc    $0x0,%r10
  42f300:	48 f7 61 20          	mulq   0x20(%rcx)
  42f304:	49 01 c3             	add    %rax,%r11
  42f307:	48 83 d2 00          	adc    $0x0,%rdx
  42f30b:	48 8b 46 30          	mov    0x30(%rsi),%rax
  42f30f:	49 01 d0             	add    %rdx,%r8
  42f312:	49 83 d2 00          	adc    $0x0,%r10
  42f316:	48 f7 61 18          	mulq   0x18(%rcx)
  42f31a:	49 01 c3             	add    %rax,%r11
  42f31d:	48 83 d2 00          	adc    $0x0,%rdx
  42f321:	48 8b 46 38          	mov    0x38(%rsi),%rax
  42f325:	49 01 d0             	add    %rdx,%r8
  42f328:	49 83 d2 00          	adc    $0x0,%r10
  42f32c:	48 f7 61 10          	mulq   0x10(%rcx)
  42f330:	49 01 c3             	add    %rax,%r11
  42f333:	48 83 d2 00          	adc    $0x0,%rdx
  42f337:	4c 89 5f 48          	mov    %r11,0x48(%rdi)
  42f33b:	4d 89 cb             	mov    %r9,%r11
  42f33e:	48 8b 46 38          	mov    0x38(%rsi),%rax
  42f342:	49 01 d0             	add    %rdx,%r8
  42f345:	49 83 d2 00          	adc    $0x0,%r10
  42f349:	48 f7 61 18          	mulq   0x18(%rcx)
  42f34d:	49 01 c0             	add    %rax,%r8
  42f350:	48 83 d2 00          	adc    $0x0,%rdx
  42f354:	48 8b 46 30          	mov    0x30(%rsi),%rax
  42f358:	4c 89 c3             	mov    %r8,%rbx
  42f35b:	49 01 d2             	add    %rdx,%r10
  42f35e:	49 83 d3 00          	adc    $0x0,%r11
  42f362:	48 f7 61 20          	mulq   0x20(%rcx)
  42f366:	4d 89 d0             	mov    %r10,%r8
  42f369:	4d 89 da             	mov    %r11,%r10
  42f36c:	48 01 c3             	add    %rax,%rbx
  42f36f:	48 83 d2 00          	adc    $0x0,%rdx
  42f373:	48 8b 46 28          	mov    0x28(%rsi),%rax
  42f377:	49 89 db             	mov    %rbx,%r11
  42f37a:	49 01 d0             	add    %rdx,%r8
  42f37d:	49 83 d2 00          	adc    $0x0,%r10
  42f381:	48 f7 61 28          	mulq   0x28(%rcx)
  42f385:	49 01 c3             	add    %rax,%r11
  42f388:	48 83 d2 00          	adc    $0x0,%rdx
  42f38c:	48 8b 46 20          	mov    0x20(%rsi),%rax
  42f390:	49 01 d0             	add    %rdx,%r8
  42f393:	49 83 d2 00          	adc    $0x0,%r10
  42f397:	48 f7 61 30          	mulq   0x30(%rcx)
  42f39b:	49 01 c3             	add    %rax,%r11
  42f39e:	48 83 d2 00          	adc    $0x0,%rdx
  42f3a2:	48 8b 46 18          	mov    0x18(%rsi),%rax
  42f3a6:	49 01 d0             	add    %rdx,%r8
  42f3a9:	49 83 d2 00          	adc    $0x0,%r10
  42f3ad:	48 f7 61 38          	mulq   0x38(%rcx)
  42f3b1:	49 01 c3             	add    %rax,%r11
  42f3b4:	48 83 d2 00          	adc    $0x0,%rdx
  42f3b8:	4c 89 5f 50          	mov    %r11,0x50(%rdi)
  42f3bc:	4d 89 cb             	mov    %r9,%r11
  42f3bf:	48 8b 46 20          	mov    0x20(%rsi),%rax
  42f3c3:	49 01 d0             	add    %rdx,%r8
  42f3c6:	49 83 d2 00          	adc    $0x0,%r10
  42f3ca:	48 f7 61 38          	mulq   0x38(%rcx)
  42f3ce:	49 01 c0             	add    %rax,%r8
  42f3d1:	48 83 d2 00          	adc    $0x0,%rdx
  42f3d5:	48 8b 46 28          	mov    0x28(%rsi),%rax
  42f3d9:	4c 89 c3             	mov    %r8,%rbx
  42f3dc:	49 01 d2             	add    %rdx,%r10
  42f3df:	49 83 d3 00          	adc    $0x0,%r11
  42f3e3:	48 f7 61 30          	mulq   0x30(%rcx)
  42f3e7:	4d 89 d0             	mov    %r10,%r8
  42f3ea:	4d 89 da             	mov    %r11,%r10
  42f3ed:	48 01 c3             	add    %rax,%rbx
  42f3f0:	48 83 d2 00          	adc    $0x0,%rdx
  42f3f4:	48 8b 46 30          	mov    0x30(%rsi),%rax
  42f3f8:	49 89 db             	mov    %rbx,%r11
  42f3fb:	49 01 d0             	add    %rdx,%r8
  42f3fe:	49 83 d2 00          	adc    $0x0,%r10
  42f402:	48 f7 61 28          	mulq   0x28(%rcx)
  42f406:	49 01 c3             	add    %rax,%r11
  42f409:	48 83 d2 00          	adc    $0x0,%rdx
  42f40d:	48 8b 46 38          	mov    0x38(%rsi),%rax
  42f411:	49 01 d0             	add    %rdx,%r8
  42f414:	49 83 d2 00          	adc    $0x0,%r10
  42f418:	48 f7 61 20          	mulq   0x20(%rcx)
  42f41c:	49 01 c3             	add    %rax,%r11
  42f41f:	48 83 d2 00          	adc    $0x0,%rdx
  42f423:	4c 89 5f 58          	mov    %r11,0x58(%rdi)
  42f427:	4d 89 cb             	mov    %r9,%r11
  42f42a:	48 8b 46 38          	mov    0x38(%rsi),%rax
  42f42e:	49 01 d0             	add    %rdx,%r8
  42f431:	49 83 d2 00          	adc    $0x0,%r10
  42f435:	48 f7 61 28          	mulq   0x28(%rcx)
  42f439:	49 01 c0             	add    %rax,%r8
  42f43c:	48 83 d2 00          	adc    $0x0,%rdx
  42f440:	48 8b 46 30          	mov    0x30(%rsi),%rax
  42f444:	4c 89 c3             	mov    %r8,%rbx
  42f447:	49 01 d2             	add    %rdx,%r10
  42f44a:	49 83 d3 00          	adc    $0x0,%r11
  42f44e:	48 f7 61 30          	mulq   0x30(%rcx)
  42f452:	4d 89 d0             	mov    %r10,%r8
  42f455:	4d 89 da             	mov    %r11,%r10
  42f458:	48 01 c3             	add    %rax,%rbx
  42f45b:	48 83 d2 00          	adc    $0x0,%rdx
  42f45f:	48 8b 46 28          	mov    0x28(%rsi),%rax
  42f463:	49 89 db             	mov    %rbx,%r11
  42f466:	49 01 d0             	add    %rdx,%r8
  42f469:	49 83 d2 00          	adc    $0x0,%r10
  42f46d:	48 f7 61 38          	mulq   0x38(%rcx)
  42f471:	49 01 c3             	add    %rax,%r11
  42f474:	48 83 d2 00          	adc    $0x0,%rdx
  42f478:	49 01 d0             	add    %rdx,%r8
  42f47b:	49 83 d2 00          	adc    $0x0,%r10
  42f47f:	4c 89 5f 60          	mov    %r11,0x60(%rdi)
  42f483:	4d 89 cb             	mov    %r9,%r11
  42f486:	48 8b 46 30          	mov    0x30(%rsi),%rax
  42f48a:	48 f7 61 38          	mulq   0x38(%rcx)
  42f48e:	5b                   	pop    %rbx
  42f48f:	49 01 c0             	add    %rax,%r8
  42f492:	48 83 d2 00          	adc    $0x0,%rdx
  42f496:	48 8b 46 38          	mov    0x38(%rsi),%rax
  42f49a:	49 01 d2             	add    %rdx,%r10
  42f49d:	49 83 d3 00          	adc    $0x0,%r11
  42f4a1:	48 f7 61 30          	mulq   0x30(%rcx)
  42f4a5:	49 01 c0             	add    %rax,%r8
  42f4a8:	48 83 d2 00          	adc    $0x0,%rdx
  42f4ac:	49 01 d2             	add    %rdx,%r10
  42f4af:	49 83 d3 00          	adc    $0x0,%r11
  42f4b3:	4c 89 47 68          	mov    %r8,0x68(%rdi)
  42f4b7:	48 8b 46 38          	mov    0x38(%rsi),%rax
  42f4bb:	48 f7 61 38          	mulq   0x38(%rcx)
  42f4bf:	4c 89 d1             	mov    %r10,%rcx
  42f4c2:	48 01 c1             	add    %rax,%rcx
  42f4c5:	48 83 d2 00          	adc    $0x0,%rdx
  42f4c9:	49 01 d3             	add    %rdx,%r11
  42f4cc:	49 83 d1 00          	adc    $0x0,%r9
  42f4d0:	48 89 4f 70          	mov    %rcx,0x70(%rdi)
  42f4d4:	4c 89 5f 78          	mov    %r11,0x78(%rdi)
  42f4d8:	c3                   	retq   
  42f4d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000042f4e0 <bn_mul_comba4>:
  42f4e0:	45 31 c9             	xor    %r9d,%r9d
  42f4e3:	49 89 d0             	mov    %rdx,%r8
  42f4e6:	48 8b 06             	mov    (%rsi),%rax
  42f4e9:	53                   	push   %rbx
  42f4ea:	4d 89 cb             	mov    %r9,%r11
  42f4ed:	4d 89 ca             	mov    %r9,%r10
  42f4f0:	48 f7 22             	mulq   (%rdx)
  42f4f3:	4c 89 c9             	mov    %r9,%rcx
  42f4f6:	49 01 c3             	add    %rax,%r11
  42f4f9:	48 83 d2 00          	adc    $0x0,%rdx
  42f4fd:	4c 89 1f             	mov    %r11,(%rdi)
  42f500:	4d 89 cb             	mov    %r9,%r11
  42f503:	48 8b 06             	mov    (%rsi),%rax
  42f506:	49 01 d2             	add    %rdx,%r10
  42f509:	48 83 d1 00          	adc    $0x0,%rcx
  42f50d:	49 f7 60 08          	mulq   0x8(%r8)
  42f511:	49 01 c2             	add    %rax,%r10
  42f514:	48 83 d2 00          	adc    $0x0,%rdx
  42f518:	48 8b 46 08          	mov    0x8(%rsi),%rax
  42f51c:	48 01 d1             	add    %rdx,%rcx
  42f51f:	49 83 d3 00          	adc    $0x0,%r11
  42f523:	49 f7 20             	mulq   (%r8)
  42f526:	49 01 c2             	add    %rax,%r10
  42f529:	48 83 d2 00          	adc    $0x0,%rdx
  42f52d:	4c 89 57 08          	mov    %r10,0x8(%rdi)
  42f531:	4d 89 ca             	mov    %r9,%r10
  42f534:	48 8b 46 10          	mov    0x10(%rsi),%rax
  42f538:	48 01 d1             	add    %rdx,%rcx
  42f53b:	49 83 d3 00          	adc    $0x0,%r11
  42f53f:	49 f7 20             	mulq   (%r8)
  42f542:	48 01 c1             	add    %rax,%rcx
  42f545:	48 83 d2 00          	adc    $0x0,%rdx
  42f549:	48 8b 46 08          	mov    0x8(%rsi),%rax
  42f54d:	49 01 d3             	add    %rdx,%r11
  42f550:	49 83 d2 00          	adc    $0x0,%r10
  42f554:	49 f7 60 08          	mulq   0x8(%r8)
  42f558:	48 01 c1             	add    %rax,%rcx
  42f55b:	48 83 d2 00          	adc    $0x0,%rdx
  42f55f:	48 8b 06             	mov    (%rsi),%rax
  42f562:	49 01 d3             	add    %rdx,%r11
  42f565:	49 83 d2 00          	adc    $0x0,%r10
  42f569:	49 f7 60 10          	mulq   0x10(%r8)
  42f56d:	48 01 c1             	add    %rax,%rcx
  42f570:	48 83 d2 00          	adc    $0x0,%rdx
  42f574:	48 89 4f 10          	mov    %rcx,0x10(%rdi)
  42f578:	4c 89 c9             	mov    %r9,%rcx
  42f57b:	48 8b 06             	mov    (%rsi),%rax
  42f57e:	49 01 d3             	add    %rdx,%r11
  42f581:	49 83 d2 00          	adc    $0x0,%r10
  42f585:	49 f7 60 18          	mulq   0x18(%r8)
  42f589:	49 01 c3             	add    %rax,%r11
  42f58c:	48 83 d2 00          	adc    $0x0,%rdx
  42f590:	48 8b 46 08          	mov    0x8(%rsi),%rax
  42f594:	49 01 d2             	add    %rdx,%r10
  42f597:	48 83 d1 00          	adc    $0x0,%rcx
  42f59b:	49 f7 60 10          	mulq   0x10(%r8)
  42f59f:	49 01 c3             	add    %rax,%r11
  42f5a2:	48 83 d2 00          	adc    $0x0,%rdx
  42f5a6:	48 8b 46 10          	mov    0x10(%rsi),%rax
  42f5aa:	49 01 d2             	add    %rdx,%r10
  42f5ad:	48 83 d1 00          	adc    $0x0,%rcx
  42f5b1:	49 f7 60 08          	mulq   0x8(%r8)
  42f5b5:	49 01 c3             	add    %rax,%r11
  42f5b8:	48 83 d2 00          	adc    $0x0,%rdx
  42f5bc:	48 8b 46 18          	mov    0x18(%rsi),%rax
  42f5c0:	49 01 d2             	add    %rdx,%r10
  42f5c3:	48 83 d1 00          	adc    $0x0,%rcx
  42f5c7:	49 f7 20             	mulq   (%r8)
  42f5ca:	49 01 c3             	add    %rax,%r11
  42f5cd:	48 83 d2 00          	adc    $0x0,%rdx
  42f5d1:	4c 89 5f 18          	mov    %r11,0x18(%rdi)
  42f5d5:	4d 89 cb             	mov    %r9,%r11
  42f5d8:	48 8b 46 18          	mov    0x18(%rsi),%rax
  42f5dc:	49 01 d2             	add    %rdx,%r10
  42f5df:	48 83 d1 00          	adc    $0x0,%rcx
  42f5e3:	49 f7 60 08          	mulq   0x8(%r8)
  42f5e7:	49 01 c2             	add    %rax,%r10
  42f5ea:	48 83 d2 00          	adc    $0x0,%rdx
  42f5ee:	48 8b 46 10          	mov    0x10(%rsi),%rax
  42f5f2:	4c 89 d3             	mov    %r10,%rbx
  42f5f5:	48 01 d1             	add    %rdx,%rcx
  42f5f8:	49 83 d3 00          	adc    $0x0,%r11
  42f5fc:	49 f7 60 10          	mulq   0x10(%r8)
  42f600:	4d 89 da             	mov    %r11,%r10
  42f603:	48 01 c3             	add    %rax,%rbx
  42f606:	48 83 d2 00          	adc    $0x0,%rdx
  42f60a:	48 8b 46 08          	mov    0x8(%rsi),%rax
  42f60e:	49 89 db             	mov    %rbx,%r11
  42f611:	48 01 d1             	add    %rdx,%rcx
  42f614:	49 83 d2 00          	adc    $0x0,%r10
  42f618:	5b                   	pop    %rbx
  42f619:	49 f7 60 18          	mulq   0x18(%r8)
  42f61d:	49 01 c3             	add    %rax,%r11
  42f620:	48 83 d2 00          	adc    $0x0,%rdx
  42f624:	4c 89 5f 20          	mov    %r11,0x20(%rdi)
  42f628:	4d 89 cb             	mov    %r9,%r11
  42f62b:	48 8b 46 10          	mov    0x10(%rsi),%rax
  42f62f:	48 01 d1             	add    %rdx,%rcx
  42f632:	49 83 d2 00          	adc    $0x0,%r10
  42f636:	49 f7 60 18          	mulq   0x18(%r8)
  42f63a:	48 01 c1             	add    %rax,%rcx
  42f63d:	48 83 d2 00          	adc    $0x0,%rdx
  42f641:	48 8b 46 18          	mov    0x18(%rsi),%rax
  42f645:	49 01 d2             	add    %rdx,%r10
  42f648:	49 83 d3 00          	adc    $0x0,%r11
  42f64c:	49 f7 60 10          	mulq   0x10(%r8)
  42f650:	48 01 c1             	add    %rax,%rcx
  42f653:	48 83 d2 00          	adc    $0x0,%rdx
  42f657:	49 01 d2             	add    %rdx,%r10
  42f65a:	49 83 d3 00          	adc    $0x0,%r11
  42f65e:	48 89 4f 28          	mov    %rcx,0x28(%rdi)
  42f662:	4c 89 d1             	mov    %r10,%rcx
  42f665:	48 8b 46 18          	mov    0x18(%rsi),%rax
  42f669:	49 f7 60 18          	mulq   0x18(%r8)
  42f66d:	48 01 c1             	add    %rax,%rcx
  42f670:	48 83 d2 00          	adc    $0x0,%rdx
  42f674:	49 01 d3             	add    %rdx,%r11
  42f677:	49 83 d1 00          	adc    $0x0,%r9
  42f67b:	48 89 4f 30          	mov    %rcx,0x30(%rdi)
  42f67f:	4c 89 5f 38          	mov    %r11,0x38(%rdi)
  42f683:	c3                   	retq   
  42f684:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
  42f68b:	00 00 00 00 00 

000000000042f690 <bn_sqr_comba8>:
  42f690:	45 31 c9             	xor    %r9d,%r9d
  42f693:	48 8b 06             	mov    (%rsi),%rax
  42f696:	53                   	push   %rbx
  42f697:	48 f7 e0             	mul    %rax
  42f69a:	4d 89 ca             	mov    %r9,%r10
  42f69d:	4c 89 c9             	mov    %r9,%rcx
  42f6a0:	4d 89 c8             	mov    %r9,%r8
  42f6a3:	49 01 c2             	add    %rax,%r10
  42f6a6:	48 83 d2 00          	adc    $0x0,%rdx
  42f6aa:	4c 89 17             	mov    %r10,(%rdi)
  42f6ad:	4d 89 ca             	mov    %r9,%r10
  42f6b0:	48 8b 46 08          	mov    0x8(%rsi),%rax
  42f6b4:	48 01 d1             	add    %rdx,%rcx
  42f6b7:	49 83 d0 00          	adc    $0x0,%r8
  42f6bb:	48 f7 26             	mulq   (%rsi)
  42f6be:	48 01 d2             	add    %rdx,%rdx
  42f6c1:	49 83 d2 00          	adc    $0x0,%r10
  42f6c5:	48 01 c0             	add    %rax,%rax
  42f6c8:	48 83 d2 00          	adc    $0x0,%rdx
  42f6cc:	48 01 c1             	add    %rax,%rcx
  42f6cf:	48 83 d2 00          	adc    $0x0,%rdx
  42f6d3:	48 89 4f 08          	mov    %rcx,0x8(%rdi)
  42f6d7:	4c 89 c9             	mov    %r9,%rcx
  42f6da:	48 8b 46 08          	mov    0x8(%rsi),%rax
  42f6de:	49 01 d0             	add    %rdx,%r8
  42f6e1:	49 83 d2 00          	adc    $0x0,%r10
  42f6e5:	48 f7 e0             	mul    %rax
  42f6e8:	49 01 c0             	add    %rax,%r8
  42f6eb:	48 83 d2 00          	adc    $0x0,%rdx
  42f6ef:	48 8b 46 10          	mov    0x10(%rsi),%rax
  42f6f3:	49 01 d2             	add    %rdx,%r10
  42f6f6:	48 83 d1 00          	adc    $0x0,%rcx
  42f6fa:	48 f7 26             	mulq   (%rsi)
  42f6fd:	48 01 d2             	add    %rdx,%rdx
  42f700:	48 83 d1 00          	adc    $0x0,%rcx
  42f704:	48 01 c0             	add    %rax,%rax
  42f707:	48 83 d2 00          	adc    $0x0,%rdx
  42f70b:	49 01 c0             	add    %rax,%r8
  42f70e:	48 83 d2 00          	adc    $0x0,%rdx
  42f712:	4c 89 47 10          	mov    %r8,0x10(%rdi)
  42f716:	4d 89 c8             	mov    %r9,%r8
  42f719:	48 8b 46 18          	mov    0x18(%rsi),%rax
  42f71d:	49 01 d2             	add    %rdx,%r10
  42f720:	48 83 d1 00          	adc    $0x0,%rcx
  42f724:	48 f7 26             	mulq   (%rsi)
  42f727:	48 01 d2             	add    %rdx,%rdx
  42f72a:	49 83 d0 00          	adc    $0x0,%r8
  42f72e:	48 01 c0             	add    %rax,%rax
  42f731:	48 83 d2 00          	adc    $0x0,%rdx
  42f735:	49 01 c2             	add    %rax,%r10
  42f738:	48 83 d2 00          	adc    $0x0,%rdx
  42f73c:	48 8b 46 10          	mov    0x10(%rsi),%rax
  42f740:	48 01 d1             	add    %rdx,%rcx
  42f743:	49 83 d0 00          	adc    $0x0,%r8
  42f747:	48 f7 66 08          	mulq   0x8(%rsi)
  42f74b:	48 01 d2             	add    %rdx,%rdx
  42f74e:	49 83 d0 00          	adc    $0x0,%r8
  42f752:	48 01 c0             	add    %rax,%rax
  42f755:	48 83 d2 00          	adc    $0x0,%rdx
  42f759:	49 01 c2             	add    %rax,%r10
  42f75c:	48 83 d2 00          	adc    $0x0,%rdx
  42f760:	4c 89 57 18          	mov    %r10,0x18(%rdi)
  42f764:	4d 89 ca             	mov    %r9,%r10
  42f767:	48 8b 46 10          	mov    0x10(%rsi),%rax
  42f76b:	48 01 d1             	add    %rdx,%rcx
  42f76e:	49 83 d0 00          	adc    $0x0,%r8
  42f772:	48 f7 e0             	mul    %rax
  42f775:	48 01 c1             	add    %rax,%rcx
  42f778:	48 83 d2 00          	adc    $0x0,%rdx
  42f77c:	48 8b 46 18          	mov    0x18(%rsi),%rax
  42f780:	49 01 d0             	add    %rdx,%r8
  42f783:	49 83 d2 00          	adc    $0x0,%r10
  42f787:	48 f7 66 08          	mulq   0x8(%rsi)
  42f78b:	48 01 d2             	add    %rdx,%rdx
  42f78e:	49 83 d2 00          	adc    $0x0,%r10
  42f792:	48 01 c0             	add    %rax,%rax
  42f795:	48 83 d2 00          	adc    $0x0,%rdx
  42f799:	48 01 c1             	add    %rax,%rcx
  42f79c:	48 83 d2 00          	adc    $0x0,%rdx
  42f7a0:	48 8b 46 20          	mov    0x20(%rsi),%rax
  42f7a4:	49 01 d0             	add    %rdx,%r8
  42f7a7:	49 83 d2 00          	adc    $0x0,%r10
  42f7ab:	48 f7 26             	mulq   (%rsi)
  42f7ae:	48 01 d2             	add    %rdx,%rdx
  42f7b1:	49 83 d2 00          	adc    $0x0,%r10
  42f7b5:	48 01 c0             	add    %rax,%rax
  42f7b8:	48 83 d2 00          	adc    $0x0,%rdx
  42f7bc:	48 01 c1             	add    %rax,%rcx
  42f7bf:	48 83 d2 00          	adc    $0x0,%rdx
  42f7c3:	48 89 4f 20          	mov    %rcx,0x20(%rdi)
  42f7c7:	4c 89 c9             	mov    %r9,%rcx
  42f7ca:	48 8b 46 28          	mov    0x28(%rsi),%rax
  42f7ce:	49 01 d0             	add    %rdx,%r8
  42f7d1:	49 83 d2 00          	adc    $0x0,%r10
  42f7d5:	48 f7 26             	mulq   (%rsi)
  42f7d8:	48 01 d2             	add    %rdx,%rdx
  42f7db:	48 83 d1 00          	adc    $0x0,%rcx
  42f7df:	48 01 c0             	add    %rax,%rax
  42f7e2:	48 83 d2 00          	adc    $0x0,%rdx
  42f7e6:	49 01 c0             	add    %rax,%r8
  42f7e9:	48 83 d2 00          	adc    $0x0,%rdx
  42f7ed:	48 8b 46 20          	mov    0x20(%rsi),%rax
  42f7f1:	49 01 d2             	add    %rdx,%r10
  42f7f4:	48 83 d1 00          	adc    $0x0,%rcx
  42f7f8:	48 f7 66 08          	mulq   0x8(%rsi)
  42f7fc:	48 01 d2             	add    %rdx,%rdx
  42f7ff:	48 83 d1 00          	adc    $0x0,%rcx
  42f803:	48 01 c0             	add    %rax,%rax
  42f806:	48 83 d2 00          	adc    $0x0,%rdx
  42f80a:	49 01 c0             	add    %rax,%r8
  42f80d:	48 83 d2 00          	adc    $0x0,%rdx
  42f811:	48 8b 46 18          	mov    0x18(%rsi),%rax
  42f815:	49 01 d2             	add    %rdx,%r10
  42f818:	48 83 d1 00          	adc    $0x0,%rcx
  42f81c:	48 f7 66 10          	mulq   0x10(%rsi)
  42f820:	48 01 d2             	add    %rdx,%rdx
  42f823:	48 83 d1 00          	adc    $0x0,%rcx
  42f827:	48 01 c0             	add    %rax,%rax
  42f82a:	48 83 d2 00          	adc    $0x0,%rdx
  42f82e:	49 01 c0             	add    %rax,%r8
  42f831:	48 83 d2 00          	adc    $0x0,%rdx
  42f835:	4c 89 47 28          	mov    %r8,0x28(%rdi)
  42f839:	4d 89 c8             	mov    %r9,%r8
  42f83c:	48 8b 46 18          	mov    0x18(%rsi),%rax
  42f840:	49 01 d2             	add    %rdx,%r10
  42f843:	48 83 d1 00          	adc    $0x0,%rcx
  42f847:	48 f7 e0             	mul    %rax
  42f84a:	49 01 c2             	add    %rax,%r10
  42f84d:	48 83 d2 00          	adc    $0x0,%rdx
  42f851:	48 8b 46 20          	mov    0x20(%rsi),%rax
  42f855:	48 01 d1             	add    %rdx,%rcx
  42f858:	49 83 d0 00          	adc    $0x0,%r8
  42f85c:	48 f7 66 10          	mulq   0x10(%rsi)
  42f860:	48 01 d2             	add    %rdx,%rdx
  42f863:	49 83 d0 00          	adc    $0x0,%r8
  42f867:	48 01 c0             	add    %rax,%rax
  42f86a:	48 83 d2 00          	adc    $0x0,%rdx
  42f86e:	49 01 c2             	add    %rax,%r10
  42f871:	48 83 d2 00          	adc    $0x0,%rdx
  42f875:	48 8b 46 28          	mov    0x28(%rsi),%rax
  42f879:	48 01 d1             	add    %rdx,%rcx
  42f87c:	49 83 d0 00          	adc    $0x0,%r8
  42f880:	48 f7 66 08          	mulq   0x8(%rsi)
  42f884:	48 01 d2             	add    %rdx,%rdx
  42f887:	49 83 d0 00          	adc    $0x0,%r8
  42f88b:	48 01 c0             	add    %rax,%rax
  42f88e:	48 83 d2 00          	adc    $0x0,%rdx
  42f892:	49 01 c2             	add    %rax,%r10
  42f895:	48 83 d2 00          	adc    $0x0,%rdx
  42f899:	48 8b 46 30          	mov    0x30(%rsi),%rax
  42f89d:	48 01 d1             	add    %rdx,%rcx
  42f8a0:	49 83 d0 00          	adc    $0x0,%r8
  42f8a4:	48 f7 26             	mulq   (%rsi)
  42f8a7:	48 01 d2             	add    %rdx,%rdx
  42f8aa:	49 83 d0 00          	adc    $0x0,%r8
  42f8ae:	48 01 c0             	add    %rax,%rax
  42f8b1:	48 83 d2 00          	adc    $0x0,%rdx
  42f8b5:	49 01 c2             	add    %rax,%r10
  42f8b8:	48 83 d2 00          	adc    $0x0,%rdx
  42f8bc:	4c 89 57 30          	mov    %r10,0x30(%rdi)
  42f8c0:	4d 89 ca             	mov    %r9,%r10
  42f8c3:	48 8b 46 38          	mov    0x38(%rsi),%rax
  42f8c7:	48 01 d1             	add    %rdx,%rcx
  42f8ca:	49 83 d0 00          	adc    $0x0,%r8
  42f8ce:	48 f7 26             	mulq   (%rsi)
  42f8d1:	48 01 d2             	add    %rdx,%rdx
  42f8d4:	49 83 d2 00          	adc    $0x0,%r10
  42f8d8:	48 01 c0             	add    %rax,%rax
  42f8db:	48 83 d2 00          	adc    $0x0,%rdx
  42f8df:	48 01 c1             	add    %rax,%rcx
  42f8e2:	48 83 d2 00          	adc    $0x0,%rdx
  42f8e6:	48 8b 46 30          	mov    0x30(%rsi),%rax
  42f8ea:	49 89 cb             	mov    %rcx,%r11
  42f8ed:	49 01 d0             	add    %rdx,%r8
  42f8f0:	49 83 d2 00          	adc    $0x0,%r10
  42f8f4:	48 f7 66 08          	mulq   0x8(%rsi)
  42f8f8:	48 01 d2             	add    %rdx,%rdx
  42f8fb:	49 83 d2 00          	adc    $0x0,%r10
  42f8ff:	48 01 c0             	add    %rax,%rax
  42f902:	48 83 d2 00          	adc    $0x0,%rdx
  42f906:	4c 89 d1             	mov    %r10,%rcx
  42f909:	4d 89 ca             	mov    %r9,%r10
  42f90c:	49 01 c3             	add    %rax,%r11
  42f90f:	48 83 d2 00          	adc    $0x0,%rdx
  42f913:	48 8b 46 28          	mov    0x28(%rsi),%rax
  42f917:	49 01 d0             	add    %rdx,%r8
  42f91a:	48 83 d1 00          	adc    $0x0,%rcx
  42f91e:	48 f7 66 10          	mulq   0x10(%rsi)
  42f922:	48 01 d2             	add    %rdx,%rdx
  42f925:	48 83 d1 00          	adc    $0x0,%rcx
  42f929:	48 01 c0             	add    %rax,%rax
  42f92c:	48 83 d2 00          	adc    $0x0,%rdx
  42f930:	49 01 c3             	add    %rax,%r11
  42f933:	48 83 d2 00          	adc    $0x0,%rdx
  42f937:	48 8b 46 20          	mov    0x20(%rsi),%rax
  42f93b:	49 01 d0             	add    %rdx,%r8
  42f93e:	48 83 d1 00          	adc    $0x0,%rcx
  42f942:	48 f7 66 18          	mulq   0x18(%rsi)
  42f946:	48 01 d2             	add    %rdx,%rdx
  42f949:	48 83 d1 00          	adc    $0x0,%rcx
  42f94d:	48 01 c0             	add    %rax,%rax
  42f950:	48 83 d2 00          	adc    $0x0,%rdx
  42f954:	49 01 c3             	add    %rax,%r11
  42f957:	48 83 d2 00          	adc    $0x0,%rdx
  42f95b:	4c 89 5f 38          	mov    %r11,0x38(%rdi)
  42f95f:	48 8b 46 20          	mov    0x20(%rsi),%rax
  42f963:	49 01 d0             	add    %rdx,%r8
  42f966:	48 83 d1 00          	adc    $0x0,%rcx
  42f96a:	48 f7 e0             	mul    %rax
  42f96d:	49 01 c0             	add    %rax,%r8
  42f970:	48 83 d2 00          	adc    $0x0,%rdx
  42f974:	48 8b 46 28          	mov    0x28(%rsi),%rax
  42f978:	48 01 d1             	add    %rdx,%rcx
  42f97b:	49 83 d2 00          	adc    $0x0,%r10
  42f97f:	48 f7 66 18          	mulq   0x18(%rsi)
  42f983:	48 01 d2             	add    %rdx,%rdx
  42f986:	49 83 d2 00          	adc    $0x0,%r10
  42f98a:	48 01 c0             	add    %rax,%rax
  42f98d:	48 83 d2 00          	adc    $0x0,%rdx
  42f991:	49 01 c0             	add    %rax,%r8
  42f994:	48 83 d2 00          	adc    $0x0,%rdx
  42f998:	48 8b 46 30          	mov    0x30(%rsi),%rax
  42f99c:	4d 89 c3             	mov    %r8,%r11
  42f99f:	48 01 d1             	add    %rdx,%rcx
  42f9a2:	49 83 d2 00          	adc    $0x0,%r10
  42f9a6:	48 f7 66 10          	mulq   0x10(%rsi)
  42f9aa:	48 01 d2             	add    %rdx,%rdx
  42f9ad:	49 83 d2 00          	adc    $0x0,%r10
  42f9b1:	48 01 c0             	add    %rax,%rax
  42f9b4:	48 83 d2 00          	adc    $0x0,%rdx
  42f9b8:	4d 89 d0             	mov    %r10,%r8
  42f9bb:	4d 89 ca             	mov    %r9,%r10
  42f9be:	49 01 c3             	add    %rax,%r11
  42f9c1:	48 83 d2 00          	adc    $0x0,%rdx
  42f9c5:	48 8b 46 38          	mov    0x38(%rsi),%rax
  42f9c9:	48 01 d1             	add    %rdx,%rcx
  42f9cc:	49 83 d0 00          	adc    $0x0,%r8
  42f9d0:	48 f7 66 08          	mulq   0x8(%rsi)
  42f9d4:	48 01 d2             	add    %rdx,%rdx
  42f9d7:	49 83 d0 00          	adc    $0x0,%r8
  42f9db:	48 01 c0             	add    %rax,%rax
  42f9de:	48 83 d2 00          	adc    $0x0,%rdx
  42f9e2:	49 01 c3             	add    %rax,%r11
  42f9e5:	48 83 d2 00          	adc    $0x0,%rdx
  42f9e9:	4c 89 5f 40          	mov    %r11,0x40(%rdi)
  42f9ed:	48 8b 46 38          	mov    0x38(%rsi),%rax
  42f9f1:	48 01 d1             	add    %rdx,%rcx
  42f9f4:	49 83 d0 00          	adc    $0x0,%r8
  42f9f8:	48 f7 66 10          	mulq   0x10(%rsi)
  42f9fc:	48 01 d2             	add    %rdx,%rdx
  42f9ff:	49 83 d2 00          	adc    $0x0,%r10
  42fa03:	48 01 c0             	add    %rax,%rax
  42fa06:	48 83 d2 00          	adc    $0x0,%rdx
  42fa0a:	48 01 c1             	add    %rax,%rcx
  42fa0d:	48 83 d2 00          	adc    $0x0,%rdx
  42fa11:	48 8b 46 30          	mov    0x30(%rsi),%rax
  42fa15:	49 89 cb             	mov    %rcx,%r11
  42fa18:	49 01 d0             	add    %rdx,%r8
  42fa1b:	49 83 d2 00          	adc    $0x0,%r10
  42fa1f:	48 f7 66 18          	mulq   0x18(%rsi)
  42fa23:	48 01 d2             	add    %rdx,%rdx
  42fa26:	49 83 d2 00          	adc    $0x0,%r10
  42fa2a:	48 01 c0             	add    %rax,%rax
  42fa2d:	48 83 d2 00          	adc    $0x0,%rdx
  42fa31:	4c 89 d1             	mov    %r10,%rcx
  42fa34:	4d 89 ca             	mov    %r9,%r10
  42fa37:	49 01 c3             	add    %rax,%r11
  42fa3a:	48 83 d2 00          	adc    $0x0,%rdx
  42fa3e:	48 8b 46 28          	mov    0x28(%rsi),%rax
  42fa42:	49 01 d0             	add    %rdx,%r8
  42fa45:	48 83 d1 00          	adc    $0x0,%rcx
  42fa49:	48 f7 66 20          	mulq   0x20(%rsi)
  42fa4d:	48 01 d2             	add    %rdx,%rdx
  42fa50:	48 83 d1 00          	adc    $0x0,%rcx
  42fa54:	48 01 c0             	add    %rax,%rax
  42fa57:	48 83 d2 00          	adc    $0x0,%rdx
  42fa5b:	49 01 c3             	add    %rax,%r11
  42fa5e:	48 83 d2 00          	adc    $0x0,%rdx
  42fa62:	4c 89 5f 48          	mov    %r11,0x48(%rdi)
  42fa66:	4d 89 cb             	mov    %r9,%r11
  42fa69:	48 8b 46 28          	mov    0x28(%rsi),%rax
  42fa6d:	49 01 d0             	add    %rdx,%r8
  42fa70:	48 83 d1 00          	adc    $0x0,%rcx
  42fa74:	48 f7 e0             	mul    %rax
  42fa77:	49 01 c0             	add    %rax,%r8
  42fa7a:	48 83 d2 00          	adc    $0x0,%rdx
  42fa7e:	48 8b 46 30          	mov    0x30(%rsi),%rax
  42fa82:	48 01 d1             	add    %rdx,%rcx
  42fa85:	49 83 d2 00          	adc    $0x0,%r10
  42fa89:	48 f7 66 20          	mulq   0x20(%rsi)
  42fa8d:	48 01 d2             	add    %rdx,%rdx
  42fa90:	49 83 d2 00          	adc    $0x0,%r10
  42fa94:	48 01 c0             	add    %rax,%rax
  42fa97:	48 83 d2 00          	adc    $0x0,%rdx
  42fa9b:	49 01 c0             	add    %rax,%r8
  42fa9e:	48 83 d2 00          	adc    $0x0,%rdx
  42faa2:	48 8b 46 38          	mov    0x38(%rsi),%rax
  42faa6:	48 01 d1             	add    %rdx,%rcx
  42faa9:	49 83 d2 00          	adc    $0x0,%r10
  42faad:	48 f7 66 18          	mulq   0x18(%rsi)
  42fab1:	48 01 d2             	add    %rdx,%rdx
  42fab4:	49 83 d2 00          	adc    $0x0,%r10
  42fab8:	48 01 c0             	add    %rax,%rax
  42fabb:	48 83 d2 00          	adc    $0x0,%rdx
  42fabf:	49 01 c0             	add    %rax,%r8
  42fac2:	48 83 d2 00          	adc    $0x0,%rdx
  42fac6:	4c 89 47 50          	mov    %r8,0x50(%rdi)
  42faca:	48 8b 46 38          	mov    0x38(%rsi),%rax
  42face:	48 01 d1             	add    %rdx,%rcx
  42fad1:	49 83 d2 00          	adc    $0x0,%r10
  42fad5:	48 f7 66 20          	mulq   0x20(%rsi)
  42fad9:	48 89 cb             	mov    %rcx,%rbx
  42fadc:	4d 89 d0             	mov    %r10,%r8
  42fadf:	48 01 d2             	add    %rdx,%rdx
  42fae2:	49 83 d3 00          	adc    $0x0,%r11
  42fae6:	48 01 c0             	add    %rax,%rax
  42fae9:	48 83 d2 00          	adc    $0x0,%rdx
  42faed:	4c 89 d9             	mov    %r11,%rcx
  42faf0:	4d 89 cb             	mov    %r9,%r11
  42faf3:	48 01 c3             	add    %rax,%rbx
  42faf6:	48 83 d2 00          	adc    $0x0,%rdx
  42fafa:	48 8b 46 30          	mov    0x30(%rsi),%rax
  42fafe:	49 01 d0             	add    %rdx,%r8
  42fb01:	48 83 d1 00          	adc    $0x0,%rcx
  42fb05:	48 f7 66 28          	mulq   0x28(%rsi)
  42fb09:	48 01 d2             	add    %rdx,%rdx
  42fb0c:	48 83 d1 00          	adc    $0x0,%rcx
  42fb10:	48 01 c0             	add    %rax,%rax
  42fb13:	48 83 d2 00          	adc    $0x0,%rdx
  42fb17:	48 01 c3             	add    %rax,%rbx
  42fb1a:	48 83 d2 00          	adc    $0x0,%rdx
  42fb1e:	48 89 5f 58          	mov    %rbx,0x58(%rdi)
  42fb22:	48 8b 46 30          	mov    0x30(%rsi),%rax
  42fb26:	49 01 d0             	add    %rdx,%r8
  42fb29:	48 83 d1 00          	adc    $0x0,%rcx
  42fb2d:	48 f7 e0             	mul    %rax
  42fb30:	49 01 c0             	add    %rax,%r8
  42fb33:	48 83 d2 00          	adc    $0x0,%rdx
  42fb37:	48 8b 46 38          	mov    0x38(%rsi),%rax
  42fb3b:	48 01 d1             	add    %rdx,%rcx
  42fb3e:	49 83 d3 00          	adc    $0x0,%r11
  42fb42:	48 f7 66 28          	mulq   0x28(%rsi)
  42fb46:	49 89 ca             	mov    %rcx,%r10
  42fb49:	48 01 d2             	add    %rdx,%rdx
  42fb4c:	49 83 d3 00          	adc    $0x0,%r11
  42fb50:	5b                   	pop    %rbx
  42fb51:	48 01 c0             	add    %rax,%rax
  42fb54:	48 83 d2 00          	adc    $0x0,%rdx
  42fb58:	4c 89 d9             	mov    %r11,%rcx
  42fb5b:	49 01 c0             	add    %rax,%r8
  42fb5e:	48 83 d2 00          	adc    $0x0,%rdx
  42fb62:	4c 89 47 60          	mov    %r8,0x60(%rdi)
  42fb66:	4d 89 c8             	mov    %r9,%r8
  42fb69:	48 8b 46 38          	mov    0x38(%rsi),%rax
  42fb6d:	49 01 d2             	add    %rdx,%r10
  42fb70:	48 83 d1 00          	adc    $0x0,%rcx
  42fb74:	48 f7 66 30          	mulq   0x30(%rsi)
  42fb78:	48 01 d2             	add    %rdx,%rdx
  42fb7b:	49 83 d0 00          	adc    $0x0,%r8
  42fb7f:	48 01 c0             	add    %rax,%rax
  42fb82:	48 83 d2 00          	adc    $0x0,%rdx
  42fb86:	49 01 c2             	add    %rax,%r10
  42fb89:	48 83 d2 00          	adc    $0x0,%rdx
  42fb8d:	48 01 d1             	add    %rdx,%rcx
  42fb90:	49 83 d0 00          	adc    $0x0,%r8
  42fb94:	4c 89 57 68          	mov    %r10,0x68(%rdi)
  42fb98:	48 8b 46 38          	mov    0x38(%rsi),%rax
  42fb9c:	48 f7 e0             	mul    %rax
  42fb9f:	48 01 c1             	add    %rax,%rcx
  42fba2:	48 83 d2 00          	adc    $0x0,%rdx
  42fba6:	49 01 d0             	add    %rdx,%r8
  42fba9:	49 83 d1 00          	adc    $0x0,%r9
  42fbad:	48 89 4f 70          	mov    %rcx,0x70(%rdi)
  42fbb1:	4c 89 47 78          	mov    %r8,0x78(%rdi)
  42fbb5:	c3                   	retq   
  42fbb6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  42fbbd:	00 00 00 

000000000042fbc0 <bn_sqr_comba4>:
  42fbc0:	45 31 d2             	xor    %r10d,%r10d
  42fbc3:	48 8b 06             	mov    (%rsi),%rax
  42fbc6:	4d 89 d1             	mov    %r10,%r9
  42fbc9:	4c 89 d1             	mov    %r10,%rcx
  42fbcc:	4d 89 d0             	mov    %r10,%r8
  42fbcf:	48 f7 e0             	mul    %rax
  42fbd2:	4d 89 d3             	mov    %r10,%r11
  42fbd5:	49 01 c1             	add    %rax,%r9
  42fbd8:	48 83 d2 00          	adc    $0x0,%rdx
  42fbdc:	4c 89 0f             	mov    %r9,(%rdi)
  42fbdf:	4d 89 d1             	mov    %r10,%r9
  42fbe2:	48 8b 46 08          	mov    0x8(%rsi),%rax
  42fbe6:	48 01 d1             	add    %rdx,%rcx
  42fbe9:	49 83 d0 00          	adc    $0x0,%r8
  42fbed:	48 f7 26             	mulq   (%rsi)
  42fbf0:	48 01 d2             	add    %rdx,%rdx
  42fbf3:	49 83 d1 00          	adc    $0x0,%r9
  42fbf7:	48 01 c0             	add    %rax,%rax
  42fbfa:	48 83 d2 00          	adc    $0x0,%rdx
  42fbfe:	48 01 c1             	add    %rax,%rcx
  42fc01:	48 83 d2 00          	adc    $0x0,%rdx
  42fc05:	48 89 4f 08          	mov    %rcx,0x8(%rdi)
  42fc09:	48 8b 46 08          	mov    0x8(%rsi),%rax
  42fc0d:	49 01 d0             	add    %rdx,%r8
  42fc10:	49 83 d1 00          	adc    $0x0,%r9
  42fc14:	48 f7 e0             	mul    %rax
  42fc17:	4c 89 c1             	mov    %r8,%rcx
  42fc1a:	4d 89 d0             	mov    %r10,%r8
  42fc1d:	48 01 c1             	add    %rax,%rcx
  42fc20:	48 83 d2 00          	adc    $0x0,%rdx
  42fc24:	48 8b 46 10          	mov    0x10(%rsi),%rax
  42fc28:	49 01 d1             	add    %rdx,%r9
  42fc2b:	49 83 d0 00          	adc    $0x0,%r8
  42fc2f:	48 f7 26             	mulq   (%rsi)
  42fc32:	48 01 d2             	add    %rdx,%rdx
  42fc35:	49 83 d0 00          	adc    $0x0,%r8
  42fc39:	48 01 c0             	add    %rax,%rax
  42fc3c:	48 83 d2 00          	adc    $0x0,%rdx
  42fc40:	48 01 c1             	add    %rax,%rcx
  42fc43:	48 83 d2 00          	adc    $0x0,%rdx
  42fc47:	48 89 4f 10          	mov    %rcx,0x10(%rdi)
  42fc4b:	4c 89 d1             	mov    %r10,%rcx
  42fc4e:	48 8b 46 18          	mov    0x18(%rsi),%rax
  42fc52:	49 01 d1             	add    %rdx,%r9
  42fc55:	49 83 d0 00          	adc    $0x0,%r8
  42fc59:	48 f7 26             	mulq   (%rsi)
  42fc5c:	48 01 d2             	add    %rdx,%rdx
  42fc5f:	48 83 d1 00          	adc    $0x0,%rcx
  42fc63:	48 01 c0             	add    %rax,%rax
  42fc66:	48 83 d2 00          	adc    $0x0,%rdx
  42fc6a:	49 01 c1             	add    %rax,%r9
  42fc6d:	48 83 d2 00          	adc    $0x0,%rdx
  42fc71:	48 8b 46 10          	mov    0x10(%rsi),%rax
  42fc75:	49 01 d0             	add    %rdx,%r8
  42fc78:	48 83 d1 00          	adc    $0x0,%rcx
  42fc7c:	48 f7 66 08          	mulq   0x8(%rsi)
  42fc80:	48 01 d2             	add    %rdx,%rdx
  42fc83:	48 83 d1 00          	adc    $0x0,%rcx
  42fc87:	48 01 c0             	add    %rax,%rax
  42fc8a:	48 83 d2 00          	adc    $0x0,%rdx
  42fc8e:	49 01 c1             	add    %rax,%r9
  42fc91:	48 83 d2 00          	adc    $0x0,%rdx
  42fc95:	4c 89 4f 18          	mov    %r9,0x18(%rdi)
  42fc99:	48 8b 46 10          	mov    0x10(%rsi),%rax
  42fc9d:	49 01 d0             	add    %rdx,%r8
  42fca0:	48 83 d1 00          	adc    $0x0,%rcx
  42fca4:	48 f7 e0             	mul    %rax
  42fca7:	49 01 c0             	add    %rax,%r8
  42fcaa:	48 83 d2 00          	adc    $0x0,%rdx
  42fcae:	48 8b 46 18          	mov    0x18(%rsi),%rax
  42fcb2:	48 01 d1             	add    %rdx,%rcx
  42fcb5:	49 83 d3 00          	adc    $0x0,%r11
  42fcb9:	48 f7 66 08          	mulq   0x8(%rsi)
  42fcbd:	49 89 c9             	mov    %rcx,%r9
  42fcc0:	48 01 d2             	add    %rdx,%rdx
  42fcc3:	49 83 d3 00          	adc    $0x0,%r11
  42fcc7:	48 01 c0             	add    %rax,%rax
  42fcca:	48 83 d2 00          	adc    $0x0,%rdx
  42fcce:	4c 89 d9             	mov    %r11,%rcx
  42fcd1:	49 01 c0             	add    %rax,%r8
  42fcd4:	48 83 d2 00          	adc    $0x0,%rdx
  42fcd8:	49 01 d1             	add    %rdx,%r9
  42fcdb:	48 83 d1 00          	adc    $0x0,%rcx
  42fcdf:	4c 89 47 20          	mov    %r8,0x20(%rdi)
  42fce3:	4d 89 d0             	mov    %r10,%r8
  42fce6:	48 8b 46 18          	mov    0x18(%rsi),%rax
  42fcea:	48 f7 66 10          	mulq   0x10(%rsi)
  42fcee:	48 01 d2             	add    %rdx,%rdx
  42fcf1:	49 83 d0 00          	adc    $0x0,%r8
  42fcf5:	48 01 c0             	add    %rax,%rax
  42fcf8:	48 83 d2 00          	adc    $0x0,%rdx
  42fcfc:	49 01 c1             	add    %rax,%r9
  42fcff:	48 83 d2 00          	adc    $0x0,%rdx
  42fd03:	48 01 d1             	add    %rdx,%rcx
  42fd06:	49 83 d0 00          	adc    $0x0,%r8
  42fd0a:	4c 89 4f 28          	mov    %r9,0x28(%rdi)
  42fd0e:	48 8b 46 18          	mov    0x18(%rsi),%rax
  42fd12:	48 f7 e0             	mul    %rax
  42fd15:	48 01 c1             	add    %rax,%rcx
  42fd18:	48 83 d2 00          	adc    $0x0,%rdx
  42fd1c:	49 01 d0             	add    %rdx,%r8
  42fd1f:	49 83 d2 00          	adc    $0x0,%r10
  42fd23:	48 89 4f 30          	mov    %rcx,0x30(%rdi)
  42fd27:	4c 89 47 38          	mov    %r8,0x38(%rdi)
  42fd2b:	c3                   	retq   
  42fd2c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000042fd30 <BIO_new>:
  42fd30:	41 54                	push   %r12
  42fd32:	55                   	push   %rbp
  42fd33:	ba 46 00 00 00       	mov    $0x46,%edx
  42fd38:	53                   	push   %rbx
  42fd39:	48 89 fd             	mov    %rdi,%rbp
  42fd3c:	be f1 09 45 00       	mov    $0x4509f1,%esi
  42fd41:	bf 70 00 00 00       	mov    $0x70,%edi
  42fd46:	e8 b5 56 ff ff       	callq  425400 <CRYPTO_malloc>
  42fd4b:	48 85 c0             	test   %rax,%rax
  42fd4e:	48 89 c3             	mov    %rax,%rbx
  42fd51:	0f 84 b9 00 00 00    	je     42fe10 <BIO_new+0xe0>
  42fd57:	4c 8d 60 60          	lea    0x60(%rax),%r12
  42fd5b:	31 ff                	xor    %edi,%edi
  42fd5d:	48 89 28             	mov    %rbp,(%rax)
  42fd60:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  42fd67:	00 
  42fd68:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  42fd6f:	00 
  42fd70:	48 89 c6             	mov    %rax,%rsi
  42fd73:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%rax)
  42fd7a:	c7 40 1c 01 00 00 00 	movl   $0x1,0x1c(%rax)
  42fd81:	4c 89 e2             	mov    %r12,%rdx
  42fd84:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%rax)
  42fd8b:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%rax)
  42fd92:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%rax)
  42fd99:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
  42fda0:	00 
  42fda1:	48 c7 40 40 00 00 00 	movq   $0x0,0x40(%rax)
  42fda8:	00 
  42fda9:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
  42fdb0:	00 
  42fdb1:	c7 40 48 01 00 00 00 	movl   $0x1,0x48(%rax)
  42fdb8:	48 c7 40 50 00 00 00 	movq   $0x0,0x50(%rax)
  42fdbf:	00 
  42fdc0:	48 c7 40 58 00 00 00 	movq   $0x0,0x58(%rax)
  42fdc7:	00 
  42fdc8:	e8 c3 7a 00 00       	callq  437890 <CRYPTO_new_ex_data>
  42fdcd:	48 8b 45 38          	mov    0x38(%rbp),%rax
  42fdd1:	48 85 c0             	test   %rax,%rax
  42fdd4:	74 09                	je     42fddf <BIO_new+0xaf>
  42fdd6:	48 89 df             	mov    %rbx,%rdi
  42fdd9:	ff d0                	callq  *%rax
  42fddb:	85 c0                	test   %eax,%eax
  42fddd:	74 11                	je     42fdf0 <BIO_new+0xc0>
  42fddf:	48 89 d8             	mov    %rbx,%rax
  42fde2:	5b                   	pop    %rbx
  42fde3:	5d                   	pop    %rbp
  42fde4:	41 5c                	pop    %r12
  42fde6:	c3                   	retq   
  42fde7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  42fdee:	00 00 
  42fdf0:	4c 89 e2             	mov    %r12,%rdx
  42fdf3:	48 89 de             	mov    %rbx,%rsi
  42fdf6:	31 ff                	xor    %edi,%edi
  42fdf8:	e8 b3 7b 00 00       	callq  4379b0 <CRYPTO_free_ex_data>
  42fdfd:	48 89 df             	mov    %rbx,%rdi
  42fe00:	e8 5b 59 ff ff       	callq  425760 <CRYPTO_free>
  42fe05:	5b                   	pop    %rbx
  42fe06:	31 c0                	xor    %eax,%eax
  42fe08:	5d                   	pop    %rbp
  42fe09:	41 5c                	pop    %r12
  42fe0b:	c3                   	retq   
  42fe0c:	0f 1f 40 00          	nopl   0x0(%rax)
  42fe10:	41 b8 49 00 00 00    	mov    $0x49,%r8d
  42fe16:	b9 f1 09 45 00       	mov    $0x4509f1,%ecx
  42fe1b:	ba 41 00 00 00       	mov    $0x41,%edx
  42fe20:	be 6c 00 00 00       	mov    $0x6c,%esi
  42fe25:	bf 20 00 00 00       	mov    $0x20,%edi
  42fe2a:	e8 21 85 ff ff       	callq  428350 <ERR_put_error>
  42fe2f:	31 c0                	xor    %eax,%eax
  42fe31:	eb af                	jmp    42fde2 <BIO_new+0xb2>
  42fe33:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  42fe3a:	84 00 00 00 00 00 

000000000042fe40 <BIO_set>:
  42fe40:	41 54                	push   %r12
  42fe42:	4c 8d 67 60          	lea    0x60(%rdi),%r12
  42fe46:	55                   	push   %rbp
  42fe47:	53                   	push   %rbx
  42fe48:	48 89 fb             	mov    %rdi,%rbx
  42fe4b:	48 89 f5             	mov    %rsi,%rbp
  42fe4e:	4c 89 e2             	mov    %r12,%rdx
  42fe51:	48 83 ec 10          	sub    $0x10,%rsp
  42fe55:	48 89 33             	mov    %rsi,(%rbx)
  42fe58:	48 c7 47 08 00 00 00 	movq   $0x0,0x8(%rdi)
  42fe5f:	00 
  42fe60:	48 c7 47 10 00 00 00 	movq   $0x0,0x10(%rdi)
  42fe67:	00 
  42fe68:	c7 47 18 00 00 00 00 	movl   $0x0,0x18(%rdi)
  42fe6f:	48 89 fe             	mov    %rdi,%rsi
  42fe72:	c7 47 1c 01 00 00 00 	movl   $0x1,0x1c(%rdi)
  42fe79:	c7 47 20 00 00 00 00 	movl   $0x0,0x20(%rdi)
  42fe80:	c7 47 24 00 00 00 00 	movl   $0x0,0x24(%rdi)
  42fe87:	c7 47 28 00 00 00 00 	movl   $0x0,0x28(%rdi)
  42fe8e:	48 c7 47 30 00 00 00 	movq   $0x0,0x30(%rdi)
  42fe95:	00 
  42fe96:	48 c7 47 40 00 00 00 	movq   $0x0,0x40(%rdi)
  42fe9d:	00 
  42fe9e:	48 c7 47 38 00 00 00 	movq   $0x0,0x38(%rdi)
  42fea5:	00 
  42fea6:	c7 47 48 01 00 00 00 	movl   $0x1,0x48(%rdi)
  42fead:	48 c7 47 50 00 00 00 	movq   $0x0,0x50(%rdi)
  42feb4:	00 
  42feb5:	48 c7 47 58 00 00 00 	movq   $0x0,0x58(%rdi)
  42febc:	00 
  42febd:	31 ff                	xor    %edi,%edi
  42febf:	e8 cc 79 00 00       	callq  437890 <CRYPTO_new_ex_data>
  42fec4:	48 8b 45 38          	mov    0x38(%rbp),%rax
  42fec8:	48 85 c0             	test   %rax,%rax
  42fecb:	74 09                	je     42fed6 <BIO_set+0x96>
  42fecd:	48 89 df             	mov    %rbx,%rdi
  42fed0:	ff d0                	callq  *%rax
  42fed2:	85 c0                	test   %eax,%eax
  42fed4:	74 12                	je     42fee8 <BIO_set+0xa8>
  42fed6:	48 83 c4 10          	add    $0x10,%rsp
  42feda:	b8 01 00 00 00       	mov    $0x1,%eax
  42fedf:	5b                   	pop    %rbx
  42fee0:	5d                   	pop    %rbp
  42fee1:	41 5c                	pop    %r12
  42fee3:	c3                   	retq   
  42fee4:	0f 1f 40 00          	nopl   0x0(%rax)
  42fee8:	4c 89 e2             	mov    %r12,%rdx
  42feeb:	48 89 de             	mov    %rbx,%rsi
  42feee:	31 ff                	xor    %edi,%edi
  42fef0:	89 44 24 0c          	mov    %eax,0xc(%rsp)
  42fef4:	e8 b7 7a 00 00       	callq  4379b0 <CRYPTO_free_ex_data>
  42fef9:	8b 44 24 0c          	mov    0xc(%rsp),%eax
  42fefd:	48 83 c4 10          	add    $0x10,%rsp
  42ff01:	5b                   	pop    %rbx
  42ff02:	5d                   	pop    %rbp
  42ff03:	41 5c                	pop    %r12
  42ff05:	c3                   	retq   
  42ff06:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  42ff0d:	00 00 00 

000000000042ff10 <BIO_free>:
  42ff10:	31 c0                	xor    %eax,%eax
  42ff12:	48 85 ff             	test   %rdi,%rdi
  42ff15:	74 2c                	je     42ff43 <BIO_free+0x33>
  42ff17:	53                   	push   %rbx
  42ff18:	48 89 fb             	mov    %rdi,%rbx
  42ff1b:	48 8d 7f 48          	lea    0x48(%rdi),%rdi
  42ff1f:	41 b8 75 00 00 00    	mov    $0x75,%r8d
  42ff25:	b9 f1 09 45 00       	mov    $0x4509f1,%ecx
  42ff2a:	ba 15 00 00 00       	mov    $0x15,%edx
  42ff2f:	be ff ff ff ff       	mov    $0xffffffff,%esi
  42ff34:	e8 47 4f ff ff       	callq  424e80 <CRYPTO_add_lock>
  42ff39:	85 c0                	test   %eax,%eax
  42ff3b:	7e 0b                	jle    42ff48 <BIO_free+0x38>
  42ff3d:	b8 01 00 00 00       	mov    $0x1,%eax
  42ff42:	5b                   	pop    %rbx
  42ff43:	f3 c3                	repz retq 
  42ff45:	0f 1f 00             	nopl   (%rax)
  42ff48:	48 8b 43 08          	mov    0x8(%rbx),%rax
  42ff4c:	48 85 c0             	test   %rax,%rax
  42ff4f:	74 1b                	je     42ff6c <BIO_free+0x5c>
  42ff51:	45 31 c0             	xor    %r8d,%r8d
  42ff54:	31 c9                	xor    %ecx,%ecx
  42ff56:	31 d2                	xor    %edx,%edx
  42ff58:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  42ff5e:	be 01 00 00 00       	mov    $0x1,%esi
  42ff63:	48 89 df             	mov    %rbx,%rdi
  42ff66:	ff d0                	callq  *%rax
  42ff68:	85 c0                	test   %eax,%eax
  42ff6a:	7e d6                	jle    42ff42 <BIO_free+0x32>
  42ff6c:	48 8d 53 60          	lea    0x60(%rbx),%rdx
  42ff70:	31 ff                	xor    %edi,%edi
  42ff72:	48 89 de             	mov    %rbx,%rsi
  42ff75:	e8 36 7a 00 00       	callq  4379b0 <CRYPTO_free_ex_data>
  42ff7a:	48 8b 03             	mov    (%rbx),%rax
  42ff7d:	48 85 c0             	test   %rax,%rax
  42ff80:	74 bb                	je     42ff3d <BIO_free+0x2d>
  42ff82:	48 8b 40 40          	mov    0x40(%rax),%rax
  42ff86:	48 85 c0             	test   %rax,%rax
  42ff89:	74 b2                	je     42ff3d <BIO_free+0x2d>
  42ff8b:	48 89 df             	mov    %rbx,%rdi
  42ff8e:	ff d0                	callq  *%rax
  42ff90:	48 89 df             	mov    %rbx,%rdi
  42ff93:	e8 c8 57 ff ff       	callq  425760 <CRYPTO_free>
  42ff98:	b8 01 00 00 00       	mov    $0x1,%eax
  42ff9d:	eb a3                	jmp    42ff42 <BIO_free+0x32>
  42ff9f:	90                   	nop

000000000042ffa0 <BIO_vfree>:
  42ffa0:	48 85 ff             	test   %rdi,%rdi
  42ffa3:	74 27                	je     42ffcc <BIO_vfree+0x2c>
  42ffa5:	53                   	push   %rbx
  42ffa6:	48 89 fb             	mov    %rdi,%rbx
  42ffa9:	48 8d 7f 48          	lea    0x48(%rdi),%rdi
  42ffad:	41 b8 75 00 00 00    	mov    $0x75,%r8d
  42ffb3:	b9 f1 09 45 00       	mov    $0x4509f1,%ecx
  42ffb8:	ba 15 00 00 00       	mov    $0x15,%edx
  42ffbd:	be ff ff ff ff       	mov    $0xffffffff,%esi
  42ffc2:	e8 b9 4e ff ff       	callq  424e80 <CRYPTO_add_lock>
  42ffc7:	85 c0                	test   %eax,%eax
  42ffc9:	7e 05                	jle    42ffd0 <BIO_vfree+0x30>
  42ffcb:	5b                   	pop    %rbx
  42ffcc:	f3 c3                	repz retq 
  42ffce:	66 90                	xchg   %ax,%ax
  42ffd0:	48 8b 43 08          	mov    0x8(%rbx),%rax
  42ffd4:	48 85 c0             	test   %rax,%rax
  42ffd7:	74 1b                	je     42fff4 <BIO_vfree+0x54>
  42ffd9:	45 31 c0             	xor    %r8d,%r8d
  42ffdc:	31 c9                	xor    %ecx,%ecx
  42ffde:	31 d2                	xor    %edx,%edx
  42ffe0:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  42ffe6:	be 01 00 00 00       	mov    $0x1,%esi
  42ffeb:	48 89 df             	mov    %rbx,%rdi
  42ffee:	ff d0                	callq  *%rax
  42fff0:	85 c0                	test   %eax,%eax
  42fff2:	7e d7                	jle    42ffcb <BIO_vfree+0x2b>
  42fff4:	48 8d 53 60          	lea    0x60(%rbx),%rdx
  42fff8:	31 ff                	xor    %edi,%edi
  42fffa:	48 89 de             	mov    %rbx,%rsi
  42fffd:	e8 ae 79 00 00       	callq  4379b0 <CRYPTO_free_ex_data>
  430002:	48 8b 03             	mov    (%rbx),%rax
  430005:	48 85 c0             	test   %rax,%rax
  430008:	74 c1                	je     42ffcb <BIO_vfree+0x2b>
  43000a:	48 8b 40 40          	mov    0x40(%rax),%rax
  43000e:	48 85 c0             	test   %rax,%rax
  430011:	74 b8                	je     42ffcb <BIO_vfree+0x2b>
  430013:	48 89 df             	mov    %rbx,%rdi
  430016:	ff d0                	callq  *%rax
  430018:	48 89 df             	mov    %rbx,%rdi
  43001b:	5b                   	pop    %rbx
  43001c:	e9 3f 57 ff ff       	jmpq   425760 <CRYPTO_free>
  430021:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  430028:	0f 1f 84 00 00 00 00 
  43002f:	00 

0000000000430030 <BIO_clear_flags>:
  430030:	f7 d6                	not    %esi
  430032:	21 77 20             	and    %esi,0x20(%rdi)
  430035:	c3                   	retq   
  430036:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  43003d:	00 00 00 

0000000000430040 <BIO_test_flags>:
  430040:	8b 47 20             	mov    0x20(%rdi),%eax
  430043:	21 f0                	and    %esi,%eax
  430045:	c3                   	retq   
  430046:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  43004d:	00 00 00 

0000000000430050 <BIO_set_flags>:
  430050:	09 77 20             	or     %esi,0x20(%rdi)
  430053:	c3                   	retq   
  430054:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
  43005b:	00 00 00 00 00 

0000000000430060 <BIO_get_callback>:
  430060:	48 8b 47 08          	mov    0x8(%rdi),%rax
  430064:	c3                   	retq   
  430065:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  43006c:	00 00 00 00 

0000000000430070 <BIO_set_callback>:
  430070:	48 89 77 08          	mov    %rsi,0x8(%rdi)
  430074:	c3                   	retq   
  430075:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  43007c:	00 00 00 00 

0000000000430080 <BIO_set_callback_arg>:
  430080:	48 89 77 10          	mov    %rsi,0x10(%rdi)
  430084:	c3                   	retq   
  430085:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  43008c:	00 00 00 00 

0000000000430090 <BIO_get_callback_arg>:
  430090:	48 8b 47 10          	mov    0x10(%rdi),%rax
  430094:	c3                   	retq   
  430095:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  43009c:	00 00 00 00 

00000000004300a0 <BIO_method_name>:
  4300a0:	48 8b 07             	mov    (%rdi),%rax
  4300a3:	48 8b 40 08          	mov    0x8(%rax),%rax
  4300a7:	c3                   	retq   
  4300a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4300af:	00 

00000000004300b0 <BIO_method_type>:
  4300b0:	48 8b 07             	mov    (%rdi),%rax
  4300b3:	8b 00                	mov    (%rax),%eax
  4300b5:	c3                   	retq   
  4300b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4300bd:	00 00 00 

00000000004300c0 <BIO_read>:
  4300c0:	41 55                	push   %r13
  4300c2:	41 54                	push   %r12
  4300c4:	55                   	push   %rbp
  4300c5:	53                   	push   %rbx
  4300c6:	48 89 fb             	mov    %rdi,%rbx
  4300c9:	48 83 ec 08          	sub    $0x8,%rsp
  4300cd:	48 85 ff             	test   %rdi,%rdi
  4300d0:	0f 84 ba 00 00 00    	je     430190 <BIO_read+0xd0>
  4300d6:	48 8b 07             	mov    (%rdi),%rax
  4300d9:	48 85 c0             	test   %rax,%rax
  4300dc:	0f 84 ae 00 00 00    	je     430190 <BIO_read+0xd0>
  4300e2:	48 83 78 18 00       	cmpq   $0x0,0x18(%rax)
  4300e7:	0f 84 a3 00 00 00    	je     430190 <BIO_read+0xd0>
  4300ed:	4c 8b 6f 08          	mov    0x8(%rdi),%r13
  4300f1:	48 89 f5             	mov    %rsi,%rbp
  4300f4:	41 89 d4             	mov    %edx,%r12d
  4300f7:	4d 85 ed             	test   %r13,%r13
  4300fa:	74 1a                	je     430116 <BIO_read+0x56>
  4300fc:	45 31 c0             	xor    %r8d,%r8d
  4300ff:	89 d1                	mov    %edx,%ecx
  430101:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  430107:	48 89 f2             	mov    %rsi,%rdx
  43010a:	be 02 00 00 00       	mov    $0x2,%esi
  43010f:	41 ff d5             	callq  *%r13
  430112:	85 c0                	test   %eax,%eax
  430114:	7e 3d                	jle    430153 <BIO_read+0x93>
  430116:	8b 43 18             	mov    0x18(%rbx),%eax
  430119:	85 c0                	test   %eax,%eax
  43011b:	74 43                	je     430160 <BIO_read+0xa0>
  43011d:	48 8b 03             	mov    (%rbx),%rax
  430120:	44 89 e2             	mov    %r12d,%edx
  430123:	48 89 ee             	mov    %rbp,%rsi
  430126:	48 89 df             	mov    %rbx,%rdi
  430129:	ff 50 18             	callq  *0x18(%rax)
  43012c:	85 c0                	test   %eax,%eax
  43012e:	7e 07                	jle    430137 <BIO_read+0x77>
  430130:	48 63 d0             	movslq %eax,%rdx
  430133:	48 01 53 50          	add    %rdx,0x50(%rbx)
  430137:	4d 85 ed             	test   %r13,%r13
  43013a:	74 17                	je     430153 <BIO_read+0x93>
  43013c:	4c 63 c8             	movslq %eax,%r9
  43013f:	45 31 c0             	xor    %r8d,%r8d
  430142:	44 89 e1             	mov    %r12d,%ecx
  430145:	48 89 ea             	mov    %rbp,%rdx
  430148:	be 82 00 00 00       	mov    $0x82,%esi
  43014d:	48 89 df             	mov    %rbx,%rdi
  430150:	41 ff d5             	callq  *%r13
  430153:	48 83 c4 08          	add    $0x8,%rsp
  430157:	5b                   	pop    %rbx
  430158:	5d                   	pop    %rbp
  430159:	41 5c                	pop    %r12
  43015b:	41 5d                	pop    %r13
  43015d:	c3                   	retq   
  43015e:	66 90                	xchg   %ax,%ax
  430160:	41 b8 d0 00 00 00    	mov    $0xd0,%r8d
  430166:	b9 f1 09 45 00       	mov    $0x4509f1,%ecx
  43016b:	ba 78 00 00 00       	mov    $0x78,%edx
  430170:	be 6f 00 00 00       	mov    $0x6f,%esi
  430175:	bf 20 00 00 00       	mov    $0x20,%edi
  43017a:	e8 d1 81 ff ff       	callq  428350 <ERR_put_error>
  43017f:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  430184:	eb cd                	jmp    430153 <BIO_read+0x93>
  430186:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  43018d:	00 00 00 
  430190:	41 b8 c5 00 00 00    	mov    $0xc5,%r8d
  430196:	b9 f1 09 45 00       	mov    $0x4509f1,%ecx
  43019b:	ba 79 00 00 00       	mov    $0x79,%edx
  4301a0:	be 6f 00 00 00       	mov    $0x6f,%esi
  4301a5:	bf 20 00 00 00       	mov    $0x20,%edi
  4301aa:	e8 a1 81 ff ff       	callq  428350 <ERR_put_error>
  4301af:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  4301b4:	eb 9d                	jmp    430153 <BIO_read+0x93>
  4301b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4301bd:	00 00 00 

00000000004301c0 <BIO_write>:
  4301c0:	48 85 ff             	test   %rdi,%rdi
  4301c3:	0f 84 97 00 00 00    	je     430260 <BIO_write+0xa0>
  4301c9:	41 55                	push   %r13
  4301cb:	41 54                	push   %r12
  4301cd:	41 89 d4             	mov    %edx,%r12d
  4301d0:	55                   	push   %rbp
  4301d1:	53                   	push   %rbx
  4301d2:	48 89 f5             	mov    %rsi,%rbp
  4301d5:	48 89 fb             	mov    %rdi,%rbx
  4301d8:	48 83 ec 08          	sub    $0x8,%rsp
  4301dc:	48 8b 07             	mov    (%rdi),%rax
  4301df:	4c 8b 6f 08          	mov    0x8(%rdi),%r13
  4301e3:	48 85 c0             	test   %rax,%rax
  4301e6:	0f 84 a2 00 00 00    	je     43028e <BIO_write+0xce>
  4301ec:	48 83 78 10 00       	cmpq   $0x0,0x10(%rax)
  4301f1:	0f 84 97 00 00 00    	je     43028e <BIO_write+0xce>
  4301f7:	4d 85 ed             	test   %r13,%r13
  4301fa:	74 1a                	je     430216 <BIO_write+0x56>
  4301fc:	45 31 c0             	xor    %r8d,%r8d
  4301ff:	89 d1                	mov    %edx,%ecx
  430201:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  430207:	48 89 f2             	mov    %rsi,%rdx
  43020a:	be 03 00 00 00       	mov    $0x3,%esi
  43020f:	41 ff d5             	callq  *%r13
  430212:	85 c0                	test   %eax,%eax
  430214:	7e 3d                	jle    430253 <BIO_write+0x93>
  430216:	8b 43 18             	mov    0x18(%rbx),%eax
  430219:	85 c0                	test   %eax,%eax
  43021b:	74 4b                	je     430268 <BIO_write+0xa8>
  43021d:	48 8b 03             	mov    (%rbx),%rax
  430220:	44 89 e2             	mov    %r12d,%edx
  430223:	48 89 ee             	mov    %rbp,%rsi
  430226:	48 89 df             	mov    %rbx,%rdi
  430229:	ff 50 10             	callq  *0x10(%rax)
  43022c:	85 c0                	test   %eax,%eax
  43022e:	7e 07                	jle    430237 <BIO_write+0x77>
  430230:	48 63 d0             	movslq %eax,%rdx
  430233:	48 01 53 58          	add    %rdx,0x58(%rbx)
  430237:	4d 85 ed             	test   %r13,%r13
  43023a:	74 17                	je     430253 <BIO_write+0x93>
  43023c:	4c 63 c8             	movslq %eax,%r9
  43023f:	45 31 c0             	xor    %r8d,%r8d
  430242:	44 89 e1             	mov    %r12d,%ecx
  430245:	48 89 ea             	mov    %rbp,%rdx
  430248:	be 83 00 00 00       	mov    $0x83,%esi
  43024d:	48 89 df             	mov    %rbx,%rdi
  430250:	41 ff d5             	callq  *%r13
  430253:	48 83 c4 08          	add    $0x8,%rsp
  430257:	5b                   	pop    %rbx
  430258:	5d                   	pop    %rbp
  430259:	41 5c                	pop    %r12
  43025b:	41 5d                	pop    %r13
  43025d:	c3                   	retq   
  43025e:	66 90                	xchg   %ax,%ax
  430260:	31 c0                	xor    %eax,%eax
  430262:	c3                   	retq   
  430263:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  430268:	41 b8 f3 00 00 00    	mov    $0xf3,%r8d
  43026e:	b9 f1 09 45 00       	mov    $0x4509f1,%ecx
  430273:	ba 78 00 00 00       	mov    $0x78,%edx
  430278:	be 71 00 00 00       	mov    $0x71,%esi
  43027d:	bf 20 00 00 00       	mov    $0x20,%edi
  430282:	e8 c9 80 ff ff       	callq  428350 <ERR_put_error>
  430287:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  43028c:	eb c5                	jmp    430253 <BIO_write+0x93>
  43028e:	41 b8 e9 00 00 00    	mov    $0xe9,%r8d
  430294:	b9 f1 09 45 00       	mov    $0x4509f1,%ecx
  430299:	ba 79 00 00 00       	mov    $0x79,%edx
  43029e:	be 71 00 00 00       	mov    $0x71,%esi
  4302a3:	bf 20 00 00 00       	mov    $0x20,%edi
  4302a8:	e8 a3 80 ff ff       	callq  428350 <ERR_put_error>
  4302ad:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  4302b2:	eb 9f                	jmp    430253 <BIO_write+0x93>
  4302b4:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
  4302bb:	00 00 00 00 00 

00000000004302c0 <BIO_puts>:
  4302c0:	48 85 ff             	test   %rdi,%rdi
  4302c3:	41 54                	push   %r12
  4302c5:	55                   	push   %rbp
  4302c6:	53                   	push   %rbx
  4302c7:	48 89 fb             	mov    %rdi,%rbx
  4302ca:	0f 84 b0 00 00 00    	je     430380 <BIO_puts+0xc0>
  4302d0:	48 8b 07             	mov    (%rdi),%rax
  4302d3:	48 85 c0             	test   %rax,%rax
  4302d6:	0f 84 a4 00 00 00    	je     430380 <BIO_puts+0xc0>
  4302dc:	48 83 78 20 00       	cmpq   $0x0,0x20(%rax)
  4302e1:	0f 84 99 00 00 00    	je     430380 <BIO_puts+0xc0>
  4302e7:	48 8b 6f 08          	mov    0x8(%rdi),%rbp
  4302eb:	49 89 f4             	mov    %rsi,%r12
  4302ee:	48 85 ed             	test   %rbp,%rbp
  4302f1:	74 19                	je     43030c <BIO_puts+0x4c>
  4302f3:	45 31 c0             	xor    %r8d,%r8d
  4302f6:	31 c9                	xor    %ecx,%ecx
  4302f8:	48 89 f2             	mov    %rsi,%rdx
  4302fb:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  430301:	be 04 00 00 00       	mov    $0x4,%esi
  430306:	ff d5                	callq  *%rbp
  430308:	85 c0                	test   %eax,%eax
  43030a:	7e 38                	jle    430344 <BIO_puts+0x84>
  43030c:	8b 43 18             	mov    0x18(%rbx),%eax
  43030f:	85 c0                	test   %eax,%eax
  430311:	74 3d                	je     430350 <BIO_puts+0x90>
  430313:	48 8b 03             	mov    (%rbx),%rax
  430316:	4c 89 e6             	mov    %r12,%rsi
  430319:	48 89 df             	mov    %rbx,%rdi
  43031c:	ff 50 20             	callq  *0x20(%rax)
  43031f:	85 c0                	test   %eax,%eax
  430321:	7e 07                	jle    43032a <BIO_puts+0x6a>
  430323:	48 63 d0             	movslq %eax,%rdx
  430326:	48 01 53 58          	add    %rdx,0x58(%rbx)
  43032a:	48 85 ed             	test   %rbp,%rbp
  43032d:	74 15                	je     430344 <BIO_puts+0x84>
  43032f:	4c 63 c8             	movslq %eax,%r9
  430332:	45 31 c0             	xor    %r8d,%r8d
  430335:	31 c9                	xor    %ecx,%ecx
  430337:	4c 89 e2             	mov    %r12,%rdx
  43033a:	be 84 00 00 00       	mov    $0x84,%esi
  43033f:	48 89 df             	mov    %rbx,%rdi
  430342:	ff d5                	callq  *%rbp
  430344:	5b                   	pop    %rbx
  430345:	5d                   	pop    %rbp
  430346:	41 5c                	pop    %r12
  430348:	c3                   	retq   
  430349:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  430350:	41 b8 14 01 00 00    	mov    $0x114,%r8d
  430356:	b9 f1 09 45 00       	mov    $0x4509f1,%ecx
  43035b:	ba 78 00 00 00       	mov    $0x78,%edx
  430360:	be 6e 00 00 00       	mov    $0x6e,%esi
  430365:	bf 20 00 00 00       	mov    $0x20,%edi
  43036a:	e8 e1 7f ff ff       	callq  428350 <ERR_put_error>
  43036f:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  430374:	eb ce                	jmp    430344 <BIO_puts+0x84>
  430376:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  43037d:	00 00 00 
  430380:	41 b8 08 01 00 00    	mov    $0x108,%r8d
  430386:	b9 f1 09 45 00       	mov    $0x4509f1,%ecx
  43038b:	ba 79 00 00 00       	mov    $0x79,%edx
  430390:	be 6e 00 00 00       	mov    $0x6e,%esi
  430395:	bf 20 00 00 00       	mov    $0x20,%edi
  43039a:	e8 b1 7f ff ff       	callq  428350 <ERR_put_error>
  43039f:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  4303a4:	eb 9e                	jmp    430344 <BIO_puts+0x84>
  4303a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4303ad:	00 00 00 

00000000004303b0 <BIO_gets>:
  4303b0:	41 55                	push   %r13
  4303b2:	41 54                	push   %r12
  4303b4:	55                   	push   %rbp
  4303b5:	53                   	push   %rbx
  4303b6:	48 89 fb             	mov    %rdi,%rbx
  4303b9:	48 83 ec 08          	sub    $0x8,%rsp
  4303bd:	48 85 ff             	test   %rdi,%rdi
  4303c0:	0f 84 ca 00 00 00    	je     430490 <BIO_gets+0xe0>
  4303c6:	48 8b 07             	mov    (%rdi),%rax
  4303c9:	48 85 c0             	test   %rax,%rax
  4303cc:	0f 84 be 00 00 00    	je     430490 <BIO_gets+0xe0>
  4303d2:	48 8b 40 28          	mov    0x28(%rax),%rax
  4303d6:	48 85 c0             	test   %rax,%rax
  4303d9:	0f 84 b1 00 00 00    	je     430490 <BIO_gets+0xe0>
  4303df:	48 8b 6f 08          	mov    0x8(%rdi),%rbp
  4303e3:	49 89 f4             	mov    %rsi,%r12
  4303e6:	41 89 d5             	mov    %edx,%r13d
  4303e9:	48 85 ed             	test   %rbp,%rbp
  4303ec:	74 5a                	je     430448 <BIO_gets+0x98>
  4303ee:	45 31 c0             	xor    %r8d,%r8d
  4303f1:	89 d1                	mov    %edx,%ecx
  4303f3:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  4303f9:	48 89 f2             	mov    %rsi,%rdx
  4303fc:	be 05 00 00 00       	mov    $0x5,%esi
  430401:	ff d5                	callq  *%rbp
  430403:	85 c0                	test   %eax,%eax
  430405:	7e 31                	jle    430438 <BIO_gets+0x88>
  430407:	8b 73 18             	mov    0x18(%rbx),%esi
  43040a:	85 f6                	test   %esi,%esi
  43040c:	74 5a                	je     430468 <BIO_gets+0xb8>
  43040e:	48 8b 03             	mov    (%rbx),%rax
  430411:	44 89 ea             	mov    %r13d,%edx
  430414:	4c 89 e6             	mov    %r12,%rsi
  430417:	48 89 df             	mov    %rbx,%rdi
  43041a:	ff 50 28             	callq  *0x28(%rax)
  43041d:	45 31 c0             	xor    %r8d,%r8d
  430420:	4c 63 c8             	movslq %eax,%r9
  430423:	44 89 e9             	mov    %r13d,%ecx
  430426:	4c 89 e2             	mov    %r12,%rdx
  430429:	be 85 00 00 00       	mov    $0x85,%esi
  43042e:	48 89 df             	mov    %rbx,%rdi
  430431:	ff d5                	callq  *%rbp
  430433:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  430438:	48 83 c4 08          	add    $0x8,%rsp
  43043c:	5b                   	pop    %rbx
  43043d:	5d                   	pop    %rbp
  43043e:	41 5c                	pop    %r12
  430440:	41 5d                	pop    %r13
  430442:	c3                   	retq   
  430443:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  430448:	8b 57 18             	mov    0x18(%rdi),%edx
  43044b:	85 d2                	test   %edx,%edx
  43044d:	74 19                	je     430468 <BIO_gets+0xb8>
  43044f:	59                   	pop    %rcx
  430450:	44 89 ea             	mov    %r13d,%edx
  430453:	4c 89 e6             	mov    %r12,%rsi
  430456:	48 89 df             	mov    %rbx,%rdi
  430459:	5b                   	pop    %rbx
  43045a:	5d                   	pop    %rbp
  43045b:	41 5c                	pop    %r12
  43045d:	41 5d                	pop    %r13
  43045f:	ff e0                	jmpq   *%rax
  430461:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  430468:	41 b8 35 01 00 00    	mov    $0x135,%r8d
  43046e:	b9 f1 09 45 00       	mov    $0x4509f1,%ecx
  430473:	ba 78 00 00 00       	mov    $0x78,%edx
  430478:	be 68 00 00 00       	mov    $0x68,%esi
  43047d:	bf 20 00 00 00       	mov    $0x20,%edi
  430482:	e8 c9 7e ff ff       	callq  428350 <ERR_put_error>
  430487:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  43048c:	eb aa                	jmp    430438 <BIO_gets+0x88>
  43048e:	66 90                	xchg   %ax,%ax
  430490:	41 b8 29 01 00 00    	mov    $0x129,%r8d
  430496:	b9 f1 09 45 00       	mov    $0x4509f1,%ecx
  43049b:	ba 79 00 00 00       	mov    $0x79,%edx
  4304a0:	be 68 00 00 00       	mov    $0x68,%esi
  4304a5:	bf 20 00 00 00       	mov    $0x20,%edi
  4304aa:	e8 a1 7e ff ff       	callq  428350 <ERR_put_error>
  4304af:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  4304b4:	eb 82                	jmp    430438 <BIO_gets+0x88>
  4304b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4304bd:	00 00 00 

00000000004304c0 <BIO_indent>:
  4304c0:	41 54                	push   %r12
  4304c2:	85 f6                	test   %esi,%esi
  4304c4:	41 bc 00 00 00 00    	mov    $0x0,%r12d
  4304ca:	41 0f 48 f4          	cmovs  %r12d,%esi
  4304ce:	55                   	push   %rbp
  4304cf:	53                   	push   %rbx
  4304d0:	39 d6                	cmp    %edx,%esi
  4304d2:	48 89 fb             	mov    %rdi,%rbx
  4304d5:	0f 4e d6             	cmovle %esi,%edx
  4304d8:	41 89 d4             	mov    %edx,%r12d
  4304db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4304e0:	45 85 e4             	test   %r12d,%r12d
  4304e3:	0f 84 a7 00 00 00    	je     430590 <BIO_indent+0xd0>
  4304e9:	48 85 db             	test   %rbx,%rbx
  4304ec:	0f 84 d6 00 00 00    	je     4305c8 <BIO_indent+0x108>
  4304f2:	48 8b 03             	mov    (%rbx),%rax
  4304f5:	48 85 c0             	test   %rax,%rax
  4304f8:	0f 84 ca 00 00 00    	je     4305c8 <BIO_indent+0x108>
  4304fe:	48 83 78 20 00       	cmpq   $0x0,0x20(%rax)
  430503:	0f 84 bf 00 00 00    	je     4305c8 <BIO_indent+0x108>
  430509:	48 8b 6b 08          	mov    0x8(%rbx),%rbp
  43050d:	48 85 ed             	test   %rbp,%rbp
  430510:	74 1e                	je     430530 <BIO_indent+0x70>
  430512:	45 31 c0             	xor    %r8d,%r8d
  430515:	31 c9                	xor    %ecx,%ecx
  430517:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  43051d:	ba 1c e8 43 00       	mov    $0x43e81c,%edx
  430522:	be 04 00 00 00       	mov    $0x4,%esi
  430527:	48 89 df             	mov    %rbx,%rdi
  43052a:	ff d5                	callq  *%rbp
  43052c:	85 c0                	test   %eax,%eax
  43052e:	7e 50                	jle    430580 <BIO_indent+0xc0>
  430530:	8b 43 18             	mov    0x18(%rbx),%eax
  430533:	85 c0                	test   %eax,%eax
  430535:	74 69                	je     4305a0 <BIO_indent+0xe0>
  430537:	48 8b 03             	mov    (%rbx),%rax
  43053a:	be 1c e8 43 00       	mov    $0x43e81c,%esi
  43053f:	48 89 df             	mov    %rbx,%rdi
  430542:	ff 50 20             	callq  *0x20(%rax)
  430545:	85 c0                	test   %eax,%eax
  430547:	7e 07                	jle    430550 <BIO_indent+0x90>
  430549:	48 63 d0             	movslq %eax,%rdx
  43054c:	48 01 53 58          	add    %rdx,0x58(%rbx)
  430550:	48 85 ed             	test   %rbp,%rbp
  430553:	4c 63 c8             	movslq %eax,%r9
  430556:	74 17                	je     43056f <BIO_indent+0xaf>
  430558:	45 31 c0             	xor    %r8d,%r8d
  43055b:	31 c9                	xor    %ecx,%ecx
  43055d:	ba 1c e8 43 00       	mov    $0x43e81c,%edx
  430562:	be 84 00 00 00       	mov    $0x84,%esi
  430567:	48 89 df             	mov    %rbx,%rdi
  43056a:	ff d5                	callq  *%rbp
  43056c:	41 89 c1             	mov    %eax,%r9d
  43056f:	41 83 ec 01          	sub    $0x1,%r12d
  430573:	41 83 f9 01          	cmp    $0x1,%r9d
  430577:	0f 84 63 ff ff ff    	je     4304e0 <BIO_indent+0x20>
  43057d:	0f 1f 00             	nopl   (%rax)
  430580:	5b                   	pop    %rbx
  430581:	31 c0                	xor    %eax,%eax
  430583:	5d                   	pop    %rbp
  430584:	41 5c                	pop    %r12
  430586:	c3                   	retq   
  430587:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  43058e:	00 00 
  430590:	5b                   	pop    %rbx
  430591:	b8 01 00 00 00       	mov    $0x1,%eax
  430596:	5d                   	pop    %rbp
  430597:	41 5c                	pop    %r12
  430599:	c3                   	retq   
  43059a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  4305a0:	41 b8 14 01 00 00    	mov    $0x114,%r8d
  4305a6:	b9 f1 09 45 00       	mov    $0x4509f1,%ecx
  4305ab:	ba 78 00 00 00       	mov    $0x78,%edx
  4305b0:	be 6e 00 00 00       	mov    $0x6e,%esi
  4305b5:	bf 20 00 00 00       	mov    $0x20,%edi
  4305ba:	e8 91 7d ff ff       	callq  428350 <ERR_put_error>
  4305bf:	eb bf                	jmp    430580 <BIO_indent+0xc0>
  4305c1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  4305c8:	41 b8 08 01 00 00    	mov    $0x108,%r8d
  4305ce:	b9 f1 09 45 00       	mov    $0x4509f1,%ecx
  4305d3:	ba 79 00 00 00       	mov    $0x79,%edx
  4305d8:	be 6e 00 00 00       	mov    $0x6e,%esi
  4305dd:	bf 20 00 00 00       	mov    $0x20,%edi
  4305e2:	e8 69 7d ff ff       	callq  428350 <ERR_put_error>
  4305e7:	eb 97                	jmp    430580 <BIO_indent+0xc0>
  4305e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000004305f0 <BIO_int_ctrl>:
  4305f0:	41 55                	push   %r13
  4305f2:	41 54                	push   %r12
  4305f4:	55                   	push   %rbp
  4305f5:	53                   	push   %rbx
  4305f6:	48 89 fb             	mov    %rdi,%rbx
  4305f9:	48 83 ec 18          	sub    $0x18,%rsp
  4305fd:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  430604:	00 00 
  430606:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  43060b:	31 c0                	xor    %eax,%eax
  43060d:	48 85 ff             	test   %rdi,%rdi
  430610:	89 4c 24 04          	mov    %ecx,0x4(%rsp)
  430614:	0f 84 9e 00 00 00    	je     4306b8 <BIO_int_ctrl+0xc8>
  43061a:	48 8b 07             	mov    (%rdi),%rax
  43061d:	48 85 c0             	test   %rax,%rax
  430620:	0f 84 96 00 00 00    	je     4306bc <BIO_int_ctrl+0xcc>
  430626:	48 8b 40 30          	mov    0x30(%rax),%rax
  43062a:	48 85 c0             	test   %rax,%rax
  43062d:	0f 84 89 00 00 00    	je     4306bc <BIO_int_ctrl+0xcc>
  430633:	48 8b 6f 08          	mov    0x8(%rdi),%rbp
  430637:	41 89 f4             	mov    %esi,%r12d
  43063a:	49 89 d5             	mov    %rdx,%r13
  43063d:	48 85 ed             	test   %rbp,%rbp
  430640:	74 66                	je     4306a8 <BIO_int_ctrl+0xb8>
  430642:	49 89 d0             	mov    %rdx,%r8
  430645:	89 f1                	mov    %esi,%ecx
  430647:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  43064d:	48 8d 54 24 04       	lea    0x4(%rsp),%rdx
  430652:	be 06 00 00 00       	mov    $0x6,%esi
  430657:	ff d5                	callq  *%rbp
  430659:	48 85 c0             	test   %rax,%rax
  43065c:	7e 2c                	jle    43068a <BIO_int_ctrl+0x9a>
  43065e:	48 8b 03             	mov    (%rbx),%rax
  430661:	48 8d 4c 24 04       	lea    0x4(%rsp),%rcx
  430666:	4c 89 ea             	mov    %r13,%rdx
  430669:	44 89 e6             	mov    %r12d,%esi
  43066c:	48 89 df             	mov    %rbx,%rdi
  43066f:	ff 50 30             	callq  *0x30(%rax)
  430672:	4d 89 e8             	mov    %r13,%r8
  430675:	49 89 c1             	mov    %rax,%r9
  430678:	44 89 e1             	mov    %r12d,%ecx
  43067b:	48 8d 54 24 04       	lea    0x4(%rsp),%rdx
  430680:	be 86 00 00 00       	mov    $0x86,%esi
  430685:	48 89 df             	mov    %rbx,%rdi
  430688:	ff d5                	callq  *%rbp
  43068a:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  43068f:	64 48 33 34 25 28 00 	xor    %fs:0x28,%rsi
  430696:	00 00 
  430698:	75 4a                	jne    4306e4 <BIO_int_ctrl+0xf4>
  43069a:	48 83 c4 18          	add    $0x18,%rsp
  43069e:	5b                   	pop    %rbx
  43069f:	5d                   	pop    %rbp
  4306a0:	41 5c                	pop    %r12
  4306a2:	41 5d                	pop    %r13
  4306a4:	c3                   	retq   
  4306a5:	0f 1f 00             	nopl   (%rax)
  4306a8:	48 8d 4c 24 04       	lea    0x4(%rsp),%rcx
  4306ad:	ff d0                	callq  *%rax
  4306af:	eb d9                	jmp    43068a <BIO_int_ctrl+0x9a>
  4306b1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  4306b8:	31 c0                	xor    %eax,%eax
  4306ba:	eb ce                	jmp    43068a <BIO_int_ctrl+0x9a>
  4306bc:	41 b8 68 01 00 00    	mov    $0x168,%r8d
  4306c2:	b9 f1 09 45 00       	mov    $0x4509f1,%ecx
  4306c7:	ba 79 00 00 00       	mov    $0x79,%edx
  4306cc:	be 67 00 00 00       	mov    $0x67,%esi
  4306d1:	bf 20 00 00 00       	mov    $0x20,%edi
  4306d6:	e8 75 7c ff ff       	callq  428350 <ERR_put_error>
  4306db:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
  4306e2:	eb a6                	jmp    43068a <BIO_int_ctrl+0x9a>
  4306e4:	e8 d7 67 fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  4306e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000004306f0 <BIO_ptr_ctrl>:
  4306f0:	41 55                	push   %r13
  4306f2:	41 54                	push   %r12
  4306f4:	55                   	push   %rbp
  4306f5:	53                   	push   %rbx
  4306f6:	48 89 fb             	mov    %rdi,%rbx
  4306f9:	48 83 ec 18          	sub    $0x18,%rsp
  4306fd:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  430704:	00 00 
  430706:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  43070b:	31 c0                	xor    %eax,%eax
  43070d:	48 85 ff             	test   %rdi,%rdi
  430710:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
  430717:	00 
  430718:	0f 84 b2 00 00 00    	je     4307d0 <BIO_ptr_ctrl+0xe0>
  43071e:	48 8b 07             	mov    (%rdi),%rax
  430721:	48 85 c0             	test   %rax,%rax
  430724:	0f 84 82 00 00 00    	je     4307ac <BIO_ptr_ctrl+0xbc>
  43072a:	48 8b 40 30          	mov    0x30(%rax),%rax
  43072e:	48 85 c0             	test   %rax,%rax
  430731:	74 79                	je     4307ac <BIO_ptr_ctrl+0xbc>
  430733:	48 8b 6f 08          	mov    0x8(%rdi),%rbp
  430737:	41 89 f4             	mov    %esi,%r12d
  43073a:	49 89 d5             	mov    %rdx,%r13
  43073d:	48 85 ed             	test   %rbp,%rbp
  430740:	0f 84 92 00 00 00    	je     4307d8 <BIO_ptr_ctrl+0xe8>
  430746:	49 89 d0             	mov    %rdx,%r8
  430749:	89 f1                	mov    %esi,%ecx
  43074b:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  430751:	48 89 e2             	mov    %rsp,%rdx
  430754:	be 06 00 00 00       	mov    $0x6,%esi
  430759:	ff d5                	callq  *%rbp
  43075b:	48 85 c0             	test   %rax,%rax
  43075e:	7e 70                	jle    4307d0 <BIO_ptr_ctrl+0xe0>
  430760:	48 8b 03             	mov    (%rbx),%rax
  430763:	48 89 e1             	mov    %rsp,%rcx
  430766:	4c 89 ea             	mov    %r13,%rdx
  430769:	44 89 e6             	mov    %r12d,%esi
  43076c:	48 89 df             	mov    %rbx,%rdi
  43076f:	ff 50 30             	callq  *0x30(%rax)
  430772:	4d 89 e8             	mov    %r13,%r8
  430775:	49 89 c1             	mov    %rax,%r9
  430778:	44 89 e1             	mov    %r12d,%ecx
  43077b:	48 89 e2             	mov    %rsp,%rdx
  43077e:	be 86 00 00 00       	mov    $0x86,%esi
  430783:	48 89 df             	mov    %rbx,%rdi
  430786:	ff d5                	callq  *%rbp
  430788:	48 85 c0             	test   %rax,%rax
  43078b:	7e 43                	jle    4307d0 <BIO_ptr_ctrl+0xe0>
  43078d:	48 8b 04 24          	mov    (%rsp),%rax
  430791:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  430796:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  43079d:	00 00 
  43079f:	75 3e                	jne    4307df <BIO_ptr_ctrl+0xef>
  4307a1:	48 83 c4 18          	add    $0x18,%rsp
  4307a5:	5b                   	pop    %rbx
  4307a6:	5d                   	pop    %rbp
  4307a7:	41 5c                	pop    %r12
  4307a9:	41 5d                	pop    %r13
  4307ab:	c3                   	retq   
  4307ac:	41 b8 68 01 00 00    	mov    $0x168,%r8d
  4307b2:	b9 f1 09 45 00       	mov    $0x4509f1,%ecx
  4307b7:	ba 79 00 00 00       	mov    $0x79,%edx
  4307bc:	be 67 00 00 00       	mov    $0x67,%esi
  4307c1:	bf 20 00 00 00       	mov    $0x20,%edi
  4307c6:	e8 85 7b ff ff       	callq  428350 <ERR_put_error>
  4307cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4307d0:	31 c0                	xor    %eax,%eax
  4307d2:	eb bd                	jmp    430791 <BIO_ptr_ctrl+0xa1>
  4307d4:	0f 1f 40 00          	nopl   0x0(%rax)
  4307d8:	48 89 e1             	mov    %rsp,%rcx
  4307db:	ff d0                	callq  *%rax
  4307dd:	eb a9                	jmp    430788 <BIO_ptr_ctrl+0x98>
  4307df:	e8 dc 66 fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  4307e4:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
  4307eb:	00 00 00 00 00 

00000000004307f0 <BIO_ctrl>:
  4307f0:	48 85 ff             	test   %rdi,%rdi
  4307f3:	0f 84 c7 00 00 00    	je     4308c0 <BIO_ctrl+0xd0>
  4307f9:	41 56                	push   %r14
  4307fb:	41 55                	push   %r13
  4307fd:	49 89 ce             	mov    %rcx,%r14
  430800:	41 54                	push   %r12
  430802:	55                   	push   %rbp
  430803:	49 89 d5             	mov    %rdx,%r13
  430806:	53                   	push   %rbx
  430807:	48 8b 07             	mov    (%rdi),%rax
  43080a:	41 89 f4             	mov    %esi,%r12d
  43080d:	48 89 fb             	mov    %rdi,%rbx
  430810:	48 85 c0             	test   %rax,%rax
  430813:	74 63                	je     430878 <BIO_ctrl+0x88>
  430815:	48 8b 40 30          	mov    0x30(%rax),%rax
  430819:	48 85 c0             	test   %rax,%rax
  43081c:	74 5a                	je     430878 <BIO_ctrl+0x88>
  43081e:	48 8b 6f 08          	mov    0x8(%rdi),%rbp
  430822:	48 85 ed             	test   %rbp,%rbp
  430825:	0f 84 85 00 00 00    	je     4308b0 <BIO_ctrl+0xc0>
  43082b:	49 89 d0             	mov    %rdx,%r8
  43082e:	89 f1                	mov    %esi,%ecx
  430830:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  430836:	4c 89 f2             	mov    %r14,%rdx
  430839:	be 06 00 00 00       	mov    $0x6,%esi
  43083e:	ff d5                	callq  *%rbp
  430840:	48 85 c0             	test   %rax,%rax
  430843:	7e 5b                	jle    4308a0 <BIO_ctrl+0xb0>
  430845:	48 8b 03             	mov    (%rbx),%rax
  430848:	4c 89 f1             	mov    %r14,%rcx
  43084b:	4c 89 ea             	mov    %r13,%rdx
  43084e:	44 89 e6             	mov    %r12d,%esi
  430851:	48 89 df             	mov    %rbx,%rdi
  430854:	ff 50 30             	callq  *0x30(%rax)
  430857:	4d 89 e8             	mov    %r13,%r8
  43085a:	49 89 c1             	mov    %rax,%r9
  43085d:	44 89 e1             	mov    %r12d,%ecx
  430860:	4c 89 f2             	mov    %r14,%rdx
  430863:	48 89 df             	mov    %rbx,%rdi
  430866:	48 89 e8             	mov    %rbp,%rax
  430869:	5b                   	pop    %rbx
  43086a:	5d                   	pop    %rbp
  43086b:	41 5c                	pop    %r12
  43086d:	41 5d                	pop    %r13
  43086f:	41 5e                	pop    %r14
  430871:	be 86 00 00 00       	mov    $0x86,%esi
  430876:	ff e0                	jmpq   *%rax
  430878:	41 b8 68 01 00 00    	mov    $0x168,%r8d
  43087e:	b9 f1 09 45 00       	mov    $0x4509f1,%ecx
  430883:	ba 79 00 00 00       	mov    $0x79,%edx
  430888:	be 67 00 00 00       	mov    $0x67,%esi
  43088d:	bf 20 00 00 00       	mov    $0x20,%edi
  430892:	e8 b9 7a ff ff       	callq  428350 <ERR_put_error>
  430897:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
  43089e:	66 90                	xchg   %ax,%ax
  4308a0:	5b                   	pop    %rbx
  4308a1:	5d                   	pop    %rbp
  4308a2:	41 5c                	pop    %r12
  4308a4:	41 5d                	pop    %r13
  4308a6:	41 5e                	pop    %r14
  4308a8:	c3                   	retq   
  4308a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  4308b0:	5b                   	pop    %rbx
  4308b1:	5d                   	pop    %rbp
  4308b2:	41 5c                	pop    %r12
  4308b4:	41 5d                	pop    %r13
  4308b6:	41 5e                	pop    %r14
  4308b8:	ff e0                	jmpq   *%rax
  4308ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  4308c0:	31 c0                	xor    %eax,%eax
  4308c2:	c3                   	retq   
  4308c3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  4308ca:	84 00 00 00 00 00 

00000000004308d0 <BIO_callback_ctrl>:
  4308d0:	41 54                	push   %r12
  4308d2:	55                   	push   %rbp
  4308d3:	53                   	push   %rbx
  4308d4:	48 83 ec 10          	sub    $0x10,%rsp
  4308d8:	48 85 ff             	test   %rdi,%rdi
  4308db:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  4308e0:	74 7e                	je     430960 <BIO_callback_ctrl+0x90>
  4308e2:	48 8b 07             	mov    (%rdi),%rax
  4308e5:	89 f5                	mov    %esi,%ebp
  4308e7:	48 89 fb             	mov    %rdi,%rbx
  4308ea:	48 85 c0             	test   %rax,%rax
  4308ed:	74 7c                	je     43096b <BIO_callback_ctrl+0x9b>
  4308ef:	48 8b 40 48          	mov    0x48(%rax),%rax
  4308f3:	48 85 c0             	test   %rax,%rax
  4308f6:	74 73                	je     43096b <BIO_callback_ctrl+0x9b>
  4308f8:	4c 8b 67 08          	mov    0x8(%rdi),%r12
  4308fc:	4d 85 e4             	test   %r12,%r12
  4308ff:	74 4f                	je     430950 <BIO_callback_ctrl+0x80>
  430901:	45 31 c0             	xor    %r8d,%r8d
  430904:	89 f1                	mov    %esi,%ecx
  430906:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  43090c:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx
  430911:	be 06 00 00 00       	mov    $0x6,%esi
  430916:	41 ff d4             	callq  *%r12
  430919:	48 85 c0             	test   %rax,%rax
  43091c:	7e 28                	jle    430946 <BIO_callback_ctrl+0x76>
  43091e:	48 8b 03             	mov    (%rbx),%rax
  430921:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  430926:	89 ee                	mov    %ebp,%esi
  430928:	48 89 df             	mov    %rbx,%rdi
  43092b:	ff 50 48             	callq  *0x48(%rax)
  43092e:	45 31 c0             	xor    %r8d,%r8d
  430931:	49 89 c1             	mov    %rax,%r9
  430934:	89 e9                	mov    %ebp,%ecx
  430936:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx
  43093b:	be 86 00 00 00       	mov    $0x86,%esi
  430940:	48 89 df             	mov    %rbx,%rdi
  430943:	41 ff d4             	callq  *%r12
  430946:	48 83 c4 10          	add    $0x10,%rsp
  43094a:	5b                   	pop    %rbx
  43094b:	5d                   	pop    %rbp
  43094c:	41 5c                	pop    %r12
  43094e:	c3                   	retq   
  43094f:	90                   	nop
  430950:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  430955:	ff d0                	callq  *%rax
  430957:	48 83 c4 10          	add    $0x10,%rsp
  43095b:	5b                   	pop    %rbx
  43095c:	5d                   	pop    %rbp
  43095d:	41 5c                	pop    %r12
  43095f:	c3                   	retq   
  430960:	48 83 c4 10          	add    $0x10,%rsp
  430964:	31 c0                	xor    %eax,%eax
  430966:	5b                   	pop    %rbx
  430967:	5d                   	pop    %rbp
  430968:	41 5c                	pop    %r12
  43096a:	c3                   	retq   
  43096b:	41 b8 83 01 00 00    	mov    $0x183,%r8d
  430971:	b9 f1 09 45 00       	mov    $0x4509f1,%ecx
  430976:	ba 79 00 00 00       	mov    $0x79,%edx
  43097b:	be 83 00 00 00       	mov    $0x83,%esi
  430980:	bf 20 00 00 00       	mov    $0x20,%edi
  430985:	e8 c6 79 ff ff       	callq  428350 <ERR_put_error>
  43098a:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
  430991:	eb b3                	jmp    430946 <BIO_callback_ctrl+0x76>
  430993:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  43099a:	84 00 00 00 00 00 

00000000004309a0 <BIO_ctrl_pending>:
  4309a0:	48 85 ff             	test   %rdi,%rdi
  4309a3:	0f 84 bf 00 00 00    	je     430a68 <BIO_ctrl_pending+0xc8>
  4309a9:	55                   	push   %rbp
  4309aa:	53                   	push   %rbx
  4309ab:	48 89 fb             	mov    %rdi,%rbx
  4309ae:	48 83 ec 08          	sub    $0x8,%rsp
  4309b2:	48 8b 07             	mov    (%rdi),%rax
  4309b5:	48 85 c0             	test   %rax,%rax
  4309b8:	74 64                	je     430a1e <BIO_ctrl_pending+0x7e>
  4309ba:	48 8b 40 30          	mov    0x30(%rax),%rax
  4309be:	48 85 c0             	test   %rax,%rax
  4309c1:	74 5b                	je     430a1e <BIO_ctrl_pending+0x7e>
  4309c3:	48 8b 6f 08          	mov    0x8(%rdi),%rbp
  4309c7:	48 85 ed             	test   %rbp,%rbp
  4309ca:	0f 84 80 00 00 00    	je     430a50 <BIO_ctrl_pending+0xb0>
  4309d0:	45 31 c0             	xor    %r8d,%r8d
  4309d3:	31 d2                	xor    %edx,%edx
  4309d5:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  4309db:	b9 0a 00 00 00       	mov    $0xa,%ecx
  4309e0:	be 06 00 00 00       	mov    $0x6,%esi
  4309e5:	ff d5                	callq  *%rbp
  4309e7:	48 85 c0             	test   %rax,%rax
  4309ea:	7e 5c                	jle    430a48 <BIO_ctrl_pending+0xa8>
  4309ec:	48 8b 03             	mov    (%rbx),%rax
  4309ef:	48 89 df             	mov    %rbx,%rdi
  4309f2:	31 c9                	xor    %ecx,%ecx
  4309f4:	31 d2                	xor    %edx,%edx
  4309f6:	be 0a 00 00 00       	mov    $0xa,%esi
  4309fb:	ff 50 30             	callq  *0x30(%rax)
  4309fe:	48 83 c4 08          	add    $0x8,%rsp
  430a02:	49 89 c1             	mov    %rax,%r9
  430a05:	48 89 df             	mov    %rbx,%rdi
  430a08:	48 89 e8             	mov    %rbp,%rax
  430a0b:	45 31 c0             	xor    %r8d,%r8d
  430a0e:	b9 0a 00 00 00       	mov    $0xa,%ecx
  430a13:	5b                   	pop    %rbx
  430a14:	5d                   	pop    %rbp
  430a15:	31 d2                	xor    %edx,%edx
  430a17:	be 86 00 00 00       	mov    $0x86,%esi
  430a1c:	ff e0                	jmpq   *%rax
  430a1e:	41 b8 68 01 00 00    	mov    $0x168,%r8d
  430a24:	b9 f1 09 45 00       	mov    $0x4509f1,%ecx
  430a29:	ba 79 00 00 00       	mov    $0x79,%edx
  430a2e:	be 67 00 00 00       	mov    $0x67,%esi
  430a33:	bf 20 00 00 00       	mov    $0x20,%edi
  430a38:	e8 13 79 ff ff       	callq  428350 <ERR_put_error>
  430a3d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
  430a44:	0f 1f 40 00          	nopl   0x0(%rax)
  430a48:	48 83 c4 08          	add    $0x8,%rsp
  430a4c:	5b                   	pop    %rbx
  430a4d:	5d                   	pop    %rbp
  430a4e:	c3                   	retq   
  430a4f:	90                   	nop
  430a50:	48 83 c4 08          	add    $0x8,%rsp
  430a54:	31 c9                	xor    %ecx,%ecx
  430a56:	31 d2                	xor    %edx,%edx
  430a58:	5b                   	pop    %rbx
  430a59:	5d                   	pop    %rbp
  430a5a:	be 0a 00 00 00       	mov    $0xa,%esi
  430a5f:	ff e0                	jmpq   *%rax
  430a61:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  430a68:	31 c0                	xor    %eax,%eax
  430a6a:	c3                   	retq   
  430a6b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000430a70 <BIO_ctrl_wpending>:
  430a70:	48 85 ff             	test   %rdi,%rdi
  430a73:	0f 84 bf 00 00 00    	je     430b38 <BIO_ctrl_wpending+0xc8>
  430a79:	55                   	push   %rbp
  430a7a:	53                   	push   %rbx
  430a7b:	48 89 fb             	mov    %rdi,%rbx
  430a7e:	48 83 ec 08          	sub    $0x8,%rsp
  430a82:	48 8b 07             	mov    (%rdi),%rax
  430a85:	48 85 c0             	test   %rax,%rax
  430a88:	74 64                	je     430aee <BIO_ctrl_wpending+0x7e>
  430a8a:	48 8b 40 30          	mov    0x30(%rax),%rax
  430a8e:	48 85 c0             	test   %rax,%rax
  430a91:	74 5b                	je     430aee <BIO_ctrl_wpending+0x7e>
  430a93:	48 8b 6f 08          	mov    0x8(%rdi),%rbp
  430a97:	48 85 ed             	test   %rbp,%rbp
  430a9a:	0f 84 80 00 00 00    	je     430b20 <BIO_ctrl_wpending+0xb0>
  430aa0:	45 31 c0             	xor    %r8d,%r8d
  430aa3:	31 d2                	xor    %edx,%edx
  430aa5:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  430aab:	b9 0d 00 00 00       	mov    $0xd,%ecx
  430ab0:	be 06 00 00 00       	mov    $0x6,%esi
  430ab5:	ff d5                	callq  *%rbp
  430ab7:	48 85 c0             	test   %rax,%rax
  430aba:	7e 5c                	jle    430b18 <BIO_ctrl_wpending+0xa8>
  430abc:	48 8b 03             	mov    (%rbx),%rax
  430abf:	48 89 df             	mov    %rbx,%rdi
  430ac2:	31 c9                	xor    %ecx,%ecx
  430ac4:	31 d2                	xor    %edx,%edx
  430ac6:	be 0d 00 00 00       	mov    $0xd,%esi
  430acb:	ff 50 30             	callq  *0x30(%rax)
  430ace:	48 83 c4 08          	add    $0x8,%rsp
  430ad2:	49 89 c1             	mov    %rax,%r9
  430ad5:	48 89 df             	mov    %rbx,%rdi
  430ad8:	48 89 e8             	mov    %rbp,%rax
  430adb:	45 31 c0             	xor    %r8d,%r8d
  430ade:	b9 0d 00 00 00       	mov    $0xd,%ecx
  430ae3:	5b                   	pop    %rbx
  430ae4:	5d                   	pop    %rbp
  430ae5:	31 d2                	xor    %edx,%edx
  430ae7:	be 86 00 00 00       	mov    $0x86,%esi
  430aec:	ff e0                	jmpq   *%rax
  430aee:	41 b8 68 01 00 00    	mov    $0x168,%r8d
  430af4:	b9 f1 09 45 00       	mov    $0x4509f1,%ecx
  430af9:	ba 79 00 00 00       	mov    $0x79,%edx
  430afe:	be 67 00 00 00       	mov    $0x67,%esi
  430b03:	bf 20 00 00 00       	mov    $0x20,%edi
  430b08:	e8 43 78 ff ff       	callq  428350 <ERR_put_error>
  430b0d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
  430b14:	0f 1f 40 00          	nopl   0x0(%rax)
  430b18:	48 83 c4 08          	add    $0x8,%rsp
  430b1c:	5b                   	pop    %rbx
  430b1d:	5d                   	pop    %rbp
  430b1e:	c3                   	retq   
  430b1f:	90                   	nop
  430b20:	48 83 c4 08          	add    $0x8,%rsp
  430b24:	31 c9                	xor    %ecx,%ecx
  430b26:	31 d2                	xor    %edx,%edx
  430b28:	5b                   	pop    %rbx
  430b29:	5d                   	pop    %rbp
  430b2a:	be 0d 00 00 00       	mov    $0xd,%esi
  430b2f:	ff e0                	jmpq   *%rax
  430b31:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  430b38:	31 c0                	xor    %eax,%eax
  430b3a:	c3                   	retq   
  430b3b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000430b40 <BIO_push>:
  430b40:	48 85 ff             	test   %rdi,%rdi
  430b43:	0f 84 b7 00 00 00    	je     430c00 <BIO_push+0xc0>
  430b49:	41 54                	push   %r12
  430b4b:	55                   	push   %rbp
  430b4c:	53                   	push   %rbx
  430b4d:	48 89 fb             	mov    %rdi,%rbx
  430b50:	eb 09                	jmp    430b5b <BIO_push+0x1b>
  430b52:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  430b58:	4c 89 c3             	mov    %r8,%rbx
  430b5b:	4c 8b 43 38          	mov    0x38(%rbx),%r8
  430b5f:	4d 85 c0             	test   %r8,%r8
  430b62:	75 f4                	jne    430b58 <BIO_push+0x18>
  430b64:	48 85 f6             	test   %rsi,%rsi
  430b67:	48 89 73 38          	mov    %rsi,0x38(%rbx)
  430b6b:	74 04                	je     430b71 <BIO_push+0x31>
  430b6d:	48 89 5e 40          	mov    %rbx,0x40(%rsi)
  430b71:	48 8b 07             	mov    (%rdi),%rax
  430b74:	48 89 fd             	mov    %rdi,%rbp
  430b77:	48 85 c0             	test   %rax,%rax
  430b7a:	0f 84 84 00 00 00    	je     430c04 <BIO_push+0xc4>
  430b80:	48 8b 40 30          	mov    0x30(%rax),%rax
  430b84:	48 85 c0             	test   %rax,%rax
  430b87:	74 7b                	je     430c04 <BIO_push+0xc4>
  430b89:	4c 8b 67 08          	mov    0x8(%rdi),%r12
  430b8d:	4d 85 e4             	test   %r12,%r12
  430b90:	74 56                	je     430be8 <BIO_push+0xa8>
  430b92:	45 31 c0             	xor    %r8d,%r8d
  430b95:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  430b9b:	b9 06 00 00 00       	mov    $0x6,%ecx
  430ba0:	48 89 da             	mov    %rbx,%rdx
  430ba3:	be 06 00 00 00       	mov    $0x6,%esi
  430ba8:	41 ff d4             	callq  *%r12
  430bab:	48 85 c0             	test   %rax,%rax
  430bae:	7e 2d                	jle    430bdd <BIO_push+0x9d>
  430bb0:	48 8b 45 00          	mov    0x0(%rbp),%rax
  430bb4:	48 89 d9             	mov    %rbx,%rcx
  430bb7:	31 d2                	xor    %edx,%edx
  430bb9:	be 06 00 00 00       	mov    $0x6,%esi
  430bbe:	48 89 ef             	mov    %rbp,%rdi
  430bc1:	ff 50 30             	callq  *0x30(%rax)
  430bc4:	45 31 c0             	xor    %r8d,%r8d
  430bc7:	49 89 c1             	mov    %rax,%r9
  430bca:	b9 06 00 00 00       	mov    $0x6,%ecx
  430bcf:	48 89 da             	mov    %rbx,%rdx
  430bd2:	be 86 00 00 00       	mov    $0x86,%esi
  430bd7:	48 89 ef             	mov    %rbp,%rdi
  430bda:	41 ff d4             	callq  *%r12
  430bdd:	48 89 e8             	mov    %rbp,%rax
  430be0:	5b                   	pop    %rbx
  430be1:	5d                   	pop    %rbp
  430be2:	41 5c                	pop    %r12
  430be4:	c3                   	retq   
  430be5:	0f 1f 00             	nopl   (%rax)
  430be8:	48 89 d9             	mov    %rbx,%rcx
  430beb:	31 d2                	xor    %edx,%edx
  430bed:	be 06 00 00 00       	mov    $0x6,%esi
  430bf2:	ff d0                	callq  *%rax
  430bf4:	48 89 e8             	mov    %rbp,%rax
  430bf7:	5b                   	pop    %rbx
  430bf8:	5d                   	pop    %rbp
  430bf9:	41 5c                	pop    %r12
  430bfb:	c3                   	retq   
  430bfc:	0f 1f 40 00          	nopl   0x0(%rax)
  430c00:	48 89 f0             	mov    %rsi,%rax
  430c03:	c3                   	retq   
  430c04:	41 b8 68 01 00 00    	mov    $0x168,%r8d
  430c0a:	b9 f1 09 45 00       	mov    $0x4509f1,%ecx
  430c0f:	ba 79 00 00 00       	mov    $0x79,%edx
  430c14:	be 67 00 00 00       	mov    $0x67,%esi
  430c19:	bf 20 00 00 00       	mov    $0x20,%edi
  430c1e:	e8 2d 77 ff ff       	callq  428350 <ERR_put_error>
  430c23:	48 89 e8             	mov    %rbp,%rax
  430c26:	eb b8                	jmp    430be0 <BIO_push+0xa0>
  430c28:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  430c2f:	00 

0000000000430c30 <BIO_pop>:
  430c30:	48 85 ff             	test   %rdi,%rdi
  430c33:	0f 84 c7 00 00 00    	je     430d00 <BIO_pop+0xd0>
  430c39:	41 54                	push   %r12
  430c3b:	55                   	push   %rbp
  430c3c:	53                   	push   %rbx
  430c3d:	48 8b 07             	mov    (%rdi),%rax
  430c40:	48 89 fb             	mov    %rdi,%rbx
  430c43:	4c 8b 67 38          	mov    0x38(%rdi),%r12
  430c47:	48 85 c0             	test   %rax,%rax
  430c4a:	0f 84 b3 00 00 00    	je     430d03 <BIO_pop+0xd3>
  430c50:	48 8b 40 30          	mov    0x30(%rax),%rax
  430c54:	48 85 c0             	test   %rax,%rax
  430c57:	0f 84 a6 00 00 00    	je     430d03 <BIO_pop+0xd3>
  430c5d:	48 8b 6f 08          	mov    0x8(%rdi),%rbp
  430c61:	48 85 ed             	test   %rbp,%rbp
  430c64:	0f 84 86 00 00 00    	je     430cf0 <BIO_pop+0xc0>
  430c6a:	45 31 c0             	xor    %r8d,%r8d
  430c6d:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  430c73:	b9 07 00 00 00       	mov    $0x7,%ecx
  430c78:	48 89 fa             	mov    %rdi,%rdx
  430c7b:	be 06 00 00 00       	mov    $0x6,%esi
  430c80:	ff d5                	callq  *%rbp
  430c82:	48 85 c0             	test   %rax,%rax
  430c85:	7e 2b                	jle    430cb2 <BIO_pop+0x82>
  430c87:	48 8b 03             	mov    (%rbx),%rax
  430c8a:	48 89 d9             	mov    %rbx,%rcx
  430c8d:	31 d2                	xor    %edx,%edx
  430c8f:	be 07 00 00 00       	mov    $0x7,%esi
  430c94:	48 89 df             	mov    %rbx,%rdi
  430c97:	ff 50 30             	callq  *0x30(%rax)
  430c9a:	45 31 c0             	xor    %r8d,%r8d
  430c9d:	49 89 c1             	mov    %rax,%r9
  430ca0:	b9 07 00 00 00       	mov    $0x7,%ecx
  430ca5:	48 89 da             	mov    %rbx,%rdx
  430ca8:	be 86 00 00 00       	mov    $0x86,%esi
  430cad:	48 89 df             	mov    %rbx,%rdi
  430cb0:	ff d5                	callq  *%rbp
  430cb2:	48 8b 53 40          	mov    0x40(%rbx),%rdx
  430cb6:	48 85 d2             	test   %rdx,%rdx
  430cb9:	74 08                	je     430cc3 <BIO_pop+0x93>
  430cbb:	48 8b 43 38          	mov    0x38(%rbx),%rax
  430cbf:	48 89 42 38          	mov    %rax,0x38(%rdx)
  430cc3:	48 8b 43 38          	mov    0x38(%rbx),%rax
  430cc7:	48 85 c0             	test   %rax,%rax
  430cca:	74 04                	je     430cd0 <BIO_pop+0xa0>
  430ccc:	48 89 50 40          	mov    %rdx,0x40(%rax)
  430cd0:	48 c7 43 38 00 00 00 	movq   $0x0,0x38(%rbx)
  430cd7:	00 
  430cd8:	48 c7 43 40 00 00 00 	movq   $0x0,0x40(%rbx)
  430cdf:	00 
  430ce0:	4c 89 e0             	mov    %r12,%rax
  430ce3:	5b                   	pop    %rbx
  430ce4:	5d                   	pop    %rbp
  430ce5:	41 5c                	pop    %r12
  430ce7:	c3                   	retq   
  430ce8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  430cef:	00 
  430cf0:	48 89 f9             	mov    %rdi,%rcx
  430cf3:	31 d2                	xor    %edx,%edx
  430cf5:	be 07 00 00 00       	mov    $0x7,%esi
  430cfa:	ff d0                	callq  *%rax
  430cfc:	eb b4                	jmp    430cb2 <BIO_pop+0x82>
  430cfe:	66 90                	xchg   %ax,%ax
  430d00:	31 c0                	xor    %eax,%eax
  430d02:	c3                   	retq   
  430d03:	41 b8 68 01 00 00    	mov    $0x168,%r8d
  430d09:	b9 f1 09 45 00       	mov    $0x4509f1,%ecx
  430d0e:	ba 79 00 00 00       	mov    $0x79,%edx
  430d13:	be 67 00 00 00       	mov    $0x67,%esi
  430d18:	bf 20 00 00 00       	mov    $0x20,%edi
  430d1d:	e8 2e 76 ff ff       	callq  428350 <ERR_put_error>
  430d22:	eb 8e                	jmp    430cb2 <BIO_pop+0x82>
  430d24:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
  430d2b:	00 00 00 00 00 

0000000000430d30 <BIO_get_retry_BIO>:
  430d30:	48 89 f8             	mov    %rdi,%rax
  430d33:	eb 12                	jmp    430d47 <BIO_get_retry_BIO+0x17>
  430d35:	0f 1f 00             	nopl   (%rax)
  430d38:	48 8b 57 38          	mov    0x38(%rdi),%rdx
  430d3c:	48 89 f8             	mov    %rdi,%rax
  430d3f:	48 85 d2             	test   %rdx,%rdx
  430d42:	74 09                	je     430d4d <BIO_get_retry_BIO+0x1d>
  430d44:	48 89 d7             	mov    %rdx,%rdi
  430d47:	f6 47 20 08          	testb  $0x8,0x20(%rdi)
  430d4b:	75 eb                	jne    430d38 <BIO_get_retry_BIO+0x8>
  430d4d:	48 85 f6             	test   %rsi,%rsi
  430d50:	74 05                	je     430d57 <BIO_get_retry_BIO+0x27>
  430d52:	8b 50 24             	mov    0x24(%rax),%edx
  430d55:	89 16                	mov    %edx,(%rsi)
  430d57:	f3 c3                	repz retq 
  430d59:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000430d60 <BIO_get_retry_reason>:
  430d60:	8b 47 24             	mov    0x24(%rdi),%eax
  430d63:	c3                   	retq   
  430d64:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
  430d6b:	00 00 00 00 00 

0000000000430d70 <BIO_find_type>:
  430d70:	48 85 ff             	test   %rdi,%rdi
  430d73:	74 20                	je     430d95 <BIO_find_type+0x25>
  430d75:	40 84 f6             	test   %sil,%sil
  430d78:	74 26                	je     430da0 <BIO_find_type+0x30>
  430d7a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  430d80:	48 8b 07             	mov    (%rdi),%rax
  430d83:	48 85 c0             	test   %rax,%rax
  430d86:	74 04                	je     430d8c <BIO_find_type+0x1c>
  430d88:	39 30                	cmp    %esi,(%rax)
  430d8a:	74 34                	je     430dc0 <BIO_find_type+0x50>
  430d8c:	48 8b 7f 38          	mov    0x38(%rdi),%rdi
  430d90:	48 85 ff             	test   %rdi,%rdi
  430d93:	75 eb                	jne    430d80 <BIO_find_type+0x10>
  430d95:	31 c0                	xor    %eax,%eax
  430d97:	c3                   	retq   
  430d98:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  430d9f:	00 
  430da0:	48 8b 07             	mov    (%rdi),%rax
  430da3:	48 85 c0             	test   %rax,%rax
  430da6:	74 04                	je     430dac <BIO_find_type+0x3c>
  430da8:	85 30                	test   %esi,(%rax)
  430daa:	75 14                	jne    430dc0 <BIO_find_type+0x50>
  430dac:	48 8b 7f 38          	mov    0x38(%rdi),%rdi
  430db0:	48 85 ff             	test   %rdi,%rdi
  430db3:	75 eb                	jne    430da0 <BIO_find_type+0x30>
  430db5:	31 c0                	xor    %eax,%eax
  430db7:	c3                   	retq   
  430db8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  430dbf:	00 
  430dc0:	48 89 f8             	mov    %rdi,%rax
  430dc3:	c3                   	retq   
  430dc4:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
  430dcb:	00 00 00 00 00 

0000000000430dd0 <BIO_next>:
  430dd0:	48 85 ff             	test   %rdi,%rdi
  430dd3:	74 0b                	je     430de0 <BIO_next+0x10>
  430dd5:	48 8b 47 38          	mov    0x38(%rdi),%rax
  430dd9:	c3                   	retq   
  430dda:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  430de0:	31 c0                	xor    %eax,%eax
  430de2:	c3                   	retq   
  430de3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  430dea:	84 00 00 00 00 00 

0000000000430df0 <BIO_free_all>:
  430df0:	48 85 ff             	test   %rdi,%rdi
  430df3:	41 54                	push   %r12
  430df5:	55                   	push   %rbp
  430df6:	53                   	push   %rbx
  430df7:	48 89 fb             	mov    %rdi,%rbx
  430dfa:	75 21                	jne    430e1d <BIO_free_all+0x2d>
  430dfc:	e9 a7 00 00 00       	jmpq   430ea8 <BIO_free_all+0xb8>
  430e01:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  430e08:	83 fd 01             	cmp    $0x1,%ebp
  430e0b:	0f 8f 97 00 00 00    	jg     430ea8 <BIO_free_all+0xb8>
  430e11:	4d 85 e4             	test   %r12,%r12
  430e14:	4c 89 e3             	mov    %r12,%rbx
  430e17:	0f 84 8b 00 00 00    	je     430ea8 <BIO_free_all+0xb8>
  430e1d:	48 8d 7b 48          	lea    0x48(%rbx),%rdi
  430e21:	41 b8 75 00 00 00    	mov    $0x75,%r8d
  430e27:	b9 f1 09 45 00       	mov    $0x4509f1,%ecx
  430e2c:	ba 15 00 00 00       	mov    $0x15,%edx
  430e31:	be ff ff ff ff       	mov    $0xffffffff,%esi
  430e36:	8b 6b 48             	mov    0x48(%rbx),%ebp
  430e39:	4c 8b 63 38          	mov    0x38(%rbx),%r12
  430e3d:	e8 3e 40 ff ff       	callq  424e80 <CRYPTO_add_lock>
  430e42:	85 c0                	test   %eax,%eax
  430e44:	7f c2                	jg     430e08 <BIO_free_all+0x18>
  430e46:	48 8b 43 08          	mov    0x8(%rbx),%rax
  430e4a:	48 85 c0             	test   %rax,%rax
  430e4d:	74 1b                	je     430e6a <BIO_free_all+0x7a>
  430e4f:	45 31 c0             	xor    %r8d,%r8d
  430e52:	31 c9                	xor    %ecx,%ecx
  430e54:	31 d2                	xor    %edx,%edx
  430e56:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  430e5c:	be 01 00 00 00       	mov    $0x1,%esi
  430e61:	48 89 df             	mov    %rbx,%rdi
  430e64:	ff d0                	callq  *%rax
  430e66:	85 c0                	test   %eax,%eax
  430e68:	7e 9e                	jle    430e08 <BIO_free_all+0x18>
  430e6a:	48 8d 53 60          	lea    0x60(%rbx),%rdx
  430e6e:	31 ff                	xor    %edi,%edi
  430e70:	48 89 de             	mov    %rbx,%rsi
  430e73:	e8 38 6b 00 00       	callq  4379b0 <CRYPTO_free_ex_data>
  430e78:	48 8b 03             	mov    (%rbx),%rax
  430e7b:	48 85 c0             	test   %rax,%rax
  430e7e:	74 88                	je     430e08 <BIO_free_all+0x18>
  430e80:	48 8b 40 40          	mov    0x40(%rax),%rax
  430e84:	48 85 c0             	test   %rax,%rax
  430e87:	0f 84 7b ff ff ff    	je     430e08 <BIO_free_all+0x18>
  430e8d:	48 89 df             	mov    %rbx,%rdi
  430e90:	ff d0                	callq  *%rax
  430e92:	48 89 df             	mov    %rbx,%rdi
  430e95:	e8 c6 48 ff ff       	callq  425760 <CRYPTO_free>
  430e9a:	83 fd 01             	cmp    $0x1,%ebp
  430e9d:	0f 8e 6e ff ff ff    	jle    430e11 <BIO_free_all+0x21>
  430ea3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  430ea8:	5b                   	pop    %rbx
  430ea9:	5d                   	pop    %rbp
  430eaa:	41 5c                	pop    %r12
  430eac:	c3                   	retq   
  430ead:	0f 1f 00             	nopl   (%rax)

0000000000430eb0 <BIO_dup_chain>:
  430eb0:	41 57                	push   %r15
  430eb2:	41 56                	push   %r14
  430eb4:	41 55                	push   %r13
  430eb6:	41 54                	push   %r12
  430eb8:	55                   	push   %rbp
  430eb9:	53                   	push   %rbx
  430eba:	48 89 fd             	mov    %rdi,%rbp
  430ebd:	48 83 ec 08          	sub    $0x8,%rsp
  430ec1:	48 85 ff             	test   %rdi,%rdi
  430ec4:	0f 84 c6 02 00 00    	je     431190 <BIO_dup_chain+0x2e0>
  430eca:	45 31 e4             	xor    %r12d,%r12d
  430ecd:	45 31 ed             	xor    %r13d,%r13d
  430ed0:	ba 46 00 00 00       	mov    $0x46,%edx
  430ed5:	be f1 09 45 00       	mov    $0x4509f1,%esi
  430eda:	bf 70 00 00 00       	mov    $0x70,%edi
  430edf:	4c 8b 7d 00          	mov    0x0(%rbp),%r15
  430ee3:	e8 18 45 ff ff       	callq  425400 <CRYPTO_malloc>
  430ee8:	48 85 c0             	test   %rax,%rax
  430eeb:	48 89 c3             	mov    %rax,%rbx
  430eee:	0f 84 99 01 00 00    	je     43108d <BIO_dup_chain+0x1dd>
  430ef4:	4c 8d 70 60          	lea    0x60(%rax),%r14
  430ef8:	31 ff                	xor    %edi,%edi
  430efa:	4c 89 38             	mov    %r15,(%rax)
  430efd:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  430f04:	00 
  430f05:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  430f0c:	00 
  430f0d:	48 89 c6             	mov    %rax,%rsi
  430f10:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%rax)
  430f17:	c7 40 1c 01 00 00 00 	movl   $0x1,0x1c(%rax)
  430f1e:	4c 89 f2             	mov    %r14,%rdx
  430f21:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%rax)
  430f28:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%rax)
  430f2f:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%rax)
  430f36:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
  430f3d:	00 
  430f3e:	48 c7 40 40 00 00 00 	movq   $0x0,0x40(%rax)
  430f45:	00 
  430f46:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
  430f4d:	00 
  430f4e:	c7 40 48 01 00 00 00 	movl   $0x1,0x48(%rax)
  430f55:	48 c7 40 50 00 00 00 	movq   $0x0,0x50(%rax)
  430f5c:	00 
  430f5d:	48 c7 40 58 00 00 00 	movq   $0x0,0x58(%rax)
  430f64:	00 
  430f65:	e8 26 69 00 00       	callq  437890 <CRYPTO_new_ex_data>
  430f6a:	49 8b 47 38          	mov    0x38(%r15),%rax
  430f6e:	48 85 c0             	test   %rax,%rax
  430f71:	74 0d                	je     430f80 <BIO_dup_chain+0xd0>
  430f73:	48 89 df             	mov    %rbx,%rdi
  430f76:	ff d0                	callq  *%rax
  430f78:	85 c0                	test   %eax,%eax
  430f7a:	0f 84 b8 00 00 00    	je     431038 <BIO_dup_chain+0x188>
  430f80:	48 8b 45 08          	mov    0x8(%rbp),%rax
  430f84:	31 d2                	xor    %edx,%edx
  430f86:	48 89 d9             	mov    %rbx,%rcx
  430f89:	be 0c 00 00 00       	mov    $0xc,%esi
  430f8e:	48 89 ef             	mov    %rbp,%rdi
  430f91:	48 89 43 08          	mov    %rax,0x8(%rbx)
  430f95:	48 8b 45 10          	mov    0x10(%rbp),%rax
  430f99:	48 89 43 10          	mov    %rax,0x10(%rbx)
  430f9d:	8b 45 18             	mov    0x18(%rbp),%eax
  430fa0:	89 43 18             	mov    %eax,0x18(%rbx)
  430fa3:	8b 45 1c             	mov    0x1c(%rbp),%eax
  430fa6:	89 43 1c             	mov    %eax,0x1c(%rbx)
  430fa9:	8b 45 20             	mov    0x20(%rbp),%eax
  430fac:	89 43 20             	mov    %eax,0x20(%rbx)
  430faf:	8b 45 28             	mov    0x28(%rbp),%eax
  430fb2:	89 43 28             	mov    %eax,0x28(%rbx)
  430fb5:	e8 36 f8 ff ff       	callq  4307f0 <BIO_ctrl>
  430fba:	48 85 c0             	test   %rax,%rax
  430fbd:	0f 84 47 01 00 00    	je     43110a <BIO_dup_chain+0x25a>
  430fc3:	48 8d 55 60          	lea    0x60(%rbp),%rdx
  430fc7:	31 ff                	xor    %edi,%edi
  430fc9:	4c 89 f6             	mov    %r14,%rsi
  430fcc:	e8 4f 69 00 00       	callq  437920 <CRYPTO_dup_ex_data>
  430fd1:	85 c0                	test   %eax,%eax
  430fd3:	74 78                	je     43104d <BIO_dup_chain+0x19d>
  430fd5:	4d 85 ed             	test   %r13,%r13
  430fd8:	0f 84 aa 00 00 00    	je     431088 <BIO_dup_chain+0x1d8>
  430fde:	4d 85 e4             	test   %r12,%r12
  430fe1:	74 2e                	je     431011 <BIO_dup_chain+0x161>
  430fe3:	4c 89 e1             	mov    %r12,%rcx
  430fe6:	eb 0b                	jmp    430ff3 <BIO_dup_chain+0x143>
  430fe8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  430fef:	00 
  430ff0:	48 89 d1             	mov    %rdx,%rcx
  430ff3:	48 8b 51 38          	mov    0x38(%rcx),%rdx
  430ff7:	48 85 d2             	test   %rdx,%rdx
  430ffa:	75 f4                	jne    430ff0 <BIO_dup_chain+0x140>
  430ffc:	48 89 59 38          	mov    %rbx,0x38(%rcx)
  431000:	be 06 00 00 00       	mov    $0x6,%esi
  431005:	48 89 4b 40          	mov    %rcx,0x40(%rbx)
  431009:	4c 89 e7             	mov    %r12,%rdi
  43100c:	e8 df f7 ff ff       	callq  4307f0 <BIO_ctrl>
  431011:	48 8b 6d 38          	mov    0x38(%rbp),%rbp
  431015:	49 89 dc             	mov    %rbx,%r12
  431018:	48 85 ed             	test   %rbp,%rbp
  43101b:	0f 85 af fe ff ff    	jne    430ed0 <BIO_dup_chain+0x20>
  431021:	48 83 c4 08          	add    $0x8,%rsp
  431025:	4c 89 e8             	mov    %r13,%rax
  431028:	5b                   	pop    %rbx
  431029:	5d                   	pop    %rbp
  43102a:	41 5c                	pop    %r12
  43102c:	41 5d                	pop    %r13
  43102e:	41 5e                	pop    %r14
  431030:	41 5f                	pop    %r15
  431032:	c3                   	retq   
  431033:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  431038:	31 ff                	xor    %edi,%edi
  43103a:	4c 89 f2             	mov    %r14,%rdx
  43103d:	48 89 de             	mov    %rbx,%rsi
  431040:	e8 6b 69 00 00       	callq  4379b0 <CRYPTO_free_ex_data>
  431045:	48 89 df             	mov    %rbx,%rdi
  431048:	e8 13 47 ff ff       	callq  425760 <CRYPTO_free>
  43104d:	4d 85 ed             	test   %r13,%r13
  431050:	74 22                	je     431074 <BIO_dup_chain+0x1c4>
  431052:	49 8d 7d 48          	lea    0x48(%r13),%rdi
  431056:	41 b8 75 00 00 00    	mov    $0x75,%r8d
  43105c:	b9 f1 09 45 00       	mov    $0x4509f1,%ecx
  431061:	ba 15 00 00 00       	mov    $0x15,%edx
  431066:	be ff ff ff ff       	mov    $0xffffffff,%esi
  43106b:	e8 10 3e ff ff       	callq  424e80 <CRYPTO_add_lock>
  431070:	85 c0                	test   %eax,%eax
  431072:	7e 3c                	jle    4310b0 <BIO_dup_chain+0x200>
  431074:	48 83 c4 08          	add    $0x8,%rsp
  431078:	31 c0                	xor    %eax,%eax
  43107a:	5b                   	pop    %rbx
  43107b:	5d                   	pop    %rbp
  43107c:	41 5c                	pop    %r12
  43107e:	41 5d                	pop    %r13
  431080:	41 5e                	pop    %r14
  431082:	41 5f                	pop    %r15
  431084:	c3                   	retq   
  431085:	0f 1f 00             	nopl   (%rax)
  431088:	49 89 dd             	mov    %rbx,%r13
  43108b:	eb 84                	jmp    431011 <BIO_dup_chain+0x161>
  43108d:	41 b8 49 00 00 00    	mov    $0x49,%r8d
  431093:	b9 f1 09 45 00       	mov    $0x4509f1,%ecx
  431098:	ba 41 00 00 00       	mov    $0x41,%edx
  43109d:	be 6c 00 00 00       	mov    $0x6c,%esi
  4310a2:	bf 20 00 00 00       	mov    $0x20,%edi
  4310a7:	e8 a4 72 ff ff       	callq  428350 <ERR_put_error>
  4310ac:	eb 9f                	jmp    43104d <BIO_dup_chain+0x19d>
  4310ae:	66 90                	xchg   %ax,%ax
  4310b0:	49 8b 45 08          	mov    0x8(%r13),%rax
  4310b4:	48 85 c0             	test   %rax,%rax
  4310b7:	74 1b                	je     4310d4 <BIO_dup_chain+0x224>
  4310b9:	45 31 c0             	xor    %r8d,%r8d
  4310bc:	31 c9                	xor    %ecx,%ecx
  4310be:	31 d2                	xor    %edx,%edx
  4310c0:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  4310c6:	be 01 00 00 00       	mov    $0x1,%esi
  4310cb:	4c 89 ef             	mov    %r13,%rdi
  4310ce:	ff d0                	callq  *%rax
  4310d0:	85 c0                	test   %eax,%eax
  4310d2:	7e a0                	jle    431074 <BIO_dup_chain+0x1c4>
  4310d4:	49 8d 55 60          	lea    0x60(%r13),%rdx
  4310d8:	31 ff                	xor    %edi,%edi
  4310da:	4c 89 ee             	mov    %r13,%rsi
  4310dd:	e8 ce 68 00 00       	callq  4379b0 <CRYPTO_free_ex_data>
  4310e2:	49 8b 45 00          	mov    0x0(%r13),%rax
  4310e6:	48 85 c0             	test   %rax,%rax
  4310e9:	74 89                	je     431074 <BIO_dup_chain+0x1c4>
  4310eb:	48 8b 40 40          	mov    0x40(%rax),%rax
  4310ef:	48 85 c0             	test   %rax,%rax
  4310f2:	0f 84 7c ff ff ff    	je     431074 <BIO_dup_chain+0x1c4>
  4310f8:	4c 89 ef             	mov    %r13,%rdi
  4310fb:	ff d0                	callq  *%rax
  4310fd:	4c 89 ef             	mov    %r13,%rdi
  431100:	e8 5b 46 ff ff       	callq  425760 <CRYPTO_free>
  431105:	e9 6a ff ff ff       	jmpq   431074 <BIO_dup_chain+0x1c4>
  43110a:	48 8d 7b 48          	lea    0x48(%rbx),%rdi
  43110e:	41 b8 75 00 00 00    	mov    $0x75,%r8d
  431114:	b9 f1 09 45 00       	mov    $0x4509f1,%ecx
  431119:	ba 15 00 00 00       	mov    $0x15,%edx
  43111e:	be ff ff ff ff       	mov    $0xffffffff,%esi
  431123:	e8 58 3d ff ff       	callq  424e80 <CRYPTO_add_lock>
  431128:	85 c0                	test   %eax,%eax
  43112a:	0f 8f 1d ff ff ff    	jg     43104d <BIO_dup_chain+0x19d>
  431130:	48 8b 43 08          	mov    0x8(%rbx),%rax
  431134:	48 85 c0             	test   %rax,%rax
  431137:	74 1f                	je     431158 <BIO_dup_chain+0x2a8>
  431139:	45 31 c0             	xor    %r8d,%r8d
  43113c:	31 c9                	xor    %ecx,%ecx
  43113e:	31 d2                	xor    %edx,%edx
  431140:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  431146:	be 01 00 00 00       	mov    $0x1,%esi
  43114b:	48 89 df             	mov    %rbx,%rdi
  43114e:	ff d0                	callq  *%rax
  431150:	85 c0                	test   %eax,%eax
  431152:	0f 8e f5 fe ff ff    	jle    43104d <BIO_dup_chain+0x19d>
  431158:	31 ff                	xor    %edi,%edi
  43115a:	4c 89 f2             	mov    %r14,%rdx
  43115d:	48 89 de             	mov    %rbx,%rsi
  431160:	e8 4b 68 00 00       	callq  4379b0 <CRYPTO_free_ex_data>
  431165:	48 8b 03             	mov    (%rbx),%rax
  431168:	48 85 c0             	test   %rax,%rax
  43116b:	0f 84 dc fe ff ff    	je     43104d <BIO_dup_chain+0x19d>
  431171:	48 8b 40 40          	mov    0x40(%rax),%rax
  431175:	48 85 c0             	test   %rax,%rax
  431178:	0f 84 cf fe ff ff    	je     43104d <BIO_dup_chain+0x19d>
  43117e:	48 89 df             	mov    %rbx,%rdi
  431181:	ff d0                	callq  *%rax
  431183:	48 89 df             	mov    %rbx,%rdi
  431186:	e8 d5 45 ff ff       	callq  425760 <CRYPTO_free>
  43118b:	e9 bd fe ff ff       	jmpq   43104d <BIO_dup_chain+0x19d>
  431190:	45 31 ed             	xor    %r13d,%r13d
  431193:	e9 89 fe ff ff       	jmpq   431021 <BIO_dup_chain+0x171>
  431198:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  43119f:	00 

00000000004311a0 <BIO_copy_next_retry>:
  4311a0:	48 8b 57 38          	mov    0x38(%rdi),%rdx
  4311a4:	8b 42 20             	mov    0x20(%rdx),%eax
  4311a7:	83 e0 0f             	and    $0xf,%eax
  4311aa:	09 47 20             	or     %eax,0x20(%rdi)
  4311ad:	8b 42 24             	mov    0x24(%rdx),%eax
  4311b0:	89 47 24             	mov    %eax,0x24(%rdi)
  4311b3:	c3                   	retq   
  4311b4:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
  4311bb:	00 00 00 00 00 

00000000004311c0 <BIO_get_ex_new_index>:
  4311c0:	4d 89 c1             	mov    %r8,%r9
  4311c3:	49 89 c8             	mov    %rcx,%r8
  4311c6:	48 89 d1             	mov    %rdx,%rcx
  4311c9:	48 89 f2             	mov    %rsi,%rdx
  4311cc:	48 89 fe             	mov    %rdi,%rsi
  4311cf:	31 ff                	xor    %edi,%edi
  4311d1:	e9 fa 65 00 00       	jmpq   4377d0 <CRYPTO_get_ex_new_index>
  4311d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4311dd:	00 00 00 

00000000004311e0 <BIO_set_ex_data>:
  4311e0:	48 83 c7 60          	add    $0x60,%rdi
  4311e4:	e9 57 68 00 00       	jmpq   437a40 <CRYPTO_set_ex_data>
  4311e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000004311f0 <BIO_get_ex_data>:
  4311f0:	48 83 c7 60          	add    $0x60,%rdi
  4311f4:	e9 27 69 00 00       	jmpq   437b20 <CRYPTO_get_ex_data>
  4311f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000431200 <BIO_number_read>:
  431200:	48 85 ff             	test   %rdi,%rdi
  431203:	74 0b                	je     431210 <BIO_number_read+0x10>
  431205:	48 8b 47 50          	mov    0x50(%rdi),%rax
  431209:	c3                   	retq   
  43120a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  431210:	31 c0                	xor    %eax,%eax
  431212:	c3                   	retq   
  431213:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  43121a:	84 00 00 00 00 00 

0000000000431220 <BIO_number_written>:
  431220:	48 85 ff             	test   %rdi,%rdi
  431223:	74 0b                	je     431230 <BIO_number_written+0x10>
  431225:	48 8b 47 58          	mov    0x58(%rdi),%rax
  431229:	c3                   	retq   
  43122a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  431230:	31 c0                	xor    %eax,%eax
  431232:	c3                   	retq   
  431233:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  43123a:	00 00 00 
  43123d:	0f 1f 00             	nopl   (%rax)

0000000000431240 <file_new>:
  431240:	c7 47 18 00 00 00 00 	movl   $0x0,0x18(%rdi)
  431247:	c7 47 28 00 00 00 00 	movl   $0x0,0x28(%rdi)
  43124e:	b8 01 00 00 00       	mov    $0x1,%eax
  431253:	48 c7 47 30 00 00 00 	movq   $0x0,0x30(%rdi)
  43125a:	00 
  43125b:	c7 47 20 00 00 00 00 	movl   $0x0,0x20(%rdi)
  431262:	c3                   	retq   
  431263:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  43126a:	84 00 00 00 00 00 

0000000000431270 <file_gets>:
  431270:	53                   	push   %rbx
  431271:	48 89 f3             	mov    %rsi,%rbx
  431274:	89 d6                	mov    %edx,%esi
  431276:	c6 03 00             	movb   $0x0,(%rbx)
  431279:	48 8b 57 30          	mov    0x30(%rdi),%rdx
  43127d:	48 89 df             	mov    %rbx,%rdi
  431280:	e8 0b 5b fd ff       	callq  406d90 <fgets@plt>
  431285:	48 85 c0             	test   %rax,%rax
  431288:	b8 00 00 00 00       	mov    $0x0,%eax
  43128d:	74 0d                	je     43129c <file_gets+0x2c>
  43128f:	80 3b 00             	cmpb   $0x0,(%rbx)
  431292:	74 08                	je     43129c <file_gets+0x2c>
  431294:	48 89 df             	mov    %rbx,%rdi
  431297:	e8 14 5b fd ff       	callq  406db0 <strlen@plt>
  43129c:	5b                   	pop    %rbx
  43129d:	c3                   	retq   
  43129e:	66 90                	xchg   %ax,%ax

00000000004312a0 <file_free>:
  4312a0:	48 85 ff             	test   %rdi,%rdi
  4312a3:	74 4b                	je     4312f0 <file_free+0x50>
  4312a5:	8b 57 1c             	mov    0x1c(%rdi),%edx
  4312a8:	b8 01 00 00 00       	mov    $0x1,%eax
  4312ad:	85 d2                	test   %edx,%edx
  4312af:	74 35                	je     4312e6 <file_free+0x46>
  4312b1:	53                   	push   %rbx
  4312b2:	8b 47 18             	mov    0x18(%rdi),%eax
  4312b5:	48 89 fb             	mov    %rdi,%rbx
  4312b8:	85 c0                	test   %eax,%eax
  4312ba:	74 1d                	je     4312d9 <file_free+0x39>
  4312bc:	48 8b 7f 30          	mov    0x30(%rdi),%rdi
  4312c0:	48 85 ff             	test   %rdi,%rdi
  4312c3:	74 14                	je     4312d9 <file_free+0x39>
  4312c5:	e8 56 5c fd ff       	callq  406f20 <fclose@plt>
  4312ca:	48 c7 43 30 00 00 00 	movq   $0x0,0x30(%rbx)
  4312d1:	00 
  4312d2:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%rbx)
  4312d9:	c7 43 18 00 00 00 00 	movl   $0x0,0x18(%rbx)
  4312e0:	b8 01 00 00 00       	mov    $0x1,%eax
  4312e5:	5b                   	pop    %rbx
  4312e6:	f3 c3                	repz retq 
  4312e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4312ef:	00 
  4312f0:	31 c0                	xor    %eax,%eax
  4312f2:	c3                   	retq   
  4312f3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  4312fa:	84 00 00 00 00 00 

0000000000431300 <file_read>:
  431300:	55                   	push   %rbp
  431301:	53                   	push   %rbx
  431302:	48 83 ec 08          	sub    $0x8,%rsp
  431306:	48 85 f6             	test   %rsi,%rsi
  431309:	74 3d                	je     431348 <file_read+0x48>
  43130b:	8b 4f 18             	mov    0x18(%rdi),%ecx
  43130e:	48 89 f8             	mov    %rdi,%rax
  431311:	85 c9                	test   %ecx,%ecx
  431313:	74 33                	je     431348 <file_read+0x48>
  431315:	48 8b 48 30          	mov    0x30(%rax),%rcx
  431319:	48 89 f7             	mov    %rsi,%rdi
  43131c:	48 89 c3             	mov    %rax,%rbx
  43131f:	48 63 d2             	movslq %edx,%rdx
  431322:	be 01 00 00 00       	mov    $0x1,%esi
  431327:	e8 54 5b fd ff       	callq  406e80 <fread@plt>
  43132c:	48 8b 7b 30          	mov    0x30(%rbx),%rdi
  431330:	89 c5                	mov    %eax,%ebp
  431332:	e8 89 5a fd ff       	callq  406dc0 <ferror@plt>
  431337:	85 c0                	test   %eax,%eax
  431339:	75 18                	jne    431353 <file_read+0x53>
  43133b:	48 83 c4 08          	add    $0x8,%rsp
  43133f:	89 e8                	mov    %ebp,%eax
  431341:	5b                   	pop    %rbx
  431342:	5d                   	pop    %rbp
  431343:	c3                   	retq   
  431344:	0f 1f 40 00          	nopl   0x0(%rax)
  431348:	31 ed                	xor    %ebp,%ebp
  43134a:	48 83 c4 08          	add    $0x8,%rsp
  43134e:	89 e8                	mov    %ebp,%eax
  431350:	5b                   	pop    %rbx
  431351:	5d                   	pop    %rbp
  431352:	c3                   	retq   
  431353:	e8 48 5b fd ff       	callq  406ea0 <__errno_location@plt>
  431358:	8b 10                	mov    (%rax),%edx
  43135a:	41 b8 f5 00 00 00    	mov    $0xf5,%r8d
  431360:	b9 fb 09 45 00       	mov    $0x4509fb,%ecx
  431365:	be 0b 00 00 00       	mov    $0xb,%esi
  43136a:	bf 02 00 00 00       	mov    $0x2,%edi
  43136f:	bd ff ff ff ff       	mov    $0xffffffff,%ebp
  431374:	e8 d7 6f ff ff       	callq  428350 <ERR_put_error>
  431379:	41 b8 f6 00 00 00    	mov    $0xf6,%r8d
  43137f:	b9 fb 09 45 00       	mov    $0x4509fb,%ecx
  431384:	ba 02 00 00 00       	mov    $0x2,%edx
  431389:	be 82 00 00 00       	mov    $0x82,%esi
  43138e:	bf 20 00 00 00       	mov    $0x20,%edi
  431393:	e8 b8 6f ff ff       	callq  428350 <ERR_put_error>
  431398:	eb a1                	jmp    43133b <file_read+0x3b>
  43139a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000004313a0 <file_puts>:
  4313a0:	41 54                	push   %r12
  4313a2:	55                   	push   %rbp
  4313a3:	49 89 fc             	mov    %rdi,%r12
  4313a6:	53                   	push   %rbx
  4313a7:	48 89 f7             	mov    %rsi,%rdi
  4313aa:	48 89 f5             	mov    %rsi,%rbp
  4313ad:	31 db                	xor    %ebx,%ebx
  4313af:	e8 fc 59 fd ff       	callq  406db0 <strlen@plt>
  4313b4:	41 8b 54 24 18       	mov    0x18(%r12),%edx
  4313b9:	85 d2                	test   %edx,%edx
  4313bb:	74 21                	je     4313de <file_puts+0x3e>
  4313bd:	49 8b 4c 24 30       	mov    0x30(%r12),%rcx
  4313c2:	48 63 f0             	movslq %eax,%rsi
  4313c5:	ba 01 00 00 00       	mov    $0x1,%edx
  4313ca:	48 89 ef             	mov    %rbp,%rdi
  4313cd:	89 c3                	mov    %eax,%ebx
  4313cf:	e8 8c 5b fd ff       	callq  406f60 <fwrite@plt>
  4313d4:	85 c0                	test   %eax,%eax
  4313d6:	b8 00 00 00 00       	mov    $0x0,%eax
  4313db:	0f 44 d8             	cmove  %eax,%ebx
  4313de:	89 d8                	mov    %ebx,%eax
  4313e0:	5b                   	pop    %rbx
  4313e1:	5d                   	pop    %rbp
  4313e2:	41 5c                	pop    %r12
  4313e4:	c3                   	retq   
  4313e5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  4313ec:	00 00 00 00 

00000000004313f0 <file_write>:
  4313f0:	48 85 f6             	test   %rsi,%rsi
  4313f3:	53                   	push   %rbx
  4313f4:	48 89 f0             	mov    %rsi,%rax
  4313f7:	74 2f                	je     431428 <file_write+0x38>
  4313f9:	8b 4f 18             	mov    0x18(%rdi),%ecx
  4313fc:	85 c9                	test   %ecx,%ecx
  4313fe:	74 28                	je     431428 <file_write+0x38>
  431400:	48 8b 4f 30          	mov    0x30(%rdi),%rcx
  431404:	89 d3                	mov    %edx,%ebx
  431406:	48 63 f2             	movslq %edx,%rsi
  431409:	48 89 c7             	mov    %rax,%rdi
  43140c:	ba 01 00 00 00       	mov    $0x1,%edx
  431411:	e8 4a 5b fd ff       	callq  406f60 <fwrite@plt>
  431416:	85 c0                	test   %eax,%eax
  431418:	b8 00 00 00 00       	mov    $0x0,%eax
  43141d:	0f 44 d8             	cmove  %eax,%ebx
  431420:	89 d8                	mov    %ebx,%eax
  431422:	5b                   	pop    %rbx
  431423:	c3                   	retq   
  431424:	0f 1f 40 00          	nopl   0x0(%rax)
  431428:	31 db                	xor    %ebx,%ebx
  43142a:	89 d8                	mov    %ebx,%eax
  43142c:	5b                   	pop    %rbx
  43142d:	c3                   	retq   
  43142e:	66 90                	xchg   %ax,%ax

0000000000431430 <file_ctrl>:
  431430:	41 54                	push   %r12
  431432:	55                   	push   %rbp
  431433:	53                   	push   %rbx
  431434:	48 89 fb             	mov    %rdi,%rbx
  431437:	48 83 ec 10          	sub    $0x10,%rsp
  43143b:	48 8b 7f 30          	mov    0x30(%rdi),%rdi
  43143f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  431446:	00 00 
  431448:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  43144d:	31 c0                	xor    %eax,%eax
  43144f:	83 fe 0b             	cmp    $0xb,%esi
  431452:	0f 84 28 02 00 00    	je     431680 <file_ctrl+0x250>
  431458:	48 89 d5             	mov    %rdx,%rbp
  43145b:	0f 8e 7f 00 00 00    	jle    4314e0 <file_ctrl+0xb0>
  431461:	83 fe 6b             	cmp    $0x6b,%esi
  431464:	49 89 cc             	mov    %rcx,%r12
  431467:	0f 84 73 01 00 00    	je     4315e0 <file_ctrl+0x1b0>
  43146d:	0f 8f 9d 00 00 00    	jg     431510 <file_ctrl+0xe0>
  431473:	83 fe 0c             	cmp    $0xc,%esi
  431476:	b8 01 00 00 00       	mov    $0x1,%eax
  43147b:	74 43                	je     4314c0 <file_ctrl+0x90>
  43147d:	83 fe 6a             	cmp    $0x6a,%esi
  431480:	0f 85 da 01 00 00    	jne    431660 <file_ctrl+0x230>
  431486:	8b 73 1c             	mov    0x1c(%rbx),%esi
  431489:	85 f6                	test   %esi,%esi
  43148b:	74 18                	je     4314a5 <file_ctrl+0x75>
  43148d:	8b 4b 18             	mov    0x18(%rbx),%ecx
  431490:	85 c9                	test   %ecx,%ecx
  431492:	74 11                	je     4314a5 <file_ctrl+0x75>
  431494:	48 85 ff             	test   %rdi,%rdi
  431497:	74 0c                	je     4314a5 <file_ctrl+0x75>
  431499:	e8 82 5a fd ff       	callq  406f20 <fclose@plt>
  43149e:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%rbx)
  4314a5:	83 e5 01             	and    $0x1,%ebp
  4314a8:	4c 89 63 30          	mov    %r12,0x30(%rbx)
  4314ac:	c7 43 18 01 00 00 00 	movl   $0x1,0x18(%rbx)
  4314b3:	89 6b 1c             	mov    %ebp,0x1c(%rbx)
  4314b6:	b8 01 00 00 00       	mov    $0x1,%eax
  4314bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4314c0:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  4314c5:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  4314cc:	00 00 
  4314ce:	0f 85 a8 02 00 00    	jne    43177c <file_ctrl+0x34c>
  4314d4:	48 83 c4 10          	add    $0x10,%rsp
  4314d8:	5b                   	pop    %rbx
  4314d9:	5d                   	pop    %rbp
  4314da:	41 5c                	pop    %r12
  4314dc:	c3                   	retq   
  4314dd:	0f 1f 00             	nopl   (%rax)
  4314e0:	83 fe 03             	cmp    $0x3,%esi
  4314e3:	0f 84 87 01 00 00    	je     431670 <file_ctrl+0x240>
  4314e9:	0f 8e 39 01 00 00    	jle    431628 <file_ctrl+0x1f8>
  4314ef:	83 fe 08             	cmp    $0x8,%esi
  4314f2:	0f 84 08 01 00 00    	je     431600 <file_ctrl+0x1d0>
  4314f8:	83 fe 09             	cmp    $0x9,%esi
  4314fb:	0f 85 5f 01 00 00    	jne    431660 <file_ctrl+0x230>
  431501:	89 53 1c             	mov    %edx,0x1c(%rbx)
  431504:	b8 01 00 00 00       	mov    $0x1,%eax
  431509:	eb b5                	jmp    4314c0 <file_ctrl+0x90>
  43150b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  431510:	81 fe 80 00 00 00    	cmp    $0x80,%esi
  431516:	0f 84 f4 00 00 00    	je     431610 <file_ctrl+0x1e0>
  43151c:	81 fe 85 00 00 00    	cmp    $0x85,%esi
  431522:	0f 84 48 01 00 00    	je     431670 <file_ctrl+0x240>
  431528:	83 fe 6c             	cmp    $0x6c,%esi
  43152b:	0f 85 2f 01 00 00    	jne    431660 <file_ctrl+0x230>
  431531:	8b 53 1c             	mov    0x1c(%rbx),%edx
  431534:	85 d2                	test   %edx,%edx
  431536:	74 27                	je     43155f <file_ctrl+0x12f>
  431538:	8b 43 18             	mov    0x18(%rbx),%eax
  43153b:	85 c0                	test   %eax,%eax
  43153d:	74 19                	je     431558 <file_ctrl+0x128>
  43153f:	48 85 ff             	test   %rdi,%rdi
  431542:	74 14                	je     431558 <file_ctrl+0x128>
  431544:	e8 d7 59 fd ff       	callq  406f20 <fclose@plt>
  431549:	48 c7 43 30 00 00 00 	movq   $0x0,0x30(%rbx)
  431550:	00 
  431551:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%rbx)
  431558:	c7 43 18 00 00 00 00 	movl   $0x0,0x18(%rbx)
  43155f:	89 e8                	mov    %ebp,%eax
  431561:	83 e0 01             	and    $0x1,%eax
  431564:	40 f6 c5 08          	test   $0x8,%bpl
  431568:	89 43 1c             	mov    %eax,0x1c(%rbx)
  43156b:	0f 85 1f 01 00 00    	jne    431690 <file_ctrl+0x260>
  431571:	48 89 e8             	mov    %rbp,%rax
  431574:	83 e0 06             	and    $0x6,%eax
  431577:	48 83 f8 06          	cmp    $0x6,%rax
  43157b:	0f 84 e1 01 00 00    	je     431762 <file_ctrl+0x332>
  431581:	40 f6 c5 04          	test   $0x4,%bpl
  431585:	0f 85 bd 01 00 00    	jne    431748 <file_ctrl+0x318>
  43158b:	83 e5 02             	and    $0x2,%ebp
  43158e:	0f 84 ac 00 00 00    	je     431640 <file_ctrl+0x210>
  431594:	ba 04 00 00 00       	mov    $0x4,%edx
  431599:	be e1 28 44 00       	mov    $0x4428e1,%esi
  43159e:	48 89 e7             	mov    %rsp,%rdi
  4315a1:	48 89 e5             	mov    %rsp,%rbp
  4315a4:	e8 97 47 ff ff       	callq  425d40 <BUF_strlcpy>
  4315a9:	48 89 ee             	mov    %rbp,%rsi
  4315ac:	4c 89 e7             	mov    %r12,%rdi
  4315af:	e8 9c 59 fd ff       	callq  406f50 <fopen64@plt>
  4315b4:	48 85 c0             	test   %rax,%rax
  4315b7:	0f 84 1b 01 00 00    	je     4316d8 <file_ctrl+0x2a8>
  4315bd:	48 89 43 30          	mov    %rax,0x30(%rbx)
  4315c1:	c7 43 18 01 00 00 00 	movl   $0x1,0x18(%rbx)
  4315c8:	31 f6                	xor    %esi,%esi
  4315ca:	48 89 df             	mov    %rbx,%rdi
  4315cd:	e8 5e ea ff ff       	callq  430030 <BIO_clear_flags>
  4315d2:	b8 01 00 00 00       	mov    $0x1,%eax
  4315d7:	e9 e4 fe ff ff       	jmpq   4314c0 <file_ctrl+0x90>
  4315dc:	0f 1f 40 00          	nopl   0x0(%rax)
  4315e0:	48 85 c9             	test   %rcx,%rcx
  4315e3:	0f 84 df 00 00 00    	je     4316c8 <file_ctrl+0x298>
  4315e9:	48 89 39             	mov    %rdi,(%rcx)
  4315ec:	b8 01 00 00 00       	mov    $0x1,%eax
  4315f1:	e9 ca fe ff ff       	jmpq   4314c0 <file_ctrl+0x90>
  4315f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4315fd:	00 00 00 
  431600:	48 63 43 1c          	movslq 0x1c(%rbx),%rax
  431604:	e9 b7 fe ff ff       	jmpq   4314c0 <file_ctrl+0x90>
  431609:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  431610:	31 d2                	xor    %edx,%edx
  431612:	48 89 ee             	mov    %rbp,%rsi
  431615:	e8 c6 56 fd ff       	callq  406ce0 <fseek@plt>
  43161a:	48 98                	cltq   
  43161c:	e9 9f fe ff ff       	jmpq   4314c0 <file_ctrl+0x90>
  431621:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  431628:	83 fe 01             	cmp    $0x1,%esi
  43162b:	74 e3                	je     431610 <file_ctrl+0x1e0>
  43162d:	83 fe 02             	cmp    $0x2,%esi
  431630:	75 2e                	jne    431660 <file_ctrl+0x230>
  431632:	e8 d9 58 fd ff       	callq  406f10 <feof@plt>
  431637:	48 98                	cltq   
  431639:	e9 82 fe ff ff       	jmpq   4314c0 <file_ctrl+0x90>
  43163e:	66 90                	xchg   %ax,%ax
  431640:	41 b8 7b 01 00 00    	mov    $0x17b,%r8d
  431646:	b9 fb 09 45 00       	mov    $0x4509fb,%ecx
  43164b:	ba 65 00 00 00       	mov    $0x65,%edx
  431650:	be 74 00 00 00       	mov    $0x74,%esi
  431655:	bf 20 00 00 00       	mov    $0x20,%edi
  43165a:	e8 f1 6c ff ff       	callq  428350 <ERR_put_error>
  43165f:	90                   	nop
  431660:	31 c0                	xor    %eax,%eax
  431662:	e9 59 fe ff ff       	jmpq   4314c0 <file_ctrl+0x90>
  431667:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  43166e:	00 00 
  431670:	e8 1b 56 fd ff       	callq  406c90 <ftell@plt>
  431675:	e9 46 fe ff ff       	jmpq   4314c0 <file_ctrl+0x90>
  43167a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  431680:	e8 9b 59 fd ff       	callq  407020 <fflush@plt>
  431685:	b8 01 00 00 00       	mov    $0x1,%eax
  43168a:	e9 31 fe ff ff       	jmpq   4314c0 <file_ctrl+0x90>
  43168f:	90                   	nop
  431690:	83 e5 02             	and    $0x2,%ebp
  431693:	ba 04 00 00 00       	mov    $0x4,%edx
  431698:	48 89 e5             	mov    %rsp,%rbp
  43169b:	74 13                	je     4316b0 <file_ctrl+0x280>
  43169d:	be 06 0a 45 00       	mov    $0x450a06,%esi
  4316a2:	48 89 e7             	mov    %rsp,%rdi
  4316a5:	e8 96 46 ff ff       	callq  425d40 <BUF_strlcpy>
  4316aa:	e9 fa fe ff ff       	jmpq   4315a9 <file_ctrl+0x179>
  4316af:	90                   	nop
  4316b0:	be a0 25 44 00       	mov    $0x4425a0,%esi
  4316b5:	48 89 e7             	mov    %rsp,%rdi
  4316b8:	e8 83 46 ff ff       	callq  425d40 <BUF_strlcpy>
  4316bd:	e9 e7 fe ff ff       	jmpq   4315a9 <file_ctrl+0x179>
  4316c2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  4316c8:	b8 01 00 00 00       	mov    $0x1,%eax
  4316cd:	e9 ee fd ff ff       	jmpq   4314c0 <file_ctrl+0x90>
  4316d2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  4316d8:	e8 c3 57 fd ff       	callq  406ea0 <__errno_location@plt>
  4316dd:	8b 10                	mov    (%rax),%edx
  4316df:	41 b8 8e 01 00 00    	mov    $0x18e,%r8d
  4316e5:	b9 fb 09 45 00       	mov    $0x4509fb,%ecx
  4316ea:	be 01 00 00 00       	mov    $0x1,%esi
  4316ef:	bf 02 00 00 00       	mov    $0x2,%edi
  4316f4:	e8 57 6c ff ff       	callq  428350 <ERR_put_error>
  4316f9:	31 c0                	xor    %eax,%eax
  4316fb:	41 b9 0e 0a 45 00    	mov    $0x450a0e,%r9d
  431701:	49 89 e8             	mov    %rbp,%r8
  431704:	b9 11 0a 45 00       	mov    $0x450a11,%ecx
  431709:	4c 89 e2             	mov    %r12,%rdx
  43170c:	be 15 0a 45 00       	mov    $0x450a15,%esi
  431711:	bf 05 00 00 00       	mov    $0x5,%edi
  431716:	e8 15 77 ff ff       	callq  428e30 <ERR_add_error_data>
  43171b:	41 b8 90 01 00 00    	mov    $0x190,%r8d
  431721:	b9 fb 09 45 00       	mov    $0x4509fb,%ecx
  431726:	ba 02 00 00 00       	mov    $0x2,%edx
  43172b:	be 74 00 00 00       	mov    $0x74,%esi
  431730:	bf 20 00 00 00       	mov    $0x20,%edi
  431735:	e8 16 6c ff ff       	callq  428350 <ERR_put_error>
  43173a:	31 c0                	xor    %eax,%eax
  43173c:	e9 7f fd ff ff       	jmpq   4314c0 <file_ctrl+0x90>
  431741:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  431748:	ba 04 00 00 00       	mov    $0x4,%edx
  43174d:	be 0c 0a 45 00       	mov    $0x450a0c,%esi
  431752:	48 89 e7             	mov    %rsp,%rdi
  431755:	48 89 e5             	mov    %rsp,%rbp
  431758:	e8 e3 45 ff ff       	callq  425d40 <BUF_strlcpy>
  43175d:	e9 47 fe ff ff       	jmpq   4315a9 <file_ctrl+0x179>
  431762:	ba 04 00 00 00       	mov    $0x4,%edx
  431767:	be 09 0a 45 00       	mov    $0x450a09,%esi
  43176c:	48 89 e7             	mov    %rsp,%rdi
  43176f:	48 89 e5             	mov    %rsp,%rbp
  431772:	e8 c9 45 ff ff       	callq  425d40 <BUF_strlcpy>
  431777:	e9 2d fe ff ff       	jmpq   4315a9 <file_ctrl+0x179>
  43177c:	e8 3f 57 fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  431781:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  431788:	0f 1f 84 00 00 00 00 
  43178f:	00 

0000000000431790 <BIO_new_file>:
  431790:	41 54                	push   %r12
  431792:	55                   	push   %rbp
  431793:	49 89 f4             	mov    %rsi,%r12
  431796:	53                   	push   %rbx
  431797:	48 89 fb             	mov    %rdi,%rbx
  43179a:	e8 b1 57 fd ff       	callq  406f50 <fopen64@plt>
  43179f:	48 85 c0             	test   %rax,%rax
  4317a2:	48 89 c5             	mov    %rax,%rbp
  4317a5:	74 41                	je     4317e8 <BIO_new_file+0x58>
  4317a7:	bf 80 88 65 00       	mov    $0x658880,%edi
  4317ac:	e8 7f e5 ff ff       	callq  42fd30 <BIO_new>
  4317b1:	48 85 c0             	test   %rax,%rax
  4317b4:	48 89 c3             	mov    %rax,%rbx
  4317b7:	0f 84 d3 00 00 00    	je     431890 <BIO_new_file+0x100>
  4317bd:	48 89 c7             	mov    %rax,%rdi
  4317c0:	31 f6                	xor    %esi,%esi
  4317c2:	e8 69 e8 ff ff       	callq  430030 <BIO_clear_flags>
  4317c7:	48 89 e9             	mov    %rbp,%rcx
  4317ca:	ba 01 00 00 00       	mov    $0x1,%edx
  4317cf:	be 6a 00 00 00       	mov    $0x6a,%esi
  4317d4:	48 89 df             	mov    %rbx,%rdi
  4317d7:	e8 14 f0 ff ff       	callq  4307f0 <BIO_ctrl>
  4317dc:	48 89 d8             	mov    %rbx,%rax
  4317df:	5b                   	pop    %rbx
  4317e0:	5d                   	pop    %rbp
  4317e1:	41 5c                	pop    %r12
  4317e3:	c3                   	retq   
  4317e4:	0f 1f 40 00          	nopl   0x0(%rax)
  4317e8:	e8 b3 56 fd ff       	callq  406ea0 <__errno_location@plt>
  4317ed:	8b 10                	mov    (%rax),%edx
  4317ef:	41 b8 a9 00 00 00    	mov    $0xa9,%r8d
  4317f5:	b9 fb 09 45 00       	mov    $0x4509fb,%ecx
  4317fa:	be 01 00 00 00       	mov    $0x1,%esi
  4317ff:	bf 02 00 00 00       	mov    $0x2,%edi
  431804:	48 89 c5             	mov    %rax,%rbp
  431807:	e8 44 6b ff ff       	callq  428350 <ERR_put_error>
  43180c:	31 c0                	xor    %eax,%eax
  43180e:	41 b9 0e 0a 45 00    	mov    $0x450a0e,%r9d
  431814:	4d 89 e0             	mov    %r12,%r8
  431817:	b9 11 0a 45 00       	mov    $0x450a11,%ecx
  43181c:	48 89 da             	mov    %rbx,%rdx
  43181f:	be 15 0a 45 00       	mov    $0x450a15,%esi
  431824:	bf 05 00 00 00       	mov    $0x5,%edi
  431829:	e8 02 76 ff ff       	callq  428e30 <ERR_add_error_data>
  43182e:	83 7d 00 02          	cmpl   $0x2,0x0(%rbp)
  431832:	74 2c                	je     431860 <BIO_new_file+0xd0>
  431834:	41 b8 ae 00 00 00    	mov    $0xae,%r8d
  43183a:	b9 fb 09 45 00       	mov    $0x4509fb,%ecx
  43183f:	ba 02 00 00 00       	mov    $0x2,%edx
  431844:	be 6d 00 00 00       	mov    $0x6d,%esi
  431849:	bf 20 00 00 00       	mov    $0x20,%edi
  43184e:	e8 fd 6a ff ff       	callq  428350 <ERR_put_error>
  431853:	5b                   	pop    %rbx
  431854:	31 c0                	xor    %eax,%eax
  431856:	5d                   	pop    %rbp
  431857:	41 5c                	pop    %r12
  431859:	c3                   	retq   
  43185a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  431860:	41 b8 ac 00 00 00    	mov    $0xac,%r8d
  431866:	b9 fb 09 45 00       	mov    $0x4509fb,%ecx
  43186b:	ba 80 00 00 00       	mov    $0x80,%edx
  431870:	be 6d 00 00 00       	mov    $0x6d,%esi
  431875:	bf 20 00 00 00       	mov    $0x20,%edi
  43187a:	e8 d1 6a ff ff       	callq  428350 <ERR_put_error>
  43187f:	31 c0                	xor    %eax,%eax
  431881:	e9 59 ff ff ff       	jmpq   4317df <BIO_new_file+0x4f>
  431886:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  43188d:	00 00 00 
  431890:	48 89 ef             	mov    %rbp,%rdi
  431893:	e8 88 56 fd ff       	callq  406f20 <fclose@plt>
  431898:	31 c0                	xor    %eax,%eax
  43189a:	e9 40 ff ff ff       	jmpq   4317df <BIO_new_file+0x4f>
  43189f:	90                   	nop

00000000004318a0 <BIO_new_fp>:
  4318a0:	41 54                	push   %r12
  4318a2:	55                   	push   %rbp
  4318a3:	49 89 fc             	mov    %rdi,%r12
  4318a6:	53                   	push   %rbx
  4318a7:	bf 80 88 65 00       	mov    $0x658880,%edi
  4318ac:	89 f5                	mov    %esi,%ebp
  4318ae:	e8 7d e4 ff ff       	callq  42fd30 <BIO_new>
  4318b3:	48 85 c0             	test   %rax,%rax
  4318b6:	48 89 c3             	mov    %rax,%rbx
  4318b9:	74 1d                	je     4318d8 <BIO_new_fp+0x38>
  4318bb:	31 f6                	xor    %esi,%esi
  4318bd:	48 89 c7             	mov    %rax,%rdi
  4318c0:	e8 8b e7 ff ff       	callq  430050 <BIO_set_flags>
  4318c5:	48 63 d5             	movslq %ebp,%rdx
  4318c8:	4c 89 e1             	mov    %r12,%rcx
  4318cb:	be 6a 00 00 00       	mov    $0x6a,%esi
  4318d0:	48 89 df             	mov    %rbx,%rdi
  4318d3:	e8 18 ef ff ff       	callq  4307f0 <BIO_ctrl>
  4318d8:	48 89 d8             	mov    %rbx,%rax
  4318db:	5b                   	pop    %rbx
  4318dc:	5d                   	pop    %rbp
  4318dd:	41 5c                	pop    %r12
  4318df:	c3                   	retq   

00000000004318e0 <BIO_s_file>:
  4318e0:	b8 80 88 65 00       	mov    $0x658880,%eax
  4318e5:	c3                   	retq   
  4318e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4318ed:	00 00 00 

00000000004318f0 <doapr_outch>:
  4318f0:	48 85 f6             	test   %rsi,%rsi
  4318f3:	41 56                	push   %r14
  4318f5:	49 89 f6             	mov    %rsi,%r14
  4318f8:	41 55                	push   %r13
  4318fa:	45 89 c5             	mov    %r8d,%r13d
  4318fd:	41 54                	push   %r12
  4318ff:	49 89 fc             	mov    %rdi,%r12
  431902:	55                   	push   %rbp
  431903:	48 89 d5             	mov    %rdx,%rbp
  431906:	53                   	push   %rbx
  431907:	48 89 cb             	mov    %rcx,%rbx
  43190a:	48 8b 12             	mov    (%rdx),%rdx
  43190d:	0f 84 bd 00 00 00    	je     4319d0 <doapr_outch+0xe0>
  431913:	48 8b 03             	mov    (%rbx),%rax
  431916:	48 39 d0             	cmp    %rdx,%rax
  431919:	77 30                	ja     43194b <doapr_outch+0x5b>
  43191b:	49 8b 3e             	mov    (%r14),%rdi
  43191e:	48 85 ff             	test   %rdi,%rdi
  431921:	74 4d                	je     431970 <doapr_outch+0x80>
  431923:	48 8d b0 00 04 00 00 	lea    0x400(%rax),%rsi
  43192a:	ba 2a 0a 45 00       	mov    $0x450a2a,%edx
  43192f:	b9 ed 02 00 00       	mov    $0x2ed,%ecx
  431934:	48 89 33             	mov    %rsi,(%rbx)
  431937:	e8 f4 3b ff ff       	callq  425530 <CRYPTO_realloc>
  43193c:	48 8b 55 00          	mov    0x0(%rbp),%rdx
  431940:	49 89 06             	mov    %rax,(%r14)
  431943:	48 8b 03             	mov    (%rbx),%rax
  431946:	48 39 d0             	cmp    %rdx,%rax
  431949:	76 d0                	jbe    43191b <doapr_outch+0x2b>
  43194b:	49 8b 04 24          	mov    (%r12),%rax
  43194f:	48 85 c0             	test   %rax,%rax
  431952:	74 74                	je     4319c8 <doapr_outch+0xd8>
  431954:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
  431958:	48 89 4d 00          	mov    %rcx,0x0(%rbp)
  43195c:	44 88 2c 10          	mov    %r13b,(%rax,%rdx,1)
  431960:	5b                   	pop    %rbx
  431961:	5d                   	pop    %rbp
  431962:	41 5c                	pop    %r12
  431964:	41 5d                	pop    %r13
  431966:	41 5e                	pop    %r14
  431968:	c3                   	retq   
  431969:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  431970:	48 85 c0             	test   %rax,%rax
  431973:	89 c7                	mov    %eax,%edi
  431975:	75 0c                	jne    431983 <doapr_outch+0x93>
  431977:	48 c7 03 00 04 00 00 	movq   $0x400,(%rbx)
  43197e:	bf 00 04 00 00       	mov    $0x400,%edi
  431983:	ba e5 02 00 00       	mov    $0x2e5,%edx
  431988:	be 2a 0a 45 00       	mov    $0x450a2a,%esi
  43198d:	e8 6e 3a ff ff       	callq  425400 <CRYPTO_malloc>
  431992:	48 8b 55 00          	mov    0x0(%rbp),%rdx
  431996:	49 89 06             	mov    %rax,(%r14)
  431999:	48 85 d2             	test   %rdx,%rdx
  43199c:	75 12                	jne    4319b0 <doapr_outch+0xc0>
  43199e:	49 c7 04 24 00 00 00 	movq   $0x0,(%r12)
  4319a5:	00 
  4319a6:	e9 68 ff ff ff       	jmpq   431913 <doapr_outch+0x23>
  4319ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4319b0:	49 8b 34 24          	mov    (%r12),%rsi
  4319b4:	48 89 c7             	mov    %rax,%rdi
  4319b7:	e8 34 56 fd ff       	callq  406ff0 <memcpy@plt>
  4319bc:	48 8b 55 00          	mov    0x0(%rbp),%rdx
  4319c0:	eb dc                	jmp    43199e <doapr_outch+0xae>
  4319c2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  4319c8:	49 8b 06             	mov    (%r14),%rax
  4319cb:	eb 87                	jmp    431954 <doapr_outch+0x64>
  4319cd:	0f 1f 00             	nopl   (%rax)
  4319d0:	48 3b 11             	cmp    (%rcx),%rdx
  4319d3:	0f 82 72 ff ff ff    	jb     43194b <doapr_outch+0x5b>
  4319d9:	5b                   	pop    %rbx
  4319da:	5d                   	pop    %rbp
  4319db:	41 5c                	pop    %r12
  4319dd:	41 5d                	pop    %r13
  4319df:	41 5e                	pop    %r14
  4319e1:	c3                   	retq   
  4319e2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  4319e9:	1f 84 00 00 00 00 00 

00000000004319f0 <doapr_outch.constprop.5>:
  4319f0:	41 55                	push   %r13
  4319f2:	41 54                	push   %r12
  4319f4:	49 89 f5             	mov    %rsi,%r13
  4319f7:	55                   	push   %rbp
  4319f8:	53                   	push   %rbx
  4319f9:	48 89 d5             	mov    %rdx,%rbp
  4319fc:	49 89 fc             	mov    %rdi,%r12
  4319ff:	48 89 cb             	mov    %rcx,%rbx
  431a02:	48 83 ec 08          	sub    $0x8,%rsp
  431a06:	48 85 f6             	test   %rsi,%rsi
  431a09:	48 8b 12             	mov    (%rdx),%rdx
  431a0c:	0f 84 be 00 00 00    	je     431ad0 <doapr_outch.constprop.5+0xe0>
  431a12:	48 8b 03             	mov    (%rbx),%rax
  431a15:	48 39 d0             	cmp    %rdx,%rax
  431a18:	77 32                	ja     431a4c <doapr_outch.constprop.5+0x5c>
  431a1a:	49 8b 7d 00          	mov    0x0(%r13),%rdi
  431a1e:	48 85 ff             	test   %rdi,%rdi
  431a21:	74 4d                	je     431a70 <doapr_outch.constprop.5+0x80>
  431a23:	48 8d b0 00 04 00 00 	lea    0x400(%rax),%rsi
  431a2a:	ba 2a 0a 45 00       	mov    $0x450a2a,%edx
  431a2f:	b9 ed 02 00 00       	mov    $0x2ed,%ecx
  431a34:	48 89 33             	mov    %rsi,(%rbx)
  431a37:	e8 f4 3a ff ff       	callq  425530 <CRYPTO_realloc>
  431a3c:	48 8b 55 00          	mov    0x0(%rbp),%rdx
  431a40:	49 89 45 00          	mov    %rax,0x0(%r13)
  431a44:	48 8b 03             	mov    (%rbx),%rax
  431a47:	48 39 d0             	cmp    %rdx,%rax
  431a4a:	76 ce                	jbe    431a1a <doapr_outch.constprop.5+0x2a>
  431a4c:	49 8b 04 24          	mov    (%r12),%rax
  431a50:	48 85 c0             	test   %rax,%rax
  431a53:	74 73                	je     431ac8 <doapr_outch.constprop.5+0xd8>
  431a55:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
  431a59:	48 89 4d 00          	mov    %rcx,0x0(%rbp)
  431a5d:	c6 04 10 20          	movb   $0x20,(%rax,%rdx,1)
  431a61:	48 83 c4 08          	add    $0x8,%rsp
  431a65:	5b                   	pop    %rbx
  431a66:	5d                   	pop    %rbp
  431a67:	41 5c                	pop    %r12
  431a69:	41 5d                	pop    %r13
  431a6b:	c3                   	retq   
  431a6c:	0f 1f 40 00          	nopl   0x0(%rax)
  431a70:	48 85 c0             	test   %rax,%rax
  431a73:	89 c7                	mov    %eax,%edi
  431a75:	75 0c                	jne    431a83 <doapr_outch.constprop.5+0x93>
  431a77:	48 c7 03 00 04 00 00 	movq   $0x400,(%rbx)
  431a7e:	bf 00 04 00 00       	mov    $0x400,%edi
  431a83:	ba e5 02 00 00       	mov    $0x2e5,%edx
  431a88:	be 2a 0a 45 00       	mov    $0x450a2a,%esi
  431a8d:	e8 6e 39 ff ff       	callq  425400 <CRYPTO_malloc>
  431a92:	48 8b 55 00          	mov    0x0(%rbp),%rdx
  431a96:	49 89 45 00          	mov    %rax,0x0(%r13)
  431a9a:	48 85 d2             	test   %rdx,%rdx
  431a9d:	75 11                	jne    431ab0 <doapr_outch.constprop.5+0xc0>
  431a9f:	49 c7 04 24 00 00 00 	movq   $0x0,(%r12)
  431aa6:	00 
  431aa7:	e9 66 ff ff ff       	jmpq   431a12 <doapr_outch.constprop.5+0x22>
  431aac:	0f 1f 40 00          	nopl   0x0(%rax)
  431ab0:	49 8b 34 24          	mov    (%r12),%rsi
  431ab4:	48 89 c7             	mov    %rax,%rdi
  431ab7:	e8 34 55 fd ff       	callq  406ff0 <memcpy@plt>
  431abc:	48 8b 55 00          	mov    0x0(%rbp),%rdx
  431ac0:	eb dd                	jmp    431a9f <doapr_outch.constprop.5+0xaf>
  431ac2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  431ac8:	49 8b 45 00          	mov    0x0(%r13),%rax
  431acc:	eb 87                	jmp    431a55 <doapr_outch.constprop.5+0x65>
  431ace:	66 90                	xchg   %ax,%ax
  431ad0:	48 3b 11             	cmp    (%rcx),%rdx
  431ad3:	0f 82 73 ff ff ff    	jb     431a4c <doapr_outch.constprop.5+0x5c>
  431ad9:	48 83 c4 08          	add    $0x8,%rsp
  431add:	5b                   	pop    %rbx
  431ade:	5d                   	pop    %rbp
  431adf:	41 5c                	pop    %r12
  431ae1:	41 5d                	pop    %r13
  431ae3:	c3                   	retq   
  431ae4:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
  431aeb:	00 00 00 00 00 

0000000000431af0 <fmtint>:
  431af0:	41 57                	push   %r15
  431af2:	41 56                	push   %r14
  431af4:	41 bf 00 00 00 00    	mov    $0x0,%r15d
  431afa:	41 55                	push   %r13
  431afc:	41 54                	push   %r12
  431afe:	45 89 fa             	mov    %r15d,%r10d
  431b01:	55                   	push   %rbp
  431b02:	53                   	push   %rbx
  431b03:	48 89 cd             	mov    %rcx,%rbp
  431b06:	49 89 fd             	mov    %rdi,%r13
  431b09:	48 89 f3             	mov    %rsi,%rbx
  431b0c:	49 89 d4             	mov    %rdx,%r12
  431b0f:	48 83 ec 58          	sub    $0x58,%rsp
  431b13:	8b 84 24 98 00 00 00 	mov    0x98(%rsp),%eax
  431b1a:	44 8b 9c 24 a0 00 00 	mov    0xa0(%rsp),%r11d
  431b21:	00 
  431b22:	64 48 8b 0c 25 28 00 	mov    %fs:0x28,%rcx
  431b29:	00 00 
  431b2b:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  431b30:	31 c9                	xor    %ecx,%ecx
  431b32:	85 c0                	test   %eax,%eax
  431b34:	44 0f 49 d0          	cmovns %eax,%r10d
  431b38:	41 f6 c3 40          	test   $0x40,%r11b
  431b3c:	4c 89 c0             	mov    %r8,%rax
  431b3f:	0f 85 c9 02 00 00    	jne    431e0e <fmtint+0x31e>
  431b45:	4d 85 c0             	test   %r8,%r8
  431b48:	0f 88 67 04 00 00    	js     431fb5 <fmtint+0x4c5>
  431b4e:	41 f6 c3 02          	test   $0x2,%r11b
  431b52:	0f 85 43 04 00 00    	jne    431f9b <fmtint+0x4ab>
  431b58:	44 89 d9             	mov    %r11d,%ecx
  431b5b:	83 e1 04             	and    $0x4,%ecx
  431b5e:	89 4c 24 04          	mov    %ecx,0x4(%rsp)
  431b62:	0f 84 6a 04 00 00    	je     431fd2 <fmtint+0x4e2>
  431b68:	41 f6 c3 08          	test   $0x8,%r11b
  431b6c:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%rsp)
  431b73:	00 
  431b74:	c6 44 24 0f 01       	movb   $0x1,0xf(%rsp)
  431b79:	c7 44 24 1c 20 00 00 	movl   $0x20,0x1c(%rsp)
  431b80:	00 
  431b81:	41 bf 47 e8 43 00    	mov    $0x43e847,%r15d
  431b87:	0f 85 a6 02 00 00    	jne    431e33 <fmtint+0x343>
  431b8d:	31 f6                	xor    %esi,%esi
  431b8f:	41 f6 c3 20          	test   $0x20,%r11b
  431b93:	44 89 c9             	mov    %r9d,%ecx
  431b96:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  431b9b:	0f 85 c2 02 00 00    	jne    431e63 <fmtint+0x373>
  431ba1:	eb 08                	jmp    431bab <fmtint+0xbb>
  431ba3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  431ba8:	44 89 f6             	mov    %r14d,%esi
  431bab:	31 d2                	xor    %edx,%edx
  431bad:	44 8d 76 01          	lea    0x1(%rsi),%r14d
  431bb1:	48 f7 f1             	div    %rcx
  431bb4:	41 83 fe 19          	cmp    $0x19,%r14d
  431bb8:	41 0f 9e c0          	setle  %r8b
  431bbc:	0f b6 92 37 0a 45 00 	movzbl 0x450a37(%rdx),%edx
  431bc3:	48 85 c0             	test   %rax,%rax
  431bc6:	88 17                	mov    %dl,(%rdi)
  431bc8:	0f 95 c2             	setne  %dl
  431bcb:	48 83 c7 01          	add    $0x1,%rdi
  431bcf:	41 84 d0             	test   %dl,%r8b
  431bd2:	75 d4                	jne    431ba8 <fmtint+0xb8>
  431bd4:	41 83 fe 1a          	cmp    $0x1a,%r14d
  431bd8:	44 89 d1             	mov    %r10d,%ecx
  431bdb:	4c 89 ff             	mov    %r15,%rdi
  431bde:	44 0f 44 f6          	cmove  %esi,%r14d
  431be2:	44 89 5c 24 18       	mov    %r11d,0x18(%rsp)
  431be7:	44 89 54 24 10       	mov    %r10d,0x10(%rsp)
  431bec:	44 29 f1             	sub    %r14d,%ecx
  431bef:	49 63 c6             	movslq %r14d,%rax
  431bf2:	89 4c 24 08          	mov    %ecx,0x8(%rsp)
  431bf6:	c6 44 04 20 00       	movb   $0x0,0x20(%rsp,%rax,1)
  431bfb:	e8 b0 51 fd ff       	callq  406db0 <strlen@plt>
  431c00:	44 8b 54 24 10       	mov    0x10(%rsp),%r10d
  431c05:	8b 8c 24 90 00 00 00 	mov    0x90(%rsp),%ecx
  431c0c:	44 8b 5c 24 18       	mov    0x18(%rsp),%r11d
  431c11:	45 39 d6             	cmp    %r10d,%r14d
  431c14:	44 89 d2             	mov    %r10d,%edx
  431c17:	41 0f 4d d6          	cmovge %r14d,%edx
  431c1b:	31 f6                	xor    %esi,%esi
  431c1d:	29 d1                	sub    %edx,%ecx
  431c1f:	89 ca                	mov    %ecx,%edx
  431c21:	8b 4c 24 08          	mov    0x8(%rsp),%ecx
  431c25:	2b 54 24 04          	sub    0x4(%rsp),%edx
  431c29:	85 c9                	test   %ecx,%ecx
  431c2b:	0f 48 ce             	cmovs  %esi,%ecx
  431c2e:	29 c2                	sub    %eax,%edx
  431c30:	89 f0                	mov    %esi,%eax
  431c32:	0f 49 c2             	cmovns %edx,%eax
  431c35:	41 f6 c3 10          	test   $0x10,%r11b
  431c39:	89 4c 24 04          	mov    %ecx,0x4(%rsp)
  431c3d:	74 0b                	je     431c4a <fmtint+0x15a>
  431c3f:	39 c1                	cmp    %eax,%ecx
  431c41:	0f 4d c1             	cmovge %ecx,%eax
  431c44:	89 44 24 04          	mov    %eax,0x4(%rsp)
  431c48:	31 c0                	xor    %eax,%eax
  431c4a:	44 89 d9             	mov    %r11d,%ecx
  431c4d:	83 e1 01             	and    $0x1,%ecx
  431c50:	89 ca                	mov    %ecx,%edx
  431c52:	f7 da                	neg    %edx
  431c54:	31 d0                	xor    %edx,%eax
  431c56:	01 c8                	add    %ecx,%eax
  431c58:	85 c0                	test   %eax,%eax
  431c5a:	89 44 24 08          	mov    %eax,0x8(%rsp)
  431c5e:	7e 31                	jle    431c91 <fmtint+0x1a1>
  431c60:	4c 89 7c 24 10       	mov    %r15,0x10(%rsp)
  431c65:	41 89 c7             	mov    %eax,%r15d
  431c68:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  431c6f:	00 
  431c70:	48 89 e9             	mov    %rbp,%rcx
  431c73:	4c 89 e2             	mov    %r12,%rdx
  431c76:	48 89 de             	mov    %rbx,%rsi
  431c79:	4c 89 ef             	mov    %r13,%rdi
  431c7c:	e8 6f fd ff ff       	callq  4319f0 <doapr_outch.constprop.5>
  431c81:	41 83 ef 01          	sub    $0x1,%r15d
  431c85:	75 e9                	jne    431c70 <fmtint+0x180>
  431c87:	44 89 7c 24 08       	mov    %r15d,0x8(%rsp)
  431c8c:	4c 8b 7c 24 10       	mov    0x10(%rsp),%r15
  431c91:	80 7c 24 0f 00       	cmpb   $0x0,0xf(%rsp)
  431c96:	74 1d                	je     431cb5 <fmtint+0x1c5>
  431c98:	e9 e3 02 00 00       	jmpq   431f80 <fmtint+0x490>
  431c9d:	0f 1f 00             	nopl   (%rax)
  431ca0:	48 89 e9             	mov    %rbp,%rcx
  431ca3:	4c 89 e2             	mov    %r12,%rdx
  431ca6:	48 89 de             	mov    %rbx,%rsi
  431ca9:	4c 89 ef             	mov    %r13,%rdi
  431cac:	49 83 c7 01          	add    $0x1,%r15
  431cb0:	e8 3b fc ff ff       	callq  4318f0 <doapr_outch>
  431cb5:	45 0f be 07          	movsbl (%r15),%r8d
  431cb9:	45 84 c0             	test   %r8b,%r8b
  431cbc:	75 e2                	jne    431ca0 <fmtint+0x1b0>
  431cbe:	8b 54 24 04          	mov    0x4(%rsp),%edx
  431cc2:	44 8b 7c 24 04       	mov    0x4(%rsp),%r15d
  431cc7:	85 d2                	test   %edx,%edx
  431cc9:	74 25                	je     431cf0 <fmtint+0x200>
  431ccb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  431cd0:	41 b8 30 00 00 00    	mov    $0x30,%r8d
  431cd6:	48 89 e9             	mov    %rbp,%rcx
  431cd9:	4c 89 e2             	mov    %r12,%rdx
  431cdc:	48 89 de             	mov    %rbx,%rsi
  431cdf:	4c 89 ef             	mov    %r13,%rdi
  431ce2:	e8 09 fc ff ff       	callq  4318f0 <doapr_outch>
  431ce7:	41 83 ef 01          	sub    $0x1,%r15d
  431ceb:	75 e3                	jne    431cd0 <fmtint+0x1e0>
  431ced:	0f 1f 00             	nopl   (%rax)
  431cf0:	45 85 f6             	test   %r14d,%r14d
  431cf3:	74 77                	je     431d6c <fmtint+0x27c>
  431cf5:	41 83 ee 01          	sub    $0x1,%r14d
  431cf9:	48 85 db             	test   %rbx,%rbx
  431cfc:	49 8b 14 24          	mov    (%r12),%rdx
  431d00:	49 63 c6             	movslq %r14d,%rax
  431d03:	44 0f b6 7c 04 20    	movzbl 0x20(%rsp,%rax,1),%r15d
  431d09:	0f 84 e1 01 00 00    	je     431ef0 <fmtint+0x400>
  431d0f:	48 8b 75 00          	mov    0x0(%rbp),%rsi
  431d13:	48 39 d6             	cmp    %rdx,%rsi
  431d16:	77 36                	ja     431d4e <fmtint+0x25e>
  431d18:	48 8b 3b             	mov    (%rbx),%rdi
  431d1b:	48 85 ff             	test   %rdi,%rdi
  431d1e:	0f 84 74 01 00 00    	je     431e98 <fmtint+0x3a8>
  431d24:	48 81 c6 00 04 00 00 	add    $0x400,%rsi
  431d2b:	ba 2a 0a 45 00       	mov    $0x450a2a,%edx
  431d30:	b9 ed 02 00 00       	mov    $0x2ed,%ecx
  431d35:	48 89 75 00          	mov    %rsi,0x0(%rbp)
  431d39:	e8 f2 37 ff ff       	callq  425530 <CRYPTO_realloc>
  431d3e:	49 8b 14 24          	mov    (%r12),%rdx
  431d42:	48 8b 75 00          	mov    0x0(%rbp),%rsi
  431d46:	48 89 03             	mov    %rax,(%rbx)
  431d49:	48 39 d6             	cmp    %rdx,%rsi
  431d4c:	76 ca                	jbe    431d18 <fmtint+0x228>
  431d4e:	49 8b 45 00          	mov    0x0(%r13),%rax
  431d52:	48 85 c0             	test   %rax,%rax
  431d55:	0f 84 a5 01 00 00    	je     431f00 <fmtint+0x410>
  431d5b:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
  431d5f:	45 85 f6             	test   %r14d,%r14d
  431d62:	49 89 0c 24          	mov    %rcx,(%r12)
  431d66:	44 88 3c 10          	mov    %r15b,(%rax,%rdx,1)
  431d6a:	75 89                	jne    431cf5 <fmtint+0x205>
  431d6c:	8b 44 24 08          	mov    0x8(%rsp),%eax
  431d70:	44 8b 74 24 08       	mov    0x8(%rsp),%r14d
  431d75:	85 c0                	test   %eax,%eax
  431d77:	74 72                	je     431deb <fmtint+0x2fb>
  431d79:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  431d80:	48 85 db             	test   %rbx,%rbx
  431d83:	49 8b 14 24          	mov    (%r12),%rdx
  431d87:	0f 84 d5 01 00 00    	je     431f62 <fmtint+0x472>
  431d8d:	48 8b 75 00          	mov    0x0(%rbp),%rsi
  431d91:	48 39 d6             	cmp    %rdx,%rsi
  431d94:	77 36                	ja     431dcc <fmtint+0x2dc>
  431d96:	48 8b 3b             	mov    (%rbx),%rdi
  431d99:	48 85 ff             	test   %rdi,%rdi
  431d9c:	0f 84 6e 01 00 00    	je     431f10 <fmtint+0x420>
  431da2:	48 81 c6 00 04 00 00 	add    $0x400,%rsi
  431da9:	ba 2a 0a 45 00       	mov    $0x450a2a,%edx
  431dae:	b9 ed 02 00 00       	mov    $0x2ed,%ecx
  431db3:	48 89 75 00          	mov    %rsi,0x0(%rbp)
  431db7:	e8 74 37 ff ff       	callq  425530 <CRYPTO_realloc>
  431dbc:	49 8b 14 24          	mov    (%r12),%rdx
  431dc0:	48 8b 75 00          	mov    0x0(%rbp),%rsi
  431dc4:	48 89 03             	mov    %rax,(%rbx)
  431dc7:	48 39 d6             	cmp    %rdx,%rsi
  431dca:	76 ca                	jbe    431d96 <fmtint+0x2a6>
  431dcc:	49 8b 45 00          	mov    0x0(%r13),%rax
  431dd0:	48 85 c0             	test   %rax,%rax
  431dd3:	0f 84 9f 01 00 00    	je     431f78 <fmtint+0x488>
  431dd9:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
  431ddd:	49 89 0c 24          	mov    %rcx,(%r12)
  431de1:	c6 04 10 20          	movb   $0x20,(%rax,%rdx,1)
  431de5:	41 83 c6 01          	add    $0x1,%r14d
  431de9:	75 95                	jne    431d80 <fmtint+0x290>
  431deb:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  431df0:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  431df7:	00 00 
  431df9:	0f 85 e5 01 00 00    	jne    431fe4 <fmtint+0x4f4>
  431dff:	48 83 c4 58          	add    $0x58,%rsp
  431e03:	5b                   	pop    %rbx
  431e04:	5d                   	pop    %rbp
  431e05:	41 5c                	pop    %r12
  431e07:	41 5d                	pop    %r13
  431e09:	41 5e                	pop    %r14
  431e0b:	41 5f                	pop    %r15
  431e0d:	c3                   	retq   
  431e0e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%rsp)
  431e15:	00 
  431e16:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
  431e1b:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%rsp)
  431e22:	00 
  431e23:	41 f6 c3 08          	test   $0x8,%r11b
  431e27:	41 bf 47 e8 43 00    	mov    $0x43e847,%r15d
  431e2d:	0f 84 5a fd ff ff    	je     431b8d <fmtint+0x9d>
  431e33:	41 83 f9 08          	cmp    $0x8,%r9d
  431e37:	41 bf 6a fd 43 00    	mov    $0x43fd6a,%r15d
  431e3d:	0f 84 4a fd ff ff    	je     431b8d <fmtint+0x9d>
  431e43:	41 83 f9 10          	cmp    $0x10,%r9d
  431e47:	ba 47 e8 43 00       	mov    $0x43e847,%edx
  431e4c:	b9 34 0a 45 00       	mov    $0x450a34,%ecx
  431e51:	48 0f 44 d1          	cmove  %rcx,%rdx
  431e55:	49 89 d7             	mov    %rdx,%r15
  431e58:	e9 30 fd ff ff       	jmpq   431b8d <fmtint+0x9d>
  431e5d:	0f 1f 00             	nopl   (%rax)
  431e60:	44 89 f6             	mov    %r14d,%esi
  431e63:	31 d2                	xor    %edx,%edx
  431e65:	44 8d 76 01          	lea    0x1(%rsi),%r14d
  431e69:	48 f7 f1             	div    %rcx
  431e6c:	41 83 fe 19          	cmp    $0x19,%r14d
  431e70:	41 0f 9e c0          	setle  %r8b
  431e74:	0f b6 92 48 0a 45 00 	movzbl 0x450a48(%rdx),%edx
  431e7b:	48 85 c0             	test   %rax,%rax
  431e7e:	88 17                	mov    %dl,(%rdi)
  431e80:	0f 95 c2             	setne  %dl
  431e83:	48 83 c7 01          	add    $0x1,%rdi
  431e87:	41 84 d0             	test   %dl,%r8b
  431e8a:	75 d4                	jne    431e60 <fmtint+0x370>
  431e8c:	e9 43 fd ff ff       	jmpq   431bd4 <fmtint+0xe4>
  431e91:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  431e98:	48 85 f6             	test   %rsi,%rsi
  431e9b:	89 f7                	mov    %esi,%edi
  431e9d:	75 0d                	jne    431eac <fmtint+0x3bc>
  431e9f:	48 c7 45 00 00 04 00 	movq   $0x400,0x0(%rbp)
  431ea6:	00 
  431ea7:	bf 00 04 00 00       	mov    $0x400,%edi
  431eac:	ba e5 02 00 00       	mov    $0x2e5,%edx
  431eb1:	be 2a 0a 45 00       	mov    $0x450a2a,%esi
  431eb6:	e8 45 35 ff ff       	callq  425400 <CRYPTO_malloc>
  431ebb:	49 8b 14 24          	mov    (%r12),%rdx
  431ebf:	48 89 03             	mov    %rax,(%rbx)
  431ec2:	48 85 d2             	test   %rdx,%rdx
  431ec5:	75 11                	jne    431ed8 <fmtint+0x3e8>
  431ec7:	49 c7 45 00 00 00 00 	movq   $0x0,0x0(%r13)
  431ece:	00 
  431ecf:	e9 3b fe ff ff       	jmpq   431d0f <fmtint+0x21f>
  431ed4:	0f 1f 40 00          	nopl   0x0(%rax)
  431ed8:	49 8b 75 00          	mov    0x0(%r13),%rsi
  431edc:	48 89 c7             	mov    %rax,%rdi
  431edf:	e8 0c 51 fd ff       	callq  406ff0 <memcpy@plt>
  431ee4:	49 8b 14 24          	mov    (%r12),%rdx
  431ee8:	eb dd                	jmp    431ec7 <fmtint+0x3d7>
  431eea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  431ef0:	48 3b 55 00          	cmp    0x0(%rbp),%rdx
  431ef4:	0f 83 f6 fd ff ff    	jae    431cf0 <fmtint+0x200>
  431efa:	e9 4f fe ff ff       	jmpq   431d4e <fmtint+0x25e>
  431eff:	90                   	nop
  431f00:	48 8b 03             	mov    (%rbx),%rax
  431f03:	e9 53 fe ff ff       	jmpq   431d5b <fmtint+0x26b>
  431f08:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  431f0f:	00 
  431f10:	48 85 f6             	test   %rsi,%rsi
  431f13:	89 f7                	mov    %esi,%edi
  431f15:	75 0d                	jne    431f24 <fmtint+0x434>
  431f17:	48 c7 45 00 00 04 00 	movq   $0x400,0x0(%rbp)
  431f1e:	00 
  431f1f:	bf 00 04 00 00       	mov    $0x400,%edi
  431f24:	ba e5 02 00 00       	mov    $0x2e5,%edx
  431f29:	be 2a 0a 45 00       	mov    $0x450a2a,%esi
  431f2e:	e8 cd 34 ff ff       	callq  425400 <CRYPTO_malloc>
  431f33:	49 8b 14 24          	mov    (%r12),%rdx
  431f37:	48 89 03             	mov    %rax,(%rbx)
  431f3a:	48 85 d2             	test   %rdx,%rdx
  431f3d:	75 11                	jne    431f50 <fmtint+0x460>
  431f3f:	49 c7 45 00 00 00 00 	movq   $0x0,0x0(%r13)
  431f46:	00 
  431f47:	e9 41 fe ff ff       	jmpq   431d8d <fmtint+0x29d>
  431f4c:	0f 1f 40 00          	nopl   0x0(%rax)
  431f50:	49 8b 75 00          	mov    0x0(%r13),%rsi
  431f54:	48 89 c7             	mov    %rax,%rdi
  431f57:	e8 94 50 fd ff       	callq  406ff0 <memcpy@plt>
  431f5c:	49 8b 14 24          	mov    (%r12),%rdx
  431f60:	eb dd                	jmp    431f3f <fmtint+0x44f>
  431f62:	48 3b 55 00          	cmp    0x0(%rbp),%rdx
  431f66:	0f 83 79 fe ff ff    	jae    431de5 <fmtint+0x2f5>
  431f6c:	e9 5b fe ff ff       	jmpq   431dcc <fmtint+0x2dc>
  431f71:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  431f78:	48 8b 03             	mov    (%rbx),%rax
  431f7b:	e9 59 fe ff ff       	jmpq   431dd9 <fmtint+0x2e9>
  431f80:	44 8b 44 24 1c       	mov    0x1c(%rsp),%r8d
  431f85:	48 89 e9             	mov    %rbp,%rcx
  431f88:	4c 89 e2             	mov    %r12,%rdx
  431f8b:	48 89 de             	mov    %rbx,%rsi
  431f8e:	4c 89 ef             	mov    %r13,%rdi
  431f91:	e8 5a f9 ff ff       	callq  4318f0 <doapr_outch>
  431f96:	e9 1a fd ff ff       	jmpq   431cb5 <fmtint+0x1c5>
  431f9b:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%rsp)
  431fa2:	00 
  431fa3:	c6 44 24 0f 01       	movb   $0x1,0xf(%rsp)
  431fa8:	c7 44 24 1c 2b 00 00 	movl   $0x2b,0x1c(%rsp)
  431faf:	00 
  431fb0:	e9 6e fe ff ff       	jmpq   431e23 <fmtint+0x333>
  431fb5:	48 f7 d8             	neg    %rax
  431fb8:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%rsp)
  431fbf:	00 
  431fc0:	c6 44 24 0f 01       	movb   $0x1,0xf(%rsp)
  431fc5:	c7 44 24 1c 2d 00 00 	movl   $0x2d,0x1c(%rsp)
  431fcc:	00 
  431fcd:	e9 51 fe ff ff       	jmpq   431e23 <fmtint+0x333>
  431fd2:	c6 44 24 0f 00       	movb   $0x0,0xf(%rsp)
  431fd7:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%rsp)
  431fde:	00 
  431fdf:	e9 3f fe ff ff       	jmpq   431e23 <fmtint+0x333>
  431fe4:	e8 d7 4e fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  431fe9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000431ff0 <fmtint.constprop.3>:
  431ff0:	41 57                	push   %r15
  431ff2:	41 56                	push   %r14
  431ff4:	49 89 fe             	mov    %rdi,%r14
  431ff7:	41 55                	push   %r13
  431ff9:	41 54                	push   %r12
  431ffb:	49 89 d5             	mov    %rdx,%r13
  431ffe:	55                   	push   %rbp
  431fff:	53                   	push   %rbx
  432000:	48 89 f5             	mov    %rsi,%rbp
  432003:	48 83 ec 58          	sub    $0x58,%rsp
  432007:	8b 94 24 90 00 00 00 	mov    0x90(%rsp),%edx
  43200e:	44 8b a4 24 98 00 00 	mov    0x98(%rsp),%r12d
  432015:	00 
  432016:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  43201d:	00 00 
  43201f:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  432024:	31 c0                	xor    %eax,%eax
  432026:	44 89 4c 24 10       	mov    %r9d,0x10(%rsp)
  43202b:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  432031:	48 89 c8             	mov    %rcx,%rax
  432034:	85 d2                	test   %edx,%edx
  432036:	44 0f 49 ca          	cmovns %edx,%r9d
  43203a:	41 f6 c4 40          	test   $0x40,%r12b
  43203e:	45 89 cf             	mov    %r9d,%r15d
  432041:	75 3d                	jne    432080 <fmtint.constprop.3+0x90>
  432043:	48 85 c9             	test   %rcx,%rcx
  432046:	0f 88 f6 02 00 00    	js     432342 <fmtint.constprop.3+0x352>
  43204c:	41 f6 c4 02          	test   $0x2,%r12b
  432050:	0f 85 d2 02 00 00    	jne    432328 <fmtint.constprop.3+0x338>
  432056:	44 89 e7             	mov    %r12d,%edi
  432059:	83 e7 04             	and    $0x4,%edi
  43205c:	89 7c 24 04          	mov    %edi,0x4(%rsp)
  432060:	0f 84 f9 02 00 00    	je     43235f <fmtint.constprop.3+0x36f>
  432066:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%rsp)
  43206d:	00 
  43206e:	c6 44 24 1b 01       	movb   $0x1,0x1b(%rsp)
  432073:	c7 44 24 1c 20 00 00 	movl   $0x20,0x1c(%rsp)
  43207a:	00 
  43207b:	eb 18                	jmp    432095 <fmtint.constprop.3+0xa5>
  43207d:	0f 1f 00             	nopl   (%rax)
  432080:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%rsp)
  432087:	00 
  432088:	c6 44 24 1b 00       	movb   $0x0,0x1b(%rsp)
  43208d:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%rsp)
  432094:	00 
  432095:	41 f6 c4 08          	test   $0x8,%r12b
  432099:	41 bb 47 e8 43 00    	mov    $0x43e847,%r11d
  43209f:	74 1f                	je     4320c0 <fmtint.constprop.3+0xd0>
  4320a1:	41 83 f8 08          	cmp    $0x8,%r8d
  4320a5:	41 bb 6a fd 43 00    	mov    $0x43fd6a,%r11d
  4320ab:	74 13                	je     4320c0 <fmtint.constprop.3+0xd0>
  4320ad:	41 83 f8 10          	cmp    $0x10,%r8d
  4320b1:	ba 47 e8 43 00       	mov    $0x43e847,%edx
  4320b6:	41 bb 34 0a 45 00    	mov    $0x450a34,%r11d
  4320bc:	4c 0f 45 da          	cmovne %rdx,%r11
  4320c0:	31 f6                	xor    %esi,%esi
  4320c2:	41 f6 c4 20          	test   $0x20,%r12b
  4320c6:	45 89 c0             	mov    %r8d,%r8d
  4320c9:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  4320ce:	0f 85 de 00 00 00    	jne    4321b2 <fmtint.constprop.3+0x1c2>
  4320d4:	eb 0c                	jmp    4320e2 <fmtint.constprop.3+0xf2>
  4320d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4320dd:	00 00 00 
  4320e0:	89 de                	mov    %ebx,%esi
  4320e2:	31 d2                	xor    %edx,%edx
  4320e4:	8d 5e 01             	lea    0x1(%rsi),%ebx
  4320e7:	49 f7 f0             	div    %r8
  4320ea:	83 fb 19             	cmp    $0x19,%ebx
  4320ed:	0f 9e c1             	setle  %cl
  4320f0:	0f b6 92 37 0a 45 00 	movzbl 0x450a37(%rdx),%edx
  4320f7:	48 85 c0             	test   %rax,%rax
  4320fa:	88 17                	mov    %dl,(%rdi)
  4320fc:	0f 95 c2             	setne  %dl
  4320ff:	48 83 c7 01          	add    $0x1,%rdi
  432103:	84 d1                	test   %dl,%cl
  432105:	75 d9                	jne    4320e0 <fmtint.constprop.3+0xf0>
  432107:	83 fb 1a             	cmp    $0x1a,%ebx
  43210a:	44 89 fa             	mov    %r15d,%edx
  43210d:	4c 89 df             	mov    %r11,%rdi
  432110:	0f 44 de             	cmove  %esi,%ebx
  432113:	4c 89 5c 24 08       	mov    %r11,0x8(%rsp)
  432118:	29 da                	sub    %ebx,%edx
  43211a:	48 63 c3             	movslq %ebx,%rax
  43211d:	89 54 24 14          	mov    %edx,0x14(%rsp)
  432121:	c6 44 04 20 00       	movb   $0x0,0x20(%rsp,%rax,1)
  432126:	e8 85 4c fd ff       	callq  406db0 <strlen@plt>
  43212b:	44 39 fb             	cmp    %r15d,%ebx
  43212e:	45 89 f9             	mov    %r15d,%r9d
  432131:	44 8b 7c 24 10       	mov    0x10(%rsp),%r15d
  432136:	44 0f 4d cb          	cmovge %ebx,%r9d
  43213a:	8b 54 24 14          	mov    0x14(%rsp),%edx
  43213e:	31 c9                	xor    %ecx,%ecx
  432140:	4c 8b 5c 24 08       	mov    0x8(%rsp),%r11
  432145:	45 29 cf             	sub    %r9d,%r15d
  432148:	44 2b 7c 24 04       	sub    0x4(%rsp),%r15d
  43214d:	85 d2                	test   %edx,%edx
  43214f:	0f 48 d1             	cmovs  %ecx,%edx
  432152:	41 29 c7             	sub    %eax,%r15d
  432155:	89 c8                	mov    %ecx,%eax
  432157:	41 0f 49 c7          	cmovns %r15d,%eax
  43215b:	41 f6 c4 10          	test   $0x10,%r12b
  43215f:	74 07                	je     432168 <fmtint.constprop.3+0x178>
  432161:	39 c2                	cmp    %eax,%edx
  432163:	0f 4c d0             	cmovl  %eax,%edx
  432166:	31 c0                	xor    %eax,%eax
  432168:	41 83 e4 01          	and    $0x1,%r12d
  43216c:	44 89 e1             	mov    %r12d,%ecx
  43216f:	f7 d9                	neg    %ecx
  432171:	31 c8                	xor    %ecx,%eax
  432173:	41 01 c4             	add    %eax,%r12d
  432176:	45 85 e4             	test   %r12d,%r12d
  432179:	7f 17                	jg     432192 <fmtint.constprop.3+0x1a2>
  43217b:	eb 63                	jmp    4321e0 <fmtint.constprop.3+0x1f0>
  43217d:	0f 1f 00             	nopl   (%rax)
  432180:	48 8d 70 01          	lea    0x1(%rax),%rsi
  432184:	48 89 75 00          	mov    %rsi,0x0(%rbp)
  432188:	c6 04 01 20          	movb   $0x20,(%rcx,%rax,1)
  43218c:	41 83 ec 01          	sub    $0x1,%r12d
  432190:	74 4e                	je     4321e0 <fmtint.constprop.3+0x1f0>
  432192:	48 8b 45 00          	mov    0x0(%rbp),%rax
  432196:	49 3b 45 00          	cmp    0x0(%r13),%rax
  43219a:	73 f0                	jae    43218c <fmtint.constprop.3+0x19c>
  43219c:	49 8b 0e             	mov    (%r14),%rcx
  43219f:	48 85 c9             	test   %rcx,%rcx
  4321a2:	75 dc                	jne    432180 <fmtint.constprop.3+0x190>
  4321a4:	48 8b 04 25 00 00 00 	mov    0x0,%rax
  4321ab:	00 
  4321ac:	0f 0b                	ud2    
  4321ae:	66 90                	xchg   %ax,%ax
  4321b0:	89 de                	mov    %ebx,%esi
  4321b2:	31 d2                	xor    %edx,%edx
  4321b4:	8d 5e 01             	lea    0x1(%rsi),%ebx
  4321b7:	49 f7 f0             	div    %r8
  4321ba:	83 fb 19             	cmp    $0x19,%ebx
  4321bd:	0f 9e c1             	setle  %cl
  4321c0:	0f b6 92 48 0a 45 00 	movzbl 0x450a48(%rdx),%edx
  4321c7:	48 85 c0             	test   %rax,%rax
  4321ca:	88 17                	mov    %dl,(%rdi)
  4321cc:	0f 95 c2             	setne  %dl
  4321cf:	48 83 c7 01          	add    $0x1,%rdi
  4321d3:	84 d1                	test   %dl,%cl
  4321d5:	75 d9                	jne    4321b0 <fmtint.constprop.3+0x1c0>
  4321d7:	e9 2b ff ff ff       	jmpq   432107 <fmtint.constprop.3+0x117>
  4321dc:	0f 1f 40 00          	nopl   0x0(%rax)
  4321e0:	80 7c 24 1b 00       	cmpb   $0x0,0x1b(%rsp)
  4321e5:	74 18                	je     4321ff <fmtint.constprop.3+0x20f>
  4321e7:	e9 0c 01 00 00       	jmpq   4322f8 <fmtint.constprop.3+0x308>
  4321ec:	0f 1f 40 00          	nopl   0x0(%rax)
  4321f0:	48 8d 78 01          	lea    0x1(%rax),%rdi
  4321f4:	48 89 7d 00          	mov    %rdi,0x0(%rbp)
  4321f8:	88 0c 06             	mov    %cl,(%rsi,%rax,1)
  4321fb:	49 83 c3 01          	add    $0x1,%r11
  4321ff:	41 0f b6 0b          	movzbl (%r11),%ecx
  432203:	84 c9                	test   %cl,%cl
  432205:	74 21                	je     432228 <fmtint.constprop.3+0x238>
  432207:	48 8b 45 00          	mov    0x0(%rbp),%rax
  43220b:	49 3b 45 00          	cmp    0x0(%r13),%rax
  43220f:	73 ea                	jae    4321fb <fmtint.constprop.3+0x20b>
  432211:	49 8b 36             	mov    (%r14),%rsi
  432214:	48 85 f6             	test   %rsi,%rsi
  432217:	75 d7                	jne    4321f0 <fmtint.constprop.3+0x200>
  432219:	48 8b 04 25 00 00 00 	mov    0x0,%rax
  432220:	00 
  432221:	0f 0b                	ud2    
  432223:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  432228:	85 d2                	test   %edx,%edx
  43222a:	75 15                	jne    432241 <fmtint.constprop.3+0x251>
  43222c:	eb 32                	jmp    432260 <fmtint.constprop.3+0x270>
  43222e:	66 90                	xchg   %ax,%ax
  432230:	48 8d 70 01          	lea    0x1(%rax),%rsi
  432234:	48 89 75 00          	mov    %rsi,0x0(%rbp)
  432238:	c6 04 01 30          	movb   $0x30,(%rcx,%rax,1)
  43223c:	83 ea 01             	sub    $0x1,%edx
  43223f:	74 1f                	je     432260 <fmtint.constprop.3+0x270>
  432241:	48 8b 45 00          	mov    0x0(%rbp),%rax
  432245:	49 3b 45 00          	cmp    0x0(%r13),%rax
  432249:	73 f1                	jae    43223c <fmtint.constprop.3+0x24c>
  43224b:	49 8b 0e             	mov    (%r14),%rcx
  43224e:	48 85 c9             	test   %rcx,%rcx
  432251:	75 dd                	jne    432230 <fmtint.constprop.3+0x240>
  432253:	48 8b 04 25 00 00 00 	mov    0x0,%rax
  43225a:	00 
  43225b:	0f 0b                	ud2    
  43225d:	0f 1f 00             	nopl   (%rax)
  432260:	85 db                	test   %ebx,%ebx
  432262:	74 30                	je     432294 <fmtint.constprop.3+0x2a4>
  432264:	83 eb 01             	sub    $0x1,%ebx
  432267:	48 63 c3             	movslq %ebx,%rax
  43226a:	0f b6 4c 04 20       	movzbl 0x20(%rsp,%rax,1),%ecx
  43226f:	48 8b 45 00          	mov    0x0(%rbp),%rax
  432273:	49 3b 45 00          	cmp    0x0(%r13),%rax
  432277:	73 e7                	jae    432260 <fmtint.constprop.3+0x270>
  432279:	49 8b 16             	mov    (%r14),%rdx
  43227c:	48 85 d2             	test   %rdx,%rdx
  43227f:	0f 84 1f ff ff ff    	je     4321a4 <fmtint.constprop.3+0x1b4>
  432285:	48 8d 70 01          	lea    0x1(%rax),%rsi
  432289:	85 db                	test   %ebx,%ebx
  43228b:	48 89 75 00          	mov    %rsi,0x0(%rbp)
  43228f:	88 0c 02             	mov    %cl,(%rdx,%rax,1)
  432292:	75 d0                	jne    432264 <fmtint.constprop.3+0x274>
  432294:	45 85 e4             	test   %r12d,%r12d
  432297:	75 19                	jne    4322b2 <fmtint.constprop.3+0x2c2>
  432299:	eb 35                	jmp    4322d0 <fmtint.constprop.3+0x2e0>
  43229b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4322a0:	48 8d 48 01          	lea    0x1(%rax),%rcx
  4322a4:	48 89 4d 00          	mov    %rcx,0x0(%rbp)
  4322a8:	c6 04 02 20          	movb   $0x20,(%rdx,%rax,1)
  4322ac:	41 83 c4 01          	add    $0x1,%r12d
  4322b0:	74 1e                	je     4322d0 <fmtint.constprop.3+0x2e0>
  4322b2:	48 8b 45 00          	mov    0x0(%rbp),%rax
  4322b6:	49 3b 45 00          	cmp    0x0(%r13),%rax
  4322ba:	73 f0                	jae    4322ac <fmtint.constprop.3+0x2bc>
  4322bc:	49 8b 16             	mov    (%r14),%rdx
  4322bf:	48 85 d2             	test   %rdx,%rdx
  4322c2:	75 dc                	jne    4322a0 <fmtint.constprop.3+0x2b0>
  4322c4:	48 8b 04 25 00 00 00 	mov    0x0,%rax
  4322cb:	00 
  4322cc:	0f 0b                	ud2    
  4322ce:	66 90                	xchg   %ax,%ax
  4322d0:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
  4322d5:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  4322dc:	00 00 
  4322de:	0f 85 8d 00 00 00    	jne    432371 <fmtint.constprop.3+0x381>
  4322e4:	48 83 c4 58          	add    $0x58,%rsp
  4322e8:	5b                   	pop    %rbx
  4322e9:	5d                   	pop    %rbp
  4322ea:	41 5c                	pop    %r12
  4322ec:	41 5d                	pop    %r13
  4322ee:	41 5e                	pop    %r14
  4322f0:	41 5f                	pop    %r15
  4322f2:	c3                   	retq   
  4322f3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4322f8:	48 8b 45 00          	mov    0x0(%rbp),%rax
  4322fc:	49 3b 45 00          	cmp    0x0(%r13),%rax
  432300:	0f 83 f9 fe ff ff    	jae    4321ff <fmtint.constprop.3+0x20f>
  432306:	49 8b 0e             	mov    (%r14),%rcx
  432309:	48 85 c9             	test   %rcx,%rcx
  43230c:	0f 84 92 fe ff ff    	je     4321a4 <fmtint.constprop.3+0x1b4>
  432312:	0f b6 7c 24 1c       	movzbl 0x1c(%rsp),%edi
  432317:	48 8d 70 01          	lea    0x1(%rax),%rsi
  43231b:	48 89 75 00          	mov    %rsi,0x0(%rbp)
  43231f:	40 88 3c 01          	mov    %dil,(%rcx,%rax,1)
  432323:	e9 d7 fe ff ff       	jmpq   4321ff <fmtint.constprop.3+0x20f>
  432328:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%rsp)
  43232f:	00 
  432330:	c6 44 24 1b 01       	movb   $0x1,0x1b(%rsp)
  432335:	c7 44 24 1c 2b 00 00 	movl   $0x2b,0x1c(%rsp)
  43233c:	00 
  43233d:	e9 53 fd ff ff       	jmpq   432095 <fmtint.constprop.3+0xa5>
  432342:	48 f7 d8             	neg    %rax
  432345:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%rsp)
  43234c:	00 
  43234d:	c6 44 24 1b 01       	movb   $0x1,0x1b(%rsp)
  432352:	c7 44 24 1c 2d 00 00 	movl   $0x2d,0x1c(%rsp)
  432359:	00 
  43235a:	e9 36 fd ff ff       	jmpq   432095 <fmtint.constprop.3+0xa5>
  43235f:	c6 44 24 1b 00       	movb   $0x0,0x1b(%rsp)
  432364:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%rsp)
  43236b:	00 
  43236c:	e9 24 fd ff ff       	jmpq   432095 <fmtint.constprop.3+0xa5>
  432371:	e8 4a 4b fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  432376:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  43237d:	00 00 00 

0000000000432380 <_dopr.constprop.0>:
  432380:	41 57                	push   %r15
  432382:	41 56                	push   %r14
  432384:	49 89 f3             	mov    %rsi,%r11
  432387:	41 55                	push   %r13
  432389:	41 54                	push   %r12
  43238b:	4d 8d 60 01          	lea    0x1(%r8),%r12
  43238f:	55                   	push   %rbp
  432390:	53                   	push   %rbx
  432391:	49 89 fd             	mov    %rdi,%r13
  432394:	31 db                	xor    %ebx,%ebx
  432396:	45 31 ff             	xor    %r15d,%r15d
  432399:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  4323a0:	45 0f b6 30          	movzbl (%r8),%r14d
  4323a4:	48 8b 2e             	mov    (%rsi),%rbp
  4323a7:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  4323ae:	00 00 
  4323b0:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
  4323b7:	00 
  4323b8:	31 c0                	xor    %eax,%eax
  4323ba:	48 89 54 24 38       	mov    %rdx,0x38(%rsp)
  4323bf:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  4323c4:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  4323c9:	4c 89 4c 24 20       	mov    %r9,0x20(%rsp)
  4323ce:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
  4323d5:	00 00 
  4323d7:	c7 44 24 28 00 00 00 	movl   $0x0,0x28(%rsp)
  4323de:	00 
  4323df:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%rsp)
  4323e6:	00 
  4323e7:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%rsp)
  4323ee:	00 
  4323ef:	90                   	nop
  4323f0:	45 84 f6             	test   %r14b,%r14b
  4323f3:	0f 85 a7 03 00 00    	jne    4327a0 <_dopr.constprop.0+0x420>
  4323f9:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
  4323fd:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  432402:	48 39 d8             	cmp    %rbx,%rax
  432405:	0f 92 c2             	setb   %dl
  432408:	0f b6 ca             	movzbl %dl,%ecx
  43240b:	84 d2                	test   %dl,%dl
  43240d:	89 0f                	mov    %ecx,(%rdi)
  43240f:	74 08                	je     432419 <_dopr.constprop.0+0x99>
  432411:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
  432416:	48 89 c3             	mov    %rax,%rbx
  432419:	48 39 dd             	cmp    %rbx,%rbp
  43241c:	76 1f                	jbe    43243d <_dopr.constprop.0+0xbd>
  43241e:	49 8b 45 00          	mov    0x0(%r13),%rax
  432422:	48 85 c0             	test   %rax,%rax
  432425:	0f 84 6b 03 00 00    	je     432796 <_dopr.constprop.0+0x416>
  43242b:	48 8d 53 01          	lea    0x1(%rbx),%rdx
  43242f:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
  432434:	c6 04 18 00          	movb   $0x0,(%rax,%rbx,1)
  432438:	48 8b 5c 24 48       	mov    0x48(%rsp),%rbx
  43243d:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  432442:	48 83 eb 01          	sub    $0x1,%rbx
  432446:	48 89 18             	mov    %rbx,(%rax)
  432449:	48 8b 84 24 88 00 00 	mov    0x88(%rsp),%rax
  432450:	00 
  432451:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  432458:	00 00 
  43245a:	0f 85 4a 10 00 00    	jne    4334aa <_dopr.constprop.0+0x112a>
  432460:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  432467:	5b                   	pop    %rbx
  432468:	5d                   	pop    %rbp
  432469:	41 5c                	pop    %r12
  43246b:	41 5d                	pop    %r13
  43246d:	41 5e                	pop    %r14
  43246f:	41 5f                	pop    %r15
  432471:	c3                   	retq   
  432472:	83 7c 24 28 03       	cmpl   $0x3,0x28(%rsp)
  432477:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  43247c:	8b 40 04             	mov    0x4(%rax),%eax
  43247f:	0f 84 b4 0d 00 00    	je     433239 <_dopr.constprop.0+0xeb9>
  432485:	3d af 00 00 00       	cmp    $0xaf,%eax
  43248a:	0f 86 96 0a 00 00    	jbe    432f26 <_dopr.constprop.0+0xba6>
  432490:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  432495:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
  432499:	48 8d 41 08          	lea    0x8(%rcx),%rax
  43249d:	48 89 46 08          	mov    %rax,0x8(%rsi)
  4324a1:	85 d2                	test   %edx,%edx
  4324a3:	f2 0f 10 01          	movsd  (%rcx),%xmm0
  4324a7:	bf 06 00 00 00       	mov    $0x6,%edi
  4324ac:	78 09                	js     4324b7 <_dopr.constprop.0+0x137>
  4324ae:	83 fa 09             	cmp    $0x9,%edx
  4324b1:	40 b7 09             	mov    $0x9,%dil
  4324b4:	0f 4e fa             	cmovle %edx,%edi
  4324b7:	66 0f ef db          	pxor   %xmm3,%xmm3
  4324bb:	66 0f 2e d8          	ucomisd %xmm0,%xmm3
  4324bf:	0f 87 2b 0d 00 00    	ja     4331f0 <_dopr.constprop.0+0xe70>
  4324c5:	0f 87 e4 0f 00 00    	ja     4334af <_dopr.constprop.0+0x112f>
  4324cb:	f6 44 24 1c 02       	testb  $0x2,0x1c(%rsp)
  4324d0:	0f 85 02 0d 00 00    	jne    4331d8 <_dopr.constprop.0+0xe58>
  4324d6:	8b 44 24 1c          	mov    0x1c(%rsp),%eax
  4324da:	83 e0 04             	and    $0x4,%eax
  4324dd:	89 44 24 28          	mov    %eax,0x28(%rsp)
  4324e1:	0f 84 da 0d 00 00    	je     4332c1 <_dopr.constprop.0+0xf41>
  4324e7:	c7 44 24 28 01 00 00 	movl   $0x1,0x28(%rsp)
  4324ee:	00 
  4324ef:	c6 44 24 2c 01       	movb   $0x1,0x2c(%rsp)
  4324f4:	41 bf 20 00 00 00    	mov    $0x20,%r15d
  4324fa:	85 ff                	test   %edi,%edi
  4324fc:	f2 4c 0f 2c c0       	cvttsd2si %xmm0,%r8
  432501:	0f 84 ba 0e 00 00    	je     4333c1 <_dopr.constprop.0+0x1041>
  432507:	83 ff 01             	cmp    $0x1,%edi
  43250a:	0f 84 c3 0e 00 00    	je     4333d3 <_dopr.constprop.0+0x1053>
  432510:	83 ff 02             	cmp    $0x2,%edi
  432513:	0f 84 15 0f 00 00    	je     43342e <_dopr.constprop.0+0x10ae>
  432519:	83 ff 03             	cmp    $0x3,%edi
  43251c:	0f 84 ff 0e 00 00    	je     433421 <_dopr.constprop.0+0x10a1>
  432522:	83 ff 04             	cmp    $0x4,%edi
  432525:	0f 84 e9 0e 00 00    	je     433414 <_dopr.constprop.0+0x1094>
  43252b:	83 ff 05             	cmp    $0x5,%edi
  43252e:	0f 84 d3 0e 00 00    	je     433407 <_dopr.constprop.0+0x1087>
  432534:	83 ff 06             	cmp    $0x6,%edi
  432537:	0f 84 bd 0e 00 00    	je     4333fa <_dopr.constprop.0+0x107a>
  43253d:	83 ff 07             	cmp    $0x7,%edi
  432540:	0f 84 a7 0e 00 00    	je     4333ed <_dopr.constprop.0+0x106d>
  432546:	83 ff 08             	cmp    $0x8,%edi
  432549:	f2 0f 10 0d d7 eb 01 	movsd  0x1ebd7(%rip),%xmm1        # 451128 <Hex+0x748>
  432550:	00 
  432551:	0f 84 89 0e 00 00    	je     4333e0 <_dopr.constprop.0+0x1060>
  432557:	83 ff 01             	cmp    $0x1,%edi
  43255a:	f2 48 0f 2c c1       	cvttsd2si %xmm1,%rax
  43255f:	f2 0f 10 0d c9 eb 01 	movsd  0x1ebc9(%rip),%xmm1        # 451130 <Hex+0x750>
  432566:	00 
  432567:	74 47                	je     4325b0 <_dopr.constprop.0+0x230>
  432569:	83 ff 02             	cmp    $0x2,%edi
  43256c:	0f 84 17 0f 00 00    	je     433489 <_dopr.constprop.0+0x1109>
  432572:	83 ff 03             	cmp    $0x3,%edi
  432575:	0f 84 01 0f 00 00    	je     43347c <_dopr.constprop.0+0x10fc>
  43257b:	83 ff 04             	cmp    $0x4,%edi
  43257e:	0f 84 eb 0e 00 00    	je     43346f <_dopr.constprop.0+0x10ef>
  432584:	83 ff 05             	cmp    $0x5,%edi
  432587:	0f 84 d5 0e 00 00    	je     433462 <_dopr.constprop.0+0x10e2>
  43258d:	83 ff 06             	cmp    $0x6,%edi
  432590:	0f 84 bf 0e 00 00    	je     433455 <_dopr.constprop.0+0x10d5>
  432596:	83 ff 07             	cmp    $0x7,%edi
  432599:	0f 84 a9 0e 00 00    	je     433448 <_dopr.constprop.0+0x10c8>
  43259f:	83 ff 08             	cmp    $0x8,%edi
  4325a2:	f2 0f 10 0d 7e eb 01 	movsd  0x1eb7e(%rip),%xmm1        # 451128 <Hex+0x748>
  4325a9:	00 
  4325aa:	0f 84 8b 0e 00 00    	je     43343b <_dopr.constprop.0+0x10bb>
  4325b0:	66 0f ef d2          	pxor   %xmm2,%xmm2
  4325b4:	f2 49 0f 2a d0       	cvtsi2sd %r8,%xmm2
  4325b9:	f2 0f 5c c2          	subsd  %xmm2,%xmm0
  4325bd:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  4325c1:	66 0f ef c0          	pxor   %xmm0,%xmm0
  4325c5:	f2 4c 0f 2c c9       	cvttsd2si %xmm1,%r9
  4325ca:	f2 49 0f 2a c1       	cvtsi2sd %r9,%xmm0
  4325cf:	49 8d 51 01          	lea    0x1(%r9),%rdx
  4325d3:	f2 0f 5c c8          	subsd  %xmm0,%xmm1
  4325d7:	66 0f 2e 0d 99 eb 01 	ucomisd 0x1eb99(%rip),%xmm1        # 451178 <Hex+0x798>
  4325de:	00 
  4325df:	4c 0f 43 ca          	cmovae %rdx,%r9
  4325e3:	49 39 c1             	cmp    %rax,%r9
  4325e6:	7c 07                	jl     4325ef <_dopr.constprop.0+0x26f>
  4325e8:	49 83 c0 01          	add    $0x1,%r8
  4325ec:	49 29 c1             	sub    %rax,%r9
  4325ef:	48 8d 74 24 50       	lea    0x50(%rsp),%rsi
  4325f4:	45 31 d2             	xor    %r10d,%r10d
  4325f7:	49 be 67 66 66 66 66 	movabs $0x6666666666666667,%r14
  4325fe:	66 66 66 
  432601:	eb 08                	jmp    43260b <_dopr.constprop.0+0x28b>
  432603:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  432608:	41 89 ca             	mov    %ecx,%r10d
  43260b:	4c 89 c0             	mov    %r8,%rax
  43260e:	41 8d 4a 01          	lea    0x1(%r10),%ecx
  432612:	49 f7 ee             	imul   %r14
  432615:	4c 89 c0             	mov    %r8,%rax
  432618:	48 c1 f8 3f          	sar    $0x3f,%rax
  43261c:	48 c1 fa 02          	sar    $0x2,%rdx
  432620:	48 29 c2             	sub    %rax,%rdx
  432623:	48 8d 04 92          	lea    (%rdx,%rdx,4),%rax
  432627:	48 01 c0             	add    %rax,%rax
  43262a:	49 29 c0             	sub    %rax,%r8
  43262d:	83 f9 13             	cmp    $0x13,%ecx
  432630:	41 0f b6 80 37 0a 45 	movzbl 0x450a37(%r8),%eax
  432637:	00 
  432638:	49 89 d0             	mov    %rdx,%r8
  43263b:	0f 9e c2             	setle  %dl
  43263e:	4d 85 c0             	test   %r8,%r8
  432641:	88 06                	mov    %al,(%rsi)
  432643:	0f 95 c0             	setne  %al
  432646:	48 83 c6 01          	add    $0x1,%rsi
  43264a:	84 c2                	test   %al,%dl
  43264c:	75 ba                	jne    432608 <_dopr.constprop.0+0x288>
  43264e:	83 f9 14             	cmp    $0x14,%ecx
  432651:	49 b8 67 66 66 66 66 	movabs $0x6666666666666667,%r8
  432658:	66 66 66 
  43265b:	41 0f 44 ca          	cmove  %r10d,%ecx
  43265f:	31 f6                	xor    %esi,%esi
  432661:	48 63 c1             	movslq %ecx,%rax
  432664:	c6 44 04 50 00       	movb   $0x0,0x50(%rsp,%rax,1)
  432669:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  432670:	4c 89 c8             	mov    %r9,%rax
  432673:	49 f7 e8             	imul   %r8
  432676:	4c 89 c8             	mov    %r9,%rax
  432679:	48 c1 f8 3f          	sar    $0x3f,%rax
  43267d:	48 c1 fa 02          	sar    $0x2,%rdx
  432681:	48 29 c2             	sub    %rax,%rdx
  432684:	48 8d 04 92          	lea    (%rdx,%rdx,4),%rax
  432688:	48 01 c0             	add    %rax,%rax
  43268b:	49 29 c1             	sub    %rax,%r9
  43268e:	41 0f b6 81 37 0a 45 	movzbl 0x450a37(%r9),%eax
  432695:	00 
  432696:	49 89 d1             	mov    %rdx,%r9
  432699:	88 44 34 70          	mov    %al,0x70(%rsp,%rsi,1)
  43269d:	48 83 c6 01          	add    $0x1,%rsi
  4326a1:	39 f7                	cmp    %esi,%edi
  4326a3:	7f cb                	jg     432670 <_dopr.constprop.0+0x2f0>
  4326a5:	85 ff                	test   %edi,%edi
  4326a7:	ba 01 00 00 00       	mov    $0x1,%edx
  4326ac:	41 89 f8             	mov    %edi,%r8d
  4326af:	0f 4f d7             	cmovg  %edi,%edx
  4326b2:	31 f6                	xor    %esi,%esi
  4326b4:	48 63 c2             	movslq %edx,%rax
  4326b7:	c6 44 04 70 00       	movb   $0x0,0x70(%rsp,%rax,1)
  4326bc:	8b 44 24 10          	mov    0x10(%rsp),%eax
  4326c0:	29 c8                	sub    %ecx,%eax
  4326c2:	29 f8                	sub    %edi,%eax
  4326c4:	83 e8 01             	sub    $0x1,%eax
  4326c7:	41 29 d0             	sub    %edx,%r8d
  4326ca:	44 0f 48 c6          	cmovs  %esi,%r8d
  4326ce:	2b 44 24 28          	sub    0x28(%rsp),%eax
  4326d2:	0f 48 c6             	cmovs  %esi,%eax
  4326d5:	f6 44 24 1c 01       	testb  $0x1,0x1c(%rsp)
  4326da:	0f 84 46 09 00 00    	je     433026 <_dopr.constprop.0+0xca6>
  4326e0:	f7 d8                	neg    %eax
  4326e2:	45 85 ff             	test   %r15d,%r15d
  4326e5:	0f 85 0b 0c 00 00    	jne    4332f6 <_dopr.constprop.0+0xf76>
  4326eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4326f0:	85 c9                	test   %ecx,%ecx
  4326f2:	74 37                	je     43272b <_dopr.constprop.0+0x3ab>
  4326f4:	83 e9 01             	sub    $0x1,%ecx
  4326f7:	48 39 eb             	cmp    %rbp,%rbx
  4326fa:	48 63 f1             	movslq %ecx,%rsi
  4326fd:	44 0f b6 4c 34 50    	movzbl 0x50(%rsp,%rsi,1),%r9d
  432703:	73 eb                	jae    4326f0 <_dopr.constprop.0+0x370>
  432705:	49 8b 75 00          	mov    0x0(%r13),%rsi
  432709:	48 85 f6             	test   %rsi,%rsi
  43270c:	0f 84 84 00 00 00    	je     432796 <_dopr.constprop.0+0x416>
  432712:	4c 8d 53 01          	lea    0x1(%rbx),%r10
  432716:	85 c9                	test   %ecx,%ecx
  432718:	4c 89 54 24 48       	mov    %r10,0x48(%rsp)
  43271d:	44 88 0c 1e          	mov    %r9b,(%rsi,%rbx,1)
  432721:	48 8b 5c 24 48       	mov    0x48(%rsp),%rbx
  432726:	49 8b 2b             	mov    (%r11),%rbp
  432729:	75 c9                	jne    4326f4 <_dopr.constprop.0+0x374>
  43272b:	85 ff                	test   %edi,%edi
  43272d:	75 0b                	jne    43273a <_dopr.constprop.0+0x3ba>
  43272f:	f6 44 24 1c 08       	testb  $0x8,0x1c(%rsp)
  432734:	0f 84 69 08 00 00    	je     432fa3 <_dopr.constprop.0+0xc23>
  43273a:	48 39 eb             	cmp    %rbp,%rbx
  43273d:	73 3e                	jae    43277d <_dopr.constprop.0+0x3fd>
  43273f:	49 8b 4d 00          	mov    0x0(%r13),%rcx
  432743:	48 85 c9             	test   %rcx,%rcx
  432746:	74 4e                	je     432796 <_dopr.constprop.0+0x416>
  432748:	48 8d 73 01          	lea    0x1(%rbx),%rsi
  43274c:	48 89 74 24 48       	mov    %rsi,0x48(%rsp)
  432751:	c6 04 19 2e          	movb   $0x2e,(%rcx,%rbx,1)
  432755:	49 8b 2b             	mov    (%r11),%rbp
  432758:	48 8b 5c 24 48       	mov    0x48(%rsp),%rbx
  43275d:	eb 1e                	jmp    43277d <_dopr.constprop.0+0x3fd>
  43275f:	90                   	nop
  432760:	48 8d 7b 01          	lea    0x1(%rbx),%rdi
  432764:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  432769:	40 88 34 19          	mov    %sil,(%rcx,%rbx,1)
  43276d:	49 8b 2b             	mov    (%r11),%rbp
  432770:	48 8b 5c 24 48       	mov    0x48(%rsp),%rbx
  432775:	85 d2                	test   %edx,%edx
  432777:	0f 84 26 08 00 00    	je     432fa3 <_dopr.constprop.0+0xc23>
  43277d:	83 ea 01             	sub    $0x1,%edx
  432780:	48 39 eb             	cmp    %rbp,%rbx
  432783:	48 63 ca             	movslq %edx,%rcx
  432786:	0f b6 74 0c 70       	movzbl 0x70(%rsp,%rcx,1),%esi
  43278b:	73 e8                	jae    432775 <_dopr.constprop.0+0x3f5>
  43278d:	49 8b 4d 00          	mov    0x0(%r13),%rcx
  432791:	48 85 c9             	test   %rcx,%rcx
  432794:	75 ca                	jne    432760 <_dopr.constprop.0+0x3e0>
  432796:	48 8b 04 25 00 00 00 	mov    0x0,%rax
  43279d:	00 
  43279e:	0f 0b                	ud2    
  4327a0:	48 39 eb             	cmp    %rbp,%rbx
  4327a3:	0f 83 97 01 00 00    	jae    432940 <_dopr.constprop.0+0x5c0>
  4327a9:	41 83 ff 06          	cmp    $0x6,%r15d
  4327ad:	0f 87 ae 01 00 00    	ja     432961 <_dopr.constprop.0+0x5e1>
  4327b3:	44 89 f8             	mov    %r15d,%eax
  4327b6:	ff 24 c5 68 0a 45 00 	jmpq   *0x450a68(,%rax,8)
  4327bd:	0f 1f 00             	nopl   (%rax)
  4327c0:	41 80 fe 68          	cmp    $0x68,%r14b
  4327c4:	0f 84 5e 03 00 00    	je     432b28 <_dopr.constprop.0+0x7a8>
  4327ca:	0f 8e 30 03 00 00    	jle    432b00 <_dopr.constprop.0+0x780>
  4327d0:	41 80 fe 6c          	cmp    $0x6c,%r14b
  4327d4:	0f 84 4e 02 00 00    	je     432a28 <_dopr.constprop.0+0x6a8>
  4327da:	41 80 fe 71          	cmp    $0x71,%r14b
  4327de:	0f 85 64 03 00 00    	jne    432b48 <_dopr.constprop.0+0x7c8>
  4327e4:	45 0f b6 34 24       	movzbl (%r12),%r14d
  4327e9:	c7 44 24 28 04 00 00 	movl   $0x4,0x28(%rsp)
  4327f0:	00 
  4327f1:	49 83 c4 01          	add    $0x1,%r12
  4327f5:	41 bf 06 00 00 00    	mov    $0x6,%r15d
  4327fb:	e9 f0 fb ff ff       	jmpq   4323f0 <_dopr.constprop.0+0x70>
  432800:	4c 89 5c 24 30       	mov    %r11,0x30(%rsp)
  432805:	89 54 24 2c          	mov    %edx,0x2c(%rsp)
  432809:	e8 02 46 fd ff       	callq  406e10 <__ctype_b_loc@plt>
  43280e:	48 8b 30             	mov    (%rax),%rsi
  432811:	41 0f b6 ce          	movzbl %r14b,%ecx
  432815:	8b 54 24 2c          	mov    0x2c(%rsp),%edx
  432819:	4c 8b 5c 24 30       	mov    0x30(%rsp),%r11
  43281e:	f6 44 4e 01 08       	testb  $0x8,0x1(%rsi,%rcx,2)
  432823:	0f 84 47 01 00 00    	je     432970 <_dopr.constprop.0+0x5f0>
  432829:	85 d2                	test   %edx,%edx
  43282b:	b8 00 00 00 00       	mov    $0x0,%eax
  432830:	45 0f be f6          	movsbl %r14b,%r14d
  432834:	0f 48 d0             	cmovs  %eax,%edx
  432837:	49 83 c4 01          	add    $0x1,%r12
  43283b:	8d 04 92             	lea    (%rdx,%rdx,4),%eax
  43283e:	41 8d 54 46 d0       	lea    -0x30(%r14,%rax,2),%edx
  432843:	45 0f b6 74 24 ff    	movzbl -0x1(%r12),%r14d
  432849:	e9 a2 fb ff ff       	jmpq   4323f0 <_dopr.constprop.0+0x70>
  43284e:	66 90                	xchg   %ax,%ax
  432850:	41 80 fe 2e          	cmp    $0x2e,%r14b
  432854:	41 bf 05 00 00 00    	mov    $0x5,%r15d
  43285a:	0f 85 90 fb ff ff    	jne    4323f0 <_dopr.constprop.0+0x70>
  432860:	45 0f b6 34 24       	movzbl (%r12),%r14d
  432865:	41 b7 04             	mov    $0x4,%r15b
  432868:	49 83 c4 01          	add    $0x1,%r12
  43286c:	e9 7f fb ff ff       	jmpq   4323f0 <_dopr.constprop.0+0x70>
  432871:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  432878:	41 8d 46 db          	lea    -0x25(%r14),%eax
  43287c:	3c 53                	cmp    $0x53,%al
  43287e:	0f 87 44 02 00 00    	ja     432ac8 <_dopr.constprop.0+0x748>
  432884:	0f b6 c0             	movzbl %al,%eax
  432887:	ff 24 c5 a0 0a 45 00 	jmpq   *0x450aa0(,%rax,8)
  43288e:	66 90                	xchg   %ax,%ax
  432890:	41 8d 46 e0          	lea    -0x20(%r14),%eax
  432894:	3c 10                	cmp    $0x10,%al
  432896:	0f 87 bc 02 00 00    	ja     432b58 <_dopr.constprop.0+0x7d8>
  43289c:	0f b6 c0             	movzbl %al,%eax
  43289f:	ff 24 c5 40 0d 45 00 	jmpq   *0x450d40(,%rax,8)
  4328a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4328ad:	00 00 00 
  4328b0:	41 80 fe 25          	cmp    $0x25,%r14b
  4328b4:	0f 84 56 01 00 00    	je     432a10 <_dopr.constprop.0+0x690>
  4328ba:	49 8b 45 00          	mov    0x0(%r13),%rax
  4328be:	48 85 c0             	test   %rax,%rax
  4328c1:	0f 84 cf fe ff ff    	je     432796 <_dopr.constprop.0+0x416>
  4328c7:	48 8d 4b 01          	lea    0x1(%rbx),%rcx
  4328cb:	49 83 c4 01          	add    $0x1,%r12
  4328cf:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  4328d4:	44 88 34 18          	mov    %r14b,(%rax,%rbx,1)
  4328d8:	45 0f b6 74 24 ff    	movzbl -0x1(%r12),%r14d
  4328de:	49 8b 2b             	mov    (%r11),%rbp
  4328e1:	48 8b 5c 24 48       	mov    0x48(%rsp),%rbx
  4328e6:	e9 05 fb ff ff       	jmpq   4323f0 <_dopr.constprop.0+0x70>
  4328eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4328f0:	4c 89 5c 24 30       	mov    %r11,0x30(%rsp)
  4328f5:	89 54 24 2c          	mov    %edx,0x2c(%rsp)
  4328f9:	e8 12 45 fd ff       	callq  406e10 <__ctype_b_loc@plt>
  4328fe:	48 8b 30             	mov    (%rax),%rsi
  432901:	41 0f b6 ce          	movzbl %r14b,%ecx
  432905:	8b 54 24 2c          	mov    0x2c(%rsp),%edx
  432909:	4c 8b 5c 24 30       	mov    0x30(%rsp),%r11
  43290e:	f6 44 4e 01 08       	testb  $0x8,0x1(%rsi,%rcx,2)
  432913:	0f 84 a7 00 00 00    	je     4329c0 <_dopr.constprop.0+0x640>
  432919:	8b 44 24 10          	mov    0x10(%rsp),%eax
  43291d:	45 0f be f6          	movsbl %r14b,%r14d
  432921:	49 83 c4 01          	add    $0x1,%r12
  432925:	8d 04 80             	lea    (%rax,%rax,4),%eax
  432928:	41 8d 44 46 d0       	lea    -0x30(%r14,%rax,2),%eax
  43292d:	45 0f b6 74 24 ff    	movzbl -0x1(%r12),%r14d
  432933:	89 44 24 10          	mov    %eax,0x10(%rsp)
  432937:	e9 b4 fa ff ff       	jmpq   4323f0 <_dopr.constprop.0+0x70>
  43293c:	0f 1f 40 00          	nopl   0x0(%rax)
  432940:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
  432944:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  432949:	48 39 d8             	cmp    %rbx,%rax
  43294c:	0f 92 c2             	setb   %dl
  43294f:	0f b6 ca             	movzbl %dl,%ecx
  432952:	84 d2                	test   %dl,%dl
  432954:	89 0f                	mov    %ecx,(%rdi)
  432956:	0f 85 b5 fa ff ff    	jne    432411 <_dopr.constprop.0+0x91>
  43295c:	e9 dc fa ff ff       	jmpq   43243d <_dopr.constprop.0+0xbd>
  432961:	41 83 ff 07          	cmp    $0x7,%r15d
  432965:	0f 85 85 fa ff ff    	jne    4323f0 <_dopr.constprop.0+0x70>
  43296b:	e9 89 fa ff ff       	jmpq   4323f9 <_dopr.constprop.0+0x79>
  432970:	41 80 fe 2a          	cmp    $0x2a,%r14b
  432974:	41 bf 05 00 00 00    	mov    $0x5,%r15d
  43297a:	0f 85 70 fa ff ff    	jne    4323f0 <_dopr.constprop.0+0x70>
  432980:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  432985:	8b 00                	mov    (%rax),%eax
  432987:	83 f8 2f             	cmp    $0x2f,%eax
  43298a:	0f 87 3e 05 00 00    	ja     432ece <_dopr.constprop.0+0xb4e>
  432990:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  432995:	89 c2                	mov    %eax,%edx
  432997:	83 c0 08             	add    $0x8,%eax
  43299a:	48 03 57 10          	add    0x10(%rdi),%rdx
  43299e:	89 07                	mov    %eax,(%rdi)
  4329a0:	45 0f b6 34 24       	movzbl (%r12),%r14d
  4329a5:	8b 12                	mov    (%rdx),%edx
  4329a7:	49 83 c4 01          	add    $0x1,%r12
  4329ab:	41 bf 05 00 00 00    	mov    $0x5,%r15d
  4329b1:	e9 3a fa ff ff       	jmpq   4323f0 <_dopr.constprop.0+0x70>
  4329b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4329bd:	00 00 00 
  4329c0:	41 80 fe 2a          	cmp    $0x2a,%r14b
  4329c4:	41 bf 03 00 00 00    	mov    $0x3,%r15d
  4329ca:	0f 85 20 fa ff ff    	jne    4323f0 <_dopr.constprop.0+0x70>
  4329d0:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  4329d5:	8b 00                	mov    (%rax),%eax
  4329d7:	83 f8 2f             	cmp    $0x2f,%eax
  4329da:	0f 87 d8 04 00 00    	ja     432eb8 <_dopr.constprop.0+0xb38>
  4329e0:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  4329e5:	89 c1                	mov    %eax,%ecx
  4329e7:	83 c0 08             	add    $0x8,%eax
  4329ea:	48 03 4f 10          	add    0x10(%rdi),%rcx
  4329ee:	89 07                	mov    %eax,(%rdi)
  4329f0:	8b 01                	mov    (%rcx),%eax
  4329f2:	45 0f b6 34 24       	movzbl (%r12),%r14d
  4329f7:	41 bf 03 00 00 00    	mov    $0x3,%r15d
  4329fd:	49 83 c4 01          	add    $0x1,%r12
  432a01:	89 44 24 10          	mov    %eax,0x10(%rsp)
  432a05:	e9 e6 f9 ff ff       	jmpq   4323f0 <_dopr.constprop.0+0x70>
  432a0a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  432a10:	45 0f b6 34 24       	movzbl (%r12),%r14d
  432a15:	41 bf 01 00 00 00    	mov    $0x1,%r15d
  432a1b:	49 83 c4 01          	add    $0x1,%r12
  432a1f:	e9 cc f9 ff ff       	jmpq   4323f0 <_dopr.constprop.0+0x70>
  432a24:	0f 1f 40 00          	nopl   0x0(%rax)
  432a28:	45 0f b6 34 24       	movzbl (%r12),%r14d
  432a2d:	c7 44 24 28 02 00 00 	movl   $0x2,0x28(%rsp)
  432a34:	00 
  432a35:	41 80 fe 6c          	cmp    $0x6c,%r14b
  432a39:	0f 84 50 04 00 00    	je     432e8f <_dopr.constprop.0+0xb0f>
  432a3f:	49 83 c4 01          	add    $0x1,%r12
  432a43:	41 bf 06 00 00 00    	mov    $0x6,%r15d
  432a49:	e9 a2 f9 ff ff       	jmpq   4323f0 <_dopr.constprop.0+0x70>
  432a4e:	66 90                	xchg   %ax,%ax
  432a50:	45 0f b6 34 24       	movzbl (%r12),%r14d
  432a55:	83 4c 24 1c 10       	orl    $0x10,0x1c(%rsp)
  432a5a:	49 83 c4 01          	add    $0x1,%r12
  432a5e:	e9 8d f9 ff ff       	jmpq   4323f0 <_dopr.constprop.0+0x70>
  432a63:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  432a68:	45 0f b6 34 24       	movzbl (%r12),%r14d
  432a6d:	83 4c 24 1c 04       	orl    $0x4,0x1c(%rsp)
  432a72:	49 83 c4 01          	add    $0x1,%r12
  432a76:	e9 75 f9 ff ff       	jmpq   4323f0 <_dopr.constprop.0+0x70>
  432a7b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  432a80:	45 0f b6 34 24       	movzbl (%r12),%r14d
  432a85:	83 4c 24 1c 02       	orl    $0x2,0x1c(%rsp)
  432a8a:	49 83 c4 01          	add    $0x1,%r12
  432a8e:	e9 5d f9 ff ff       	jmpq   4323f0 <_dopr.constprop.0+0x70>
  432a93:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  432a98:	45 0f b6 34 24       	movzbl (%r12),%r14d
  432a9d:	83 4c 24 1c 08       	orl    $0x8,0x1c(%rsp)
  432aa2:	49 83 c4 01          	add    $0x1,%r12
  432aa6:	e9 45 f9 ff ff       	jmpq   4323f0 <_dopr.constprop.0+0x70>
  432aab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  432ab0:	45 0f b6 34 24       	movzbl (%r12),%r14d
  432ab5:	83 4c 24 1c 01       	orl    $0x1,0x1c(%rsp)
  432aba:	49 83 c4 01          	add    $0x1,%r12
  432abe:	e9 2d f9 ff ff       	jmpq   4323f0 <_dopr.constprop.0+0x70>
  432ac3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  432ac8:	4c 89 e0             	mov    %r12,%rax
  432acb:	4c 8d 60 01          	lea    0x1(%rax),%r12
  432acf:	44 0f b6 30          	movzbl (%rax),%r14d
  432ad3:	c7 44 24 28 00 00 00 	movl   $0x0,0x28(%rsp)
  432ada:	00 
  432adb:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%rsp)
  432ae2:	00 
  432ae3:	45 31 ff             	xor    %r15d,%r15d
  432ae6:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  432aeb:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%rsp)
  432af2:	00 
  432af3:	e9 f8 f8 ff ff       	jmpq   4323f0 <_dopr.constprop.0+0x70>
  432af8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  432aff:	00 
  432b00:	41 80 fe 4c          	cmp    $0x4c,%r14b
  432b04:	75 42                	jne    432b48 <_dopr.constprop.0+0x7c8>
  432b06:	45 0f b6 34 24       	movzbl (%r12),%r14d
  432b0b:	c7 44 24 28 03 00 00 	movl   $0x3,0x28(%rsp)
  432b12:	00 
  432b13:	49 83 c4 01          	add    $0x1,%r12
  432b17:	41 bf 06 00 00 00    	mov    $0x6,%r15d
  432b1d:	e9 ce f8 ff ff       	jmpq   4323f0 <_dopr.constprop.0+0x70>
  432b22:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  432b28:	45 0f b6 34 24       	movzbl (%r12),%r14d
  432b2d:	c7 44 24 28 01 00 00 	movl   $0x1,0x28(%rsp)
  432b34:	00 
  432b35:	49 83 c4 01          	add    $0x1,%r12
  432b39:	41 bf 06 00 00 00    	mov    $0x6,%r15d
  432b3f:	e9 ac f8 ff ff       	jmpq   4323f0 <_dopr.constprop.0+0x70>
  432b44:	0f 1f 40 00          	nopl   0x0(%rax)
  432b48:	41 bf 06 00 00 00    	mov    $0x6,%r15d
  432b4e:	e9 9d f8 ff ff       	jmpq   4323f0 <_dopr.constprop.0+0x70>
  432b53:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  432b58:	41 bf 02 00 00 00    	mov    $0x2,%r15d
  432b5e:	e9 8d f8 ff ff       	jmpq   4323f0 <_dopr.constprop.0+0x70>
  432b63:	83 4c 24 1c 20       	orl    $0x20,0x1c(%rsp)
  432b68:	8b 44 24 1c          	mov    0x1c(%rsp),%eax
  432b6c:	8b 7c 24 28          	mov    0x28(%rsp),%edi
  432b70:	83 c8 40             	or     $0x40,%eax
  432b73:	83 ff 02             	cmp    $0x2,%edi
  432b76:	0f 84 c8 05 00 00    	je     433144 <_dopr.constprop.0+0xdc4>
  432b7c:	83 ff 04             	cmp    $0x4,%edi
  432b7f:	0f 84 05 06 00 00    	je     43318a <_dopr.constprop.0+0xe0a>
  432b85:	83 ff 01             	cmp    $0x1,%edi
  432b88:	0f 84 d6 05 00 00    	je     433164 <_dopr.constprop.0+0xde4>
  432b8e:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  432b93:	8b 0f                	mov    (%rdi),%ecx
  432b95:	83 f9 2f             	cmp    $0x2f,%ecx
  432b98:	0f 86 c6 03 00 00    	jbe    432f64 <_dopr.constprop.0+0xbe4>
  432b9e:	48 8b 77 08          	mov    0x8(%rdi),%rsi
  432ba2:	48 8d 4e 08          	lea    0x8(%rsi),%rcx
  432ba6:	48 89 4f 08          	mov    %rcx,0x8(%rdi)
  432baa:	8b 0e                	mov    (%rsi),%ecx
  432bac:	41 80 fe 6f          	cmp    $0x6f,%r14b
  432bb0:	41 b8 08 00 00 00    	mov    $0x8,%r8d
  432bb6:	74 10                	je     432bc8 <_dopr.constprop.0+0x848>
  432bb8:	41 80 fe 75          	cmp    $0x75,%r14b
  432bbc:	41 b0 10             	mov    $0x10,%r8b
  432bbf:	be 0a 00 00 00       	mov    $0xa,%esi
  432bc4:	44 0f 44 c6          	cmove  %esi,%r8d
  432bc8:	50                   	push   %rax
  432bc9:	52                   	push   %rdx
  432bca:	44 8b 4c 24 20       	mov    0x20(%rsp),%r9d
  432bcf:	eb 37                	jmp    432c08 <_dopr.constprop.0+0x888>
  432bd1:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  432bd6:	8b 00                	mov    (%rax),%eax
  432bd8:	83 f8 2f             	cmp    $0x2f,%eax
  432bdb:	0f 87 2f 03 00 00    	ja     432f10 <_dopr.constprop.0+0xb90>
  432be1:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  432be6:	89 c1                	mov    %eax,%ecx
  432be8:	83 c0 08             	add    $0x8,%eax
  432beb:	48 03 4e 10          	add    0x10(%rsi),%rcx
  432bef:	89 06                	mov    %eax,(%rsi)
  432bf1:	8b 44 24 1c          	mov    0x1c(%rsp),%eax
  432bf5:	41 b8 10 00 00 00    	mov    $0x10,%r8d
  432bfb:	83 c8 08             	or     $0x8,%eax
  432bfe:	50                   	push   %rax
  432bff:	52                   	push   %rdx
  432c00:	44 8b 4c 24 20       	mov    0x20(%rsp),%r9d
  432c05:	48 8b 09             	mov    (%rcx),%rcx
  432c08:	48 8d 74 24 58       	lea    0x58(%rsp),%rsi
  432c0d:	4c 89 da             	mov    %r11,%rdx
  432c10:	4c 89 ef             	mov    %r13,%rdi
  432c13:	4c 89 5c 24 20       	mov    %r11,0x20(%rsp)
  432c18:	e8 d3 f3 ff ff       	callq  431ff0 <fmtint.constprop.3>
  432c1d:	4c 8b 5c 24 20       	mov    0x20(%rsp),%r11
  432c22:	48 8b 5c 24 58       	mov    0x58(%rsp),%rbx
  432c27:	58                   	pop    %rax
  432c28:	4c 89 e0             	mov    %r12,%rax
  432c2b:	49 8b 2b             	mov    (%r11),%rbp
  432c2e:	5a                   	pop    %rdx
  432c2f:	e9 97 fe ff ff       	jmpq   432acb <_dopr.constprop.0+0x74b>
  432c34:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  432c39:	8b 40 04             	mov    0x4(%rax),%eax
  432c3c:	3d af 00 00 00       	cmp    $0xaf,%eax
  432c41:	0f 87 5f 02 00 00    	ja     432ea6 <_dopr.constprop.0+0xb26>
  432c47:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  432c4c:	83 c0 10             	add    $0x10,%eax
  432c4f:	89 46 04             	mov    %eax,0x4(%rsi)
  432c52:	4c 89 e0             	mov    %r12,%rax
  432c55:	e9 71 fe ff ff       	jmpq   432acb <_dopr.constprop.0+0x74b>
  432c5a:	83 7c 24 28 01       	cmpl   $0x1,0x28(%rsp)
  432c5f:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  432c64:	0f 84 a6 05 00 00    	je     433210 <_dopr.constprop.0+0xe90>
  432c6a:	83 7c 24 28 02       	cmpl   $0x2,0x28(%rsp)
  432c6f:	0f 84 2e 06 00 00    	je     4332a3 <_dopr.constprop.0+0xf23>
  432c75:	83 7c 24 28 04       	cmpl   $0x4,0x28(%rsp)
  432c7a:	0f 84 f4 02 00 00    	je     432f74 <_dopr.constprop.0+0xbf4>
  432c80:	8b 00                	mov    (%rax),%eax
  432c82:	83 f8 2f             	cmp    $0x2f,%eax
  432c85:	0f 87 43 06 00 00    	ja     4332ce <_dopr.constprop.0+0xf4e>
  432c8b:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  432c90:	89 c2                	mov    %eax,%edx
  432c92:	83 c0 08             	add    $0x8,%eax
  432c95:	48 03 56 10          	add    0x10(%rsi),%rdx
  432c99:	89 06                	mov    %eax,(%rsi)
  432c9b:	48 8b 02             	mov    (%rdx),%rax
  432c9e:	89 18                	mov    %ebx,(%rax)
  432ca0:	4c 89 e0             	mov    %r12,%rax
  432ca3:	e9 23 fe ff ff       	jmpq   432acb <_dopr.constprop.0+0x74b>
  432ca8:	49 8b 45 00          	mov    0x0(%r13),%rax
  432cac:	48 85 c0             	test   %rax,%rax
  432caf:	0f 84 e1 fa ff ff    	je     432796 <_dopr.constprop.0+0x416>
  432cb5:	48 8d 53 01          	lea    0x1(%rbx),%rdx
  432cb9:	48 89 54 24 48       	mov    %rdx,0x48(%rsp)
  432cbe:	c6 04 18 25          	movb   $0x25,(%rax,%rbx,1)
  432cc2:	4c 89 e0             	mov    %r12,%rax
  432cc5:	49 8b 2b             	mov    (%r11),%rbp
  432cc8:	48 8b 5c 24 48       	mov    0x48(%rsp),%rbx
  432ccd:	e9 f9 fd ff ff       	jmpq   432acb <_dopr.constprop.0+0x74b>
  432cd2:	49 8d 44 24 01       	lea    0x1(%r12),%rax
  432cd7:	e9 ef fd ff ff       	jmpq   432acb <_dopr.constprop.0+0x74b>
  432cdc:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  432ce1:	8b 00                	mov    (%rax),%eax
  432ce3:	83 f8 2f             	cmp    $0x2f,%eax
  432ce6:	0f 87 0e 02 00 00    	ja     432efa <_dopr.constprop.0+0xb7a>
  432cec:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  432cf1:	89 c1                	mov    %eax,%ecx
  432cf3:	83 c0 08             	add    $0x8,%eax
  432cf6:	48 03 4f 10          	add    0x10(%rdi),%rcx
  432cfa:	89 07                	mov    %eax,(%rdi)
  432cfc:	48 8b 31             	mov    (%rcx),%rsi
  432cff:	85 d2                	test   %edx,%edx
  432d01:	b8 59 0a 45 00       	mov    $0x450a59,%eax
  432d06:	0f 48 d5             	cmovs  %ebp,%edx
  432d09:	48 85 f6             	test   %rsi,%rsi
  432d0c:	48 0f 44 f0          	cmove  %rax,%rsi
  432d10:	0f b6 3e             	movzbl (%rsi),%edi
  432d13:	40 84 ff             	test   %dil,%dil
  432d16:	0f 84 9d 06 00 00    	je     4333b9 <_dopr.constprop.0+0x1039>
  432d1c:	48 8d 46 01          	lea    0x1(%rsi),%rax
  432d20:	45 31 c0             	xor    %r8d,%r8d
  432d23:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  432d28:	48 83 c0 01          	add    $0x1,%rax
  432d2c:	41 83 c0 01          	add    $0x1,%r8d
  432d30:	80 78 ff 00          	cmpb   $0x0,-0x1(%rax)
  432d34:	75 f2                	jne    432d28 <_dopr.constprop.0+0x9a8>
  432d36:	44 8b 4c 24 1c       	mov    0x1c(%rsp),%r9d
  432d3b:	8b 44 24 10          	mov    0x10(%rsp),%eax
  432d3f:	b9 00 00 00 00       	mov    $0x0,%ecx
  432d44:	41 83 e1 01          	and    $0x1,%r9d
  432d48:	44 29 c0             	sub    %r8d,%eax
  432d4b:	0f 49 c8             	cmovns %eax,%ecx
  432d4e:	44 89 c8             	mov    %r9d,%eax
  432d51:	f7 d8                	neg    %eax
  432d53:	31 c8                	xor    %ecx,%eax
  432d55:	85 d2                	test   %edx,%edx
  432d57:	42 8d 0c 08          	lea    (%rax,%r9,1),%ecx
  432d5b:	0f 9f c0             	setg   %al
  432d5e:	41 89 c0             	mov    %eax,%r8d
  432d61:	85 c9                	test   %ecx,%ecx
  432d63:	0f 8e 49 06 00 00    	jle    4333b2 <_dopr.constprop.0+0x1032>
  432d69:	84 c0                	test   %al,%al
  432d6b:	0f 84 41 06 00 00    	je     4333b2 <_dopr.constprop.0+0x1032>
  432d71:	31 c0                	xor    %eax,%eax
  432d73:	eb 32                	jmp    432da7 <_dopr.constprop.0+0xa27>
  432d75:	0f 1f 00             	nopl   (%rax)
  432d78:	4c 8d 43 01          	lea    0x1(%rbx),%r8
  432d7c:	4c 89 44 24 48       	mov    %r8,0x48(%rsp)
  432d81:	c6 04 1f 20          	movb   $0x20,(%rdi,%rbx,1)
  432d85:	49 8b 2b             	mov    (%r11),%rbp
  432d88:	48 8b 5c 24 48       	mov    0x48(%rsp),%rbx
  432d8d:	83 c0 01             	add    $0x1,%eax
  432d90:	83 e9 01             	sub    $0x1,%ecx
  432d93:	39 c2                	cmp    %eax,%edx
  432d95:	41 0f 9f c0          	setg   %r8b
  432d99:	0f 8e da 02 00 00    	jle    433079 <_dopr.constprop.0+0xcf9>
  432d9f:	85 c9                	test   %ecx,%ecx
  432da1:	0f 8e d2 02 00 00    	jle    433079 <_dopr.constprop.0+0xcf9>
  432da7:	48 39 eb             	cmp    %rbp,%rbx
  432daa:	73 e1                	jae    432d8d <_dopr.constprop.0+0xa0d>
  432dac:	49 8b 7d 00          	mov    0x0(%r13),%rdi
  432db0:	48 85 ff             	test   %rdi,%rdi
  432db3:	75 c3                	jne    432d78 <_dopr.constprop.0+0x9f8>
  432db5:	48 8b 04 25 00 00 00 	mov    0x0,%rax
  432dbc:	00 
  432dbd:	0f 0b                	ud2    
  432dbf:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  432dc4:	8b 00                	mov    (%rax),%eax
  432dc6:	83 f8 2f             	cmp    $0x2f,%eax
  432dc9:	0f 87 15 01 00 00    	ja     432ee4 <_dopr.constprop.0+0xb64>
  432dcf:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  432dd4:	89 c2                	mov    %eax,%edx
  432dd6:	83 c0 08             	add    $0x8,%eax
  432dd9:	48 03 57 10          	add    0x10(%rdi),%rdx
  432ddd:	89 07                	mov    %eax,(%rdi)
  432ddf:	49 8b 45 00          	mov    0x0(%r13),%rax
  432de3:	8b 12                	mov    (%rdx),%edx
  432de5:	48 85 c0             	test   %rax,%rax
  432de8:	0f 84 a8 f9 ff ff    	je     432796 <_dopr.constprop.0+0x416>
  432dee:	48 8d 4b 01          	lea    0x1(%rbx),%rcx
  432df2:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  432df7:	88 14 18             	mov    %dl,(%rax,%rbx,1)
  432dfa:	4c 89 e0             	mov    %r12,%rax
  432dfd:	49 8b 2b             	mov    (%r11),%rbp
  432e00:	48 8b 5c 24 48       	mov    0x48(%rsp),%rbx
  432e05:	e9 c1 fc ff ff       	jmpq   432acb <_dopr.constprop.0+0x74b>
  432e0a:	8b 44 24 28          	mov    0x28(%rsp),%eax
  432e0e:	83 f8 02             	cmp    $0x2,%eax
  432e11:	0f 84 25 01 00 00    	je     432f3c <_dopr.constprop.0+0xbbc>
  432e17:	83 f8 04             	cmp    $0x4,%eax
  432e1a:	0f 84 1c 01 00 00    	je     432f3c <_dopr.constprop.0+0xbbc>
  432e20:	83 f8 01             	cmp    $0x1,%eax
  432e23:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  432e28:	8b 00                	mov    (%rax),%eax
  432e2a:	0f 84 2a 04 00 00    	je     43325a <_dopr.constprop.0+0xeda>
  432e30:	83 f8 2f             	cmp    $0x2f,%eax
  432e33:	0f 87 39 05 00 00    	ja     433372 <_dopr.constprop.0+0xff2>
  432e39:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  432e3e:	89 c1                	mov    %eax,%ecx
  432e40:	83 c0 08             	add    $0x8,%eax
  432e43:	48 03 4e 10          	add    0x10(%rsi),%rcx
  432e47:	89 06                	mov    %eax,(%rsi)
  432e49:	48 63 09             	movslq (%rcx),%rcx
  432e4c:	8b 44 24 1c          	mov    0x1c(%rsp),%eax
  432e50:	41 b8 0a 00 00 00    	mov    $0xa,%r8d
  432e56:	50                   	push   %rax
  432e57:	52                   	push   %rdx
  432e58:	44 8b 4c 24 20       	mov    0x20(%rsp),%r9d
  432e5d:	e9 a6 fd ff ff       	jmpq   432c08 <_dopr.constprop.0+0x888>
  432e62:	83 7c 24 28 03       	cmpl   $0x3,0x28(%rsp)
  432e67:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  432e6c:	8b 40 04             	mov    0x4(%rax),%eax
  432e6f:	0f 85 c7 fd ff ff    	jne    432c3c <_dopr.constprop.0+0x8bc>
  432e75:	3d af 00 00 00       	cmp    $0xaf,%eax
  432e7a:	77 2a                	ja     432ea6 <_dopr.constprop.0+0xb26>
  432e7c:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  432e81:	83 c0 10             	add    $0x10,%eax
  432e84:	89 47 04             	mov    %eax,0x4(%rdi)
  432e87:	4c 89 e0             	mov    %r12,%rax
  432e8a:	e9 3c fc ff ff       	jmpq   432acb <_dopr.constprop.0+0x74b>
  432e8f:	45 0f b6 74 24 01    	movzbl 0x1(%r12),%r14d
  432e95:	c7 44 24 28 04 00 00 	movl   $0x4,0x28(%rsp)
  432e9c:	00 
  432e9d:	49 83 c4 01          	add    $0x1,%r12
  432ea1:	e9 99 fb ff ff       	jmpq   432a3f <_dopr.constprop.0+0x6bf>
  432ea6:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  432eab:	48 83 40 08 08       	addq   $0x8,0x8(%rax)
  432eb0:	4c 89 e0             	mov    %r12,%rax
  432eb3:	e9 13 fc ff ff       	jmpq   432acb <_dopr.constprop.0+0x74b>
  432eb8:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  432ebd:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
  432ec1:	48 8d 41 08          	lea    0x8(%rcx),%rax
  432ec5:	48 89 47 08          	mov    %rax,0x8(%rdi)
  432ec9:	e9 22 fb ff ff       	jmpq   4329f0 <_dopr.constprop.0+0x670>
  432ece:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  432ed3:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  432ed7:	48 8d 42 08          	lea    0x8(%rdx),%rax
  432edb:	48 89 46 08          	mov    %rax,0x8(%rsi)
  432edf:	e9 bc fa ff ff       	jmpq   4329a0 <_dopr.constprop.0+0x620>
  432ee4:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  432ee9:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  432eed:	48 8d 42 08          	lea    0x8(%rdx),%rax
  432ef1:	48 89 47 08          	mov    %rax,0x8(%rdi)
  432ef5:	e9 e5 fe ff ff       	jmpq   432ddf <_dopr.constprop.0+0xa5f>
  432efa:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  432eff:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
  432f03:	48 8d 41 08          	lea    0x8(%rcx),%rax
  432f07:	48 89 47 08          	mov    %rax,0x8(%rdi)
  432f0b:	e9 ec fd ff ff       	jmpq   432cfc <_dopr.constprop.0+0x97c>
  432f10:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  432f15:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
  432f19:	48 8d 41 08          	lea    0x8(%rcx),%rax
  432f1d:	48 89 47 08          	mov    %rax,0x8(%rdi)
  432f21:	e9 cb fc ff ff       	jmpq   432bf1 <_dopr.constprop.0+0x871>
  432f26:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  432f2b:	89 c1                	mov    %eax,%ecx
  432f2d:	83 c0 10             	add    $0x10,%eax
  432f30:	48 03 4f 10          	add    0x10(%rdi),%rcx
  432f34:	89 47 04             	mov    %eax,0x4(%rdi)
  432f37:	e9 65 f5 ff ff       	jmpq   4324a1 <_dopr.constprop.0+0x121>
  432f3c:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  432f41:	8b 00                	mov    (%rax),%eax
  432f43:	83 f8 2f             	cmp    $0x2f,%eax
  432f46:	0f 87 41 03 00 00    	ja     43328d <_dopr.constprop.0+0xf0d>
  432f4c:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  432f51:	89 c1                	mov    %eax,%ecx
  432f53:	83 c0 08             	add    $0x8,%eax
  432f56:	48 03 4e 10          	add    0x10(%rsi),%rcx
  432f5a:	89 06                	mov    %eax,(%rsi)
  432f5c:	48 8b 09             	mov    (%rcx),%rcx
  432f5f:	e9 e8 fe ff ff       	jmpq   432e4c <_dopr.constprop.0+0xacc>
  432f64:	89 ce                	mov    %ecx,%esi
  432f66:	83 c1 08             	add    $0x8,%ecx
  432f69:	48 03 77 10          	add    0x10(%rdi),%rsi
  432f6d:	89 0f                	mov    %ecx,(%rdi)
  432f6f:	e9 36 fc ff ff       	jmpq   432baa <_dopr.constprop.0+0x82a>
  432f74:	8b 10                	mov    (%rax),%edx
  432f76:	83 fa 2f             	cmp    $0x2f,%edx
  432f79:	0f 87 17 05 00 00    	ja     433496 <_dopr.constprop.0+0x1116>
  432f7f:	48 89 c7             	mov    %rax,%rdi
  432f82:	89 d0                	mov    %edx,%eax
  432f84:	83 c2 08             	add    $0x8,%edx
  432f87:	48 03 47 10          	add    0x10(%rdi),%rax
  432f8b:	89 17                	mov    %edx,(%rdi)
  432f8d:	48 8b 00             	mov    (%rax),%rax
  432f90:	48 89 18             	mov    %rbx,(%rax)
  432f93:	4c 89 e0             	mov    %r12,%rax
  432f96:	49 8b 2b             	mov    (%r11),%rbp
  432f99:	48 8b 5c 24 48       	mov    0x48(%rsp),%rbx
  432f9e:	e9 28 fb ff ff       	jmpq   432acb <_dopr.constprop.0+0x74b>
  432fa3:	45 85 c0             	test   %r8d,%r8d
  432fa6:	75 23                	jne    432fcb <_dopr.constprop.0+0xc4b>
  432fa8:	eb 39                	jmp    432fe3 <_dopr.constprop.0+0xc63>
  432faa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  432fb0:	48 8d 4b 01          	lea    0x1(%rbx),%rcx
  432fb4:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  432fb9:	c6 04 1a 30          	movb   $0x30,(%rdx,%rbx,1)
  432fbd:	49 8b 2b             	mov    (%r11),%rbp
  432fc0:	48 8b 5c 24 48       	mov    0x48(%rsp),%rbx
  432fc5:	41 83 e8 01          	sub    $0x1,%r8d
  432fc9:	74 18                	je     432fe3 <_dopr.constprop.0+0xc63>
  432fcb:	48 39 eb             	cmp    %rbp,%rbx
  432fce:	73 f5                	jae    432fc5 <_dopr.constprop.0+0xc45>
  432fd0:	49 8b 55 00          	mov    0x0(%r13),%rdx
  432fd4:	48 85 d2             	test   %rdx,%rdx
  432fd7:	75 d7                	jne    432fb0 <_dopr.constprop.0+0xc30>
  432fd9:	48 8b 04 25 00 00 00 	mov    0x0,%rax
  432fe0:	00 
  432fe1:	0f 0b                	ud2    
  432fe3:	85 c0                	test   %eax,%eax
  432fe5:	75 27                	jne    43300e <_dopr.constprop.0+0xc8e>
  432fe7:	e9 dc fa ff ff       	jmpq   432ac8 <_dopr.constprop.0+0x748>
  432fec:	0f 1f 40 00          	nopl   0x0(%rax)
  432ff0:	48 8d 4b 01          	lea    0x1(%rbx),%rcx
  432ff4:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
  432ff9:	c6 04 1a 20          	movb   $0x20,(%rdx,%rbx,1)
  432ffd:	49 8b 2b             	mov    (%r11),%rbp
  433000:	48 8b 5c 24 48       	mov    0x48(%rsp),%rbx
  433005:	83 c0 01             	add    $0x1,%eax
  433008:	0f 84 ba fa ff ff    	je     432ac8 <_dopr.constprop.0+0x748>
  43300e:	48 39 eb             	cmp    %rbp,%rbx
  433011:	73 f2                	jae    433005 <_dopr.constprop.0+0xc85>
  433013:	49 8b 55 00          	mov    0x0(%r13),%rdx
  433017:	48 85 d2             	test   %rdx,%rdx
  43301a:	75 d4                	jne    432ff0 <_dopr.constprop.0+0xc70>
  43301c:	48 8b 04 25 00 00 00 	mov    0x0,%rax
  433023:	00 
  433024:	0f 0b                	ud2    
  433026:	85 c0                	test   %eax,%eax
  433028:	0f 8e 05 03 00 00    	jle    433333 <_dopr.constprop.0+0xfb3>
  43302e:	f6 44 24 1c 10       	testb  $0x10,0x1c(%rsp)
  433033:	0f 84 fa 02 00 00    	je     433333 <_dopr.constprop.0+0xfb3>
  433039:	80 7c 24 2c 00       	cmpb   $0x0,0x2c(%rsp)
  43303e:	74 26                	je     433066 <_dopr.constprop.0+0xce6>
  433040:	e9 61 01 00 00       	jmpq   4331a6 <_dopr.constprop.0+0xe26>
  433045:	0f 1f 00             	nopl   (%rax)
  433048:	4c 8d 4b 01          	lea    0x1(%rbx),%r9
  43304c:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
  433051:	c6 04 1e 30          	movb   $0x30,(%rsi,%rbx,1)
  433055:	48 8b 5c 24 48       	mov    0x48(%rsp),%rbx
  43305a:	49 8b 2b             	mov    (%r11),%rbp
  43305d:	83 e8 01             	sub    $0x1,%eax
  433060:	0f 84 6b 01 00 00    	je     4331d1 <_dopr.constprop.0+0xe51>
  433066:	48 39 eb             	cmp    %rbp,%rbx
  433069:	73 f2                	jae    43305d <_dopr.constprop.0+0xcdd>
  43306b:	49 8b 75 00          	mov    0x0(%r13),%rsi
  43306f:	48 85 f6             	test   %rsi,%rsi
  433072:	75 d4                	jne    433048 <_dopr.constprop.0+0xcc8>
  433074:	e9 1d f7 ff ff       	jmpq   432796 <_dopr.constprop.0+0x416>
  433079:	0f b6 3e             	movzbl (%rsi),%edi
  43307c:	40 84 ff             	test   %dil,%dil
  43307f:	74 57                	je     4330d8 <_dopr.constprop.0+0xd58>
  433081:	45 84 c0             	test   %r8b,%r8b
  433084:	75 36                	jne    4330bc <_dopr.constprop.0+0xd3c>
  433086:	e9 3d fa ff ff       	jmpq   432ac8 <_dopr.constprop.0+0x748>
  43308b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  433090:	4c 8d 4b 01          	lea    0x1(%rbx),%r9
  433094:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
  433099:	41 88 3c 18          	mov    %dil,(%r8,%rbx,1)
  43309d:	49 8b 2b             	mov    (%r11),%rbp
  4330a0:	48 8b 5c 24 48       	mov    0x48(%rsp),%rbx
  4330a5:	83 c0 01             	add    $0x1,%eax
  4330a8:	0f b6 3e             	movzbl (%rsi),%edi
  4330ab:	39 c2                	cmp    %eax,%edx
  4330ad:	41 0f 9f c0          	setg   %r8b
  4330b1:	0f 8e 11 fa ff ff    	jle    432ac8 <_dopr.constprop.0+0x748>
  4330b7:	40 84 ff             	test   %dil,%dil
  4330ba:	74 1c                	je     4330d8 <_dopr.constprop.0+0xd58>
  4330bc:	48 83 c6 01          	add    $0x1,%rsi
  4330c0:	48 39 dd             	cmp    %rbx,%rbp
  4330c3:	76 e0                	jbe    4330a5 <_dopr.constprop.0+0xd25>
  4330c5:	4d 8b 45 00          	mov    0x0(%r13),%r8
  4330c9:	4d 85 c0             	test   %r8,%r8
  4330cc:	75 c2                	jne    433090 <_dopr.constprop.0+0xd10>
  4330ce:	48 8b 04 25 00 00 00 	mov    0x0,%rax
  4330d5:	00 
  4330d6:	0f 0b                	ud2    
  4330d8:	45 84 c0             	test   %r8b,%r8b
  4330db:	0f 84 e7 f9 ff ff    	je     432ac8 <_dopr.constprop.0+0x748>
  4330e1:	89 ce                	mov    %ecx,%esi
  4330e3:	c1 ee 1f             	shr    $0x1f,%esi
  4330e6:	40 84 f6             	test   %sil,%sil
  4330e9:	0f 84 d9 f9 ff ff    	je     432ac8 <_dopr.constprop.0+0x748>
  4330ef:	89 ce                	mov    %ecx,%esi
  4330f1:	eb 39                	jmp    43312c <_dopr.constprop.0+0xdac>
  4330f3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4330f8:	4c 8d 43 01          	lea    0x1(%rbx),%r8
  4330fc:	4c 89 44 24 48       	mov    %r8,0x48(%rsp)
  433101:	c6 04 1f 20          	movb   $0x20,(%rdi,%rbx,1)
  433105:	49 8b 2b             	mov    (%r11),%rbp
  433108:	48 8b 5c 24 48       	mov    0x48(%rsp),%rbx
  43310d:	83 c6 01             	add    $0x1,%esi
  433110:	89 f7                	mov    %esi,%edi
  433112:	29 cf                	sub    %ecx,%edi
  433114:	01 c7                	add    %eax,%edi
  433116:	39 fa                	cmp    %edi,%edx
  433118:	0f 8e aa f9 ff ff    	jle    432ac8 <_dopr.constprop.0+0x748>
  43311e:	89 f7                	mov    %esi,%edi
  433120:	c1 ef 1f             	shr    $0x1f,%edi
  433123:	40 84 ff             	test   %dil,%dil
  433126:	0f 84 9c f9 ff ff    	je     432ac8 <_dopr.constprop.0+0x748>
  43312c:	48 39 eb             	cmp    %rbp,%rbx
  43312f:	73 dc                	jae    43310d <_dopr.constprop.0+0xd8d>
  433131:	49 8b 7d 00          	mov    0x0(%r13),%rdi
  433135:	48 85 ff             	test   %rdi,%rdi
  433138:	75 be                	jne    4330f8 <_dopr.constprop.0+0xd78>
  43313a:	48 8b 04 25 00 00 00 	mov    0x0,%rax
  433141:	00 
  433142:	0f 0b                	ud2    
  433144:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  433149:	8b 0f                	mov    (%rdi),%ecx
  43314b:	83 f9 2f             	cmp    $0x2f,%ecx
  43314e:	76 49                	jbe    433199 <_dopr.constprop.0+0xe19>
  433150:	48 8b 77 08          	mov    0x8(%rdi),%rsi
  433154:	48 8d 4e 08          	lea    0x8(%rsi),%rcx
  433158:	48 89 4f 08          	mov    %rcx,0x8(%rdi)
  43315c:	48 8b 0e             	mov    (%rsi),%rcx
  43315f:	e9 48 fa ff ff       	jmpq   432bac <_dopr.constprop.0+0x82c>
  433164:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  433169:	8b 0e                	mov    (%rsi),%ecx
  43316b:	48 89 f7             	mov    %rsi,%rdi
  43316e:	83 f9 2f             	cmp    $0x2f,%ecx
  433171:	0f 87 05 01 00 00    	ja     43327c <_dopr.constprop.0+0xefc>
  433177:	89 ce                	mov    %ecx,%esi
  433179:	48 03 77 10          	add    0x10(%rdi),%rsi
  43317d:	83 c1 08             	add    $0x8,%ecx
  433180:	89 0f                	mov    %ecx,(%rdi)
  433182:	0f b7 0e             	movzwl (%rsi),%ecx
  433185:	e9 22 fa ff ff       	jmpq   432bac <_dopr.constprop.0+0x82c>
  43318a:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  43318f:	8b 0e                	mov    (%rsi),%ecx
  433191:	48 89 f7             	mov    %rsi,%rdi
  433194:	83 f9 2f             	cmp    $0x2f,%ecx
  433197:	77 b7                	ja     433150 <_dopr.constprop.0+0xdd0>
  433199:	89 ce                	mov    %ecx,%esi
  43319b:	83 c1 08             	add    $0x8,%ecx
  43319e:	48 03 77 10          	add    0x10(%rdi),%rsi
  4331a2:	89 0f                	mov    %ecx,(%rdi)
  4331a4:	eb b6                	jmp    43315c <_dopr.constprop.0+0xddc>
  4331a6:	49 8b 75 00          	mov    0x0(%r13),%rsi
  4331aa:	48 85 f6             	test   %rsi,%rsi
  4331ad:	0f 84 e3 f5 ff ff    	je     432796 <_dopr.constprop.0+0x416>
  4331b3:	4c 8d 4b 01          	lea    0x1(%rbx),%r9
  4331b7:	83 e8 01             	sub    $0x1,%eax
  4331ba:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
  4331bf:	44 88 3c 1e          	mov    %r15b,(%rsi,%rbx,1)
  4331c3:	48 8b 5c 24 48       	mov    0x48(%rsp),%rbx
  4331c8:	49 8b 2b             	mov    (%r11),%rbp
  4331cb:	0f 85 95 fe ff ff    	jne    433066 <_dopr.constprop.0+0xce6>
  4331d1:	31 c0                	xor    %eax,%eax
  4331d3:	e9 18 f5 ff ff       	jmpq   4326f0 <_dopr.constprop.0+0x370>
  4331d8:	c7 44 24 28 01 00 00 	movl   $0x1,0x28(%rsp)
  4331df:	00 
  4331e0:	c6 44 24 2c 01       	movb   $0x1,0x2c(%rsp)
  4331e5:	41 bf 2b 00 00 00    	mov    $0x2b,%r15d
  4331eb:	e9 0a f3 ff ff       	jmpq   4324fa <_dopr.constprop.0+0x17a>
  4331f0:	66 0f 57 05 88 df 01 	xorpd  0x1df88(%rip),%xmm0        # 451180 <Hex+0x7a0>
  4331f7:	00 
  4331f8:	41 bf 2d 00 00 00    	mov    $0x2d,%r15d
  4331fe:	c7 44 24 28 01 00 00 	movl   $0x1,0x28(%rsp)
  433205:	00 
  433206:	c6 44 24 2c 01       	movb   $0x1,0x2c(%rsp)
  43320b:	e9 ea f2 ff ff       	jmpq   4324fa <_dopr.constprop.0+0x17a>
  433210:	8b 00                	mov    (%rax),%eax
  433212:	83 f8 2f             	cmp    $0x2f,%eax
  433215:	0f 87 02 01 00 00    	ja     43331d <_dopr.constprop.0+0xf9d>
  43321b:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  433220:	89 c2                	mov    %eax,%edx
  433222:	83 c0 08             	add    $0x8,%eax
  433225:	48 03 57 10          	add    0x10(%rdi),%rdx
  433229:	89 07                	mov    %eax,(%rdi)
  43322b:	48 8b 02             	mov    (%rdx),%rax
  43322e:	66 89 18             	mov    %bx,(%rax)
  433231:	4c 89 e0             	mov    %r12,%rax
  433234:	e9 92 f8 ff ff       	jmpq   432acb <_dopr.constprop.0+0x74b>
  433239:	3d af 00 00 00       	cmp    $0xaf,%eax
  43323e:	0f 87 4c f2 ff ff    	ja     432490 <_dopr.constprop.0+0x110>
  433244:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  433249:	89 c1                	mov    %eax,%ecx
  43324b:	83 c0 10             	add    $0x10,%eax
  43324e:	48 03 4e 10          	add    0x10(%rsi),%rcx
  433252:	89 46 04             	mov    %eax,0x4(%rsi)
  433255:	e9 47 f2 ff ff       	jmpq   4324a1 <_dopr.constprop.0+0x121>
  43325a:	83 f8 2f             	cmp    $0x2f,%eax
  43325d:	0f 87 25 01 00 00    	ja     433388 <_dopr.constprop.0+0x1008>
  433263:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  433268:	89 c1                	mov    %eax,%ecx
  43326a:	83 c0 08             	add    $0x8,%eax
  43326d:	48 03 4e 10          	add    0x10(%rsi),%rcx
  433271:	89 06                	mov    %eax,(%rsi)
  433273:	48 0f bf 09          	movswq (%rcx),%rcx
  433277:	e9 d0 fb ff ff       	jmpq   432e4c <_dopr.constprop.0+0xacc>
  43327c:	48 8b 76 08          	mov    0x8(%rsi),%rsi
  433280:	48 8d 4e 08          	lea    0x8(%rsi),%rcx
  433284:	48 89 4f 08          	mov    %rcx,0x8(%rdi)
  433288:	e9 f5 fe ff ff       	jmpq   433182 <_dopr.constprop.0+0xe02>
  43328d:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  433292:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
  433296:	48 8d 41 08          	lea    0x8(%rcx),%rax
  43329a:	48 89 46 08          	mov    %rax,0x8(%rsi)
  43329e:	e9 b9 fc ff ff       	jmpq   432f5c <_dopr.constprop.0+0xbdc>
  4332a3:	8b 10                	mov    (%rax),%edx
  4332a5:	83 fa 2f             	cmp    $0x2f,%edx
  4332a8:	0f 87 f0 00 00 00    	ja     43339e <_dopr.constprop.0+0x101e>
  4332ae:	48 89 c6             	mov    %rax,%rsi
  4332b1:	89 d0                	mov    %edx,%eax
  4332b3:	83 c2 08             	add    $0x8,%edx
  4332b6:	48 03 46 10          	add    0x10(%rsi),%rax
  4332ba:	89 16                	mov    %edx,(%rsi)
  4332bc:	e9 cc fc ff ff       	jmpq   432f8d <_dopr.constprop.0+0xc0d>
  4332c1:	c6 44 24 2c 00       	movb   $0x0,0x2c(%rsp)
  4332c6:	45 31 ff             	xor    %r15d,%r15d
  4332c9:	e9 2c f2 ff ff       	jmpq   4324fa <_dopr.constprop.0+0x17a>
  4332ce:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
  4332d3:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  4332d7:	48 8d 42 08          	lea    0x8(%rdx),%rax
  4332db:	48 89 47 08          	mov    %rax,0x8(%rdi)
  4332df:	e9 b7 f9 ff ff       	jmpq   432c9b <_dopr.constprop.0+0x91b>
  4332e4:	45 85 ff             	test   %r15d,%r15d
  4332e7:	0f 84 03 f4 ff ff    	je     4326f0 <_dopr.constprop.0+0x370>
  4332ed:	48 39 eb             	cmp    %rbp,%rbx
  4332f0:	0f 83 fa f3 ff ff    	jae    4326f0 <_dopr.constprop.0+0x370>
  4332f6:	49 8b 75 00          	mov    0x0(%r13),%rsi
  4332fa:	48 85 f6             	test   %rsi,%rsi
  4332fd:	0f 84 93 f4 ff ff    	je     432796 <_dopr.constprop.0+0x416>
  433303:	4c 8d 4b 01          	lea    0x1(%rbx),%r9
  433307:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
  43330c:	44 88 3c 1e          	mov    %r15b,(%rsi,%rbx,1)
  433310:	48 8b 5c 24 48       	mov    0x48(%rsp),%rbx
  433315:	49 8b 2b             	mov    (%r11),%rbp
  433318:	e9 d3 f3 ff ff       	jmpq   4326f0 <_dopr.constprop.0+0x370>
  43331d:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  433322:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  433326:	48 8d 42 08          	lea    0x8(%rdx),%rax
  43332a:	48 89 46 08          	mov    %rax,0x8(%rsi)
  43332e:	e9 f8 fe ff ff       	jmpq   43322b <_dopr.constprop.0+0xeab>
  433333:	85 c0                	test   %eax,%eax
  433335:	7f 23                	jg     43335a <_dopr.constprop.0+0xfda>
  433337:	e9 a6 f3 ff ff       	jmpq   4326e2 <_dopr.constprop.0+0x362>
  43333c:	0f 1f 40 00          	nopl   0x0(%rax)
  433340:	4c 8d 4b 01          	lea    0x1(%rbx),%r9
  433344:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
  433349:	c6 04 1e 20          	movb   $0x20,(%rsi,%rbx,1)
  43334d:	48 8b 5c 24 48       	mov    0x48(%rsp),%rbx
  433352:	49 8b 2b             	mov    (%r11),%rbp
  433355:	83 e8 01             	sub    $0x1,%eax
  433358:	74 8a                	je     4332e4 <_dopr.constprop.0+0xf64>
  43335a:	48 39 eb             	cmp    %rbp,%rbx
  43335d:	73 f6                	jae    433355 <_dopr.constprop.0+0xfd5>
  43335f:	49 8b 75 00          	mov    0x0(%r13),%rsi
  433363:	48 85 f6             	test   %rsi,%rsi
  433366:	75 d8                	jne    433340 <_dopr.constprop.0+0xfc0>
  433368:	48 8b 04 25 00 00 00 	mov    0x0,%rax
  43336f:	00 
  433370:	0f 0b                	ud2    
  433372:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  433377:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
  43337b:	48 8d 41 08          	lea    0x8(%rcx),%rax
  43337f:	48 89 46 08          	mov    %rax,0x8(%rsi)
  433383:	e9 c1 fa ff ff       	jmpq   432e49 <_dopr.constprop.0+0xac9>
  433388:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  43338d:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
  433391:	48 8d 41 08          	lea    0x8(%rcx),%rax
  433395:	48 89 46 08          	mov    %rax,0x8(%rsi)
  433399:	e9 d5 fe ff ff       	jmpq   433273 <_dopr.constprop.0+0xef3>
  43339e:	48 89 c7             	mov    %rax,%rdi
  4333a1:	48 8b 40 08          	mov    0x8(%rax),%rax
  4333a5:	48 8d 50 08          	lea    0x8(%rax),%rdx
  4333a9:	48 89 57 08          	mov    %rdx,0x8(%rdi)
  4333ad:	e9 db fb ff ff       	jmpq   432f8d <_dopr.constprop.0+0xc0d>
  4333b2:	31 c0                	xor    %eax,%eax
  4333b4:	e9 c3 fc ff ff       	jmpq   43307c <_dopr.constprop.0+0xcfc>
  4333b9:	45 31 c0             	xor    %r8d,%r8d
  4333bc:	e9 75 f9 ff ff       	jmpq   432d36 <_dopr.constprop.0+0x9b6>
  4333c1:	b8 01 00 00 00       	mov    $0x1,%eax
  4333c6:	f2 0f 10 0d a2 dd 01 	movsd  0x1dda2(%rip),%xmm1        # 451170 <Hex+0x790>
  4333cd:	00 
  4333ce:	e9 dd f1 ff ff       	jmpq   4325b0 <_dopr.constprop.0+0x230>
  4333d3:	f2 0f 10 0d 55 dd 01 	movsd  0x1dd55(%rip),%xmm1        # 451130 <Hex+0x750>
  4333da:	00 
  4333db:	e9 77 f1 ff ff       	jmpq   432557 <_dopr.constprop.0+0x1d7>
  4333e0:	f2 0f 10 0d 80 dd 01 	movsd  0x1dd80(%rip),%xmm1        # 451168 <Hex+0x788>
  4333e7:	00 
  4333e8:	e9 6a f1 ff ff       	jmpq   432557 <_dopr.constprop.0+0x1d7>
  4333ed:	f2 0f 10 0d 6b dd 01 	movsd  0x1dd6b(%rip),%xmm1        # 451160 <Hex+0x780>
  4333f4:	00 
  4333f5:	e9 5d f1 ff ff       	jmpq   432557 <_dopr.constprop.0+0x1d7>
  4333fa:	f2 0f 10 0d 56 dd 01 	movsd  0x1dd56(%rip),%xmm1        # 451158 <Hex+0x778>
  433401:	00 
  433402:	e9 50 f1 ff ff       	jmpq   432557 <_dopr.constprop.0+0x1d7>
  433407:	f2 0f 10 0d 41 dd 01 	movsd  0x1dd41(%rip),%xmm1        # 451150 <Hex+0x770>
  43340e:	00 
  43340f:	e9 43 f1 ff ff       	jmpq   432557 <_dopr.constprop.0+0x1d7>
  433414:	f2 0f 10 0d 2c dd 01 	movsd  0x1dd2c(%rip),%xmm1        # 451148 <Hex+0x768>
  43341b:	00 
  43341c:	e9 36 f1 ff ff       	jmpq   432557 <_dopr.constprop.0+0x1d7>
  433421:	f2 0f 10 0d 17 dd 01 	movsd  0x1dd17(%rip),%xmm1        # 451140 <Hex+0x760>
  433428:	00 
  433429:	e9 29 f1 ff ff       	jmpq   432557 <_dopr.constprop.0+0x1d7>
  43342e:	f2 0f 10 0d 02 dd 01 	movsd  0x1dd02(%rip),%xmm1        # 451138 <Hex+0x758>
  433435:	00 
  433436:	e9 1c f1 ff ff       	jmpq   432557 <_dopr.constprop.0+0x1d7>
  43343b:	f2 0f 10 0d 25 dd 01 	movsd  0x1dd25(%rip),%xmm1        # 451168 <Hex+0x788>
  433442:	00 
  433443:	e9 68 f1 ff ff       	jmpq   4325b0 <_dopr.constprop.0+0x230>
  433448:	f2 0f 10 0d 10 dd 01 	movsd  0x1dd10(%rip),%xmm1        # 451160 <Hex+0x780>
  43344f:	00 
  433450:	e9 5b f1 ff ff       	jmpq   4325b0 <_dopr.constprop.0+0x230>
  433455:	f2 0f 10 0d fb dc 01 	movsd  0x1dcfb(%rip),%xmm1        # 451158 <Hex+0x778>
  43345c:	00 
  43345d:	e9 4e f1 ff ff       	jmpq   4325b0 <_dopr.constprop.0+0x230>
  433462:	f2 0f 10 0d e6 dc 01 	movsd  0x1dce6(%rip),%xmm1        # 451150 <Hex+0x770>
  433469:	00 
  43346a:	e9 41 f1 ff ff       	jmpq   4325b0 <_dopr.constprop.0+0x230>
  43346f:	f2 0f 10 0d d1 dc 01 	movsd  0x1dcd1(%rip),%xmm1        # 451148 <Hex+0x768>
  433476:	00 
  433477:	e9 34 f1 ff ff       	jmpq   4325b0 <_dopr.constprop.0+0x230>
  43347c:	f2 0f 10 0d bc dc 01 	movsd  0x1dcbc(%rip),%xmm1        # 451140 <Hex+0x760>
  433483:	00 
  433484:	e9 27 f1 ff ff       	jmpq   4325b0 <_dopr.constprop.0+0x230>
  433489:	f2 0f 10 0d a7 dc 01 	movsd  0x1dca7(%rip),%xmm1        # 451138 <Hex+0x758>
  433490:	00 
  433491:	e9 1a f1 ff ff       	jmpq   4325b0 <_dopr.constprop.0+0x230>
  433496:	48 89 c6             	mov    %rax,%rsi
  433499:	48 8b 40 08          	mov    0x8(%rax),%rax
  43349d:	48 8d 50 08          	lea    0x8(%rax),%rdx
  4334a1:	48 89 56 08          	mov    %rdx,0x8(%rsi)
  4334a5:	e9 e3 fa ff ff       	jmpq   432f8d <_dopr.constprop.0+0xc0d>
  4334aa:	e8 11 3a fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  4334af:	c7 44 24 28 01 00 00 	movl   $0x1,0x28(%rsp)
  4334b6:	00 
  4334b7:	c6 44 24 2c 01       	movb   $0x1,0x2c(%rsp)
  4334bc:	41 bf 2d 00 00 00    	mov    $0x2d,%r15d
  4334c2:	e9 33 f0 ff ff       	jmpq   4324fa <_dopr.constprop.0+0x17a>
  4334c7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4334ce:	00 00 

00000000004334d0 <BIO_vprintf>:
  4334d0:	41 57                	push   %r15
  4334d2:	41 56                	push   %r14
  4334d4:	45 31 ff             	xor    %r15d,%r15d
  4334d7:	41 55                	push   %r13
  4334d9:	41 54                	push   %r12
  4334db:	45 31 ed             	xor    %r13d,%r13d
  4334de:	55                   	push   %rbp
  4334df:	53                   	push   %rbx
  4334e0:	48 89 f5             	mov    %rsi,%rbp
  4334e3:	be 2a 0a 45 00       	mov    $0x450a2a,%esi
  4334e8:	48 8d 5d 01          	lea    0x1(%rbp),%rbx
  4334ec:	41 bc ff ff ff ff    	mov    $0xffffffff,%r12d
  4334f2:	48 81 ec 98 08 00 00 	sub    $0x898,%rsp
  4334f9:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  433500:	00 00 
  433502:	48 89 84 24 88 08 00 	mov    %rax,0x888(%rsp)
  433509:	00 
  43350a:	31 c0                	xor    %eax,%eax
  43350c:	48 8d 84 24 80 00 00 	lea    0x80(%rsp),%rax
  433513:	00 
  433514:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  433519:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  43351e:	bf 60 0a 45 00       	mov    $0x450a60,%edi
  433523:	ba 1a 03 00 00       	mov    $0x31a,%edx
  433528:	48 c7 44 24 28 00 08 	movq   $0x800,0x28(%rsp)
  43352f:	00 00 
  433531:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  433536:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
  43353d:	00 00 
  43353f:	e8 0c 63 ff ff       	callq  429850 <CRYPTO_push_info_>
  433544:	44 0f be 75 00       	movsbl 0x0(%rbp),%r14d
  433549:	48 c7 44 24 38 00 00 	movq   $0x0,0x38(%rsp)
  433550:	00 00 
  433552:	31 ed                	xor    %ebp,%ebp
  433554:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%rsp)
  43355b:	00 
  43355c:	0f 1f 40 00          	nopl   0x0(%rax)
  433560:	45 84 f6             	test   %r14b,%r14b
  433563:	0f 85 97 00 00 00    	jne    433600 <BIO_vprintf+0x130>
  433569:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  43356e:	48 83 e8 01          	sub    $0x1,%rax
  433572:	48 3b 44 24 38       	cmp    0x38(%rsp),%rax
  433577:	73 05                	jae    43357e <BIO_vprintf+0xae>
  433579:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  43357e:	48 8d 54 24 38       	lea    0x38(%rsp),%rdx
  433583:	48 8d 74 24 30       	lea    0x30(%rsp),%rsi
  433588:	48 8d 4c 24 28       	lea    0x28(%rsp),%rcx
  43358d:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  433592:	45 31 c0             	xor    %r8d,%r8d
  433595:	e8 56 e3 ff ff       	callq  4318f0 <doapr_outch>
  43359a:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  43359f:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  4335a4:	48 85 f6             	test   %rsi,%rsi
  4335a7:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  4335ab:	0f 84 cf 03 00 00    	je     433980 <BIO_vprintf+0x4b0>
  4335b1:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  4335b6:	e8 05 cc ff ff       	callq  4301c0 <BIO_write>
  4335bb:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
  4335c0:	89 c3                	mov    %eax,%ebx
  4335c2:	e8 99 21 ff ff       	callq  425760 <CRYPTO_free>
  4335c7:	e8 74 64 ff ff       	callq  429a40 <CRYPTO_pop_info>
  4335cc:	89 d8                	mov    %ebx,%eax
  4335ce:	48 8b 9c 24 88 08 00 	mov    0x888(%rsp),%rbx
  4335d5:	00 
  4335d6:	64 48 33 1c 25 28 00 	xor    %fs:0x28,%rbx
  4335dd:	00 00 
  4335df:	0f 85 3f 0e 00 00    	jne    434424 <BIO_vprintf+0xf54>
  4335e5:	48 81 c4 98 08 00 00 	add    $0x898,%rsp
  4335ec:	5b                   	pop    %rbx
  4335ed:	5d                   	pop    %rbp
  4335ee:	41 5c                	pop    %r12
  4335f0:	41 5d                	pop    %r13
  4335f2:	41 5e                	pop    %r14
  4335f4:	41 5f                	pop    %r15
  4335f6:	c3                   	retq   
  4335f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4335fe:	00 00 
  433600:	41 83 ff 06          	cmp    $0x6,%r15d
  433604:	0f 87 d5 01 00 00    	ja     4337df <BIO_vprintf+0x30f>
  43360a:	44 89 f8             	mov    %r15d,%eax
  43360d:	ff 24 c5 c8 0d 45 00 	jmpq   *0x450dc8(,%rax,8)
  433614:	0f 1f 40 00          	nopl   0x0(%rax)
  433618:	41 80 fe 68          	cmp    $0x68,%r14b
  43361c:	0f 84 3e 03 00 00    	je     433960 <BIO_vprintf+0x490>
  433622:	0f 8e 08 03 00 00    	jle    433930 <BIO_vprintf+0x460>
  433628:	41 80 fe 6c          	cmp    $0x6c,%r14b
  43362c:	0f 84 66 02 00 00    	je     433898 <BIO_vprintf+0x3c8>
  433632:	41 80 fe 71          	cmp    $0x71,%r14b
  433636:	0f 85 14 03 00 00    	jne    433950 <BIO_vprintf+0x480>
  43363c:	44 0f be 33          	movsbl (%rbx),%r14d
  433640:	41 bd 04 00 00 00    	mov    $0x4,%r13d
  433646:	48 83 c3 01          	add    $0x1,%rbx
  43364a:	41 bf 06 00 00 00    	mov    $0x6,%r15d
  433650:	e9 0b ff ff ff       	jmpq   433560 <BIO_vprintf+0x90>
  433655:	0f 1f 00             	nopl   (%rax)
  433658:	e8 b3 37 fd ff       	callq  406e10 <__ctype_b_loc@plt>
  43365d:	48 8b 08             	mov    (%rax),%rcx
  433660:	41 0f b6 d6          	movzbl %r14b,%edx
  433664:	f6 44 51 01 08       	testb  $0x8,0x1(%rcx,%rdx,2)
  433669:	0f 84 81 01 00 00    	je     4337f0 <BIO_vprintf+0x320>
  43366f:	45 85 e4             	test   %r12d,%r12d
  433672:	b8 00 00 00 00       	mov    $0x0,%eax
  433677:	44 0f 48 e0          	cmovs  %eax,%r12d
  43367b:	48 83 c3 01          	add    $0x1,%rbx
  43367f:	43 8d 04 a4          	lea    (%r12,%r12,4),%eax
  433683:	45 8d 64 46 d0       	lea    -0x30(%r14,%rax,2),%r12d
  433688:	44 0f be 73 ff       	movsbl -0x1(%rbx),%r14d
  43368d:	e9 ce fe ff ff       	jmpq   433560 <BIO_vprintf+0x90>
  433692:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  433698:	41 80 fe 2e          	cmp    $0x2e,%r14b
  43369c:	41 bf 05 00 00 00    	mov    $0x5,%r15d
  4336a2:	0f 85 b8 fe ff ff    	jne    433560 <BIO_vprintf+0x90>
  4336a8:	44 0f be 33          	movsbl (%rbx),%r14d
  4336ac:	41 b7 04             	mov    $0x4,%r15b
  4336af:	48 83 c3 01          	add    $0x1,%rbx
  4336b3:	e9 a8 fe ff ff       	jmpq   433560 <BIO_vprintf+0x90>
  4336b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4336bf:	00 
  4336c0:	e8 4b 37 fd ff       	callq  406e10 <__ctype_b_loc@plt>
  4336c5:	48 8b 08             	mov    (%rax),%rcx
  4336c8:	41 0f b6 d6          	movzbl %r14b,%edx
  4336cc:	f6 44 51 01 08       	testb  $0x8,0x1(%rcx,%rdx,2)
  4336d1:	0f 84 69 01 00 00    	je     433840 <BIO_vprintf+0x370>
  4336d7:	8d 44 ad 00          	lea    0x0(%rbp,%rbp,4),%eax
  4336db:	48 83 c3 01          	add    $0x1,%rbx
  4336df:	41 8d 6c 46 d0       	lea    -0x30(%r14,%rax,2),%ebp
  4336e4:	44 0f be 73 ff       	movsbl -0x1(%rbx),%r14d
  4336e9:	e9 72 fe ff ff       	jmpq   433560 <BIO_vprintf+0x90>
  4336ee:	66 90                	xchg   %ax,%ax
  4336f0:	41 8d 46 e0          	lea    -0x20(%r14),%eax
  4336f4:	3c 10                	cmp    $0x10,%al
  4336f6:	0f 87 cc 02 00 00    	ja     4339c8 <BIO_vprintf+0x4f8>
  4336fc:	0f b6 c0             	movzbl %al,%eax
  4336ff:	ff 24 c5 00 0e 45 00 	jmpq   *0x450e00(,%rax,8)
  433706:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  43370d:	00 00 00 
  433710:	41 8d 46 db          	lea    -0x25(%r14),%eax
  433714:	3c 53                	cmp    $0x53,%al
  433716:	0f 87 a0 00 00 00    	ja     4337bc <BIO_vprintf+0x2ec>
  43371c:	0f b6 c0             	movzbl %al,%eax
  43371f:	ff 24 c5 88 0e 45 00 	jmpq   *0x450e88(,%rax,8)
  433726:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  43372d:	00 00 00 
  433730:	41 80 fe 25          	cmp    $0x25,%r14b
  433734:	0f 84 4e 01 00 00    	je     433888 <BIO_vprintf+0x3b8>
  43373a:	48 8d 4c 24 28       	lea    0x28(%rsp),%rcx
  43373f:	48 8d 54 24 38       	lea    0x38(%rsp),%rdx
  433744:	48 8d 74 24 30       	lea    0x30(%rsp),%rsi
  433749:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  43374e:	45 0f be c6          	movsbl %r14b,%r8d
  433752:	e8 99 e1 ff ff       	callq  4318f0 <doapr_outch>
  433757:	44 0f be 33          	movsbl (%rbx),%r14d
  43375b:	48 83 c3 01          	add    $0x1,%rbx
  43375f:	e9 fc fd ff ff       	jmpq   433560 <BIO_vprintf+0x90>
  433764:	83 fa 2f             	cmp    $0x2f,%edx
  433767:	0f 87 b2 08 00 00    	ja     43401f <BIO_vprintf+0xb4f>
  43376d:	89 d1                	mov    %edx,%ecx
  43376f:	48 03 4f 10          	add    0x10(%rdi),%rcx
  433773:	83 c2 08             	add    $0x8,%edx
  433776:	89 17                	mov    %edx,(%rdi)
  433778:	4c 8b 01             	mov    (%rcx),%r8
  43377b:	41 80 fe 6f          	cmp    $0x6f,%r14b
  43377f:	41 b9 08 00 00 00    	mov    $0x8,%r9d
  433785:	74 10                	je     433797 <BIO_vprintf+0x2c7>
  433787:	41 80 fe 75          	cmp    $0x75,%r14b
  43378b:	41 b1 10             	mov    $0x10,%r9b
  43378e:	ba 0a 00 00 00       	mov    $0xa,%edx
  433793:	44 0f 44 ca          	cmove  %edx,%r9d
  433797:	48 83 ec 08          	sub    $0x8,%rsp
  43379b:	50                   	push   %rax
  43379c:	41 54                	push   %r12
  43379e:	55                   	push   %rbp
  43379f:	48 8d 4c 24 48       	lea    0x48(%rsp),%rcx
  4337a4:	48 8d 54 24 58       	lea    0x58(%rsp),%rdx
  4337a9:	48 8d 74 24 50       	lea    0x50(%rsp),%rsi
  4337ae:	48 8d 7c 24 40       	lea    0x40(%rsp),%rdi
  4337b3:	e8 38 e3 ff ff       	callq  431af0 <fmtint>
  4337b8:	48 83 c4 20          	add    $0x20,%rsp
  4337bc:	44 0f be 33          	movsbl (%rbx),%r14d
  4337c0:	45 31 ed             	xor    %r13d,%r13d
  4337c3:	48 83 c3 01          	add    $0x1,%rbx
  4337c7:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%rsp)
  4337ce:	00 
  4337cf:	45 31 ff             	xor    %r15d,%r15d
  4337d2:	41 bc ff ff ff ff    	mov    $0xffffffff,%r12d
  4337d8:	31 ed                	xor    %ebp,%ebp
  4337da:	e9 81 fd ff ff       	jmpq   433560 <BIO_vprintf+0x90>
  4337df:	41 83 ff 07          	cmp    $0x7,%r15d
  4337e3:	0f 85 77 fd ff ff    	jne    433560 <BIO_vprintf+0x90>
  4337e9:	e9 7b fd ff ff       	jmpq   433569 <BIO_vprintf+0x99>
  4337ee:	66 90                	xchg   %ax,%ax
  4337f0:	41 80 fe 2a          	cmp    $0x2a,%r14b
  4337f4:	41 bf 05 00 00 00    	mov    $0x5,%r15d
  4337fa:	0f 85 60 fd ff ff    	jne    433560 <BIO_vprintf+0x90>
  433800:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  433805:	8b 00                	mov    (%rax),%eax
  433807:	83 f8 2f             	cmp    $0x2f,%eax
  43380a:	0f 87 e3 07 00 00    	ja     433ff3 <BIO_vprintf+0xb23>
  433810:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  433815:	89 c2                	mov    %eax,%edx
  433817:	83 c0 08             	add    $0x8,%eax
  43381a:	48 03 57 10          	add    0x10(%rdi),%rdx
  43381e:	89 07                	mov    %eax,(%rdi)
  433820:	44 0f be 33          	movsbl (%rbx),%r14d
  433824:	44 8b 22             	mov    (%rdx),%r12d
  433827:	48 83 c3 01          	add    $0x1,%rbx
  43382b:	41 bf 05 00 00 00    	mov    $0x5,%r15d
  433831:	e9 2a fd ff ff       	jmpq   433560 <BIO_vprintf+0x90>
  433836:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  43383d:	00 00 00 
  433840:	41 80 fe 2a          	cmp    $0x2a,%r14b
  433844:	41 bf 03 00 00 00    	mov    $0x3,%r15d
  43384a:	0f 85 10 fd ff ff    	jne    433560 <BIO_vprintf+0x90>
  433850:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  433855:	8b 00                	mov    (%rax),%eax
  433857:	83 f8 2f             	cmp    $0x2f,%eax
  43385a:	0f 87 a9 07 00 00    	ja     434009 <BIO_vprintf+0xb39>
  433860:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  433865:	89 c2                	mov    %eax,%edx
  433867:	83 c0 08             	add    $0x8,%eax
  43386a:	48 03 57 10          	add    0x10(%rdi),%rdx
  43386e:	89 07                	mov    %eax,(%rdi)
  433870:	44 0f be 33          	movsbl (%rbx),%r14d
  433874:	8b 2a                	mov    (%rdx),%ebp
  433876:	48 83 c3 01          	add    $0x1,%rbx
  43387a:	41 bf 03 00 00 00    	mov    $0x3,%r15d
  433880:	e9 db fc ff ff       	jmpq   433560 <BIO_vprintf+0x90>
  433885:	0f 1f 00             	nopl   (%rax)
  433888:	41 bf 01 00 00 00    	mov    $0x1,%r15d
  43388e:	e9 c4 fe ff ff       	jmpq   433757 <BIO_vprintf+0x287>
  433893:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  433898:	44 0f be 33          	movsbl (%rbx),%r14d
  43389c:	41 bd 02 00 00 00    	mov    $0x2,%r13d
  4338a2:	41 80 fe 6c          	cmp    $0x6c,%r14b
  4338a6:	0f 84 27 07 00 00    	je     433fd3 <BIO_vprintf+0xb03>
  4338ac:	48 83 c3 01          	add    $0x1,%rbx
  4338b0:	41 bf 06 00 00 00    	mov    $0x6,%r15d
  4338b6:	e9 a5 fc ff ff       	jmpq   433560 <BIO_vprintf+0x90>
  4338bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4338c0:	44 0f be 33          	movsbl (%rbx),%r14d
  4338c4:	83 4c 24 18 10       	orl    $0x10,0x18(%rsp)
  4338c9:	48 83 c3 01          	add    $0x1,%rbx
  4338cd:	e9 8e fc ff ff       	jmpq   433560 <BIO_vprintf+0x90>
  4338d2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  4338d8:	44 0f be 33          	movsbl (%rbx),%r14d
  4338dc:	83 4c 24 18 08       	orl    $0x8,0x18(%rsp)
  4338e1:	48 83 c3 01          	add    $0x1,%rbx
  4338e5:	e9 76 fc ff ff       	jmpq   433560 <BIO_vprintf+0x90>
  4338ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  4338f0:	44 0f be 33          	movsbl (%rbx),%r14d
  4338f4:	83 4c 24 18 04       	orl    $0x4,0x18(%rsp)
  4338f9:	48 83 c3 01          	add    $0x1,%rbx
  4338fd:	e9 5e fc ff ff       	jmpq   433560 <BIO_vprintf+0x90>
  433902:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  433908:	83 4c 24 18 01       	orl    $0x1,0x18(%rsp)
  43390d:	e9 45 fe ff ff       	jmpq   433757 <BIO_vprintf+0x287>
  433912:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  433918:	44 0f be 33          	movsbl (%rbx),%r14d
  43391c:	83 4c 24 18 02       	orl    $0x2,0x18(%rsp)
  433921:	48 83 c3 01          	add    $0x1,%rbx
  433925:	e9 36 fc ff ff       	jmpq   433560 <BIO_vprintf+0x90>
  43392a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  433930:	41 80 fe 4c          	cmp    $0x4c,%r14b
  433934:	75 1a                	jne    433950 <BIO_vprintf+0x480>
  433936:	44 0f be 33          	movsbl (%rbx),%r14d
  43393a:	41 bd 03 00 00 00    	mov    $0x3,%r13d
  433940:	48 83 c3 01          	add    $0x1,%rbx
  433944:	41 bf 06 00 00 00    	mov    $0x6,%r15d
  43394a:	e9 11 fc ff ff       	jmpq   433560 <BIO_vprintf+0x90>
  43394f:	90                   	nop
  433950:	41 bf 06 00 00 00    	mov    $0x6,%r15d
  433956:	e9 05 fc ff ff       	jmpq   433560 <BIO_vprintf+0x90>
  43395b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  433960:	44 0f be 33          	movsbl (%rbx),%r14d
  433964:	41 bd 01 00 00 00    	mov    $0x1,%r13d
  43396a:	48 83 c3 01          	add    $0x1,%rbx
  43396e:	41 bf 06 00 00 00    	mov    $0x6,%r15d
  433974:	e9 e7 fb ff ff       	jmpq   433560 <BIO_vprintf+0x90>
  433979:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  433980:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  433985:	48 8d b4 24 80 00 00 	lea    0x80(%rsp),%rsi
  43398c:	00 
  43398d:	e8 2e c8 ff ff       	callq  4301c0 <BIO_write>
  433992:	89 c3                	mov    %eax,%ebx
  433994:	e9 2e fc ff ff       	jmpq   4335c7 <BIO_vprintf+0xf7>
  433999:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  4339a0:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  4339a5:	8b 40 04             	mov    0x4(%rax),%eax
  4339a8:	3d af 00 00 00       	cmp    $0xaf,%eax
  4339ad:	0f 87 31 06 00 00    	ja     433fe4 <BIO_vprintf+0xb14>
  4339b3:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  4339b8:	83 c0 10             	add    $0x10,%eax
  4339bb:	89 47 04             	mov    %eax,0x4(%rdi)
  4339be:	e9 f9 fd ff ff       	jmpq   4337bc <BIO_vprintf+0x2ec>
  4339c3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4339c8:	41 bf 02 00 00 00    	mov    $0x2,%r15d
  4339ce:	e9 8d fb ff ff       	jmpq   433560 <BIO_vprintf+0x90>
  4339d3:	83 4c 24 18 20       	orl    $0x20,0x18(%rsp)
  4339d8:	8b 44 24 18          	mov    0x18(%rsp),%eax
  4339dc:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  4339e1:	83 c8 40             	or     $0x40,%eax
  4339e4:	41 83 fd 02          	cmp    $0x2,%r13d
  4339e8:	8b 17                	mov    (%rdi),%edx
  4339ea:	0f 84 74 fd ff ff    	je     433764 <BIO_vprintf+0x294>
  4339f0:	41 83 fd 04          	cmp    $0x4,%r13d
  4339f4:	0f 84 6a fd ff ff    	je     433764 <BIO_vprintf+0x294>
  4339fa:	41 83 fd 01          	cmp    $0x1,%r13d
  4339fe:	0f 84 99 07 00 00    	je     43419d <BIO_vprintf+0xccd>
  433a04:	83 fa 2f             	cmp    $0x2f,%edx
  433a07:	0f 87 9c 06 00 00    	ja     4340a9 <BIO_vprintf+0xbd9>
  433a0d:	89 d1                	mov    %edx,%ecx
  433a0f:	48 03 4f 10          	add    0x10(%rdi),%rcx
  433a13:	83 c2 08             	add    $0x8,%edx
  433a16:	89 17                	mov    %edx,(%rdi)
  433a18:	44 8b 01             	mov    (%rcx),%r8d
  433a1b:	e9 5b fd ff ff       	jmpq   43377b <BIO_vprintf+0x2ab>
  433a20:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  433a25:	41 83 fd 02          	cmp    $0x2,%r13d
  433a29:	8b 00                	mov    (%rax),%eax
  433a2b:	0f 84 57 06 00 00    	je     434088 <BIO_vprintf+0xbb8>
  433a31:	41 83 fd 04          	cmp    $0x4,%r13d
  433a35:	0f 84 4d 06 00 00    	je     434088 <BIO_vprintf+0xbb8>
  433a3b:	41 83 fd 01          	cmp    $0x1,%r13d
  433a3f:	0f 84 f0 07 00 00    	je     434235 <BIO_vprintf+0xd65>
  433a45:	83 f8 2f             	cmp    $0x2f,%eax
  433a48:	0f 87 c3 08 00 00    	ja     434311 <BIO_vprintf+0xe41>
  433a4e:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  433a53:	89 c2                	mov    %eax,%edx
  433a55:	83 c0 08             	add    $0x8,%eax
  433a58:	48 03 57 10          	add    0x10(%rdi),%rdx
  433a5c:	89 07                	mov    %eax,(%rdi)
  433a5e:	4c 63 02             	movslq (%rdx),%r8
  433a61:	48 83 ec 08          	sub    $0x8,%rsp
  433a65:	41 b9 0a 00 00 00    	mov    $0xa,%r9d
  433a6b:	8b 44 24 20          	mov    0x20(%rsp),%eax
  433a6f:	50                   	push   %rax
  433a70:	41 54                	push   %r12
  433a72:	55                   	push   %rbp
  433a73:	e9 27 fd ff ff       	jmpq   43379f <BIO_vprintf+0x2cf>
  433a78:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  433a7d:	8b 00                	mov    (%rax),%eax
  433a7f:	83 f8 2f             	cmp    $0x2f,%eax
  433a82:	0f 87 d4 05 00 00    	ja     43405c <BIO_vprintf+0xb8c>
  433a88:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  433a8d:	89 c2                	mov    %eax,%edx
  433a8f:	83 c0 08             	add    $0x8,%eax
  433a92:	48 03 57 10          	add    0x10(%rdi),%rdx
  433a96:	89 07                	mov    %eax,(%rdi)
  433a98:	48 83 ec 08          	sub    $0x8,%rsp
  433a9c:	41 b9 10 00 00 00    	mov    $0x10,%r9d
  433aa2:	8b 44 24 20          	mov    0x20(%rsp),%eax
  433aa6:	83 c8 08             	or     $0x8,%eax
  433aa9:	50                   	push   %rax
  433aaa:	41 54                	push   %r12
  433aac:	55                   	push   %rbp
  433aad:	4c 8b 02             	mov    (%rdx),%r8
  433ab0:	e9 ea fc ff ff       	jmpq   43379f <BIO_vprintf+0x2cf>
  433ab5:	41 83 fd 01          	cmp    $0x1,%r13d
  433ab9:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  433abe:	0f 84 17 07 00 00    	je     4341db <BIO_vprintf+0xd0b>
  433ac4:	41 83 fd 02          	cmp    $0x2,%r13d
  433ac8:	0f 84 ec 05 00 00    	je     4340ba <BIO_vprintf+0xbea>
  433ace:	41 83 fd 04          	cmp    $0x4,%r13d
  433ad2:	0f 84 e2 05 00 00    	je     4340ba <BIO_vprintf+0xbea>
  433ad8:	8b 00                	mov    (%rax),%eax
  433ada:	83 f8 2f             	cmp    $0x2f,%eax
  433add:	0f 87 9b 07 00 00    	ja     43427e <BIO_vprintf+0xdae>
  433ae3:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  433ae8:	89 c2                	mov    %eax,%edx
  433aea:	83 c0 08             	add    $0x8,%eax
  433aed:	48 03 57 10          	add    0x10(%rdi),%rdx
  433af1:	89 07                	mov    %eax,(%rdi)
  433af3:	48 8b 02             	mov    (%rdx),%rax
  433af6:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  433afb:	89 10                	mov    %edx,(%rax)
  433afd:	e9 ba fc ff ff       	jmpq   4337bc <BIO_vprintf+0x2ec>
  433b02:	48 83 c3 01          	add    $0x1,%rbx
  433b06:	e9 b1 fc ff ff       	jmpq   4337bc <BIO_vprintf+0x2ec>
  433b0b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  433b10:	8b 00                	mov    (%rax),%eax
  433b12:	83 f8 2f             	cmp    $0x2f,%eax
  433b15:	0f 87 2b 05 00 00    	ja     434046 <BIO_vprintf+0xb76>
  433b1b:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  433b20:	89 c2                	mov    %eax,%edx
  433b22:	83 c0 08             	add    $0x8,%eax
  433b25:	48 03 57 10          	add    0x10(%rdi),%rdx
  433b29:	89 07                	mov    %eax,(%rdi)
  433b2b:	41 83 fc 00          	cmp    $0x0,%r12d
  433b2f:	4c 8b 32             	mov    (%rdx),%r14
  433b32:	0f 8c ed 06 00 00    	jl     434225 <BIO_vprintf+0xd55>
  433b38:	0f 9f c1             	setg   %cl
  433b3b:	4d 85 f6             	test   %r14,%r14
  433b3e:	b8 59 0a 45 00       	mov    $0x450a59,%eax
  433b43:	4c 0f 44 f0          	cmove  %rax,%r14
  433b47:	45 0f be 06          	movsbl (%r14),%r8d
  433b4b:	45 84 c0             	test   %r8b,%r8b
  433b4e:	0f 84 dd 07 00 00    	je     434331 <BIO_vprintf+0xe61>
  433b54:	49 8d 46 01          	lea    0x1(%r14),%rax
  433b58:	31 d2                	xor    %edx,%edx
  433b5a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  433b60:	48 83 c0 01          	add    $0x1,%rax
  433b64:	83 c2 01             	add    $0x1,%edx
  433b67:	80 78 ff 00          	cmpb   $0x0,-0x1(%rax)
  433b6b:	75 f3                	jne    433b60 <BIO_vprintf+0x690>
  433b6d:	8b 74 24 18          	mov    0x18(%rsp),%esi
  433b71:	b8 00 00 00 00       	mov    $0x0,%eax
  433b76:	83 e6 01             	and    $0x1,%esi
  433b79:	29 d5                	sub    %edx,%ebp
  433b7b:	0f 49 c5             	cmovns %ebp,%eax
  433b7e:	31 ed                	xor    %ebp,%ebp
  433b80:	41 89 c5             	mov    %eax,%r13d
  433b83:	89 f0                	mov    %esi,%eax
  433b85:	f7 d8                	neg    %eax
  433b87:	44 31 e8             	xor    %r13d,%eax
  433b8a:	44 8d 2c 30          	lea    (%rax,%rsi,1),%r13d
  433b8e:	45 85 ed             	test   %r13d,%r13d
  433b91:	0f 8e 94 05 00 00    	jle    43412b <BIO_vprintf+0xc5b>
  433b97:	84 c9                	test   %cl,%cl
  433b99:	75 0a                	jne    433ba5 <BIO_vprintf+0x6d5>
  433b9b:	e9 8b 05 00 00       	jmpq   43412b <BIO_vprintf+0xc5b>
  433ba0:	45 85 ed             	test   %r13d,%r13d
  433ba3:	7e 28                	jle    433bcd <BIO_vprintf+0x6fd>
  433ba5:	48 8d 4c 24 28       	lea    0x28(%rsp),%rcx
  433baa:	48 8d 54 24 38       	lea    0x38(%rsp),%rdx
  433baf:	48 8d 74 24 30       	lea    0x30(%rsp),%rsi
  433bb4:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  433bb9:	83 c5 01             	add    $0x1,%ebp
  433bbc:	41 83 ed 01          	sub    $0x1,%r13d
  433bc0:	e8 2b de ff ff       	callq  4319f0 <doapr_outch.constprop.5>
  433bc5:	41 39 ec             	cmp    %ebp,%r12d
  433bc8:	0f 9f c0             	setg   %al
  433bcb:	7f d3                	jg     433ba0 <BIO_vprintf+0x6d0>
  433bcd:	45 0f be 06          	movsbl (%r14),%r8d
  433bd1:	45 84 c0             	test   %r8b,%r8b
  433bd4:	0f 84 e2 fb ff ff    	je     4337bc <BIO_vprintf+0x2ec>
  433bda:	84 c0                	test   %al,%al
  433bdc:	75 13                	jne    433bf1 <BIO_vprintf+0x721>
  433bde:	e9 d9 fb ff ff       	jmpq   4337bc <BIO_vprintf+0x2ec>
  433be3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  433be8:	45 84 c0             	test   %r8b,%r8b
  433beb:	0f 84 4f 05 00 00    	je     434140 <BIO_vprintf+0xc70>
  433bf1:	48 8d 4c 24 28       	lea    0x28(%rsp),%rcx
  433bf6:	48 8d 54 24 38       	lea    0x38(%rsp),%rdx
  433bfb:	48 8d 74 24 30       	lea    0x30(%rsp),%rsi
  433c00:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  433c05:	83 c5 01             	add    $0x1,%ebp
  433c08:	49 83 c6 01          	add    $0x1,%r14
  433c0c:	e8 df dc ff ff       	callq  4318f0 <doapr_outch>
  433c11:	41 39 ec             	cmp    %ebp,%r12d
  433c14:	45 0f be 06          	movsbl (%r14),%r8d
  433c18:	0f 9f c1             	setg   %cl
  433c1b:	7f cb                	jg     433be8 <BIO_vprintf+0x718>
  433c1d:	e9 9a fb ff ff       	jmpq   4337bc <BIO_vprintf+0x2ec>
  433c22:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  433c27:	8b 00                	mov    (%rax),%eax
  433c29:	83 f8 2f             	cmp    $0x2f,%eax
  433c2c:	0f 87 fe 03 00 00    	ja     434030 <BIO_vprintf+0xb60>
  433c32:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  433c37:	89 c2                	mov    %eax,%edx
  433c39:	83 c0 08             	add    $0x8,%eax
  433c3c:	48 03 57 10          	add    0x10(%rdi),%rdx
  433c40:	89 07                	mov    %eax,(%rdi)
  433c42:	44 8b 02             	mov    (%rdx),%r8d
  433c45:	eb 06                	jmp    433c4d <BIO_vprintf+0x77d>
  433c47:	41 b8 25 00 00 00    	mov    $0x25,%r8d
  433c4d:	48 8d 4c 24 28       	lea    0x28(%rsp),%rcx
  433c52:	48 8d 54 24 38       	lea    0x38(%rsp),%rdx
  433c57:	48 8d 74 24 30       	lea    0x30(%rsp),%rsi
  433c5c:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  433c61:	e8 8a dc ff ff       	callq  4318f0 <doapr_outch>
  433c66:	e9 51 fb ff ff       	jmpq   4337bc <BIO_vprintf+0x2ec>
  433c6b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  433c70:	8b 40 04             	mov    0x4(%rax),%eax
  433c73:	3d af 00 00 00       	cmp    $0xaf,%eax
  433c78:	0f 87 f4 03 00 00    	ja     434072 <BIO_vprintf+0xba2>
  433c7e:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  433c83:	89 c2                	mov    %eax,%edx
  433c85:	83 c0 10             	add    $0x10,%eax
  433c88:	48 03 57 10          	add    0x10(%rdi),%rdx
  433c8c:	89 47 04             	mov    %eax,0x4(%rdi)
  433c8f:	45 85 e4             	test   %r12d,%r12d
  433c92:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  433c96:	41 bd 06 00 00 00    	mov    $0x6,%r13d
  433c9c:	78 0b                	js     433ca9 <BIO_vprintf+0x7d9>
  433c9e:	41 83 fc 09          	cmp    $0x9,%r12d
  433ca2:	41 b5 09             	mov    $0x9,%r13b
  433ca5:	45 0f 4e ec          	cmovle %r12d,%r13d
  433ca9:	66 0f ef db          	pxor   %xmm3,%xmm3
  433cad:	66 0f 2e d8          	ucomisd %xmm0,%xmm3
  433cb1:	0f 87 4f 05 00 00    	ja     434206 <BIO_vprintf+0xd36>
  433cb7:	0f 87 50 07 00 00    	ja     43440d <BIO_vprintf+0xf3d>
  433cbd:	f6 44 24 18 02       	testb  $0x2,0x18(%rsp)
  433cc2:	0f 85 f2 04 00 00    	jne    4341ba <BIO_vprintf+0xcea>
  433cc8:	8b 74 24 18          	mov    0x18(%rsp),%esi
  433ccc:	83 e6 04             	and    $0x4,%esi
  433ccf:	0f 84 bf 05 00 00    	je     434294 <BIO_vprintf+0xdc4>
  433cd5:	be 01 00 00 00       	mov    $0x1,%esi
  433cda:	b9 01 00 00 00       	mov    $0x1,%ecx
  433cdf:	c7 44 24 1c 20 00 00 	movl   $0x20,0x1c(%rsp)
  433ce6:	00 
  433ce7:	45 85 ed             	test   %r13d,%r13d
  433cea:	f2 48 0f 2c f8       	cvttsd2si %xmm0,%rdi
  433cef:	0f 84 43 06 00 00    	je     434338 <BIO_vprintf+0xe68>
  433cf5:	41 83 fd 01          	cmp    $0x1,%r13d
  433cf9:	0f 84 01 07 00 00    	je     434400 <BIO_vprintf+0xf30>
  433cff:	41 83 fd 02          	cmp    $0x2,%r13d
  433d03:	0f 84 ea 06 00 00    	je     4343f3 <BIO_vprintf+0xf23>
  433d09:	41 83 fd 03          	cmp    $0x3,%r13d
  433d0d:	0f 84 d3 06 00 00    	je     4343e6 <BIO_vprintf+0xf16>
  433d13:	41 83 fd 04          	cmp    $0x4,%r13d
  433d17:	0f 84 bc 06 00 00    	je     4343d9 <BIO_vprintf+0xf09>
  433d1d:	41 83 fd 05          	cmp    $0x5,%r13d
  433d21:	0f 84 a5 06 00 00    	je     4343cc <BIO_vprintf+0xefc>
  433d27:	41 83 fd 06          	cmp    $0x6,%r13d
  433d2b:	0f 84 8e 06 00 00    	je     4343bf <BIO_vprintf+0xeef>
  433d31:	41 83 fd 07          	cmp    $0x7,%r13d
  433d35:	0f 84 29 06 00 00    	je     434364 <BIO_vprintf+0xe94>
  433d3b:	41 83 fd 08          	cmp    $0x8,%r13d
  433d3f:	f2 0f 10 0d e1 d3 01 	movsd  0x1d3e1(%rip),%xmm1        # 451128 <Hex+0x748>
  433d46:	00 
  433d47:	0f 84 0a 06 00 00    	je     434357 <BIO_vprintf+0xe87>
  433d4d:	41 83 fd 01          	cmp    $0x1,%r13d
  433d51:	f2 48 0f 2c c1       	cvttsd2si %xmm1,%rax
  433d56:	f2 0f 10 0d d2 d3 01 	movsd  0x1d3d2(%rip),%xmm1        # 451130 <Hex+0x750>
  433d5d:	00 
  433d5e:	74 4e                	je     433dae <BIO_vprintf+0x8de>
  433d60:	41 83 fd 02          	cmp    $0x2,%r13d
  433d64:	0f 84 48 06 00 00    	je     4343b2 <BIO_vprintf+0xee2>
  433d6a:	41 83 fd 03          	cmp    $0x3,%r13d
  433d6e:	0f 84 31 06 00 00    	je     4343a5 <BIO_vprintf+0xed5>
  433d74:	41 83 fd 04          	cmp    $0x4,%r13d
  433d78:	0f 84 1a 06 00 00    	je     434398 <BIO_vprintf+0xec8>
  433d7e:	41 83 fd 05          	cmp    $0x5,%r13d
  433d82:	0f 84 03 06 00 00    	je     43438b <BIO_vprintf+0xebb>
  433d88:	41 83 fd 06          	cmp    $0x6,%r13d
  433d8c:	0f 84 ec 05 00 00    	je     43437e <BIO_vprintf+0xeae>
  433d92:	41 83 fd 07          	cmp    $0x7,%r13d
  433d96:	0f 84 d5 05 00 00    	je     434371 <BIO_vprintf+0xea1>
  433d9c:	41 83 fd 08          	cmp    $0x8,%r13d
  433da0:	f2 0f 10 0d 80 d3 01 	movsd  0x1d380(%rip),%xmm1        # 451128 <Hex+0x748>
  433da7:	00 
  433da8:	0f 84 9c 05 00 00    	je     43434a <BIO_vprintf+0xe7a>
  433dae:	66 0f ef d2          	pxor   %xmm2,%xmm2
  433db2:	f2 48 0f 2a d7       	cvtsi2sd %rdi,%xmm2
  433db7:	f2 0f 5c c2          	subsd  %xmm2,%xmm0
  433dbb:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  433dbf:	66 0f ef c0          	pxor   %xmm0,%xmm0
  433dc3:	f2 4c 0f 2c c1       	cvttsd2si %xmm1,%r8
  433dc8:	f2 49 0f 2a c0       	cvtsi2sd %r8,%xmm0
  433dcd:	49 8d 50 01          	lea    0x1(%r8),%rdx
  433dd1:	f2 0f 5c c8          	subsd  %xmm0,%xmm1
  433dd5:	66 0f 2e 0d 9b d3 01 	ucomisd 0x1d39b(%rip),%xmm1        # 451178 <Hex+0x798>
  433ddc:	00 
  433ddd:	4c 0f 43 c2          	cmovae %rdx,%r8
  433de1:	49 39 c0             	cmp    %rax,%r8
  433de4:	7c 07                	jl     433ded <BIO_vprintf+0x91d>
  433de6:	48 83 c7 01          	add    $0x1,%rdi
  433dea:	49 29 c0             	sub    %rax,%r8
  433ded:	4c 8d 54 24 40       	lea    0x40(%rsp),%r10
  433df2:	45 31 db             	xor    %r11d,%r11d
  433df5:	49 bc 67 66 66 66 66 	movabs $0x6666666666666667,%r12
  433dfc:	66 66 66 
  433dff:	eb 0a                	jmp    433e0b <BIO_vprintf+0x93b>
  433e01:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  433e08:	45 89 f3             	mov    %r14d,%r11d
  433e0b:	48 89 f8             	mov    %rdi,%rax
  433e0e:	45 8d 73 01          	lea    0x1(%r11),%r14d
  433e12:	49 f7 ec             	imul   %r12
  433e15:	48 89 f8             	mov    %rdi,%rax
  433e18:	48 c1 f8 3f          	sar    $0x3f,%rax
  433e1c:	48 c1 fa 02          	sar    $0x2,%rdx
  433e20:	48 29 c2             	sub    %rax,%rdx
  433e23:	48 8d 04 92          	lea    (%rdx,%rdx,4),%rax
  433e27:	48 01 c0             	add    %rax,%rax
  433e2a:	48 29 c7             	sub    %rax,%rdi
  433e2d:	41 83 fe 13          	cmp    $0x13,%r14d
  433e31:	0f b6 87 37 0a 45 00 	movzbl 0x450a37(%rdi),%eax
  433e38:	48 89 d7             	mov    %rdx,%rdi
  433e3b:	0f 9e c2             	setle  %dl
  433e3e:	48 85 ff             	test   %rdi,%rdi
  433e41:	41 88 02             	mov    %al,(%r10)
  433e44:	0f 95 c0             	setne  %al
  433e47:	49 83 c2 01          	add    $0x1,%r10
  433e4b:	84 c2                	test   %al,%dl
  433e4d:	75 b9                	jne    433e08 <BIO_vprintf+0x938>
  433e4f:	41 83 fe 14          	cmp    $0x14,%r14d
  433e53:	49 ba 67 66 66 66 66 	movabs $0x6666666666666667,%r10
  433e5a:	66 66 66 
  433e5d:	45 0f 44 f3          	cmove  %r11d,%r14d
  433e61:	31 ff                	xor    %edi,%edi
  433e63:	49 63 c6             	movslq %r14d,%rax
  433e66:	c6 44 04 40 00       	movb   $0x0,0x40(%rsp,%rax,1)
  433e6b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  433e70:	4c 89 c0             	mov    %r8,%rax
  433e73:	49 f7 ea             	imul   %r10
  433e76:	4c 89 c0             	mov    %r8,%rax
  433e79:	48 c1 f8 3f          	sar    $0x3f,%rax
  433e7d:	48 c1 fa 02          	sar    $0x2,%rdx
  433e81:	48 29 c2             	sub    %rax,%rdx
  433e84:	48 8d 04 92          	lea    (%rdx,%rdx,4),%rax
  433e88:	48 01 c0             	add    %rax,%rax
  433e8b:	49 29 c0             	sub    %rax,%r8
  433e8e:	41 0f b6 80 37 0a 45 	movzbl 0x450a37(%r8),%eax
  433e95:	00 
  433e96:	49 89 d0             	mov    %rdx,%r8
  433e99:	88 44 3c 60          	mov    %al,0x60(%rsp,%rdi,1)
  433e9d:	48 83 c7 01          	add    $0x1,%rdi
  433ea1:	41 39 fd             	cmp    %edi,%r13d
  433ea4:	7f ca                	jg     433e70 <BIO_vprintf+0x9a0>
  433ea6:	45 85 ed             	test   %r13d,%r13d
  433ea9:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  433eaf:	45 89 ef             	mov    %r13d,%r15d
  433eb2:	45 0f 4f e5          	cmovg  %r13d,%r12d
  433eb6:	44 29 f5             	sub    %r14d,%ebp
  433eb9:	49 63 c4             	movslq %r12d,%rax
  433ebc:	44 29 ed             	sub    %r13d,%ebp
  433ebf:	83 ed 01             	sub    $0x1,%ebp
  433ec2:	c6 44 04 60 00       	movb   $0x0,0x60(%rsp,%rax,1)
  433ec7:	31 c0                	xor    %eax,%eax
  433ec9:	45 29 e7             	sub    %r12d,%r15d
  433ecc:	44 0f 48 f8          	cmovs  %eax,%r15d
  433ed0:	29 f5                	sub    %esi,%ebp
  433ed2:	0f 48 e8             	cmovs  %eax,%ebp
  433ed5:	f6 44 24 18 01       	testb  $0x1,0x18(%rsp)
  433eda:	0f 84 03 02 00 00    	je     4340e3 <BIO_vprintf+0xc13>
  433ee0:	f7 dd                	neg    %ebp
  433ee2:	8b 44 24 1c          	mov    0x1c(%rsp),%eax
  433ee6:	85 c0                	test   %eax,%eax
  433ee8:	74 2c                	je     433f16 <BIO_vprintf+0xa46>
  433eea:	e9 e2 02 00 00       	jmpq   4341d1 <BIO_vprintf+0xd01>
  433eef:	90                   	nop
  433ef0:	41 83 ee 01          	sub    $0x1,%r14d
  433ef4:	49 63 c6             	movslq %r14d,%rax
  433ef7:	44 0f be 44 04 40    	movsbl 0x40(%rsp,%rax,1),%r8d
  433efd:	48 8d 4c 24 28       	lea    0x28(%rsp),%rcx
  433f02:	48 8d 54 24 38       	lea    0x38(%rsp),%rdx
  433f07:	48 8d 74 24 30       	lea    0x30(%rsp),%rsi
  433f0c:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  433f11:	e8 da d9 ff ff       	callq  4318f0 <doapr_outch>
  433f16:	45 85 f6             	test   %r14d,%r14d
  433f19:	75 d5                	jne    433ef0 <BIO_vprintf+0xa20>
  433f1b:	45 85 ed             	test   %r13d,%r13d
  433f1e:	75 07                	jne    433f27 <BIO_vprintf+0xa57>
  433f20:	f6 44 24 18 08       	testb  $0x8,0x18(%rsp)
  433f25:	74 54                	je     433f7b <BIO_vprintf+0xaab>
  433f27:	48 8d 4c 24 28       	lea    0x28(%rsp),%rcx
  433f2c:	48 8d 54 24 38       	lea    0x38(%rsp),%rdx
  433f31:	48 8d 74 24 30       	lea    0x30(%rsp),%rsi
  433f36:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  433f3b:	41 b8 2e 00 00 00    	mov    $0x2e,%r8d
  433f41:	e8 aa d9 ff ff       	callq  4318f0 <doapr_outch>
  433f46:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  433f4d:	00 00 00 
  433f50:	41 83 ec 01          	sub    $0x1,%r12d
  433f54:	48 8d 4c 24 28       	lea    0x28(%rsp),%rcx
  433f59:	48 8d 54 24 38       	lea    0x38(%rsp),%rdx
  433f5e:	49 63 c4             	movslq %r12d,%rax
  433f61:	48 8d 74 24 30       	lea    0x30(%rsp),%rsi
  433f66:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  433f6b:	44 0f be 44 04 60    	movsbl 0x60(%rsp,%rax,1),%r8d
  433f71:	e8 7a d9 ff ff       	callq  4318f0 <doapr_outch>
  433f76:	45 85 e4             	test   %r12d,%r12d
  433f79:	75 d5                	jne    433f50 <BIO_vprintf+0xa80>
  433f7b:	45 85 ff             	test   %r15d,%r15d
  433f7e:	74 25                	je     433fa5 <BIO_vprintf+0xad5>
  433f80:	48 8d 4c 24 28       	lea    0x28(%rsp),%rcx
  433f85:	48 8d 54 24 38       	lea    0x38(%rsp),%rdx
  433f8a:	48 8d 74 24 30       	lea    0x30(%rsp),%rsi
  433f8f:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  433f94:	41 b8 30 00 00 00    	mov    $0x30,%r8d
  433f9a:	e8 51 d9 ff ff       	callq  4318f0 <doapr_outch>
  433f9f:	41 83 ef 01          	sub    $0x1,%r15d
  433fa3:	75 db                	jne    433f80 <BIO_vprintf+0xab0>
  433fa5:	85 ed                	test   %ebp,%ebp
  433fa7:	0f 84 0f f8 ff ff    	je     4337bc <BIO_vprintf+0x2ec>
  433fad:	0f 1f 00             	nopl   (%rax)
  433fb0:	48 8d 4c 24 28       	lea    0x28(%rsp),%rcx
  433fb5:	48 8d 54 24 38       	lea    0x38(%rsp),%rdx
  433fba:	48 8d 74 24 30       	lea    0x30(%rsp),%rsi
  433fbf:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  433fc4:	e8 27 da ff ff       	callq  4319f0 <doapr_outch.constprop.5>
  433fc9:	83 c5 01             	add    $0x1,%ebp
  433fcc:	75 e2                	jne    433fb0 <BIO_vprintf+0xae0>
  433fce:	e9 e9 f7 ff ff       	jmpq   4337bc <BIO_vprintf+0x2ec>
  433fd3:	44 0f be 73 01       	movsbl 0x1(%rbx),%r14d
  433fd8:	41 b5 04             	mov    $0x4,%r13b
  433fdb:	48 83 c3 01          	add    $0x1,%rbx
  433fdf:	e9 c8 f8 ff ff       	jmpq   4338ac <BIO_vprintf+0x3dc>
  433fe4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  433fe9:	48 83 40 08 08       	addq   $0x8,0x8(%rax)
  433fee:	e9 c9 f7 ff ff       	jmpq   4337bc <BIO_vprintf+0x2ec>
  433ff3:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  433ff8:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  433ffc:	48 8d 42 08          	lea    0x8(%rdx),%rax
  434000:	48 89 47 08          	mov    %rax,0x8(%rdi)
  434004:	e9 17 f8 ff ff       	jmpq   433820 <BIO_vprintf+0x350>
  434009:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  43400e:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  434012:	48 8d 42 08          	lea    0x8(%rdx),%rax
  434016:	48 89 47 08          	mov    %rax,0x8(%rdi)
  43401a:	e9 51 f8 ff ff       	jmpq   433870 <BIO_vprintf+0x3a0>
  43401f:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
  434023:	48 8d 51 08          	lea    0x8(%rcx),%rdx
  434027:	48 89 57 08          	mov    %rdx,0x8(%rdi)
  43402b:	e9 48 f7 ff ff       	jmpq   433778 <BIO_vprintf+0x2a8>
  434030:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  434035:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  434039:	48 8d 42 08          	lea    0x8(%rdx),%rax
  43403d:	48 89 47 08          	mov    %rax,0x8(%rdi)
  434041:	e9 fc fb ff ff       	jmpq   433c42 <BIO_vprintf+0x772>
  434046:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  43404b:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  43404f:	48 8d 42 08          	lea    0x8(%rdx),%rax
  434053:	48 89 47 08          	mov    %rax,0x8(%rdi)
  434057:	e9 cf fa ff ff       	jmpq   433b2b <BIO_vprintf+0x65b>
  43405c:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  434061:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  434065:	48 8d 42 08          	lea    0x8(%rdx),%rax
  434069:	48 89 47 08          	mov    %rax,0x8(%rdi)
  43406d:	e9 26 fa ff ff       	jmpq   433a98 <BIO_vprintf+0x5c8>
  434072:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  434077:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  43407b:	48 8d 42 08          	lea    0x8(%rdx),%rax
  43407f:	48 89 47 08          	mov    %rax,0x8(%rdi)
  434083:	e9 07 fc ff ff       	jmpq   433c8f <BIO_vprintf+0x7bf>
  434088:	83 f8 2f             	cmp    $0x2f,%eax
  43408b:	0f 87 c6 01 00 00    	ja     434257 <BIO_vprintf+0xd87>
  434091:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  434096:	89 c2                	mov    %eax,%edx
  434098:	83 c0 08             	add    $0x8,%eax
  43409b:	48 03 57 10          	add    0x10(%rdi),%rdx
  43409f:	89 07                	mov    %eax,(%rdi)
  4340a1:	4c 8b 02             	mov    (%rdx),%r8
  4340a4:	e9 b8 f9 ff ff       	jmpq   433a61 <BIO_vprintf+0x591>
  4340a9:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
  4340ad:	48 8d 51 08          	lea    0x8(%rcx),%rdx
  4340b1:	48 89 57 08          	mov    %rdx,0x8(%rdi)
  4340b5:	e9 5e f9 ff ff       	jmpq   433a18 <BIO_vprintf+0x548>
  4340ba:	8b 10                	mov    (%rax),%edx
  4340bc:	48 89 c7             	mov    %rax,%rdi
  4340bf:	83 fa 2f             	cmp    $0x2f,%edx
  4340c2:	0f 87 db 01 00 00    	ja     4342a3 <BIO_vprintf+0xdd3>
  4340c8:	89 d0                	mov    %edx,%eax
  4340ca:	48 03 47 10          	add    0x10(%rdi),%rax
  4340ce:	83 c2 08             	add    $0x8,%edx
  4340d1:	89 17                	mov    %edx,(%rdi)
  4340d3:	48 8b 00             	mov    (%rax),%rax
  4340d6:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  4340db:	48 89 10             	mov    %rdx,(%rax)
  4340de:	e9 d9 f6 ff ff       	jmpq   4337bc <BIO_vprintf+0x2ec>
  4340e3:	85 ed                	test   %ebp,%ebp
  4340e5:	0f 8e df 01 00 00    	jle    4342ca <BIO_vprintf+0xdfa>
  4340eb:	f6 44 24 18 10       	testb  $0x10,0x18(%rsp)
  4340f0:	0f 84 d4 01 00 00    	je     4342ca <BIO_vprintf+0xdfa>
  4340f6:	84 c9                	test   %cl,%cl
  4340f8:	0f 85 29 02 00 00    	jne    434327 <BIO_vprintf+0xe57>
  4340fe:	66 90                	xchg   %ax,%ax
  434100:	41 b8 30 00 00 00    	mov    $0x30,%r8d
  434106:	48 8d 4c 24 28       	lea    0x28(%rsp),%rcx
  43410b:	48 8d 54 24 38       	lea    0x38(%rsp),%rdx
  434110:	48 8d 74 24 30       	lea    0x30(%rsp),%rsi
  434115:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  43411a:	e8 d1 d7 ff ff       	callq  4318f0 <doapr_outch>
  43411f:	83 ed 01             	sub    $0x1,%ebp
  434122:	75 dc                	jne    434100 <BIO_vprintf+0xc30>
  434124:	31 ed                	xor    %ebp,%ebp
  434126:	e9 eb fd ff ff       	jmpq   433f16 <BIO_vprintf+0xa46>
  43412b:	45 84 c0             	test   %r8b,%r8b
  43412e:	74 10                	je     434140 <BIO_vprintf+0xc70>
  434130:	84 c9                	test   %cl,%cl
  434132:	0f 85 b9 fa ff ff    	jne    433bf1 <BIO_vprintf+0x721>
  434138:	e9 7f f6 ff ff       	jmpq   4337bc <BIO_vprintf+0x2ec>
  43413d:	0f 1f 00             	nopl   (%rax)
  434140:	84 c9                	test   %cl,%cl
  434142:	0f 84 74 f6 ff ff    	je     4337bc <BIO_vprintf+0x2ec>
  434148:	44 89 e8             	mov    %r13d,%eax
  43414b:	c1 e8 1f             	shr    $0x1f,%eax
  43414e:	84 c0                	test   %al,%al
  434150:	0f 84 66 f6 ff ff    	je     4337bc <BIO_vprintf+0x2ec>
  434156:	45 89 ee             	mov    %r13d,%r14d
  434159:	eb 13                	jmp    43416e <BIO_vprintf+0xc9e>
  43415b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  434160:	44 89 f0             	mov    %r14d,%eax
  434163:	c1 e8 1f             	shr    $0x1f,%eax
  434166:	84 c0                	test   %al,%al
  434168:	0f 84 4e f6 ff ff    	je     4337bc <BIO_vprintf+0x2ec>
  43416e:	48 8d 4c 24 28       	lea    0x28(%rsp),%rcx
  434173:	48 8d 54 24 38       	lea    0x38(%rsp),%rdx
  434178:	48 8d 74 24 30       	lea    0x30(%rsp),%rsi
  43417d:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  434182:	41 83 c6 01          	add    $0x1,%r14d
  434186:	e8 65 d8 ff ff       	callq  4319f0 <doapr_outch.constprop.5>
  43418b:	44 89 f0             	mov    %r14d,%eax
  43418e:	44 29 e8             	sub    %r13d,%eax
  434191:	01 e8                	add    %ebp,%eax
  434193:	41 39 c4             	cmp    %eax,%r12d
  434196:	7f c8                	jg     434160 <BIO_vprintf+0xc90>
  434198:	e9 1f f6 ff ff       	jmpq   4337bc <BIO_vprintf+0x2ec>
  43419d:	83 fa 2f             	cmp    $0x2f,%edx
  4341a0:	0f 87 c7 00 00 00    	ja     43426d <BIO_vprintf+0xd9d>
  4341a6:	89 d1                	mov    %edx,%ecx
  4341a8:	48 03 4f 10          	add    0x10(%rdi),%rcx
  4341ac:	83 c2 08             	add    $0x8,%edx
  4341af:	89 17                	mov    %edx,(%rdi)
  4341b1:	44 0f b7 01          	movzwl (%rcx),%r8d
  4341b5:	e9 c1 f5 ff ff       	jmpq   43377b <BIO_vprintf+0x2ab>
  4341ba:	be 01 00 00 00       	mov    $0x1,%esi
  4341bf:	b9 01 00 00 00       	mov    $0x1,%ecx
  4341c4:	c7 44 24 1c 2b 00 00 	movl   $0x2b,0x1c(%rsp)
  4341cb:	00 
  4341cc:	e9 16 fb ff ff       	jmpq   433ce7 <BIO_vprintf+0x817>
  4341d1:	44 8b 44 24 1c       	mov    0x1c(%rsp),%r8d
  4341d6:	e9 22 fd ff ff       	jmpq   433efd <BIO_vprintf+0xa2d>
  4341db:	8b 00                	mov    (%rax),%eax
  4341dd:	83 f8 2f             	cmp    $0x2f,%eax
  4341e0:	0f 87 ce 00 00 00    	ja     4342b4 <BIO_vprintf+0xde4>
  4341e6:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  4341eb:	89 c2                	mov    %eax,%edx
  4341ed:	83 c0 08             	add    $0x8,%eax
  4341f0:	48 03 57 10          	add    0x10(%rdi),%rdx
  4341f4:	89 07                	mov    %eax,(%rdi)
  4341f6:	48 8b 02             	mov    (%rdx),%rax
  4341f9:	48 8b 54 24 38       	mov    0x38(%rsp),%rdx
  4341fe:	66 89 10             	mov    %dx,(%rax)
  434201:	e9 b6 f5 ff ff       	jmpq   4337bc <BIO_vprintf+0x2ec>
  434206:	66 0f 57 05 72 cf 01 	xorpd  0x1cf72(%rip),%xmm0        # 451180 <Hex+0x7a0>
  43420d:	00 
  43420e:	be 01 00 00 00       	mov    $0x1,%esi
  434213:	b9 01 00 00 00       	mov    $0x1,%ecx
  434218:	c7 44 24 1c 2d 00 00 	movl   $0x2d,0x1c(%rsp)
  43421f:	00 
  434220:	e9 c2 fa ff ff       	jmpq   433ce7 <BIO_vprintf+0x817>
  434225:	b9 01 00 00 00       	mov    $0x1,%ecx
  43422a:	41 bc ff ff ff 7f    	mov    $0x7fffffff,%r12d
  434230:	e9 06 f9 ff ff       	jmpq   433b3b <BIO_vprintf+0x66b>
  434235:	83 f8 2f             	cmp    $0x2f,%eax
  434238:	0f 87 bd 00 00 00    	ja     4342fb <BIO_vprintf+0xe2b>
  43423e:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  434243:	89 c2                	mov    %eax,%edx
  434245:	83 c0 08             	add    $0x8,%eax
  434248:	48 03 57 10          	add    0x10(%rdi),%rdx
  43424c:	89 07                	mov    %eax,(%rdi)
  43424e:	4c 0f bf 02          	movswq (%rdx),%r8
  434252:	e9 0a f8 ff ff       	jmpq   433a61 <BIO_vprintf+0x591>
  434257:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  43425c:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  434260:	48 8d 42 08          	lea    0x8(%rdx),%rax
  434264:	48 89 47 08          	mov    %rax,0x8(%rdi)
  434268:	e9 34 fe ff ff       	jmpq   4340a1 <BIO_vprintf+0xbd1>
  43426d:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
  434271:	48 8d 51 08          	lea    0x8(%rcx),%rdx
  434275:	48 89 57 08          	mov    %rdx,0x8(%rdi)
  434279:	e9 33 ff ff ff       	jmpq   4341b1 <BIO_vprintf+0xce1>
  43427e:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  434283:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  434287:	48 8d 42 08          	lea    0x8(%rdx),%rax
  43428b:	48 89 47 08          	mov    %rax,0x8(%rdi)
  43428f:	e9 5f f8 ff ff       	jmpq   433af3 <BIO_vprintf+0x623>
  434294:	31 c9                	xor    %ecx,%ecx
  434296:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%rsp)
  43429d:	00 
  43429e:	e9 44 fa ff ff       	jmpq   433ce7 <BIO_vprintf+0x817>
  4342a3:	48 8b 40 08          	mov    0x8(%rax),%rax
  4342a7:	48 8d 50 08          	lea    0x8(%rax),%rdx
  4342ab:	48 89 57 08          	mov    %rdx,0x8(%rdi)
  4342af:	e9 1f fe ff ff       	jmpq   4340d3 <BIO_vprintf+0xc03>
  4342b4:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  4342b9:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  4342bd:	48 8d 42 08          	lea    0x8(%rdx),%rax
  4342c1:	48 89 47 08          	mov    %rax,0x8(%rdi)
  4342c5:	e9 2c ff ff ff       	jmpq   4341f6 <BIO_vprintf+0xd26>
  4342ca:	85 ed                	test   %ebp,%ebp
  4342cc:	0f 8e 10 fc ff ff    	jle    433ee2 <BIO_vprintf+0xa12>
  4342d2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  4342d8:	48 8d 4c 24 28       	lea    0x28(%rsp),%rcx
  4342dd:	48 8d 54 24 38       	lea    0x38(%rsp),%rdx
  4342e2:	48 8d 74 24 30       	lea    0x30(%rsp),%rsi
  4342e7:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  4342ec:	e8 ff d6 ff ff       	callq  4319f0 <doapr_outch.constprop.5>
  4342f1:	83 ed 01             	sub    $0x1,%ebp
  4342f4:	75 e2                	jne    4342d8 <BIO_vprintf+0xe08>
  4342f6:	e9 e7 fb ff ff       	jmpq   433ee2 <BIO_vprintf+0xa12>
  4342fb:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  434300:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  434304:	48 8d 42 08          	lea    0x8(%rdx),%rax
  434308:	48 89 47 08          	mov    %rax,0x8(%rdi)
  43430c:	e9 3d ff ff ff       	jmpq   43424e <BIO_vprintf+0xd7e>
  434311:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  434316:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  43431a:	48 8d 42 08          	lea    0x8(%rdx),%rax
  43431e:	48 89 47 08          	mov    %rax,0x8(%rdi)
  434322:	e9 37 f7 ff ff       	jmpq   433a5e <BIO_vprintf+0x58e>
  434327:	44 8b 44 24 1c       	mov    0x1c(%rsp),%r8d
  43432c:	e9 d5 fd ff ff       	jmpq   434106 <BIO_vprintf+0xc36>
  434331:	31 d2                	xor    %edx,%edx
  434333:	e9 35 f8 ff ff       	jmpq   433b6d <BIO_vprintf+0x69d>
  434338:	b8 01 00 00 00       	mov    $0x1,%eax
  43433d:	f2 0f 10 0d 2b ce 01 	movsd  0x1ce2b(%rip),%xmm1        # 451170 <Hex+0x790>
  434344:	00 
  434345:	e9 64 fa ff ff       	jmpq   433dae <BIO_vprintf+0x8de>
  43434a:	f2 0f 10 0d 16 ce 01 	movsd  0x1ce16(%rip),%xmm1        # 451168 <Hex+0x788>
  434351:	00 
  434352:	e9 57 fa ff ff       	jmpq   433dae <BIO_vprintf+0x8de>
  434357:	f2 0f 10 0d 09 ce 01 	movsd  0x1ce09(%rip),%xmm1        # 451168 <Hex+0x788>
  43435e:	00 
  43435f:	e9 e9 f9 ff ff       	jmpq   433d4d <BIO_vprintf+0x87d>
  434364:	f2 0f 10 0d f4 cd 01 	movsd  0x1cdf4(%rip),%xmm1        # 451160 <Hex+0x780>
  43436b:	00 
  43436c:	e9 dc f9 ff ff       	jmpq   433d4d <BIO_vprintf+0x87d>
  434371:	f2 0f 10 0d e7 cd 01 	movsd  0x1cde7(%rip),%xmm1        # 451160 <Hex+0x780>
  434378:	00 
  434379:	e9 30 fa ff ff       	jmpq   433dae <BIO_vprintf+0x8de>
  43437e:	f2 0f 10 0d d2 cd 01 	movsd  0x1cdd2(%rip),%xmm1        # 451158 <Hex+0x778>
  434385:	00 
  434386:	e9 23 fa ff ff       	jmpq   433dae <BIO_vprintf+0x8de>
  43438b:	f2 0f 10 0d bd cd 01 	movsd  0x1cdbd(%rip),%xmm1        # 451150 <Hex+0x770>
  434392:	00 
  434393:	e9 16 fa ff ff       	jmpq   433dae <BIO_vprintf+0x8de>
  434398:	f2 0f 10 0d a8 cd 01 	movsd  0x1cda8(%rip),%xmm1        # 451148 <Hex+0x768>
  43439f:	00 
  4343a0:	e9 09 fa ff ff       	jmpq   433dae <BIO_vprintf+0x8de>
  4343a5:	f2 0f 10 0d 93 cd 01 	movsd  0x1cd93(%rip),%xmm1        # 451140 <Hex+0x760>
  4343ac:	00 
  4343ad:	e9 fc f9 ff ff       	jmpq   433dae <BIO_vprintf+0x8de>
  4343b2:	f2 0f 10 0d 7e cd 01 	movsd  0x1cd7e(%rip),%xmm1        # 451138 <Hex+0x758>
  4343b9:	00 
  4343ba:	e9 ef f9 ff ff       	jmpq   433dae <BIO_vprintf+0x8de>
  4343bf:	f2 0f 10 0d 91 cd 01 	movsd  0x1cd91(%rip),%xmm1        # 451158 <Hex+0x778>
  4343c6:	00 
  4343c7:	e9 81 f9 ff ff       	jmpq   433d4d <BIO_vprintf+0x87d>
  4343cc:	f2 0f 10 0d 7c cd 01 	movsd  0x1cd7c(%rip),%xmm1        # 451150 <Hex+0x770>
  4343d3:	00 
  4343d4:	e9 74 f9 ff ff       	jmpq   433d4d <BIO_vprintf+0x87d>
  4343d9:	f2 0f 10 0d 67 cd 01 	movsd  0x1cd67(%rip),%xmm1        # 451148 <Hex+0x768>
  4343e0:	00 
  4343e1:	e9 67 f9 ff ff       	jmpq   433d4d <BIO_vprintf+0x87d>
  4343e6:	f2 0f 10 0d 52 cd 01 	movsd  0x1cd52(%rip),%xmm1        # 451140 <Hex+0x760>
  4343ed:	00 
  4343ee:	e9 5a f9 ff ff       	jmpq   433d4d <BIO_vprintf+0x87d>
  4343f3:	f2 0f 10 0d 3d cd 01 	movsd  0x1cd3d(%rip),%xmm1        # 451138 <Hex+0x758>
  4343fa:	00 
  4343fb:	e9 4d f9 ff ff       	jmpq   433d4d <BIO_vprintf+0x87d>
  434400:	f2 0f 10 0d 28 cd 01 	movsd  0x1cd28(%rip),%xmm1        # 451130 <Hex+0x750>
  434407:	00 
  434408:	e9 40 f9 ff ff       	jmpq   433d4d <BIO_vprintf+0x87d>
  43440d:	be 01 00 00 00       	mov    $0x1,%esi
  434412:	b9 01 00 00 00       	mov    $0x1,%ecx
  434417:	c7 44 24 1c 2d 00 00 	movl   $0x2d,0x1c(%rsp)
  43441e:	00 
  43441f:	e9 c3 f8 ff ff       	jmpq   433ce7 <BIO_vprintf+0x817>
  434424:	e8 97 2a fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  434429:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000434430 <BIO_printf>:
  434430:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
  434437:	84 c0                	test   %al,%al
  434439:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  43443e:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  434443:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
  434448:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
  43444d:	74 37                	je     434486 <BIO_printf+0x56>
  43444f:	0f 29 44 24 50       	movaps %xmm0,0x50(%rsp)
  434454:	0f 29 4c 24 60       	movaps %xmm1,0x60(%rsp)
  434459:	0f 29 54 24 70       	movaps %xmm2,0x70(%rsp)
  43445e:	0f 29 9c 24 80 00 00 	movaps %xmm3,0x80(%rsp)
  434465:	00 
  434466:	0f 29 a4 24 90 00 00 	movaps %xmm4,0x90(%rsp)
  43446d:	00 
  43446e:	0f 29 ac 24 a0 00 00 	movaps %xmm5,0xa0(%rsp)
  434475:	00 
  434476:	0f 29 b4 24 b0 00 00 	movaps %xmm6,0xb0(%rsp)
  43447d:	00 
  43447e:	0f 29 bc 24 c0 00 00 	movaps %xmm7,0xc0(%rsp)
  434485:	00 
  434486:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  43448d:	00 00 
  43448f:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  434494:	31 c0                	xor    %eax,%eax
  434496:	48 8d 84 24 e0 00 00 	lea    0xe0(%rsp),%rax
  43449d:	00 
  43449e:	48 89 e2             	mov    %rsp,%rdx
  4344a1:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  4344a6:	48 8d 44 24 20       	lea    0x20(%rsp),%rax
  4344ab:	c7 04 24 10 00 00 00 	movl   $0x10,(%rsp)
  4344b2:	c7 44 24 04 30 00 00 	movl   $0x30,0x4(%rsp)
  4344b9:	00 
  4344ba:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  4344bf:	e8 0c f0 ff ff       	callq  4334d0 <BIO_vprintf>
  4344c4:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  4344c9:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  4344d0:	00 00 
  4344d2:	75 08                	jne    4344dc <BIO_printf+0xac>
  4344d4:	48 81 c4 d8 00 00 00 	add    $0xd8,%rsp
  4344db:	c3                   	retq   
  4344dc:	e8 df 29 fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  4344e1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  4344e8:	0f 1f 84 00 00 00 00 
  4344ef:	00 

00000000004344f0 <BIO_snprintf>:
  4344f0:	48 81 ec f8 00 00 00 	sub    $0xf8,%rsp
  4344f7:	84 c0                	test   %al,%al
  4344f9:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
  4344fe:	4c 89 44 24 60       	mov    %r8,0x60(%rsp)
  434503:	4c 89 4c 24 68       	mov    %r9,0x68(%rsp)
  434508:	74 3d                	je     434547 <BIO_snprintf+0x57>
  43450a:	0f 29 44 24 70       	movaps %xmm0,0x70(%rsp)
  43450f:	0f 29 8c 24 80 00 00 	movaps %xmm1,0x80(%rsp)
  434516:	00 
  434517:	0f 29 94 24 90 00 00 	movaps %xmm2,0x90(%rsp)
  43451e:	00 
  43451f:	0f 29 9c 24 a0 00 00 	movaps %xmm3,0xa0(%rsp)
  434526:	00 
  434527:	0f 29 a4 24 b0 00 00 	movaps %xmm4,0xb0(%rsp)
  43452e:	00 
  43452f:	0f 29 ac 24 c0 00 00 	movaps %xmm5,0xc0(%rsp)
  434536:	00 
  434537:	0f 29 b4 24 d0 00 00 	movaps %xmm6,0xd0(%rsp)
  43453e:	00 
  43453f:	0f 29 bc 24 e0 00 00 	movaps %xmm7,0xe0(%rsp)
  434546:	00 
  434547:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  43454e:	00 00 
  434550:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  434555:	31 c0                	xor    %eax,%eax
  434557:	48 8d 84 24 00 01 00 	lea    0x100(%rsp),%rax
  43455e:	00 
  43455f:	49 89 d0             	mov    %rdx,%r8
  434562:	4c 8d 4c 24 20       	lea    0x20(%rsp),%r9
  434567:	48 8d 4c 24 04       	lea    0x4(%rsp),%rcx
  43456c:	48 8d 54 24 18       	lea    0x18(%rsp),%rdx
  434571:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  434576:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  43457b:	48 8d 44 24 40       	lea    0x40(%rsp),%rax
  434580:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  434585:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  43458a:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  43458f:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  434594:	c7 44 24 20 18 00 00 	movl   $0x18,0x20(%rsp)
  43459b:	00 
  43459c:	c7 44 24 24 30 00 00 	movl   $0x30,0x24(%rsp)
  4345a3:	00 
  4345a4:	e8 d7 dd ff ff       	callq  432380 <_dopr.constprop.0>
  4345a9:	8b 44 24 04          	mov    0x4(%rsp),%eax
  4345ad:	85 c0                	test   %eax,%eax
  4345af:	75 2f                	jne    4345e0 <BIO_snprintf+0xf0>
  4345b1:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  4345b6:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  4345bb:	48 3d ff ff ff 7f    	cmp    $0x7fffffff,%rax
  4345c1:	0f 47 c2             	cmova  %edx,%eax
  4345c4:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
  4345c9:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  4345d0:	00 00 
  4345d2:	75 13                	jne    4345e7 <BIO_snprintf+0xf7>
  4345d4:	48 81 c4 f8 00 00 00 	add    $0xf8,%rsp
  4345db:	c3                   	retq   
  4345dc:	0f 1f 40 00          	nopl   0x0(%rax)
  4345e0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  4345e5:	eb dd                	jmp    4345c4 <BIO_snprintf+0xd4>
  4345e7:	e8 d4 28 fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  4345ec:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004345f0 <BIO_vsnprintf>:
  4345f0:	48 83 ec 38          	sub    $0x38,%rsp
  4345f4:	49 89 d0             	mov    %rdx,%r8
  4345f7:	49 89 c9             	mov    %rcx,%r9
  4345fa:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  4345ff:	48 8d 4c 24 1c       	lea    0x1c(%rsp),%rcx
  434604:	48 8d 54 24 20       	lea    0x20(%rsp),%rdx
  434609:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  43460e:	48 89 34 24          	mov    %rsi,(%rsp)
  434612:	48 89 e6             	mov    %rsp,%rsi
  434615:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  43461c:	00 00 
  43461e:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  434623:	31 c0                	xor    %eax,%eax
  434625:	e8 56 dd ff ff       	callq  432380 <_dopr.constprop.0>
  43462a:	8b 44 24 1c          	mov    0x1c(%rsp),%eax
  43462e:	85 c0                	test   %eax,%eax
  434630:	75 2e                	jne    434660 <BIO_vsnprintf+0x70>
  434632:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
  434637:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  43463c:	48 3d ff ff ff 7f    	cmp    $0x7fffffff,%rax
  434642:	0f 47 c2             	cmova  %edx,%eax
  434645:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  43464a:	64 48 33 34 25 28 00 	xor    %fs:0x28,%rsi
  434651:	00 00 
  434653:	75 12                	jne    434667 <BIO_vsnprintf+0x77>
  434655:	48 83 c4 38          	add    $0x38,%rsp
  434659:	c3                   	retq   
  43465a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  434660:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  434665:	eb de                	jmp    434645 <BIO_vsnprintf+0x55>
  434667:	e8 54 28 fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  43466c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000434670 <lh_strhash>:
  434670:	48 85 ff             	test   %rdi,%rdi
  434673:	74 6b                	je     4346e0 <lh_strhash+0x70>
  434675:	0f b6 0f             	movzbl (%rdi),%ecx
  434678:	31 c0                	xor    %eax,%eax
  43467a:	84 c9                	test   %cl,%cl
  43467c:	74 64                	je     4346e2 <lh_strhash+0x72>
  43467e:	41 b8 00 01 00 00    	mov    $0x100,%r8d
  434684:	41 b9 20 00 00 00    	mov    $0x20,%r9d
  43468a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  434690:	48 0f be d1          	movsbq %cl,%rdx
  434694:	45 89 ca             	mov    %r9d,%r10d
  434697:	48 89 c6             	mov    %rax,%rsi
  43469a:	4c 09 c2             	or     %r8,%rdx
  43469d:	48 83 c7 01          	add    $0x1,%rdi
  4346a1:	49 81 c0 00 01 00 00 	add    $0x100,%r8
  4346a8:	48 89 d1             	mov    %rdx,%rcx
  4346ab:	48 c1 e9 02          	shr    $0x2,%rcx
  4346af:	31 d1                	xor    %edx,%ecx
  4346b1:	83 e1 0f             	and    $0xf,%ecx
  4346b4:	41 29 ca             	sub    %ecx,%r10d
  4346b7:	48 d3 e6             	shl    %cl,%rsi
  4346ba:	44 89 d1             	mov    %r10d,%ecx
  4346bd:	48 d3 e8             	shr    %cl,%rax
  4346c0:	0f b6 0f             	movzbl (%rdi),%ecx
  4346c3:	48 0f af d2          	imul   %rdx,%rdx
  4346c7:	09 f0                	or     %esi,%eax
  4346c9:	48 31 d0             	xor    %rdx,%rax
  4346cc:	84 c9                	test   %cl,%cl
  4346ce:	75 c0                	jne    434690 <lh_strhash+0x20>
  4346d0:	48 89 c2             	mov    %rax,%rdx
  4346d3:	48 c1 ea 10          	shr    $0x10,%rdx
  4346d7:	48 31 d0             	xor    %rdx,%rax
  4346da:	c3                   	retq   
  4346db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4346e0:	31 c0                	xor    %eax,%eax
  4346e2:	f3 c3                	repz retq 
  4346e4:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
  4346eb:	00 00 00 00 00 

00000000004346f0 <lh_new>:
  4346f0:	41 54                	push   %r12
  4346f2:	55                   	push   %rbp
  4346f3:	49 89 f4             	mov    %rsi,%r12
  4346f6:	53                   	push   %rbx
  4346f7:	48 89 fd             	mov    %rdi,%rbp
  4346fa:	ba 77 00 00 00       	mov    $0x77,%edx
  4346ff:	be 90 11 45 00       	mov    $0x451190,%esi
  434704:	bf b0 00 00 00       	mov    $0xb0,%edi
  434709:	e8 f2 0c ff ff       	callq  425400 <CRYPTO_malloc>
  43470e:	48 85 c0             	test   %rax,%rax
  434711:	48 89 c3             	mov    %rax,%rbx
  434714:	0f 84 ae 01 00 00    	je     4348c8 <lh_new+0x1d8>
  43471a:	ba 79 00 00 00       	mov    $0x79,%edx
  43471f:	be 90 11 45 00       	mov    $0x451190,%esi
  434724:	bf 80 00 00 00       	mov    $0x80,%edi
  434729:	e8 d2 0c ff ff       	callq  425400 <CRYPTO_malloc>
  43472e:	48 85 c0             	test   %rax,%rax
  434731:	48 89 03             	mov    %rax,(%rbx)
  434734:	0f 84 92 01 00 00    	je     4348cc <lh_new+0x1dc>
  43473a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  434741:	48 8b 03             	mov    (%rbx),%rax
  434744:	4d 85 e4             	test   %r12,%r12
  434747:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  43474e:	00 
  43474f:	48 8b 03             	mov    (%rbx),%rax
  434752:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  434759:	00 
  43475a:	48 8b 03             	mov    (%rbx),%rax
  43475d:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  434764:	00 
  434765:	48 8b 03             	mov    (%rbx),%rax
  434768:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
  43476f:	00 
  434770:	48 8b 03             	mov    (%rbx),%rax
  434773:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
  43477a:	00 
  43477b:	48 8b 03             	mov    (%rbx),%rax
  43477e:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
  434785:	00 
  434786:	48 8b 03             	mov    (%rbx),%rax
  434789:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
  434790:	00 
  434791:	48 8b 03             	mov    (%rbx),%rax
  434794:	48 c7 40 40 00 00 00 	movq   $0x0,0x40(%rax)
  43479b:	00 
  43479c:	48 8b 03             	mov    (%rbx),%rax
  43479f:	48 c7 40 48 00 00 00 	movq   $0x0,0x48(%rax)
  4347a6:	00 
  4347a7:	48 8b 03             	mov    (%rbx),%rax
  4347aa:	48 c7 40 50 00 00 00 	movq   $0x0,0x50(%rax)
  4347b1:	00 
  4347b2:	48 8b 03             	mov    (%rbx),%rax
  4347b5:	48 c7 40 58 00 00 00 	movq   $0x0,0x58(%rax)
  4347bc:	00 
  4347bd:	48 8b 03             	mov    (%rbx),%rax
  4347c0:	48 c7 40 60 00 00 00 	movq   $0x0,0x60(%rax)
  4347c7:	00 
  4347c8:	48 8b 03             	mov    (%rbx),%rax
  4347cb:	48 c7 40 68 00 00 00 	movq   $0x0,0x68(%rax)
  4347d2:	00 
  4347d3:	48 8b 03             	mov    (%rbx),%rax
  4347d6:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
  4347dd:	00 
  4347de:	48 8b 03             	mov    (%rbx),%rax
  4347e1:	48 c7 40 78 00 00 00 	movq   $0x0,0x78(%rax)
  4347e8:	00 
  4347e9:	b8 d0 6e 40 00       	mov    $0x406ed0,%eax
  4347ee:	4c 0f 44 e0          	cmove  %rax,%r12
  4347f2:	b8 70 46 43 00       	mov    $0x434670,%eax
  4347f7:	48 85 ed             	test   %rbp,%rbp
  4347fa:	48 0f 44 e8          	cmove  %rax,%rbp
  4347fe:	4c 89 63 08          	mov    %r12,0x8(%rbx)
  434802:	48 89 d8             	mov    %rbx,%rax
  434805:	48 89 6b 10          	mov    %rbp,0x10(%rbx)
  434809:	c7 43 18 08 00 00 00 	movl   $0x8,0x18(%rbx)
  434810:	c7 43 1c 10 00 00 00 	movl   $0x10,0x1c(%rbx)
  434817:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%rbx)
  43481e:	c7 43 24 08 00 00 00 	movl   $0x8,0x24(%rbx)
  434825:	48 c7 43 28 00 02 00 	movq   $0x200,0x28(%rbx)
  43482c:	00 
  43482d:	48 c7 43 30 00 01 00 	movq   $0x100,0x30(%rbx)
  434834:	00 
  434835:	48 c7 43 38 00 00 00 	movq   $0x0,0x38(%rbx)
  43483c:	00 
  43483d:	48 c7 43 40 00 00 00 	movq   $0x0,0x40(%rbx)
  434844:	00 
  434845:	48 c7 43 48 00 00 00 	movq   $0x0,0x48(%rbx)
  43484c:	00 
  43484d:	48 c7 43 50 00 00 00 	movq   $0x0,0x50(%rbx)
  434854:	00 
  434855:	48 c7 43 58 00 00 00 	movq   $0x0,0x58(%rbx)
  43485c:	00 
  43485d:	48 c7 43 60 00 00 00 	movq   $0x0,0x60(%rbx)
  434864:	00 
  434865:	48 c7 43 68 00 00 00 	movq   $0x0,0x68(%rbx)
  43486c:	00 
  43486d:	48 c7 43 70 00 00 00 	movq   $0x0,0x70(%rbx)
  434874:	00 
  434875:	48 c7 43 78 00 00 00 	movq   $0x0,0x78(%rbx)
  43487c:	00 
  43487d:	48 c7 83 80 00 00 00 	movq   $0x0,0x80(%rbx)
  434884:	00 00 00 00 
  434888:	48 c7 83 88 00 00 00 	movq   $0x0,0x88(%rbx)
  43488f:	00 00 00 00 
  434893:	48 c7 83 90 00 00 00 	movq   $0x0,0x90(%rbx)
  43489a:	00 00 00 00 
  43489e:	48 c7 83 98 00 00 00 	movq   $0x0,0x98(%rbx)
  4348a5:	00 00 00 00 
  4348a9:	48 c7 83 a0 00 00 00 	movq   $0x0,0xa0(%rbx)
  4348b0:	00 00 00 00 
  4348b4:	c7 83 a8 00 00 00 00 	movl   $0x0,0xa8(%rbx)
  4348bb:	00 00 00 
  4348be:	5b                   	pop    %rbx
  4348bf:	5d                   	pop    %rbp
  4348c0:	41 5c                	pop    %r12
  4348c2:	c3                   	retq   
  4348c3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4348c8:	31 c0                	xor    %eax,%eax
  4348ca:	eb f2                	jmp    4348be <lh_new+0x1ce>
  4348cc:	48 89 df             	mov    %rbx,%rdi
  4348cf:	e8 8c 0e ff ff       	callq  425760 <CRYPTO_free>
  4348d4:	31 c0                	xor    %eax,%eax
  4348d6:	eb e6                	jmp    4348be <lh_new+0x1ce>
  4348d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4348df:	00 

00000000004348e0 <lh_free>:
  4348e0:	48 85 ff             	test   %rdi,%rdi
  4348e3:	74 60                	je     434945 <lh_free+0x65>
  4348e5:	41 54                	push   %r12
  4348e7:	55                   	push   %rbp
  4348e8:	31 ed                	xor    %ebp,%ebp
  4348ea:	53                   	push   %rbx
  4348eb:	8b 57 18             	mov    0x18(%rdi),%edx
  4348ee:	49 89 fc             	mov    %rdi,%r12
  4348f1:	48 8b 0f             	mov    (%rdi),%rcx
  4348f4:	85 d2                	test   %edx,%edx
  4348f6:	74 39                	je     434931 <lh_free+0x51>
  4348f8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4348ff:	00 
  434900:	89 e8                	mov    %ebp,%eax
  434902:	48 8b 3c c1          	mov    (%rcx,%rax,8),%rdi
  434906:	48 85 ff             	test   %rdi,%rdi
  434909:	74 1f                	je     43492a <lh_free+0x4a>
  43490b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  434910:	48 8b 5f 08          	mov    0x8(%rdi),%rbx
  434914:	e8 47 0e ff ff       	callq  425760 <CRYPTO_free>
  434919:	48 85 db             	test   %rbx,%rbx
  43491c:	48 89 df             	mov    %rbx,%rdi
  43491f:	75 ef                	jne    434910 <lh_free+0x30>
  434921:	49 8b 0c 24          	mov    (%r12),%rcx
  434925:	41 8b 54 24 18       	mov    0x18(%r12),%edx
  43492a:	83 c5 01             	add    $0x1,%ebp
  43492d:	39 d5                	cmp    %edx,%ebp
  43492f:	72 cf                	jb     434900 <lh_free+0x20>
  434931:	48 89 cf             	mov    %rcx,%rdi
  434934:	e8 27 0e ff ff       	callq  425760 <CRYPTO_free>
  434939:	5b                   	pop    %rbx
  43493a:	4c 89 e7             	mov    %r12,%rdi
  43493d:	5d                   	pop    %rbp
  43493e:	41 5c                	pop    %r12
  434940:	e9 1b 0e ff ff       	jmpq   425760 <CRYPTO_free>
  434945:	f3 c3                	repz retq 
  434947:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  43494e:	00 00 

0000000000434950 <lh_insert>:
  434950:	41 57                	push   %r15
  434952:	41 56                	push   %r14
  434954:	31 d2                	xor    %edx,%edx
  434956:	41 55                	push   %r13
  434958:	41 54                	push   %r12
  43495a:	49 89 f6             	mov    %rsi,%r14
  43495d:	55                   	push   %rbp
  43495e:	53                   	push   %rbx
  43495f:	48 89 fd             	mov    %rdi,%rbp
  434962:	48 83 ec 08          	sub    $0x8,%rsp
  434966:	8b 4f 18             	mov    0x18(%rdi),%ecx
  434969:	48 8b 47 38          	mov    0x38(%rdi),%rax
  43496d:	c7 87 a8 00 00 00 00 	movl   $0x0,0xa8(%rdi)
  434974:	00 00 00 
  434977:	48 c1 e0 08          	shl    $0x8,%rax
  43497b:	48 f7 f1             	div    %rcx
  43497e:	48 39 47 28          	cmp    %rax,0x28(%rdi)
  434982:	0f 86 a8 00 00 00    	jbe    434a30 <lh_insert+0xe0>
  434988:	4c 89 f7             	mov    %r14,%rdi
  43498b:	ff 55 10             	callq  *0x10(%rbp)
  43498e:	8b 4d 24             	mov    0x24(%rbp),%ecx
  434991:	31 d2                	xor    %edx,%edx
  434993:	49 89 c4             	mov    %rax,%r12
  434996:	48 83 45 60 01       	addq   $0x1,0x60(%rbp)
  43499b:	48 f7 f1             	div    %rcx
  43499e:	8b 45 20             	mov    0x20(%rbp),%eax
  4349a1:	48 39 c2             	cmp    %rax,%rdx
  4349a4:	73 0b                	jae    4349b1 <lh_insert+0x61>
  4349a6:	8b 4d 1c             	mov    0x1c(%rbp),%ecx
  4349a9:	4c 89 e0             	mov    %r12,%rax
  4349ac:	31 d2                	xor    %edx,%edx
  4349ae:	48 f7 f1             	div    %rcx
  4349b1:	48 8b 45 00          	mov    0x0(%rbp),%rax
  4349b5:	48 63 d2             	movslq %edx,%rdx
  4349b8:	4c 8b 7d 08          	mov    0x8(%rbp),%r15
  4349bc:	4c 8d 2c d0          	lea    (%rax,%rdx,8),%r13
  4349c0:	49 8b 5d 00          	mov    0x0(%r13),%rbx
  4349c4:	48 85 db             	test   %rbx,%rbx
  4349c7:	75 18                	jne    4349e1 <lh_insert+0x91>
  4349c9:	e9 42 01 00 00       	jmpq   434b10 <lh_insert+0x1c0>
  4349ce:	66 90                	xchg   %ax,%ax
  4349d0:	4c 8d 6b 08          	lea    0x8(%rbx),%r13
  4349d4:	48 8b 5b 08          	mov    0x8(%rbx),%rbx
  4349d8:	48 85 db             	test   %rbx,%rbx
  4349db:	0f 84 2f 01 00 00    	je     434b10 <lh_insert+0x1c0>
  4349e1:	48 83 85 a0 00 00 00 	addq   $0x1,0xa0(%rbp)
  4349e8:	01 
  4349e9:	4c 3b 63 10          	cmp    0x10(%rbx),%r12
  4349ed:	75 e1                	jne    4349d0 <lh_insert+0x80>
  4349ef:	48 83 45 68 01       	addq   $0x1,0x68(%rbp)
  4349f4:	4c 89 f6             	mov    %r14,%rsi
  4349f7:	48 8b 3b             	mov    (%rbx),%rdi
  4349fa:	41 ff d7             	callq  *%r15
  4349fd:	85 c0                	test   %eax,%eax
  4349ff:	75 cf                	jne    4349d0 <lh_insert+0x80>
  434a01:	49 8b 55 00          	mov    0x0(%r13),%rdx
  434a05:	48 85 d2             	test   %rdx,%rdx
  434a08:	0f 84 02 01 00 00    	je     434b10 <lh_insert+0x1c0>
  434a0e:	48 8b 02             	mov    (%rdx),%rax
  434a11:	4c 89 32             	mov    %r14,(%rdx)
  434a14:	48 83 45 78 01       	addq   $0x1,0x78(%rbp)
  434a19:	48 83 c4 08          	add    $0x8,%rsp
  434a1d:	5b                   	pop    %rbx
  434a1e:	5d                   	pop    %rbp
  434a1f:	41 5c                	pop    %r12
  434a21:	41 5d                	pop    %r13
  434a23:	41 5e                	pop    %r14
  434a25:	41 5f                	pop    %r15
  434a27:	c3                   	retq   
  434a28:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  434a2f:	00 
  434a30:	44 8b 57 20          	mov    0x20(%rdi),%r10d
  434a34:	8b 5d 24             	mov    0x24(%rbp),%ebx
  434a37:	48 89 ce             	mov    %rcx,%rsi
  434a3a:	48 8b 17             	mov    (%rdi),%rdx
  434a3d:	44 8b 45 1c          	mov    0x1c(%rbp),%r8d
  434a41:	83 c6 01             	add    $0x1,%esi
  434a44:	89 77 18             	mov    %esi,0x18(%rdi)
  434a47:	48 83 47 40 01       	addq   $0x1,0x40(%rdi)
  434a4c:	4c 89 d0             	mov    %r10,%rax
  434a4f:	45 8d 5a 01          	lea    0x1(%r10),%r11d
  434a53:	01 d8                	add    %ebx,%eax
  434a55:	4c 89 c6             	mov    %r8,%rsi
  434a58:	4c 8d 0c c2          	lea    (%rdx,%rax,8),%r9
  434a5c:	44 89 5f 20          	mov    %r11d,0x20(%rdi)
  434a60:	4a 8d 3c d2          	lea    (%rdx,%r10,8),%rdi
  434a64:	49 c7 01 00 00 00 00 	movq   $0x0,(%r9)
  434a6b:	48 8b 0f             	mov    (%rdi),%rcx
  434a6e:	48 85 c9             	test   %rcx,%rcx
  434a71:	74 27                	je     434a9a <lh_insert+0x14a>
  434a73:	48 8b 41 10          	mov    0x10(%rcx),%rax
  434a77:	31 d2                	xor    %edx,%edx
  434a79:	49 f7 f0             	div    %r8
  434a7c:	49 39 d2             	cmp    %rdx,%r10
  434a7f:	74 7f                	je     434b00 <lh_insert+0x1b0>
  434a81:	48 8b 41 08          	mov    0x8(%rcx),%rax
  434a85:	48 89 07             	mov    %rax,(%rdi)
  434a88:	49 8b 01             	mov    (%r9),%rax
  434a8b:	48 89 41 08          	mov    %rax,0x8(%rcx)
  434a8f:	49 89 09             	mov    %rcx,(%r9)
  434a92:	48 8b 0f             	mov    (%rdi),%rcx
  434a95:	48 85 c9             	test   %rcx,%rcx
  434a98:	75 d9                	jne    434a73 <lh_insert+0x123>
  434a9a:	41 39 db             	cmp    %ebx,%r11d
  434a9d:	0f 82 e5 fe ff ff    	jb     434988 <lh_insert+0x38>
  434aa3:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
  434aa7:	8d 1c 36             	lea    (%rsi,%rsi,1),%ebx
  434aaa:	b9 5b 01 00 00       	mov    $0x15b,%ecx
  434aaf:	c1 e6 04             	shl    $0x4,%esi
  434ab2:	ba 90 11 45 00       	mov    $0x451190,%edx
  434ab7:	e8 74 0a ff ff       	callq  425530 <CRYPTO_realloc>
  434abc:	48 85 c0             	test   %rax,%rax
  434abf:	0f 84 88 00 00 00    	je     434b4d <lh_insert+0x1fd>
  434ac5:	8b 75 1c             	mov    0x1c(%rbp),%esi
  434ac8:	39 f3                	cmp    %esi,%ebx
  434aca:	89 f2                	mov    %esi,%edx
  434acc:	76 13                	jbe    434ae1 <lh_insert+0x191>
  434ace:	66 90                	xchg   %ax,%ax
  434ad0:	89 d1                	mov    %edx,%ecx
  434ad2:	83 c2 01             	add    $0x1,%edx
  434ad5:	39 d3                	cmp    %edx,%ebx
  434ad7:	48 c7 04 c8 00 00 00 	movq   $0x0,(%rax,%rcx,8)
  434ade:	00 
  434adf:	75 ef                	jne    434ad0 <lh_insert+0x180>
  434ae1:	89 75 24             	mov    %esi,0x24(%rbp)
  434ae4:	89 5d 1c             	mov    %ebx,0x1c(%rbp)
  434ae7:	48 83 45 48 01       	addq   $0x1,0x48(%rbp)
  434aec:	c7 45 20 00 00 00 00 	movl   $0x0,0x20(%rbp)
  434af3:	48 89 45 00          	mov    %rax,0x0(%rbp)
  434af7:	e9 8c fe ff ff       	jmpq   434988 <lh_insert+0x38>
  434afc:	0f 1f 40 00          	nopl   0x0(%rax)
  434b00:	48 8d 79 08          	lea    0x8(%rcx),%rdi
  434b04:	e9 62 ff ff ff       	jmpq   434a6b <lh_insert+0x11b>
  434b09:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  434b10:	ba c1 00 00 00       	mov    $0xc1,%edx
  434b15:	be 90 11 45 00       	mov    $0x451190,%esi
  434b1a:	bf 18 00 00 00       	mov    $0x18,%edi
  434b1f:	e8 dc 08 ff ff       	callq  425400 <CRYPTO_malloc>
  434b24:	48 85 c0             	test   %rax,%rax
  434b27:	74 37                	je     434b60 <lh_insert+0x210>
  434b29:	4c 89 30             	mov    %r14,(%rax)
  434b2c:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  434b33:	00 
  434b34:	4c 89 60 10          	mov    %r12,0x10(%rax)
  434b38:	49 89 45 00          	mov    %rax,0x0(%r13)
  434b3c:	31 c0                	xor    %eax,%eax
  434b3e:	48 83 45 70 01       	addq   $0x1,0x70(%rbp)
  434b43:	48 83 45 38 01       	addq   $0x1,0x38(%rbp)
  434b48:	e9 cc fe ff ff       	jmpq   434a19 <lh_insert+0xc9>
  434b4d:	83 85 a8 00 00 00 01 	addl   $0x1,0xa8(%rbp)
  434b54:	c7 45 20 00 00 00 00 	movl   $0x0,0x20(%rbp)
  434b5b:	e9 28 fe ff ff       	jmpq   434988 <lh_insert+0x38>
  434b60:	83 85 a8 00 00 00 01 	addl   $0x1,0xa8(%rbp)
  434b67:	e9 ad fe ff ff       	jmpq   434a19 <lh_insert+0xc9>
  434b6c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000434b70 <lh_delete>:
  434b70:	41 57                	push   %r15
  434b72:	41 56                	push   %r14
  434b74:	49 89 f6             	mov    %rsi,%r14
  434b77:	41 55                	push   %r13
  434b79:	41 54                	push   %r12
  434b7b:	55                   	push   %rbp
  434b7c:	53                   	push   %rbx
  434b7d:	48 89 fd             	mov    %rdi,%rbp
  434b80:	48 83 ec 08          	sub    $0x8,%rsp
  434b84:	c7 87 a8 00 00 00 00 	movl   $0x0,0xa8(%rdi)
  434b8b:	00 00 00 
  434b8e:	48 89 f7             	mov    %rsi,%rdi
  434b91:	ff 55 10             	callq  *0x10(%rbp)
  434b94:	8b 4d 24             	mov    0x24(%rbp),%ecx
  434b97:	31 d2                	xor    %edx,%edx
  434b99:	49 89 c4             	mov    %rax,%r12
  434b9c:	48 83 45 60 01       	addq   $0x1,0x60(%rbp)
  434ba1:	48 f7 f1             	div    %rcx
  434ba4:	8b 45 20             	mov    0x20(%rbp),%eax
  434ba7:	48 39 c2             	cmp    %rax,%rdx
  434baa:	73 0b                	jae    434bb7 <lh_delete+0x47>
  434bac:	8b 4d 1c             	mov    0x1c(%rbp),%ecx
  434baf:	4c 89 e0             	mov    %r12,%rax
  434bb2:	31 d2                	xor    %edx,%edx
  434bb4:	48 f7 f1             	div    %rcx
  434bb7:	48 8b 45 00          	mov    0x0(%rbp),%rax
  434bbb:	48 63 d2             	movslq %edx,%rdx
  434bbe:	4c 8b 7d 08          	mov    0x8(%rbp),%r15
  434bc2:	4c 8d 2c d0          	lea    (%rax,%rdx,8),%r13
  434bc6:	49 8b 5d 00          	mov    0x0(%r13),%rbx
  434bca:	48 85 db             	test   %rbx,%rbx
  434bcd:	75 1a                	jne    434be9 <lh_delete+0x79>
  434bcf:	e9 fc 00 00 00       	jmpq   434cd0 <lh_delete+0x160>
  434bd4:	0f 1f 40 00          	nopl   0x0(%rax)
  434bd8:	4c 8d 6b 08          	lea    0x8(%rbx),%r13
  434bdc:	48 8b 5b 08          	mov    0x8(%rbx),%rbx
  434be0:	48 85 db             	test   %rbx,%rbx
  434be3:	0f 84 e7 00 00 00    	je     434cd0 <lh_delete+0x160>
  434be9:	48 83 85 a0 00 00 00 	addq   $0x1,0xa0(%rbp)
  434bf0:	01 
  434bf1:	4c 3b 63 10          	cmp    0x10(%rbx),%r12
  434bf5:	75 e1                	jne    434bd8 <lh_delete+0x68>
  434bf7:	48 83 45 68 01       	addq   $0x1,0x68(%rbp)
  434bfc:	4c 89 f6             	mov    %r14,%rsi
  434bff:	48 8b 3b             	mov    (%rbx),%rdi
  434c02:	41 ff d7             	callq  *%r15
  434c05:	85 c0                	test   %eax,%eax
  434c07:	75 cf                	jne    434bd8 <lh_delete+0x68>
  434c09:	49 8b 7d 00          	mov    0x0(%r13),%rdi
  434c0d:	48 85 ff             	test   %rdi,%rdi
  434c10:	0f 84 ba 00 00 00    	je     434cd0 <lh_delete+0x160>
  434c16:	48 8b 47 08          	mov    0x8(%rdi),%rax
  434c1a:	49 89 45 00          	mov    %rax,0x0(%r13)
  434c1e:	48 8b 1f             	mov    (%rdi),%rbx
  434c21:	e8 3a 0b ff ff       	callq  425760 <CRYPTO_free>
  434c26:	48 8b 45 38          	mov    0x38(%rbp),%rax
  434c2a:	8b 75 18             	mov    0x18(%rbp),%esi
  434c2d:	48 83 85 80 00 00 00 	addq   $0x1,0x80(%rbp)
  434c34:	01 
  434c35:	49 89 dc             	mov    %rbx,%r12
  434c38:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  434c3c:	83 fe 10             	cmp    $0x10,%esi
  434c3f:	48 89 55 38          	mov    %rdx,0x38(%rbp)
  434c43:	76 14                	jbe    434c59 <lh_delete+0xe9>
  434c45:	48 89 d0             	mov    %rdx,%rax
  434c48:	89 f1                	mov    %esi,%ecx
  434c4a:	31 d2                	xor    %edx,%edx
  434c4c:	48 c1 e0 08          	shl    $0x8,%rax
  434c50:	48 f7 f1             	div    %rcx
  434c53:	48 39 45 30          	cmp    %rax,0x30(%rbp)
  434c57:	73 12                	jae    434c6b <lh_delete+0xfb>
  434c59:	48 83 c4 08          	add    $0x8,%rsp
  434c5d:	4c 89 e0             	mov    %r12,%rax
  434c60:	5b                   	pop    %rbx
  434c61:	5d                   	pop    %rbp
  434c62:	41 5c                	pop    %r12
  434c64:	41 5d                	pop    %r13
  434c66:	41 5e                	pop    %r14
  434c68:	41 5f                	pop    %r15
  434c6a:	c3                   	retq   
  434c6b:	8b 45 20             	mov    0x20(%rbp),%eax
  434c6e:	8b 4d 24             	mov    0x24(%rbp),%ecx
  434c71:	48 8b 55 00          	mov    0x0(%rbp),%rdx
  434c75:	8d 7c 08 ff          	lea    -0x1(%rax,%rcx,1),%edi
  434c79:	85 c0                	test   %eax,%eax
  434c7b:	48 8d 14 fa          	lea    (%rdx,%rdi,8),%rdx
  434c7f:	4c 8b 2a             	mov    (%rdx),%r13
  434c82:	48 c7 02 00 00 00 00 	movq   $0x0,(%rdx)
  434c89:	74 55                	je     434ce0 <lh_delete+0x170>
  434c8b:	8d 50 ff             	lea    -0x1(%rax),%edx
  434c8e:	48 8b 4d 00          	mov    0x0(%rbp),%rcx
  434c92:	89 55 20             	mov    %edx,0x20(%rbp)
  434c95:	48 63 c2             	movslq %edx,%rax
  434c98:	83 ee 01             	sub    $0x1,%esi
  434c9b:	48 83 45 50 01       	addq   $0x1,0x50(%rbp)
  434ca0:	48 8d 04 c1          	lea    (%rcx,%rax,8),%rax
  434ca4:	89 75 18             	mov    %esi,0x18(%rbp)
  434ca7:	48 8b 10             	mov    (%rax),%rdx
  434caa:	48 85 d2             	test   %rdx,%rdx
  434cad:	75 0c                	jne    434cbb <lh_delete+0x14b>
  434caf:	eb 73                	jmp    434d24 <lh_delete+0x1b4>
  434cb1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  434cb8:	48 89 c2             	mov    %rax,%rdx
  434cbb:	48 8b 42 08          	mov    0x8(%rdx),%rax
  434cbf:	48 85 c0             	test   %rax,%rax
  434cc2:	75 f4                	jne    434cb8 <lh_delete+0x148>
  434cc4:	4c 89 6a 08          	mov    %r13,0x8(%rdx)
  434cc8:	49 89 dc             	mov    %rbx,%r12
  434ccb:	eb 8c                	jmp    434c59 <lh_delete+0xe9>
  434ccd:	0f 1f 00             	nopl   (%rax)
  434cd0:	48 83 85 88 00 00 00 	addq   $0x1,0x88(%rbp)
  434cd7:	01 
  434cd8:	45 31 e4             	xor    %r12d,%r12d
  434cdb:	e9 79 ff ff ff       	jmpq   434c59 <lh_delete+0xe9>
  434ce0:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
  434ce4:	8d 34 cd 00 00 00 00 	lea    0x0(,%rcx,8),%esi
  434ceb:	ba 90 11 45 00       	mov    $0x451190,%edx
  434cf0:	b9 77 01 00 00       	mov    $0x177,%ecx
  434cf5:	e8 36 08 ff ff       	callq  425530 <CRYPTO_realloc>
  434cfa:	48 85 c0             	test   %rax,%rax
  434cfd:	74 30                	je     434d2f <lh_delete+0x1bf>
  434cff:	8b 55 24             	mov    0x24(%rbp),%edx
  434d02:	48 83 45 58 01       	addq   $0x1,0x58(%rbp)
  434d07:	48 89 c1             	mov    %rax,%rcx
  434d0a:	d1 6d 1c             	shrl   0x1c(%rbp)
  434d0d:	48 89 45 00          	mov    %rax,0x0(%rbp)
  434d11:	8b 75 18             	mov    0x18(%rbp),%esi
  434d14:	d1 ea                	shr    %edx
  434d16:	89 55 24             	mov    %edx,0x24(%rbp)
  434d19:	83 ea 01             	sub    $0x1,%edx
  434d1c:	89 55 20             	mov    %edx,0x20(%rbp)
  434d1f:	e9 71 ff ff ff       	jmpq   434c95 <lh_delete+0x125>
  434d24:	4c 89 28             	mov    %r13,(%rax)
  434d27:	49 89 dc             	mov    %rbx,%r12
  434d2a:	e9 2a ff ff ff       	jmpq   434c59 <lh_delete+0xe9>
  434d2f:	83 85 a8 00 00 00 01 	addl   $0x1,0xa8(%rbp)
  434d36:	e9 1e ff ff ff       	jmpq   434c59 <lh_delete+0xe9>
  434d3b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000434d40 <lh_retrieve>:
  434d40:	41 57                	push   %r15
  434d42:	41 56                	push   %r14
  434d44:	49 89 f6             	mov    %rsi,%r14
  434d47:	41 55                	push   %r13
  434d49:	41 54                	push   %r12
  434d4b:	55                   	push   %rbp
  434d4c:	53                   	push   %rbx
  434d4d:	48 89 fd             	mov    %rdi,%rbp
  434d50:	48 83 ec 08          	sub    $0x8,%rsp
  434d54:	c7 87 a8 00 00 00 00 	movl   $0x0,0xa8(%rdi)
  434d5b:	00 00 00 
  434d5e:	48 89 f7             	mov    %rsi,%rdi
  434d61:	ff 55 10             	callq  *0x10(%rbp)
  434d64:	8b 4d 24             	mov    0x24(%rbp),%ecx
  434d67:	31 d2                	xor    %edx,%edx
  434d69:	49 89 c4             	mov    %rax,%r12
  434d6c:	48 83 45 60 01       	addq   $0x1,0x60(%rbp)
  434d71:	48 f7 f1             	div    %rcx
  434d74:	8b 45 20             	mov    0x20(%rbp),%eax
  434d77:	48 39 c2             	cmp    %rax,%rdx
  434d7a:	73 0b                	jae    434d87 <lh_retrieve+0x47>
  434d7c:	8b 4d 1c             	mov    0x1c(%rbp),%ecx
  434d7f:	4c 89 e0             	mov    %r12,%rax
  434d82:	31 d2                	xor    %edx,%edx
  434d84:	48 f7 f1             	div    %rcx
  434d87:	48 8b 45 00          	mov    0x0(%rbp),%rax
  434d8b:	48 63 d2             	movslq %edx,%rdx
  434d8e:	4c 8b 7d 08          	mov    0x8(%rbp),%r15
  434d92:	4c 8d 2c d0          	lea    (%rax,%rdx,8),%r13
  434d96:	49 8b 5d 00          	mov    0x0(%r13),%rbx
  434d9a:	48 85 db             	test   %rbx,%rbx
  434d9d:	75 16                	jne    434db5 <lh_retrieve+0x75>
  434d9f:	eb 5f                	jmp    434e00 <lh_retrieve+0xc0>
  434da1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  434da8:	4c 8d 6b 08          	lea    0x8(%rbx),%r13
  434dac:	48 8b 5b 08          	mov    0x8(%rbx),%rbx
  434db0:	48 85 db             	test   %rbx,%rbx
  434db3:	74 4b                	je     434e00 <lh_retrieve+0xc0>
  434db5:	48 83 85 a0 00 00 00 	addq   $0x1,0xa0(%rbp)
  434dbc:	01 
  434dbd:	4c 3b 63 10          	cmp    0x10(%rbx),%r12
  434dc1:	75 e5                	jne    434da8 <lh_retrieve+0x68>
  434dc3:	48 83 45 68 01       	addq   $0x1,0x68(%rbp)
  434dc8:	4c 89 f6             	mov    %r14,%rsi
  434dcb:	48 8b 3b             	mov    (%rbx),%rdi
  434dce:	41 ff d7             	callq  *%r15
  434dd1:	85 c0                	test   %eax,%eax
  434dd3:	75 d3                	jne    434da8 <lh_retrieve+0x68>
  434dd5:	49 8b 45 00          	mov    0x0(%r13),%rax
  434dd9:	48 85 c0             	test   %rax,%rax
  434ddc:	74 22                	je     434e00 <lh_retrieve+0xc0>
  434dde:	48 8b 00             	mov    (%rax),%rax
  434de1:	48 83 85 90 00 00 00 	addq   $0x1,0x90(%rbp)
  434de8:	01 
  434de9:	48 83 c4 08          	add    $0x8,%rsp
  434ded:	5b                   	pop    %rbx
  434dee:	5d                   	pop    %rbp
  434def:	41 5c                	pop    %r12
  434df1:	41 5d                	pop    %r13
  434df3:	41 5e                	pop    %r14
  434df5:	41 5f                	pop    %r15
  434df7:	c3                   	retq   
  434df8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  434dff:	00 
  434e00:	48 83 85 98 00 00 00 	addq   $0x1,0x98(%rbp)
  434e07:	01 
  434e08:	31 c0                	xor    %eax,%eax
  434e0a:	eb dd                	jmp    434de9 <lh_retrieve+0xa9>
  434e0c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000434e10 <lh_doall>:
  434e10:	48 85 ff             	test   %rdi,%rdi
  434e13:	74 5a                	je     434e6f <lh_doall+0x5f>
  434e15:	41 56                	push   %r14
  434e17:	41 55                	push   %r13
  434e19:	41 54                	push   %r12
  434e1b:	55                   	push   %rbp
  434e1c:	53                   	push   %rbx
  434e1d:	44 8b 67 18          	mov    0x18(%rdi),%r12d
  434e21:	41 83 ec 01          	sub    $0x1,%r12d
  434e25:	78 40                	js     434e67 <lh_doall+0x57>
  434e27:	4d 63 ec             	movslq %r12d,%r13
  434e2a:	48 89 f5             	mov    %rsi,%rbp
  434e2d:	49 89 fe             	mov    %rdi,%r14
  434e30:	49 c1 e5 03          	shl    $0x3,%r13
  434e34:	0f 1f 40 00          	nopl   0x0(%rax)
  434e38:	49 8b 06             	mov    (%r14),%rax
  434e3b:	4a 8b 04 28          	mov    (%rax,%r13,1),%rax
  434e3f:	48 85 c0             	test   %rax,%rax
  434e42:	74 15                	je     434e59 <lh_doall+0x49>
  434e44:	0f 1f 40 00          	nopl   0x0(%rax)
  434e48:	48 8b 58 08          	mov    0x8(%rax),%rbx
  434e4c:	48 8b 38             	mov    (%rax),%rdi
  434e4f:	ff d5                	callq  *%rbp
  434e51:	48 85 db             	test   %rbx,%rbx
  434e54:	48 89 d8             	mov    %rbx,%rax
  434e57:	75 ef                	jne    434e48 <lh_doall+0x38>
  434e59:	41 83 ec 01          	sub    $0x1,%r12d
  434e5d:	49 83 ed 08          	sub    $0x8,%r13
  434e61:	41 83 fc ff          	cmp    $0xffffffff,%r12d
  434e65:	75 d1                	jne    434e38 <lh_doall+0x28>
  434e67:	5b                   	pop    %rbx
  434e68:	5d                   	pop    %rbp
  434e69:	41 5c                	pop    %r12
  434e6b:	41 5d                	pop    %r13
  434e6d:	41 5e                	pop    %r14
  434e6f:	f3 c3                	repz retq 
  434e71:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  434e78:	0f 1f 84 00 00 00 00 
  434e7f:	00 

0000000000434e80 <lh_doall_arg>:
  434e80:	48 85 ff             	test   %rdi,%rdi
  434e83:	74 6b                	je     434ef0 <lh_doall_arg+0x70>
  434e85:	41 57                	push   %r15
  434e87:	41 56                	push   %r14
  434e89:	41 55                	push   %r13
  434e8b:	41 54                	push   %r12
  434e8d:	55                   	push   %rbp
  434e8e:	53                   	push   %rbx
  434e8f:	48 83 ec 08          	sub    $0x8,%rsp
  434e93:	44 8b 6f 18          	mov    0x18(%rdi),%r13d
  434e97:	41 83 ed 01          	sub    $0x1,%r13d
  434e9b:	78 45                	js     434ee2 <lh_doall_arg+0x62>
  434e9d:	4d 63 f5             	movslq %r13d,%r14
  434ea0:	49 89 d4             	mov    %rdx,%r12
  434ea3:	48 89 f5             	mov    %rsi,%rbp
  434ea6:	49 89 ff             	mov    %rdi,%r15
  434ea9:	49 c1 e6 03          	shl    $0x3,%r14
  434ead:	0f 1f 00             	nopl   (%rax)
  434eb0:	49 8b 07             	mov    (%r15),%rax
  434eb3:	4a 8b 04 30          	mov    (%rax,%r14,1),%rax
  434eb7:	48 85 c0             	test   %rax,%rax
  434eba:	74 18                	je     434ed4 <lh_doall_arg+0x54>
  434ebc:	0f 1f 40 00          	nopl   0x0(%rax)
  434ec0:	48 8b 58 08          	mov    0x8(%rax),%rbx
  434ec4:	48 8b 38             	mov    (%rax),%rdi
  434ec7:	4c 89 e6             	mov    %r12,%rsi
  434eca:	ff d5                	callq  *%rbp
  434ecc:	48 85 db             	test   %rbx,%rbx
  434ecf:	48 89 d8             	mov    %rbx,%rax
  434ed2:	75 ec                	jne    434ec0 <lh_doall_arg+0x40>
  434ed4:	41 83 ed 01          	sub    $0x1,%r13d
  434ed8:	49 83 ee 08          	sub    $0x8,%r14
  434edc:	41 83 fd ff          	cmp    $0xffffffff,%r13d
  434ee0:	75 ce                	jne    434eb0 <lh_doall_arg+0x30>
  434ee2:	48 83 c4 08          	add    $0x8,%rsp
  434ee6:	5b                   	pop    %rbx
  434ee7:	5d                   	pop    %rbp
  434ee8:	41 5c                	pop    %r12
  434eea:	41 5d                	pop    %r13
  434eec:	41 5e                	pop    %r14
  434eee:	41 5f                	pop    %r15
  434ef0:	f3 c3                	repz retq 
  434ef2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  434ef9:	1f 84 00 00 00 00 00 

0000000000434f00 <lh_num_items>:
  434f00:	48 85 ff             	test   %rdi,%rdi
  434f03:	74 0b                	je     434f10 <lh_num_items+0x10>
  434f05:	48 8b 47 38          	mov    0x38(%rdi),%rax
  434f09:	c3                   	retq   
  434f0a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  434f10:	31 c0                	xor    %eax,%eax
  434f12:	c3                   	retq   
  434f13:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  434f1a:	00 00 00 
  434f1d:	0f 1f 00             	nopl   (%rax)

0000000000434f20 <i2d_ASN1_OBJECT>:
  434f20:	41 54                	push   %r12
  434f22:	55                   	push   %rbp
  434f23:	45 31 e4             	xor    %r12d,%r12d
  434f26:	53                   	push   %rbx
  434f27:	48 89 fb             	mov    %rdi,%rbx
  434f2a:	48 83 ec 10          	sub    $0x10,%rsp
  434f2e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  434f35:	00 00 
  434f37:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  434f3c:	31 c0                	xor    %eax,%eax
  434f3e:	48 85 ff             	test   %rdi,%rdi
  434f41:	74 5b                	je     434f9e <i2d_ASN1_OBJECT+0x7e>
  434f43:	48 83 7f 18 00       	cmpq   $0x0,0x18(%rdi)
  434f48:	74 54                	je     434f9e <i2d_ASN1_OBJECT+0x7e>
  434f4a:	48 89 f5             	mov    %rsi,%rbp
  434f4d:	8b 77 14             	mov    0x14(%rdi),%esi
  434f50:	ba 06 00 00 00       	mov    $0x6,%edx
  434f55:	31 ff                	xor    %edi,%edi
  434f57:	e8 44 11 00 00       	callq  4360a0 <ASN1_object_size>
  434f5c:	48 85 ed             	test   %rbp,%rbp
  434f5f:	41 89 c4             	mov    %eax,%r12d
  434f62:	74 3a                	je     434f9e <i2d_ASN1_OBJECT+0x7e>
  434f64:	48 8b 45 00          	mov    0x0(%rbp),%rax
  434f68:	8b 53 14             	mov    0x14(%rbx),%edx
  434f6b:	45 31 c0             	xor    %r8d,%r8d
  434f6e:	b9 06 00 00 00       	mov    $0x6,%ecx
  434f73:	31 f6                	xor    %esi,%esi
  434f75:	48 89 e7             	mov    %rsp,%rdi
  434f78:	48 89 04 24          	mov    %rax,(%rsp)
  434f7c:	e8 ef 0f 00 00       	callq  435f70 <ASN1_put_object>
  434f81:	48 63 53 14          	movslq 0x14(%rbx),%rdx
  434f85:	48 8b 73 18          	mov    0x18(%rbx),%rsi
  434f89:	48 8b 3c 24          	mov    (%rsp),%rdi
  434f8d:	e8 5e 20 fd ff       	callq  406ff0 <memcpy@plt>
  434f92:	48 63 43 14          	movslq 0x14(%rbx),%rax
  434f96:	48 03 04 24          	add    (%rsp),%rax
  434f9a:	48 89 45 00          	mov    %rax,0x0(%rbp)
  434f9e:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  434fa3:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  434faa:	00 00 
  434fac:	44 89 e0             	mov    %r12d,%eax
  434faf:	75 09                	jne    434fba <i2d_ASN1_OBJECT+0x9a>
  434fb1:	48 83 c4 10          	add    $0x10,%rsp
  434fb5:	5b                   	pop    %rbx
  434fb6:	5d                   	pop    %rbp
  434fb7:	41 5c                	pop    %r12
  434fb9:	c3                   	retq   
  434fba:	e8 01 1f fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  434fbf:	90                   	nop

0000000000434fc0 <a2d_ASN1_OBJECT>:
  434fc0:	41 57                	push   %r15
  434fc2:	41 56                	push   %r14
  434fc4:	41 55                	push   %r13
  434fc6:	41 54                	push   %r12
  434fc8:	55                   	push   %rbp
  434fc9:	53                   	push   %rbx
  434fca:	48 83 ec 68          	sub    $0x68,%rsp
  434fce:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  434fd5:	00 00 
  434fd7:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  434fdc:	31 c0                	xor    %eax,%eax
  434fde:	85 c9                	test   %ecx,%ecx
  434fe0:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  434fe5:	89 74 24 1c          	mov    %esi,0x1c(%rsp)
  434fe9:	0f 84 94 02 00 00    	je     435283 <a2d_ASN1_OBJECT+0x2c3>
  434fef:	83 f9 ff             	cmp    $0xffffffff,%ecx
  434ff2:	0f 84 00 03 00 00    	je     4352f8 <a2d_ASN1_OBJECT+0x338>
  434ff8:	44 0f be 22          	movsbl (%rdx),%r12d
  434ffc:	41 8d 44 24 d0       	lea    -0x30(%r12),%eax
  435001:	83 f8 02             	cmp    $0x2,%eax
  435004:	89 44 24 30          	mov    %eax,0x30(%rsp)
  435008:	0f 87 c2 02 00 00    	ja     4352d0 <a2d_ASN1_OBJECT+0x310>
  43500e:	83 f9 01             	cmp    $0x1,%ecx
  435011:	0f 8e d5 03 00 00    	jle    4353ec <a2d_ASN1_OBJECT+0x42c>
  435017:	83 e9 02             	sub    $0x2,%ecx
  43501a:	4c 8d 62 02          	lea    0x2(%rdx),%r12
  43501e:	0f be 42 01          	movsbl 0x1(%rdx),%eax
  435022:	41 89 ce             	mov    %ecx,%r14d
  435025:	0f 84 1d 04 00 00    	je     435448 <a2d_ASN1_OBJECT+0x488>
  43502b:	83 f8 20             	cmp    $0x20,%eax
  43502e:	74 09                	je     435039 <a2d_ASN1_OBJECT+0x79>
  435030:	83 f8 2e             	cmp    $0x2e,%eax
  435033:	0f 85 f6 01 00 00    	jne    43522f <a2d_ASN1_OBJECT+0x26f>
  435039:	8b 4c 24 30          	mov    0x30(%rsp),%ecx
  43503d:	45 89 f7             	mov    %r14d,%r15d
  435040:	c7 44 24 34 18 00 00 	movl   $0x18,0x34(%rsp)
  435047:	00 
  435048:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%rsp)
  43504f:	00 
  435050:	31 db                	xor    %ebx,%ebx
  435052:	4d 89 e6             	mov    %r12,%r14
  435055:	48 63 c1             	movslq %ecx,%rax
  435058:	48 8d 04 80          	lea    (%rax,%rax,4),%rax
  43505c:	48 c1 e0 03          	shl    $0x3,%rax
  435060:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  435065:	8d 04 89             	lea    (%rcx,%rcx,4),%eax
  435068:	c1 e0 03             	shl    $0x3,%eax
  43506b:	48 98                	cltq   
  43506d:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
  435072:	48 8d 44 24 40       	lea    0x40(%rsp),%rax
  435077:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  43507c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  435081:	31 ed                	xor    %ebp,%ebp
  435083:	31 d2                	xor    %edx,%edx
  435085:	eb 65                	jmp    4350ec <a2d_ASN1_OBJECT+0x12c>
  435087:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  43508e:	00 00 
  435090:	85 d2                	test   %edx,%edx
  435092:	0f 85 8f 00 00 00    	jne    435127 <a2d_ASN1_OBJECT+0x167>
  435098:	48 85 db             	test   %rbx,%rbx
  43509b:	0f 84 0f 02 00 00    	je     4352b0 <a2d_ASN1_OBJECT+0x2f0>
  4350a1:	48 89 ee             	mov    %rbp,%rsi
  4350a4:	48 89 df             	mov    %rbx,%rdi
  4350a7:	e8 74 7b ff ff       	callq  42cc20 <BN_set_word>
  4350ac:	85 c0                	test   %eax,%eax
  4350ae:	0f 84 ac 01 00 00    	je     435260 <a2d_ASN1_OBJECT+0x2a0>
  4350b4:	ba 01 00 00 00       	mov    $0x1,%edx
  4350b9:	be 0a 00 00 00       	mov    $0xa,%esi
  4350be:	48 89 df             	mov    %rbx,%rdi
  4350c1:	89 14 24             	mov    %edx,(%rsp)
  4350c4:	e8 e7 99 ff ff       	callq  42eab0 <BN_mul_word>
  4350c9:	85 c0                	test   %eax,%eax
  4350cb:	0f 84 8f 01 00 00    	je     435260 <a2d_ASN1_OBJECT+0x2a0>
  4350d1:	49 63 f5             	movslq %r13d,%rsi
  4350d4:	48 89 df             	mov    %rbx,%rdi
  4350d7:	e8 54 97 ff ff       	callq  42e830 <BN_add_word>
  4350dc:	85 c0                	test   %eax,%eax
  4350de:	8b 14 24             	mov    (%rsp),%edx
  4350e1:	0f 84 79 01 00 00    	je     435260 <a2d_ASN1_OBJECT+0x2a0>
  4350e7:	45 85 ff             	test   %r15d,%r15d
  4350ea:	74 51                	je     43513d <a2d_ASN1_OBJECT+0x17d>
  4350ec:	49 83 c6 01          	add    $0x1,%r14
  4350f0:	45 0f be 66 ff       	movsbl -0x1(%r14),%r12d
  4350f5:	41 83 ef 01          	sub    $0x1,%r15d
  4350f9:	41 83 fc 2e          	cmp    $0x2e,%r12d
  4350fd:	74 3e                	je     43513d <a2d_ASN1_OBJECT+0x17d>
  4350ff:	41 83 fc 20          	cmp    $0x20,%r12d
  435103:	74 38                	je     43513d <a2d_ASN1_OBJECT+0x17d>
  435105:	45 8d 6c 24 d0       	lea    -0x30(%r12),%r13d
  43510a:	41 83 fd 09          	cmp    $0x9,%r13d
  43510e:	0f 87 b4 02 00 00    	ja     4353c8 <a2d_ASN1_OBJECT+0x408>
  435114:	48 b8 90 99 99 99 99 	movabs $0x1999999999999990,%rax
  43511b:	99 99 19 
  43511e:	48 39 c5             	cmp    %rax,%rbp
  435121:	0f 87 69 ff ff ff    	ja     435090 <a2d_ASN1_OBJECT+0xd0>
  435127:	85 d2                	test   %edx,%edx
  435129:	75 8e                	jne    4350b9 <a2d_ASN1_OBJECT+0xf9>
  43512b:	48 8d 44 ad 00       	lea    0x0(%rbp,%rbp,4),%rax
  435130:	4d 63 ed             	movslq %r13d,%r13
  435133:	45 85 ff             	test   %r15d,%r15d
  435136:	49 8d 6c 45 00       	lea    0x0(%r13,%rax,2),%rbp
  43513b:	75 af                	jne    4350ec <a2d_ASN1_OBJECT+0x12c>
  43513d:	8b 44 24 18          	mov    0x18(%rsp),%eax
  435141:	85 c0                	test   %eax,%eax
  435143:	0f 85 c7 01 00 00    	jne    435310 <a2d_ASN1_OBJECT+0x350>
  435149:	48 83 fd 27          	cmp    $0x27,%rbp
  43514d:	76 0b                	jbe    43515a <a2d_ASN1_OBJECT+0x19a>
  43514f:	83 7c 24 30 01       	cmpl   $0x1,0x30(%rsp)
  435154:	0f 8e 49 03 00 00    	jle    4354a3 <a2d_ASN1_OBJECT+0x4e3>
  43515a:	48 03 6c 24 28       	add    0x28(%rsp),%rbp
  43515f:	85 d2                	test   %edx,%edx
  435161:	0f 85 c1 02 00 00    	jne    435428 <a2d_ASN1_OBJECT+0x468>
  435167:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  43516c:	45 31 ed             	xor    %r13d,%r13d
  43516f:	90                   	nop
  435170:	89 ea                	mov    %ebp,%edx
  435172:	48 c1 ed 07          	shr    $0x7,%rbp
  435176:	41 83 c5 01          	add    $0x1,%r13d
  43517a:	83 e2 7f             	and    $0x7f,%edx
  43517d:	48 83 c0 01          	add    $0x1,%rax
  435181:	88 50 ff             	mov    %dl,-0x1(%rax)
  435184:	48 85 ed             	test   %rbp,%rbp
  435187:	75 e7                	jne    435170 <a2d_ASN1_OBJECT+0x1b0>
  435189:	48 83 7c 24 10 00    	cmpq   $0x0,0x10(%rsp)
  43518f:	0f 84 89 02 00 00    	je     43541e <a2d_ASN1_OBJECT+0x45e>
  435195:	8b 44 24 18          	mov    0x18(%rsp),%eax
  435199:	44 01 e8             	add    %r13d,%eax
  43519c:	3b 44 24 1c          	cmp    0x1c(%rsp),%eax
  4351a0:	0f 8f d9 02 00 00    	jg     43547f <a2d_ASN1_OBJECT+0x4bf>
  4351a6:	41 8d 75 ff          	lea    -0x1(%r13),%esi
  4351aa:	8b 44 24 18          	mov    0x18(%rsp),%eax
  4351ae:	85 f6                	test   %esi,%esi
  4351b0:	7e 45                	jle    4351f7 <a2d_ASN1_OBJECT+0x237>
  4351b2:	48 63 7c 24 18       	movslq 0x18(%rsp),%rdi
  4351b7:	48 63 f6             	movslq %esi,%rsi
  4351ba:	48 03 74 24 08       	add    0x8(%rsp),%rsi
  4351bf:	48 03 7c 24 10       	add    0x10(%rsp),%rdi
  4351c4:	45 8d 45 fe          	lea    -0x2(%r13),%r8d
  4351c8:	31 c0                	xor    %eax,%eax
  4351ca:	4d 89 c5             	mov    %r8,%r13
  4351cd:	49 83 c0 01          	add    $0x1,%r8
  4351d1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  4351d8:	0f b6 16             	movzbl (%rsi),%edx
  4351db:	48 83 ee 01          	sub    $0x1,%rsi
  4351df:	83 ca 80             	or     $0xffffff80,%edx
  4351e2:	88 14 07             	mov    %dl,(%rdi,%rax,1)
  4351e5:	48 83 c0 01          	add    $0x1,%rax
  4351e9:	4c 39 c0             	cmp    %r8,%rax
  4351ec:	75 ea                	jne    4351d8 <a2d_ASN1_OBJECT+0x218>
  4351ee:	8b 44 24 18          	mov    0x18(%rsp),%eax
  4351f2:	42 8d 44 28 01       	lea    0x1(%rax,%r13,1),%eax
  4351f7:	8d 48 01             	lea    0x1(%rax),%ecx
  4351fa:	48 98                	cltq   
  4351fc:	89 4c 24 18          	mov    %ecx,0x18(%rsp)
  435200:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  435205:	0f b6 11             	movzbl (%rcx),%edx
  435208:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  43520d:	88 14 01             	mov    %dl,(%rcx,%rax,1)
  435210:	45 85 ff             	test   %r15d,%r15d
  435213:	0f 84 40 02 00 00    	je     435459 <a2d_ASN1_OBJECT+0x499>
  435219:	41 83 fc 20          	cmp    $0x20,%r12d
  43521d:	0f 84 5e fe ff ff    	je     435081 <a2d_ASN1_OBJECT+0xc1>
  435223:	41 83 fc 2e          	cmp    $0x2e,%r12d
  435227:	0f 84 54 fe ff ff    	je     435081 <a2d_ASN1_OBJECT+0xc1>
  43522d:	eb 11                	jmp    435240 <a2d_ASN1_OBJECT+0x280>
  43522f:	48 8d 44 24 40       	lea    0x40(%rsp),%rax
  435234:	31 db                	xor    %ebx,%ebx
  435236:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  43523b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  435240:	41 b8 7d 00 00 00    	mov    $0x7d,%r8d
  435246:	b9 c9 11 45 00       	mov    $0x4511c9,%ecx
  43524b:	ba 83 00 00 00       	mov    $0x83,%edx
  435250:	be 64 00 00 00       	mov    $0x64,%esi
  435255:	bf 0d 00 00 00       	mov    $0xd,%edi
  43525a:	e8 f1 30 ff ff       	callq  428350 <ERR_put_error>
  43525f:	90                   	nop
  435260:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  435265:	48 39 4c 24 08       	cmp    %rcx,0x8(%rsp)
  43526a:	74 0a                	je     435276 <a2d_ASN1_OBJECT+0x2b6>
  43526c:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  435271:	e8 ea 04 ff ff       	callq  425760 <CRYPTO_free>
  435276:	48 85 db             	test   %rbx,%rbx
  435279:	74 08                	je     435283 <a2d_ASN1_OBJECT+0x2c3>
  43527b:	48 89 df             	mov    %rbx,%rdi
  43527e:	e8 ad 73 ff ff       	callq  42c630 <BN_free>
  435283:	31 c0                	xor    %eax,%eax
  435285:	48 8b 4c 24 58       	mov    0x58(%rsp),%rcx
  43528a:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  435291:	00 00 
  435293:	0f 85 2e 02 00 00    	jne    4354c7 <a2d_ASN1_OBJECT+0x507>
  435299:	48 83 c4 68          	add    $0x68,%rsp
  43529d:	5b                   	pop    %rbx
  43529e:	5d                   	pop    %rbp
  43529f:	41 5c                	pop    %r12
  4352a1:	41 5d                	pop    %r13
  4352a3:	41 5e                	pop    %r14
  4352a5:	41 5f                	pop    %r15
  4352a7:	c3                   	retq   
  4352a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4352af:	00 
  4352b0:	e8 eb 73 ff ff       	callq  42c6a0 <BN_new>
  4352b5:	48 85 c0             	test   %rax,%rax
  4352b8:	48 89 c3             	mov    %rax,%rbx
  4352bb:	0f 85 e0 fd ff ff    	jne    4350a1 <a2d_ASN1_OBJECT+0xe1>
  4352c1:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  4352c6:	48 39 4c 24 08       	cmp    %rcx,0x8(%rsp)
  4352cb:	75 9f                	jne    43526c <a2d_ASN1_OBJECT+0x2ac>
  4352cd:	eb b4                	jmp    435283 <a2d_ASN1_OBJECT+0x2c3>
  4352cf:	90                   	nop
  4352d0:	41 b8 6d 00 00 00    	mov    $0x6d,%r8d
  4352d6:	b9 c9 11 45 00       	mov    $0x4511c9,%ecx
  4352db:	ba 7a 00 00 00       	mov    $0x7a,%edx
  4352e0:	be 64 00 00 00       	mov    $0x64,%esi
  4352e5:	bf 0d 00 00 00       	mov    $0xd,%edi
  4352ea:	e8 61 30 ff ff       	callq  428350 <ERR_put_error>
  4352ef:	eb 92                	jmp    435283 <a2d_ASN1_OBJECT+0x2c3>
  4352f1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  4352f8:	48 89 d7             	mov    %rdx,%rdi
  4352fb:	48 89 14 24          	mov    %rdx,(%rsp)
  4352ff:	e8 ac 1a fd ff       	callq  406db0 <strlen@plt>
  435304:	48 8b 14 24          	mov    (%rsp),%rdx
  435308:	89 c1                	mov    %eax,%ecx
  43530a:	e9 e9 fc ff ff       	jmpq   434ff8 <a2d_ASN1_OBJECT+0x38>
  43530f:	90                   	nop
  435310:	85 d2                	test   %edx,%edx
  435312:	0f 84 4f fe ff ff    	je     435167 <a2d_ASN1_OBJECT+0x1a7>
  435318:	48 89 df             	mov    %rbx,%rdi
  43531b:	e8 60 71 ff ff       	callq  42c480 <BN_num_bits>
  435320:	8d 70 06             	lea    0x6(%rax),%esi
  435323:	b8 93 24 49 92       	mov    $0x92492493,%eax
  435328:	f7 ee                	imul   %esi
  43532a:	44 8d 2c 32          	lea    (%rdx,%rsi,1),%r13d
  43532e:	c1 fe 1f             	sar    $0x1f,%esi
  435331:	41 c1 fd 02          	sar    $0x2,%r13d
  435335:	41 29 f5             	sub    %esi,%r13d
  435338:	44 3b 6c 24 34       	cmp    0x34(%rsp),%r13d
  43533d:	0f 8e cd 00 00 00    	jle    435410 <a2d_ASN1_OBJECT+0x450>
  435343:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  435348:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  43534d:	48 39 c8             	cmp    %rcx,%rax
  435350:	74 08                	je     43535a <a2d_ASN1_OBJECT+0x39a>
  435352:	48 89 c7             	mov    %rax,%rdi
  435355:	e8 06 04 ff ff       	callq  425760 <CRYPTO_free>
  43535a:	41 8d 45 20          	lea    0x20(%r13),%eax
  43535e:	ba b9 00 00 00       	mov    $0xb9,%edx
  435363:	be c9 11 45 00       	mov    $0x4511c9,%esi
  435368:	89 c7                	mov    %eax,%edi
  43536a:	89 44 24 34          	mov    %eax,0x34(%rsp)
  43536e:	e8 8d 00 ff ff       	callq  425400 <CRYPTO_malloc>
  435373:	48 85 c0             	test   %rax,%rax
  435376:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  43537b:	0f 84 eb fe ff ff    	je     43526c <a2d_ASN1_OBJECT+0x2ac>
  435381:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  435386:	41 8d 45 ff          	lea    -0x1(%r13),%eax
  43538a:	44 89 24 24          	mov    %r12d,(%rsp)
  43538e:	48 8d 44 01 01       	lea    0x1(%rcx,%rax,1),%rax
  435393:	49 89 cc             	mov    %rcx,%r12
  435396:	48 89 c5             	mov    %rax,%rbp
  435399:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  4353a0:	be 80 00 00 00       	mov    $0x80,%esi
  4353a5:	48 89 df             	mov    %rbx,%rdi
  4353a8:	49 83 c4 01          	add    $0x1,%r12
  4353ac:	e8 7f 93 ff ff       	callq  42e730 <BN_div_word>
  4353b1:	41 88 44 24 ff       	mov    %al,-0x1(%r12)
  4353b6:	49 39 ec             	cmp    %rbp,%r12
  4353b9:	75 e5                	jne    4353a0 <a2d_ASN1_OBJECT+0x3e0>
  4353bb:	44 8b 24 24          	mov    (%rsp),%r12d
  4353bf:	e9 c5 fd ff ff       	jmpq   435189 <a2d_ASN1_OBJECT+0x1c9>
  4353c4:	0f 1f 40 00          	nopl   0x0(%rax)
  4353c8:	41 b8 8b 00 00 00    	mov    $0x8b,%r8d
  4353ce:	b9 c9 11 45 00       	mov    $0x4511c9,%ecx
  4353d3:	ba 82 00 00 00       	mov    $0x82,%edx
  4353d8:	be 64 00 00 00       	mov    $0x64,%esi
  4353dd:	bf 0d 00 00 00       	mov    $0xd,%edi
  4353e2:	e8 69 2f ff ff       	callq  428350 <ERR_put_error>
  4353e7:	e9 74 fe ff ff       	jmpq   435260 <a2d_ASN1_OBJECT+0x2a0>
  4353ec:	41 b8 73 00 00 00    	mov    $0x73,%r8d
  4353f2:	b9 c9 11 45 00       	mov    $0x4511c9,%ecx
  4353f7:	ba 8a 00 00 00       	mov    $0x8a,%edx
  4353fc:	be 64 00 00 00       	mov    $0x64,%esi
  435401:	bf 0d 00 00 00       	mov    $0xd,%edi
  435406:	e8 45 2f ff ff       	callq  428350 <ERR_put_error>
  43540b:	e9 73 fe ff ff       	jmpq   435283 <a2d_ASN1_OBJECT+0x2c3>
  435410:	45 85 ed             	test   %r13d,%r13d
  435413:	0f 85 68 ff ff ff    	jne    435381 <a2d_ASN1_OBJECT+0x3c1>
  435419:	e9 6b fd ff ff       	jmpq   435189 <a2d_ASN1_OBJECT+0x1c9>
  43541e:	44 01 6c 24 18       	add    %r13d,0x18(%rsp)
  435423:	e9 e8 fd ff ff       	jmpq   435210 <a2d_ASN1_OBJECT+0x250>
  435428:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  43542d:	48 89 df             	mov    %rbx,%rdi
  435430:	e8 fb 93 ff ff       	callq  42e830 <BN_add_word>
  435435:	85 c0                	test   %eax,%eax
  435437:	0f 85 db fe ff ff    	jne    435318 <a2d_ASN1_OBJECT+0x358>
  43543d:	e9 1e fe ff ff       	jmpq   435260 <a2d_ASN1_OBJECT+0x2a0>
  435442:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  435448:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%rsp)
  43544f:	00 
  435450:	8b 44 24 18          	mov    0x18(%rsp),%eax
  435454:	e9 2c fe ff ff       	jmpq   435285 <a2d_ASN1_OBJECT+0x2c5>
  435459:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  43545e:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
  435463:	48 39 c8             	cmp    %rcx,%rax
  435466:	74 08                	je     435470 <a2d_ASN1_OBJECT+0x4b0>
  435468:	48 89 c7             	mov    %rax,%rdi
  43546b:	e8 f0 02 ff ff       	callq  425760 <CRYPTO_free>
  435470:	48 85 db             	test   %rbx,%rbx
  435473:	74 db                	je     435450 <a2d_ASN1_OBJECT+0x490>
  435475:	48 89 df             	mov    %rbx,%rdi
  435478:	e8 b3 71 ff ff       	callq  42c630 <BN_free>
  43547d:	eb d1                	jmp    435450 <a2d_ASN1_OBJECT+0x490>
  43547f:	41 b8 cf 00 00 00    	mov    $0xcf,%r8d
  435485:	b9 c9 11 45 00       	mov    $0x4511c9,%ecx
  43548a:	ba 6b 00 00 00       	mov    $0x6b,%edx
  43548f:	be 64 00 00 00       	mov    $0x64,%esi
  435494:	bf 0d 00 00 00       	mov    $0xd,%edi
  435499:	e8 b2 2e ff ff       	callq  428350 <ERR_put_error>
  43549e:	e9 bd fd ff ff       	jmpq   435260 <a2d_ASN1_OBJECT+0x2a0>
  4354a3:	41 b8 a3 00 00 00    	mov    $0xa3,%r8d
  4354a9:	b9 c9 11 45 00       	mov    $0x4511c9,%ecx
  4354ae:	ba 93 00 00 00       	mov    $0x93,%edx
  4354b3:	be 64 00 00 00       	mov    $0x64,%esi
  4354b8:	bf 0d 00 00 00       	mov    $0xd,%edi
  4354bd:	e8 8e 2e ff ff       	callq  428350 <ERR_put_error>
  4354c2:	e9 99 fd ff ff       	jmpq   435260 <a2d_ASN1_OBJECT+0x2a0>
  4354c7:	e8 f4 19 fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  4354cc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004354d0 <i2t_ASN1_OBJECT>:
  4354d0:	31 c9                	xor    %ecx,%ecx
  4354d2:	e9 79 5b ff ff       	jmpq   42b050 <OBJ_obj2txt>
  4354d7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4354de:	00 00 

00000000004354e0 <i2a_ASN1_OBJECT>:
  4354e0:	41 57                	push   %r15
  4354e2:	41 56                	push   %r14
  4354e4:	41 55                	push   %r13
  4354e6:	41 54                	push   %r12
  4354e8:	49 89 fd             	mov    %rdi,%r13
  4354eb:	55                   	push   %rbp
  4354ec:	53                   	push   %rbx
  4354ed:	48 89 f3             	mov    %rsi,%rbx
  4354f0:	48 83 ec 68          	sub    $0x68,%rsp
  4354f4:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  4354fb:	00 00 
  4354fd:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
  435502:	31 c0                	xor    %eax,%eax
  435504:	48 85 f6             	test   %rsi,%rsi
  435507:	74 3f                	je     435548 <i2a_ASN1_OBJECT+0x68>
  435509:	48 83 7e 18 00       	cmpq   $0x0,0x18(%rsi)
  43550e:	74 38                	je     435548 <i2a_ASN1_OBJECT+0x68>
  435510:	31 c9                	xor    %ecx,%ecx
  435512:	48 89 f2             	mov    %rsi,%rdx
  435515:	48 89 e7             	mov    %rsp,%rdi
  435518:	be 50 00 00 00       	mov    $0x50,%esi
  43551d:	49 89 e4             	mov    %rsp,%r12
  435520:	e8 2b 5b ff ff       	callq  42b050 <OBJ_obj2txt>
  435525:	83 f8 4f             	cmp    $0x4f,%eax
  435528:	89 c5                	mov    %eax,%ebp
  43552a:	7f 5c                	jg     435588 <i2a_ASN1_OBJECT+0xa8>
  43552c:	85 c0                	test   %eax,%eax
  43552e:	0f 8e a4 00 00 00    	jle    4355d8 <i2a_ASN1_OBJECT+0xf8>
  435534:	89 ea                	mov    %ebp,%edx
  435536:	4c 89 e6             	mov    %r12,%rsi
  435539:	4c 89 ef             	mov    %r13,%rdi
  43553c:	e8 7f ac ff ff       	callq  4301c0 <BIO_write>
  435541:	eb 19                	jmp    43555c <i2a_ASN1_OBJECT+0x7c>
  435543:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  435548:	ba 04 00 00 00       	mov    $0x4,%edx
  43554d:	be a1 df 43 00       	mov    $0x43dfa1,%esi
  435552:	4c 89 ef             	mov    %r13,%rdi
  435555:	e8 66 ac ff ff       	callq  4301c0 <BIO_write>
  43555a:	89 c5                	mov    %eax,%ebp
  43555c:	48 8b 4c 24 58       	mov    0x58(%rsp),%rcx
  435561:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  435568:	00 00 
  43556a:	89 e8                	mov    %ebp,%eax
  43556c:	0f 85 89 00 00 00    	jne    4355fb <i2a_ASN1_OBJECT+0x11b>
  435572:	48 83 c4 68          	add    $0x68,%rsp
  435576:	5b                   	pop    %rbx
  435577:	5d                   	pop    %rbp
  435578:	41 5c                	pop    %r12
  43557a:	41 5d                	pop    %r13
  43557c:	41 5e                	pop    %r14
  43557e:	41 5f                	pop    %r15
  435580:	c3                   	retq   
  435581:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  435588:	44 8d 78 01          	lea    0x1(%rax),%r15d
  43558c:	ba f5 00 00 00       	mov    $0xf5,%edx
  435591:	be c9 11 45 00       	mov    $0x4511c9,%esi
  435596:	44 89 ff             	mov    %r15d,%edi
  435599:	e8 62 fe fe ff       	callq  425400 <CRYPTO_malloc>
  43559e:	48 85 c0             	test   %rax,%rax
  4355a1:	49 89 c6             	mov    %rax,%r14
  4355a4:	74 4b                	je     4355f1 <i2a_ASN1_OBJECT+0x111>
  4355a6:	31 c9                	xor    %ecx,%ecx
  4355a8:	48 89 da             	mov    %rbx,%rdx
  4355ab:	44 89 fe             	mov    %r15d,%esi
  4355ae:	48 89 c7             	mov    %rax,%rdi
  4355b1:	e8 9a 5a ff ff       	callq  42b050 <OBJ_obj2txt>
  4355b6:	89 ea                	mov    %ebp,%edx
  4355b8:	4c 89 f6             	mov    %r14,%rsi
  4355bb:	4c 89 ef             	mov    %r13,%rdi
  4355be:	e8 fd ab ff ff       	callq  4301c0 <BIO_write>
  4355c3:	49 39 e6             	cmp    %rsp,%r14
  4355c6:	74 94                	je     43555c <i2a_ASN1_OBJECT+0x7c>
  4355c8:	4c 89 f7             	mov    %r14,%rdi
  4355cb:	e8 90 01 ff ff       	callq  425760 <CRYPTO_free>
  4355d0:	eb 8a                	jmp    43555c <i2a_ASN1_OBJECT+0x7c>
  4355d2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  4355d8:	ba 09 00 00 00       	mov    $0x9,%edx
  4355dd:	be d4 11 45 00       	mov    $0x4511d4,%esi
  4355e2:	4c 89 ef             	mov    %r13,%rdi
  4355e5:	e8 d6 ab ff ff       	callq  4301c0 <BIO_write>
  4355ea:	89 c5                	mov    %eax,%ebp
  4355ec:	e9 6b ff ff ff       	jmpq   43555c <i2a_ASN1_OBJECT+0x7c>
  4355f1:	bd ff ff ff ff       	mov    $0xffffffff,%ebp
  4355f6:	e9 61 ff ff ff       	jmpq   43555c <i2a_ASN1_OBJECT+0x7c>
  4355fb:	e8 c0 18 fd ff       	callq  406ec0 <__stack_chk_fail@plt>

0000000000435600 <c2i_ASN1_OBJECT>:
  435600:	41 57                	push   %r15
  435602:	41 56                	push   %r14
  435604:	49 89 ff             	mov    %rdi,%r15
  435607:	41 55                	push   %r13
  435609:	41 54                	push   %r12
  43560b:	49 89 f5             	mov    %rsi,%r13
  43560e:	55                   	push   %rbp
  43560f:	53                   	push   %rbx
  435610:	49 89 d4             	mov    %rdx,%r12
  435613:	48 83 ec 08          	sub    $0x8,%rsp
  435617:	48 85 d2             	test   %rdx,%rdx
  43561a:	48 8b 1e             	mov    (%rsi),%rbx
  43561d:	7e 19                	jle    435638 <c2i_ASN1_OBJECT+0x38>
  43561f:	48 8d 14 13          	lea    (%rbx,%rdx,1),%rdx
  435623:	48 89 d8             	mov    %rbx,%rax
  435626:	80 38 80             	cmpb   $0x80,(%rax)
  435629:	0f 84 e1 00 00 00    	je     435710 <c2i_ASN1_OBJECT+0x110>
  43562f:	48 83 c0 01          	add    $0x1,%rax
  435633:	48 39 d0             	cmp    %rdx,%rax
  435636:	75 ee                	jne    435626 <c2i_ASN1_OBJECT+0x26>
  435638:	4d 85 ff             	test   %r15,%r15
  43563b:	74 12                	je     43564f <c2i_ASN1_OBJECT+0x4f>
  43563d:	49 8b 2f             	mov    (%r15),%rbp
  435640:	48 85 ed             	test   %rbp,%rbp
  435643:	74 0a                	je     43564f <c2i_ASN1_OBJECT+0x4f>
  435645:	f6 45 20 01          	testb  $0x1,0x20(%rbp)
  435649:	0f 85 01 01 00 00    	jne    435750 <c2i_ASN1_OBJECT+0x150>
  43564f:	ba 5f 01 00 00       	mov    $0x15f,%edx
  435654:	be c9 11 45 00       	mov    $0x4511c9,%esi
  435659:	bf 28 00 00 00       	mov    $0x28,%edi
  43565e:	e8 9d fd fe ff       	callq  425400 <CRYPTO_malloc>
  435663:	48 85 c0             	test   %rax,%rax
  435666:	48 89 c5             	mov    %rax,%rbp
  435669:	0f 84 1a 01 00 00    	je     435789 <c2i_ASN1_OBJECT+0x189>
  43566f:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  435676:	00 
  435677:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  43567e:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  435685:	00 
  435686:	49 8b 5d 00          	mov    0x0(%r13),%rbx
  43568a:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%rax)
  435691:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%rax)
  435698:	c7 40 20 01 00 00 00 	movl   $0x1,0x20(%rax)
  43569f:	c7 45 14 00 00 00 00 	movl   $0x0,0x14(%rbp)
  4356a6:	45 85 e4             	test   %r12d,%r12d
  4356a9:	bf 01 00 00 00       	mov    $0x1,%edi
  4356ae:	ba 43 01 00 00       	mov    $0x143,%edx
  4356b3:	41 0f 45 fc          	cmovne %r12d,%edi
  4356b7:	be c9 11 45 00       	mov    $0x4511c9,%esi
  4356bc:	45 89 e6             	mov    %r12d,%r14d
  4356bf:	e8 3c fd fe ff       	callq  425400 <CRYPTO_malloc>
  4356c4:	48 85 c0             	test   %rax,%rax
  4356c7:	48 89 c1             	mov    %rax,%rcx
  4356ca:	0f 84 eb 00 00 00    	je     4357bb <c2i_ASN1_OBJECT+0x1bb>
  4356d0:	83 4d 20 08          	orl    $0x8,0x20(%rbp)
  4356d4:	48 89 de             	mov    %rbx,%rsi
  4356d7:	49 63 d6             	movslq %r14d,%rdx
  4356da:	48 89 cf             	mov    %rcx,%rdi
  4356dd:	e8 0e 19 fd ff       	callq  406ff0 <memcpy@plt>
  4356e2:	4c 01 e3             	add    %r12,%rbx
  4356e5:	4d 85 ff             	test   %r15,%r15
  4356e8:	48 89 45 18          	mov    %rax,0x18(%rbp)
  4356ec:	44 89 75 14          	mov    %r14d,0x14(%rbp)
  4356f0:	48 c7 45 00 00 00 00 	movq   $0x0,0x0(%rbp)
  4356f7:	00 
  4356f8:	48 c7 45 08 00 00 00 	movq   $0x0,0x8(%rbp)
  4356ff:	00 
  435700:	74 03                	je     435705 <c2i_ASN1_OBJECT+0x105>
  435702:	49 89 2f             	mov    %rbp,(%r15)
  435705:	49 89 5d 00          	mov    %rbx,0x0(%r13)
  435709:	48 89 e8             	mov    %rbp,%rax
  43570c:	eb 2b                	jmp    435739 <c2i_ASN1_OBJECT+0x139>
  43570e:	66 90                	xchg   %ax,%ax
  435710:	39 d8                	cmp    %ebx,%eax
  435712:	0f 85 94 00 00 00    	jne    4357ac <c2i_ASN1_OBJECT+0x1ac>
  435718:	41 b8 2c 01 00 00    	mov    $0x12c,%r8d
  43571e:	b9 c9 11 45 00       	mov    $0x4511c9,%ecx
  435723:	ba d8 00 00 00       	mov    $0xd8,%edx
  435728:	be c4 00 00 00       	mov    $0xc4,%esi
  43572d:	bf 0d 00 00 00       	mov    $0xd,%edi
  435732:	e8 19 2c ff ff       	callq  428350 <ERR_put_error>
  435737:	31 c0                	xor    %eax,%eax
  435739:	48 83 c4 08          	add    $0x8,%rsp
  43573d:	5b                   	pop    %rbx
  43573e:	5d                   	pop    %rbp
  43573f:	41 5c                	pop    %r12
  435741:	41 5d                	pop    %r13
  435743:	41 5e                	pop    %r14
  435745:	41 5f                	pop    %r15
  435747:	c3                   	retq   
  435748:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  43574f:	00 
  435750:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
  435754:	48 c7 45 18 00 00 00 	movq   $0x0,0x18(%rbp)
  43575b:	00 
  43575c:	48 85 c9             	test   %rcx,%rcx
  43575f:	0f 84 3a ff ff ff    	je     43569f <c2i_ASN1_OBJECT+0x9f>
  435765:	48 63 45 14          	movslq 0x14(%rbp),%rax
  435769:	45 89 e6             	mov    %r12d,%r14d
  43576c:	49 39 c4             	cmp    %rax,%r12
  43576f:	0f 8e 5f ff ff ff    	jle    4356d4 <c2i_ASN1_OBJECT+0xd4>
  435775:	c7 45 14 00 00 00 00 	movl   $0x0,0x14(%rbp)
  43577c:	48 89 cf             	mov    %rcx,%rdi
  43577f:	e8 dc ff fe ff       	callq  425760 <CRYPTO_free>
  435784:	e9 1d ff ff ff       	jmpq   4356a6 <c2i_ASN1_OBJECT+0xa6>
  435789:	41 b8 62 01 00 00    	mov    $0x162,%r8d
  43578f:	b9 c9 11 45 00       	mov    $0x4511c9,%ecx
  435794:	ba 41 00 00 00       	mov    $0x41,%edx
  435799:	be 7b 00 00 00       	mov    $0x7b,%esi
  43579e:	bf 0d 00 00 00       	mov    $0xd,%edi
  4357a3:	e8 a8 2b ff ff       	callq  428350 <ERR_put_error>
  4357a8:	31 c0                	xor    %eax,%eax
  4357aa:	eb 8d                	jmp    435739 <c2i_ASN1_OBJECT+0x139>
  4357ac:	80 78 ff 00          	cmpb   $0x0,-0x1(%rax)
  4357b0:	0f 88 79 fe ff ff    	js     43562f <c2i_ASN1_OBJECT+0x2f>
  4357b6:	e9 5d ff ff ff       	jmpq   435718 <c2i_ASN1_OBJECT+0x118>
  4357bb:	41 b8 55 01 00 00    	mov    $0x155,%r8d
  4357c1:	b9 c9 11 45 00       	mov    $0x4511c9,%ecx
  4357c6:	ba 41 00 00 00       	mov    $0x41,%edx
  4357cb:	be c4 00 00 00       	mov    $0xc4,%esi
  4357d0:	bf 0d 00 00 00       	mov    $0xd,%edi
  4357d5:	e8 76 2b ff ff       	callq  428350 <ERR_put_error>
  4357da:	4d 85 ff             	test   %r15,%r15
  4357dd:	74 05                	je     4357e4 <c2i_ASN1_OBJECT+0x1e4>
  4357df:	49 3b 2f             	cmp    (%r15),%rbp
  4357e2:	74 5e                	je     435842 <c2i_ASN1_OBJECT+0x242>
  4357e4:	8b 45 20             	mov    0x20(%rbp),%eax
  4357e7:	a8 04                	test   $0x4,%al
  4357e9:	74 2f                	je     43581a <c2i_ASN1_OBJECT+0x21a>
  4357eb:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
  4357ef:	48 85 ff             	test   %rdi,%rdi
  4357f2:	74 05                	je     4357f9 <c2i_ASN1_OBJECT+0x1f9>
  4357f4:	e8 67 ff fe ff       	callq  425760 <CRYPTO_free>
  4357f9:	48 8b 7d 08          	mov    0x8(%rbp),%rdi
  4357fd:	48 85 ff             	test   %rdi,%rdi
  435800:	74 05                	je     435807 <c2i_ASN1_OBJECT+0x207>
  435802:	e8 59 ff fe ff       	callq  425760 <CRYPTO_free>
  435807:	8b 45 20             	mov    0x20(%rbp),%eax
  43580a:	48 c7 45 08 00 00 00 	movq   $0x0,0x8(%rbp)
  435811:	00 
  435812:	48 c7 45 00 00 00 00 	movq   $0x0,0x0(%rbp)
  435819:	00 
  43581a:	a8 08                	test   $0x8,%al
  43581c:	74 20                	je     43583e <c2i_ASN1_OBJECT+0x23e>
  43581e:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
  435822:	48 85 ff             	test   %rdi,%rdi
  435825:	74 08                	je     43582f <c2i_ASN1_OBJECT+0x22f>
  435827:	e8 34 ff fe ff       	callq  425760 <CRYPTO_free>
  43582c:	8b 45 20             	mov    0x20(%rbp),%eax
  43582f:	48 c7 45 18 00 00 00 	movq   $0x0,0x18(%rbp)
  435836:	00 
  435837:	c7 45 14 00 00 00 00 	movl   $0x0,0x14(%rbp)
  43583e:	a8 01                	test   $0x1,%al
  435840:	75 07                	jne    435849 <c2i_ASN1_OBJECT+0x249>
  435842:	31 c0                	xor    %eax,%eax
  435844:	e9 f0 fe ff ff       	jmpq   435739 <c2i_ASN1_OBJECT+0x139>
  435849:	48 89 ef             	mov    %rbp,%rdi
  43584c:	e8 0f ff fe ff       	callq  425760 <CRYPTO_free>
  435851:	31 c0                	xor    %eax,%eax
  435853:	e9 e1 fe ff ff       	jmpq   435739 <c2i_ASN1_OBJECT+0x139>
  435858:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  43585f:	00 

0000000000435860 <ASN1_OBJECT_new>:
  435860:	48 83 ec 08          	sub    $0x8,%rsp
  435864:	ba 5f 01 00 00       	mov    $0x15f,%edx
  435869:	be c9 11 45 00       	mov    $0x4511c9,%esi
  43586e:	bf 28 00 00 00       	mov    $0x28,%edi
  435873:	e8 88 fb fe ff       	callq  425400 <CRYPTO_malloc>
  435878:	48 85 c0             	test   %rax,%rax
  43587b:	74 31                	je     4358ae <ASN1_OBJECT_new+0x4e>
  43587d:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%rax)
  435884:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  43588b:	00 
  43588c:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%rax)
  435893:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  43589a:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  4358a1:	00 
  4358a2:	c7 40 20 01 00 00 00 	movl   $0x1,0x20(%rax)
  4358a9:	48 83 c4 08          	add    $0x8,%rsp
  4358ad:	c3                   	retq   
  4358ae:	41 b8 62 01 00 00    	mov    $0x162,%r8d
  4358b4:	b9 c9 11 45 00       	mov    $0x4511c9,%ecx
  4358b9:	ba 41 00 00 00       	mov    $0x41,%edx
  4358be:	be 7b 00 00 00       	mov    $0x7b,%esi
  4358c3:	bf 0d 00 00 00       	mov    $0xd,%edi
  4358c8:	e8 83 2a ff ff       	callq  428350 <ERR_put_error>
  4358cd:	31 c0                	xor    %eax,%eax
  4358cf:	eb d8                	jmp    4358a9 <ASN1_OBJECT_new+0x49>
  4358d1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  4358d8:	0f 1f 84 00 00 00 00 
  4358df:	00 

00000000004358e0 <ASN1_OBJECT_free>:
  4358e0:	48 85 ff             	test   %rdi,%rdi
  4358e3:	74 61                	je     435946 <ASN1_OBJECT_free+0x66>
  4358e5:	53                   	push   %rbx
  4358e6:	8b 47 20             	mov    0x20(%rdi),%eax
  4358e9:	48 89 fb             	mov    %rdi,%rbx
  4358ec:	a8 04                	test   $0x4,%al
  4358ee:	74 2d                	je     43591d <ASN1_OBJECT_free+0x3d>
  4358f0:	48 8b 3f             	mov    (%rdi),%rdi
  4358f3:	48 85 ff             	test   %rdi,%rdi
  4358f6:	74 05                	je     4358fd <ASN1_OBJECT_free+0x1d>
  4358f8:	e8 63 fe fe ff       	callq  425760 <CRYPTO_free>
  4358fd:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
  435901:	48 85 ff             	test   %rdi,%rdi
  435904:	74 05                	je     43590b <ASN1_OBJECT_free+0x2b>
  435906:	e8 55 fe fe ff       	callq  425760 <CRYPTO_free>
  43590b:	8b 43 20             	mov    0x20(%rbx),%eax
  43590e:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
  435915:	00 
  435916:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
  43591d:	a8 08                	test   $0x8,%al
  43591f:	74 20                	je     435941 <ASN1_OBJECT_free+0x61>
  435921:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
  435925:	48 85 ff             	test   %rdi,%rdi
  435928:	74 08                	je     435932 <ASN1_OBJECT_free+0x52>
  43592a:	e8 31 fe fe ff       	callq  425760 <CRYPTO_free>
  43592f:	8b 43 20             	mov    0x20(%rbx),%eax
  435932:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
  435939:	00 
  43593a:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%rbx)
  435941:	a8 01                	test   $0x1,%al
  435943:	75 0b                	jne    435950 <ASN1_OBJECT_free+0x70>
  435945:	5b                   	pop    %rbx
  435946:	f3 c3                	repz retq 
  435948:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  43594f:	00 
  435950:	48 89 df             	mov    %rbx,%rdi
  435953:	5b                   	pop    %rbx
  435954:	e9 07 fe fe ff       	jmpq   425760 <CRYPTO_free>
  435959:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000435960 <d2i_ASN1_OBJECT>:
  435960:	41 57                	push   %r15
  435962:	41 56                	push   %r14
  435964:	49 89 d0             	mov    %rdx,%r8
  435967:	41 55                	push   %r13
  435969:	41 54                	push   %r12
  43596b:	49 89 fd             	mov    %rdi,%r13
  43596e:	55                   	push   %rbp
  43596f:	53                   	push   %rbx
  435970:	49 89 f4             	mov    %rsi,%r12
  435973:	48 83 ec 28          	sub    $0x28,%rsp
  435977:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  43597e:	00 00 
  435980:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  435985:	31 c0                	xor    %eax,%eax
  435987:	48 8b 06             	mov    (%rsi),%rax
  43598a:	48 8d 4c 24 04       	lea    0x4(%rsp),%rcx
  43598f:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
  435994:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  435999:	48 89 e2             	mov    %rsp,%rdx
  43599c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  4359a1:	e8 1a 03 00 00       	callq  435cc0 <ASN1_get_object>
  4359a6:	a8 80                	test   $0x80,%al
  4359a8:	0f 85 ca 01 00 00    	jne    435b78 <d2i_ASN1_OBJECT+0x218>
  4359ae:	83 3c 24 06          	cmpl   $0x6,(%rsp)
  4359b2:	0f 85 38 01 00 00    	jne    435af0 <d2i_ASN1_OBJECT+0x190>
  4359b8:	4c 8b 7c 24 10       	mov    0x10(%rsp),%r15
  4359bd:	48 8b 6c 24 08       	mov    0x8(%rsp),%rbp
  4359c2:	4d 85 ff             	test   %r15,%r15
  4359c5:	7e 1a                	jle    4359e1 <d2i_ASN1_OBJECT+0x81>
  4359c7:	4a 8d 54 3d 00       	lea    0x0(%rbp,%r15,1),%rdx
  4359cc:	48 89 e8             	mov    %rbp,%rax
  4359cf:	80 38 80             	cmpb   $0x80,(%rax)
  4359d2:	0f 84 c8 00 00 00    	je     435aa0 <d2i_ASN1_OBJECT+0x140>
  4359d8:	48 83 c0 01          	add    $0x1,%rax
  4359dc:	48 39 d0             	cmp    %rdx,%rax
  4359df:	75 ee                	jne    4359cf <d2i_ASN1_OBJECT+0x6f>
  4359e1:	4d 85 ed             	test   %r13,%r13
  4359e4:	0f 84 2e 01 00 00    	je     435b18 <d2i_ASN1_OBJECT+0x1b8>
  4359ea:	49 8b 5d 00          	mov    0x0(%r13),%rbx
  4359ee:	48 85 db             	test   %rbx,%rbx
  4359f1:	0f 84 21 01 00 00    	je     435b18 <d2i_ASN1_OBJECT+0x1b8>
  4359f7:	f6 43 20 01          	testb  $0x1,0x20(%rbx)
  4359fb:	0f 84 17 01 00 00    	je     435b18 <d2i_ASN1_OBJECT+0x1b8>
  435a01:	48 8b 4b 18          	mov    0x18(%rbx),%rcx
  435a05:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
  435a0c:	00 
  435a0d:	48 85 c9             	test   %rcx,%rcx
  435a10:	0f 84 4f 01 00 00    	je     435b65 <d2i_ASN1_OBJECT+0x205>
  435a16:	48 63 43 14          	movslq 0x14(%rbx),%rax
  435a1a:	45 89 fe             	mov    %r15d,%r14d
  435a1d:	49 39 c7             	cmp    %rax,%r15
  435a20:	7e 3d                	jle    435a5f <d2i_ASN1_OBJECT+0xff>
  435a22:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%rbx)
  435a29:	48 89 cf             	mov    %rcx,%rdi
  435a2c:	e8 2f fd fe ff       	callq  425760 <CRYPTO_free>
  435a31:	45 85 ff             	test   %r15d,%r15d
  435a34:	bf 01 00 00 00       	mov    $0x1,%edi
  435a39:	ba 43 01 00 00       	mov    $0x143,%edx
  435a3e:	41 0f 45 ff          	cmovne %r15d,%edi
  435a42:	be c9 11 45 00       	mov    $0x4511c9,%esi
  435a47:	45 89 fe             	mov    %r15d,%r14d
  435a4a:	e8 b1 f9 fe ff       	callq  425400 <CRYPTO_malloc>
  435a4f:	48 85 c0             	test   %rax,%rax
  435a52:	48 89 c1             	mov    %rax,%rcx
  435a55:	0f 84 61 01 00 00    	je     435bbc <d2i_ASN1_OBJECT+0x25c>
  435a5b:	83 4b 20 08          	orl    $0x8,0x20(%rbx)
  435a5f:	48 89 ee             	mov    %rbp,%rsi
  435a62:	49 63 d6             	movslq %r14d,%rdx
  435a65:	48 89 cf             	mov    %rcx,%rdi
  435a68:	e8 83 15 fd ff       	callq  406ff0 <memcpy@plt>
  435a6d:	4c 01 fd             	add    %r15,%rbp
  435a70:	4d 85 ed             	test   %r13,%r13
  435a73:	48 89 43 18          	mov    %rax,0x18(%rbx)
  435a77:	44 89 73 14          	mov    %r14d,0x14(%rbx)
  435a7b:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
  435a82:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
  435a89:	00 
  435a8a:	74 04                	je     435a90 <d2i_ASN1_OBJECT+0x130>
  435a8c:	49 89 5d 00          	mov    %rbx,0x0(%r13)
  435a90:	49 89 2c 24          	mov    %rbp,(%r12)
  435a94:	48 89 d8             	mov    %rbx,%rax
  435a97:	eb 30                	jmp    435ac9 <d2i_ASN1_OBJECT+0x169>
  435a99:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  435aa0:	39 c5                	cmp    %eax,%ebp
  435aa2:	0f 85 05 01 00 00    	jne    435bad <d2i_ASN1_OBJECT+0x24d>
  435aa8:	41 b8 2c 01 00 00    	mov    $0x12c,%r8d
  435aae:	b9 c9 11 45 00       	mov    $0x4511c9,%ecx
  435ab3:	ba d8 00 00 00       	mov    $0xd8,%edx
  435ab8:	be c4 00 00 00       	mov    $0xc4,%esi
  435abd:	bf 0d 00 00 00       	mov    $0xd,%edi
  435ac2:	e8 89 28 ff ff       	callq  428350 <ERR_put_error>
  435ac7:	31 c0                	xor    %eax,%eax
  435ac9:	48 8b 5c 24 18       	mov    0x18(%rsp),%rbx
  435ace:	64 48 33 1c 25 28 00 	xor    %fs:0x28,%rbx
  435ad5:	00 00 
  435ad7:	0f 85 a5 00 00 00    	jne    435b82 <d2i_ASN1_OBJECT+0x222>
  435add:	48 83 c4 28          	add    $0x28,%rsp
  435ae1:	5b                   	pop    %rbx
  435ae2:	5d                   	pop    %rbp
  435ae3:	41 5c                	pop    %r12
  435ae5:	41 5d                	pop    %r13
  435ae7:	41 5e                	pop    %r14
  435ae9:	41 5f                	pop    %r15
  435aeb:	c3                   	retq   
  435aec:	0f 1f 40 00          	nopl   0x0(%rax)
  435af0:	ba 74 00 00 00       	mov    $0x74,%edx
  435af5:	41 b8 1b 01 00 00    	mov    $0x11b,%r8d
  435afb:	b9 c9 11 45 00       	mov    $0x4511c9,%ecx
  435b00:	be 93 00 00 00       	mov    $0x93,%esi
  435b05:	bf 0d 00 00 00       	mov    $0xd,%edi
  435b0a:	e8 41 28 ff ff       	callq  428350 <ERR_put_error>
  435b0f:	eb b6                	jmp    435ac7 <d2i_ASN1_OBJECT+0x167>
  435b11:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  435b18:	ba 5f 01 00 00       	mov    $0x15f,%edx
  435b1d:	be c9 11 45 00       	mov    $0x4511c9,%esi
  435b22:	bf 28 00 00 00       	mov    $0x28,%edi
  435b27:	e8 d4 f8 fe ff       	callq  425400 <CRYPTO_malloc>
  435b2c:	48 85 c0             	test   %rax,%rax
  435b2f:	48 89 c3             	mov    %rax,%rbx
  435b32:	74 53                	je     435b87 <d2i_ASN1_OBJECT+0x227>
  435b34:	48 8b 6c 24 08       	mov    0x8(%rsp),%rbp
  435b39:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%rax)
  435b40:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%rax)
  435b47:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  435b4e:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  435b55:	00 
  435b56:	c7 40 20 01 00 00 00 	movl   $0x1,0x20(%rax)
  435b5d:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  435b64:	00 
  435b65:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%rbx)
  435b6c:	e9 c0 fe ff ff       	jmpq   435a31 <d2i_ASN1_OBJECT+0xd1>
  435b71:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  435b78:	ba 66 00 00 00       	mov    $0x66,%edx
  435b7d:	e9 73 ff ff ff       	jmpq   435af5 <d2i_ASN1_OBJECT+0x195>
  435b82:	e8 39 13 fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  435b87:	41 b8 62 01 00 00    	mov    $0x162,%r8d
  435b8d:	b9 c9 11 45 00       	mov    $0x4511c9,%ecx
  435b92:	ba 41 00 00 00       	mov    $0x41,%edx
  435b97:	be 7b 00 00 00       	mov    $0x7b,%esi
  435b9c:	bf 0d 00 00 00       	mov    $0xd,%edi
  435ba1:	e8 aa 27 ff ff       	callq  428350 <ERR_put_error>
  435ba6:	31 c0                	xor    %eax,%eax
  435ba8:	e9 1c ff ff ff       	jmpq   435ac9 <d2i_ASN1_OBJECT+0x169>
  435bad:	80 78 ff 00          	cmpb   $0x0,-0x1(%rax)
  435bb1:	0f 88 21 fe ff ff    	js     4359d8 <d2i_ASN1_OBJECT+0x78>
  435bb7:	e9 ec fe ff ff       	jmpq   435aa8 <d2i_ASN1_OBJECT+0x148>
  435bbc:	41 b8 55 01 00 00    	mov    $0x155,%r8d
  435bc2:	b9 c9 11 45 00       	mov    $0x4511c9,%ecx
  435bc7:	ba 41 00 00 00       	mov    $0x41,%edx
  435bcc:	be c4 00 00 00       	mov    $0xc4,%esi
  435bd1:	bf 0d 00 00 00       	mov    $0xd,%edi
  435bd6:	e8 75 27 ff ff       	callq  428350 <ERR_put_error>
  435bdb:	4d 85 ed             	test   %r13,%r13
  435bde:	74 0a                	je     435bea <d2i_ASN1_OBJECT+0x28a>
  435be0:	49 3b 5d 00          	cmp    0x0(%r13),%rbx
  435be4:	0f 84 dd fe ff ff    	je     435ac7 <d2i_ASN1_OBJECT+0x167>
  435bea:	48 89 df             	mov    %rbx,%rdi
  435bed:	e8 ee fc ff ff       	callq  4358e0 <ASN1_OBJECT_free>
  435bf2:	e9 d0 fe ff ff       	jmpq   435ac7 <d2i_ASN1_OBJECT+0x167>
  435bf7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  435bfe:	00 00 

0000000000435c00 <ASN1_OBJECT_create>:
  435c00:	48 83 ec 38          	sub    $0x38,%rsp
  435c04:	89 7c 24 10          	mov    %edi,0x10(%rsp)
  435c08:	48 89 e7             	mov    %rsp,%rdi
  435c0b:	89 54 24 14          	mov    %edx,0x14(%rsp)
  435c0f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  435c16:	00 00 
  435c18:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  435c1d:	31 c0                	xor    %eax,%eax
  435c1f:	48 89 0c 24          	mov    %rcx,(%rsp)
  435c23:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  435c28:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  435c2d:	c7 44 24 20 0d 00 00 	movl   $0xd,0x20(%rsp)
  435c34:	00 
  435c35:	e8 e6 62 ff ff       	callq  42bf20 <OBJ_dup>
  435c3a:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
  435c3f:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  435c46:	00 00 
  435c48:	75 05                	jne    435c4f <ASN1_OBJECT_create+0x4f>
  435c4a:	48 83 c4 38          	add    $0x38,%rsp
  435c4e:	c3                   	retq   
  435c4f:	e8 6c 12 fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  435c54:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  435c5b:	00 00 00 
  435c5e:	66 90                	xchg   %ax,%ax

0000000000435c60 <ASN1_check_infinite_end>:
  435c60:	48 85 f6             	test   %rsi,%rsi
  435c63:	7e 23                	jle    435c88 <ASN1_check_infinite_end+0x28>
  435c65:	31 c0                	xor    %eax,%eax
  435c67:	48 83 fe 01          	cmp    $0x1,%rsi
  435c6b:	74 20                	je     435c8d <ASN1_check_infinite_end+0x2d>
  435c6d:	48 8b 17             	mov    (%rdi),%rdx
  435c70:	80 3a 00             	cmpb   $0x0,(%rdx)
  435c73:	75 18                	jne    435c8d <ASN1_check_infinite_end+0x2d>
  435c75:	80 7a 01 00          	cmpb   $0x0,0x1(%rdx)
  435c79:	75 12                	jne    435c8d <ASN1_check_infinite_end+0x2d>
  435c7b:	48 83 c2 02          	add    $0x2,%rdx
  435c7f:	b0 01                	mov    $0x1,%al
  435c81:	48 89 17             	mov    %rdx,(%rdi)
  435c84:	c3                   	retq   
  435c85:	0f 1f 00             	nopl   (%rax)
  435c88:	b8 01 00 00 00       	mov    $0x1,%eax
  435c8d:	f3 c3                	repz retq 
  435c8f:	90                   	nop

0000000000435c90 <ASN1_const_check_infinite_end>:
  435c90:	48 85 f6             	test   %rsi,%rsi
  435c93:	7e 23                	jle    435cb8 <ASN1_const_check_infinite_end+0x28>
  435c95:	31 c0                	xor    %eax,%eax
  435c97:	48 83 fe 01          	cmp    $0x1,%rsi
  435c9b:	74 20                	je     435cbd <ASN1_const_check_infinite_end+0x2d>
  435c9d:	48 8b 17             	mov    (%rdi),%rdx
  435ca0:	80 3a 00             	cmpb   $0x0,(%rdx)
  435ca3:	75 18                	jne    435cbd <ASN1_const_check_infinite_end+0x2d>
  435ca5:	80 7a 01 00          	cmpb   $0x0,0x1(%rdx)
  435ca9:	75 12                	jne    435cbd <ASN1_const_check_infinite_end+0x2d>
  435cab:	48 83 c2 02          	add    $0x2,%rdx
  435caf:	b0 01                	mov    $0x1,%al
  435cb1:	48 89 17             	mov    %rdx,(%rdi)
  435cb4:	c3                   	retq   
  435cb5:	0f 1f 00             	nopl   (%rax)
  435cb8:	b8 01 00 00 00       	mov    $0x1,%eax
  435cbd:	f3 c3                	repz retq 
  435cbf:	90                   	nop

0000000000435cc0 <ASN1_get_object>:
  435cc0:	41 55                	push   %r13
  435cc2:	41 54                	push   %r12
  435cc4:	55                   	push   %rbp
  435cc5:	53                   	push   %rbx
  435cc6:	48 89 fb             	mov    %rdi,%rbx
  435cc9:	48 83 ec 08          	sub    $0x8,%rsp
  435ccd:	4d 85 c0             	test   %r8,%r8
  435cd0:	4c 8b 17             	mov    (%rdi),%r10
  435cd3:	74 1b                	je     435cf0 <ASN1_get_object+0x30>
  435cd5:	45 0f b6 1a          	movzbl (%r10),%r11d
  435cd9:	44 89 d8             	mov    %r11d,%eax
  435cdc:	83 e0 1f             	and    $0x1f,%eax
  435cdf:	3c 1f                	cmp    $0x1f,%al
  435ce1:	74 3d                	je     435d20 <ASN1_get_object+0x60>
  435ce3:	4c 89 c5             	mov    %r8,%rbp
  435ce6:	48 83 ed 01          	sub    $0x1,%rbp
  435cea:	0f 85 90 00 00 00    	jne    435d80 <ASN1_get_object+0xc0>
  435cf0:	41 b8 96 00 00 00    	mov    $0x96,%r8d
  435cf6:	b9 de 11 45 00       	mov    $0x4511de,%ecx
  435cfb:	ba 7b 00 00 00       	mov    $0x7b,%edx
  435d00:	be 72 00 00 00       	mov    $0x72,%esi
  435d05:	bf 0d 00 00 00       	mov    $0xd,%edi
  435d0a:	e8 41 26 ff ff       	callq  428350 <ERR_put_error>
  435d0f:	b8 80 00 00 00       	mov    $0x80,%eax
  435d14:	48 83 c4 08          	add    $0x8,%rsp
  435d18:	5b                   	pop    %rbx
  435d19:	5d                   	pop    %rbp
  435d1a:	41 5c                	pop    %r12
  435d1c:	41 5d                	pop    %r13
  435d1e:	c3                   	retq   
  435d1f:	90                   	nop
  435d20:	4c 89 c7             	mov    %r8,%rdi
  435d23:	48 83 ef 01          	sub    $0x1,%rdi
  435d27:	74 c7                	je     435cf0 <ASN1_get_object+0x30>
  435d29:	4d 8d 62 01          	lea    0x1(%r10),%r12
  435d2d:	45 31 c9             	xor    %r9d,%r9d
  435d30:	eb 26                	jmp    435d58 <ASN1_get_object+0x98>
  435d32:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  435d38:	49 c1 e1 07          	shl    $0x7,%r9
  435d3c:	83 e0 7f             	and    $0x7f,%eax
  435d3f:	49 83 c4 01          	add    $0x1,%r12
  435d43:	49 09 c1             	or     %rax,%r9
  435d46:	48 83 ef 01          	sub    $0x1,%rdi
  435d4a:	49 81 f9 ff ff ff 00 	cmp    $0xffffff,%r9
  435d51:	7f 9d                	jg     435cf0 <ASN1_get_object+0x30>
  435d53:	48 85 ff             	test   %rdi,%rdi
  435d56:	74 98                	je     435cf0 <ASN1_get_object+0x30>
  435d58:	41 0f b6 04 24       	movzbl (%r12),%eax
  435d5d:	84 c0                	test   %al,%al
  435d5f:	78 d7                	js     435d38 <ASN1_get_object+0x78>
  435d61:	48 83 ef 01          	sub    $0x1,%rdi
  435d65:	48 89 fd             	mov    %rdi,%rbp
  435d68:	74 86                	je     435cf0 <ASN1_get_object+0x30>
  435d6a:	4c 89 cf             	mov    %r9,%rdi
  435d6d:	44 0f b6 c8          	movzbl %al,%r9d
  435d71:	49 83 c4 01          	add    $0x1,%r12
  435d75:	48 c1 e7 07          	shl    $0x7,%rdi
  435d79:	89 f8                	mov    %edi,%eax
  435d7b:	44 09 c8             	or     %r9d,%eax
  435d7e:	eb 07                	jmp    435d87 <ASN1_get_object+0xc7>
  435d80:	4d 8d 62 01          	lea    0x1(%r10),%r12
  435d84:	0f b6 c0             	movzbl %al,%eax
  435d87:	89 02                	mov    %eax,(%rdx)
  435d89:	44 89 d8             	mov    %r11d,%eax
  435d8c:	25 c0 00 00 00       	and    $0xc0,%eax
  435d91:	85 ed                	test   %ebp,%ebp
  435d93:	89 01                	mov    %eax,(%rcx)
  435d95:	0f 8e 55 ff ff ff    	jle    435cf0 <ASN1_get_object+0x30>
  435d9b:	41 0f b6 0c 24       	movzbl (%r12),%ecx
  435da0:	80 f9 80             	cmp    $0x80,%cl
  435da3:	74 4b                	je     435df0 <ASN1_get_object+0x130>
  435da5:	89 cf                	mov    %ecx,%edi
  435da7:	4d 8d 6c 24 01       	lea    0x1(%r12),%r13
  435dac:	83 e7 7f             	and    $0x7f,%edi
  435daf:	84 c9                	test   %cl,%cl
  435db1:	40 0f b6 c7          	movzbl %dil,%eax
  435db5:	78 49                	js     435e00 <ASN1_get_object+0x140>
  435db7:	48 85 c0             	test   %rax,%rax
  435dba:	0f 88 30 ff ff ff    	js     435cf0 <ASN1_get_object+0x30>
  435dc0:	31 ed                	xor    %ebp,%ebp
  435dc2:	4d 29 ea             	sub    %r13,%r10
  435dc5:	41 83 e3 20          	and    $0x20,%r11d
  435dc9:	48 89 06             	mov    %rax,(%rsi)
  435dcc:	4d 01 d0             	add    %r10,%r8
  435dcf:	45 89 dc             	mov    %r11d,%r12d
  435dd2:	49 39 c0             	cmp    %rax,%r8
  435dd5:	0f 8c 5d 01 00 00    	jl     435f38 <ASN1_get_object+0x278>
  435ddb:	41 0f b6 c3          	movzbl %r11b,%eax
  435ddf:	4c 89 2b             	mov    %r13,(%rbx)
  435de2:	09 e8                	or     %ebp,%eax
  435de4:	e9 2b ff ff ff       	jmpq   435d14 <ASN1_get_object+0x54>
  435de9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  435df0:	4d 8d 6c 24 01       	lea    0x1(%r12),%r13
  435df5:	bd 01 00 00 00       	mov    $0x1,%ebp
  435dfa:	31 c0                	xor    %eax,%eax
  435dfc:	eb c4                	jmp    435dc2 <ASN1_get_object+0x102>
  435dfe:	66 90                	xchg   %ax,%ax
  435e00:	40 80 ff 08          	cmp    $0x8,%dil
  435e04:	0f 87 e6 fe ff ff    	ja     435cf0 <ASN1_get_object+0x30>
  435e0a:	83 fd 01             	cmp    $0x1,%ebp
  435e0d:	0f 84 dd fe ff ff    	je     435cf0 <ASN1_get_object+0x30>
  435e13:	40 84 ff             	test   %dil,%dil
  435e16:	40 0f b6 cf          	movzbl %dil,%ecx
  435e1a:	0f 84 47 01 00 00    	je     435f67 <ASN1_get_object+0x2a7>
  435e20:	83 fd 02             	cmp    $0x2,%ebp
  435e23:	4d 8d 6c 24 02       	lea    0x2(%r12),%r13
  435e28:	41 0f b6 44 24 01    	movzbl 0x1(%r12),%eax
  435e2e:	0f 84 bc fe ff ff    	je     435cf0 <ASN1_get_object+0x30>
  435e34:	83 f9 01             	cmp    $0x1,%ecx
  435e37:	0f 84 7a ff ff ff    	je     435db7 <ASN1_get_object+0xf7>
  435e3d:	41 0f b6 7c 24 02    	movzbl 0x2(%r12),%edi
  435e43:	48 c1 e0 08          	shl    $0x8,%rax
  435e47:	4d 8d 6c 24 03       	lea    0x3(%r12),%r13
  435e4c:	48 09 f8             	or     %rdi,%rax
  435e4f:	83 fd 03             	cmp    $0x3,%ebp
  435e52:	0f 84 98 fe ff ff    	je     435cf0 <ASN1_get_object+0x30>
  435e58:	83 f9 02             	cmp    $0x2,%ecx
  435e5b:	0f 84 56 ff ff ff    	je     435db7 <ASN1_get_object+0xf7>
  435e61:	41 0f b6 7c 24 03    	movzbl 0x3(%r12),%edi
  435e67:	48 c1 e0 08          	shl    $0x8,%rax
  435e6b:	4d 8d 6c 24 04       	lea    0x4(%r12),%r13
  435e70:	48 09 f8             	or     %rdi,%rax
  435e73:	83 fd 04             	cmp    $0x4,%ebp
  435e76:	0f 84 74 fe ff ff    	je     435cf0 <ASN1_get_object+0x30>
  435e7c:	83 f9 03             	cmp    $0x3,%ecx
  435e7f:	0f 84 32 ff ff ff    	je     435db7 <ASN1_get_object+0xf7>
  435e85:	41 0f b6 7c 24 04    	movzbl 0x4(%r12),%edi
  435e8b:	48 c1 e0 08          	shl    $0x8,%rax
  435e8f:	4d 8d 6c 24 05       	lea    0x5(%r12),%r13
  435e94:	48 09 f8             	or     %rdi,%rax
  435e97:	83 fd 05             	cmp    $0x5,%ebp
  435e9a:	0f 84 50 fe ff ff    	je     435cf0 <ASN1_get_object+0x30>
  435ea0:	83 f9 04             	cmp    $0x4,%ecx
  435ea3:	0f 84 0e ff ff ff    	je     435db7 <ASN1_get_object+0xf7>
  435ea9:	41 0f b6 7c 24 05    	movzbl 0x5(%r12),%edi
  435eaf:	48 c1 e0 08          	shl    $0x8,%rax
  435eb3:	4d 8d 6c 24 06       	lea    0x6(%r12),%r13
  435eb8:	48 09 f8             	or     %rdi,%rax
  435ebb:	83 fd 06             	cmp    $0x6,%ebp
  435ebe:	0f 84 2c fe ff ff    	je     435cf0 <ASN1_get_object+0x30>
  435ec4:	83 f9 05             	cmp    $0x5,%ecx
  435ec7:	0f 84 ea fe ff ff    	je     435db7 <ASN1_get_object+0xf7>
  435ecd:	41 0f b6 7c 24 06    	movzbl 0x6(%r12),%edi
  435ed3:	48 c1 e0 08          	shl    $0x8,%rax
  435ed7:	4d 8d 6c 24 07       	lea    0x7(%r12),%r13
  435edc:	48 09 f8             	or     %rdi,%rax
  435edf:	83 fd 07             	cmp    $0x7,%ebp
  435ee2:	0f 84 08 fe ff ff    	je     435cf0 <ASN1_get_object+0x30>
  435ee8:	83 f9 06             	cmp    $0x6,%ecx
  435eeb:	0f 84 c6 fe ff ff    	je     435db7 <ASN1_get_object+0xf7>
  435ef1:	41 0f b6 7c 24 07    	movzbl 0x7(%r12),%edi
  435ef7:	48 c1 e0 08          	shl    $0x8,%rax
  435efb:	4d 8d 6c 24 08       	lea    0x8(%r12),%r13
  435f00:	48 09 f8             	or     %rdi,%rax
  435f03:	83 fd 08             	cmp    $0x8,%ebp
  435f06:	0f 84 e4 fd ff ff    	je     435cf0 <ASN1_get_object+0x30>
  435f0c:	83 f9 07             	cmp    $0x7,%ecx
  435f0f:	0f 84 a2 fe ff ff    	je     435db7 <ASN1_get_object+0xf7>
  435f15:	41 0f b6 4c 24 08    	movzbl 0x8(%r12),%ecx
  435f1b:	48 c1 e0 08          	shl    $0x8,%rax
  435f1f:	4d 8d 6c 24 09       	lea    0x9(%r12),%r13
  435f24:	48 09 c8             	or     %rcx,%rax
  435f27:	83 fd 09             	cmp    $0x9,%ebp
  435f2a:	0f 85 87 fe ff ff    	jne    435db7 <ASN1_get_object+0xf7>
  435f30:	e9 bb fd ff ff       	jmpq   435cf0 <ASN1_get_object+0x30>
  435f35:	0f 1f 00             	nopl   (%rax)
  435f38:	41 b8 8e 00 00 00    	mov    $0x8e,%r8d
  435f3e:	b9 de 11 45 00       	mov    $0x4511de,%ecx
  435f43:	ba 9b 00 00 00       	mov    $0x9b,%edx
  435f48:	be 72 00 00 00       	mov    $0x72,%esi
  435f4d:	bf 0d 00 00 00       	mov    $0xd,%edi
  435f52:	e8 f9 23 ff ff       	callq  428350 <ERR_put_error>
  435f57:	45 89 e3             	mov    %r12d,%r11d
  435f5a:	41 83 cb 80          	or     $0xffffff80,%r11d
  435f5e:	41 0f b6 c3          	movzbl %r11b,%eax
  435f62:	e9 78 fe ff ff       	jmpq   435ddf <ASN1_get_object+0x11f>
  435f67:	31 c0                	xor    %eax,%eax
  435f69:	e9 49 fe ff ff       	jmpq   435db7 <ASN1_get_object+0xf7>
  435f6e:	66 90                	xchg   %ax,%ax

0000000000435f70 <ASN1_put_object>:
  435f70:	83 fe 01             	cmp    $0x1,%esi
  435f73:	55                   	push   %rbp
  435f74:	4c 8b 0f             	mov    (%rdi),%r9
  435f77:	19 c0                	sbb    %eax,%eax
  435f79:	41 81 e0 c0 00 00 00 	and    $0xc0,%r8d
  435f80:	53                   	push   %rbx
  435f81:	f7 d0                	not    %eax
  435f83:	83 e0 20             	and    $0x20,%eax
  435f86:	41 09 c0             	or     %eax,%r8d
  435f89:	83 f9 1e             	cmp    $0x1e,%ecx
  435f8c:	7f 72                	jg     436000 <ASN1_put_object+0x90>
  435f8e:	83 e1 1f             	and    $0x1f,%ecx
  435f91:	4d 8d 51 01          	lea    0x1(%r9),%r10
  435f95:	41 09 c8             	or     %ecx,%r8d
  435f98:	83 fe 02             	cmp    $0x2,%esi
  435f9b:	45 88 01             	mov    %r8b,(%r9)
  435f9e:	0f 84 cc 00 00 00    	je     436070 <ASN1_put_object+0x100>
  435fa4:	31 c9                	xor    %ecx,%ecx
  435fa6:	83 fa 7f             	cmp    $0x7f,%edx
  435fa9:	89 d0                	mov    %edx,%eax
  435fab:	7f 16                	jg     435fc3 <ASN1_put_object+0x53>
  435fad:	49 8d 42 01          	lea    0x1(%r10),%rax
  435fb1:	41 88 12             	mov    %dl,(%r10)
  435fb4:	5b                   	pop    %rbx
  435fb5:	48 89 07             	mov    %rax,(%rdi)
  435fb8:	5d                   	pop    %rbp
  435fb9:	c3                   	retq   
  435fba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  435fc0:	48 63 ce             	movslq %esi,%rcx
  435fc3:	c1 f8 08             	sar    $0x8,%eax
  435fc6:	8d 71 01             	lea    0x1(%rcx),%esi
  435fc9:	85 c0                	test   %eax,%eax
  435fcb:	75 f3                	jne    435fc0 <ASN1_put_object+0x50>
  435fcd:	89 f0                	mov    %esi,%eax
  435fcf:	83 c8 80             	or     $0xffffff80,%eax
  435fd2:	41 88 02             	mov    %al,(%r10)
  435fd5:	49 8d 44 0a 01       	lea    0x1(%r10,%rcx,1),%rax
  435fda:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  435fe0:	88 10                	mov    %dl,(%rax)
  435fe2:	48 83 e8 01          	sub    $0x1,%rax
  435fe6:	c1 fa 08             	sar    $0x8,%edx
  435fe9:	4c 39 d0             	cmp    %r10,%rax
  435fec:	75 f2                	jne    435fe0 <ASN1_put_object+0x70>
  435fee:	48 63 f6             	movslq %esi,%rsi
  435ff1:	48 8d 44 30 01       	lea    0x1(%rax,%rsi,1),%rax
  435ff6:	5b                   	pop    %rbx
  435ff7:	48 89 07             	mov    %rax,(%rdi)
  435ffa:	5d                   	pop    %rbp
  435ffb:	c3                   	retq   
  435ffc:	0f 1f 40 00          	nopl   0x0(%rax)
  436000:	41 83 c8 1f          	or     $0x1f,%r8d
  436004:	4d 8d 59 01          	lea    0x1(%r9),%r11
  436008:	31 c0                	xor    %eax,%eax
  43600a:	45 88 01             	mov    %r8b,(%r9)
  43600d:	41 89 c8             	mov    %ecx,%r8d
  436010:	eb 09                	jmp    43601b <ASN1_put_object+0xab>
  436012:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  436018:	44 89 d0             	mov    %r10d,%eax
  43601b:	41 c1 f8 07          	sar    $0x7,%r8d
  43601f:	44 8d 50 01          	lea    0x1(%rax),%r10d
  436023:	45 85 c0             	test   %r8d,%r8d
  436026:	75 f0                	jne    436018 <ASN1_put_object+0xa8>
  436028:	89 cd                	mov    %ecx,%ebp
  43602a:	4c 63 c0             	movslq %eax,%r8
  43602d:	89 c3                	mov    %eax,%ebx
  43602f:	83 e5 7f             	and    $0x7f,%ebp
  436032:	43 88 6c 01 01       	mov    %bpl,0x1(%r9,%r8,1)
  436037:	4d 01 c1             	add    %r8,%r9
  43603a:	eb 1a                	jmp    436056 <ASN1_put_object+0xe6>
  43603c:	0f 1f 40 00          	nopl   0x0(%rax)
  436040:	41 89 c8             	mov    %ecx,%r8d
  436043:	41 83 e0 7f          	and    $0x7f,%r8d
  436047:	39 d8                	cmp    %ebx,%eax
  436049:	74 04                	je     43604f <ASN1_put_object+0xdf>
  43604b:	41 83 c8 80          	or     $0xffffff80,%r8d
  43604f:	45 88 01             	mov    %r8b,(%r9)
  436052:	49 83 e9 01          	sub    $0x1,%r9
  436056:	83 e8 01             	sub    $0x1,%eax
  436059:	c1 f9 07             	sar    $0x7,%ecx
  43605c:	83 f8 ff             	cmp    $0xffffffff,%eax
  43605f:	75 df                	jne    436040 <ASN1_put_object+0xd0>
  436061:	4d 63 d2             	movslq %r10d,%r10
  436064:	4d 01 da             	add    %r11,%r10
  436067:	83 fe 02             	cmp    $0x2,%esi
  43606a:	0f 85 34 ff ff ff    	jne    435fa4 <ASN1_put_object+0x34>
  436070:	49 8d 42 01          	lea    0x1(%r10),%rax
  436074:	41 c6 02 80          	movb   $0x80,(%r10)
  436078:	5b                   	pop    %rbx
  436079:	48 89 07             	mov    %rax,(%rdi)
  43607c:	5d                   	pop    %rbp
  43607d:	c3                   	retq   
  43607e:	66 90                	xchg   %ax,%ax

0000000000436080 <ASN1_put_eoc>:
  436080:	48 8b 07             	mov    (%rdi),%rax
  436083:	c6 00 00             	movb   $0x0,(%rax)
  436086:	c6 40 01 00          	movb   $0x0,0x1(%rax)
  43608a:	48 83 c0 02          	add    $0x2,%rax
  43608e:	48 89 07             	mov    %rax,(%rdi)
  436091:	b8 02 00 00 00       	mov    $0x2,%eax
  436096:	c3                   	retq   
  436097:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  43609e:	00 00 

00000000004360a0 <ASN1_object_size>:
  4360a0:	83 fa 1e             	cmp    $0x1e,%edx
  4360a3:	8d 46 01             	lea    0x1(%rsi),%eax
  4360a6:	7f 28                	jg     4360d0 <ASN1_object_size+0x30>
  4360a8:	83 ff 02             	cmp    $0x2,%edi
  4360ab:	74 43                	je     4360f0 <ASN1_object_size+0x50>
  4360ad:	8d 50 01             	lea    0x1(%rax),%edx
  4360b0:	83 fe 7f             	cmp    $0x7f,%esi
  4360b3:	89 d0                	mov    %edx,%eax
  4360b5:	7e 15                	jle    4360cc <ASN1_object_size+0x2c>
  4360b7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4360be:	00 00 
  4360c0:	c1 fe 08             	sar    $0x8,%esi
  4360c3:	83 c2 01             	add    $0x1,%edx
  4360c6:	85 f6                	test   %esi,%esi
  4360c8:	75 f6                	jne    4360c0 <ASN1_object_size+0x20>
  4360ca:	89 d0                	mov    %edx,%eax
  4360cc:	f3 c3                	repz retq 
  4360ce:	66 90                	xchg   %ax,%ax
  4360d0:	c1 fa 07             	sar    $0x7,%edx
  4360d3:	83 c0 01             	add    $0x1,%eax
  4360d6:	85 d2                	test   %edx,%edx
  4360d8:	74 ce                	je     4360a8 <ASN1_object_size+0x8>
  4360da:	c1 fa 07             	sar    $0x7,%edx
  4360dd:	83 c0 01             	add    $0x1,%eax
  4360e0:	85 d2                	test   %edx,%edx
  4360e2:	75 ec                	jne    4360d0 <ASN1_object_size+0x30>
  4360e4:	eb c2                	jmp    4360a8 <ASN1_object_size+0x8>
  4360e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4360ed:	00 00 00 
  4360f0:	83 c0 03             	add    $0x3,%eax
  4360f3:	c3                   	retq   
  4360f4:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
  4360fb:	00 00 00 00 00 

0000000000436100 <asn1_Finish>:
  436100:	8b 47 10             	mov    0x10(%rdi),%eax
  436103:	83 f8 21             	cmp    $0x21,%eax
  436106:	74 20                	je     436128 <asn1_Finish+0x28>
  436108:	48 8b 57 20          	mov    0x20(%rdi),%rdx
  43610c:	48 85 d2             	test   %rdx,%rdx
  43610f:	74 4f                	je     436160 <asn1_Finish+0x60>
  436111:	a8 01                	test   $0x1,%al
  436113:	74 05                	je     43611a <asn1_Finish+0x1a>
  436115:	48 85 d2             	test   %rdx,%rdx
  436118:	79 46                	jns    436160 <asn1_Finish+0x60>
  43611a:	c7 47 0c 3e 00 00 00 	movl   $0x3e,0xc(%rdi)
  436121:	31 c0                	xor    %eax,%eax
  436123:	c3                   	retq   
  436124:	0f 1f 40 00          	nopl   0x0(%rax)
  436128:	8b 47 08             	mov    0x8(%rdi),%eax
  43612b:	48 8b 57 20          	mov    0x20(%rdi),%rdx
  43612f:	85 c0                	test   %eax,%eax
  436131:	75 25                	jne    436158 <asn1_Finish+0x58>
  436133:	48 85 d2             	test   %rdx,%rdx
  436136:	7e 20                	jle    436158 <asn1_Finish+0x58>
  436138:	48 83 fa 01          	cmp    $0x1,%rdx
  43613c:	74 32                	je     436170 <asn1_Finish+0x70>
  43613e:	48 8b 0f             	mov    (%rdi),%rcx
  436141:	80 39 00             	cmpb   $0x0,(%rcx)
  436144:	75 2a                	jne    436170 <asn1_Finish+0x70>
  436146:	80 79 01 00          	cmpb   $0x0,0x1(%rcx)
  43614a:	75 24                	jne    436170 <asn1_Finish+0x70>
  43614c:	48 83 c1 02          	add    $0x2,%rcx
  436150:	48 89 0f             	mov    %rcx,(%rdi)
  436153:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  436158:	48 85 d2             	test   %rdx,%rdx
  43615b:	75 b8                	jne    436115 <asn1_Finish+0x15>
  43615d:	0f 1f 00             	nopl   (%rax)
  436160:	b8 01 00 00 00       	mov    $0x1,%eax
  436165:	c3                   	retq   
  436166:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  43616d:	00 00 00 
  436170:	c7 47 0c 3f 00 00 00 	movl   $0x3f,0xc(%rdi)
  436177:	c3                   	retq   
  436178:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  43617f:	00 

0000000000436180 <asn1_const_Finish>:
  436180:	8b 47 10             	mov    0x10(%rdi),%eax
  436183:	83 f8 21             	cmp    $0x21,%eax
  436186:	74 20                	je     4361a8 <asn1_const_Finish+0x28>
  436188:	48 8b 57 20          	mov    0x20(%rdi),%rdx
  43618c:	48 85 d2             	test   %rdx,%rdx
  43618f:	74 4f                	je     4361e0 <asn1_const_Finish+0x60>
  436191:	a8 01                	test   $0x1,%al
  436193:	74 05                	je     43619a <asn1_const_Finish+0x1a>
  436195:	48 85 d2             	test   %rdx,%rdx
  436198:	79 46                	jns    4361e0 <asn1_const_Finish+0x60>
  43619a:	c7 47 0c 3e 00 00 00 	movl   $0x3e,0xc(%rdi)
  4361a1:	31 c0                	xor    %eax,%eax
  4361a3:	c3                   	retq   
  4361a4:	0f 1f 40 00          	nopl   0x0(%rax)
  4361a8:	8b 47 08             	mov    0x8(%rdi),%eax
  4361ab:	48 8b 57 20          	mov    0x20(%rdi),%rdx
  4361af:	85 c0                	test   %eax,%eax
  4361b1:	75 25                	jne    4361d8 <asn1_const_Finish+0x58>
  4361b3:	48 85 d2             	test   %rdx,%rdx
  4361b6:	7e 20                	jle    4361d8 <asn1_const_Finish+0x58>
  4361b8:	48 83 fa 01          	cmp    $0x1,%rdx
  4361bc:	74 32                	je     4361f0 <asn1_const_Finish+0x70>
  4361be:	48 8b 0f             	mov    (%rdi),%rcx
  4361c1:	80 39 00             	cmpb   $0x0,(%rcx)
  4361c4:	75 2a                	jne    4361f0 <asn1_const_Finish+0x70>
  4361c6:	80 79 01 00          	cmpb   $0x0,0x1(%rcx)
  4361ca:	75 24                	jne    4361f0 <asn1_const_Finish+0x70>
  4361cc:	48 83 c1 02          	add    $0x2,%rcx
  4361d0:	48 89 0f             	mov    %rcx,(%rdi)
  4361d3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4361d8:	48 85 d2             	test   %rdx,%rdx
  4361db:	75 b8                	jne    436195 <asn1_const_Finish+0x15>
  4361dd:	0f 1f 00             	nopl   (%rax)
  4361e0:	b8 01 00 00 00       	mov    $0x1,%eax
  4361e5:	c3                   	retq   
  4361e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4361ed:	00 00 00 
  4361f0:	c7 47 0c 3f 00 00 00 	movl   $0x3f,0xc(%rdi)
  4361f7:	c3                   	retq   
  4361f8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4361ff:	00 

0000000000436200 <asn1_GetSequence>:
  436200:	41 57                	push   %r15
  436202:	41 56                	push   %r14
  436204:	41 55                	push   %r13
  436206:	41 54                	push   %r12
  436208:	55                   	push   %rbp
  436209:	53                   	push   %rbx
  43620a:	48 89 f5             	mov    %rsi,%rbp
  43620d:	48 89 fb             	mov    %rdi,%rbx
  436210:	48 83 ec 08          	sub    $0x8,%rsp
  436214:	48 8b 0e             	mov    (%rsi),%rcx
  436217:	48 8b 3f             	mov    (%rdi),%rdi
  43621a:	48 85 c9             	test   %rcx,%rcx
  43621d:	74 1b                	je     43623a <asn1_GetSequence+0x3a>
  43621f:	44 0f b6 0f          	movzbl (%rdi),%r9d
  436223:	44 89 c8             	mov    %r9d,%eax
  436226:	83 e0 1f             	and    $0x1f,%eax
  436229:	3c 1f                	cmp    $0x1f,%al
  43622b:	74 53                	je     436280 <asn1_GetSequence+0x80>
  43622d:	49 89 c8             	mov    %rcx,%r8
  436230:	49 83 e8 01          	sub    $0x1,%r8
  436234:	0f 85 ae 00 00 00    	jne    4362e8 <asn1_GetSequence+0xe8>
  43623a:	41 b8 96 00 00 00    	mov    $0x96,%r8d
  436240:	b9 de 11 45 00       	mov    $0x4511de,%ecx
  436245:	ba 7b 00 00 00       	mov    $0x7b,%edx
  43624a:	be 72 00 00 00       	mov    $0x72,%esi
  43624f:	bf 0d 00 00 00       	mov    $0xd,%edi
  436254:	e8 f7 20 ff ff       	callq  428350 <ERR_put_error>
  436259:	c7 43 10 80 00 00 00 	movl   $0x80,0x10(%rbx)
  436260:	c7 43 0c 3c 00 00 00 	movl   $0x3c,0xc(%rbx)
  436267:	31 c0                	xor    %eax,%eax
  436269:	48 83 c4 08          	add    $0x8,%rsp
  43626d:	5b                   	pop    %rbx
  43626e:	5d                   	pop    %rbp
  43626f:	41 5c                	pop    %r12
  436271:	41 5d                	pop    %r13
  436273:	41 5e                	pop    %r14
  436275:	41 5f                	pop    %r15
  436277:	c3                   	retq   
  436278:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  43627f:	00 
  436280:	48 89 ce             	mov    %rcx,%rsi
  436283:	48 83 ee 01          	sub    $0x1,%rsi
  436287:	74 b1                	je     43623a <asn1_GetSequence+0x3a>
  436289:	4c 8d 57 01          	lea    0x1(%rdi),%r10
  43628d:	31 d2                	xor    %edx,%edx
  43628f:	eb 27                	jmp    4362b8 <asn1_GetSequence+0xb8>
  436291:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  436298:	48 c1 e2 07          	shl    $0x7,%rdx
  43629c:	83 e0 7f             	and    $0x7f,%eax
  43629f:	49 83 c2 01          	add    $0x1,%r10
  4362a3:	48 09 c2             	or     %rax,%rdx
  4362a6:	48 83 ee 01          	sub    $0x1,%rsi
  4362aa:	48 81 fa ff ff ff 00 	cmp    $0xffffff,%rdx
  4362b1:	7f 87                	jg     43623a <asn1_GetSequence+0x3a>
  4362b3:	48 85 f6             	test   %rsi,%rsi
  4362b6:	74 82                	je     43623a <asn1_GetSequence+0x3a>
  4362b8:	41 0f b6 02          	movzbl (%r10),%eax
  4362bc:	84 c0                	test   %al,%al
  4362be:	78 d8                	js     436298 <asn1_GetSequence+0x98>
  4362c0:	48 83 ee 01          	sub    $0x1,%rsi
  4362c4:	49 89 f0             	mov    %rsi,%r8
  4362c7:	0f 84 6d ff ff ff    	je     43623a <asn1_GetSequence+0x3a>
  4362cd:	48 89 d6             	mov    %rdx,%rsi
  4362d0:	0f b6 d0             	movzbl %al,%edx
  4362d3:	49 83 c2 01          	add    $0x1,%r10
  4362d7:	48 c1 e6 07          	shl    $0x7,%rsi
  4362db:	89 f0                	mov    %esi,%eax
  4362dd:	09 d0                	or     %edx,%eax
  4362df:	eb 0e                	jmp    4362ef <asn1_GetSequence+0xef>
  4362e1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  4362e8:	4c 8d 57 01          	lea    0x1(%rdi),%r10
  4362ec:	0f b6 c0             	movzbl %al,%eax
  4362ef:	89 43 14             	mov    %eax,0x14(%rbx)
  4362f2:	44 89 c8             	mov    %r9d,%eax
  4362f5:	44 89 c2             	mov    %r8d,%edx
  4362f8:	25 c0 00 00 00       	and    $0xc0,%eax
  4362fd:	45 85 c0             	test   %r8d,%r8d
  436300:	89 43 18             	mov    %eax,0x18(%rbx)
  436303:	0f 8e 31 ff ff ff    	jle    43623a <asn1_GetSequence+0x3a>
  436309:	41 0f b6 32          	movzbl (%r10),%esi
  43630d:	40 80 fe 80          	cmp    $0x80,%sil
  436311:	0f 84 d9 00 00 00    	je     4363f0 <asn1_GetSequence+0x1f0>
  436317:	41 89 f0             	mov    %esi,%r8d
  43631a:	4d 8d 62 01          	lea    0x1(%r10),%r12
  43631e:	41 83 e0 7f          	and    $0x7f,%r8d
  436322:	40 84 f6             	test   %sil,%sil
  436325:	41 0f b6 c0          	movzbl %r8b,%eax
  436329:	0f 88 d9 00 00 00    	js     436408 <asn1_GetSequence+0x208>
  43632f:	48 85 c0             	test   %rax,%rax
  436332:	0f 88 02 ff ff ff    	js     43623a <asn1_GetSequence+0x3a>
  436338:	45 31 ed             	xor    %r13d,%r13d
  43633b:	4c 29 e7             	sub    %r12,%rdi
  43633e:	45 89 cf             	mov    %r9d,%r15d
  436341:	48 89 43 20          	mov    %rax,0x20(%rbx)
  436345:	48 01 f9             	add    %rdi,%rcx
  436348:	41 83 e7 20          	and    $0x20,%r15d
  43634c:	49 89 fe             	mov    %rdi,%r14
  43634f:	48 39 c8             	cmp    %rcx,%rax
  436352:	0f 8f d8 01 00 00    	jg     436530 <asn1_GetSequence+0x330>
  436358:	45 0f b6 cf          	movzbl %r15b,%r9d
  43635c:	4c 89 23             	mov    %r12,(%rbx)
  43635f:	45 09 e9             	or     %r13d,%r9d
  436362:	44 89 c8             	mov    %r9d,%eax
  436365:	44 89 4b 10          	mov    %r9d,0x10(%rbx)
  436369:	25 80 00 00 00       	and    $0x80,%eax
  43636e:	0f 85 ec fe ff ff    	jne    436260 <asn1_GetSequence+0x60>
  436374:	83 7b 14 10          	cmpl   $0x10,0x14(%rbx)
  436378:	74 16                	je     436390 <asn1_GetSequence+0x190>
  43637a:	c7 43 0c 3d 00 00 00 	movl   $0x3d,0xc(%rbx)
  436381:	48 83 c4 08          	add    $0x8,%rsp
  436385:	5b                   	pop    %rbx
  436386:	5d                   	pop    %rbp
  436387:	41 5c                	pop    %r12
  436389:	41 5d                	pop    %r13
  43638b:	41 5e                	pop    %r14
  43638d:	41 5f                	pop    %r15
  43638f:	c3                   	retq   
  436390:	4c 89 f7             	mov    %r14,%rdi
  436393:	48 03 7d 00          	add    0x0(%rbp),%rdi
  436397:	48 89 fa             	mov    %rdi,%rdx
  43639a:	48 89 7d 00          	mov    %rdi,0x0(%rbp)
  43639e:	48 c1 ea 3f          	shr    $0x3f,%rdx
  4363a2:	84 d2                	test   %dl,%dl
  4363a4:	74 07                	je     4363ad <asn1_GetSequence+0x1ad>
  4363a6:	48 83 7b 28 00       	cmpq   $0x0,0x28(%rbx)
  4363ab:	75 33                	jne    4363e0 <asn1_GetSequence+0x1e0>
  4363ad:	41 83 f9 21          	cmp    $0x21,%r9d
  4363b1:	74 1d                	je     4363d0 <asn1_GetSequence+0x1d0>
  4363b3:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%rbx)
  4363ba:	48 83 c4 08          	add    $0x8,%rsp
  4363be:	b8 01 00 00 00       	mov    $0x1,%eax
  4363c3:	5b                   	pop    %rbx
  4363c4:	5d                   	pop    %rbp
  4363c5:	41 5c                	pop    %r12
  4363c7:	41 5d                	pop    %r13
  4363c9:	41 5e                	pop    %r14
  4363cb:	41 5f                	pop    %r15
  4363cd:	c3                   	retq   
  4363ce:	66 90                	xchg   %ax,%ax
  4363d0:	48 8b 43 38          	mov    0x38(%rbx),%rax
  4363d4:	48 03 38             	add    (%rax),%rdi
  4363d7:	4c 29 e7             	sub    %r12,%rdi
  4363da:	48 89 7b 20          	mov    %rdi,0x20(%rbx)
  4363de:	eb d3                	jmp    4363b3 <asn1_GetSequence+0x1b3>
  4363e0:	c7 43 0c 3e 00 00 00 	movl   $0x3e,0xc(%rbx)
  4363e7:	e9 7d fe ff ff       	jmpq   436269 <asn1_GetSequence+0x69>
  4363ec:	0f 1f 40 00          	nopl   0x0(%rax)
  4363f0:	4d 8d 62 01          	lea    0x1(%r10),%r12
  4363f4:	41 bd 01 00 00 00    	mov    $0x1,%r13d
  4363fa:	31 c0                	xor    %eax,%eax
  4363fc:	e9 3a ff ff ff       	jmpq   43633b <asn1_GetSequence+0x13b>
  436401:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  436408:	41 80 f8 08          	cmp    $0x8,%r8b
  43640c:	0f 87 28 fe ff ff    	ja     43623a <asn1_GetSequence+0x3a>
  436412:	83 fa 01             	cmp    $0x1,%edx
  436415:	0f 84 1f fe ff ff    	je     43623a <asn1_GetSequence+0x3a>
  43641b:	45 84 c0             	test   %r8b,%r8b
  43641e:	41 0f b6 f0          	movzbl %r8b,%esi
  436422:	0f 84 30 01 00 00    	je     436558 <asn1_GetSequence+0x358>
  436428:	83 fa 02             	cmp    $0x2,%edx
  43642b:	4d 8d 62 02          	lea    0x2(%r10),%r12
  43642f:	41 0f b6 42 01       	movzbl 0x1(%r10),%eax
  436434:	0f 84 00 fe ff ff    	je     43623a <asn1_GetSequence+0x3a>
  43643a:	83 fe 01             	cmp    $0x1,%esi
  43643d:	0f 84 ec fe ff ff    	je     43632f <asn1_GetSequence+0x12f>
  436443:	45 0f b6 42 02       	movzbl 0x2(%r10),%r8d
  436448:	48 c1 e0 08          	shl    $0x8,%rax
  43644c:	4d 8d 62 03          	lea    0x3(%r10),%r12
  436450:	4c 09 c0             	or     %r8,%rax
  436453:	83 fa 03             	cmp    $0x3,%edx
  436456:	0f 84 de fd ff ff    	je     43623a <asn1_GetSequence+0x3a>
  43645c:	83 fe 02             	cmp    $0x2,%esi
  43645f:	0f 84 ca fe ff ff    	je     43632f <asn1_GetSequence+0x12f>
  436465:	45 0f b6 42 03       	movzbl 0x3(%r10),%r8d
  43646a:	48 c1 e0 08          	shl    $0x8,%rax
  43646e:	4d 8d 62 04          	lea    0x4(%r10),%r12
  436472:	4c 09 c0             	or     %r8,%rax
  436475:	83 fa 04             	cmp    $0x4,%edx
  436478:	0f 84 bc fd ff ff    	je     43623a <asn1_GetSequence+0x3a>
  43647e:	83 fe 03             	cmp    $0x3,%esi
  436481:	0f 84 a8 fe ff ff    	je     43632f <asn1_GetSequence+0x12f>
  436487:	45 0f b6 42 04       	movzbl 0x4(%r10),%r8d
  43648c:	48 c1 e0 08          	shl    $0x8,%rax
  436490:	4d 8d 62 05          	lea    0x5(%r10),%r12
  436494:	4c 09 c0             	or     %r8,%rax
  436497:	83 fa 05             	cmp    $0x5,%edx
  43649a:	0f 84 9a fd ff ff    	je     43623a <asn1_GetSequence+0x3a>
  4364a0:	83 fe 04             	cmp    $0x4,%esi
  4364a3:	0f 84 86 fe ff ff    	je     43632f <asn1_GetSequence+0x12f>
  4364a9:	45 0f b6 42 05       	movzbl 0x5(%r10),%r8d
  4364ae:	48 c1 e0 08          	shl    $0x8,%rax
  4364b2:	4d 8d 62 06          	lea    0x6(%r10),%r12
  4364b6:	4c 09 c0             	or     %r8,%rax
  4364b9:	83 fa 06             	cmp    $0x6,%edx
  4364bc:	0f 84 78 fd ff ff    	je     43623a <asn1_GetSequence+0x3a>
  4364c2:	83 fe 05             	cmp    $0x5,%esi
  4364c5:	0f 84 64 fe ff ff    	je     43632f <asn1_GetSequence+0x12f>
  4364cb:	45 0f b6 42 06       	movzbl 0x6(%r10),%r8d
  4364d0:	48 c1 e0 08          	shl    $0x8,%rax
  4364d4:	4d 8d 62 07          	lea    0x7(%r10),%r12
  4364d8:	4c 09 c0             	or     %r8,%rax
  4364db:	83 fa 07             	cmp    $0x7,%edx
  4364de:	0f 84 56 fd ff ff    	je     43623a <asn1_GetSequence+0x3a>
  4364e4:	83 fe 06             	cmp    $0x6,%esi
  4364e7:	0f 84 42 fe ff ff    	je     43632f <asn1_GetSequence+0x12f>
  4364ed:	45 0f b6 42 07       	movzbl 0x7(%r10),%r8d
  4364f2:	48 c1 e0 08          	shl    $0x8,%rax
  4364f6:	4d 8d 62 08          	lea    0x8(%r10),%r12
  4364fa:	4c 09 c0             	or     %r8,%rax
  4364fd:	83 fa 08             	cmp    $0x8,%edx
  436500:	0f 84 34 fd ff ff    	je     43623a <asn1_GetSequence+0x3a>
  436506:	83 fe 07             	cmp    $0x7,%esi
  436509:	0f 84 20 fe ff ff    	je     43632f <asn1_GetSequence+0x12f>
  43650f:	41 0f b6 72 08       	movzbl 0x8(%r10),%esi
  436514:	48 c1 e0 08          	shl    $0x8,%rax
  436518:	4d 8d 62 09          	lea    0x9(%r10),%r12
  43651c:	48 09 f0             	or     %rsi,%rax
  43651f:	83 fa 09             	cmp    $0x9,%edx
  436522:	0f 85 07 fe ff ff    	jne    43632f <asn1_GetSequence+0x12f>
  436528:	e9 0d fd ff ff       	jmpq   43623a <asn1_GetSequence+0x3a>
  43652d:	0f 1f 00             	nopl   (%rax)
  436530:	41 b8 8e 00 00 00    	mov    $0x8e,%r8d
  436536:	b9 de 11 45 00       	mov    $0x4511de,%ecx
  43653b:	ba 9b 00 00 00       	mov    $0x9b,%edx
  436540:	be 72 00 00 00       	mov    $0x72,%esi
  436545:	bf 0d 00 00 00       	mov    $0xd,%edi
  43654a:	41 83 cf 80          	or     $0xffffff80,%r15d
  43654e:	e8 fd 1d ff ff       	callq  428350 <ERR_put_error>
  436553:	e9 00 fe ff ff       	jmpq   436358 <asn1_GetSequence+0x158>
  436558:	31 c0                	xor    %eax,%eax
  43655a:	e9 d0 fd ff ff       	jmpq   43632f <asn1_GetSequence+0x12f>
  43655f:	90                   	nop

0000000000436560 <ASN1_STRING_copy>:
  436560:	31 c0                	xor    %eax,%eax
  436562:	48 85 f6             	test   %rsi,%rsi
  436565:	74 63                	je     4365ca <ASN1_STRING_copy+0x6a>
  436567:	41 56                	push   %r14
  436569:	41 55                	push   %r13
  43656b:	49 89 f5             	mov    %rsi,%r13
  43656e:	41 54                	push   %r12
  436570:	55                   	push   %rbp
  436571:	53                   	push   %rbx
  436572:	48 63 2e             	movslq (%rsi),%rbp
  436575:	48 89 fb             	mov    %rdi,%rbx
  436578:	8b 46 04             	mov    0x4(%rsi),%eax
  43657b:	4c 8b 66 08          	mov    0x8(%rsi),%r12
  43657f:	85 ed                	test   %ebp,%ebp
  436581:	89 47 04             	mov    %eax,0x4(%rdi)
  436584:	0f 88 96 00 00 00    	js     436620 <ASN1_STRING_copy+0xc0>
  43658a:	39 2b                	cmp    %ebp,(%rbx)
  43658c:	7c 42                	jl     4365d0 <ASN1_STRING_copy+0x70>
  43658e:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
  436592:	48 85 ff             	test   %rdi,%rdi
  436595:	0f 84 9d 00 00 00    	je     436638 <ASN1_STRING_copy+0xd8>
  43659b:	4d 85 e4             	test   %r12,%r12
  43659e:	89 2b                	mov    %ebp,(%rbx)
  4365a0:	74 13                	je     4365b5 <ASN1_STRING_copy+0x55>
  4365a2:	48 89 ea             	mov    %rbp,%rdx
  4365a5:	4c 89 e6             	mov    %r12,%rsi
  4365a8:	e8 43 0a fd ff       	callq  406ff0 <memcpy@plt>
  4365ad:	48 8b 43 08          	mov    0x8(%rbx),%rax
  4365b1:	c6 04 28 00          	movb   $0x0,(%rax,%rbp,1)
  4365b5:	49 8b 45 10          	mov    0x10(%r13),%rax
  4365b9:	48 89 43 10          	mov    %rax,0x10(%rbx)
  4365bd:	b8 01 00 00 00       	mov    $0x1,%eax
  4365c2:	5b                   	pop    %rbx
  4365c3:	5d                   	pop    %rbp
  4365c4:	41 5c                	pop    %r12
  4365c6:	41 5d                	pop    %r13
  4365c8:	41 5e                	pop    %r14
  4365ca:	f3 c3                	repz retq 
  4365cc:	0f 1f 40 00          	nopl   0x0(%rax)
  4365d0:	4c 8b 73 08          	mov    0x8(%rbx),%r14
  4365d4:	4d 85 f6             	test   %r14,%r14
  4365d7:	74 5f                	je     436638 <ASN1_STRING_copy+0xd8>
  4365d9:	8d 75 01             	lea    0x1(%rbp),%esi
  4365dc:	4c 89 f7             	mov    %r14,%rdi
  4365df:	b9 84 01 00 00       	mov    $0x184,%ecx
  4365e4:	ba de 11 45 00       	mov    $0x4511de,%edx
  4365e9:	e8 42 ef fe ff       	callq  425530 <CRYPTO_realloc>
  4365ee:	48 89 43 08          	mov    %rax,0x8(%rbx)
  4365f2:	48 89 c7             	mov    %rax,%rdi
  4365f5:	48 85 ff             	test   %rdi,%rdi
  4365f8:	75 a1                	jne    43659b <ASN1_STRING_copy+0x3b>
  4365fa:	41 b8 88 01 00 00    	mov    $0x188,%r8d
  436600:	b9 de 11 45 00       	mov    $0x4511de,%ecx
  436605:	ba 41 00 00 00       	mov    $0x41,%edx
  43660a:	be ba 00 00 00       	mov    $0xba,%esi
  43660f:	40 b7 0d             	mov    $0xd,%dil
  436612:	e8 39 1d ff ff       	callq  428350 <ERR_put_error>
  436617:	4c 89 73 08          	mov    %r14,0x8(%rbx)
  43661b:	31 c0                	xor    %eax,%eax
  43661d:	eb a3                	jmp    4365c2 <ASN1_STRING_copy+0x62>
  43661f:	90                   	nop
  436620:	4d 85 e4             	test   %r12,%r12
  436623:	74 f6                	je     43661b <ASN1_STRING_copy+0xbb>
  436625:	4c 89 e7             	mov    %r12,%rdi
  436628:	e8 83 07 fd ff       	callq  406db0 <strlen@plt>
  43662d:	48 63 e8             	movslq %eax,%rbp
  436630:	e9 55 ff ff ff       	jmpq   43658a <ASN1_STRING_copy+0x2a>
  436635:	0f 1f 00             	nopl   (%rax)
  436638:	8d 7d 01             	lea    0x1(%rbp),%edi
  43663b:	ba 82 01 00 00       	mov    $0x182,%edx
  436640:	be de 11 45 00       	mov    $0x4511de,%esi
  436645:	45 31 f6             	xor    %r14d,%r14d
  436648:	e8 b3 ed fe ff       	callq  425400 <CRYPTO_malloc>
  43664d:	48 89 43 08          	mov    %rax,0x8(%rbx)
  436651:	48 89 c7             	mov    %rax,%rdi
  436654:	eb 9f                	jmp    4365f5 <ASN1_STRING_copy+0x95>
  436656:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  43665d:	00 00 00 

0000000000436660 <ASN1_STRING_dup>:
  436660:	48 85 ff             	test   %rdi,%rdi
  436663:	0f 84 e7 00 00 00    	je     436750 <ASN1_STRING_dup+0xf0>
  436669:	41 56                	push   %r14
  43666b:	41 55                	push   %r13
  43666d:	ba a9 01 00 00       	mov    $0x1a9,%edx
  436672:	41 54                	push   %r12
  436674:	55                   	push   %rbp
  436675:	be de 11 45 00       	mov    $0x4511de,%esi
  43667a:	53                   	push   %rbx
  43667b:	48 89 fd             	mov    %rdi,%rbp
  43667e:	bf 18 00 00 00       	mov    $0x18,%edi
  436683:	e8 78 ed fe ff       	callq  425400 <CRYPTO_malloc>
  436688:	48 85 c0             	test   %rax,%rax
  43668b:	48 89 c3             	mov    %rax,%rbx
  43668e:	0f 84 f7 00 00 00    	je     43678b <ASN1_STRING_dup+0x12b>
  436694:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  43669a:	4c 63 65 00          	movslq 0x0(%rbp),%r12
  43669e:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  4366a5:	00 
  4366a6:	c7 40 04 04 00 00 00 	movl   $0x4,0x4(%rax)
  4366ad:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  4366b4:	00 
  4366b5:	8b 45 04             	mov    0x4(%rbp),%eax
  4366b8:	4c 8b 6d 08          	mov    0x8(%rbp),%r13
  4366bc:	45 85 e4             	test   %r12d,%r12d
  4366bf:	89 43 04             	mov    %eax,0x4(%rbx)
  4366c2:	78 54                	js     436718 <ASN1_STRING_dup+0xb8>
  4366c4:	41 8d 7c 24 01       	lea    0x1(%r12),%edi
  4366c9:	ba 82 01 00 00       	mov    $0x182,%edx
  4366ce:	be de 11 45 00       	mov    $0x4511de,%esi
  4366d3:	e8 28 ed fe ff       	callq  425400 <CRYPTO_malloc>
  4366d8:	48 85 c0             	test   %rax,%rax
  4366db:	48 89 43 08          	mov    %rax,0x8(%rbx)
  4366df:	74 77                	je     436758 <ASN1_STRING_dup+0xf8>
  4366e1:	4d 85 ed             	test   %r13,%r13
  4366e4:	44 89 23             	mov    %r12d,(%rbx)
  4366e7:	74 17                	je     436700 <ASN1_STRING_dup+0xa0>
  4366e9:	4c 89 e2             	mov    %r12,%rdx
  4366ec:	4c 89 ee             	mov    %r13,%rsi
  4366ef:	48 89 c7             	mov    %rax,%rdi
  4366f2:	e8 f9 08 fd ff       	callq  406ff0 <memcpy@plt>
  4366f7:	48 8b 43 08          	mov    0x8(%rbx),%rax
  4366fb:	42 c6 04 20 00       	movb   $0x0,(%rax,%r12,1)
  436700:	48 8b 45 10          	mov    0x10(%rbp),%rax
  436704:	48 89 43 10          	mov    %rax,0x10(%rbx)
  436708:	48 89 d8             	mov    %rbx,%rax
  43670b:	5b                   	pop    %rbx
  43670c:	5d                   	pop    %rbp
  43670d:	41 5c                	pop    %r12
  43670f:	41 5d                	pop    %r13
  436711:	41 5e                	pop    %r14
  436713:	c3                   	retq   
  436714:	0f 1f 40 00          	nopl   0x0(%rax)
  436718:	4d 85 ed             	test   %r13,%r13
  43671b:	74 62                	je     43677f <ASN1_STRING_dup+0x11f>
  43671d:	4c 89 ef             	mov    %r13,%rdi
  436720:	e8 8b 06 fd ff       	callq  406db0 <strlen@plt>
  436725:	8d 78 01             	lea    0x1(%rax),%edi
  436728:	ba 82 01 00 00       	mov    $0x182,%edx
  43672d:	be de 11 45 00       	mov    $0x4511de,%esi
  436732:	49 89 c6             	mov    %rax,%r14
  436735:	4c 63 e0             	movslq %eax,%r12
  436738:	e8 c3 ec fe ff       	callq  425400 <CRYPTO_malloc>
  43673d:	48 85 c0             	test   %rax,%rax
  436740:	48 89 43 08          	mov    %rax,0x8(%rbx)
  436744:	74 12                	je     436758 <ASN1_STRING_dup+0xf8>
  436746:	44 89 33             	mov    %r14d,(%rbx)
  436749:	eb 9e                	jmp    4366e9 <ASN1_STRING_dup+0x89>
  43674b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  436750:	31 c0                	xor    %eax,%eax
  436752:	c3                   	retq   
  436753:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  436758:	41 b8 88 01 00 00    	mov    $0x188,%r8d
  43675e:	b9 de 11 45 00       	mov    $0x4511de,%ecx
  436763:	ba 41 00 00 00       	mov    $0x41,%edx
  436768:	be ba 00 00 00       	mov    $0xba,%esi
  43676d:	bf 0d 00 00 00       	mov    $0xd,%edi
  436772:	e8 d9 1b ff ff       	callq  428350 <ERR_put_error>
  436777:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
  43677e:	00 
  43677f:	48 89 df             	mov    %rbx,%rdi
  436782:	e8 d9 ef fe ff       	callq  425760 <CRYPTO_free>
  436787:	31 c0                	xor    %eax,%eax
  436789:	eb 80                	jmp    43670b <ASN1_STRING_dup+0xab>
  43678b:	41 b8 ac 01 00 00    	mov    $0x1ac,%r8d
  436791:	b9 de 11 45 00       	mov    $0x4511de,%ecx
  436796:	ba 41 00 00 00       	mov    $0x41,%edx
  43679b:	be 82 00 00 00       	mov    $0x82,%esi
  4367a0:	bf 0d 00 00 00       	mov    $0xd,%edi
  4367a5:	e8 a6 1b ff ff       	callq  428350 <ERR_put_error>
  4367aa:	31 c0                	xor    %eax,%eax
  4367ac:	e9 5a ff ff ff       	jmpq   43670b <ASN1_STRING_dup+0xab>
  4367b1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  4367b8:	0f 1f 84 00 00 00 00 
  4367bf:	00 

00000000004367c0 <ASN1_STRING_set>:
  4367c0:	41 55                	push   %r13
  4367c2:	41 54                	push   %r12
  4367c4:	49 89 f4             	mov    %rsi,%r12
  4367c7:	55                   	push   %rbp
  4367c8:	53                   	push   %rbx
  4367c9:	48 63 da             	movslq %edx,%rbx
  4367cc:	48 89 fd             	mov    %rdi,%rbp
  4367cf:	48 83 ec 08          	sub    $0x8,%rsp
  4367d3:	85 db                	test   %ebx,%ebx
  4367d5:	0f 88 95 00 00 00    	js     436870 <ASN1_STRING_set+0xb0>
  4367db:	3b 5d 00             	cmp    0x0(%rbp),%ebx
  4367de:	7e 60                	jle    436840 <ASN1_STRING_set+0x80>
  4367e0:	4c 8b 6d 08          	mov    0x8(%rbp),%r13
  4367e4:	4d 85 ed             	test   %r13,%r13
  4367e7:	74 60                	je     436849 <ASN1_STRING_set+0x89>
  4367e9:	8d 73 01             	lea    0x1(%rbx),%esi
  4367ec:	4c 89 ef             	mov    %r13,%rdi
  4367ef:	b9 84 01 00 00       	mov    $0x184,%ecx
  4367f4:	ba de 11 45 00       	mov    $0x4511de,%edx
  4367f9:	e8 32 ed fe ff       	callq  425530 <CRYPTO_realloc>
  4367fe:	48 89 45 08          	mov    %rax,0x8(%rbp)
  436802:	48 89 c7             	mov    %rax,%rdi
  436805:	48 85 ff             	test   %rdi,%rdi
  436808:	0f 84 82 00 00 00    	je     436890 <ASN1_STRING_set+0xd0>
  43680e:	4d 85 e4             	test   %r12,%r12
  436811:	89 5d 00             	mov    %ebx,0x0(%rbp)
  436814:	41 bd 01 00 00 00    	mov    $0x1,%r13d
  43681a:	74 13                	je     43682f <ASN1_STRING_set+0x6f>
  43681c:	48 89 da             	mov    %rbx,%rdx
  43681f:	4c 89 e6             	mov    %r12,%rsi
  436822:	e8 c9 07 fd ff       	callq  406ff0 <memcpy@plt>
  436827:	48 8b 45 08          	mov    0x8(%rbp),%rax
  43682b:	c6 04 18 00          	movb   $0x0,(%rax,%rbx,1)
  43682f:	48 83 c4 08          	add    $0x8,%rsp
  436833:	44 89 e8             	mov    %r13d,%eax
  436836:	5b                   	pop    %rbx
  436837:	5d                   	pop    %rbp
  436838:	41 5c                	pop    %r12
  43683a:	41 5d                	pop    %r13
  43683c:	c3                   	retq   
  43683d:	0f 1f 00             	nopl   (%rax)
  436840:	48 8b 7d 08          	mov    0x8(%rbp),%rdi
  436844:	48 85 ff             	test   %rdi,%rdi
  436847:	75 c5                	jne    43680e <ASN1_STRING_set+0x4e>
  436849:	8d 7b 01             	lea    0x1(%rbx),%edi
  43684c:	ba 82 01 00 00       	mov    $0x182,%edx
  436851:	be de 11 45 00       	mov    $0x4511de,%esi
  436856:	45 31 ed             	xor    %r13d,%r13d
  436859:	e8 a2 eb fe ff       	callq  425400 <CRYPTO_malloc>
  43685e:	48 89 45 08          	mov    %rax,0x8(%rbp)
  436862:	48 89 c7             	mov    %rax,%rdi
  436865:	eb 9e                	jmp    436805 <ASN1_STRING_set+0x45>
  436867:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  43686e:	00 00 
  436870:	48 85 f6             	test   %rsi,%rsi
  436873:	74 13                	je     436888 <ASN1_STRING_set+0xc8>
  436875:	48 89 f7             	mov    %rsi,%rdi
  436878:	e8 33 05 fd ff       	callq  406db0 <strlen@plt>
  43687d:	48 63 d8             	movslq %eax,%rbx
  436880:	e9 56 ff ff ff       	jmpq   4367db <ASN1_STRING_set+0x1b>
  436885:	0f 1f 00             	nopl   (%rax)
  436888:	45 31 ed             	xor    %r13d,%r13d
  43688b:	eb a2                	jmp    43682f <ASN1_STRING_set+0x6f>
  43688d:	0f 1f 00             	nopl   (%rax)
  436890:	41 b8 88 01 00 00    	mov    $0x188,%r8d
  436896:	b9 de 11 45 00       	mov    $0x4511de,%ecx
  43689b:	ba 41 00 00 00       	mov    $0x41,%edx
  4368a0:	be ba 00 00 00       	mov    $0xba,%esi
  4368a5:	40 b7 0d             	mov    $0xd,%dil
  4368a8:	e8 a3 1a ff ff       	callq  428350 <ERR_put_error>
  4368ad:	4c 89 6d 08          	mov    %r13,0x8(%rbp)
  4368b1:	45 31 ed             	xor    %r13d,%r13d
  4368b4:	e9 76 ff ff ff       	jmpq   43682f <ASN1_STRING_set+0x6f>
  4368b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000004368c0 <ASN1_STRING_set0>:
  4368c0:	41 54                	push   %r12
  4368c2:	55                   	push   %rbp
  4368c3:	49 89 f4             	mov    %rsi,%r12
  4368c6:	53                   	push   %rbx
  4368c7:	48 89 fb             	mov    %rdi,%rbx
  4368ca:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  4368ce:	89 d5                	mov    %edx,%ebp
  4368d0:	48 85 ff             	test   %rdi,%rdi
  4368d3:	74 05                	je     4368da <ASN1_STRING_set0+0x1a>
  4368d5:	e8 86 ee fe ff       	callq  425760 <CRYPTO_free>
  4368da:	4c 89 63 08          	mov    %r12,0x8(%rbx)
  4368de:	89 2b                	mov    %ebp,(%rbx)
  4368e0:	5b                   	pop    %rbx
  4368e1:	5d                   	pop    %rbp
  4368e2:	41 5c                	pop    %r12
  4368e4:	c3                   	retq   
  4368e5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  4368ec:	00 00 00 00 

00000000004368f0 <ASN1_STRING_new>:
  4368f0:	48 83 ec 08          	sub    $0x8,%rsp
  4368f4:	ba a9 01 00 00       	mov    $0x1a9,%edx
  4368f9:	be de 11 45 00       	mov    $0x4511de,%esi
  4368fe:	bf 18 00 00 00       	mov    $0x18,%edi
  436903:	e8 f8 ea fe ff       	callq  425400 <CRYPTO_malloc>
  436908:	48 85 c0             	test   %rax,%rax
  43690b:	74 22                	je     43692f <ASN1_STRING_new+0x3f>
  43690d:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  436913:	c7 40 04 04 00 00 00 	movl   $0x4,0x4(%rax)
  43691a:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  436921:	00 
  436922:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  436929:	00 
  43692a:	48 83 c4 08          	add    $0x8,%rsp
  43692e:	c3                   	retq   
  43692f:	41 b8 ac 01 00 00    	mov    $0x1ac,%r8d
  436935:	b9 de 11 45 00       	mov    $0x4511de,%ecx
  43693a:	ba 41 00 00 00       	mov    $0x41,%edx
  43693f:	be 82 00 00 00       	mov    $0x82,%esi
  436944:	bf 0d 00 00 00       	mov    $0xd,%edi
  436949:	e8 02 1a ff ff       	callq  428350 <ERR_put_error>
  43694e:	31 c0                	xor    %eax,%eax
  436950:	eb d8                	jmp    43692a <ASN1_STRING_new+0x3a>
  436952:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  436959:	1f 84 00 00 00 00 00 

0000000000436960 <ASN1_STRING_type_new>:
  436960:	53                   	push   %rbx
  436961:	ba a9 01 00 00       	mov    $0x1a9,%edx
  436966:	89 fb                	mov    %edi,%ebx
  436968:	be de 11 45 00       	mov    $0x4511de,%esi
  43696d:	bf 18 00 00 00       	mov    $0x18,%edi
  436972:	e8 89 ea fe ff       	callq  425400 <CRYPTO_malloc>
  436977:	48 85 c0             	test   %rax,%rax
  43697a:	74 1b                	je     436997 <ASN1_STRING_type_new+0x37>
  43697c:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  436982:	89 58 04             	mov    %ebx,0x4(%rax)
  436985:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  43698c:	00 
  43698d:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  436994:	00 
  436995:	5b                   	pop    %rbx
  436996:	c3                   	retq   
  436997:	41 b8 ac 01 00 00    	mov    $0x1ac,%r8d
  43699d:	b9 de 11 45 00       	mov    $0x4511de,%ecx
  4369a2:	ba 41 00 00 00       	mov    $0x41,%edx
  4369a7:	be 82 00 00 00       	mov    $0x82,%esi
  4369ac:	bf 0d 00 00 00       	mov    $0xd,%edi
  4369b1:	e8 9a 19 ff ff       	callq  428350 <ERR_put_error>
  4369b6:	31 c0                	xor    %eax,%eax
  4369b8:	5b                   	pop    %rbx
  4369b9:	c3                   	retq   
  4369ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000004369c0 <ASN1_STRING_free>:
  4369c0:	48 85 ff             	test   %rdi,%rdi
  4369c3:	74 3b                	je     436a00 <ASN1_STRING_free+0x40>
  4369c5:	53                   	push   %rbx
  4369c6:	48 89 fb             	mov    %rdi,%rbx
  4369c9:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  4369cd:	48 85 ff             	test   %rdi,%rdi
  4369d0:	74 06                	je     4369d8 <ASN1_STRING_free+0x18>
  4369d2:	f6 43 10 10          	testb  $0x10,0x10(%rbx)
  4369d6:	74 10                	je     4369e8 <ASN1_STRING_free+0x28>
  4369d8:	48 89 df             	mov    %rbx,%rdi
  4369db:	5b                   	pop    %rbx
  4369dc:	e9 7f ed fe ff       	jmpq   425760 <CRYPTO_free>
  4369e1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  4369e8:	e8 73 ed fe ff       	callq  425760 <CRYPTO_free>
  4369ed:	48 89 df             	mov    %rbx,%rdi
  4369f0:	5b                   	pop    %rbx
  4369f1:	e9 6a ed fe ff       	jmpq   425760 <CRYPTO_free>
  4369f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4369fd:	00 00 00 
  436a00:	f3 c3                	repz retq 
  436a02:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  436a09:	1f 84 00 00 00 00 00 

0000000000436a10 <ASN1_STRING_cmp>:
  436a10:	48 63 17             	movslq (%rdi),%rdx
  436a13:	89 d0                	mov    %edx,%eax
  436a15:	2b 06                	sub    (%rsi),%eax
  436a17:	75 29                	jne    436a42 <ASN1_STRING_cmp+0x32>
  436a19:	55                   	push   %rbp
  436a1a:	53                   	push   %rbx
  436a1b:	48 89 fd             	mov    %rdi,%rbp
  436a1e:	48 89 f3             	mov    %rsi,%rbx
  436a21:	48 83 ec 08          	sub    $0x8,%rsp
  436a25:	48 8b 76 08          	mov    0x8(%rsi),%rsi
  436a29:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  436a2d:	e8 ce 04 fd ff       	callq  406f00 <memcmp@plt>
  436a32:	85 c0                	test   %eax,%eax
  436a34:	75 06                	jne    436a3c <ASN1_STRING_cmp+0x2c>
  436a36:	8b 45 04             	mov    0x4(%rbp),%eax
  436a39:	2b 43 04             	sub    0x4(%rbx),%eax
  436a3c:	48 83 c4 08          	add    $0x8,%rsp
  436a40:	5b                   	pop    %rbx
  436a41:	5d                   	pop    %rbp
  436a42:	f3 c3                	repz retq 
  436a44:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
  436a4b:	00 00 00 00 00 

0000000000436a50 <asn1_add_error>:
  436a50:	53                   	push   %rbx
  436a51:	48 89 f9             	mov    %rdi,%rcx
  436a54:	89 f3                	mov    %esi,%ebx
  436a56:	ba aa e8 43 00       	mov    $0x43e8aa,%edx
  436a5b:	be 18 00 00 00       	mov    $0x18,%esi
  436a60:	48 83 ec 30          	sub    $0x30,%rsp
  436a64:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  436a6b:	00 00 
  436a6d:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  436a72:	31 c0                	xor    %eax,%eax
  436a74:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  436a79:	e8 72 da ff ff       	callq  4344f0 <BIO_snprintf>
  436a7e:	89 d9                	mov    %ebx,%ecx
  436a80:	ba e9 11 45 00       	mov    $0x4511e9,%edx
  436a85:	be 0d 00 00 00       	mov    $0xd,%esi
  436a8a:	48 89 e7             	mov    %rsp,%rdi
  436a8d:	31 c0                	xor    %eax,%eax
  436a8f:	e8 5c da ff ff       	callq  4344f0 <BIO_snprintf>
  436a94:	48 8d 54 24 10       	lea    0x10(%rsp),%rdx
  436a99:	31 c0                	xor    %eax,%eax
  436a9b:	49 89 e0             	mov    %rsp,%r8
  436a9e:	b9 ec 11 45 00       	mov    $0x4511ec,%ecx
  436aa3:	be f5 11 45 00       	mov    $0x4511f5,%esi
  436aa8:	bf 04 00 00 00       	mov    $0x4,%edi
  436aad:	e8 7e 23 ff ff       	callq  428e30 <ERR_add_error_data>
  436ab2:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  436ab7:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  436abe:	00 00 
  436ac0:	75 06                	jne    436ac8 <asn1_add_error+0x78>
  436ac2:	48 83 c4 30          	add    $0x30,%rsp
  436ac6:	5b                   	pop    %rbx
  436ac7:	c3                   	retq   
  436ac8:	e8 f3 03 fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  436acd:	0f 1f 00             	nopl   (%rax)

0000000000436ad0 <ASN1_STRING_length>:
  436ad0:	8b 07                	mov    (%rdi),%eax
  436ad2:	c3                   	retq   
  436ad3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  436ada:	84 00 00 00 00 00 

0000000000436ae0 <ASN1_STRING_length_set>:
  436ae0:	89 37                	mov    %esi,(%rdi)
  436ae2:	c3                   	retq   
  436ae3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 nopw %cs:0x0(%rax,%rax,1)
  436aea:	84 00 00 00 00 00 

0000000000436af0 <ASN1_STRING_type>:
  436af0:	8b 47 04             	mov    0x4(%rdi),%eax
  436af3:	c3                   	retq   
  436af4:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
  436afb:	00 00 00 00 00 

0000000000436b00 <ASN1_STRING_data>:
  436b00:	48 8b 47 08          	mov    0x8(%rdi),%rax
  436b04:	c3                   	retq   
  436b05:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  436b0c:	00 00 00 
  436b0f:	90                   	nop

0000000000436b10 <ex_class_item_LHASH_HASH>:
  436b10:	48 63 07             	movslq (%rdi),%rax
  436b13:	c3                   	retq   
  436b14:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
  436b1b:	00 00 00 00 00 

0000000000436b20 <ex_class_item_LHASH_COMP>:
  436b20:	8b 07                	mov    (%rdi),%eax
  436b22:	2b 06                	sub    (%rsi),%eax
  436b24:	c3                   	retq   
  436b25:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  436b2c:	00 00 00 00 

0000000000436b30 <int_new_class>:
  436b30:	53                   	push   %rbx
  436b31:	b9 75 01 00 00       	mov    $0x175,%ecx
  436b36:	ba 29 12 45 00       	mov    $0x451229,%edx
  436b3b:	be 02 00 00 00       	mov    $0x2,%esi
  436b40:	bf 09 00 00 00       	mov    $0x9,%edi
  436b45:	e8 c6 e2 fe ff       	callq  424e10 <CRYPTO_lock>
  436b4a:	8b 1d 90 1d 22 00    	mov    0x221d90(%rip),%ebx        # 6588e0 <ex_class>
  436b50:	b9 77 01 00 00       	mov    $0x177,%ecx
  436b55:	ba 29 12 45 00       	mov    $0x451229,%edx
  436b5a:	be 02 00 00 00       	mov    $0x2,%esi
  436b5f:	bf 0a 00 00 00       	mov    $0xa,%edi
  436b64:	8d 43 01             	lea    0x1(%rbx),%eax
  436b67:	89 05 73 1d 22 00    	mov    %eax,0x221d73(%rip)        # 6588e0 <ex_class>
  436b6d:	e8 9e e2 fe ff       	callq  424e10 <CRYPTO_lock>
  436b72:	89 d8                	mov    %ebx,%eax
  436b74:	5b                   	pop    %rbx
  436b75:	c3                   	retq   
  436b76:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  436b7d:	00 00 00 

0000000000436b80 <def_cleanup_util_cb>:
  436b80:	e9 db eb fe ff       	jmpq   425760 <CRYPTO_free>
  436b85:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  436b8c:	00 00 00 00 

0000000000436b90 <def_get_class>:
  436b90:	55                   	push   %rbp
  436b91:	53                   	push   %rbx
  436b92:	89 fd                	mov    %edi,%ebp
  436b94:	48 83 ec 28          	sub    $0x28,%rsp
  436b98:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  436b9f:	00 00 
  436ba1:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  436ba6:	31 c0                	xor    %eax,%eax
  436ba8:	48 83 3d e8 3d 22 00 	cmpq   $0x0,0x223de8(%rip)        # 65a998 <ex_data>
  436baf:	00 
  436bb0:	74 6e                	je     436c20 <def_get_class+0x90>
  436bb2:	b9 30 01 00 00       	mov    $0x130,%ecx
  436bb7:	ba 29 12 45 00       	mov    $0x451229,%edx
  436bbc:	be 02 00 00 00       	mov    $0x2,%esi
  436bc1:	bf 09 00 00 00       	mov    $0x9,%edi
  436bc6:	89 2c 24             	mov    %ebp,(%rsp)
  436bc9:	e8 42 e2 fe ff       	callq  424e10 <CRYPTO_lock>
  436bce:	48 8b 3d c3 3d 22 00 	mov    0x223dc3(%rip),%rdi        # 65a998 <ex_data>
  436bd5:	48 89 e6             	mov    %rsp,%rsi
  436bd8:	e8 63 e1 ff ff       	callq  434d40 <lh_retrieve>
  436bdd:	48 85 c0             	test   %rax,%rax
  436be0:	48 89 c3             	mov    %rax,%rbx
  436be3:	0f 84 7f 00 00 00    	je     436c68 <def_get_class+0xd8>
  436be9:	b9 45 01 00 00       	mov    $0x145,%ecx
  436bee:	ba 29 12 45 00       	mov    $0x451229,%edx
  436bf3:	be 02 00 00 00       	mov    $0x2,%esi
  436bf8:	bf 0a 00 00 00       	mov    $0xa,%edi
  436bfd:	e8 0e e2 fe ff       	callq  424e10 <CRYPTO_lock>
  436c02:	48 89 d8             	mov    %rbx,%rax
  436c05:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  436c0a:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  436c11:	00 00 
  436c13:	0f 85 26 01 00 00    	jne    436d3f <def_get_class+0x1af>
  436c19:	48 83 c4 28          	add    $0x28,%rsp
  436c1d:	5b                   	pop    %rbx
  436c1e:	5d                   	pop    %rbp
  436c1f:	c3                   	retq   
  436c20:	b9 0e 01 00 00       	mov    $0x10e,%ecx
  436c25:	ba 29 12 45 00       	mov    $0x451229,%edx
  436c2a:	be 02 00 00 00       	mov    $0x2,%esi
  436c2f:	bf 09 00 00 00       	mov    $0x9,%edi
  436c34:	e8 d7 e1 fe ff       	callq  424e10 <CRYPTO_lock>
  436c39:	48 83 3d 57 3d 22 00 	cmpq   $0x0,0x223d57(%rip)        # 65a998 <ex_data>
  436c40:	00 
  436c41:	0f 84 b9 00 00 00    	je     436d00 <def_get_class+0x170>
  436c47:	b9 12 01 00 00       	mov    $0x112,%ecx
  436c4c:	ba 29 12 45 00       	mov    $0x451229,%edx
  436c51:	be 02 00 00 00       	mov    $0x2,%esi
  436c56:	bf 0a 00 00 00       	mov    $0xa,%edi
  436c5b:	e8 b0 e1 fe ff       	callq  424e10 <CRYPTO_lock>
  436c60:	e9 4d ff ff ff       	jmpq   436bb2 <def_get_class+0x22>
  436c65:	0f 1f 00             	nopl   (%rax)
  436c68:	ba 34 01 00 00       	mov    $0x134,%edx
  436c6d:	be 29 12 45 00       	mov    $0x451229,%esi
  436c72:	bf 18 00 00 00       	mov    $0x18,%edi
  436c77:	e8 84 e7 fe ff       	callq  425400 <CRYPTO_malloc>
  436c7c:	48 85 c0             	test   %rax,%rax
  436c7f:	48 89 c3             	mov    %rax,%rbx
  436c82:	74 33                	je     436cb7 <def_get_class+0x127>
  436c84:	89 28                	mov    %ebp,(%rax)
  436c86:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%rax)
  436c8d:	e8 0e f3 fe ff       	callq  425fa0 <sk_new_null>
  436c92:	48 85 c0             	test   %rax,%rax
  436c95:	48 89 43 08          	mov    %rax,0x8(%rbx)
  436c99:	74 14                	je     436caf <def_get_class+0x11f>
  436c9b:	48 8b 3d f6 3c 22 00 	mov    0x223cf6(%rip),%rdi        # 65a998 <ex_data>
  436ca2:	48 89 de             	mov    %rbx,%rsi
  436ca5:	e8 a6 dc ff ff       	callq  434950 <lh_insert>
  436caa:	e9 3a ff ff ff       	jmpq   436be9 <def_get_class+0x59>
  436caf:	48 89 df             	mov    %rbx,%rdi
  436cb2:	e8 a9 ea fe ff       	callq  425760 <CRYPTO_free>
  436cb7:	b9 45 01 00 00       	mov    $0x145,%ecx
  436cbc:	ba 29 12 45 00       	mov    $0x451229,%edx
  436cc1:	be 02 00 00 00       	mov    $0x2,%esi
  436cc6:	bf 0a 00 00 00       	mov    $0xa,%edi
  436ccb:	e8 40 e1 fe ff       	callq  424e10 <CRYPTO_lock>
  436cd0:	41 b8 47 01 00 00    	mov    $0x147,%r8d
  436cd6:	b9 29 12 45 00       	mov    $0x451229,%ecx
  436cdb:	ba 41 00 00 00       	mov    $0x41,%edx
  436ce0:	be 69 00 00 00       	mov    $0x69,%esi
  436ce5:	bf 0f 00 00 00       	mov    $0xf,%edi
  436cea:	e8 61 16 ff ff       	callq  428350 <ERR_put_error>
  436cef:	31 c0                	xor    %eax,%eax
  436cf1:	e9 0f ff ff ff       	jmpq   436c05 <def_get_class+0x75>
  436cf6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  436cfd:	00 00 00 
  436d00:	be 20 6b 43 00       	mov    $0x436b20,%esi
  436d05:	bf 10 6b 43 00       	mov    $0x436b10,%edi
  436d0a:	e8 e1 d9 ff ff       	callq  4346f0 <lh_new>
  436d0f:	48 85 c0             	test   %rax,%rax
  436d12:	48 89 05 7f 3c 22 00 	mov    %rax,0x223c7f(%rip)        # 65a998 <ex_data>
  436d19:	0f 85 28 ff ff ff    	jne    436c47 <def_get_class+0xb7>
  436d1f:	b9 12 01 00 00       	mov    $0x112,%ecx
  436d24:	ba 29 12 45 00       	mov    $0x451229,%edx
  436d29:	be 02 00 00 00       	mov    $0x2,%esi
  436d2e:	bf 0a 00 00 00       	mov    $0xa,%edi
  436d33:	e8 d8 e0 fe ff       	callq  424e10 <CRYPTO_lock>
  436d38:	31 c0                	xor    %eax,%eax
  436d3a:	e9 c6 fe ff ff       	jmpq   436c05 <def_get_class+0x75>
  436d3f:	e8 7c 01 fd ff       	callq  406ec0 <__stack_chk_fail@plt>
  436d44:	66 66 66 2e 0f 1f 84 	data16 data16 nopw %cs:0x0(%rax,%rax,1)
  436d4b:	00 00 00 00 00 

0000000000436d50 <def_cleanup_cb>:
  436d50:	53                   	push   %rbx
  436d51:	48 89 fb             	mov    %rdi,%rbx
  436d54:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  436d58:	be 80 6b 43 00       	mov    $0x436b80,%esi
  436d5d:	e8 be f9 fe ff       	callq  426720 <sk_pop_free>
  436d62:	48 89 df             	mov    %rbx,%rdi
  436d65:	5b                   	pop    %rbx
  436d66:	e9 f5 e9 fe ff       	jmpq   425760 <CRYPTO_free>
  436d6b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000436d70 <int_get_new_index>:
  436d70:	41 57                	push   %r15
  436d72:	41 56                	push   %r14
  436d74:	49 89 f7             	mov    %rsi,%r15
  436d77:	41 55                	push   %r13
  436d79:	41 54                	push   %r12
  436d7b:	49 89 d6             	mov    %rdx,%r14
  436d7e:	55                   	push   %rbp
  436d7f:	53                   	push   %rbx
  436d80:	49 89 cd             	mov    %rcx,%r13
  436d83:	4c 89 cd             	mov    %r9,%rbp
  436d86:	48 83 ec 18          	sub    $0x18,%rsp
  436d8a:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  436d8f:	e8 fc fd ff ff       	callq  436b90 <def_get_class>
  436d94:	48 85 c0             	test   %rax,%rax
  436d97:	49 89 c4             	mov    %rax,%r12
  436d9a:	0f 84 ee 00 00 00    	je     436e8e <int_get_new_index+0x11e>
  436da0:	ba 53 01 00 00       	mov    $0x153,%edx
  436da5:	be 29 12 45 00       	mov    $0x451229,%esi
  436daa:	bf 28 00 00 00       	mov    $0x28,%edi
  436daf:	e8 4c e6 fe ff       	callq  425400 <CRYPTO_malloc>
  436db4:	48 85 c0             	test   %rax,%rax
  436db7:	48 89 c3             	mov    %rax,%rbx
  436dba:	0f 84 d5 00 00 00    	je     436e95 <int_get_new_index+0x125>
  436dc0:	4c 89 38             	mov    %r15,(%rax)
  436dc3:	4c 89 70 08          	mov    %r14,0x8(%rax)
  436dc7:	b9 5e 01 00 00       	mov    $0x15e,%ecx
  436dcc:	4c 89 68 10          	mov    %r13,0x10(%rax)
  436dd0:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  436dd5:	ba 29 12 45 00       	mov    $0x451229,%edx
  436dda:	48 89 6b 18          	mov    %rbp,0x18(%rbx)
  436dde:	be 02 00 00 00       	mov    $0x2,%esi
  436de3:	bf 09 00 00 00       	mov    $0x9,%edi
  436de8:	48 89 43 20          	mov    %rax,0x20(%rbx)
  436dec:	e8 1f e0 fe ff       	callq  424e10 <CRYPTO_lock>
  436df1:	eb 15                	jmp    436e08 <int_get_new_index+0x98>
  436df3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  436df8:	49 8b 7c 24 08       	mov    0x8(%r12),%rdi
  436dfd:	31 f6                	xor    %esi,%esi
  436dff:	e8 cc f6 fe ff       	callq  4264d0 <sk_push>
  436e04:	85 c0                	test   %eax,%eax
  436e06:	74 58                	je     436e60 <int_get_new_index+0xf0>
  436e08:	49 8b 7c 24 08       	mov    0x8(%r12),%rdi
  436e0d:	e8 ae f9 fe ff       	callq  4267c0 <sk_num>
  436e12:	41 8b 74 24 10       	mov    0x10(%r12),%esi
  436e17:	39 f0                	cmp    %esi,%eax
  436e19:	7e dd                	jle    436df8 <int_get_new_index+0x88>
  436e1b:	8d 46 01             	lea    0x1(%rsi),%eax
  436e1e:	49 8b 7c 24 08       	mov    0x8(%r12),%rdi
  436e23:	48 89 da             	mov    %rbx,%rdx
  436e26:	89 f5                	mov    %esi,%ebp
  436e28:	41 89 44 24 10       	mov    %eax,0x10(%r12)
  436e2d:	e8 ce f9 fe ff       	callq  426800 <sk_set>
  436e32:	b9 6b 01 00 00       	mov    $0x16b,%ecx
  436e37:	ba 29 12 45 00       	mov    $0x451229,%edx
  436e3c:	be 02 00 00 00       	mov    $0x2,%esi
  436e41:	bf 0a 00 00 00       	mov    $0xa,%edi
  436e46:	e8 c5 df fe ff       	callq  424e10 <CRYPTO_lock>
  436e4b:	89 e8                	mov    %ebp,%eax
  436e4d:	48 83 c4 18          	add    $0x18,%rsp
  436e51:	5b                   	pop    %rbx
  436e52:	5d                   	pop    %rbp
  436e53:	41 5c                	pop    %r12
  436e55:	41 5d                	pop    %r13
  436e57:	41 5e                	pop    %r14
  436e59:	41 5f                	pop    %r15
  436e5b:	c3                   	retq   
  436e5c:	0f 1f 40 00          	nopl   0x0(%rax)
  436e60:	41 b8 63 01 00 00    	mov    $0x163,%r8d
  436e66:	b9 29 12 45 00       	mov    $0x451229,%ecx
  436e6b:	ba 41 00 00 00       	mov    $0x41,%edx
  436e70:	be 68 00 00 00       	mov    $0x68,%esi
  436e75:	bf 0f 00 00 00       	mov    $0xf,%edi
  436e7a:	bd ff ff ff ff       	mov    $0xffffffff,%ebp
  436e7f:	e8 cc 14 ff ff       	callq  428350 <ERR_put_error>
  436e84:	48 89 df             	mov    %rbx,%rdi
  436e87:	e8 d4 e8 fe ff       	callq  425760 <CRYPTO_free>
  436e8c:	eb a4                	jmp    436e32 <int_get_new_index+0xc2>
  436e8e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  436e93:	eb b8                	jmp    436e4d <int_get_new_index+0xdd>
  436e95:	41 b8 56 01 00 00    	mov    $0x156,%r8d
  436e9b:	b9 29 12 45 00       	mov    $0x451229,%ecx
  436ea0:	ba 41 00 00 00       	mov    $0x41,%edx
  436ea5:	be 68 00 00 00       	mov    $0x68,%esi
  436eaa:	bf 0f 00 00 00       	mov    $0xf,%edi
  436eaf:	e8 9c 14 ff ff       	callq  428350 <ERR_put_error>
  436eb4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  436eb9:	eb 92                	jmp    436e4d <int_get_new_index+0xdd>
  436ebb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000436ec0 <int_new_ex_data>:
  436ec0:	41 57                	push   %r15
  436ec2:	41 56                	push   %r14
  436ec4:	49 89 f6             	mov    %rsi,%r14
  436ec7:	41 55                	push   %r13
  436ec9:	41 54                	push   %r12
  436ecb:	49 89 d4             	mov    %rdx,%r12
  436ece:	55                   	push   %rbp
  436ecf:	53                   	push   %rbx
  436ed0:	31 db                	xor    %ebx,%ebx
  436ed2:	48 83 ec 08          	sub    $0x8,%rsp
  436ed6:	e8 b5 fc ff ff       	callq  436b90 <def_get_class>
  436edb:	48 85 c0             	test   %rax,%rax
  436ede:	49 89 c7             	mov    %rax,%r15
  436ee1:	0f 84 49 01 00 00    	je     437030 <int_new_ex_data+0x170>
  436ee7:	b9 9d 01 00 00       	mov    $0x19d,%ecx
  436eec:	ba 29 12 45 00       	mov    $0x451229,%edx
  436ef1:	be 02 00 00 00       	mov    $0x2,%esi
  436ef6:	bf 05 00 00 00       	mov    $0x5,%edi
  436efb:	49 c7 04 24 00 00 00 	movq   $0x0,(%r12)
  436f02:	00 
  436f03:	e8 08 df fe ff       	callq  424e10 <CRYPTO_lock>
  436f08:	49 8b 7f 08          	mov    0x8(%r15),%rdi
  436f0c:	e8 af f8 fe ff       	callq  4267c0 <sk_num>
  436f11:	85 c0                	test   %eax,%eax
  436f13:	41 89 c5             	mov    %eax,%r13d
  436f16:	0f 8e 2c 01 00 00    	jle    437048 <int_new_ex_data+0x188>
  436f1c:	8d 3c c5 00 00 00 00 	lea    0x0(,%rax,8),%edi
  436f23:	ba a1 01 00 00       	mov    $0x1a1,%edx
  436f28:	be 29 12 45 00       	mov    $0x451229,%esi
  436f2d:	e8 ce e4 fe ff       	callq  425400 <CRYPTO_malloc>
  436f32:	48 85 c0             	test   %rax,%rax
  436f35:	48 89 c5             	mov    %rax,%rbp
  436f38:	0f 84 b2 00 00 00    	je     436ff0 <int_new_ex_data+0x130>
  436f3e:	31 db                	xor    %ebx,%ebx
  436f40:	49 8b 7f 08          	mov    0x8(%r15),%rdi
  436f44:	89 de                	mov    %ebx,%esi
  436f46:	e8 85 f8 fe ff       	callq  4267d0 <sk_value>
  436f4b:	48 89 44 dd 00       	mov    %rax,0x0(%rbp,%rbx,8)
  436f50:	48 83 c3 01          	add    $0x1,%rbx
  436f54:	41 39 dd             	cmp    %ebx,%r13d
  436f57:	7f e7                	jg     436f40 <int_new_ex_data+0x80>
  436f59:	b9 a8 01 00 00       	mov    $0x1a8,%ecx
  436f5e:	ba 29 12 45 00       	mov    $0x451229,%edx
  436f63:	be 02 00 00 00       	mov    $0x2,%esi
  436f68:	bf 06 00 00 00       	mov    $0x6,%edi
  436f6d:	31 db                	xor    %ebx,%ebx
  436f6f:	e8 9c de fe ff       	callq  424e10 <CRYPTO_lock>
  436f74:	eb 41                	jmp    436fb7 <int_new_ex_data+0xf7>
  436f76:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  436f7d:	00 00 00 
  436f80:	49 8b 3c 24          	mov    (%r12),%rdi
  436f84:	89 de                	mov    %ebx,%esi
  436f86:	e8 45 f8 fe ff       	callq  4267d0 <sk_value>
  436f8b:	4c 8b 44 dd 00       	mov    0x0(%rbp,%rbx,8),%r8
  436f90:	48 89 c6             	mov    %rax,%rsi
  436f93:	4d 8b 50 10          	mov    0x10(%r8),%r10
  436f97:	4d 8b 48 08          	mov    0x8(%r8),%r9
  436f9b:	44 89 f9             	mov    %r15d,%ecx
  436f9e:	4d 8b 00             	mov    (%r8),%r8
  436fa1:	4c 89 e2             	mov    %r12,%rdx
  436fa4:	4c 89 f7             	mov    %r14,%rdi
  436fa7:	41 ff d2             	callq  *%r10
  436faa:	48 83 c3 01          	add    $0x1,%rbx
  436fae:	41 39 dd             	cmp    %ebx,%r13d
  436fb1:	0f 8e b9 00 00 00    	jle    437070 <int_new_ex_data+0x1b0>
  436fb7:	4c 8b 44 dd 00       	mov    0x0(%rbp,%rbx,8),%r8
  436fbc:	41 89 df             	mov    %ebx,%r15d
  436fbf:	4d 85 c0             	test   %r8,%r8
  436fc2:	74 e6                	je     436faa <int_new_ex_data+0xea>
  436fc4:	4d 8b 50 10          	mov    0x10(%r8),%r10
  436fc8:	4d 85 d2             	test   %r10,%r10
  436fcb:	74 dd                	je     436faa <int_new_ex_data+0xea>
  436fcd:	49 8b 3c 24          	mov    (%r12),%rdi
  436fd1:	48 85 ff             	test   %rdi,%rdi
  436fd4:	0f 84 a6 00 00 00    	je     437080 <int_new_ex_data+0x1c0>
  436fda:	e8 e1 f7 fe ff       	callq  4267c0 <sk_num>
  436fdf:	39 c3                	cmp    %eax,%ebx
  436fe1:	7c 9d                	jl     436f80 <int_new_ex_data+0xc0>
  436fe3:	4c 8b 44 dd 00       	mov    0x0(%rbp,%rbx,8),%r8
  436fe8:	31 f6                	xor    %esi,%esi
  436fea:	4d 8b 50 10          	mov    0x10(%r8),%r10
  436fee:	eb a7                	jmp    436f97 <int_new_ex_data+0xd7>
  436ff0:	b9 a8 01 00 00       	mov    $0x1a8,%ecx
  436ff5:	ba 29 12 45 00       	mov    $0x451229,%edx
  436ffa:	be 02 00 00 00       	mov    $0x2,%esi
  436fff:	bf 06 00 00 00       	mov    $0x6,%edi
  437004:	e8 07 de fe ff       	callq  424e10 <CRYPTO_lock>
  437009:	41 b8 ab 01 00 00    	mov    $0x1ab,%r8d
  43700f:	b9 29 12 45 00       	mov    $0x451229,%ecx
  437014:	ba 41 00 00 00       	mov    $0x41,%edx
  437019:	be 6c 00 00 00       	mov    $0x6c,%esi
  43701e:	bf 0f 00 00 00       	mov    $0xf,%edi
  437023:	e8 28 13 ff ff       	callq  428350 <ERR_put_error>
  437028:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  43702f:	00 
  437030:	48 83 c4 08          	add    $0x8,%rsp
  437034:	89 d8                	mov    %ebx,%eax
  437036:	5b                   	pop    %rbx
  437037:	5d                   	pop    %rbp
  437038:	41 5c                	pop    %r12
  43703a:	41 5d                	pop    %r13
  43703c:	41 5e                	pop    %r14
  43703e:	41 5f                	pop    %r15
  437040:	c3                   	retq   
  437041:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  437048:	b9 a8 01 00 00       	mov    $0x1a8,%ecx
  43704d:	ba 29 12 45 00       	mov    $0x451229,%edx
  437052:	be 02 00 00 00       	mov    $0x2,%esi
  437057:	bf 06 00 00 00       	mov    $0x6,%edi
  43705c:	bb 01 00 00 00       	mov    $0x1,%ebx
  437061:	e8 aa dd fe ff       	callq  424e10 <CRYPTO_lock>
  437066:	eb c8                	jmp    437030 <int_new_ex_data+0x170>
  437068:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  43706f:	00 
  437070:	48 89 ef             	mov    %rbp,%rdi
  437073:	bb 01 00 00 00       	mov    $0x1,%ebx
  437078:	e8 e3 e6 fe ff       	callq  425760 <CRYPTO_free>
  43707d:	eb b1                	jmp    437030 <int_new_ex_data+0x170>
  43707f:	90                   	nop
  437080:	31 f6                	xor    %esi,%esi
  437082:	e9 10 ff ff ff       	jmpq   436f97 <int_new_ex_data+0xd7>
  437087:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  43708e:	00 00 

0000000000437090 <int_free_ex_data>:
  437090:	41 57                	push   %r15
  437092:	41 56                	push   %r14
  437094:	49 89 f6             	mov    %rsi,%r14
  437097:	41 55                	push   %r13
  437099:	41 54                	push   %r12
  43709b:	49 89 d4             	mov    %rdx,%r12
  43709e:	55                   	push   %rbp
  43709f:	53                   	push   %rbx
  4370a0:	48 83 ec 08          	sub    $0x8,%rsp
  4370a4:	e8 e7 fa ff ff       	callq  436b90 <def_get_class>
  4370a9:	48 85 c0             	test   %rax,%rax
  4370ac:	49 89 c7             	mov    %rax,%r15
  4370af:	0f 84 3a 01 00 00    	je     4371ef <int_free_ex_data+0x15f>
  4370b5:	b9 f4 01 00 00       	mov    $0x1f4,%ecx
  4370ba:	ba 29 12 45 00       	mov    $0x451229,%edx
  4370bf:	be 02 00 00 00       	mov    $0x2,%esi
  4370c4:	bf 05 00 00 00       	mov    $0x5,%edi
  4370c9:	e8 42 dd fe ff       	callq  424e10 <CRYPTO_lock>
  4370ce:	49 8b 7f 08          	mov    0x8(%r15),%rdi
  4370d2:	e8 e9 f6 fe ff       	callq  4267c0 <sk_num>
  4370d7:	85 c0                	test   %eax,%eax
  4370d9:	41 89 c5             	mov    %eax,%r13d
  4370dc:	0f 8e de 00 00 00    	jle    4371c0 <int_free_ex_data+0x130>
  4370e2:	8d 3c c5 00 00 00 00 	lea    0x0(,%rax,8),%edi
  4370e9:	ba f8 01 00 00       	mov    $0x1f8,%edx
  4370ee:	be 29 12 45 00       	mov    $0x451229,%esi
  4370f3:	e8 08 e3 fe ff       	callq  425400 <CRYPTO_malloc>
  4370f8:	48 85 c0             	test   %rax,%rax
  4370fb:	48 89 c5             	mov    %rax,%rbp
  4370fe:	0f 84 13 01 00 00    	je     437217 <int_free_ex_data+0x187>
  437104:	31 db                	xor    %ebx,%ebx
  437106:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  43710d:	00 00 00 
  437110:	49 8b 7f 08          	mov    0x8(%r15),%rdi
  437114:	89 de                	mov    %ebx,%esi
  437116:	e8 b5 f6 fe ff       	callq  4267d0 <sk_value>
  43711b:	48 89 44 dd 00       	mov    %rax,0x0(%rbp,%rbx,8)
  437120:	48 83 c3 01          	add    $0x1,%rbx
  437124:	41 39 dd             	cmp    %ebx,%r13d
  437127:	7f e7                	jg     437110 <int_free_ex_data+0x80>
  437129:	b9 ff 01 00 00       	mov    $0x1ff,%ecx
  43712e:	ba 29 12 45 00       	mov    $0x451229,%edx
  437133:	be 02 00 00 00       	mov    $0x2,%esi
  437138:	bf 06 00 00 00       	mov    $0x6,%edi
  43713d:	31 db                	xor    %ebx,%ebx
  43713f:	e8 cc dc fe ff       	callq  424e10 <CRYPTO_lock>
  437144:	eb 3d                	jmp    437183 <int_free_ex_data+0xf3>
  437146:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  43714d:	00 00 00 
  437150:	49 8b 3c 24          	mov    (%r12),%rdi
  437154:	89 de                	mov    %ebx,%esi
  437156:	e8 75 f6 fe ff       	callq  4267d0 <sk_value>
  43715b:	4c 8b 44 dd 00       	mov    0x0(%rbp,%rbx,8),%r8
  437160:	48 89 c6             	mov    %rax,%rsi
  437163:	4d 8b 50 18          	mov    0x18(%r8),%r10
  437167:	4d 8b 48 08          	mov    0x8(%r8),%r9
  43716b:	44 89 f9             	mov    %r15d,%ecx
  43716e:	4d 8b 00             	mov    (%r8),%r8
  437171:	4c 89 e2             	mov    %r12,%rdx
  437174:	4c 89 f7             	mov    %r14,%rdi
  437177:	41 ff d2             	callq  *%r10
  43717a:	48 83 c3 01          	add    $0x1,%rbx
  43717e:	41 39 dd             	cmp    %ebx,%r13d
  437181:	7e 7d                	jle    437200 <int_free_ex_data+0x170>
  437183:	4c 8b 44 dd 00       	mov    0x0(%rbp,%rbx,8),%r8
  437188:	41 89 df             	mov    %ebx,%r15d
  43718b:	4d 85 c0             	test   %r8,%r8
  43718e:	74 ea                	je     43717a <int_free_ex_data+0xea>
  437190:	4d 8b 50 18          	mov    0x18(%r8),%r10
  437194:	4d 85 d2             	test   %r10,%r10
  437197:	74 e1                	je     43717a <int_free_ex_data+0xea>
  437199:	49 8b 3c 24          	mov    (%r12),%rdi
  43719d:	48 85 ff             	test   %rdi,%rdi
  4371a0:	74 6e                	je     437210 <int_free_ex_data+0x180>
  4371a2:	e8 19 f6 fe ff       	callq  4267c0 <sk_num>
  4371a7:	39 c3                	cmp    %eax,%ebx
  4371a9:	7c a5                	jl     437150 <int_free_ex_data+0xc0>
  4371ab:	4c 8b 44 dd 00       	mov    0x0(%rbp,%rbx,8),%r8
  4371b0:	31 f6                	xor    %esi,%esi
  4371b2:	4d 8b 50 18          	mov    0x18(%r8),%r10
  4371b6:	eb af                	jmp    437167 <int_free_ex_data+0xd7>
  4371b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4371bf:	00 
  4371c0:	b9 ff 01 00 00       	mov    $0x1ff,%ecx
  4371c5:	ba 29 12 45 00       	mov    $0x451229,%edx
  4371ca:	be 02 00 00 00       	mov    $0x2,%esi
  4371cf:	bf 06 00 00 00       	mov    $0x6,%edi
  4371d4:	e8 37 dc fe ff       	callq  424e10 <CRYPTO_lock>
  4371d9:	49 8b 3c 24          	mov    (%r12),%rdi
  4371dd:	48 85 ff             	test   %rdi,%rdi
  4371e0:	74 0d                	je     4371ef <int_free_ex_data+0x15f>
  4371e2:	e8 a9 f5 fe ff       	callq  426790 <sk_free>
  4371e7:	49 c7 04 24 00 00 00 	movq   $0x0,(%r12)
  4371ee:	00 
  4371ef:	48 83 c4 08          	add    $0x8,%rsp
  4371f3:	5b                   	pop    %rbx
  4371f4:	5d                   	pop    %rbp
  4371f5:	41 5c                	pop    %r12
  4371f7:	41 5d                	pop    %r13
  4371f9:	41 5e                	pop    %r14
  4371fb:	41 5f                	pop    %r15
  4371fd:	c3                   	retq   
  4371fe:	66 90                	xchg   %ax,%ax
  437200:	48 89 ef             	mov    %rbp,%rdi
  437203:	e8 58 e5 fe ff       	callq  425760 <CRYPTO_free>
  437208:	eb cf                	jmp    4371d9 <int_free_ex_data+0x149>
  43720a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  437210:	31 f6                	xor    %esi,%esi
  437212:	e9 50 ff ff ff       	jmpq   437167 <int_free_ex_data+0xd7>
  437217:	b9 ff 01 00 00       	mov    $0x1ff,%ecx
  43721c:	ba 29 12 45 00       	mov    $0x451229,%edx
  437221:	be 02 00 00 00       	mov    $0x2,%esi
  437226:	bf 06 00 00 00       	mov    $0x6,%edi
  43722b:	e8 e0 db fe ff       	callq  424e10 <CRYPTO_lock>
  437230:	48 83 c4 08          	add    $0x8,%rsp
  437234:	41 b8 02 02 00 00    	mov    $0x202,%r8d
  43723a:	b9 29 12 45 00       	mov    $0x451229,%ecx
  43723f:	5b                   	pop    %rbx
  437240:	5d                   	pop    %rbp
  437241:	41 5c                	pop    %r12
  437243:	41 5d                	pop    %r13
  437245:	41 5e                	pop    %r14
  437247:	41 5f                	pop    %r15
  437249:	ba 41 00 00 00       	mov    $0x41,%edx
  43724e:	be 6b 00 00 00       	mov    $0x6b,%esi
  437253:	bf 0f 00 00 00       	mov    $0xf,%edi
  437258:	e9 f3 10 ff ff       	jmpq   428350 <ERR_put_error>
  43725d:	0f 1f 00             	nopl   (%rax)

0000000000437260 <int_cleanup>:
  437260:	48 83 ec 08          	sub    $0x8,%rsp
  437264:	48 8b 3d 2d 37 22 00 	mov    0x22372d(%rip),%rdi        # 65a998 <ex_data>
  43726b:	48 85 ff             	test   %rdi,%rdi
  43726e:	74 38                	je     4372a8 <int_cleanup+0x48>
  437270:	be 50 6d 43 00       	mov    $0x436d50,%esi
  437275:	e8 96 db ff ff       	callq  434e10 <lh_doall>
  43727a:	48 8b 3d 17 37 22 00 	mov    0x223717(%rip),%rdi        # 65a998 <ex_data>
  437281:	e8 5a d6 ff ff       	callq  4348e0 <lh_free>
  437286:	48 c7 05 07 37 22 00 	movq   $0x0,0x223707(%rip)        # 65a998 <ex_data>
  43728d:	00 00 00 00 
  437291:	48 c7 05 04 37 22 00 	movq   $0x0,0x223704(%rip)        # 65a9a0 <impl>
  437298:	00 00 00 00 
  43729c:	48 83 c4 08          	add    $0x8,%rsp
  4372a0:	c3                   	retq   
  4372a1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  4372a8:	b9 0e 01 00 00       	mov    $0x10e,%ecx
  4372ad:	ba 29 12 45 00       	mov    $0x451229,%edx
  4372b2:	be 02 00 00 00       	mov    $0x2,%esi
  4372b7:	40 b7 09             	mov    $0x9,%dil
  4372ba:	e8 51 db fe ff       	callq  424e10 <CRYPTO_lock>
  4372bf:	48 83 3d d1 36 22 00 	cmpq   $0x0,0x2236d1(%rip)        # 65a998 <ex_data>
  4372c6:	00 
  4372c7:	74 27                	je     4372f0 <int_cleanup+0x90>
  4372c9:	bf 0a 00 00 00       	mov    $0xa,%edi
  4372ce:	b9 12 01 00 00       	mov    $0x112,%ecx
  4372d3:	ba 29 12 45 00       	mov    $0x451229,%edx
  4372d8:	be 02 00 00 00       	mov    $0x2,%esi
  4372dd:	e8 2e db fe ff       	callq  424e10 <CRYPTO_lock>
  4372e2:	48 8b 3d af 36 22 00 	mov    0x2236af(%rip),%rdi        # 65a998 <ex_data>
  4372e9:	eb 85                	jmp    437270 <int_cleanup+0x10>
  4372eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4372f0:	be 20 6b 43 00       	mov    $0x436b20,%esi
  4372f5:	bf 10 6b 43 00       	mov    $0x436b10,%edi
  4372fa:	e8 f1 d3 ff ff       	callq  4346f0 <lh_new>
  4372ff:	48 85 c0             	test   %rax,%rax
  437302:	48 89 05 8f 36 22 00 	mov    %rax,0x22368f(%rip)        # 65a998 <ex_data>
  437309:	75 be                	jne    4372c9 <int_cleanup+0x69>
  43730b:	b9 12 01 00 00       	mov    $0x112,%ecx
  437310:	ba 29 12 45 00       	mov    $0x451229,%edx
  437315:	be 02 00 00 00       	mov    $0x2,%esi
  43731a:	bf 0a 00 00 00       	mov    $0xa,%edi
  43731f:	48 83 c4 08          	add    $0x8,%rsp
  437323:	e9 e8 da fe ff       	jmpq   424e10 <CRYPTO_lock>
  437328:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  43732f:	00 

0000000000437330 <int_dup_ex_data>:
  437330:	41 57                	push   %r15
  437332:	41 56                	push   %r14
  437334:	49 89 d6             	mov    %rdx,%r14
  437337:	41 55                	push   %r13
  437339:	41 54                	push   %r12
  43733b:	55                   	push   %rbp
  43733c:	53                   	push   %rbx
  43733d:	48 83 ec 28          	sub    $0x28,%rsp
  437341:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  437348:	00 00 
  43734a:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  43734f:	31 c0                	xor    %eax,%eax
  437351:	48 83 3a 00          	cmpq   $0x0,(%rdx)
  437355:	0f 84 a0 01 00 00    	je     4374fb <int_dup_ex_data+0x1cb>
  43735b:	48 89 f5             	mov    %rsi,%rbp
  43735e:	31 db                	xor    %ebx,%ebx
  437360:	e8 2b f8 ff ff       	callq  436b90 <def_get_class>
  437365:	48 85 c0             	test   %rax,%rax
  437368:	49 89 c4             	mov    %rax,%r12
  43736b:	0f 84 8f 01 00 00    	je     437500 <int_dup_ex_data+0x1d0>
  437371:	b9 c9 01 00 00       	mov    $0x1c9,%ecx
  437376:	ba 29 12 45 00       	mov    $0x451229,%edx
  43737b:	be 02 00 00 00       	mov    $0x2,%esi
  437380:	bf 05 00 00 00       	mov    $0x5,%edi
  437385:	e8 86 da fe ff       	callq  424e10 <CRYPTO_lock>
  43738a:	49 8b 7c 24 08       	mov    0x8(%r12),%rdi
  43738f:	e8 2c f4 fe ff       	callq  4267c0 <sk_num>
  437394:	49 8b 3e             	mov    (%r14),%rdi
  437397:	41 89 c5             	mov    %eax,%r13d
  43739a:	e8 21 f4 fe ff       	callq  4267c0 <sk_num>
  43739f:	44 39 e8             	cmp    %r13d,%eax
  4373a2:	44 0f 4e e8          	cmovle %eax,%r13d
  4373a6:	45 85 ed             	test   %r13d,%r13d
  4373a9:	44 89 6c 24 0c       	mov    %r13d,0xc(%rsp)
  4373ae:	0f 8e 71 01 00 00    	jle    437525 <int_dup_ex_data+0x1f5>
  4373b4:	42 8d 3c ed 00 00 00 	lea    0x0(,%r13,8),%edi
  4373bb:	00 
  4373bc:	ba d0 01 00 00       	mov    $0x1d0,%edx
  4373c1:	be 29 12 45 00       	mov    $0x451229,%esi
  4373c6:	e8 35 e0 fe ff       	callq  425400 <CRYPTO_malloc>
  4373cb:	48 85 c0             	test   %rax,%rax
  4373ce:	48 89 04 24          	mov    %rax,(%rsp)
  4373d2:	0f 84 e0 01 00 00    	je     4375b8 <int_dup_ex_data+0x288>
  4373d8:	31 db                	xor    %ebx,%ebx
  4373da:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  4373e0:	49 8b 7c 24 08       	mov    0x8(%r12),%rdi
  4373e5:	89 de                	mov    %ebx,%esi
  4373e7:	e8 e4 f3 fe ff       	callq  4267d0 <sk_value>
  4373ec:	48 8b 0c 24          	mov    (%rsp),%rcx
  4373f0:	48 89 04 d9          	mov    %rax,(%rcx,%rbx,8)
  4373f4:	48 83 c3 01          	add    $0x1,%rbx
  4373f8:	39 5c 24 0c          	cmp    %ebx,0xc(%rsp)
  4373fc:	7f e2                	jg     4373e0 <int_dup_ex_data+0xb0>
  4373fe:	b9 d7 01 00 00       	mov    $0x1d7,%ecx
  437403:	ba 29 12 45 00       	mov    $0x451229,%edx
  437408:	be 02 00 00 00       	mov    $0x2,%esi
  43740d:	bf 06 00 00 00       	mov    $0x6,%edi
  437412:	45 31 e4             	xor    %r12d,%r12d
  437415:	e8 f6 d9 fe ff       	callq  424e10 <CRYPTO_lock>
  43741a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  437420:	49 8b 3e             	mov    (%r14),%rdi
  437423:	44 89 e3             	mov    %r12d,%ebx
  437426:	48 85 ff             	test   %rdi,%rdi
  437429:	0f 84 31 01 00 00    	je     437560 <int_dup_ex_data+0x230>
  43742f:	e8 8c f3 fe ff       	callq  4267c0 <sk_num>
  437434:	41 39 c4             	cmp    %eax,%r12d
  437437:	0f 8d 23 01 00 00    	jge    437560 <int_dup_ex_data+0x230>
  43743d:	49 8b 3e             	mov    (%r14),%rdi
  437440:	44 89 e6             	mov    %r12d,%esi
  437443:	e8 88 f3 fe ff       	callq  4267d0 <sk_value>
  437448:	48 8b 0c 24          	mov    (%rsp),%rcx
  43744c:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  437451:	4a 8b 14 e1          	mov    (%rcx,%r12,8),%rdx
  437455:	48 85 d2             	test   %rdx,%rdx
  437458:	0f 84 52 01 00 00    	je     4375b0 <int_dup_ex_data+0x280>
  43745e:	4c 8b 52 20          	mov    0x20(%rdx),%r10
  437462:	49 89 c5             	mov    %rax,%r13
  437465:	4d 85 d2             	test   %r10,%r10
  437468:	74 1c                	je     437486 <int_dup_ex_data+0x156>
  43746a:	4c 8b 4a 08          	mov    0x8(%rdx),%r9
  43746e:	4c 8b 02             	mov    (%rdx),%r8
  437471:	89 d9                	mov    %ebx,%ecx
  437473:	48 8d 54 24 10       	lea    0x10(%rsp),%rdx
  437478:	4c 89 f6             	mov    %r14,%rsi
  43747b:	48 89 ef             	mov    %rbp,%rdi
  43747e:	41 ff d2             	callq  *%r10
  437481:	4c 8b 6c 24 10       	mov    0x10(%rsp),%r13
  437486:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
  43748a:	48 85 ff             	test   %rdi,%rdi
  43748d:	0f 84 dd 00 00 00    	je     437570 <int_dup_ex_data+0x240>
  437493:	e8 28 f3 fe ff       	callq  4267c0 <sk_num>
  437498:	39 c3                	cmp    %eax,%ebx
  43749a:	41 89 c7             	mov    %eax,%r15d
  43749d:	7d 16                	jge    4374b5 <int_dup_ex_data+0x185>
  43749f:	e9 a4 00 00 00       	jmpq   437548 <int_dup_ex_data+0x218>
  4374a4:	0f 1f 40 00          	nopl   0x0(%rax)
  4374a8:	41 83 c7 01          	add    $0x1,%r15d
  4374ac:	44 39 fb             	cmp    %r15d,%ebx
  4374af:	0f 8c 93 00 00 00    	jl     437548 <int_dup_ex_data+0x218>
  4374b5:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
  4374b9:	31 f6                	xor    %esi,%esi
  4374bb:	e8 10 f0 fe ff       	callq  4264d0 <sk_push>
  4374c0:	85 c0                	test   %eax,%eax
  4374c2:	75 e4                	jne    4374a8 <int_dup_ex_data+0x178>
  4374c4:	41 b8 67 02 00 00    	mov    $0x267,%r8d
  4374ca:	b9 29 12 45 00       	mov    $0x451229,%ecx
  4374cf:	ba 41 00 00 00       	mov    $0x41,%edx
  4374d4:	be 66 00 00 00       	mov    $0x66,%esi
  4374d9:	bf 0f 00 00 00       	mov    $0xf,%edi
  4374de:	e8 6d 0e ff ff       	callq  428350 <ERR_put_error>
  4374e3:	49 83 c4 01          	add    $0x1,%r12
  4374e7:	44 39 64 24 0c       	cmp    %r12d,0xc(%rsp)
  4374ec:	0f 8f 2e ff ff ff    	jg     437420 <int_dup_ex_data+0xf0>
  4374f2:	48 8b 3c 24          	mov    (%rsp),%rdi
  4374f6:	e8 65 e2 fe ff       	callq  425760 <CRYPTO_free>
  4374fb:	bb 01 00 00 00       	mov    $0x1,%ebx
  437500:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
  437505:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  43750c:	00 00 
  43750e:	89 d8                	mov    %ebx,%eax
  437510:	0f 85 df 00 00 00    	jne    4375f5 <int_dup_ex_data+0x2c5>
  437516:	48 83 c4 28          	add    $0x28,%rsp
  43751a:	5b                   	pop    %rbx
  43751b:	5d                   	pop    %rbp
  43751c:	41 5c                	pop    %r12
  43751e:	41 5d                	pop    %r13
  437520:	41 5e                	pop    %r14
  437522:	41 5f                	pop    %r15
  437524:	c3                   	retq   
  437525:	b9 d7 01 00 00       	mov    $0x1d7,%ecx
  43752a:	ba 29 12 45 00       	mov    $0x451229,%edx
  43752f:	be 02 00 00 00       	mov    $0x2,%esi
  437534:	bf 06 00 00 00       	mov    $0x6,%edi
  437539:	bb 01 00 00 00       	mov    $0x1,%ebx
  43753e:	e8 cd d8 fe ff       	callq  424e10 <CRYPTO_lock>
  437543:	eb bb                	jmp    437500 <int_dup_ex_data+0x1d0>
  437545:	0f 1f 00             	nopl   (%rax)
  437548:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
  43754c:	4c 89 ea             	mov    %r13,%rdx
  43754f:	89 de                	mov    %ebx,%esi
  437551:	e8 aa f2 fe ff       	callq  426800 <sk_set>
  437556:	eb 8b                	jmp    4374e3 <int_dup_ex_data+0x1b3>
  437558:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  43755f:	00 
  437560:	31 c0                	xor    %eax,%eax
  437562:	e9 e1 fe ff ff       	jmpq   437448 <int_dup_ex_data+0x118>
  437567:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  43756e:	00 00 
  437570:	e8 2b ea fe ff       	callq  425fa0 <sk_new_null>
  437575:	48 85 c0             	test   %rax,%rax
  437578:	48 89 45 00          	mov    %rax,0x0(%rbp)
  43757c:	48 89 c7             	mov    %rax,%rdi
  43757f:	0f 85 0e ff ff ff    	jne    437493 <int_dup_ex_data+0x163>
  437585:	41 b8 5d 02 00 00    	mov    $0x25d,%r8d
  43758b:	b9 29 12 45 00       	mov    $0x451229,%ecx
  437590:	ba 41 00 00 00       	mov    $0x41,%edx
  437595:	be 66 00 00 00       	mov    $0x66,%esi
  43759a:	40 b7 0f             	mov    $0xf,%dil
  43759d:	e8 ae 0d ff ff       	callq  428350 <ERR_put_error>
  4375a2:	e9 3c ff ff ff       	jmpq   4374e3 <int_dup_ex_data+0x1b3>
  4375a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  4375ae:	00 00 
  4375b0:	49 89 c5             	mov    %rax,%r13
  4375b3:	e9 ce fe ff ff       	jmpq   437486 <int_dup_ex_data+0x156>
  4375b8:	b9 d7 01 00 00       	mov    $0x1d7,%ecx
  4375bd:	ba 29 12 45 00       	mov    $0x451229,%edx
  4375c2:	be 02 00 00 00       	mov    $0x2,%esi
  4375c7:	bf 06 00 00 00       	mov    $0x6,%edi
  4375cc:	e8 3f d8 fe ff       	callq  424e10 <CRYPTO_lock>
  4375d1:	41 b8 da 01 00 00    	mov    $0x1da,%r8d
  4375d7:	b9 29 12 45 00       	mov    $0x451229,%ecx
  4375dc:	ba 41 00 00 00       	mov    $0x41,%edx
  4375e1:	be 6a 00 00 00       	mov    $0x6a,%esi
  4375e6:	bf 0f 00 00 00       	mov    $0xf,%edi
  4375eb:	e8 60 0d ff ff       	callq  428350 <ERR_put_error>
  4375f0:	e9 0b ff ff ff       	jmpq   437500 <int_dup_ex_data+0x1d0>
  4375f5:	e8 c6 f8 fc ff       	callq  406ec0 <__stack_chk_fail@plt>
  4375fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000437600 <CRYPTO_get_ex_data_implementation>:
  437600:	48 8b 05 99 33 22 00 	mov    0x223399(%rip),%rax        # 65a9a0 <impl>
  437607:	48 85 c0             	test   %rax,%rax
  43760a:	74 04                	je     437610 <CRYPTO_get_ex_data_implementation+0x10>
  43760c:	c3                   	retq   
  43760d:	0f 1f 00             	nopl   (%rax)
  437610:	48 83 ec 08          	sub    $0x8,%rsp
  437614:	b9 cb 00 00 00       	mov    $0xcb,%ecx
  437619:	ba 29 12 45 00       	mov    $0x451229,%edx
  43761e:	be 02 00 00 00       	mov    $0x2,%esi
  437623:	bf 09 00 00 00       	mov    $0x9,%edi
  437628:	e8 e3 d7 fe ff       	callq  424e10 <CRYPTO_lock>
  43762d:	48 83 3d 6b 33 22 00 	cmpq   $0x0,0x22336b(%rip)        # 65a9a0 <impl>
  437634:	00 
  437635:	74 29                	je     437660 <CRYPTO_get_ex_data_implementation+0x60>
  437637:	b9 ce 00 00 00       	mov    $0xce,%ecx
  43763c:	ba 29 12 45 00       	mov    $0x451229,%edx
  437641:	be 02 00 00 00       	mov    $0x2,%esi
  437646:	bf 0a 00 00 00       	mov    $0xa,%edi
  43764b:	e8 c0 d7 fe ff       	callq  424e10 <CRYPTO_lock>
  437650:	48 8b 05 49 33 22 00 	mov    0x223349(%rip),%rax        # 65a9a0 <impl>
  437657:	48 83 c4 08          	add    $0x8,%rsp
  43765b:	c3                   	retq   
  43765c:	0f 1f 40 00          	nopl   0x0(%rax)
  437660:	48 c7 05 35 33 22 00 	movq   $0x658900,0x223335(%rip)        # 65a9a0 <impl>
  437667:	00 89 65 00 
  43766b:	eb ca                	jmp    437637 <CRYPTO_get_ex_data_implementation+0x37>
  43766d:	0f 1f 00             	nopl   (%rax)

0000000000437670 <CRYPTO_set_ex_data_implementation>:
  437670:	55                   	push   %rbp
  437671:	53                   	push   %rbx
  437672:	48 89 fd             	mov    %rdi,%rbp
  437675:	b9 dd 00 00 00       	mov    $0xdd,%ecx
  43767a:	ba 29 12 45 00       	mov    $0x451229,%edx
  43767f:	be 02 00 00 00       	mov    $0x2,%esi
  437684:	48 83 ec 08          	sub    $0x8,%rsp
  437688:	bf 09 00 00 00       	mov    $0x9,%edi
  43768d:	31 db                	xor    %ebx,%ebx
  43768f:	e8 7c d7 fe ff       	callq  424e10 <CRYPTO_lock>
  437694:	48 83 3d 04 33 22 00 	cmpq   $0x0,0x223304(%rip)        # 65a9a0 <impl>
  43769b:	00 
  43769c:	74 22                	je     4376c0 <CRYPTO_set_ex_data_implementation+0x50>
  43769e:	b9 e3 00 00 00       	mov    $0xe3,%ecx
  4376a3:	ba 29 12 45 00       	mov    $0x451229,%edx
  4376a8:	be 02 00 00 00       	mov    $0x2,%esi
  4376ad:	bf 0a 00 00 00       	mov    $0xa,%edi
  4376b2:	e8 59 d7 fe ff       	callq  424e10 <CRYPTO_lock>
  4376b7:	48 83 c4 08          	add    $0x8,%rsp
  4376bb:	89 d8                	mov    %ebx,%eax
  4376bd:	5b                   	pop    %rbx
  4376be:	5d                   	pop    %rbp
  4376bf:	c3                   	retq   
  4376c0:	48 89 2d d9 32 22 00 	mov    %rbp,0x2232d9(%rip)        # 65a9a0 <impl>
  4376c7:	b3 01                	mov    $0x1,%bl
  4376c9:	eb d3                	jmp    43769e <CRYPTO_set_ex_data_implementation+0x2e>
  4376cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000004376d0 <CRYPTO_ex_data_new_class>:
  4376d0:	48 8b 05 c9 32 22 00 	mov    0x2232c9(%rip),%rax        # 65a9a0 <impl>
  4376d7:	48 85 c0             	test   %rax,%rax
  4376da:	74 0c                	je     4376e8 <CRYPTO_ex_data_new_class+0x18>
  4376dc:	48 8b 00             	mov    (%rax),%rax
  4376df:	ff e0                	jmpq   *%rax
  4376e1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  4376e8:	48 83 ec 08          	sub    $0x8,%rsp
  4376ec:	b9 cb 00 00 00       	mov    $0xcb,%ecx
  4376f1:	ba 29 12 45 00       	mov    $0x451229,%edx
  4376f6:	be 02 00 00 00       	mov    $0x2,%esi
  4376fb:	bf 09 00 00 00       	mov    $0x9,%edi
  437700:	e8 0b d7 fe ff       	callq  424e10 <CRYPTO_lock>
  437705:	48 83 3d 93 32 22 00 	cmpq   $0x0,0x223293(%rip)        # 65a9a0 <impl>
  43770c:	00 
  43770d:	74 31                	je     437740 <CRYPTO_ex_data_new_class+0x70>
  43770f:	b9 ce 00 00 00       	mov    $0xce,%ecx
  437714:	ba 29 12 45 00       	mov    $0x451229,%edx
  437719:	be 02 00 00 00       	mov    $0x2,%esi
  43771e:	bf 0a 00 00 00       	mov    $0xa,%edi
  437723:	e8 e8 d6 fe ff       	callq  424e10 <CRYPTO_lock>
  437728:	48 8b 05 71 32 22 00 	mov    0x223271(%rip),%rax        # 65a9a0 <impl>
  43772f:	48 8b 00             	mov    (%rax),%rax
  437732:	48 83 c4 08          	add    $0x8,%rsp
  437736:	ff e0                	jmpq   *%rax
  437738:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  43773f:	00 
  437740:	48 c7 05 55 32 22 00 	movq   $0x658900,0x223255(%rip)        # 65a9a0 <impl>
  437747:	00 89 65 00 
  43774b:	eb c2                	jmp    43770f <CRYPTO_ex_data_new_class+0x3f>
  43774d:	0f 1f 00             	nopl   (%rax)

0000000000437750 <CRYPTO_cleanup_all_ex_data>:
  437750:	48 8b 05 49 32 22 00 	mov    0x223249(%rip),%rax        # 65a9a0 <impl>
  437757:	48 85 c0             	test   %rax,%rax
  43775a:	74 0c                	je     437768 <CRYPTO_cleanup_all_ex_data+0x18>
  43775c:	48 8b 40 08          	mov    0x8(%rax),%rax
  437760:	ff e0                	jmpq   *%rax
  437762:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  437768:	48 83 ec 08          	sub    $0x8,%rsp
  43776c:	b9 cb 00 00 00       	mov    $0xcb,%ecx
  437771:	ba 29 12 45 00       	mov    $0x451229,%edx
  437776:	be 02 00 00 00       	mov    $0x2,%esi
  43777b:	bf 09 00 00 00       	mov    $0x9,%edi
  437780:	e8 8b d6 fe ff       	callq  424e10 <CRYPTO_lock>
  437785:	48 83 3d 13 32 22 00 	cmpq   $0x0,0x223213(%rip)        # 65a9a0 <impl>
  43778c:	00 
  43778d:	74 31                	je     4377c0 <CRYPTO_cleanup_all_ex_data+0x70>
  43778f:	b9 ce 00 00 00       	mov    $0xce,%ecx
  437794:	ba 29 12 45 00       	mov    $0x451229,%edx
  437799:	be 02 00 00 00       	mov    $0x2,%esi
  43779e:	bf 0a 00 00 00       	mov    $0xa,%edi
  4377a3:	e8 68 d6 fe ff       	callq  424e10 <CRYPTO_lock>
  4377a8:	48 8b 05 f1 31 22 00 	mov    0x2231f1(%rip),%rax        # 65a9a0 <impl>
  4377af:	48 8b 40 08          	mov    0x8(%rax),%rax
  4377b3:	48 83 c4 08          	add    $0x8,%rsp
  4377b7:	ff e0                	jmpq   *%rax
  4377b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  4377c0:	48 c7 05 d5 31 22 00 	movq   $0x658900,0x2231d5(%rip)        # 65a9a0 <impl>
  4377c7:	00 89 65 00 
  4377cb:	eb c2                	jmp    43778f <CRYPTO_cleanup_all_ex_data+0x3f>
  4377cd:	0f 1f 00             	nopl   (%rax)

00000000004377d0 <CRYPTO_get_ex_new_index>:
  4377d0:	41 55                	push   %r13
  4377d2:	41 54                	push   %r12
  4377d4:	49 89 cd             	mov    %rcx,%r13
  4377d7:	55                   	push   %rbp
  4377d8:	53                   	push   %rbx
  4377d9:	48 89 f5             	mov    %rsi,%rbp
  4377dc:	89 fb                	mov    %edi,%ebx
  4377de:	49 89 d4             	mov    %rdx,%r12
  4377e1:	48 83 ec 18          	sub    $0x18,%rsp
  4377e5:	48 8b 05 b4 31 22 00 	mov    0x2231b4(%rip),%rax        # 65a9a0 <impl>
  4377ec:	48 85 c0             	test   %rax,%rax
  4377ef:	74 1f                	je     437810 <CRYPTO_get_ex_new_index+0x40>
  4377f1:	48 8b 40 10          	mov    0x10(%rax),%rax
  4377f5:	48 83 c4 18          	add    $0x18,%rsp
  4377f9:	4c 89 e9             	mov    %r13,%rcx
  4377fc:	4c 89 e2             	mov    %r12,%rdx
  4377ff:	48 89 ee             	mov    %rbp,%rsi
  437802:	89 df                	mov    %ebx,%edi
  437804:	5b                   	pop    %rbx
  437805:	5d                   	pop    %rbp
  437806:	41 5c                	pop    %r12
  437808:	41 5d                	pop    %r13
  43780a:	ff e0                	jmpq   *%rax
  43780c:	0f 1f 40 00          	nopl   0x0(%rax)
  437810:	b9 cb 00 00 00       	mov    $0xcb,%ecx
  437815:	ba 29 12 45 00       	mov    $0x451229,%edx
  43781a:	be 02 00 00 00       	mov    $0x2,%esi
  43781f:	bf 09 00 00 00       	mov    $0x9,%edi
  437824:	4c 89 4c 24 08       	mov    %r9,0x8(%rsp)
  437829:	4c 89 04 24          	mov    %r8,(%rsp)
  43782d:	e8 de d5 fe ff       	callq  424e10 <CRYPTO_lock>
  437832:	48 83 3d 66 31 22 00 	cmpq   $0x0,0x223166(%rip)        # 65a9a0 <impl>
  437839:	00 
  43783a:	4c 8b 04 24          	mov    (%rsp),%r8
  43783e:	4c 8b 4c 24 08       	mov    0x8(%rsp),%r9
  437843:	74 3b                	je     437880 <CRYPTO_get_ex_new_index+0xb0>
  437845:	b9 ce 00 00 00       	mov    $0xce,%ecx
  43784a:	ba 29 12 45 00       	mov    $0x451229,%edx
  43784f:	be 02 00 00 00       	mov    $0x2,%esi
  437854:	bf 0a 00 00 00       	mov    $0xa,%edi
  437859:	4c 89 4c 24 08       	mov    %r9,0x8(%rsp)
  43785e:	4c 89 04 24          	mov    %r8,(%rsp)
  437862:	e8 a9 d5 fe ff       	callq  424e10 <CRYPTO_lock>
  437867:	48 8b 05 32 31 22 00 	mov    0x223132(%rip),%rax        # 65a9a0 <impl>
  43786e:	4c 8b 4c 24 08       	mov    0x8(%rsp),%r9
  437873:	4c 8b 04 24          	mov    (%rsp),%r8
  437877:	e9 75 ff ff ff       	jmpq   4377f1 <CRYPTO_get_ex_new_index+0x21>
  43787c:	0f 1f 40 00          	nopl   0x0(%rax)
  437880:	48 c7 05 15 31 22 00 	movq   $0x658900,0x223115(%rip)        # 65a9a0 <impl>
  437887:	00 89 65 00 
  43788b:	eb b8                	jmp    437845 <CRYPTO_get_ex_new_index+0x75>
  43788d:	0f 1f 00             	nopl   (%rax)

0000000000437890 <CRYPTO_new_ex_data>:
  437890:	48 8b 05 09 31 22 00 	mov    0x223109(%rip),%rax        # 65a9a0 <impl>
  437897:	41 54                	push   %r12
  437899:	49 89 d4             	mov    %rdx,%r12
  43789c:	55                   	push   %rbp
  43789d:	48 89 f5             	mov    %rsi,%rbp
  4378a0:	53                   	push   %rbx
  4378a1:	89 fb                	mov    %edi,%ebx
  4378a3:	48 85 c0             	test   %rax,%rax
  4378a6:	74 18                	je     4378c0 <CRYPTO_new_ex_data+0x30>
  4378a8:	4c 89 e2             	mov    %r12,%rdx
  4378ab:	48 89 ee             	mov    %rbp,%rsi
  4378ae:	89 df                	mov    %ebx,%edi
  4378b0:	5b                   	pop    %rbx
  4378b1:	5d                   	pop    %rbp
  4378b2:	41 5c                	pop    %r12
  4378b4:	48 8b 40 18          	mov    0x18(%rax),%rax
  4378b8:	ff e0                	jmpq   *%rax
  4378ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  4378c0:	b9 cb 00 00 00       	mov    $0xcb,%ecx
  4378c5:	ba 29 12 45 00       	mov    $0x451229,%edx
  4378ca:	be 02 00 00 00       	mov    $0x2,%esi
  4378cf:	bf 09 00 00 00       	mov    $0x9,%edi
  4378d4:	e8 37 d5 fe ff       	callq  424e10 <CRYPTO_lock>
  4378d9:	48 83 3d bf 30 22 00 	cmpq   $0x0,0x2230bf(%rip)        # 65a9a0 <impl>
  4378e0:	00 
  4378e1:	74 25                	je     437908 <CRYPTO_new_ex_data+0x78>
  4378e3:	b9 ce 00 00 00       	mov    $0xce,%ecx
  4378e8:	ba 29 12 45 00       	mov    $0x451229,%edx
  4378ed:	be 02 00 00 00       	mov    $0x2,%esi
  4378f2:	bf 0a 00 00 00       	mov    $0xa,%edi
  4378f7:	e8 14 d5 fe ff       	callq  424e10 <CRYPTO_lock>
  4378fc:	48 8b 05 9d 30 22 00 	mov    0x22309d(%rip),%rax        # 65a9a0 <impl>
  437903:	eb a3                	jmp    4378a8 <CRYPTO_new_ex_data+0x18>
  437905:	0f 1f 00             	nopl   (%rax)
  437908:	48 c7 05 8d 30 22 00 	movq   $0x658900,0x22308d(%rip)        # 65a9a0 <impl>
  43790f:	00 89 65 00 
  437913:	eb ce                	jmp    4378e3 <CRYPTO_new_ex_data+0x53>
  437915:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  43791c:	00 00 00 00 

0000000000437920 <CRYPTO_dup_ex_data>:
  437920:	48 8b 05 79 30 22 00 	mov    0x223079(%rip),%rax        # 65a9a0 <impl>
  437927:	41 54                	push   %r12
  437929:	49 89 d4             	mov    %rdx,%r12
  43792c:	55                   	push   %rbp
  43792d:	48 89 f5             	mov    %rsi,%rbp
  437930:	53                   	push   %rbx
  437931:	89 fb                	mov    %edi,%ebx
  437933:	48 85 c0             	test   %rax,%rax
  437936:	74 18                	je     437950 <CRYPTO_dup_ex_data+0x30>
  437938:	4c 89 e2             	mov    %r12,%rdx
  43793b:	48 89 ee             	mov    %rbp,%rsi
  43793e:	89 df                	mov    %ebx,%edi
  437940:	5b                   	pop    %rbx
  437941:	5d                   	pop    %rbp
  437942:	41 5c                	pop    %r12
  437944:	48 8b 40 20          	mov    0x20(%rax),%rax
  437948:	ff e0                	jmpq   *%rax
  43794a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  437950:	b9 cb 00 00 00       	mov    $0xcb,%ecx
  437955:	ba 29 12 45 00       	mov    $0x451229,%edx
  43795a:	be 02 00 00 00       	mov    $0x2,%esi
  43795f:	bf 09 00 00 00       	mov    $0x9,%edi
  437964:	e8 a7 d4 fe ff       	callq  424e10 <CRYPTO_lock>
  437969:	48 83 3d 2f 30 22 00 	cmpq   $0x0,0x22302f(%rip)        # 65a9a0 <impl>
  437970:	00 
  437971:	74 25                	je     437998 <CRYPTO_dup_ex_data+0x78>
  437973:	b9 ce 00 00 00       	mov    $0xce,%ecx
  437978:	ba 29 12 45 00       	mov    $0x451229,%edx
  43797d:	be 02 00 00 00       	mov    $0x2,%esi
  437982:	bf 0a 00 00 00       	mov    $0xa,%edi
  437987:	e8 84 d4 fe ff       	callq  424e10 <CRYPTO_lock>
  43798c:	48 8b 05 0d 30 22 00 	mov    0x22300d(%rip),%rax        # 65a9a0 <impl>
  437993:	eb a3                	jmp    437938 <CRYPTO_dup_ex_data+0x18>
  437995:	0f 1f 00             	nopl   (%rax)
  437998:	48 c7 05 fd 2f 22 00 	movq   $0x658900,0x222ffd(%rip)        # 65a9a0 <impl>
  43799f:	00 89 65 00 
  4379a3:	eb ce                	jmp    437973 <CRYPTO_dup_ex_data+0x53>
  4379a5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  4379ac:	00 00 00 00 

00000000004379b0 <CRYPTO_free_ex_data>:
  4379b0:	48 8b 05 e9 2f 22 00 	mov    0x222fe9(%rip),%rax        # 65a9a0 <impl>
  4379b7:	41 54                	push   %r12
  4379b9:	49 89 d4             	mov    %rdx,%r12
  4379bc:	55                   	push   %rbp
  4379bd:	48 89 f5             	mov    %rsi,%rbp
  4379c0:	53                   	push   %rbx
  4379c1:	89 fb                	mov    %edi,%ebx
  4379c3:	48 85 c0             	test   %rax,%rax
  4379c6:	74 18                	je     4379e0 <CRYPTO_free_ex_data+0x30>
  4379c8:	4c 89 e2             	mov    %r12,%rdx
  4379cb:	48 89 ee             	mov    %rbp,%rsi
  4379ce:	89 df                	mov    %ebx,%edi
  4379d0:	5b                   	pop    %rbx
  4379d1:	5d                   	pop    %rbp
  4379d2:	41 5c                	pop    %r12
  4379d4:	48 8b 40 28          	mov    0x28(%rax),%rax
  4379d8:	ff e0                	jmpq   *%rax
  4379da:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  4379e0:	b9 cb 00 00 00       	mov    $0xcb,%ecx
  4379e5:	ba 29 12 45 00       	mov    $0x451229,%edx
  4379ea:	be 02 00 00 00       	mov    $0x2,%esi
  4379ef:	bf 09 00 00 00       	mov    $0x9,%edi
  4379f4:	e8 17 d4 fe ff       	callq  424e10 <CRYPTO_lock>
  4379f9:	48 83 3d 9f 2f 22 00 	cmpq   $0x0,0x222f9f(%rip)        # 65a9a0 <impl>
  437a00:	00 
  437a01:	74 25                	je     437a28 <CRYPTO_free_ex_data+0x78>
  437a03:	b9 ce 00 00 00       	mov    $0xce,%ecx
  437a08:	ba 29 12 45 00       	mov    $0x451229,%edx
  437a0d:	be 02 00 00 00       	mov    $0x2,%esi
  437a12:	bf 0a 00 00 00       	mov    $0xa,%edi
  437a17:	e8 f4 d3 fe ff       	callq  424e10 <CRYPTO_lock>
  437a1c:	48 8b 05 7d 2f 22 00 	mov    0x222f7d(%rip),%rax        # 65a9a0 <impl>
  437a23:	eb a3                	jmp    4379c8 <CRYPTO_free_ex_data+0x18>
  437a25:	0f 1f 00             	nopl   (%rax)
  437a28:	48 c7 05 6d 2f 22 00 	movq   $0x658900,0x222f6d(%rip)        # 65a9a0 <impl>
  437a2f:	00 89 65 00 
  437a33:	eb ce                	jmp    437a03 <CRYPTO_free_ex_data+0x53>
  437a35:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  437a3c:	00 00 00 00 

0000000000437a40 <CRYPTO_set_ex_data>:
  437a40:	41 55                	push   %r13
  437a42:	41 54                	push   %r12
  437a44:	49 89 d5             	mov    %rdx,%r13
  437a47:	55                   	push   %rbp
  437a48:	53                   	push   %rbx
  437a49:	48 89 fd             	mov    %rdi,%rbp
  437a4c:	41 89 f4             	mov    %esi,%r12d
  437a4f:	48 83 ec 18          	sub    $0x18,%rsp
  437a53:	48 8b 3f             	mov    (%rdi),%rdi
  437a56:	48 85 ff             	test   %rdi,%rdi
  437a59:	0f 84 81 00 00 00    	je     437ae0 <CRYPTO_set_ex_data+0xa0>
  437a5f:	e8 5c ed fe ff       	callq  4267c0 <sk_num>
  437a64:	44 39 e0             	cmp    %r12d,%eax
  437a67:	89 c3                	mov    %eax,%ebx
  437a69:	7e 0d                	jle    437a78 <CRYPTO_set_ex_data+0x38>
  437a6b:	eb 53                	jmp    437ac0 <CRYPTO_set_ex_data+0x80>
  437a6d:	0f 1f 00             	nopl   (%rax)
  437a70:	83 c3 01             	add    $0x1,%ebx
  437a73:	41 39 dc             	cmp    %ebx,%r12d
  437a76:	7c 48                	jl     437ac0 <CRYPTO_set_ex_data+0x80>
  437a78:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
  437a7c:	31 f6                	xor    %esi,%esi
  437a7e:	e8 4d ea fe ff       	callq  4264d0 <sk_push>
  437a83:	85 c0                	test   %eax,%eax
  437a85:	75 e9                	jne    437a70 <CRYPTO_set_ex_data+0x30>
  437a87:	41 b8 67 02 00 00    	mov    $0x267,%r8d
  437a8d:	b9 29 12 45 00       	mov    $0x451229,%ecx
  437a92:	ba 41 00 00 00       	mov    $0x41,%edx
  437a97:	be 66 00 00 00       	mov    $0x66,%esi
  437a9c:	bf 0f 00 00 00       	mov    $0xf,%edi
  437aa1:	89 44 24 0c          	mov    %eax,0xc(%rsp)
  437aa5:	e8 a6 08 ff ff       	callq  428350 <ERR_put_error>
  437aaa:	8b 44 24 0c          	mov    0xc(%rsp),%eax
  437aae:	48 83 c4 18          	add    $0x18,%rsp
  437ab2:	5b                   	pop    %rbx
  437ab3:	5d                   	pop    %rbp
  437ab4:	41 5c                	pop    %r12
  437ab6:	41 5d                	pop    %r13
  437ab8:	c3                   	retq   
  437ab9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  437ac0:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
  437ac4:	4c 89 ea             	mov    %r13,%rdx
  437ac7:	44 89 e6             	mov    %r12d,%esi
  437aca:	e8 31 ed fe ff       	callq  426800 <sk_set>
  437acf:	b8 01 00 00 00       	mov    $0x1,%eax
  437ad4:	48 83 c4 18          	add    $0x18,%rsp
  437ad8:	5b                   	pop    %rbx
  437ad9:	5d                   	pop    %rbp
  437ada:	41 5c                	pop    %r12
  437adc:	41 5d                	pop    %r13
  437ade:	c3                   	retq   
  437adf:	90                   	nop
  437ae0:	e8 bb e4 fe ff       	callq  425fa0 <sk_new_null>
  437ae5:	48 85 c0             	test   %rax,%rax
  437ae8:	48 89 45 00          	mov    %rax,0x0(%rbp)
  437aec:	48 89 c7             	mov    %rax,%rdi
  437aef:	0f 85 6a ff ff ff    	jne    437a5f <CRYPTO_set_ex_data+0x1f>
  437af5:	41 b8 5d 02 00 00    	mov    $0x25d,%r8d
  437afb:	b9 29 12 45 00       	mov    $0x451229,%ecx
  437b00:	ba 41 00 00 00       	mov    $0x41,%edx
  437b05:	be 66 00 00 00       	mov    $0x66,%esi
  437b0a:	40 b7 0f             	mov    $0xf,%dil
  437b0d:	e8 3e 08 ff ff       	callq  428350 <ERR_put_error>
  437b12:	31 c0                	xor    %eax,%eax
  437b14:	eb be                	jmp    437ad4 <CRYPTO_set_ex_data+0x94>
  437b16:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  437b1d:	00 00 00 

0000000000437b20 <CRYPTO_get_ex_data>:
  437b20:	48 89 f8             	mov    %rdi,%rax
  437b23:	48 8b 3f             	mov    (%rdi),%rdi
  437b26:	48 85 ff             	test   %rdi,%rdi
  437b29:	74 35                	je     437b60 <CRYPTO_get_ex_data+0x40>
  437b2b:	55                   	push   %rbp
  437b2c:	53                   	push   %rbx
  437b2d:	89 f5                	mov    %esi,%ebp
  437b2f:	48 89 c3             	mov    %rax,%rbx
  437b32:	48 83 ec 08          	sub    $0x8,%rsp
  437b36:	e8 85 ec fe ff       	callq  4267c0 <sk_num>
  437b3b:	39 e8                	cmp    %ebp,%eax
  437b3d:	7e 11                	jle    437b50 <CRYPTO_get_ex_data+0x30>
  437b3f:	48 8b 3b             	mov    (%rbx),%rdi
  437b42:	48 83 c4 08          	add    $0x8,%rsp
  437b46:	89 ee                	mov    %ebp,%esi
  437b48:	5b                   	pop    %rbx
  437b49:	5d                   	pop    %rbp
  437b4a:	e9 81 ec fe ff       	jmpq   4267d0 <sk_value>
  437b4f:	90                   	nop
  437b50:	48 83 c4 08          	add    $0x8,%rsp
  437b54:	31 c0                	xor    %eax,%eax
  437b56:	5b                   	pop    %rbx
  437b57:	5d                   	pop    %rbp
  437b58:	c3                   	retq   
  437b59:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  437b60:	31 c0                	xor    %eax,%eax
  437b62:	c3                   	retq   
  437b63:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  437b6a:	00 00 00 
  437b6d:	0f 1f 00             	nopl   (%rax)

0000000000437b70 <__libc_csu_init>:
  437b70:	41 57                	push   %r15
  437b72:	41 89 ff             	mov    %edi,%r15d
  437b75:	41 56                	push   %r14
  437b77:	49 89 f6             	mov    %rsi,%r14
  437b7a:	41 55                	push   %r13
  437b7c:	49 89 d5             	mov    %rdx,%r13
  437b7f:	41 54                	push   %r12
  437b81:	4c 8d 25 68 02 22 00 	lea    0x220268(%rip),%r12        # 657df0 <__frame_dummy_init_array_entry>
  437b88:	55                   	push   %rbp
  437b89:	48 8d 2d 68 02 22 00 	lea    0x220268(%rip),%rbp        # 657df8 <__init_array_end>
  437b90:	53                   	push   %rbx
  437b91:	4c 29 e5             	sub    %r12,%rbp
  437b94:	31 db                	xor    %ebx,%ebx
  437b96:	48 c1 fd 03          	sar    $0x3,%rbp
  437b9a:	48 83 ec 08          	sub    $0x8,%rsp
  437b9e:	e8 95 f0 fc ff       	callq  406c38 <_init>
  437ba3:	48 85 ed             	test   %rbp,%rbp
  437ba6:	74 1e                	je     437bc6 <__libc_csu_init+0x56>
  437ba8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  437baf:	00 
  437bb0:	4c 89 ea             	mov    %r13,%rdx
  437bb3:	4c 89 f6             	mov    %r14,%rsi
  437bb6:	44 89 ff             	mov    %r15d,%edi
  437bb9:	41 ff 14 dc          	callq  *(%r12,%rbx,8)
  437bbd:	48 83 c3 01          	add    $0x1,%rbx
  437bc1:	48 39 eb             	cmp    %rbp,%rbx
  437bc4:	75 ea                	jne    437bb0 <__libc_csu_init+0x40>
  437bc6:	48 83 c4 08          	add    $0x8,%rsp
  437bca:	5b                   	pop    %rbx
  437bcb:	5d                   	pop    %rbp
  437bcc:	41 5c                	pop    %r12
  437bce:	41 5d                	pop    %r13
  437bd0:	41 5e                	pop    %r14
  437bd2:	41 5f                	pop    %r15
  437bd4:	c3                   	retq   
  437bd5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
  437bdc:	00 00 00 00 

0000000000437be0 <__libc_csu_fini>:
  437be0:	f3 c3                	repz retq 
  437be2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  437be9:	00 00 00 
  437bec:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000437bf0 <__stat>:
  437bf0:	48 89 f2             	mov    %rsi,%rdx
  437bf3:	48 89 fe             	mov    %rdi,%rsi
  437bf6:	bf 01 00 00 00       	mov    $0x1,%edi
  437bfb:	e9 d0 f1 fc ff       	jmpq   406dd0 <__xstat@plt>

Disassembly of section .fini:

0000000000437c00 <_fini>:
  437c00:	48 83 ec 08          	sub    $0x8,%rsp
  437c04:	48 83 c4 08          	add    $0x8,%rsp
  437c08:	c3                   	retq   
