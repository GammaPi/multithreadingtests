CWD             = $(shell pwd)

USE_FAKE_CMG    = off
OPT             = on
DEBUG           = off
USE_HPM         = off
USE_GPROF       = off
USE_TAU         = off
USE_TAU_PDT     = off
USE_OPENMP      = on
STATIC_LINK     = off
CFLAGS_CMG      = 

ifeq ($(USE_FAKE_CMG),on)
  CFLAGS_CMG    += -DCMG_FAKE 
else
  LIBS 		+=
endif

HOST   = $(shell hostname)

ifneq (,$(findstring merl,$(HOST)))
	MACH = rzmerl
	CLASS = linux
endif

ifneq (,$(findstring seq,$(HOST)))
	MACH = bgq
	CLASS = bgq
endif

MACH = rzmerl
# START of platform specific stuff


#------------------------------------------------ RZMERL ----------------------------------------------------------
ifeq ($(MACH),rzmerl)
CFLAGS_CMG     += 

OPENMP_FLAGS    = -fopenmp 
FLIBS           =

CPPFLAGS += -DLINUX -DLinux -DUSE_MPI -DMPICH_SKIP_MPICXX $(GPROF_FLAGS)
CPPFFLAGS = -DLINUX -DLinux -Dmpi -DMPI -DUSE_MPI -DMPICH_SKIP_MPICXX $(OPENMP_FLAGS) $(GPROF_FLAGS)

# MPI Definitions
#MPI_INC_PATH    = -I/media/umass/datasystem/xin/openmpi-3.1.5/install/usr/local/include
MPI_INC_PATH    = -I/home/tpliu/xinzhao/openmp/build/runtime/src -I/usr/include/x86_64-linux-gnu/mpich/
#export LD_LIBRARY_PATH=/media/umass/datasystem/xin/openmpi-3.1.5/install/usr/local/lib
export LD_LIBRARY_PATH=/media/umass/datasystem/xin/openmpi-4.0.2/install/usr/local/lib
#MPI_LIB_PATH    = -L/media/umass/datasystem/xin/openmpi-3.1.5/install/usr/local/lib/
MPI_LIB_PATH    = -L/home/tpliu/xinzhao/openmp/build/runtime/src
MPI_LIBS        = -lmpi -lmpich  -libverbs -lpthread -lmpichfort -lgfortran -lomp
#MPI_LIBS        = -lfmpich -lmpichfarg -lmpich  -libverbs -lpthread -libumad 

FLIBS          += -lm -lc
#FLIBS          += -lifcore -lm -lc -lsvml
LIBS 	       += $(MPI_LIBS) 
LIBPATH 	= -L/usr/local/tools/ic-13.0.079/lib $(MPI_LIB_PATH)
INCPATH 	= $(MPI_INC_PATH)

#CXX		= mpiicpc
#CC		= mpiicc
OCC		= /home/tpliu/xinzhao/llvm-project-10.0.0/build/bin/clang++
#CC = /home/tpliu/xinzhao/llvm-project-10.0.0/build/bin/clang++ -ldl -finstrumenter -DUSE_MPI=1 -I/home/tpliu/xinzhao/openmp/build/runtime/src -I/usr/include/x86_64-linux-gnu/mpich/ -rdynamic /home/tpliu/xinzhao/NumaPerf/source/libnumaperf.so -lpthread -lmpi -lsupc++ 
CC		= $(OCC)
#CC		= mpicc
CXX = $(CC)
F90             = $(OCC)
#F90             = mpicc
#F90             = ifort
#FPP             = fpp
FPP             = $(OCC)

#F90FLAGS_OPT    =  -g -O3 -no-prec-div  -fPIC $(OPENMP_FLAGS)
#CXXFLAGS_OPT	=  -g -O3 -w  -no-prec-div -fPIC  $(OPENMP_FLAGS)
CFLAGS_OPT	=  -g -O3 -w -fno-tree-dce -fPIC  -lm -lpthread -lutil -ldl -std=c++14 $(OPENMP_FLAGS)
CXXFLAGS_OPT	=  $(CFLAGS_OPT)
F90FLAGS_OPT    =  $(CFLAGS_OPT)


LD              = $(CC)
LIB_EXT         = so
LDFLAGS         =  -shared -fPIC $(CFLAGS_OPT)

LINK            = $(CC)
#LINK            = $(CXX)
LINKFLAGS       = $(CXXFLAGS)

#
# These PLATFORM_*_EXTRAS flags are to add additional paths/libs for building 
# libInfrastructure.so, libTetonUtils.so and _TetonTest.so
#
# If linker generally needs lib paths..
#PLATFORM_LIBPATH_EXTRAS = -L/usr/local/tools/icc-11.1.073/lib/intel64/
PLATFORM_LIBPATH_EXTRAS = 

# Extra lib paths / libs for libInfrastructure.[a,so]
PLATFORM_Infrastructure_EXTRAS = $(OPENMP_FLAGS) $(MPI_LIB_PATH) $(MPI_LIBS)

# Extra lib paths / libs for libTetonUtils.[a,so]
PLATFORM_TetonUtils_EXTRAS = 

# Extra lib paths / libs for SuOlsonTest
PLATFORM_EXE_EXTRAS = $(OPENMP_FLAGS) -L../CMG_CLEAN/src -Wl,-rpath,$(CWD)/../CMG_CLEAN/src \
	-L../cmg2Kull/sources -Wl,-rpath,$(CWD)/../cmg2Kull/sources\
	-L../Teton -Wl,-rpath,$(CWD)/../Teton $(MPI_LIB_PATH) $(MPI_LIBS) -ldl 

# Extra lib paths / libs for _TetonTest.so
PLATFORM_TetonTest_EXTRAS = $(OPENMP_FLAGS) $(MPI_LIB_PATH) -L$(CWD)/../CMG_CLEAN/src -Wl,-rpath,$(CWD)/../CMG_CLEAN/src \
	-L$(CWD)/../cmg2Kull/sources -Wl,-rpath,$(CWD)/../cmg2Kull/sources \
	-L$(CWD)/../Teton -Wl,-rpath,$(CWD)/../Teton \
	-L$(CWD)/../Install/lib -Wl,-rpath,$(CWD)/../Install/lib \
	-lm -lpthread -lutil -ldl $(FLIBS)

%.o: %.F90
	$(FPP) $(CPPFFLAGS) $(INCPATH) $< -c 
	$(F90) $(F90FLAGS) -c $*.F90 -o $@

endif # ifeq ($(MACH),rzmerl)

# END of platform specific stuff

#------------------------------------------------ END ----------------------------------------------------------


CXXFLAGS = $(CFLAGS_CMG) $(INCPATH)
CFLAGS = $(CFLAGS_CMG) $(INCPATH)
F90FLAGS = $(INCPATH)

ifeq ($(OPT),on)
  CXXFLAGS += $(CXXFLAGS_OPT) 
  CFLAGS += $(CFLAGS_OPT) 
  F90FLAGS += $(F90FLAGS_OPT) 
endif

ifeq ($(DEBUG),on)
  CXXFLAGS += $(CXXFLAGS_DEBUG) 
  CFLAGS += $(CFLAGS_DEBUG) 
  F90FLAGS += $(F90FLAGS_DEBUG) 
endif

F90FLAGS +=  $(CPPFFLAGS)

%.o : %.cc
	echo '2222222222222222222'
	$(CC) -c $(CFLAGS) $(CPPFLAGS) $< -o $@

%.d: %.cc
	${CC} -c $(CFLAGS_CMG) $(CPPFLAGS) $(INCPATH) $< -MM -MF $@


